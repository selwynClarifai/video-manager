// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/concept_trainer_dump/concept_trainer_dump.proto

#include "proto/concept_trainer_dump/concept_trainer_dump.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptClassifierDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConceptTrainerDump_ClassifiersEntry_DoNotUse_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
class ConceptTrainerDump_ClassifiersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConceptTrainerDump_ClassifiersEntry_DoNotUse> _instance;
} _ConceptTrainerDump_ClassifiersEntry_DoNotUse_default_instance_;
class ConceptTrainerDumpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConceptTrainerDump> _instance;
} _ConceptTrainerDump_default_instance_;
class ConceptClassifierDumpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConceptClassifierDump> _instance;
} _ConceptClassifierDump_default_instance_;
static void InitDefaultsscc_info_ConceptClassifierDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConceptClassifierDump_default_instance_;
    new (ptr) ::ConceptClassifierDump();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConceptClassifierDump::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptClassifierDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConceptClassifierDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto}, {}};

static void InitDefaultsscc_info_ConceptTrainerDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConceptTrainerDump_default_instance_;
    new (ptr) ::ConceptTrainerDump();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConceptTrainerDump::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConceptTrainerDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConceptTrainerDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ConceptTrainerDump_ClassifiersEntry_DoNotUse_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto.base,}};

static void InitDefaultsscc_info_ConceptTrainerDump_ClassifiersEntry_DoNotUse_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConceptTrainerDump_ClassifiersEntry_DoNotUse_default_instance_;
    new (ptr) ::ConceptTrainerDump_ClassifiersEntry_DoNotUse();
  }
  ::ConceptTrainerDump_ClassifiersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConceptTrainerDump_ClassifiersEntry_DoNotUse_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConceptTrainerDump_ClassifiersEntry_DoNotUse_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto}, {
      &scc_info_ConceptClassifierDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump_ClassifiersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump_ClassifiersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump_ClassifiersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump_ClassifiersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump, version_),
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump, update_time_),
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump, classifiers_),
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump, embeddings_model_),
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump, training_type_),
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump, feature_normalization_),
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump, tf_graph_proto_),
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump, tf_frozen_meta_graph_),
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump, aiids_),
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump, training_environment_),
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump, concept_ids_),
  PROTOBUF_FIELD_OFFSET(::ConceptTrainerDump, missing_positive_example_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConceptClassifierDump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConceptClassifierDump, classifier_type_),
  PROTOBUF_FIELD_OFFSET(::ConceptClassifierDump, weight_),
  PROTOBUF_FIELD_OFFSET(::ConceptClassifierDump, bias_),
  PROTOBUF_FIELD_OFFSET(::ConceptClassifierDump, norm_),
  PROTOBUF_FIELD_OFFSET(::ConceptClassifierDump, logistic_temp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ConceptTrainerDump_ClassifiersEntry_DoNotUse)},
  { 9, -1, sizeof(::ConceptTrainerDump)},
  { 26, -1, sizeof(::ConceptClassifierDump)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConceptTrainerDump_ClassifiersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConceptTrainerDump_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConceptClassifierDump_default_instance_),
};

const char descriptor_table_protodef_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5proto/concept_trainer_dump/concept_tra"
  "iner_dump.proto\032\037google/protobuf/timesta"
  "mp.proto\"\222\004\n\022ConceptTrainerDump\022\017\n\007versi"
  "on\030\001 \001(\005\022/\n\013update_time\030\002 \001(\0132\032.google.p"
  "rotobuf.Timestamp\0229\n\013classifiers\030\003 \003(\0132$"
  ".ConceptTrainerDump.ClassifiersEntry\022\030\n\020"
  "embeddings_model\030\004 \001(\t\022$\n\rtraining_type\030"
  "\005 \001(\0162\r.TrainingType\022\035\n\025feature_normaliz"
  "ation\030\006 \001(\010\022\026\n\016tf_graph_proto\030\007 \001(\014\022\034\n\024t"
  "f_frozen_meta_graph\030\010 \001(\014\022\r\n\005aiids\030\t \003(\t"
  "\0222\n\024training_environment\030\n \001(\0162\024.Trainin"
  "gEnvironment\022\023\n\013concept_ids\030\013 \003(\t\022F\n\037mis"
  "sing_positive_example_policy\030\014 \001(\0162\035.Mis"
  "singPositiveExamplePolicy\032J\n\020Classifiers"
  "Entry\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 \001(\0132\026.Conc"
  "eptClassifierDump:\0028\001\"{\n\025ConceptClassifi"
  "erDump\022\027\n\017classifier_type\030\001 \001(\t\022\022\n\006weigh"
  "t\030\002 \003(\002B\002\020\001\022\014\n\004bias\030\003 \001(\002\022\020\n\004norm\030\004 \001(\002B"
  "\002\030\001\022\025\n\rlogistic_temp\030\005 \001(\002*(\n\014TrainingTy"
  "pe\022\n\n\006M_VS_N\020\000\022\014\n\010ONE_VS_N\020\001*+\n\023Training"
  "Environment\022\010\n\004OPEN\020\000\022\n\n\006CLOSED\020\001*L\n\034Mis"
  "singPositiveExamplePolicy\022\036\n\032SAMPLE_NEGA"
  "TIVE_EMBEDDINGS\020\000\022\014\n\010DISALLOW\020\001B\026Z\024conce"
  "pt_trainer_dumpb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto_sccs[3] = {
  &scc_info_ConceptClassifierDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto.base,
  &scc_info_ConceptTrainerDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto.base,
  &scc_info_ConceptTrainerDump_ClassifiersEntry_DoNotUse_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto = {
  false, false, descriptor_table_protodef_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto, "proto/concept_trainer_dump/concept_trainer_dump.proto", 943,
  &descriptor_table_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto_once, descriptor_table_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto_sccs, descriptor_table_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto::offsets,
  file_level_metadata_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto, 3, file_level_enum_descriptors_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto, file_level_service_descriptors_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrainingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto);
  return file_level_enum_descriptors_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto[0];
}
bool TrainingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrainingEnvironment_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto);
  return file_level_enum_descriptors_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto[1];
}
bool TrainingEnvironment_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissingPositiveExamplePolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto);
  return file_level_enum_descriptors_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto[2];
}
bool MissingPositiveExamplePolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

ConceptTrainerDump_ClassifiersEntry_DoNotUse::ConceptTrainerDump_ClassifiersEntry_DoNotUse() {}
ConceptTrainerDump_ClassifiersEntry_DoNotUse::ConceptTrainerDump_ClassifiersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ConceptTrainerDump_ClassifiersEntry_DoNotUse::MergeFrom(const ConceptTrainerDump_ClassifiersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ConceptTrainerDump_ClassifiersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ConceptTrainerDump_ClassifiersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ConceptTrainerDump::InitAsDefaultInstance() {
  ::_ConceptTrainerDump_default_instance_._instance.get_mutable()->update_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class ConceptTrainerDump::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const ConceptTrainerDump* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ConceptTrainerDump::_Internal::update_time(const ConceptTrainerDump* msg) {
  return *msg->update_time_;
}
void ConceptTrainerDump::clear_update_time() {
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
ConceptTrainerDump::ConceptTrainerDump(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  classifiers_(arena),
  aiids_(arena),
  concept_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ConceptTrainerDump)
}
ConceptTrainerDump::ConceptTrainerDump(const ConceptTrainerDump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      aiids_(from.aiids_),
      concept_ids_(from.concept_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  classifiers_.MergeFrom(from.classifiers_);
  embeddings_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_embeddings_model().empty()) {
    embeddings_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_embeddings_model(),
      GetArena());
  }
  tf_graph_proto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tf_graph_proto().empty()) {
    tf_graph_proto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tf_graph_proto(),
      GetArena());
  }
  tf_frozen_meta_graph_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tf_frozen_meta_graph().empty()) {
    tf_frozen_meta_graph_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tf_frozen_meta_graph(),
      GetArena());
  }
  if (from._internal_has_update_time()) {
    update_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&missing_positive_example_policy_) -
    reinterpret_cast<char*>(&version_)) + sizeof(missing_positive_example_policy_));
  // @@protoc_insertion_point(copy_constructor:ConceptTrainerDump)
}

void ConceptTrainerDump::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConceptTrainerDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto.base);
  embeddings_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tf_graph_proto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tf_frozen_meta_graph_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&update_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&missing_positive_example_policy_) -
      reinterpret_cast<char*>(&update_time_)) + sizeof(missing_positive_example_policy_));
}

ConceptTrainerDump::~ConceptTrainerDump() {
  // @@protoc_insertion_point(destructor:ConceptTrainerDump)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConceptTrainerDump::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  embeddings_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tf_graph_proto_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tf_frozen_meta_graph_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete update_time_;
}

void ConceptTrainerDump::ArenaDtor(void* object) {
  ConceptTrainerDump* _this = reinterpret_cast< ConceptTrainerDump* >(object);
  (void)_this;
}
void ConceptTrainerDump::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConceptTrainerDump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConceptTrainerDump& ConceptTrainerDump::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConceptTrainerDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto.base);
  return *internal_default_instance();
}


void ConceptTrainerDump::Clear() {
// @@protoc_insertion_point(message_clear_start:ConceptTrainerDump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifiers_.Clear();
  aiids_.Clear();
  concept_ids_.Clear();
  embeddings_model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tf_graph_proto_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tf_frozen_meta_graph_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&missing_positive_example_policy_) -
      reinterpret_cast<char*>(&version_)) + sizeof(missing_positive_example_policy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptTrainerDump::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .ConceptClassifierDump> classifiers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&classifiers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string embeddings_model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_embeddings_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConceptTrainerDump.embeddings_model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TrainingType training_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_training_type(static_cast<::TrainingType>(val));
        } else goto handle_unusual;
        continue;
      // bool feature_normalization = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          feature_normalization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tf_graph_proto = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_tf_graph_proto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tf_frozen_meta_graph = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_tf_frozen_meta_graph();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string aiids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aiids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConceptTrainerDump.aiids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .TrainingEnvironment training_environment = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_training_environment(static_cast<::TrainingEnvironment>(val));
        } else goto handle_unusual;
        continue;
      // repeated string concept_ids = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConceptTrainerDump.concept_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .MissingPositiveExamplePolicy missing_positive_example_policy = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_missing_positive_example_policy(static_cast<::MissingPositiveExamplePolicy>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConceptTrainerDump::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConceptTrainerDump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // .google.protobuf.Timestamp update_time = 2;
  if (this->has_update_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::update_time(this), target, stream);
  }

  // map<string, .ConceptClassifierDump> classifiers = 3;
  if (!this->_internal_classifiers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ConceptClassifierDump >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ConceptTrainerDump.ClassifiersEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_classifiers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_classifiers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ConceptClassifierDump >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ConceptClassifierDump >::const_iterator
          it = this->_internal_classifiers().begin();
          it != this->_internal_classifiers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ConceptTrainerDump_ClassifiersEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ConceptClassifierDump >::const_iterator
          it = this->_internal_classifiers().begin();
          it != this->_internal_classifiers().end(); ++it) {
        target = ConceptTrainerDump_ClassifiersEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string embeddings_model = 4;
  if (this->embeddings_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_embeddings_model().data(), static_cast<int>(this->_internal_embeddings_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConceptTrainerDump.embeddings_model");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_embeddings_model(), target);
  }

  // .TrainingType training_type = 5;
  if (this->training_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_training_type(), target);
  }

  // bool feature_normalization = 6;
  if (this->feature_normalization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_feature_normalization(), target);
  }

  // bytes tf_graph_proto = 7;
  if (this->tf_graph_proto().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_tf_graph_proto(), target);
  }

  // bytes tf_frozen_meta_graph = 8;
  if (this->tf_frozen_meta_graph().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_tf_frozen_meta_graph(), target);
  }

  // repeated string aiids = 9;
  for (int i = 0, n = this->_internal_aiids_size(); i < n; i++) {
    const auto& s = this->_internal_aiids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConceptTrainerDump.aiids");
    target = stream->WriteString(9, s, target);
  }

  // .TrainingEnvironment training_environment = 10;
  if (this->training_environment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_training_environment(), target);
  }

  // repeated string concept_ids = 11;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConceptTrainerDump.concept_ids");
    target = stream->WriteString(11, s, target);
  }

  // .MissingPositiveExamplePolicy missing_positive_example_policy = 12;
  if (this->missing_positive_example_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_missing_positive_example_policy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConceptTrainerDump)
  return target;
}

size_t ConceptTrainerDump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConceptTrainerDump)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ConceptClassifierDump> classifiers = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_classifiers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ConceptClassifierDump >::const_iterator
      it = this->_internal_classifiers().begin();
      it != this->_internal_classifiers().end(); ++it) {
    total_size += ConceptTrainerDump_ClassifiersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string aiids = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(aiids_.size());
  for (int i = 0, n = aiids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      aiids_.Get(i));
  }

  // repeated string concept_ids = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(concept_ids_.size());
  for (int i = 0, n = concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      concept_ids_.Get(i));
  }

  // string embeddings_model = 4;
  if (this->embeddings_model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_embeddings_model());
  }

  // bytes tf_graph_proto = 7;
  if (this->tf_graph_proto().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tf_graph_proto());
  }

  // bytes tf_frozen_meta_graph = 8;
  if (this->tf_frozen_meta_graph().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tf_frozen_meta_graph());
  }

  // .google.protobuf.Timestamp update_time = 2;
  if (this->has_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // .TrainingType training_type = 5;
  if (this->training_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_training_type());
  }

  // bool feature_normalization = 6;
  if (this->feature_normalization() != 0) {
    total_size += 1 + 1;
  }

  // .TrainingEnvironment training_environment = 10;
  if (this->training_environment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_training_environment());
  }

  // .MissingPositiveExamplePolicy missing_positive_example_policy = 12;
  if (this->missing_positive_example_policy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_missing_positive_example_policy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConceptTrainerDump::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConceptTrainerDump)
  GOOGLE_DCHECK_NE(&from, this);
  const ConceptTrainerDump* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConceptTrainerDump>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConceptTrainerDump)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConceptTrainerDump)
    MergeFrom(*source);
  }
}

void ConceptTrainerDump::MergeFrom(const ConceptTrainerDump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConceptTrainerDump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classifiers_.MergeFrom(from.classifiers_);
  aiids_.MergeFrom(from.aiids_);
  concept_ids_.MergeFrom(from.concept_ids_);
  if (from.embeddings_model().size() > 0) {
    _internal_set_embeddings_model(from._internal_embeddings_model());
  }
  if (from.tf_graph_proto().size() > 0) {
    _internal_set_tf_graph_proto(from._internal_tf_graph_proto());
  }
  if (from.tf_frozen_meta_graph().size() > 0) {
    _internal_set_tf_frozen_meta_graph(from._internal_tf_frozen_meta_graph());
  }
  if (from.has_update_time()) {
    _internal_mutable_update_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.training_type() != 0) {
    _internal_set_training_type(from._internal_training_type());
  }
  if (from.feature_normalization() != 0) {
    _internal_set_feature_normalization(from._internal_feature_normalization());
  }
  if (from.training_environment() != 0) {
    _internal_set_training_environment(from._internal_training_environment());
  }
  if (from.missing_positive_example_policy() != 0) {
    _internal_set_missing_positive_example_policy(from._internal_missing_positive_example_policy());
  }
}

void ConceptTrainerDump::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConceptTrainerDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConceptTrainerDump::CopyFrom(const ConceptTrainerDump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConceptTrainerDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptTrainerDump::IsInitialized() const {
  return true;
}

void ConceptTrainerDump::InternalSwap(ConceptTrainerDump* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  classifiers_.Swap(&other->classifiers_);
  aiids_.InternalSwap(&other->aiids_);
  concept_ids_.InternalSwap(&other->concept_ids_);
  embeddings_model_.Swap(&other->embeddings_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tf_graph_proto_.Swap(&other->tf_graph_proto_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tf_frozen_meta_graph_.Swap(&other->tf_frozen_meta_graph_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConceptTrainerDump, missing_positive_example_policy_)
      + sizeof(ConceptTrainerDump::missing_positive_example_policy_)
      - PROTOBUF_FIELD_OFFSET(ConceptTrainerDump, update_time_)>(
          reinterpret_cast<char*>(&update_time_),
          reinterpret_cast<char*>(&other->update_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptTrainerDump::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConceptClassifierDump::InitAsDefaultInstance() {
}
class ConceptClassifierDump::_Internal {
 public:
};

ConceptClassifierDump::ConceptClassifierDump(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  weight_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ConceptClassifierDump)
}
ConceptClassifierDump::ConceptClassifierDump(const ConceptClassifierDump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      weight_(from.weight_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  classifier_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_classifier_type().empty()) {
    classifier_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_classifier_type(),
      GetArena());
  }
  ::memcpy(&bias_, &from.bias_,
    static_cast<size_t>(reinterpret_cast<char*>(&logistic_temp_) -
    reinterpret_cast<char*>(&bias_)) + sizeof(logistic_temp_));
  // @@protoc_insertion_point(copy_constructor:ConceptClassifierDump)
}

void ConceptClassifierDump::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConceptClassifierDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto.base);
  classifier_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logistic_temp_) -
      reinterpret_cast<char*>(&bias_)) + sizeof(logistic_temp_));
}

ConceptClassifierDump::~ConceptClassifierDump() {
  // @@protoc_insertion_point(destructor:ConceptClassifierDump)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConceptClassifierDump::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  classifier_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConceptClassifierDump::ArenaDtor(void* object) {
  ConceptClassifierDump* _this = reinterpret_cast< ConceptClassifierDump* >(object);
  (void)_this;
}
void ConceptClassifierDump::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConceptClassifierDump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConceptClassifierDump& ConceptClassifierDump::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConceptClassifierDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto.base);
  return *internal_default_instance();
}


void ConceptClassifierDump::Clear() {
// @@protoc_insertion_point(message_clear_start:ConceptClassifierDump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_.Clear();
  classifier_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logistic_temp_) -
      reinterpret_cast<char*>(&bias_)) + sizeof(logistic_temp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptClassifierDump::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string classifier_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_classifier_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConceptClassifierDump.classifier_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float weight = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_weight(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float norm = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          norm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float logistic_temp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          logistic_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConceptClassifierDump::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConceptClassifierDump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string classifier_type = 1;
  if (this->classifier_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_classifier_type().data(), static_cast<int>(this->_internal_classifier_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConceptClassifierDump.classifier_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_classifier_type(), target);
  }

  // repeated float weight = 2 [packed = true];
  if (this->_internal_weight_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_weight(), target);
  }

  // float bias = 3;
  if (!(this->bias() <= 0 && this->bias() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_bias(), target);
  }

  // float norm = 4 [deprecated = true];
  if (!(this->norm() <= 0 && this->norm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_norm(), target);
  }

  // float logistic_temp = 5;
  if (!(this->logistic_temp() <= 0 && this->logistic_temp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_logistic_temp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConceptClassifierDump)
  return target;
}

size_t ConceptClassifierDump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConceptClassifierDump)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float weight = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_weight_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _weight_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string classifier_type = 1;
  if (this->classifier_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classifier_type());
  }

  // float bias = 3;
  if (!(this->bias() <= 0 && this->bias() >= 0)) {
    total_size += 1 + 4;
  }

  // float norm = 4 [deprecated = true];
  if (!(this->norm() <= 0 && this->norm() >= 0)) {
    total_size += 1 + 4;
  }

  // float logistic_temp = 5;
  if (!(this->logistic_temp() <= 0 && this->logistic_temp() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConceptClassifierDump::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConceptClassifierDump)
  GOOGLE_DCHECK_NE(&from, this);
  const ConceptClassifierDump* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConceptClassifierDump>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConceptClassifierDump)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConceptClassifierDump)
    MergeFrom(*source);
  }
}

void ConceptClassifierDump::MergeFrom(const ConceptClassifierDump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConceptClassifierDump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weight_.MergeFrom(from.weight_);
  if (from.classifier_type().size() > 0) {
    _internal_set_classifier_type(from._internal_classifier_type());
  }
  if (!(from.bias() <= 0 && from.bias() >= 0)) {
    _internal_set_bias(from._internal_bias());
  }
  if (!(from.norm() <= 0 && from.norm() >= 0)) {
    _internal_set_norm(from._internal_norm());
  }
  if (!(from.logistic_temp() <= 0 && from.logistic_temp() >= 0)) {
    _internal_set_logistic_temp(from._internal_logistic_temp());
  }
}

void ConceptClassifierDump::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConceptClassifierDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConceptClassifierDump::CopyFrom(const ConceptClassifierDump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConceptClassifierDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptClassifierDump::IsInitialized() const {
  return true;
}

void ConceptClassifierDump::InternalSwap(ConceptClassifierDump* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  weight_.InternalSwap(&other->weight_);
  classifier_type_.Swap(&other->classifier_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConceptClassifierDump, logistic_temp_)
      + sizeof(ConceptClassifierDump::logistic_temp_)
      - PROTOBUF_FIELD_OFFSET(ConceptClassifierDump, bias_)>(
          reinterpret_cast<char*>(&bias_),
          reinterpret_cast<char*>(&other->bias_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptClassifierDump::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ConceptTrainerDump_ClassifiersEntry_DoNotUse* Arena::CreateMaybeMessage< ::ConceptTrainerDump_ClassifiersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConceptTrainerDump_ClassifiersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConceptTrainerDump* Arena::CreateMaybeMessage< ::ConceptTrainerDump >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConceptTrainerDump >(arena);
}
template<> PROTOBUF_NOINLINE ::ConceptClassifierDump* Arena::CreateMaybeMessage< ::ConceptClassifierDump >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConceptClassifierDump >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
