// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/color/color.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fcolor_2fcolor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fcolor_2fcolor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/color_result.pb.h"
#include "proto/utils/databatch.pb.h"
#include "proto/utils/request_meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fcolor_2fcolor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcolor_2fcolor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcolor_2fcolor_2eproto;
class ColorPredictRequest;
class ColorPredictRequestDefaultTypeInternal;
extern ColorPredictRequestDefaultTypeInternal _ColorPredictRequest_default_instance_;
class ColorPredictResponse;
class ColorPredictResponseDefaultTypeInternal;
extern ColorPredictResponseDefaultTypeInternal _ColorPredictResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ColorPredictRequest* Arena::CreateMaybeMessage<::ColorPredictRequest>(Arena*);
template<> ::ColorPredictResponse* Arena::CreateMaybeMessage<::ColorPredictResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ColorPredictRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColorPredictRequest) */ {
 public:
  inline ColorPredictRequest() : ColorPredictRequest(nullptr) {}
  virtual ~ColorPredictRequest();

  ColorPredictRequest(const ColorPredictRequest& from);
  ColorPredictRequest(ColorPredictRequest&& from) noexcept
    : ColorPredictRequest() {
    *this = ::std::move(from);
  }

  inline ColorPredictRequest& operator=(const ColorPredictRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPredictRequest& operator=(ColorPredictRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorPredictRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorPredictRequest* internal_default_instance() {
    return reinterpret_cast<const ColorPredictRequest*>(
               &_ColorPredictRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ColorPredictRequest& a, ColorPredictRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPredictRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPredictRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorPredictRequest* New() const final {
    return CreateMaybeMessage<ColorPredictRequest>(nullptr);
  }

  ColorPredictRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorPredictRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorPredictRequest& from);
  void MergeFrom(const ColorPredictRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPredictRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColorPredictRequest";
  }
  protected:
  explicit ColorPredictRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fcolor_2fcolor_2eproto);
    return ::descriptor_table_proto_2fcolor_2fcolor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .DataBatch data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DataBatch& data() const;
  ::DataBatch* release_data();
  ::DataBatch* mutable_data();
  void set_allocated_data(::DataBatch* data);
  private:
  const ::DataBatch& _internal_data() const;
  ::DataBatch* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DataBatch* data);
  ::DataBatch* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:ColorPredictRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::RequestMeta* meta_;
  ::DataBatch* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcolor_2fcolor_2eproto;
};
// -------------------------------------------------------------------

class ColorPredictResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColorPredictResponse) */ {
 public:
  inline ColorPredictResponse() : ColorPredictResponse(nullptr) {}
  virtual ~ColorPredictResponse();

  ColorPredictResponse(const ColorPredictResponse& from);
  ColorPredictResponse(ColorPredictResponse&& from) noexcept
    : ColorPredictResponse() {
    *this = ::std::move(from);
  }

  inline ColorPredictResponse& operator=(const ColorPredictResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPredictResponse& operator=(ColorPredictResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorPredictResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorPredictResponse* internal_default_instance() {
    return reinterpret_cast<const ColorPredictResponse*>(
               &_ColorPredictResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ColorPredictResponse& a, ColorPredictResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPredictResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPredictResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorPredictResponse* New() const final {
    return CreateMaybeMessage<ColorPredictResponse>(nullptr);
  }

  ColorPredictResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorPredictResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorPredictResponse& from);
  void MergeFrom(const ColorPredictResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPredictResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColorPredictResponse";
  }
  protected:
  explicit ColorPredictResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fcolor_2fcolor_2eproto);
    return ::descriptor_table_proto_2fcolor_2fcolor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .ColorResult result = 2;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::ColorResult* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColorResult >*
      mutable_result();
  private:
  const ::ColorResult& _internal_result(int index) const;
  ::ColorResult* _internal_add_result();
  public:
  const ::ColorResult& result(int index) const;
  ::ColorResult* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColorResult >&
      result() const;

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:ColorPredictResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColorResult > result_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcolor_2fcolor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ColorPredictRequest

// .RequestMeta meta = 1;
inline bool ColorPredictRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool ColorPredictRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& ColorPredictRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& ColorPredictRequest::meta() const {
  // @@protoc_insertion_point(field_get:ColorPredictRequest.meta)
  return _internal_meta();
}
inline void ColorPredictRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ColorPredictRequest.meta)
}
inline ::RequestMeta* ColorPredictRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* ColorPredictRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:ColorPredictRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* ColorPredictRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* ColorPredictRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:ColorPredictRequest.meta)
  return _internal_mutable_meta();
}
inline void ColorPredictRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:ColorPredictRequest.meta)
}

// .DataBatch data = 2;
inline bool ColorPredictRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ColorPredictRequest::has_data() const {
  return _internal_has_data();
}
inline const ::DataBatch& ColorPredictRequest::_internal_data() const {
  const ::DataBatch* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& ColorPredictRequest::data() const {
  // @@protoc_insertion_point(field_get:ColorPredictRequest.data)
  return _internal_data();
}
inline void ColorPredictRequest::unsafe_arena_set_allocated_data(
    ::DataBatch* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ColorPredictRequest.data)
}
inline ::DataBatch* ColorPredictRequest::release_data() {
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* ColorPredictRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:ColorPredictRequest.data)
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DataBatch* ColorPredictRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::DataBatch* ColorPredictRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ColorPredictRequest.data)
  return _internal_mutable_data();
}
inline void ColorPredictRequest::set_allocated_data(::DataBatch* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:ColorPredictRequest.data)
}

// -------------------------------------------------------------------

// ColorPredictResponse

// .ResponseStatus status = 1;
inline bool ColorPredictResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ColorPredictResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& ColorPredictResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& ColorPredictResponse::status() const {
  // @@protoc_insertion_point(field_get:ColorPredictResponse.status)
  return _internal_status();
}
inline void ColorPredictResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ColorPredictResponse.status)
}
inline ::ResponseStatus* ColorPredictResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* ColorPredictResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:ColorPredictResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* ColorPredictResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* ColorPredictResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:ColorPredictResponse.status)
  return _internal_mutable_status();
}
inline void ColorPredictResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:ColorPredictResponse.status)
}

// repeated .ColorResult result = 2;
inline int ColorPredictResponse::_internal_result_size() const {
  return result_.size();
}
inline int ColorPredictResponse::result_size() const {
  return _internal_result_size();
}
inline ::ColorResult* ColorPredictResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:ColorPredictResponse.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColorResult >*
ColorPredictResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:ColorPredictResponse.result)
  return &result_;
}
inline const ::ColorResult& ColorPredictResponse::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::ColorResult& ColorPredictResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:ColorPredictResponse.result)
  return _internal_result(index);
}
inline ::ColorResult* ColorPredictResponse::_internal_add_result() {
  return result_.Add();
}
inline ::ColorResult* ColorPredictResponse::add_result() {
  // @@protoc_insertion_point(field_add:ColorPredictResponse.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColorResult >&
ColorPredictResponse::result() const {
  // @@protoc_insertion_point(field_list:ColorPredictResponse.result)
  return result_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fcolor_2fcolor_2eproto
