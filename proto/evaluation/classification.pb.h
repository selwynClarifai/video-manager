// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/evaluation/classification.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fevaluation_2fclassification_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fevaluation_2fclassification_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fevaluation_2fclassification_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fevaluation_2fclassification_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fevaluation_2fclassification_2eproto;
class ClassificationEvalResult;
class ClassificationEvalResultDefaultTypeInternal;
extern ClassificationEvalResultDefaultTypeInternal _ClassificationEvalResult_default_instance_;
class ClassificationEvalSubset;
class ClassificationEvalSubsetDefaultTypeInternal;
extern ClassificationEvalSubsetDefaultTypeInternal _ClassificationEvalSubset_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClassificationEvalResult* Arena::CreateMaybeMessage<::ClassificationEvalResult>(Arena*);
template<> ::ClassificationEvalSubset* Arena::CreateMaybeMessage<::ClassificationEvalSubset>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ClassificationEvalResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClassificationEvalResult) */ {
 public:
  inline ClassificationEvalResult() : ClassificationEvalResult(nullptr) {}
  virtual ~ClassificationEvalResult();

  ClassificationEvalResult(const ClassificationEvalResult& from);
  ClassificationEvalResult(ClassificationEvalResult&& from) noexcept
    : ClassificationEvalResult() {
    *this = ::std::move(from);
  }

  inline ClassificationEvalResult& operator=(const ClassificationEvalResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassificationEvalResult& operator=(ClassificationEvalResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClassificationEvalResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassificationEvalResult* internal_default_instance() {
    return reinterpret_cast<const ClassificationEvalResult*>(
               &_ClassificationEvalResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClassificationEvalResult& a, ClassificationEvalResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassificationEvalResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassificationEvalResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassificationEvalResult* New() const final {
    return CreateMaybeMessage<ClassificationEvalResult>(nullptr);
  }

  ClassificationEvalResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassificationEvalResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClassificationEvalResult& from);
  void MergeFrom(const ClassificationEvalResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassificationEvalResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClassificationEvalResult";
  }
  protected:
  explicit ClassificationEvalResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fevaluation_2fclassification_2eproto);
    return ::descriptor_table_proto_2fevaluation_2fclassification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubsetsFieldNumber = 3,
    kTop1CorrectFieldNumber = 1,
    kTopkCorrectFieldNumber = 2,
  };
  // repeated .ClassificationEvalSubset subsets = 3;
  int subsets_size() const;
  private:
  int _internal_subsets_size() const;
  public:
  void clear_subsets();
  ::ClassificationEvalSubset* mutable_subsets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClassificationEvalSubset >*
      mutable_subsets();
  private:
  const ::ClassificationEvalSubset& _internal_subsets(int index) const;
  ::ClassificationEvalSubset* _internal_add_subsets();
  public:
  const ::ClassificationEvalSubset& subsets(int index) const;
  ::ClassificationEvalSubset* add_subsets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClassificationEvalSubset >&
      subsets() const;

  // double top1_correct = 1;
  void clear_top1_correct();
  double top1_correct() const;
  void set_top1_correct(double value);
  private:
  double _internal_top1_correct() const;
  void _internal_set_top1_correct(double value);
  public:

  // double topk_correct = 2;
  void clear_topk_correct();
  double topk_correct() const;
  void set_topk_correct(double value);
  private:
  double _internal_topk_correct() const;
  void _internal_set_topk_correct(double value);
  public:

  // @@protoc_insertion_point(class_scope:ClassificationEvalResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClassificationEvalSubset > subsets_;
  double top1_correct_;
  double topk_correct_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevaluation_2fclassification_2eproto;
};
// -------------------------------------------------------------------

class ClassificationEvalSubset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClassificationEvalSubset) */ {
 public:
  inline ClassificationEvalSubset() : ClassificationEvalSubset(nullptr) {}
  virtual ~ClassificationEvalSubset();

  ClassificationEvalSubset(const ClassificationEvalSubset& from);
  ClassificationEvalSubset(ClassificationEvalSubset&& from) noexcept
    : ClassificationEvalSubset() {
    *this = ::std::move(from);
  }

  inline ClassificationEvalSubset& operator=(const ClassificationEvalSubset& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassificationEvalSubset& operator=(ClassificationEvalSubset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClassificationEvalSubset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassificationEvalSubset* internal_default_instance() {
    return reinterpret_cast<const ClassificationEvalSubset*>(
               &_ClassificationEvalSubset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClassificationEvalSubset& a, ClassificationEvalSubset& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassificationEvalSubset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassificationEvalSubset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassificationEvalSubset* New() const final {
    return CreateMaybeMessage<ClassificationEvalSubset>(nullptr);
  }

  ClassificationEvalSubset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassificationEvalSubset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClassificationEvalSubset& from);
  void MergeFrom(const ClassificationEvalSubset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassificationEvalSubset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClassificationEvalSubset";
  }
  protected:
  explicit ClassificationEvalSubset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fevaluation_2fclassification_2eproto);
    return ::descriptor_table_proto_2fevaluation_2fclassification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptNameFieldNumber = 1,
    kConceptIdFieldNumber = 2,
    kTop1CorrectFieldNumber = 10,
    kTopkCorrectFieldNumber = 11,
    kAucFieldNumber = 12,
    kPrecisionAt50FieldNumber = 13,
    kRecallAt50FieldNumber = 14,
    kNumGtImagesFieldNumber = 17,
  };
  // string concept_name = 1;
  void clear_concept_name();
  const std::string& concept_name() const;
  void set_concept_name(const std::string& value);
  void set_concept_name(std::string&& value);
  void set_concept_name(const char* value);
  void set_concept_name(const char* value, size_t size);
  std::string* mutable_concept_name();
  std::string* release_concept_name();
  void set_allocated_concept_name(std::string* concept_name);
  private:
  const std::string& _internal_concept_name() const;
  void _internal_set_concept_name(const std::string& value);
  std::string* _internal_mutable_concept_name();
  public:

  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  void set_concept_id(const std::string& value);
  void set_concept_id(std::string&& value);
  void set_concept_id(const char* value);
  void set_concept_id(const char* value, size_t size);
  std::string* mutable_concept_id();
  std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // double top1_correct = 10;
  void clear_top1_correct();
  double top1_correct() const;
  void set_top1_correct(double value);
  private:
  double _internal_top1_correct() const;
  void _internal_set_top1_correct(double value);
  public:

  // double topk_correct = 11;
  void clear_topk_correct();
  double topk_correct() const;
  void set_topk_correct(double value);
  private:
  double _internal_topk_correct() const;
  void _internal_set_topk_correct(double value);
  public:

  // double auc = 12;
  void clear_auc();
  double auc() const;
  void set_auc(double value);
  private:
  double _internal_auc() const;
  void _internal_set_auc(double value);
  public:

  // double precision_at_50 = 13;
  void clear_precision_at_50();
  double precision_at_50() const;
  void set_precision_at_50(double value);
  private:
  double _internal_precision_at_50() const;
  void _internal_set_precision_at_50(double value);
  public:

  // double recall_at_50 = 14;
  void clear_recall_at_50();
  double recall_at_50() const;
  void set_recall_at_50(double value);
  private:
  double _internal_recall_at_50() const;
  void _internal_set_recall_at_50(double value);
  public:

  // int64 num_gt_images = 17;
  void clear_num_gt_images();
  ::PROTOBUF_NAMESPACE_ID::int64 num_gt_images() const;
  void set_num_gt_images(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_gt_images() const;
  void _internal_set_num_gt_images(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ClassificationEvalSubset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  double top1_correct_;
  double topk_correct_;
  double auc_;
  double precision_at_50_;
  double recall_at_50_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_gt_images_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevaluation_2fclassification_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClassificationEvalResult

// double top1_correct = 1;
inline void ClassificationEvalResult::clear_top1_correct() {
  top1_correct_ = 0;
}
inline double ClassificationEvalResult::_internal_top1_correct() const {
  return top1_correct_;
}
inline double ClassificationEvalResult::top1_correct() const {
  // @@protoc_insertion_point(field_get:ClassificationEvalResult.top1_correct)
  return _internal_top1_correct();
}
inline void ClassificationEvalResult::_internal_set_top1_correct(double value) {
  
  top1_correct_ = value;
}
inline void ClassificationEvalResult::set_top1_correct(double value) {
  _internal_set_top1_correct(value);
  // @@protoc_insertion_point(field_set:ClassificationEvalResult.top1_correct)
}

// double topk_correct = 2;
inline void ClassificationEvalResult::clear_topk_correct() {
  topk_correct_ = 0;
}
inline double ClassificationEvalResult::_internal_topk_correct() const {
  return topk_correct_;
}
inline double ClassificationEvalResult::topk_correct() const {
  // @@protoc_insertion_point(field_get:ClassificationEvalResult.topk_correct)
  return _internal_topk_correct();
}
inline void ClassificationEvalResult::_internal_set_topk_correct(double value) {
  
  topk_correct_ = value;
}
inline void ClassificationEvalResult::set_topk_correct(double value) {
  _internal_set_topk_correct(value);
  // @@protoc_insertion_point(field_set:ClassificationEvalResult.topk_correct)
}

// repeated .ClassificationEvalSubset subsets = 3;
inline int ClassificationEvalResult::_internal_subsets_size() const {
  return subsets_.size();
}
inline int ClassificationEvalResult::subsets_size() const {
  return _internal_subsets_size();
}
inline void ClassificationEvalResult::clear_subsets() {
  subsets_.Clear();
}
inline ::ClassificationEvalSubset* ClassificationEvalResult::mutable_subsets(int index) {
  // @@protoc_insertion_point(field_mutable:ClassificationEvalResult.subsets)
  return subsets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClassificationEvalSubset >*
ClassificationEvalResult::mutable_subsets() {
  // @@protoc_insertion_point(field_mutable_list:ClassificationEvalResult.subsets)
  return &subsets_;
}
inline const ::ClassificationEvalSubset& ClassificationEvalResult::_internal_subsets(int index) const {
  return subsets_.Get(index);
}
inline const ::ClassificationEvalSubset& ClassificationEvalResult::subsets(int index) const {
  // @@protoc_insertion_point(field_get:ClassificationEvalResult.subsets)
  return _internal_subsets(index);
}
inline ::ClassificationEvalSubset* ClassificationEvalResult::_internal_add_subsets() {
  return subsets_.Add();
}
inline ::ClassificationEvalSubset* ClassificationEvalResult::add_subsets() {
  // @@protoc_insertion_point(field_add:ClassificationEvalResult.subsets)
  return _internal_add_subsets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClassificationEvalSubset >&
ClassificationEvalResult::subsets() const {
  // @@protoc_insertion_point(field_list:ClassificationEvalResult.subsets)
  return subsets_;
}

// -------------------------------------------------------------------

// ClassificationEvalSubset

// string concept_name = 1;
inline void ClassificationEvalSubset::clear_concept_name() {
  concept_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClassificationEvalSubset::concept_name() const {
  // @@protoc_insertion_point(field_get:ClassificationEvalSubset.concept_name)
  return _internal_concept_name();
}
inline void ClassificationEvalSubset::set_concept_name(const std::string& value) {
  _internal_set_concept_name(value);
  // @@protoc_insertion_point(field_set:ClassificationEvalSubset.concept_name)
}
inline std::string* ClassificationEvalSubset::mutable_concept_name() {
  // @@protoc_insertion_point(field_mutable:ClassificationEvalSubset.concept_name)
  return _internal_mutable_concept_name();
}
inline const std::string& ClassificationEvalSubset::_internal_concept_name() const {
  return concept_name_.Get();
}
inline void ClassificationEvalSubset::_internal_set_concept_name(const std::string& value) {
  
  concept_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClassificationEvalSubset::set_concept_name(std::string&& value) {
  
  concept_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClassificationEvalSubset.concept_name)
}
inline void ClassificationEvalSubset::set_concept_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concept_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ClassificationEvalSubset.concept_name)
}
inline void ClassificationEvalSubset::set_concept_name(const char* value,
    size_t size) {
  
  concept_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClassificationEvalSubset.concept_name)
}
inline std::string* ClassificationEvalSubset::_internal_mutable_concept_name() {
  
  return concept_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClassificationEvalSubset::release_concept_name() {
  // @@protoc_insertion_point(field_release:ClassificationEvalSubset.concept_name)
  return concept_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClassificationEvalSubset::set_allocated_concept_name(std::string* concept_name) {
  if (concept_name != nullptr) {
    
  } else {
    
  }
  concept_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClassificationEvalSubset.concept_name)
}

// string concept_id = 2;
inline void ClassificationEvalSubset::clear_concept_id() {
  concept_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClassificationEvalSubset::concept_id() const {
  // @@protoc_insertion_point(field_get:ClassificationEvalSubset.concept_id)
  return _internal_concept_id();
}
inline void ClassificationEvalSubset::set_concept_id(const std::string& value) {
  _internal_set_concept_id(value);
  // @@protoc_insertion_point(field_set:ClassificationEvalSubset.concept_id)
}
inline std::string* ClassificationEvalSubset::mutable_concept_id() {
  // @@protoc_insertion_point(field_mutable:ClassificationEvalSubset.concept_id)
  return _internal_mutable_concept_id();
}
inline const std::string& ClassificationEvalSubset::_internal_concept_id() const {
  return concept_id_.Get();
}
inline void ClassificationEvalSubset::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClassificationEvalSubset::set_concept_id(std::string&& value) {
  
  concept_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClassificationEvalSubset.concept_id)
}
inline void ClassificationEvalSubset::set_concept_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ClassificationEvalSubset.concept_id)
}
inline void ClassificationEvalSubset::set_concept_id(const char* value,
    size_t size) {
  
  concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClassificationEvalSubset.concept_id)
}
inline std::string* ClassificationEvalSubset::_internal_mutable_concept_id() {
  
  return concept_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClassificationEvalSubset::release_concept_id() {
  // @@protoc_insertion_point(field_release:ClassificationEvalSubset.concept_id)
  return concept_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClassificationEvalSubset::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClassificationEvalSubset.concept_id)
}

// double top1_correct = 10;
inline void ClassificationEvalSubset::clear_top1_correct() {
  top1_correct_ = 0;
}
inline double ClassificationEvalSubset::_internal_top1_correct() const {
  return top1_correct_;
}
inline double ClassificationEvalSubset::top1_correct() const {
  // @@protoc_insertion_point(field_get:ClassificationEvalSubset.top1_correct)
  return _internal_top1_correct();
}
inline void ClassificationEvalSubset::_internal_set_top1_correct(double value) {
  
  top1_correct_ = value;
}
inline void ClassificationEvalSubset::set_top1_correct(double value) {
  _internal_set_top1_correct(value);
  // @@protoc_insertion_point(field_set:ClassificationEvalSubset.top1_correct)
}

// double topk_correct = 11;
inline void ClassificationEvalSubset::clear_topk_correct() {
  topk_correct_ = 0;
}
inline double ClassificationEvalSubset::_internal_topk_correct() const {
  return topk_correct_;
}
inline double ClassificationEvalSubset::topk_correct() const {
  // @@protoc_insertion_point(field_get:ClassificationEvalSubset.topk_correct)
  return _internal_topk_correct();
}
inline void ClassificationEvalSubset::_internal_set_topk_correct(double value) {
  
  topk_correct_ = value;
}
inline void ClassificationEvalSubset::set_topk_correct(double value) {
  _internal_set_topk_correct(value);
  // @@protoc_insertion_point(field_set:ClassificationEvalSubset.topk_correct)
}

// double auc = 12;
inline void ClassificationEvalSubset::clear_auc() {
  auc_ = 0;
}
inline double ClassificationEvalSubset::_internal_auc() const {
  return auc_;
}
inline double ClassificationEvalSubset::auc() const {
  // @@protoc_insertion_point(field_get:ClassificationEvalSubset.auc)
  return _internal_auc();
}
inline void ClassificationEvalSubset::_internal_set_auc(double value) {
  
  auc_ = value;
}
inline void ClassificationEvalSubset::set_auc(double value) {
  _internal_set_auc(value);
  // @@protoc_insertion_point(field_set:ClassificationEvalSubset.auc)
}

// double precision_at_50 = 13;
inline void ClassificationEvalSubset::clear_precision_at_50() {
  precision_at_50_ = 0;
}
inline double ClassificationEvalSubset::_internal_precision_at_50() const {
  return precision_at_50_;
}
inline double ClassificationEvalSubset::precision_at_50() const {
  // @@protoc_insertion_point(field_get:ClassificationEvalSubset.precision_at_50)
  return _internal_precision_at_50();
}
inline void ClassificationEvalSubset::_internal_set_precision_at_50(double value) {
  
  precision_at_50_ = value;
}
inline void ClassificationEvalSubset::set_precision_at_50(double value) {
  _internal_set_precision_at_50(value);
  // @@protoc_insertion_point(field_set:ClassificationEvalSubset.precision_at_50)
}

// double recall_at_50 = 14;
inline void ClassificationEvalSubset::clear_recall_at_50() {
  recall_at_50_ = 0;
}
inline double ClassificationEvalSubset::_internal_recall_at_50() const {
  return recall_at_50_;
}
inline double ClassificationEvalSubset::recall_at_50() const {
  // @@protoc_insertion_point(field_get:ClassificationEvalSubset.recall_at_50)
  return _internal_recall_at_50();
}
inline void ClassificationEvalSubset::_internal_set_recall_at_50(double value) {
  
  recall_at_50_ = value;
}
inline void ClassificationEvalSubset::set_recall_at_50(double value) {
  _internal_set_recall_at_50(value);
  // @@protoc_insertion_point(field_set:ClassificationEvalSubset.recall_at_50)
}

// int64 num_gt_images = 17;
inline void ClassificationEvalSubset::clear_num_gt_images() {
  num_gt_images_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClassificationEvalSubset::_internal_num_gt_images() const {
  return num_gt_images_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClassificationEvalSubset::num_gt_images() const {
  // @@protoc_insertion_point(field_get:ClassificationEvalSubset.num_gt_images)
  return _internal_num_gt_images();
}
inline void ClassificationEvalSubset::_internal_set_num_gt_images(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_gt_images_ = value;
}
inline void ClassificationEvalSubset::set_num_gt_images(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_gt_images(value);
  // @@protoc_insertion_point(field_set:ClassificationEvalSubset.num_gt_images)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fevaluation_2fclassification_2eproto
