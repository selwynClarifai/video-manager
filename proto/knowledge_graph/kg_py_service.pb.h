// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/knowledge_graph/kg_py_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/clarifai/api/resources.pb.h"
#include "proto/utils/request_meta.pb.h"
#include "proto/utils/data_example.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto;
namespace clarifai {
namespace api {
class ConceptEmbeddingDump;
class ConceptEmbeddingDumpDefaultTypeInternal;
extern ConceptEmbeddingDumpDefaultTypeInternal _ConceptEmbeddingDump_default_instance_;
class ConceptMap;
class ConceptMapDefaultTypeInternal;
extern ConceptMapDefaultTypeInternal _ConceptMap_default_instance_;
class CustomerDataDump;
class CustomerDataDumpDefaultTypeInternal;
extern CustomerDataDumpDefaultTypeInternal _CustomerDataDump_default_instance_;
class PostKnowledgeGraphMatchRequest;
class PostKnowledgeGraphMatchRequestDefaultTypeInternal;
extern PostKnowledgeGraphMatchRequestDefaultTypeInternal _PostKnowledgeGraphMatchRequest_default_instance_;
class PostKnowledgeGraphMatchResponse;
class PostKnowledgeGraphMatchResponseDefaultTypeInternal;
extern PostKnowledgeGraphMatchResponseDefaultTypeInternal _PostKnowledgeGraphMatchResponse_default_instance_;
}  // namespace api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> ::clarifai::api::ConceptEmbeddingDump* Arena::CreateMaybeMessage<::clarifai::api::ConceptEmbeddingDump>(Arena*);
template<> ::clarifai::api::ConceptMap* Arena::CreateMaybeMessage<::clarifai::api::ConceptMap>(Arena*);
template<> ::clarifai::api::CustomerDataDump* Arena::CreateMaybeMessage<::clarifai::api::CustomerDataDump>(Arena*);
template<> ::clarifai::api::PostKnowledgeGraphMatchRequest* Arena::CreateMaybeMessage<::clarifai::api::PostKnowledgeGraphMatchRequest>(Arena*);
template<> ::clarifai::api::PostKnowledgeGraphMatchResponse* Arena::CreateMaybeMessage<::clarifai::api::PostKnowledgeGraphMatchResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clarifai {
namespace api {

// ===================================================================

class ConceptMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptMap) */ {
 public:
  inline ConceptMap() : ConceptMap(nullptr) {}
  virtual ~ConceptMap();

  ConceptMap(const ConceptMap& from);
  ConceptMap(ConceptMap&& from) noexcept
    : ConceptMap() {
    *this = ::std::move(from);
  }

  inline ConceptMap& operator=(const ConceptMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptMap& operator=(ConceptMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptMap* internal_default_instance() {
    return reinterpret_cast<const ConceptMap*>(
               &_ConceptMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConceptMap& a, ConceptMap& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConceptMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptMap* New() const final {
    return CreateMaybeMessage<ConceptMap>(nullptr);
  }

  ConceptMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptMap& from);
  void MergeFrom(const ConceptMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptMap";
  }
  protected:
  explicit ConceptMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto);
    return ::descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldenConceptFieldNumber = 2,
    kCustomerConceptFieldNumber = 1,
  };
  // repeated .clarifai.api.Concept golden_concept = 2;
  int golden_concept_size() const;
  private:
  int _internal_golden_concept_size() const;
  public:
  void clear_golden_concept();
  ::clarifai::api::Concept* mutable_golden_concept(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_golden_concept();
  private:
  const ::clarifai::api::Concept& _internal_golden_concept(int index) const;
  ::clarifai::api::Concept* _internal_add_golden_concept();
  public:
  const ::clarifai::api::Concept& golden_concept(int index) const;
  ::clarifai::api::Concept* add_golden_concept();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      golden_concept() const;

  // .clarifai.api.Concept customer_concept = 1;
  bool has_customer_concept() const;
  private:
  bool _internal_has_customer_concept() const;
  public:
  void clear_customer_concept();
  const ::clarifai::api::Concept& customer_concept() const;
  ::clarifai::api::Concept* release_customer_concept();
  ::clarifai::api::Concept* mutable_customer_concept();
  void set_allocated_customer_concept(::clarifai::api::Concept* customer_concept);
  private:
  const ::clarifai::api::Concept& _internal_customer_concept() const;
  ::clarifai::api::Concept* _internal_mutable_customer_concept();
  public:
  void unsafe_arena_set_allocated_customer_concept(
      ::clarifai::api::Concept* customer_concept);
  ::clarifai::api::Concept* unsafe_arena_release_customer_concept();

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > golden_concept_;
  ::clarifai::api::Concept* customer_concept_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ConceptEmbeddingDump PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptEmbeddingDump) */ {
 public:
  inline ConceptEmbeddingDump() : ConceptEmbeddingDump(nullptr) {}
  virtual ~ConceptEmbeddingDump();

  ConceptEmbeddingDump(const ConceptEmbeddingDump& from);
  ConceptEmbeddingDump(ConceptEmbeddingDump&& from) noexcept
    : ConceptEmbeddingDump() {
    *this = ::std::move(from);
  }

  inline ConceptEmbeddingDump& operator=(const ConceptEmbeddingDump& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptEmbeddingDump& operator=(ConceptEmbeddingDump&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptEmbeddingDump& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptEmbeddingDump* internal_default_instance() {
    return reinterpret_cast<const ConceptEmbeddingDump*>(
               &_ConceptEmbeddingDump_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConceptEmbeddingDump& a, ConceptEmbeddingDump& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptEmbeddingDump* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConceptEmbeddingDump* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptEmbeddingDump* New() const final {
    return CreateMaybeMessage<ConceptEmbeddingDump>(nullptr);
  }

  ConceptEmbeddingDump* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptEmbeddingDump>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptEmbeddingDump& from);
  void MergeFrom(const ConceptEmbeddingDump& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptEmbeddingDump* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptEmbeddingDump";
  }
  protected:
  explicit ConceptEmbeddingDump(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto);
    return ::descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExampleFieldNumber = 2,
    kLocationFieldNumber = 1,
  };
  // repeated .DataExample example = 2;
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  ::DataExample* mutable_example(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataExample >*
      mutable_example();
  private:
  const ::DataExample& _internal_example(int index) const;
  ::DataExample* _internal_add_example();
  public:
  const ::DataExample& example(int index) const;
  ::DataExample* add_example();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataExample >&
      example() const;

  // string location = 1;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptEmbeddingDump)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataExample > example_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CustomerDataDump PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.CustomerDataDump) */ {
 public:
  inline CustomerDataDump() : CustomerDataDump(nullptr) {}
  virtual ~CustomerDataDump();

  CustomerDataDump(const CustomerDataDump& from);
  CustomerDataDump(CustomerDataDump&& from) noexcept
    : CustomerDataDump() {
    *this = ::std::move(from);
  }

  inline CustomerDataDump& operator=(const CustomerDataDump& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomerDataDump& operator=(CustomerDataDump&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomerDataDump& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomerDataDump* internal_default_instance() {
    return reinterpret_cast<const CustomerDataDump*>(
               &_CustomerDataDump_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CustomerDataDump& a, CustomerDataDump& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomerDataDump* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomerDataDump* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomerDataDump* New() const final {
    return CreateMaybeMessage<CustomerDataDump>(nullptr);
  }

  CustomerDataDump* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomerDataDump>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomerDataDump& from);
  void MergeFrom(const CustomerDataDump& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerDataDump* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.CustomerDataDump";
  }
  protected:
  explicit CustomerDataDump(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto);
    return ::descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExampleFieldNumber = 2,
    kLocaitonFieldNumber = 1,
  };
  // repeated .DataExample example = 2;
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  ::DataExample* mutable_example(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataExample >*
      mutable_example();
  private:
  const ::DataExample& _internal_example(int index) const;
  ::DataExample* _internal_add_example();
  public:
  const ::DataExample& example(int index) const;
  ::DataExample* add_example();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataExample >&
      example() const;

  // string locaiton = 1;
  void clear_locaiton();
  const std::string& locaiton() const;
  void set_locaiton(const std::string& value);
  void set_locaiton(std::string&& value);
  void set_locaiton(const char* value);
  void set_locaiton(const char* value, size_t size);
  std::string* mutable_locaiton();
  std::string* release_locaiton();
  void set_allocated_locaiton(std::string* locaiton);
  private:
  const std::string& _internal_locaiton() const;
  void _internal_set_locaiton(const std::string& value);
  std::string* _internal_mutable_locaiton();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.CustomerDataDump)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataExample > example_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locaiton_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PostKnowledgeGraphMatchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostKnowledgeGraphMatchRequest) */ {
 public:
  inline PostKnowledgeGraphMatchRequest() : PostKnowledgeGraphMatchRequest(nullptr) {}
  virtual ~PostKnowledgeGraphMatchRequest();

  PostKnowledgeGraphMatchRequest(const PostKnowledgeGraphMatchRequest& from);
  PostKnowledgeGraphMatchRequest(PostKnowledgeGraphMatchRequest&& from) noexcept
    : PostKnowledgeGraphMatchRequest() {
    *this = ::std::move(from);
  }

  inline PostKnowledgeGraphMatchRequest& operator=(const PostKnowledgeGraphMatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostKnowledgeGraphMatchRequest& operator=(PostKnowledgeGraphMatchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostKnowledgeGraphMatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostKnowledgeGraphMatchRequest* internal_default_instance() {
    return reinterpret_cast<const PostKnowledgeGraphMatchRequest*>(
               &_PostKnowledgeGraphMatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PostKnowledgeGraphMatchRequest& a, PostKnowledgeGraphMatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostKnowledgeGraphMatchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostKnowledgeGraphMatchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostKnowledgeGraphMatchRequest* New() const final {
    return CreateMaybeMessage<PostKnowledgeGraphMatchRequest>(nullptr);
  }

  PostKnowledgeGraphMatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostKnowledgeGraphMatchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostKnowledgeGraphMatchRequest& from);
  void MergeFrom(const PostKnowledgeGraphMatchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostKnowledgeGraphMatchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostKnowledgeGraphMatchRequest";
  }
  protected:
  explicit PostKnowledgeGraphMatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto);
    return ::descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShareableConceptEmbeddingsFieldNumber = 7,
    kMetaFieldNumber = 1,
    kCustomerDataFieldNumber = 6,
    kChildrenFieldNumber = 2,
    kSiblingsFieldNumber = 3,
    kMaxDepthFieldNumber = 4,
    kMaxWidthFieldNumber = 5,
  };
  // repeated .clarifai.api.ConceptEmbeddingDump shareable_concept_embeddings = 7;
  int shareable_concept_embeddings_size() const;
  private:
  int _internal_shareable_concept_embeddings_size() const;
  public:
  void clear_shareable_concept_embeddings();
  ::clarifai::api::ConceptEmbeddingDump* mutable_shareable_concept_embeddings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptEmbeddingDump >*
      mutable_shareable_concept_embeddings();
  private:
  const ::clarifai::api::ConceptEmbeddingDump& _internal_shareable_concept_embeddings(int index) const;
  ::clarifai::api::ConceptEmbeddingDump* _internal_add_shareable_concept_embeddings();
  public:
  const ::clarifai::api::ConceptEmbeddingDump& shareable_concept_embeddings(int index) const;
  ::clarifai::api::ConceptEmbeddingDump* add_shareable_concept_embeddings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptEmbeddingDump >&
      shareable_concept_embeddings() const;

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .clarifai.api.CustomerDataDump customer_data = 6;
  bool has_customer_data() const;
  private:
  bool _internal_has_customer_data() const;
  public:
  void clear_customer_data();
  const ::clarifai::api::CustomerDataDump& customer_data() const;
  ::clarifai::api::CustomerDataDump* release_customer_data();
  ::clarifai::api::CustomerDataDump* mutable_customer_data();
  void set_allocated_customer_data(::clarifai::api::CustomerDataDump* customer_data);
  private:
  const ::clarifai::api::CustomerDataDump& _internal_customer_data() const;
  ::clarifai::api::CustomerDataDump* _internal_mutable_customer_data();
  public:
  void unsafe_arena_set_allocated_customer_data(
      ::clarifai::api::CustomerDataDump* customer_data);
  ::clarifai::api::CustomerDataDump* unsafe_arena_release_customer_data();

  // bool children = 2;
  void clear_children();
  bool children() const;
  void set_children(bool value);
  private:
  bool _internal_children() const;
  void _internal_set_children(bool value);
  public:

  // bool siblings = 3;
  void clear_siblings();
  bool siblings() const;
  void set_siblings(bool value);
  private:
  bool _internal_siblings() const;
  void _internal_set_siblings(bool value);
  public:

  // int32 max_depth = 4;
  void clear_max_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 max_depth() const;
  void set_max_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_depth() const;
  void _internal_set_max_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_width = 5;
  void clear_max_width();
  ::PROTOBUF_NAMESPACE_ID::int32 max_width() const;
  void set_max_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_width() const;
  void _internal_set_max_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostKnowledgeGraphMatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptEmbeddingDump > shareable_concept_embeddings_;
  ::RequestMeta* meta_;
  ::clarifai::api::CustomerDataDump* customer_data_;
  bool children_;
  bool siblings_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PostKnowledgeGraphMatchResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostKnowledgeGraphMatchResponse) */ {
 public:
  inline PostKnowledgeGraphMatchResponse() : PostKnowledgeGraphMatchResponse(nullptr) {}
  virtual ~PostKnowledgeGraphMatchResponse();

  PostKnowledgeGraphMatchResponse(const PostKnowledgeGraphMatchResponse& from);
  PostKnowledgeGraphMatchResponse(PostKnowledgeGraphMatchResponse&& from) noexcept
    : PostKnowledgeGraphMatchResponse() {
    *this = ::std::move(from);
  }

  inline PostKnowledgeGraphMatchResponse& operator=(const PostKnowledgeGraphMatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostKnowledgeGraphMatchResponse& operator=(PostKnowledgeGraphMatchResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostKnowledgeGraphMatchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostKnowledgeGraphMatchResponse* internal_default_instance() {
    return reinterpret_cast<const PostKnowledgeGraphMatchResponse*>(
               &_PostKnowledgeGraphMatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PostKnowledgeGraphMatchResponse& a, PostKnowledgeGraphMatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostKnowledgeGraphMatchResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostKnowledgeGraphMatchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostKnowledgeGraphMatchResponse* New() const final {
    return CreateMaybeMessage<PostKnowledgeGraphMatchResponse>(nullptr);
  }

  PostKnowledgeGraphMatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostKnowledgeGraphMatchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostKnowledgeGraphMatchResponse& from);
  void MergeFrom(const PostKnowledgeGraphMatchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostKnowledgeGraphMatchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostKnowledgeGraphMatchResponse";
  }
  protected:
  explicit PostKnowledgeGraphMatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto);
    return ::descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptMapFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptMap concept_map = 2;
  int concept_map_size() const;
  private:
  int _internal_concept_map_size() const;
  public:
  void clear_concept_map();
  ::clarifai::api::ConceptMap* mutable_concept_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMap >*
      mutable_concept_map();
  private:
  const ::clarifai::api::ConceptMap& _internal_concept_map(int index) const;
  ::clarifai::api::ConceptMap* _internal_add_concept_map();
  public:
  const ::clarifai::api::ConceptMap& concept_map(int index) const;
  ::clarifai::api::ConceptMap* add_concept_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMap >&
      concept_map() const;

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostKnowledgeGraphMatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMap > concept_map_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConceptMap

// .clarifai.api.Concept customer_concept = 1;
inline bool ConceptMap::_internal_has_customer_concept() const {
  return this != internal_default_instance() && customer_concept_ != nullptr;
}
inline bool ConceptMap::has_customer_concept() const {
  return _internal_has_customer_concept();
}
inline const ::clarifai::api::Concept& ConceptMap::_internal_customer_concept() const {
  const ::clarifai::api::Concept* p = customer_concept_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Concept*>(
      &::clarifai::api::_Concept_default_instance_);
}
inline const ::clarifai::api::Concept& ConceptMap::customer_concept() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptMap.customer_concept)
  return _internal_customer_concept();
}
inline void ConceptMap::unsafe_arena_set_allocated_customer_concept(
    ::clarifai::api::Concept* customer_concept) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_concept_);
  }
  customer_concept_ = customer_concept;
  if (customer_concept) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ConceptMap.customer_concept)
}
inline ::clarifai::api::Concept* ConceptMap::release_customer_concept() {
  
  ::clarifai::api::Concept* temp = customer_concept_;
  customer_concept_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Concept* ConceptMap::unsafe_arena_release_customer_concept() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptMap.customer_concept)
  
  ::clarifai::api::Concept* temp = customer_concept_;
  customer_concept_ = nullptr;
  return temp;
}
inline ::clarifai::api::Concept* ConceptMap::_internal_mutable_customer_concept() {
  
  if (customer_concept_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Concept>(GetArena());
    customer_concept_ = p;
  }
  return customer_concept_;
}
inline ::clarifai::api::Concept* ConceptMap::mutable_customer_concept() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptMap.customer_concept)
  return _internal_mutable_customer_concept();
}
inline void ConceptMap::set_allocated_customer_concept(::clarifai::api::Concept* customer_concept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_concept_);
  }
  if (customer_concept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_concept)->GetArena();
    if (message_arena != submessage_arena) {
      customer_concept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_concept, submessage_arena);
    }
    
  } else {
    
  }
  customer_concept_ = customer_concept;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptMap.customer_concept)
}

// repeated .clarifai.api.Concept golden_concept = 2;
inline int ConceptMap::_internal_golden_concept_size() const {
  return golden_concept_.size();
}
inline int ConceptMap::golden_concept_size() const {
  return _internal_golden_concept_size();
}
inline ::clarifai::api::Concept* ConceptMap::mutable_golden_concept(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptMap.golden_concept)
  return golden_concept_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
ConceptMap::mutable_golden_concept() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ConceptMap.golden_concept)
  return &golden_concept_;
}
inline const ::clarifai::api::Concept& ConceptMap::_internal_golden_concept(int index) const {
  return golden_concept_.Get(index);
}
inline const ::clarifai::api::Concept& ConceptMap::golden_concept(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptMap.golden_concept)
  return _internal_golden_concept(index);
}
inline ::clarifai::api::Concept* ConceptMap::_internal_add_golden_concept() {
  return golden_concept_.Add();
}
inline ::clarifai::api::Concept* ConceptMap::add_golden_concept() {
  // @@protoc_insertion_point(field_add:clarifai.api.ConceptMap.golden_concept)
  return _internal_add_golden_concept();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
ConceptMap::golden_concept() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ConceptMap.golden_concept)
  return golden_concept_;
}

// -------------------------------------------------------------------

// ConceptEmbeddingDump

// string location = 1;
inline void ConceptEmbeddingDump::clear_location() {
  location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptEmbeddingDump::location() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptEmbeddingDump.location)
  return _internal_location();
}
inline void ConceptEmbeddingDump::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptEmbeddingDump.location)
}
inline std::string* ConceptEmbeddingDump::mutable_location() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptEmbeddingDump.location)
  return _internal_mutable_location();
}
inline const std::string& ConceptEmbeddingDump::_internal_location() const {
  return location_.Get();
}
inline void ConceptEmbeddingDump::_internal_set_location(const std::string& value) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptEmbeddingDump::set_location(std::string&& value) {
  
  location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptEmbeddingDump.location)
}
inline void ConceptEmbeddingDump::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptEmbeddingDump.location)
}
inline void ConceptEmbeddingDump::set_location(const char* value,
    size_t size) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptEmbeddingDump.location)
}
inline std::string* ConceptEmbeddingDump::_internal_mutable_location() {
  
  return location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptEmbeddingDump::release_location() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptEmbeddingDump.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptEmbeddingDump::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptEmbeddingDump.location)
}

// repeated .DataExample example = 2;
inline int ConceptEmbeddingDump::_internal_example_size() const {
  return example_.size();
}
inline int ConceptEmbeddingDump::example_size() const {
  return _internal_example_size();
}
inline ::DataExample* ConceptEmbeddingDump::mutable_example(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptEmbeddingDump.example)
  return example_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataExample >*
ConceptEmbeddingDump::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ConceptEmbeddingDump.example)
  return &example_;
}
inline const ::DataExample& ConceptEmbeddingDump::_internal_example(int index) const {
  return example_.Get(index);
}
inline const ::DataExample& ConceptEmbeddingDump::example(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptEmbeddingDump.example)
  return _internal_example(index);
}
inline ::DataExample* ConceptEmbeddingDump::_internal_add_example() {
  return example_.Add();
}
inline ::DataExample* ConceptEmbeddingDump::add_example() {
  // @@protoc_insertion_point(field_add:clarifai.api.ConceptEmbeddingDump.example)
  return _internal_add_example();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataExample >&
ConceptEmbeddingDump::example() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ConceptEmbeddingDump.example)
  return example_;
}

// -------------------------------------------------------------------

// CustomerDataDump

// string locaiton = 1;
inline void CustomerDataDump::clear_locaiton() {
  locaiton_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CustomerDataDump::locaiton() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CustomerDataDump.locaiton)
  return _internal_locaiton();
}
inline void CustomerDataDump::set_locaiton(const std::string& value) {
  _internal_set_locaiton(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CustomerDataDump.locaiton)
}
inline std::string* CustomerDataDump::mutable_locaiton() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CustomerDataDump.locaiton)
  return _internal_mutable_locaiton();
}
inline const std::string& CustomerDataDump::_internal_locaiton() const {
  return locaiton_.Get();
}
inline void CustomerDataDump::_internal_set_locaiton(const std::string& value) {
  
  locaiton_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CustomerDataDump::set_locaiton(std::string&& value) {
  
  locaiton_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CustomerDataDump.locaiton)
}
inline void CustomerDataDump::set_locaiton(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  locaiton_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CustomerDataDump.locaiton)
}
inline void CustomerDataDump::set_locaiton(const char* value,
    size_t size) {
  
  locaiton_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CustomerDataDump.locaiton)
}
inline std::string* CustomerDataDump::_internal_mutable_locaiton() {
  
  return locaiton_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CustomerDataDump::release_locaiton() {
  // @@protoc_insertion_point(field_release:clarifai.api.CustomerDataDump.locaiton)
  return locaiton_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerDataDump::set_allocated_locaiton(std::string* locaiton) {
  if (locaiton != nullptr) {
    
  } else {
    
  }
  locaiton_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locaiton,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CustomerDataDump.locaiton)
}

// repeated .DataExample example = 2;
inline int CustomerDataDump::_internal_example_size() const {
  return example_.size();
}
inline int CustomerDataDump::example_size() const {
  return _internal_example_size();
}
inline ::DataExample* CustomerDataDump::mutable_example(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CustomerDataDump.example)
  return example_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataExample >*
CustomerDataDump::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.CustomerDataDump.example)
  return &example_;
}
inline const ::DataExample& CustomerDataDump::_internal_example(int index) const {
  return example_.Get(index);
}
inline const ::DataExample& CustomerDataDump::example(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.CustomerDataDump.example)
  return _internal_example(index);
}
inline ::DataExample* CustomerDataDump::_internal_add_example() {
  return example_.Add();
}
inline ::DataExample* CustomerDataDump::add_example() {
  // @@protoc_insertion_point(field_add:clarifai.api.CustomerDataDump.example)
  return _internal_add_example();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataExample >&
CustomerDataDump::example() const {
  // @@protoc_insertion_point(field_list:clarifai.api.CustomerDataDump.example)
  return example_;
}

// -------------------------------------------------------------------

// PostKnowledgeGraphMatchRequest

// .RequestMeta meta = 1;
inline bool PostKnowledgeGraphMatchRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool PostKnowledgeGraphMatchRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& PostKnowledgeGraphMatchRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& PostKnowledgeGraphMatchRequest::meta() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKnowledgeGraphMatchRequest.meta)
  return _internal_meta();
}
inline void PostKnowledgeGraphMatchRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostKnowledgeGraphMatchRequest.meta)
}
inline ::RequestMeta* PostKnowledgeGraphMatchRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* PostKnowledgeGraphMatchRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostKnowledgeGraphMatchRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* PostKnowledgeGraphMatchRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* PostKnowledgeGraphMatchRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostKnowledgeGraphMatchRequest.meta)
  return _internal_mutable_meta();
}
inline void PostKnowledgeGraphMatchRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostKnowledgeGraphMatchRequest.meta)
}

// bool children = 2;
inline void PostKnowledgeGraphMatchRequest::clear_children() {
  children_ = false;
}
inline bool PostKnowledgeGraphMatchRequest::_internal_children() const {
  return children_;
}
inline bool PostKnowledgeGraphMatchRequest::children() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKnowledgeGraphMatchRequest.children)
  return _internal_children();
}
inline void PostKnowledgeGraphMatchRequest::_internal_set_children(bool value) {
  
  children_ = value;
}
inline void PostKnowledgeGraphMatchRequest::set_children(bool value) {
  _internal_set_children(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostKnowledgeGraphMatchRequest.children)
}

// bool siblings = 3;
inline void PostKnowledgeGraphMatchRequest::clear_siblings() {
  siblings_ = false;
}
inline bool PostKnowledgeGraphMatchRequest::_internal_siblings() const {
  return siblings_;
}
inline bool PostKnowledgeGraphMatchRequest::siblings() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKnowledgeGraphMatchRequest.siblings)
  return _internal_siblings();
}
inline void PostKnowledgeGraphMatchRequest::_internal_set_siblings(bool value) {
  
  siblings_ = value;
}
inline void PostKnowledgeGraphMatchRequest::set_siblings(bool value) {
  _internal_set_siblings(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostKnowledgeGraphMatchRequest.siblings)
}

// int32 max_depth = 4;
inline void PostKnowledgeGraphMatchRequest::clear_max_depth() {
  max_depth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PostKnowledgeGraphMatchRequest::_internal_max_depth() const {
  return max_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PostKnowledgeGraphMatchRequest::max_depth() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKnowledgeGraphMatchRequest.max_depth)
  return _internal_max_depth();
}
inline void PostKnowledgeGraphMatchRequest::_internal_set_max_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_depth_ = value;
}
inline void PostKnowledgeGraphMatchRequest::set_max_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_depth(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostKnowledgeGraphMatchRequest.max_depth)
}

// int32 max_width = 5;
inline void PostKnowledgeGraphMatchRequest::clear_max_width() {
  max_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PostKnowledgeGraphMatchRequest::_internal_max_width() const {
  return max_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PostKnowledgeGraphMatchRequest::max_width() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKnowledgeGraphMatchRequest.max_width)
  return _internal_max_width();
}
inline void PostKnowledgeGraphMatchRequest::_internal_set_max_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_width_ = value;
}
inline void PostKnowledgeGraphMatchRequest::set_max_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_width(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostKnowledgeGraphMatchRequest.max_width)
}

// .clarifai.api.CustomerDataDump customer_data = 6;
inline bool PostKnowledgeGraphMatchRequest::_internal_has_customer_data() const {
  return this != internal_default_instance() && customer_data_ != nullptr;
}
inline bool PostKnowledgeGraphMatchRequest::has_customer_data() const {
  return _internal_has_customer_data();
}
inline void PostKnowledgeGraphMatchRequest::clear_customer_data() {
  if (GetArena() == nullptr && customer_data_ != nullptr) {
    delete customer_data_;
  }
  customer_data_ = nullptr;
}
inline const ::clarifai::api::CustomerDataDump& PostKnowledgeGraphMatchRequest::_internal_customer_data() const {
  const ::clarifai::api::CustomerDataDump* p = customer_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::CustomerDataDump*>(
      &::clarifai::api::_CustomerDataDump_default_instance_);
}
inline const ::clarifai::api::CustomerDataDump& PostKnowledgeGraphMatchRequest::customer_data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKnowledgeGraphMatchRequest.customer_data)
  return _internal_customer_data();
}
inline void PostKnowledgeGraphMatchRequest::unsafe_arena_set_allocated_customer_data(
    ::clarifai::api::CustomerDataDump* customer_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_data_);
  }
  customer_data_ = customer_data;
  if (customer_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostKnowledgeGraphMatchRequest.customer_data)
}
inline ::clarifai::api::CustomerDataDump* PostKnowledgeGraphMatchRequest::release_customer_data() {
  
  ::clarifai::api::CustomerDataDump* temp = customer_data_;
  customer_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::CustomerDataDump* PostKnowledgeGraphMatchRequest::unsafe_arena_release_customer_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostKnowledgeGraphMatchRequest.customer_data)
  
  ::clarifai::api::CustomerDataDump* temp = customer_data_;
  customer_data_ = nullptr;
  return temp;
}
inline ::clarifai::api::CustomerDataDump* PostKnowledgeGraphMatchRequest::_internal_mutable_customer_data() {
  
  if (customer_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::CustomerDataDump>(GetArena());
    customer_data_ = p;
  }
  return customer_data_;
}
inline ::clarifai::api::CustomerDataDump* PostKnowledgeGraphMatchRequest::mutable_customer_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostKnowledgeGraphMatchRequest.customer_data)
  return _internal_mutable_customer_data();
}
inline void PostKnowledgeGraphMatchRequest::set_allocated_customer_data(::clarifai::api::CustomerDataDump* customer_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete customer_data_;
  }
  if (customer_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(customer_data);
    if (message_arena != submessage_arena) {
      customer_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_data, submessage_arena);
    }
    
  } else {
    
  }
  customer_data_ = customer_data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostKnowledgeGraphMatchRequest.customer_data)
}

// repeated .clarifai.api.ConceptEmbeddingDump shareable_concept_embeddings = 7;
inline int PostKnowledgeGraphMatchRequest::_internal_shareable_concept_embeddings_size() const {
  return shareable_concept_embeddings_.size();
}
inline int PostKnowledgeGraphMatchRequest::shareable_concept_embeddings_size() const {
  return _internal_shareable_concept_embeddings_size();
}
inline void PostKnowledgeGraphMatchRequest::clear_shareable_concept_embeddings() {
  shareable_concept_embeddings_.Clear();
}
inline ::clarifai::api::ConceptEmbeddingDump* PostKnowledgeGraphMatchRequest::mutable_shareable_concept_embeddings(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostKnowledgeGraphMatchRequest.shareable_concept_embeddings)
  return shareable_concept_embeddings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptEmbeddingDump >*
PostKnowledgeGraphMatchRequest::mutable_shareable_concept_embeddings() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostKnowledgeGraphMatchRequest.shareable_concept_embeddings)
  return &shareable_concept_embeddings_;
}
inline const ::clarifai::api::ConceptEmbeddingDump& PostKnowledgeGraphMatchRequest::_internal_shareable_concept_embeddings(int index) const {
  return shareable_concept_embeddings_.Get(index);
}
inline const ::clarifai::api::ConceptEmbeddingDump& PostKnowledgeGraphMatchRequest::shareable_concept_embeddings(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKnowledgeGraphMatchRequest.shareable_concept_embeddings)
  return _internal_shareable_concept_embeddings(index);
}
inline ::clarifai::api::ConceptEmbeddingDump* PostKnowledgeGraphMatchRequest::_internal_add_shareable_concept_embeddings() {
  return shareable_concept_embeddings_.Add();
}
inline ::clarifai::api::ConceptEmbeddingDump* PostKnowledgeGraphMatchRequest::add_shareable_concept_embeddings() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostKnowledgeGraphMatchRequest.shareable_concept_embeddings)
  return _internal_add_shareable_concept_embeddings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptEmbeddingDump >&
PostKnowledgeGraphMatchRequest::shareable_concept_embeddings() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostKnowledgeGraphMatchRequest.shareable_concept_embeddings)
  return shareable_concept_embeddings_;
}

// -------------------------------------------------------------------

// PostKnowledgeGraphMatchResponse

// .ResponseStatus status = 1;
inline bool PostKnowledgeGraphMatchResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool PostKnowledgeGraphMatchResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& PostKnowledgeGraphMatchResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& PostKnowledgeGraphMatchResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKnowledgeGraphMatchResponse.status)
  return _internal_status();
}
inline void PostKnowledgeGraphMatchResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostKnowledgeGraphMatchResponse.status)
}
inline ::ResponseStatus* PostKnowledgeGraphMatchResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* PostKnowledgeGraphMatchResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostKnowledgeGraphMatchResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* PostKnowledgeGraphMatchResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* PostKnowledgeGraphMatchResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostKnowledgeGraphMatchResponse.status)
  return _internal_mutable_status();
}
inline void PostKnowledgeGraphMatchResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostKnowledgeGraphMatchResponse.status)
}

// repeated .clarifai.api.ConceptMap concept_map = 2;
inline int PostKnowledgeGraphMatchResponse::_internal_concept_map_size() const {
  return concept_map_.size();
}
inline int PostKnowledgeGraphMatchResponse::concept_map_size() const {
  return _internal_concept_map_size();
}
inline void PostKnowledgeGraphMatchResponse::clear_concept_map() {
  concept_map_.Clear();
}
inline ::clarifai::api::ConceptMap* PostKnowledgeGraphMatchResponse::mutable_concept_map(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostKnowledgeGraphMatchResponse.concept_map)
  return concept_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMap >*
PostKnowledgeGraphMatchResponse::mutable_concept_map() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostKnowledgeGraphMatchResponse.concept_map)
  return &concept_map_;
}
inline const ::clarifai::api::ConceptMap& PostKnowledgeGraphMatchResponse::_internal_concept_map(int index) const {
  return concept_map_.Get(index);
}
inline const ::clarifai::api::ConceptMap& PostKnowledgeGraphMatchResponse::concept_map(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKnowledgeGraphMatchResponse.concept_map)
  return _internal_concept_map(index);
}
inline ::clarifai::api::ConceptMap* PostKnowledgeGraphMatchResponse::_internal_add_concept_map() {
  return concept_map_.Add();
}
inline ::clarifai::api::ConceptMap* PostKnowledgeGraphMatchResponse::add_concept_map() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostKnowledgeGraphMatchResponse.concept_map)
  return _internal_add_concept_map();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMap >&
PostKnowledgeGraphMatchResponse::concept_map() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostKnowledgeGraphMatchResponse.concept_map)
  return concept_map_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace clarifai

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto
