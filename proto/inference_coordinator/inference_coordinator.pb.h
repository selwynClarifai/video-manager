// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/inference_coordinator/inference_coordinator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/request_meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto;
class DeleteSpireRequest;
class DeleteSpireRequestDefaultTypeInternal;
extern DeleteSpireRequestDefaultTypeInternal _DeleteSpireRequest_default_instance_;
class DeleteSpireResponse;
class DeleteSpireResponseDefaultTypeInternal;
extern DeleteSpireResponseDefaultTypeInternal _DeleteSpireResponse_default_instance_;
class DeploySpireRequest;
class DeploySpireRequestDefaultTypeInternal;
extern DeploySpireRequestDefaultTypeInternal _DeploySpireRequest_default_instance_;
class DeploySpireResponse;
class DeploySpireResponseDefaultTypeInternal;
extern DeploySpireResponseDefaultTypeInternal _DeploySpireResponse_default_instance_;
class GetSpireDeployStatusRequest;
class GetSpireDeployStatusRequestDefaultTypeInternal;
extern GetSpireDeployStatusRequestDefaultTypeInternal _GetSpireDeployStatusRequest_default_instance_;
class GetSpireDeployStatusResponse;
class GetSpireDeployStatusResponseDefaultTypeInternal;
extern GetSpireDeployStatusResponseDefaultTypeInternal _GetSpireDeployStatusResponse_default_instance_;
class ListSpiresFilter;
class ListSpiresFilterDefaultTypeInternal;
extern ListSpiresFilterDefaultTypeInternal _ListSpiresFilter_default_instance_;
class ListSpiresRequest;
class ListSpiresRequestDefaultTypeInternal;
extern ListSpiresRequestDefaultTypeInternal _ListSpiresRequest_default_instance_;
class ListSpiresResponse;
class ListSpiresResponseDefaultTypeInternal;
extern ListSpiresResponseDefaultTypeInternal _ListSpiresResponse_default_instance_;
class ResourceObjectsStatus;
class ResourceObjectsStatusDefaultTypeInternal;
extern ResourceObjectsStatusDefaultTypeInternal _ResourceObjectsStatus_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DeleteSpireRequest* Arena::CreateMaybeMessage<::DeleteSpireRequest>(Arena*);
template<> ::DeleteSpireResponse* Arena::CreateMaybeMessage<::DeleteSpireResponse>(Arena*);
template<> ::DeploySpireRequest* Arena::CreateMaybeMessage<::DeploySpireRequest>(Arena*);
template<> ::DeploySpireResponse* Arena::CreateMaybeMessage<::DeploySpireResponse>(Arena*);
template<> ::GetSpireDeployStatusRequest* Arena::CreateMaybeMessage<::GetSpireDeployStatusRequest>(Arena*);
template<> ::GetSpireDeployStatusResponse* Arena::CreateMaybeMessage<::GetSpireDeployStatusResponse>(Arena*);
template<> ::ListSpiresFilter* Arena::CreateMaybeMessage<::ListSpiresFilter>(Arena*);
template<> ::ListSpiresRequest* Arena::CreateMaybeMessage<::ListSpiresRequest>(Arena*);
template<> ::ListSpiresResponse* Arena::CreateMaybeMessage<::ListSpiresResponse>(Arena*);
template<> ::ResourceObjectsStatus* Arena::CreateMaybeMessage<::ResourceObjectsStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DeploySpireRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeploySpireRequest) */ {
 public:
  inline DeploySpireRequest() : DeploySpireRequest(nullptr) {}
  virtual ~DeploySpireRequest();

  DeploySpireRequest(const DeploySpireRequest& from);
  DeploySpireRequest(DeploySpireRequest&& from) noexcept
    : DeploySpireRequest() {
    *this = ::std::move(from);
  }

  inline DeploySpireRequest& operator=(const DeploySpireRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeploySpireRequest& operator=(DeploySpireRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeploySpireRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeploySpireRequest* internal_default_instance() {
    return reinterpret_cast<const DeploySpireRequest*>(
               &_DeploySpireRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeploySpireRequest& a, DeploySpireRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeploySpireRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeploySpireRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeploySpireRequest* New() const final {
    return CreateMaybeMessage<DeploySpireRequest>(nullptr);
  }

  DeploySpireRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeploySpireRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeploySpireRequest& from);
  void MergeFrom(const DeploySpireRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeploySpireRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeploySpireRequest";
  }
  protected:
  explicit DeploySpireRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto);
    return ::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpireNameFieldNumber = 2,
    kSpireConfigLocationFieldNumber = 3,
    kCheckpointRootFieldNumber = 4,
    kJwtFieldNumber = 5,
    kMetaFieldNumber = 1,
  };
  // string spire_name = 2;
  void clear_spire_name();
  const std::string& spire_name() const;
  void set_spire_name(const std::string& value);
  void set_spire_name(std::string&& value);
  void set_spire_name(const char* value);
  void set_spire_name(const char* value, size_t size);
  std::string* mutable_spire_name();
  std::string* release_spire_name();
  void set_allocated_spire_name(std::string* spire_name);
  private:
  const std::string& _internal_spire_name() const;
  void _internal_set_spire_name(const std::string& value);
  std::string* _internal_mutable_spire_name();
  public:

  // string spire_config_location = 3;
  void clear_spire_config_location();
  const std::string& spire_config_location() const;
  void set_spire_config_location(const std::string& value);
  void set_spire_config_location(std::string&& value);
  void set_spire_config_location(const char* value);
  void set_spire_config_location(const char* value, size_t size);
  std::string* mutable_spire_config_location();
  std::string* release_spire_config_location();
  void set_allocated_spire_config_location(std::string* spire_config_location);
  private:
  const std::string& _internal_spire_config_location() const;
  void _internal_set_spire_config_location(const std::string& value);
  std::string* _internal_mutable_spire_config_location();
  public:

  // string checkpoint_root = 4;
  void clear_checkpoint_root();
  const std::string& checkpoint_root() const;
  void set_checkpoint_root(const std::string& value);
  void set_checkpoint_root(std::string&& value);
  void set_checkpoint_root(const char* value);
  void set_checkpoint_root(const char* value, size_t size);
  std::string* mutable_checkpoint_root();
  std::string* release_checkpoint_root();
  void set_allocated_checkpoint_root(std::string* checkpoint_root);
  private:
  const std::string& _internal_checkpoint_root() const;
  void _internal_set_checkpoint_root(const std::string& value);
  std::string* _internal_mutable_checkpoint_root();
  public:

  // string jwt = 5;
  void clear_jwt();
  const std::string& jwt() const;
  void set_jwt(const std::string& value);
  void set_jwt(std::string&& value);
  void set_jwt(const char* value);
  void set_jwt(const char* value, size_t size);
  std::string* mutable_jwt();
  std::string* release_jwt();
  void set_allocated_jwt(std::string* jwt);
  private:
  const std::string& _internal_jwt() const;
  void _internal_set_jwt(const std::string& value);
  std::string* _internal_mutable_jwt();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:DeploySpireRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spire_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spire_config_location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpoint_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwt_;
  ::RequestMeta* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto;
};
// -------------------------------------------------------------------

class DeploySpireResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeploySpireResponse) */ {
 public:
  inline DeploySpireResponse() : DeploySpireResponse(nullptr) {}
  virtual ~DeploySpireResponse();

  DeploySpireResponse(const DeploySpireResponse& from);
  DeploySpireResponse(DeploySpireResponse&& from) noexcept
    : DeploySpireResponse() {
    *this = ::std::move(from);
  }

  inline DeploySpireResponse& operator=(const DeploySpireResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeploySpireResponse& operator=(DeploySpireResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeploySpireResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeploySpireResponse* internal_default_instance() {
    return reinterpret_cast<const DeploySpireResponse*>(
               &_DeploySpireResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeploySpireResponse& a, DeploySpireResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeploySpireResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeploySpireResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeploySpireResponse* New() const final {
    return CreateMaybeMessage<DeploySpireResponse>(nullptr);
  }

  DeploySpireResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeploySpireResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeploySpireResponse& from);
  void MergeFrom(const DeploySpireResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeploySpireResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeploySpireResponse";
  }
  protected:
  explicit DeploySpireResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto);
    return ::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:DeploySpireResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto;
};
// -------------------------------------------------------------------

class DeleteSpireRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteSpireRequest) */ {
 public:
  inline DeleteSpireRequest() : DeleteSpireRequest(nullptr) {}
  virtual ~DeleteSpireRequest();

  DeleteSpireRequest(const DeleteSpireRequest& from);
  DeleteSpireRequest(DeleteSpireRequest&& from) noexcept
    : DeleteSpireRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSpireRequest& operator=(const DeleteSpireRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSpireRequest& operator=(DeleteSpireRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSpireRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSpireRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSpireRequest*>(
               &_DeleteSpireRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteSpireRequest& a, DeleteSpireRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSpireRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSpireRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSpireRequest* New() const final {
    return CreateMaybeMessage<DeleteSpireRequest>(nullptr);
  }

  DeleteSpireRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSpireRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSpireRequest& from);
  void MergeFrom(const DeleteSpireRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSpireRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteSpireRequest";
  }
  protected:
  explicit DeleteSpireRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto);
    return ::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpireNameFieldNumber = 2,
    kJwtFieldNumber = 3,
    kMetaFieldNumber = 1,
  };
  // string spire_name = 2;
  void clear_spire_name();
  const std::string& spire_name() const;
  void set_spire_name(const std::string& value);
  void set_spire_name(std::string&& value);
  void set_spire_name(const char* value);
  void set_spire_name(const char* value, size_t size);
  std::string* mutable_spire_name();
  std::string* release_spire_name();
  void set_allocated_spire_name(std::string* spire_name);
  private:
  const std::string& _internal_spire_name() const;
  void _internal_set_spire_name(const std::string& value);
  std::string* _internal_mutable_spire_name();
  public:

  // string jwt = 3;
  void clear_jwt();
  const std::string& jwt() const;
  void set_jwt(const std::string& value);
  void set_jwt(std::string&& value);
  void set_jwt(const char* value);
  void set_jwt(const char* value, size_t size);
  std::string* mutable_jwt();
  std::string* release_jwt();
  void set_allocated_jwt(std::string* jwt);
  private:
  const std::string& _internal_jwt() const;
  void _internal_set_jwt(const std::string& value);
  std::string* _internal_mutable_jwt();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:DeleteSpireRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spire_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwt_;
  ::RequestMeta* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto;
};
// -------------------------------------------------------------------

class DeleteSpireResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteSpireResponse) */ {
 public:
  inline DeleteSpireResponse() : DeleteSpireResponse(nullptr) {}
  virtual ~DeleteSpireResponse();

  DeleteSpireResponse(const DeleteSpireResponse& from);
  DeleteSpireResponse(DeleteSpireResponse&& from) noexcept
    : DeleteSpireResponse() {
    *this = ::std::move(from);
  }

  inline DeleteSpireResponse& operator=(const DeleteSpireResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSpireResponse& operator=(DeleteSpireResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSpireResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSpireResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSpireResponse*>(
               &_DeleteSpireResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteSpireResponse& a, DeleteSpireResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSpireResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSpireResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSpireResponse* New() const final {
    return CreateMaybeMessage<DeleteSpireResponse>(nullptr);
  }

  DeleteSpireResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSpireResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSpireResponse& from);
  void MergeFrom(const DeleteSpireResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSpireResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteSpireResponse";
  }
  protected:
  explicit DeleteSpireResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto);
    return ::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:DeleteSpireResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto;
};
// -------------------------------------------------------------------

class GetSpireDeployStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetSpireDeployStatusRequest) */ {
 public:
  inline GetSpireDeployStatusRequest() : GetSpireDeployStatusRequest(nullptr) {}
  virtual ~GetSpireDeployStatusRequest();

  GetSpireDeployStatusRequest(const GetSpireDeployStatusRequest& from);
  GetSpireDeployStatusRequest(GetSpireDeployStatusRequest&& from) noexcept
    : GetSpireDeployStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetSpireDeployStatusRequest& operator=(const GetSpireDeployStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSpireDeployStatusRequest& operator=(GetSpireDeployStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSpireDeployStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSpireDeployStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetSpireDeployStatusRequest*>(
               &_GetSpireDeployStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetSpireDeployStatusRequest& a, GetSpireDeployStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSpireDeployStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSpireDeployStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSpireDeployStatusRequest* New() const final {
    return CreateMaybeMessage<GetSpireDeployStatusRequest>(nullptr);
  }

  GetSpireDeployStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSpireDeployStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSpireDeployStatusRequest& from);
  void MergeFrom(const GetSpireDeployStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSpireDeployStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetSpireDeployStatusRequest";
  }
  protected:
  explicit GetSpireDeployStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto);
    return ::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpireNameFieldNumber = 2,
    kJwtFieldNumber = 3,
    kMetaFieldNumber = 1,
  };
  // string spire_name = 2;
  void clear_spire_name();
  const std::string& spire_name() const;
  void set_spire_name(const std::string& value);
  void set_spire_name(std::string&& value);
  void set_spire_name(const char* value);
  void set_spire_name(const char* value, size_t size);
  std::string* mutable_spire_name();
  std::string* release_spire_name();
  void set_allocated_spire_name(std::string* spire_name);
  private:
  const std::string& _internal_spire_name() const;
  void _internal_set_spire_name(const std::string& value);
  std::string* _internal_mutable_spire_name();
  public:

  // string jwt = 3;
  void clear_jwt();
  const std::string& jwt() const;
  void set_jwt(const std::string& value);
  void set_jwt(std::string&& value);
  void set_jwt(const char* value);
  void set_jwt(const char* value, size_t size);
  std::string* mutable_jwt();
  std::string* release_jwt();
  void set_allocated_jwt(std::string* jwt);
  private:
  const std::string& _internal_jwt() const;
  void _internal_set_jwt(const std::string& value);
  std::string* _internal_mutable_jwt();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:GetSpireDeployStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spire_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwt_;
  ::RequestMeta* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto;
};
// -------------------------------------------------------------------

class GetSpireDeployStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetSpireDeployStatusResponse) */ {
 public:
  inline GetSpireDeployStatusResponse() : GetSpireDeployStatusResponse(nullptr) {}
  virtual ~GetSpireDeployStatusResponse();

  GetSpireDeployStatusResponse(const GetSpireDeployStatusResponse& from);
  GetSpireDeployStatusResponse(GetSpireDeployStatusResponse&& from) noexcept
    : GetSpireDeployStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetSpireDeployStatusResponse& operator=(const GetSpireDeployStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSpireDeployStatusResponse& operator=(GetSpireDeployStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSpireDeployStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSpireDeployStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetSpireDeployStatusResponse*>(
               &_GetSpireDeployStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetSpireDeployStatusResponse& a, GetSpireDeployStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSpireDeployStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSpireDeployStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSpireDeployStatusResponse* New() const final {
    return CreateMaybeMessage<GetSpireDeployStatusResponse>(nullptr);
  }

  GetSpireDeployStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSpireDeployStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSpireDeployStatusResponse& from);
  void MergeFrom(const GetSpireDeployStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSpireDeployStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetSpireDeployStatusResponse";
  }
  protected:
  explicit GetSpireDeployStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto);
    return ::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kResourceObjectsStatusFieldNumber = 3,
  };
  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // .ResourceObjectsStatus resource_objects_status = 3;
  bool has_resource_objects_status() const;
  private:
  bool _internal_has_resource_objects_status() const;
  public:
  void clear_resource_objects_status();
  const ::ResourceObjectsStatus& resource_objects_status() const;
  ::ResourceObjectsStatus* release_resource_objects_status();
  ::ResourceObjectsStatus* mutable_resource_objects_status();
  void set_allocated_resource_objects_status(::ResourceObjectsStatus* resource_objects_status);
  private:
  const ::ResourceObjectsStatus& _internal_resource_objects_status() const;
  ::ResourceObjectsStatus* _internal_mutable_resource_objects_status();
  public:
  void unsafe_arena_set_allocated_resource_objects_status(
      ::ResourceObjectsStatus* resource_objects_status);
  ::ResourceObjectsStatus* unsafe_arena_release_resource_objects_status();

  // @@protoc_insertion_point(class_scope:GetSpireDeployStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ResponseStatus* status_;
  ::ResourceObjectsStatus* resource_objects_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto;
};
// -------------------------------------------------------------------

class ResourceObjectsStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResourceObjectsStatus) */ {
 public:
  inline ResourceObjectsStatus() : ResourceObjectsStatus(nullptr) {}
  virtual ~ResourceObjectsStatus();

  ResourceObjectsStatus(const ResourceObjectsStatus& from);
  ResourceObjectsStatus(ResourceObjectsStatus&& from) noexcept
    : ResourceObjectsStatus() {
    *this = ::std::move(from);
  }

  inline ResourceObjectsStatus& operator=(const ResourceObjectsStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceObjectsStatus& operator=(ResourceObjectsStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceObjectsStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceObjectsStatus* internal_default_instance() {
    return reinterpret_cast<const ResourceObjectsStatus*>(
               &_ResourceObjectsStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResourceObjectsStatus& a, ResourceObjectsStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceObjectsStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceObjectsStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceObjectsStatus* New() const final {
    return CreateMaybeMessage<ResourceObjectsStatus>(nullptr);
  }

  ResourceObjectsStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceObjectsStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceObjectsStatus& from);
  void MergeFrom(const ResourceObjectsStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceObjectsStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResourceObjectsStatus";
  }
  protected:
  explicit ResourceObjectsStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto);
    return ::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceRunningFieldNumber = 1,
    kDeploymentRunningFieldNumber = 2,
    kHpaRunningFieldNumber = 3,
  };
  // bool service_running = 1;
  void clear_service_running();
  bool service_running() const;
  void set_service_running(bool value);
  private:
  bool _internal_service_running() const;
  void _internal_set_service_running(bool value);
  public:

  // bool deployment_running = 2;
  void clear_deployment_running();
  bool deployment_running() const;
  void set_deployment_running(bool value);
  private:
  bool _internal_deployment_running() const;
  void _internal_set_deployment_running(bool value);
  public:

  // bool hpa_running = 3;
  void clear_hpa_running();
  bool hpa_running() const;
  void set_hpa_running(bool value);
  private:
  bool _internal_hpa_running() const;
  void _internal_set_hpa_running(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ResourceObjectsStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool service_running_;
  bool deployment_running_;
  bool hpa_running_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto;
};
// -------------------------------------------------------------------

class ListSpiresRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ListSpiresRequest) */ {
 public:
  inline ListSpiresRequest() : ListSpiresRequest(nullptr) {}
  virtual ~ListSpiresRequest();

  ListSpiresRequest(const ListSpiresRequest& from);
  ListSpiresRequest(ListSpiresRequest&& from) noexcept
    : ListSpiresRequest() {
    *this = ::std::move(from);
  }

  inline ListSpiresRequest& operator=(const ListSpiresRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSpiresRequest& operator=(ListSpiresRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSpiresRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSpiresRequest* internal_default_instance() {
    return reinterpret_cast<const ListSpiresRequest*>(
               &_ListSpiresRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListSpiresRequest& a, ListSpiresRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSpiresRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSpiresRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSpiresRequest* New() const final {
    return CreateMaybeMessage<ListSpiresRequest>(nullptr);
  }

  ListSpiresRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSpiresRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSpiresRequest& from);
  void MergeFrom(const ListSpiresRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSpiresRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ListSpiresRequest";
  }
  protected:
  explicit ListSpiresRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto);
    return ::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJwtFieldNumber = 2,
    kMetaFieldNumber = 1,
    kFilterFieldNumber = 3,
  };
  // string jwt = 2;
  void clear_jwt();
  const std::string& jwt() const;
  void set_jwt(const std::string& value);
  void set_jwt(std::string&& value);
  void set_jwt(const char* value);
  void set_jwt(const char* value, size_t size);
  std::string* mutable_jwt();
  std::string* release_jwt();
  void set_allocated_jwt(std::string* jwt);
  private:
  const std::string& _internal_jwt() const;
  void _internal_set_jwt(const std::string& value);
  std::string* _internal_mutable_jwt();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .ListSpiresFilter filter = 3;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::ListSpiresFilter& filter() const;
  ::ListSpiresFilter* release_filter();
  ::ListSpiresFilter* mutable_filter();
  void set_allocated_filter(::ListSpiresFilter* filter);
  private:
  const ::ListSpiresFilter& _internal_filter() const;
  ::ListSpiresFilter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::ListSpiresFilter* filter);
  ::ListSpiresFilter* unsafe_arena_release_filter();

  // @@protoc_insertion_point(class_scope:ListSpiresRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwt_;
  ::RequestMeta* meta_;
  ::ListSpiresFilter* filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto;
};
// -------------------------------------------------------------------

class ListSpiresFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ListSpiresFilter) */ {
 public:
  inline ListSpiresFilter() : ListSpiresFilter(nullptr) {}
  virtual ~ListSpiresFilter();

  ListSpiresFilter(const ListSpiresFilter& from);
  ListSpiresFilter(ListSpiresFilter&& from) noexcept
    : ListSpiresFilter() {
    *this = ::std::move(from);
  }

  inline ListSpiresFilter& operator=(const ListSpiresFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSpiresFilter& operator=(ListSpiresFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSpiresFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSpiresFilter* internal_default_instance() {
    return reinterpret_cast<const ListSpiresFilter*>(
               &_ListSpiresFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListSpiresFilter& a, ListSpiresFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSpiresFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSpiresFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSpiresFilter* New() const final {
    return CreateMaybeMessage<ListSpiresFilter>(nullptr);
  }

  ListSpiresFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSpiresFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSpiresFilter& from);
  void MergeFrom(const ListSpiresFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSpiresFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ListSpiresFilter";
  }
  protected:
  explicit ListSpiresFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto);
    return ::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasMinReplicasFieldNumber = 1,
  };
  // bool has_min_replicas = 1;
  void clear_has_min_replicas();
  bool has_min_replicas() const;
  void set_has_min_replicas(bool value);
  private:
  bool _internal_has_min_replicas() const;
  void _internal_set_has_min_replicas(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ListSpiresFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool has_min_replicas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto;
};
// -------------------------------------------------------------------

class ListSpiresResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ListSpiresResponse) */ {
 public:
  inline ListSpiresResponse() : ListSpiresResponse(nullptr) {}
  virtual ~ListSpiresResponse();

  ListSpiresResponse(const ListSpiresResponse& from);
  ListSpiresResponse(ListSpiresResponse&& from) noexcept
    : ListSpiresResponse() {
    *this = ::std::move(from);
  }

  inline ListSpiresResponse& operator=(const ListSpiresResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSpiresResponse& operator=(ListSpiresResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSpiresResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSpiresResponse* internal_default_instance() {
    return reinterpret_cast<const ListSpiresResponse*>(
               &_ListSpiresResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListSpiresResponse& a, ListSpiresResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSpiresResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSpiresResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSpiresResponse* New() const final {
    return CreateMaybeMessage<ListSpiresResponse>(nullptr);
  }

  ListSpiresResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSpiresResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSpiresResponse& from);
  void MergeFrom(const ListSpiresResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSpiresResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ListSpiresResponse";
  }
  protected:
  explicit ListSpiresResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto);
    return ::descriptor_table_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpireNamesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string spire_names = 2;
  int spire_names_size() const;
  private:
  int _internal_spire_names_size() const;
  public:
  void clear_spire_names();
  const std::string& spire_names(int index) const;
  std::string* mutable_spire_names(int index);
  void set_spire_names(int index, const std::string& value);
  void set_spire_names(int index, std::string&& value);
  void set_spire_names(int index, const char* value);
  void set_spire_names(int index, const char* value, size_t size);
  std::string* add_spire_names();
  void add_spire_names(const std::string& value);
  void add_spire_names(std::string&& value);
  void add_spire_names(const char* value);
  void add_spire_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& spire_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_spire_names();
  private:
  const std::string& _internal_spire_names(int index) const;
  std::string* _internal_add_spire_names();
  public:

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:ListSpiresResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> spire_names_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeploySpireRequest

// .RequestMeta meta = 1;
inline bool DeploySpireRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool DeploySpireRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& DeploySpireRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& DeploySpireRequest::meta() const {
  // @@protoc_insertion_point(field_get:DeploySpireRequest.meta)
  return _internal_meta();
}
inline void DeploySpireRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeploySpireRequest.meta)
}
inline ::RequestMeta* DeploySpireRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* DeploySpireRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:DeploySpireRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* DeploySpireRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* DeploySpireRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:DeploySpireRequest.meta)
  return _internal_mutable_meta();
}
inline void DeploySpireRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:DeploySpireRequest.meta)
}

// string spire_name = 2;
inline void DeploySpireRequest::clear_spire_name() {
  spire_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeploySpireRequest::spire_name() const {
  // @@protoc_insertion_point(field_get:DeploySpireRequest.spire_name)
  return _internal_spire_name();
}
inline void DeploySpireRequest::set_spire_name(const std::string& value) {
  _internal_set_spire_name(value);
  // @@protoc_insertion_point(field_set:DeploySpireRequest.spire_name)
}
inline std::string* DeploySpireRequest::mutable_spire_name() {
  // @@protoc_insertion_point(field_mutable:DeploySpireRequest.spire_name)
  return _internal_mutable_spire_name();
}
inline const std::string& DeploySpireRequest::_internal_spire_name() const {
  return spire_name_.Get();
}
inline void DeploySpireRequest::_internal_set_spire_name(const std::string& value) {
  
  spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeploySpireRequest::set_spire_name(std::string&& value) {
  
  spire_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeploySpireRequest.spire_name)
}
inline void DeploySpireRequest::set_spire_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DeploySpireRequest.spire_name)
}
inline void DeploySpireRequest::set_spire_name(const char* value,
    size_t size) {
  
  spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeploySpireRequest.spire_name)
}
inline std::string* DeploySpireRequest::_internal_mutable_spire_name() {
  
  return spire_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeploySpireRequest::release_spire_name() {
  // @@protoc_insertion_point(field_release:DeploySpireRequest.spire_name)
  return spire_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeploySpireRequest::set_allocated_spire_name(std::string* spire_name) {
  if (spire_name != nullptr) {
    
  } else {
    
  }
  spire_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spire_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeploySpireRequest.spire_name)
}

// string spire_config_location = 3;
inline void DeploySpireRequest::clear_spire_config_location() {
  spire_config_location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeploySpireRequest::spire_config_location() const {
  // @@protoc_insertion_point(field_get:DeploySpireRequest.spire_config_location)
  return _internal_spire_config_location();
}
inline void DeploySpireRequest::set_spire_config_location(const std::string& value) {
  _internal_set_spire_config_location(value);
  // @@protoc_insertion_point(field_set:DeploySpireRequest.spire_config_location)
}
inline std::string* DeploySpireRequest::mutable_spire_config_location() {
  // @@protoc_insertion_point(field_mutable:DeploySpireRequest.spire_config_location)
  return _internal_mutable_spire_config_location();
}
inline const std::string& DeploySpireRequest::_internal_spire_config_location() const {
  return spire_config_location_.Get();
}
inline void DeploySpireRequest::_internal_set_spire_config_location(const std::string& value) {
  
  spire_config_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeploySpireRequest::set_spire_config_location(std::string&& value) {
  
  spire_config_location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeploySpireRequest.spire_config_location)
}
inline void DeploySpireRequest::set_spire_config_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spire_config_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DeploySpireRequest.spire_config_location)
}
inline void DeploySpireRequest::set_spire_config_location(const char* value,
    size_t size) {
  
  spire_config_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeploySpireRequest.spire_config_location)
}
inline std::string* DeploySpireRequest::_internal_mutable_spire_config_location() {
  
  return spire_config_location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeploySpireRequest::release_spire_config_location() {
  // @@protoc_insertion_point(field_release:DeploySpireRequest.spire_config_location)
  return spire_config_location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeploySpireRequest::set_allocated_spire_config_location(std::string* spire_config_location) {
  if (spire_config_location != nullptr) {
    
  } else {
    
  }
  spire_config_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spire_config_location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeploySpireRequest.spire_config_location)
}

// string checkpoint_root = 4;
inline void DeploySpireRequest::clear_checkpoint_root() {
  checkpoint_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeploySpireRequest::checkpoint_root() const {
  // @@protoc_insertion_point(field_get:DeploySpireRequest.checkpoint_root)
  return _internal_checkpoint_root();
}
inline void DeploySpireRequest::set_checkpoint_root(const std::string& value) {
  _internal_set_checkpoint_root(value);
  // @@protoc_insertion_point(field_set:DeploySpireRequest.checkpoint_root)
}
inline std::string* DeploySpireRequest::mutable_checkpoint_root() {
  // @@protoc_insertion_point(field_mutable:DeploySpireRequest.checkpoint_root)
  return _internal_mutable_checkpoint_root();
}
inline const std::string& DeploySpireRequest::_internal_checkpoint_root() const {
  return checkpoint_root_.Get();
}
inline void DeploySpireRequest::_internal_set_checkpoint_root(const std::string& value) {
  
  checkpoint_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeploySpireRequest::set_checkpoint_root(std::string&& value) {
  
  checkpoint_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeploySpireRequest.checkpoint_root)
}
inline void DeploySpireRequest::set_checkpoint_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpoint_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DeploySpireRequest.checkpoint_root)
}
inline void DeploySpireRequest::set_checkpoint_root(const char* value,
    size_t size) {
  
  checkpoint_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeploySpireRequest.checkpoint_root)
}
inline std::string* DeploySpireRequest::_internal_mutable_checkpoint_root() {
  
  return checkpoint_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeploySpireRequest::release_checkpoint_root() {
  // @@protoc_insertion_point(field_release:DeploySpireRequest.checkpoint_root)
  return checkpoint_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeploySpireRequest::set_allocated_checkpoint_root(std::string* checkpoint_root) {
  if (checkpoint_root != nullptr) {
    
  } else {
    
  }
  checkpoint_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpoint_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeploySpireRequest.checkpoint_root)
}

// string jwt = 5;
inline void DeploySpireRequest::clear_jwt() {
  jwt_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeploySpireRequest::jwt() const {
  // @@protoc_insertion_point(field_get:DeploySpireRequest.jwt)
  return _internal_jwt();
}
inline void DeploySpireRequest::set_jwt(const std::string& value) {
  _internal_set_jwt(value);
  // @@protoc_insertion_point(field_set:DeploySpireRequest.jwt)
}
inline std::string* DeploySpireRequest::mutable_jwt() {
  // @@protoc_insertion_point(field_mutable:DeploySpireRequest.jwt)
  return _internal_mutable_jwt();
}
inline const std::string& DeploySpireRequest::_internal_jwt() const {
  return jwt_.Get();
}
inline void DeploySpireRequest::_internal_set_jwt(const std::string& value) {
  
  jwt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeploySpireRequest::set_jwt(std::string&& value) {
  
  jwt_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeploySpireRequest.jwt)
}
inline void DeploySpireRequest::set_jwt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jwt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DeploySpireRequest.jwt)
}
inline void DeploySpireRequest::set_jwt(const char* value,
    size_t size) {
  
  jwt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeploySpireRequest.jwt)
}
inline std::string* DeploySpireRequest::_internal_mutable_jwt() {
  
  return jwt_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeploySpireRequest::release_jwt() {
  // @@protoc_insertion_point(field_release:DeploySpireRequest.jwt)
  return jwt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeploySpireRequest::set_allocated_jwt(std::string* jwt) {
  if (jwt != nullptr) {
    
  } else {
    
  }
  jwt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jwt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeploySpireRequest.jwt)
}

// -------------------------------------------------------------------

// DeploySpireResponse

// .ResponseStatus status = 1;
inline bool DeploySpireResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DeploySpireResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& DeploySpireResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& DeploySpireResponse::status() const {
  // @@protoc_insertion_point(field_get:DeploySpireResponse.status)
  return _internal_status();
}
inline void DeploySpireResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeploySpireResponse.status)
}
inline ::ResponseStatus* DeploySpireResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* DeploySpireResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:DeploySpireResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* DeploySpireResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* DeploySpireResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:DeploySpireResponse.status)
  return _internal_mutable_status();
}
inline void DeploySpireResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:DeploySpireResponse.status)
}

// -------------------------------------------------------------------

// DeleteSpireRequest

// .RequestMeta meta = 1;
inline bool DeleteSpireRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool DeleteSpireRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& DeleteSpireRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& DeleteSpireRequest::meta() const {
  // @@protoc_insertion_point(field_get:DeleteSpireRequest.meta)
  return _internal_meta();
}
inline void DeleteSpireRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeleteSpireRequest.meta)
}
inline ::RequestMeta* DeleteSpireRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* DeleteSpireRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:DeleteSpireRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* DeleteSpireRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* DeleteSpireRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:DeleteSpireRequest.meta)
  return _internal_mutable_meta();
}
inline void DeleteSpireRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:DeleteSpireRequest.meta)
}

// string spire_name = 2;
inline void DeleteSpireRequest::clear_spire_name() {
  spire_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteSpireRequest::spire_name() const {
  // @@protoc_insertion_point(field_get:DeleteSpireRequest.spire_name)
  return _internal_spire_name();
}
inline void DeleteSpireRequest::set_spire_name(const std::string& value) {
  _internal_set_spire_name(value);
  // @@protoc_insertion_point(field_set:DeleteSpireRequest.spire_name)
}
inline std::string* DeleteSpireRequest::mutable_spire_name() {
  // @@protoc_insertion_point(field_mutable:DeleteSpireRequest.spire_name)
  return _internal_mutable_spire_name();
}
inline const std::string& DeleteSpireRequest::_internal_spire_name() const {
  return spire_name_.Get();
}
inline void DeleteSpireRequest::_internal_set_spire_name(const std::string& value) {
  
  spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteSpireRequest::set_spire_name(std::string&& value) {
  
  spire_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeleteSpireRequest.spire_name)
}
inline void DeleteSpireRequest::set_spire_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DeleteSpireRequest.spire_name)
}
inline void DeleteSpireRequest::set_spire_name(const char* value,
    size_t size) {
  
  spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeleteSpireRequest.spire_name)
}
inline std::string* DeleteSpireRequest::_internal_mutable_spire_name() {
  
  return spire_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteSpireRequest::release_spire_name() {
  // @@protoc_insertion_point(field_release:DeleteSpireRequest.spire_name)
  return spire_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteSpireRequest::set_allocated_spire_name(std::string* spire_name) {
  if (spire_name != nullptr) {
    
  } else {
    
  }
  spire_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spire_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeleteSpireRequest.spire_name)
}

// string jwt = 3;
inline void DeleteSpireRequest::clear_jwt() {
  jwt_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteSpireRequest::jwt() const {
  // @@protoc_insertion_point(field_get:DeleteSpireRequest.jwt)
  return _internal_jwt();
}
inline void DeleteSpireRequest::set_jwt(const std::string& value) {
  _internal_set_jwt(value);
  // @@protoc_insertion_point(field_set:DeleteSpireRequest.jwt)
}
inline std::string* DeleteSpireRequest::mutable_jwt() {
  // @@protoc_insertion_point(field_mutable:DeleteSpireRequest.jwt)
  return _internal_mutable_jwt();
}
inline const std::string& DeleteSpireRequest::_internal_jwt() const {
  return jwt_.Get();
}
inline void DeleteSpireRequest::_internal_set_jwt(const std::string& value) {
  
  jwt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteSpireRequest::set_jwt(std::string&& value) {
  
  jwt_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeleteSpireRequest.jwt)
}
inline void DeleteSpireRequest::set_jwt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jwt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DeleteSpireRequest.jwt)
}
inline void DeleteSpireRequest::set_jwt(const char* value,
    size_t size) {
  
  jwt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeleteSpireRequest.jwt)
}
inline std::string* DeleteSpireRequest::_internal_mutable_jwt() {
  
  return jwt_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteSpireRequest::release_jwt() {
  // @@protoc_insertion_point(field_release:DeleteSpireRequest.jwt)
  return jwt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteSpireRequest::set_allocated_jwt(std::string* jwt) {
  if (jwt != nullptr) {
    
  } else {
    
  }
  jwt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jwt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeleteSpireRequest.jwt)
}

// -------------------------------------------------------------------

// DeleteSpireResponse

// .ResponseStatus status = 1;
inline bool DeleteSpireResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DeleteSpireResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& DeleteSpireResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& DeleteSpireResponse::status() const {
  // @@protoc_insertion_point(field_get:DeleteSpireResponse.status)
  return _internal_status();
}
inline void DeleteSpireResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeleteSpireResponse.status)
}
inline ::ResponseStatus* DeleteSpireResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* DeleteSpireResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:DeleteSpireResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* DeleteSpireResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* DeleteSpireResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:DeleteSpireResponse.status)
  return _internal_mutable_status();
}
inline void DeleteSpireResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:DeleteSpireResponse.status)
}

// -------------------------------------------------------------------

// GetSpireDeployStatusRequest

// .RequestMeta meta = 1;
inline bool GetSpireDeployStatusRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool GetSpireDeployStatusRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& GetSpireDeployStatusRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& GetSpireDeployStatusRequest::meta() const {
  // @@protoc_insertion_point(field_get:GetSpireDeployStatusRequest.meta)
  return _internal_meta();
}
inline void GetSpireDeployStatusRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetSpireDeployStatusRequest.meta)
}
inline ::RequestMeta* GetSpireDeployStatusRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* GetSpireDeployStatusRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:GetSpireDeployStatusRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* GetSpireDeployStatusRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* GetSpireDeployStatusRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:GetSpireDeployStatusRequest.meta)
  return _internal_mutable_meta();
}
inline void GetSpireDeployStatusRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:GetSpireDeployStatusRequest.meta)
}

// string spire_name = 2;
inline void GetSpireDeployStatusRequest::clear_spire_name() {
  spire_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSpireDeployStatusRequest::spire_name() const {
  // @@protoc_insertion_point(field_get:GetSpireDeployStatusRequest.spire_name)
  return _internal_spire_name();
}
inline void GetSpireDeployStatusRequest::set_spire_name(const std::string& value) {
  _internal_set_spire_name(value);
  // @@protoc_insertion_point(field_set:GetSpireDeployStatusRequest.spire_name)
}
inline std::string* GetSpireDeployStatusRequest::mutable_spire_name() {
  // @@protoc_insertion_point(field_mutable:GetSpireDeployStatusRequest.spire_name)
  return _internal_mutable_spire_name();
}
inline const std::string& GetSpireDeployStatusRequest::_internal_spire_name() const {
  return spire_name_.Get();
}
inline void GetSpireDeployStatusRequest::_internal_set_spire_name(const std::string& value) {
  
  spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSpireDeployStatusRequest::set_spire_name(std::string&& value) {
  
  spire_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetSpireDeployStatusRequest.spire_name)
}
inline void GetSpireDeployStatusRequest::set_spire_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GetSpireDeployStatusRequest.spire_name)
}
inline void GetSpireDeployStatusRequest::set_spire_name(const char* value,
    size_t size) {
  
  spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetSpireDeployStatusRequest.spire_name)
}
inline std::string* GetSpireDeployStatusRequest::_internal_mutable_spire_name() {
  
  return spire_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSpireDeployStatusRequest::release_spire_name() {
  // @@protoc_insertion_point(field_release:GetSpireDeployStatusRequest.spire_name)
  return spire_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSpireDeployStatusRequest::set_allocated_spire_name(std::string* spire_name) {
  if (spire_name != nullptr) {
    
  } else {
    
  }
  spire_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spire_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetSpireDeployStatusRequest.spire_name)
}

// string jwt = 3;
inline void GetSpireDeployStatusRequest::clear_jwt() {
  jwt_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSpireDeployStatusRequest::jwt() const {
  // @@protoc_insertion_point(field_get:GetSpireDeployStatusRequest.jwt)
  return _internal_jwt();
}
inline void GetSpireDeployStatusRequest::set_jwt(const std::string& value) {
  _internal_set_jwt(value);
  // @@protoc_insertion_point(field_set:GetSpireDeployStatusRequest.jwt)
}
inline std::string* GetSpireDeployStatusRequest::mutable_jwt() {
  // @@protoc_insertion_point(field_mutable:GetSpireDeployStatusRequest.jwt)
  return _internal_mutable_jwt();
}
inline const std::string& GetSpireDeployStatusRequest::_internal_jwt() const {
  return jwt_.Get();
}
inline void GetSpireDeployStatusRequest::_internal_set_jwt(const std::string& value) {
  
  jwt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSpireDeployStatusRequest::set_jwt(std::string&& value) {
  
  jwt_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetSpireDeployStatusRequest.jwt)
}
inline void GetSpireDeployStatusRequest::set_jwt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jwt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GetSpireDeployStatusRequest.jwt)
}
inline void GetSpireDeployStatusRequest::set_jwt(const char* value,
    size_t size) {
  
  jwt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetSpireDeployStatusRequest.jwt)
}
inline std::string* GetSpireDeployStatusRequest::_internal_mutable_jwt() {
  
  return jwt_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSpireDeployStatusRequest::release_jwt() {
  // @@protoc_insertion_point(field_release:GetSpireDeployStatusRequest.jwt)
  return jwt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSpireDeployStatusRequest::set_allocated_jwt(std::string* jwt) {
  if (jwt != nullptr) {
    
  } else {
    
  }
  jwt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jwt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetSpireDeployStatusRequest.jwt)
}

// -------------------------------------------------------------------

// GetSpireDeployStatusResponse

// .ResponseStatus status = 1;
inline bool GetSpireDeployStatusResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetSpireDeployStatusResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& GetSpireDeployStatusResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& GetSpireDeployStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:GetSpireDeployStatusResponse.status)
  return _internal_status();
}
inline void GetSpireDeployStatusResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetSpireDeployStatusResponse.status)
}
inline ::ResponseStatus* GetSpireDeployStatusResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* GetSpireDeployStatusResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:GetSpireDeployStatusResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* GetSpireDeployStatusResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* GetSpireDeployStatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:GetSpireDeployStatusResponse.status)
  return _internal_mutable_status();
}
inline void GetSpireDeployStatusResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:GetSpireDeployStatusResponse.status)
}

// .ResourceObjectsStatus resource_objects_status = 3;
inline bool GetSpireDeployStatusResponse::_internal_has_resource_objects_status() const {
  return this != internal_default_instance() && resource_objects_status_ != nullptr;
}
inline bool GetSpireDeployStatusResponse::has_resource_objects_status() const {
  return _internal_has_resource_objects_status();
}
inline void GetSpireDeployStatusResponse::clear_resource_objects_status() {
  if (GetArena() == nullptr && resource_objects_status_ != nullptr) {
    delete resource_objects_status_;
  }
  resource_objects_status_ = nullptr;
}
inline const ::ResourceObjectsStatus& GetSpireDeployStatusResponse::_internal_resource_objects_status() const {
  const ::ResourceObjectsStatus* p = resource_objects_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResourceObjectsStatus*>(
      &::_ResourceObjectsStatus_default_instance_);
}
inline const ::ResourceObjectsStatus& GetSpireDeployStatusResponse::resource_objects_status() const {
  // @@protoc_insertion_point(field_get:GetSpireDeployStatusResponse.resource_objects_status)
  return _internal_resource_objects_status();
}
inline void GetSpireDeployStatusResponse::unsafe_arena_set_allocated_resource_objects_status(
    ::ResourceObjectsStatus* resource_objects_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_objects_status_);
  }
  resource_objects_status_ = resource_objects_status;
  if (resource_objects_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetSpireDeployStatusResponse.resource_objects_status)
}
inline ::ResourceObjectsStatus* GetSpireDeployStatusResponse::release_resource_objects_status() {
  
  ::ResourceObjectsStatus* temp = resource_objects_status_;
  resource_objects_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResourceObjectsStatus* GetSpireDeployStatusResponse::unsafe_arena_release_resource_objects_status() {
  // @@protoc_insertion_point(field_release:GetSpireDeployStatusResponse.resource_objects_status)
  
  ::ResourceObjectsStatus* temp = resource_objects_status_;
  resource_objects_status_ = nullptr;
  return temp;
}
inline ::ResourceObjectsStatus* GetSpireDeployStatusResponse::_internal_mutable_resource_objects_status() {
  
  if (resource_objects_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResourceObjectsStatus>(GetArena());
    resource_objects_status_ = p;
  }
  return resource_objects_status_;
}
inline ::ResourceObjectsStatus* GetSpireDeployStatusResponse::mutable_resource_objects_status() {
  // @@protoc_insertion_point(field_mutable:GetSpireDeployStatusResponse.resource_objects_status)
  return _internal_mutable_resource_objects_status();
}
inline void GetSpireDeployStatusResponse::set_allocated_resource_objects_status(::ResourceObjectsStatus* resource_objects_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_objects_status_;
  }
  if (resource_objects_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource_objects_status);
    if (message_arena != submessage_arena) {
      resource_objects_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_objects_status, submessage_arena);
    }
    
  } else {
    
  }
  resource_objects_status_ = resource_objects_status;
  // @@protoc_insertion_point(field_set_allocated:GetSpireDeployStatusResponse.resource_objects_status)
}

// -------------------------------------------------------------------

// ResourceObjectsStatus

// bool service_running = 1;
inline void ResourceObjectsStatus::clear_service_running() {
  service_running_ = false;
}
inline bool ResourceObjectsStatus::_internal_service_running() const {
  return service_running_;
}
inline bool ResourceObjectsStatus::service_running() const {
  // @@protoc_insertion_point(field_get:ResourceObjectsStatus.service_running)
  return _internal_service_running();
}
inline void ResourceObjectsStatus::_internal_set_service_running(bool value) {
  
  service_running_ = value;
}
inline void ResourceObjectsStatus::set_service_running(bool value) {
  _internal_set_service_running(value);
  // @@protoc_insertion_point(field_set:ResourceObjectsStatus.service_running)
}

// bool deployment_running = 2;
inline void ResourceObjectsStatus::clear_deployment_running() {
  deployment_running_ = false;
}
inline bool ResourceObjectsStatus::_internal_deployment_running() const {
  return deployment_running_;
}
inline bool ResourceObjectsStatus::deployment_running() const {
  // @@protoc_insertion_point(field_get:ResourceObjectsStatus.deployment_running)
  return _internal_deployment_running();
}
inline void ResourceObjectsStatus::_internal_set_deployment_running(bool value) {
  
  deployment_running_ = value;
}
inline void ResourceObjectsStatus::set_deployment_running(bool value) {
  _internal_set_deployment_running(value);
  // @@protoc_insertion_point(field_set:ResourceObjectsStatus.deployment_running)
}

// bool hpa_running = 3;
inline void ResourceObjectsStatus::clear_hpa_running() {
  hpa_running_ = false;
}
inline bool ResourceObjectsStatus::_internal_hpa_running() const {
  return hpa_running_;
}
inline bool ResourceObjectsStatus::hpa_running() const {
  // @@protoc_insertion_point(field_get:ResourceObjectsStatus.hpa_running)
  return _internal_hpa_running();
}
inline void ResourceObjectsStatus::_internal_set_hpa_running(bool value) {
  
  hpa_running_ = value;
}
inline void ResourceObjectsStatus::set_hpa_running(bool value) {
  _internal_set_hpa_running(value);
  // @@protoc_insertion_point(field_set:ResourceObjectsStatus.hpa_running)
}

// -------------------------------------------------------------------

// ListSpiresRequest

// .RequestMeta meta = 1;
inline bool ListSpiresRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool ListSpiresRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& ListSpiresRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& ListSpiresRequest::meta() const {
  // @@protoc_insertion_point(field_get:ListSpiresRequest.meta)
  return _internal_meta();
}
inline void ListSpiresRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ListSpiresRequest.meta)
}
inline ::RequestMeta* ListSpiresRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* ListSpiresRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:ListSpiresRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* ListSpiresRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* ListSpiresRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:ListSpiresRequest.meta)
  return _internal_mutable_meta();
}
inline void ListSpiresRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:ListSpiresRequest.meta)
}

// string jwt = 2;
inline void ListSpiresRequest::clear_jwt() {
  jwt_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListSpiresRequest::jwt() const {
  // @@protoc_insertion_point(field_get:ListSpiresRequest.jwt)
  return _internal_jwt();
}
inline void ListSpiresRequest::set_jwt(const std::string& value) {
  _internal_set_jwt(value);
  // @@protoc_insertion_point(field_set:ListSpiresRequest.jwt)
}
inline std::string* ListSpiresRequest::mutable_jwt() {
  // @@protoc_insertion_point(field_mutable:ListSpiresRequest.jwt)
  return _internal_mutable_jwt();
}
inline const std::string& ListSpiresRequest::_internal_jwt() const {
  return jwt_.Get();
}
inline void ListSpiresRequest::_internal_set_jwt(const std::string& value) {
  
  jwt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListSpiresRequest::set_jwt(std::string&& value) {
  
  jwt_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ListSpiresRequest.jwt)
}
inline void ListSpiresRequest::set_jwt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jwt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ListSpiresRequest.jwt)
}
inline void ListSpiresRequest::set_jwt(const char* value,
    size_t size) {
  
  jwt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ListSpiresRequest.jwt)
}
inline std::string* ListSpiresRequest::_internal_mutable_jwt() {
  
  return jwt_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListSpiresRequest::release_jwt() {
  // @@protoc_insertion_point(field_release:ListSpiresRequest.jwt)
  return jwt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSpiresRequest::set_allocated_jwt(std::string* jwt) {
  if (jwt != nullptr) {
    
  } else {
    
  }
  jwt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jwt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ListSpiresRequest.jwt)
}

// .ListSpiresFilter filter = 3;
inline bool ListSpiresRequest::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool ListSpiresRequest::has_filter() const {
  return _internal_has_filter();
}
inline void ListSpiresRequest::clear_filter() {
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::ListSpiresFilter& ListSpiresRequest::_internal_filter() const {
  const ::ListSpiresFilter* p = filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ListSpiresFilter*>(
      &::_ListSpiresFilter_default_instance_);
}
inline const ::ListSpiresFilter& ListSpiresRequest::filter() const {
  // @@protoc_insertion_point(field_get:ListSpiresRequest.filter)
  return _internal_filter();
}
inline void ListSpiresRequest::unsafe_arena_set_allocated_filter(
    ::ListSpiresFilter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ListSpiresRequest.filter)
}
inline ::ListSpiresFilter* ListSpiresRequest::release_filter() {
  
  ::ListSpiresFilter* temp = filter_;
  filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ListSpiresFilter* ListSpiresRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:ListSpiresRequest.filter)
  
  ::ListSpiresFilter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::ListSpiresFilter* ListSpiresRequest::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::ListSpiresFilter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::ListSpiresFilter* ListSpiresRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:ListSpiresRequest.filter)
  return _internal_mutable_filter();
}
inline void ListSpiresRequest::set_allocated_filter(::ListSpiresFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:ListSpiresRequest.filter)
}

// -------------------------------------------------------------------

// ListSpiresFilter

// bool has_min_replicas = 1;
inline void ListSpiresFilter::clear_has_min_replicas() {
  has_min_replicas_ = false;
}
inline bool ListSpiresFilter::_internal_has_min_replicas() const {
  return has_min_replicas_;
}
inline bool ListSpiresFilter::has_min_replicas() const {
  // @@protoc_insertion_point(field_get:ListSpiresFilter.has_min_replicas)
  return _internal_has_min_replicas();
}
inline void ListSpiresFilter::_internal_set_has_min_replicas(bool value) {
  
  has_min_replicas_ = value;
}
inline void ListSpiresFilter::set_has_min_replicas(bool value) {
  _internal_set_has_min_replicas(value);
  // @@protoc_insertion_point(field_set:ListSpiresFilter.has_min_replicas)
}

// -------------------------------------------------------------------

// ListSpiresResponse

// .ResponseStatus status = 1;
inline bool ListSpiresResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListSpiresResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& ListSpiresResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& ListSpiresResponse::status() const {
  // @@protoc_insertion_point(field_get:ListSpiresResponse.status)
  return _internal_status();
}
inline void ListSpiresResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ListSpiresResponse.status)
}
inline ::ResponseStatus* ListSpiresResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* ListSpiresResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:ListSpiresResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* ListSpiresResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* ListSpiresResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:ListSpiresResponse.status)
  return _internal_mutable_status();
}
inline void ListSpiresResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:ListSpiresResponse.status)
}

// repeated string spire_names = 2;
inline int ListSpiresResponse::_internal_spire_names_size() const {
  return spire_names_.size();
}
inline int ListSpiresResponse::spire_names_size() const {
  return _internal_spire_names_size();
}
inline void ListSpiresResponse::clear_spire_names() {
  spire_names_.Clear();
}
inline std::string* ListSpiresResponse::add_spire_names() {
  // @@protoc_insertion_point(field_add_mutable:ListSpiresResponse.spire_names)
  return _internal_add_spire_names();
}
inline const std::string& ListSpiresResponse::_internal_spire_names(int index) const {
  return spire_names_.Get(index);
}
inline const std::string& ListSpiresResponse::spire_names(int index) const {
  // @@protoc_insertion_point(field_get:ListSpiresResponse.spire_names)
  return _internal_spire_names(index);
}
inline std::string* ListSpiresResponse::mutable_spire_names(int index) {
  // @@protoc_insertion_point(field_mutable:ListSpiresResponse.spire_names)
  return spire_names_.Mutable(index);
}
inline void ListSpiresResponse::set_spire_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ListSpiresResponse.spire_names)
  spire_names_.Mutable(index)->assign(value);
}
inline void ListSpiresResponse::set_spire_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ListSpiresResponse.spire_names)
  spire_names_.Mutable(index)->assign(std::move(value));
}
inline void ListSpiresResponse::set_spire_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  spire_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ListSpiresResponse.spire_names)
}
inline void ListSpiresResponse::set_spire_names(int index, const char* value, size_t size) {
  spire_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ListSpiresResponse.spire_names)
}
inline std::string* ListSpiresResponse::_internal_add_spire_names() {
  return spire_names_.Add();
}
inline void ListSpiresResponse::add_spire_names(const std::string& value) {
  spire_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ListSpiresResponse.spire_names)
}
inline void ListSpiresResponse::add_spire_names(std::string&& value) {
  spire_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ListSpiresResponse.spire_names)
}
inline void ListSpiresResponse::add_spire_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  spire_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ListSpiresResponse.spire_names)
}
inline void ListSpiresResponse::add_spire_names(const char* value, size_t size) {
  spire_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ListSpiresResponse.spire_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListSpiresResponse::spire_names() const {
  // @@protoc_insertion_point(field_list:ListSpiresResponse.spire_names)
  return spire_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListSpiresResponse::mutable_spire_names() {
  // @@protoc_insertion_point(field_mutable_list:ListSpiresResponse.spire_names)
  return &spire_names_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto
