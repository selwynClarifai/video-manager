# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from proto.inference_coordinator import inference_coordinator_pb2 as proto_dot_inference__coordinator_dot_inference__coordinator__pb2


class InferenceCoordinatorStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DeploySpire = channel.unary_unary(
                '/InferenceCoordinator/DeploySpire',
                request_serializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.DeploySpireRequest.SerializeToString,
                response_deserializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.DeploySpireResponse.FromString,
                )
        self.DeleteSpire = channel.unary_unary(
                '/InferenceCoordinator/DeleteSpire',
                request_serializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.DeleteSpireRequest.SerializeToString,
                response_deserializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.DeleteSpireResponse.FromString,
                )
        self.GetSpireDeployStatus = channel.unary_unary(
                '/InferenceCoordinator/GetSpireDeployStatus',
                request_serializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.GetSpireDeployStatusRequest.SerializeToString,
                response_deserializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.GetSpireDeployStatusResponse.FromString,
                )
        self.ListSpires = channel.unary_unary(
                '/InferenceCoordinator/ListSpires',
                request_serializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.ListSpiresRequest.SerializeToString,
                response_deserializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.ListSpiresResponse.FromString,
                )


class InferenceCoordinatorServicer(object):
    """Interface exported by the server.
    """

    def DeploySpire(self, request, context):
        """Deploy a Spire
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSpire(self, request, context):
        """Delete a Spire
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSpireDeployStatus(self, request, context):
        """Check whether a spire is running
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSpires(self, request, context):
        """Get list of spires
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InferenceCoordinatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DeploySpire': grpc.unary_unary_rpc_method_handler(
                    servicer.DeploySpire,
                    request_deserializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.DeploySpireRequest.FromString,
                    response_serializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.DeploySpireResponse.SerializeToString,
            ),
            'DeleteSpire': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSpire,
                    request_deserializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.DeleteSpireRequest.FromString,
                    response_serializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.DeleteSpireResponse.SerializeToString,
            ),
            'GetSpireDeployStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSpireDeployStatus,
                    request_deserializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.GetSpireDeployStatusRequest.FromString,
                    response_serializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.GetSpireDeployStatusResponse.SerializeToString,
            ),
            'ListSpires': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSpires,
                    request_deserializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.ListSpiresRequest.FromString,
                    response_serializer=proto_dot_inference__coordinator_dot_inference__coordinator__pb2.ListSpiresResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'InferenceCoordinator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InferenceCoordinator(object):
    """Interface exported by the server.
    """

    @staticmethod
    def DeploySpire(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InferenceCoordinator/DeploySpire',
            proto_dot_inference__coordinator_dot_inference__coordinator__pb2.DeploySpireRequest.SerializeToString,
            proto_dot_inference__coordinator_dot_inference__coordinator__pb2.DeploySpireResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSpire(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InferenceCoordinator/DeleteSpire',
            proto_dot_inference__coordinator_dot_inference__coordinator__pb2.DeleteSpireRequest.SerializeToString,
            proto_dot_inference__coordinator_dot_inference__coordinator__pb2.DeleteSpireResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSpireDeployStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InferenceCoordinator/GetSpireDeployStatus',
            proto_dot_inference__coordinator_dot_inference__coordinator__pb2.GetSpireDeployStatusRequest.SerializeToString,
            proto_dot_inference__coordinator_dot_inference__coordinator__pb2.GetSpireDeployStatusResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSpires(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InferenceCoordinator/ListSpires',
            proto_dot_inference__coordinator_dot_inference__coordinator__pb2.ListSpiresRequest.SerializeToString,
            proto_dot_inference__coordinator_dot_inference__coordinator__pb2.ListSpiresResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
