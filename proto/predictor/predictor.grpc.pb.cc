// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/predictor/predictor.proto

#include "proto/predictor/predictor.pb.h"
#include "proto/predictor/predictor.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* PredictorService_method_names[] = {
  "/PredictorService/PredictorPredict",
  "/PredictorService/PredictorPredictSQLQuery",
  "/PredictorService/PredictorTrain",
  "/PredictorService/PredictorTrainStream",
  "/PredictorService/PredictorGetWeights",
  "/PredictorService/PredictorGetMulticlassMetrics",
};

std::unique_ptr< PredictorService::Stub> PredictorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PredictorService::Stub> stub(new PredictorService::Stub(channel));
  return stub;
}

PredictorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PredictorPredict_(PredictorService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PredictorPredictSQLQuery_(PredictorService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PredictorTrain_(PredictorService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PredictorTrainStream_(PredictorService_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PredictorGetWeights_(PredictorService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PredictorGetMulticlassMetrics_(PredictorService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PredictorService::Stub::PredictorPredict(::grpc::ClientContext* context, const ::PredictorPredictRequest& request, ::PredictorPredictResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PredictorPredict_, context, request, response);
}

void PredictorService::Stub::experimental_async::PredictorPredict(::grpc::ClientContext* context, const ::PredictorPredictRequest* request, ::PredictorPredictResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PredictorPredict_, context, request, response, std::move(f));
}

void PredictorService::Stub::experimental_async::PredictorPredict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PredictorPredict_, context, request, response, std::move(f));
}

void PredictorService::Stub::experimental_async::PredictorPredict(::grpc::ClientContext* context, const ::PredictorPredictRequest* request, ::PredictorPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PredictorPredict_, context, request, response, reactor);
}

void PredictorService::Stub::experimental_async::PredictorPredict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PredictorPredict_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>* PredictorService::Stub::AsyncPredictorPredictRaw(::grpc::ClientContext* context, const ::PredictorPredictRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::PredictorPredictResponse>::Create(channel_.get(), cq, rpcmethod_PredictorPredict_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>* PredictorService::Stub::PrepareAsyncPredictorPredictRaw(::grpc::ClientContext* context, const ::PredictorPredictRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::PredictorPredictResponse>::Create(channel_.get(), cq, rpcmethod_PredictorPredict_, context, request, false);
}

::grpc::Status PredictorService::Stub::PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest& request, ::PredictorPredictResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PredictorPredictSQLQuery_, context, request, response);
}

void PredictorService::Stub::experimental_async::PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest* request, ::PredictorPredictResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PredictorPredictSQLQuery_, context, request, response, std::move(f));
}

void PredictorService::Stub::experimental_async::PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PredictorPredictSQLQuery_, context, request, response, std::move(f));
}

void PredictorService::Stub::experimental_async::PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest* request, ::PredictorPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PredictorPredictSQLQuery_, context, request, response, reactor);
}

void PredictorService::Stub::experimental_async::PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PredictorPredictSQLQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>* PredictorService::Stub::AsyncPredictorPredictSQLQueryRaw(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::PredictorPredictResponse>::Create(channel_.get(), cq, rpcmethod_PredictorPredictSQLQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>* PredictorService::Stub::PrepareAsyncPredictorPredictSQLQueryRaw(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::PredictorPredictResponse>::Create(channel_.get(), cq, rpcmethod_PredictorPredictSQLQuery_, context, request, false);
}

::grpc::Status PredictorService::Stub::PredictorTrain(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::PredictorTrainResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PredictorTrain_, context, request, response);
}

void PredictorService::Stub::experimental_async::PredictorTrain(::grpc::ClientContext* context, const ::PredictorTrainRequest* request, ::PredictorTrainResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PredictorTrain_, context, request, response, std::move(f));
}

void PredictorService::Stub::experimental_async::PredictorTrain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorTrainResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PredictorTrain_, context, request, response, std::move(f));
}

void PredictorService::Stub::experimental_async::PredictorTrain(::grpc::ClientContext* context, const ::PredictorTrainRequest* request, ::PredictorTrainResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PredictorTrain_, context, request, response, reactor);
}

void PredictorService::Stub::experimental_async::PredictorTrain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorTrainResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PredictorTrain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PredictorTrainResponse>* PredictorService::Stub::AsyncPredictorTrainRaw(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::PredictorTrainResponse>::Create(channel_.get(), cq, rpcmethod_PredictorTrain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::PredictorTrainResponse>* PredictorService::Stub::PrepareAsyncPredictorTrainRaw(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::PredictorTrainResponse>::Create(channel_.get(), cq, rpcmethod_PredictorTrain_, context, request, false);
}

::grpc::ClientReader< ::PredictorTrainResponse>* PredictorService::Stub::PredictorTrainStreamRaw(::grpc::ClientContext* context, const ::PredictorTrainRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::PredictorTrainResponse>::Create(channel_.get(), rpcmethod_PredictorTrainStream_, context, request);
}

void PredictorService::Stub::experimental_async::PredictorTrainStream(::grpc::ClientContext* context, ::PredictorTrainRequest* request, ::grpc::experimental::ClientReadReactor< ::PredictorTrainResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::PredictorTrainResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_PredictorTrainStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::PredictorTrainResponse>* PredictorService::Stub::AsyncPredictorTrainStreamRaw(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::PredictorTrainResponse>::Create(channel_.get(), cq, rpcmethod_PredictorTrainStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::PredictorTrainResponse>* PredictorService::Stub::PrepareAsyncPredictorTrainStreamRaw(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::PredictorTrainResponse>::Create(channel_.get(), cq, rpcmethod_PredictorTrainStream_, context, request, false, nullptr);
}

::grpc::Status PredictorService::Stub::PredictorGetWeights(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest& request, ::PredictorGetWeightsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PredictorGetWeights_, context, request, response);
}

void PredictorService::Stub::experimental_async::PredictorGetWeights(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest* request, ::PredictorGetWeightsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PredictorGetWeights_, context, request, response, std::move(f));
}

void PredictorService::Stub::experimental_async::PredictorGetWeights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorGetWeightsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PredictorGetWeights_, context, request, response, std::move(f));
}

void PredictorService::Stub::experimental_async::PredictorGetWeights(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest* request, ::PredictorGetWeightsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PredictorGetWeights_, context, request, response, reactor);
}

void PredictorService::Stub::experimental_async::PredictorGetWeights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorGetWeightsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PredictorGetWeights_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PredictorGetWeightsResponse>* PredictorService::Stub::AsyncPredictorGetWeightsRaw(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::PredictorGetWeightsResponse>::Create(channel_.get(), cq, rpcmethod_PredictorGetWeights_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::PredictorGetWeightsResponse>* PredictorService::Stub::PrepareAsyncPredictorGetWeightsRaw(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::PredictorGetWeightsResponse>::Create(channel_.get(), cq, rpcmethod_PredictorGetWeights_, context, request, false);
}

::grpc::Status PredictorService::Stub::PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest& request, ::MulticlassMetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PredictorGetMulticlassMetrics_, context, request, response);
}

void PredictorService::Stub::experimental_async::PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest* request, ::MulticlassMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PredictorGetMulticlassMetrics_, context, request, response, std::move(f));
}

void PredictorService::Stub::experimental_async::PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MulticlassMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PredictorGetMulticlassMetrics_, context, request, response, std::move(f));
}

void PredictorService::Stub::experimental_async::PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest* request, ::MulticlassMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PredictorGetMulticlassMetrics_, context, request, response, reactor);
}

void PredictorService::Stub::experimental_async::PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MulticlassMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PredictorGetMulticlassMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MulticlassMetricsResponse>* PredictorService::Stub::AsyncPredictorGetMulticlassMetricsRaw(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::MulticlassMetricsResponse>::Create(channel_.get(), cq, rpcmethod_PredictorGetMulticlassMetrics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MulticlassMetricsResponse>* PredictorService::Stub::PrepareAsyncPredictorGetMulticlassMetricsRaw(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::MulticlassMetricsResponse>::Create(channel_.get(), cq, rpcmethod_PredictorGetMulticlassMetrics_, context, request, false);
}

PredictorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PredictorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PredictorService::Service, ::PredictorPredictRequest, ::PredictorPredictResponse>(
          [](PredictorService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::PredictorPredictRequest* req,
             ::PredictorPredictResponse* resp) {
               return service->PredictorPredict(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PredictorService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PredictorService::Service, ::PredictorPredictSQLQueryRequest, ::PredictorPredictResponse>(
          [](PredictorService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::PredictorPredictSQLQueryRequest* req,
             ::PredictorPredictResponse* resp) {
               return service->PredictorPredictSQLQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PredictorService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PredictorService::Service, ::PredictorTrainRequest, ::PredictorTrainResponse>(
          [](PredictorService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::PredictorTrainRequest* req,
             ::PredictorTrainResponse* resp) {
               return service->PredictorTrain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PredictorService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PredictorService::Service, ::PredictorTrainRequest, ::PredictorTrainResponse>(
          [](PredictorService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::PredictorTrainRequest* req,
             ::grpc_impl::ServerWriter<::PredictorTrainResponse>* writer) {
               return service->PredictorTrainStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PredictorService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PredictorService::Service, ::PredictorGetWeightsRequest, ::PredictorGetWeightsResponse>(
          [](PredictorService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::PredictorGetWeightsRequest* req,
             ::PredictorGetWeightsResponse* resp) {
               return service->PredictorGetWeights(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PredictorService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PredictorService::Service, ::PredictorTrainAndEvalRequest, ::MulticlassMetricsResponse>(
          [](PredictorService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::PredictorTrainAndEvalRequest* req,
             ::MulticlassMetricsResponse* resp) {
               return service->PredictorGetMulticlassMetrics(ctx, req, resp);
             }, this)));
}

PredictorService::Service::~Service() {
}

::grpc::Status PredictorService::Service::PredictorPredict(::grpc::ServerContext* context, const ::PredictorPredictRequest* request, ::PredictorPredictResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PredictorService::Service::PredictorPredictSQLQuery(::grpc::ServerContext* context, const ::PredictorPredictSQLQueryRequest* request, ::PredictorPredictResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PredictorService::Service::PredictorTrain(::grpc::ServerContext* context, const ::PredictorTrainRequest* request, ::PredictorTrainResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PredictorService::Service::PredictorTrainStream(::grpc::ServerContext* context, const ::PredictorTrainRequest* request, ::grpc::ServerWriter< ::PredictorTrainResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PredictorService::Service::PredictorGetWeights(::grpc::ServerContext* context, const ::PredictorGetWeightsRequest* request, ::PredictorGetWeightsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PredictorService::Service::PredictorGetMulticlassMetrics(::grpc::ServerContext* context, const ::PredictorTrainAndEvalRequest* request, ::MulticlassMetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


