// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/predictor/predictor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fpredictor_2fpredictor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fpredictor_2fpredictor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/concept_trainer_dump/concept_trainer_dump.pb.h"
#include "proto/predictor/predictor_metrics.pb.h"
#include "proto/utils/databatch.pb.h"
#include "proto/utils/embedding.pb.h"
#include "proto/utils/request_meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fpredictor_2fpredictor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fpredictor_2fpredictor_2eproto;
class EvalSpec;
class EvalSpecDefaultTypeInternal;
extern EvalSpecDefaultTypeInternal _EvalSpec_default_instance_;
class PredictorGetWeightsRequest;
class PredictorGetWeightsRequestDefaultTypeInternal;
extern PredictorGetWeightsRequestDefaultTypeInternal _PredictorGetWeightsRequest_default_instance_;
class PredictorGetWeightsResponse;
class PredictorGetWeightsResponseDefaultTypeInternal;
extern PredictorGetWeightsResponseDefaultTypeInternal _PredictorGetWeightsResponse_default_instance_;
class PredictorGetWeightsResponse_WeightsEntry_DoNotUse;
class PredictorGetWeightsResponse_WeightsEntry_DoNotUseDefaultTypeInternal;
extern PredictorGetWeightsResponse_WeightsEntry_DoNotUseDefaultTypeInternal _PredictorGetWeightsResponse_WeightsEntry_DoNotUse_default_instance_;
class PredictorPredictRequest;
class PredictorPredictRequestDefaultTypeInternal;
extern PredictorPredictRequestDefaultTypeInternal _PredictorPredictRequest_default_instance_;
class PredictorPredictResponse;
class PredictorPredictResponseDefaultTypeInternal;
extern PredictorPredictResponseDefaultTypeInternal _PredictorPredictResponse_default_instance_;
class PredictorPredictSQLQueryRequest;
class PredictorPredictSQLQueryRequestDefaultTypeInternal;
extern PredictorPredictSQLQueryRequestDefaultTypeInternal _PredictorPredictSQLQueryRequest_default_instance_;
class PredictorTrainAndEvalRequest;
class PredictorTrainAndEvalRequestDefaultTypeInternal;
extern PredictorTrainAndEvalRequestDefaultTypeInternal _PredictorTrainAndEvalRequest_default_instance_;
class PredictorTrainRequest;
class PredictorTrainRequestDefaultTypeInternal;
extern PredictorTrainRequestDefaultTypeInternal _PredictorTrainRequest_default_instance_;
class PredictorTrainResponse;
class PredictorTrainResponseDefaultTypeInternal;
extern PredictorTrainResponseDefaultTypeInternal _PredictorTrainResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::EvalSpec* Arena::CreateMaybeMessage<::EvalSpec>(Arena*);
template<> ::PredictorGetWeightsRequest* Arena::CreateMaybeMessage<::PredictorGetWeightsRequest>(Arena*);
template<> ::PredictorGetWeightsResponse* Arena::CreateMaybeMessage<::PredictorGetWeightsResponse>(Arena*);
template<> ::PredictorGetWeightsResponse_WeightsEntry_DoNotUse* Arena::CreateMaybeMessage<::PredictorGetWeightsResponse_WeightsEntry_DoNotUse>(Arena*);
template<> ::PredictorPredictRequest* Arena::CreateMaybeMessage<::PredictorPredictRequest>(Arena*);
template<> ::PredictorPredictResponse* Arena::CreateMaybeMessage<::PredictorPredictResponse>(Arena*);
template<> ::PredictorPredictSQLQueryRequest* Arena::CreateMaybeMessage<::PredictorPredictSQLQueryRequest>(Arena*);
template<> ::PredictorTrainAndEvalRequest* Arena::CreateMaybeMessage<::PredictorTrainAndEvalRequest>(Arena*);
template<> ::PredictorTrainRequest* Arena::CreateMaybeMessage<::PredictorTrainRequest>(Arena*);
template<> ::PredictorTrainResponse* Arena::CreateMaybeMessage<::PredictorTrainResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PredictorPredictRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PredictorPredictRequest) */ {
 public:
  inline PredictorPredictRequest() : PredictorPredictRequest(nullptr) {}
  virtual ~PredictorPredictRequest();

  PredictorPredictRequest(const PredictorPredictRequest& from);
  PredictorPredictRequest(PredictorPredictRequest&& from) noexcept
    : PredictorPredictRequest() {
    *this = ::std::move(from);
  }

  inline PredictorPredictRequest& operator=(const PredictorPredictRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictorPredictRequest& operator=(PredictorPredictRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictorPredictRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictorPredictRequest* internal_default_instance() {
    return reinterpret_cast<const PredictorPredictRequest*>(
               &_PredictorPredictRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PredictorPredictRequest& a, PredictorPredictRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictorPredictRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictorPredictRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictorPredictRequest* New() const final {
    return CreateMaybeMessage<PredictorPredictRequest>(nullptr);
  }

  PredictorPredictRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictorPredictRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictorPredictRequest& from);
  void MergeFrom(const PredictorPredictRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictorPredictRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PredictorPredictRequest";
  }
  protected:
  explicit PredictorPredictRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAiidsFieldNumber = 4,
    kTrainerNameFieldNumber = 3,
    kMetaFieldNumber = 1,
    kDataFieldNumber = 2,
    kTopkFieldNumber = 5,
    kEchoAiidsFieldNumber = 6,
  };
  // repeated string aiids = 4;
  int aiids_size() const;
  private:
  int _internal_aiids_size() const;
  public:
  void clear_aiids();
  const std::string& aiids(int index) const;
  std::string* mutable_aiids(int index);
  void set_aiids(int index, const std::string& value);
  void set_aiids(int index, std::string&& value);
  void set_aiids(int index, const char* value);
  void set_aiids(int index, const char* value, size_t size);
  std::string* add_aiids();
  void add_aiids(const std::string& value);
  void add_aiids(std::string&& value);
  void add_aiids(const char* value);
  void add_aiids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aiids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aiids();
  private:
  const std::string& _internal_aiids(int index) const;
  std::string* _internal_add_aiids();
  public:

  // string trainer_name = 3;
  void clear_trainer_name();
  const std::string& trainer_name() const;
  void set_trainer_name(const std::string& value);
  void set_trainer_name(std::string&& value);
  void set_trainer_name(const char* value);
  void set_trainer_name(const char* value, size_t size);
  std::string* mutable_trainer_name();
  std::string* release_trainer_name();
  void set_allocated_trainer_name(std::string* trainer_name);
  private:
  const std::string& _internal_trainer_name() const;
  void _internal_set_trainer_name(const std::string& value);
  std::string* _internal_mutable_trainer_name();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .DataBatch data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DataBatch& data() const;
  ::DataBatch* release_data();
  ::DataBatch* mutable_data();
  void set_allocated_data(::DataBatch* data);
  private:
  const ::DataBatch& _internal_data() const;
  ::DataBatch* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DataBatch* data);
  ::DataBatch* unsafe_arena_release_data();

  // int32 topk = 5;
  void clear_topk();
  ::PROTOBUF_NAMESPACE_ID::int32 topk() const;
  void set_topk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_topk() const;
  void _internal_set_topk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool echo_aiids = 6;
  void clear_echo_aiids();
  bool echo_aiids() const;
  void set_echo_aiids(bool value);
  private:
  bool _internal_echo_aiids() const;
  void _internal_set_echo_aiids(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PredictorPredictRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aiids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trainer_name_;
  ::RequestMeta* meta_;
  ::DataBatch* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 topk_;
  bool echo_aiids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_2eproto;
};
// -------------------------------------------------------------------

class PredictorPredictSQLQueryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PredictorPredictSQLQueryRequest) */ {
 public:
  inline PredictorPredictSQLQueryRequest() : PredictorPredictSQLQueryRequest(nullptr) {}
  virtual ~PredictorPredictSQLQueryRequest();

  PredictorPredictSQLQueryRequest(const PredictorPredictSQLQueryRequest& from);
  PredictorPredictSQLQueryRequest(PredictorPredictSQLQueryRequest&& from) noexcept
    : PredictorPredictSQLQueryRequest() {
    *this = ::std::move(from);
  }

  inline PredictorPredictSQLQueryRequest& operator=(const PredictorPredictSQLQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictorPredictSQLQueryRequest& operator=(PredictorPredictSQLQueryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictorPredictSQLQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictorPredictSQLQueryRequest* internal_default_instance() {
    return reinterpret_cast<const PredictorPredictSQLQueryRequest*>(
               &_PredictorPredictSQLQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PredictorPredictSQLQueryRequest& a, PredictorPredictSQLQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictorPredictSQLQueryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictorPredictSQLQueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictorPredictSQLQueryRequest* New() const final {
    return CreateMaybeMessage<PredictorPredictSQLQueryRequest>(nullptr);
  }

  PredictorPredictSQLQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictorPredictSQLQueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictorPredictSQLQueryRequest& from);
  void MergeFrom(const PredictorPredictSQLQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictorPredictSQLQueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PredictorPredictSQLQueryRequest";
  }
  protected:
  explicit PredictorPredictSQLQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAiidsFieldNumber = 5,
    kSqlQueryFieldNumber = 2,
    kTrainerNameFieldNumber = 3,
    kMetaFieldNumber = 1,
    kTopKDataExamplesFieldNumber = 4,
    kTopKPredictionsFieldNumber = 6,
    kEchoAiidsFieldNumber = 7,
  };
  // repeated string aiids = 5;
  int aiids_size() const;
  private:
  int _internal_aiids_size() const;
  public:
  void clear_aiids();
  const std::string& aiids(int index) const;
  std::string* mutable_aiids(int index);
  void set_aiids(int index, const std::string& value);
  void set_aiids(int index, std::string&& value);
  void set_aiids(int index, const char* value);
  void set_aiids(int index, const char* value, size_t size);
  std::string* add_aiids();
  void add_aiids(const std::string& value);
  void add_aiids(std::string&& value);
  void add_aiids(const char* value);
  void add_aiids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aiids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aiids();
  private:
  const std::string& _internal_aiids(int index) const;
  std::string* _internal_add_aiids();
  public:

  // string sql_query = 2;
  void clear_sql_query();
  const std::string& sql_query() const;
  void set_sql_query(const std::string& value);
  void set_sql_query(std::string&& value);
  void set_sql_query(const char* value);
  void set_sql_query(const char* value, size_t size);
  std::string* mutable_sql_query();
  std::string* release_sql_query();
  void set_allocated_sql_query(std::string* sql_query);
  private:
  const std::string& _internal_sql_query() const;
  void _internal_set_sql_query(const std::string& value);
  std::string* _internal_mutable_sql_query();
  public:

  // string trainer_name = 3;
  void clear_trainer_name();
  const std::string& trainer_name() const;
  void set_trainer_name(const std::string& value);
  void set_trainer_name(std::string&& value);
  void set_trainer_name(const char* value);
  void set_trainer_name(const char* value, size_t size);
  std::string* mutable_trainer_name();
  std::string* release_trainer_name();
  void set_allocated_trainer_name(std::string* trainer_name);
  private:
  const std::string& _internal_trainer_name() const;
  void _internal_set_trainer_name(const std::string& value);
  std::string* _internal_mutable_trainer_name();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // int32 top_k_data_examples = 4;
  void clear_top_k_data_examples();
  ::PROTOBUF_NAMESPACE_ID::int32 top_k_data_examples() const;
  void set_top_k_data_examples(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_top_k_data_examples() const;
  void _internal_set_top_k_data_examples(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 top_k_predictions = 6;
  void clear_top_k_predictions();
  ::PROTOBUF_NAMESPACE_ID::int32 top_k_predictions() const;
  void set_top_k_predictions(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_top_k_predictions() const;
  void _internal_set_top_k_predictions(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool echo_aiids = 7;
  void clear_echo_aiids();
  bool echo_aiids() const;
  void set_echo_aiids(bool value);
  private:
  bool _internal_echo_aiids() const;
  void _internal_set_echo_aiids(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PredictorPredictSQLQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aiids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trainer_name_;
  ::RequestMeta* meta_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_k_data_examples_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_k_predictions_;
  bool echo_aiids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_2eproto;
};
// -------------------------------------------------------------------

class PredictorPredictResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PredictorPredictResponse) */ {
 public:
  inline PredictorPredictResponse() : PredictorPredictResponse(nullptr) {}
  virtual ~PredictorPredictResponse();

  PredictorPredictResponse(const PredictorPredictResponse& from);
  PredictorPredictResponse(PredictorPredictResponse&& from) noexcept
    : PredictorPredictResponse() {
    *this = ::std::move(from);
  }

  inline PredictorPredictResponse& operator=(const PredictorPredictResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictorPredictResponse& operator=(PredictorPredictResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictorPredictResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictorPredictResponse* internal_default_instance() {
    return reinterpret_cast<const PredictorPredictResponse*>(
               &_PredictorPredictResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PredictorPredictResponse& a, PredictorPredictResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictorPredictResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictorPredictResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictorPredictResponse* New() const final {
    return CreateMaybeMessage<PredictorPredictResponse>(nullptr);
  }

  PredictorPredictResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictorPredictResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictorPredictResponse& from);
  void MergeFrom(const PredictorPredictResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictorPredictResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PredictorPredictResponse";
  }
  protected:
  explicit PredictorPredictResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAiidsFieldNumber = 3,
    kStatusFieldNumber = 1,
    kResultsFieldNumber = 2,
  };
  // repeated string aiids = 3;
  int aiids_size() const;
  private:
  int _internal_aiids_size() const;
  public:
  void clear_aiids();
  const std::string& aiids(int index) const;
  std::string* mutable_aiids(int index);
  void set_aiids(int index, const std::string& value);
  void set_aiids(int index, std::string&& value);
  void set_aiids(int index, const char* value);
  void set_aiids(int index, const char* value, size_t size);
  std::string* add_aiids();
  void add_aiids(const std::string& value);
  void add_aiids(std::string&& value);
  void add_aiids(const char* value);
  void add_aiids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aiids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aiids();
  private:
  const std::string& _internal_aiids(int index) const;
  std::string* _internal_add_aiids();
  public:

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // .DataBatch results = 2;
  bool has_results() const;
  private:
  bool _internal_has_results() const;
  public:
  void clear_results();
  const ::DataBatch& results() const;
  ::DataBatch* release_results();
  ::DataBatch* mutable_results();
  void set_allocated_results(::DataBatch* results);
  private:
  const ::DataBatch& _internal_results() const;
  ::DataBatch* _internal_mutable_results();
  public:
  void unsafe_arena_set_allocated_results(
      ::DataBatch* results);
  ::DataBatch* unsafe_arena_release_results();

  // @@protoc_insertion_point(class_scope:PredictorPredictResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aiids_;
  ::ResponseStatus* status_;
  ::DataBatch* results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_2eproto;
};
// -------------------------------------------------------------------

class PredictorTrainAndEvalRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PredictorTrainAndEvalRequest) */ {
 public:
  inline PredictorTrainAndEvalRequest() : PredictorTrainAndEvalRequest(nullptr) {}
  virtual ~PredictorTrainAndEvalRequest();

  PredictorTrainAndEvalRequest(const PredictorTrainAndEvalRequest& from);
  PredictorTrainAndEvalRequest(PredictorTrainAndEvalRequest&& from) noexcept
    : PredictorTrainAndEvalRequest() {
    *this = ::std::move(from);
  }

  inline PredictorTrainAndEvalRequest& operator=(const PredictorTrainAndEvalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictorTrainAndEvalRequest& operator=(PredictorTrainAndEvalRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictorTrainAndEvalRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictorTrainAndEvalRequest* internal_default_instance() {
    return reinterpret_cast<const PredictorTrainAndEvalRequest*>(
               &_PredictorTrainAndEvalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PredictorTrainAndEvalRequest& a, PredictorTrainAndEvalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictorTrainAndEvalRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictorTrainAndEvalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictorTrainAndEvalRequest* New() const final {
    return CreateMaybeMessage<PredictorTrainAndEvalRequest>(nullptr);
  }

  PredictorTrainAndEvalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictorTrainAndEvalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictorTrainAndEvalRequest& from);
  void MergeFrom(const PredictorTrainAndEvalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictorTrainAndEvalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PredictorTrainAndEvalRequest";
  }
  protected:
  explicit PredictorTrainAndEvalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
    kTrainRequestFieldNumber = 2,
    kEvalSpecFieldNumber = 3,
  };
  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .PredictorTrainRequest train_request = 2;
  bool has_train_request() const;
  private:
  bool _internal_has_train_request() const;
  public:
  void clear_train_request();
  const ::PredictorTrainRequest& train_request() const;
  ::PredictorTrainRequest* release_train_request();
  ::PredictorTrainRequest* mutable_train_request();
  void set_allocated_train_request(::PredictorTrainRequest* train_request);
  private:
  const ::PredictorTrainRequest& _internal_train_request() const;
  ::PredictorTrainRequest* _internal_mutable_train_request();
  public:
  void unsafe_arena_set_allocated_train_request(
      ::PredictorTrainRequest* train_request);
  ::PredictorTrainRequest* unsafe_arena_release_train_request();

  // .EvalSpec eval_spec = 3;
  bool has_eval_spec() const;
  private:
  bool _internal_has_eval_spec() const;
  public:
  void clear_eval_spec();
  const ::EvalSpec& eval_spec() const;
  ::EvalSpec* release_eval_spec();
  ::EvalSpec* mutable_eval_spec();
  void set_allocated_eval_spec(::EvalSpec* eval_spec);
  private:
  const ::EvalSpec& _internal_eval_spec() const;
  ::EvalSpec* _internal_mutable_eval_spec();
  public:
  void unsafe_arena_set_allocated_eval_spec(
      ::EvalSpec* eval_spec);
  ::EvalSpec* unsafe_arena_release_eval_spec();

  // @@protoc_insertion_point(class_scope:PredictorTrainAndEvalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::RequestMeta* meta_;
  ::PredictorTrainRequest* train_request_;
  ::EvalSpec* eval_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_2eproto;
};
// -------------------------------------------------------------------

class PredictorTrainRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PredictorTrainRequest) */ {
 public:
  inline PredictorTrainRequest() : PredictorTrainRequest(nullptr) {}
  virtual ~PredictorTrainRequest();

  PredictorTrainRequest(const PredictorTrainRequest& from);
  PredictorTrainRequest(PredictorTrainRequest&& from) noexcept
    : PredictorTrainRequest() {
    *this = ::std::move(from);
  }

  inline PredictorTrainRequest& operator=(const PredictorTrainRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictorTrainRequest& operator=(PredictorTrainRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictorTrainRequest& default_instance();

  enum TrainingDataCase {
    kData = 100,
    kSqlQuery = 101,
    TRAINING_DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictorTrainRequest* internal_default_instance() {
    return reinterpret_cast<const PredictorTrainRequest*>(
               &_PredictorTrainRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PredictorTrainRequest& a, PredictorTrainRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictorTrainRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictorTrainRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictorTrainRequest* New() const final {
    return CreateMaybeMessage<PredictorTrainRequest>(nullptr);
  }

  PredictorTrainRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictorTrainRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictorTrainRequest& from);
  void MergeFrom(const PredictorTrainRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictorTrainRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PredictorTrainRequest";
  }
  protected:
  explicit PredictorTrainRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAiidsFieldNumber = 6,
    kTrainerNameFieldNumber = 2,
    kEmbeddingsModelFieldNumber = 5,
    kHyperParametersFieldNumber = 9,
    kMetaFieldNumber = 1,
    kUsePrevTrainedFieldNumber = 3,
    kTrainingTypeFieldNumber = 4,
    kTrainItersFieldNumber = 7,
    kTrainingEnvironmentFieldNumber = 8,
    kMissingPositiveExamplePolicyFieldNumber = 10,
    kDataFieldNumber = 100,
    kSqlQueryFieldNumber = 101,
  };
  // repeated string aiids = 6;
  int aiids_size() const;
  private:
  int _internal_aiids_size() const;
  public:
  void clear_aiids();
  const std::string& aiids(int index) const;
  std::string* mutable_aiids(int index);
  void set_aiids(int index, const std::string& value);
  void set_aiids(int index, std::string&& value);
  void set_aiids(int index, const char* value);
  void set_aiids(int index, const char* value, size_t size);
  std::string* add_aiids();
  void add_aiids(const std::string& value);
  void add_aiids(std::string&& value);
  void add_aiids(const char* value);
  void add_aiids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aiids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aiids();
  private:
  const std::string& _internal_aiids(int index) const;
  std::string* _internal_add_aiids();
  public:

  // string trainer_name = 2;
  void clear_trainer_name();
  const std::string& trainer_name() const;
  void set_trainer_name(const std::string& value);
  void set_trainer_name(std::string&& value);
  void set_trainer_name(const char* value);
  void set_trainer_name(const char* value, size_t size);
  std::string* mutable_trainer_name();
  std::string* release_trainer_name();
  void set_allocated_trainer_name(std::string* trainer_name);
  private:
  const std::string& _internal_trainer_name() const;
  void _internal_set_trainer_name(const std::string& value);
  std::string* _internal_mutable_trainer_name();
  public:

  // string embeddings_model = 5;
  void clear_embeddings_model();
  const std::string& embeddings_model() const;
  void set_embeddings_model(const std::string& value);
  void set_embeddings_model(std::string&& value);
  void set_embeddings_model(const char* value);
  void set_embeddings_model(const char* value, size_t size);
  std::string* mutable_embeddings_model();
  std::string* release_embeddings_model();
  void set_allocated_embeddings_model(std::string* embeddings_model);
  private:
  const std::string& _internal_embeddings_model() const;
  void _internal_set_embeddings_model(const std::string& value);
  std::string* _internal_mutable_embeddings_model();
  public:

  // string hyper_parameters = 9;
  void clear_hyper_parameters();
  const std::string& hyper_parameters() const;
  void set_hyper_parameters(const std::string& value);
  void set_hyper_parameters(std::string&& value);
  void set_hyper_parameters(const char* value);
  void set_hyper_parameters(const char* value, size_t size);
  std::string* mutable_hyper_parameters();
  std::string* release_hyper_parameters();
  void set_allocated_hyper_parameters(std::string* hyper_parameters);
  private:
  const std::string& _internal_hyper_parameters() const;
  void _internal_set_hyper_parameters(const std::string& value);
  std::string* _internal_mutable_hyper_parameters();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // bool use_prev_trained = 3;
  void clear_use_prev_trained();
  bool use_prev_trained() const;
  void set_use_prev_trained(bool value);
  private:
  bool _internal_use_prev_trained() const;
  void _internal_set_use_prev_trained(bool value);
  public:

  // .TrainingType training_type = 4;
  void clear_training_type();
  ::TrainingType training_type() const;
  void set_training_type(::TrainingType value);
  private:
  ::TrainingType _internal_training_type() const;
  void _internal_set_training_type(::TrainingType value);
  public:

  // int32 train_iters = 7;
  void clear_train_iters();
  ::PROTOBUF_NAMESPACE_ID::int32 train_iters() const;
  void set_train_iters(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_train_iters() const;
  void _internal_set_train_iters(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .TrainingEnvironment training_environment = 8;
  void clear_training_environment();
  ::TrainingEnvironment training_environment() const;
  void set_training_environment(::TrainingEnvironment value);
  private:
  ::TrainingEnvironment _internal_training_environment() const;
  void _internal_set_training_environment(::TrainingEnvironment value);
  public:

  // .MissingPositiveExamplePolicy missing_positive_example_policy = 10;
  void clear_missing_positive_example_policy();
  ::MissingPositiveExamplePolicy missing_positive_example_policy() const;
  void set_missing_positive_example_policy(::MissingPositiveExamplePolicy value);
  private:
  ::MissingPositiveExamplePolicy _internal_missing_positive_example_policy() const;
  void _internal_set_missing_positive_example_policy(::MissingPositiveExamplePolicy value);
  public:

  // .DataBatch data = 100;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DataBatch& data() const;
  ::DataBatch* release_data();
  ::DataBatch* mutable_data();
  void set_allocated_data(::DataBatch* data);
  private:
  const ::DataBatch& _internal_data() const;
  ::DataBatch* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DataBatch* data);
  ::DataBatch* unsafe_arena_release_data();

  // string sql_query = 101;
  private:
  bool _internal_has_sql_query() const;
  public:
  void clear_sql_query();
  const std::string& sql_query() const;
  void set_sql_query(const std::string& value);
  void set_sql_query(std::string&& value);
  void set_sql_query(const char* value);
  void set_sql_query(const char* value, size_t size);
  std::string* mutable_sql_query();
  std::string* release_sql_query();
  void set_allocated_sql_query(std::string* sql_query);
  private:
  const std::string& _internal_sql_query() const;
  void _internal_set_sql_query(const std::string& value);
  std::string* _internal_mutable_sql_query();
  public:

  void clear_training_data();
  TrainingDataCase training_data_case() const;
  // @@protoc_insertion_point(class_scope:PredictorTrainRequest)
 private:
  class _Internal;
  void set_has_data();
  void set_has_sql_query();

  inline bool has_training_data() const;
  inline void clear_has_training_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aiids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trainer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr embeddings_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hyper_parameters_;
  ::RequestMeta* meta_;
  bool use_prev_trained_;
  int training_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 train_iters_;
  int training_environment_;
  int missing_positive_example_policy_;
  union TrainingDataUnion {
    TrainingDataUnion() {}
    ::DataBatch* data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_query_;
  } training_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_2eproto;
};
// -------------------------------------------------------------------

class PredictorTrainResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PredictorTrainResponse) */ {
 public:
  inline PredictorTrainResponse() : PredictorTrainResponse(nullptr) {}
  virtual ~PredictorTrainResponse();

  PredictorTrainResponse(const PredictorTrainResponse& from);
  PredictorTrainResponse(PredictorTrainResponse&& from) noexcept
    : PredictorTrainResponse() {
    *this = ::std::move(from);
  }

  inline PredictorTrainResponse& operator=(const PredictorTrainResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictorTrainResponse& operator=(PredictorTrainResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictorTrainResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictorTrainResponse* internal_default_instance() {
    return reinterpret_cast<const PredictorTrainResponse*>(
               &_PredictorTrainResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PredictorTrainResponse& a, PredictorTrainResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictorTrainResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictorTrainResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictorTrainResponse* New() const final {
    return CreateMaybeMessage<PredictorTrainResponse>(nullptr);
  }

  PredictorTrainResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictorTrainResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictorTrainResponse& from);
  void MergeFrom(const PredictorTrainResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictorTrainResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PredictorTrainResponse";
  }
  protected:
  explicit PredictorTrainResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailedAiidsFieldNumber = 3,
    kStatusFieldNumber = 1,
    kTrainerFieldNumber = 2,
    kProgressStatusFieldNumber = 4,
  };
  // repeated string failed_aiids = 3;
  int failed_aiids_size() const;
  private:
  int _internal_failed_aiids_size() const;
  public:
  void clear_failed_aiids();
  const std::string& failed_aiids(int index) const;
  std::string* mutable_failed_aiids(int index);
  void set_failed_aiids(int index, const std::string& value);
  void set_failed_aiids(int index, std::string&& value);
  void set_failed_aiids(int index, const char* value);
  void set_failed_aiids(int index, const char* value, size_t size);
  std::string* add_failed_aiids();
  void add_failed_aiids(const std::string& value);
  void add_failed_aiids(std::string&& value);
  void add_failed_aiids(const char* value);
  void add_failed_aiids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& failed_aiids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_failed_aiids();
  private:
  const std::string& _internal_failed_aiids(int index) const;
  std::string* _internal_add_failed_aiids();
  public:

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // .ConceptTrainerDump trainer = 2;
  bool has_trainer() const;
  private:
  bool _internal_has_trainer() const;
  public:
  void clear_trainer();
  const ::ConceptTrainerDump& trainer() const;
  ::ConceptTrainerDump* release_trainer();
  ::ConceptTrainerDump* mutable_trainer();
  void set_allocated_trainer(::ConceptTrainerDump* trainer);
  private:
  const ::ConceptTrainerDump& _internal_trainer() const;
  ::ConceptTrainerDump* _internal_mutable_trainer();
  public:
  void unsafe_arena_set_allocated_trainer(
      ::ConceptTrainerDump* trainer);
  ::ConceptTrainerDump* unsafe_arena_release_trainer();

  // .ProgressStatus progress_status = 4;
  bool has_progress_status() const;
  private:
  bool _internal_has_progress_status() const;
  public:
  void clear_progress_status();
  const ::ProgressStatus& progress_status() const;
  ::ProgressStatus* release_progress_status();
  ::ProgressStatus* mutable_progress_status();
  void set_allocated_progress_status(::ProgressStatus* progress_status);
  private:
  const ::ProgressStatus& _internal_progress_status() const;
  ::ProgressStatus* _internal_mutable_progress_status();
  public:
  void unsafe_arena_set_allocated_progress_status(
      ::ProgressStatus* progress_status);
  ::ProgressStatus* unsafe_arena_release_progress_status();

  // @@protoc_insertion_point(class_scope:PredictorTrainResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> failed_aiids_;
  ::ResponseStatus* status_;
  ::ConceptTrainerDump* trainer_;
  ::ProgressStatus* progress_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_2eproto;
};
// -------------------------------------------------------------------

class PredictorGetWeightsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PredictorGetWeightsRequest) */ {
 public:
  inline PredictorGetWeightsRequest() : PredictorGetWeightsRequest(nullptr) {}
  virtual ~PredictorGetWeightsRequest();

  PredictorGetWeightsRequest(const PredictorGetWeightsRequest& from);
  PredictorGetWeightsRequest(PredictorGetWeightsRequest&& from) noexcept
    : PredictorGetWeightsRequest() {
    *this = ::std::move(from);
  }

  inline PredictorGetWeightsRequest& operator=(const PredictorGetWeightsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictorGetWeightsRequest& operator=(PredictorGetWeightsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictorGetWeightsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictorGetWeightsRequest* internal_default_instance() {
    return reinterpret_cast<const PredictorGetWeightsRequest*>(
               &_PredictorGetWeightsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PredictorGetWeightsRequest& a, PredictorGetWeightsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictorGetWeightsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictorGetWeightsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictorGetWeightsRequest* New() const final {
    return CreateMaybeMessage<PredictorGetWeightsRequest>(nullptr);
  }

  PredictorGetWeightsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictorGetWeightsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictorGetWeightsRequest& from);
  void MergeFrom(const PredictorGetWeightsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictorGetWeightsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PredictorGetWeightsRequest";
  }
  protected:
  explicit PredictorGetWeightsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrainerNameFieldNumber = 2,
    kEmbeddingsModelFieldNumber = 5,
    kMetaFieldNumber = 1,
  };
  // string trainer_name = 2;
  void clear_trainer_name();
  const std::string& trainer_name() const;
  void set_trainer_name(const std::string& value);
  void set_trainer_name(std::string&& value);
  void set_trainer_name(const char* value);
  void set_trainer_name(const char* value, size_t size);
  std::string* mutable_trainer_name();
  std::string* release_trainer_name();
  void set_allocated_trainer_name(std::string* trainer_name);
  private:
  const std::string& _internal_trainer_name() const;
  void _internal_set_trainer_name(const std::string& value);
  std::string* _internal_mutable_trainer_name();
  public:

  // string embeddings_model = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_embeddings_model();
  PROTOBUF_DEPRECATED const std::string& embeddings_model() const;
  PROTOBUF_DEPRECATED void set_embeddings_model(const std::string& value);
  PROTOBUF_DEPRECATED void set_embeddings_model(std::string&& value);
  PROTOBUF_DEPRECATED void set_embeddings_model(const char* value);
  PROTOBUF_DEPRECATED void set_embeddings_model(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_embeddings_model();
  PROTOBUF_DEPRECATED std::string* release_embeddings_model();
  PROTOBUF_DEPRECATED void set_allocated_embeddings_model(std::string* embeddings_model);
  private:
  const std::string& _internal_embeddings_model() const;
  void _internal_set_embeddings_model(const std::string& value);
  std::string* _internal_mutable_embeddings_model();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:PredictorGetWeightsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trainer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr embeddings_model_;
  ::RequestMeta* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_2eproto;
};
// -------------------------------------------------------------------

class PredictorGetWeightsResponse_WeightsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PredictorGetWeightsResponse_WeightsEntry_DoNotUse, 
    std::string, ::Embedding,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PredictorGetWeightsResponse_WeightsEntry_DoNotUse, 
    std::string, ::Embedding,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  PredictorGetWeightsResponse_WeightsEntry_DoNotUse();
  explicit PredictorGetWeightsResponse_WeightsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PredictorGetWeightsResponse_WeightsEntry_DoNotUse& other);
  static const PredictorGetWeightsResponse_WeightsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PredictorGetWeightsResponse_WeightsEntry_DoNotUse*>(&_PredictorGetWeightsResponse_WeightsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "PredictorGetWeightsResponse.WeightsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class PredictorGetWeightsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PredictorGetWeightsResponse) */ {
 public:
  inline PredictorGetWeightsResponse() : PredictorGetWeightsResponse(nullptr) {}
  virtual ~PredictorGetWeightsResponse();

  PredictorGetWeightsResponse(const PredictorGetWeightsResponse& from);
  PredictorGetWeightsResponse(PredictorGetWeightsResponse&& from) noexcept
    : PredictorGetWeightsResponse() {
    *this = ::std::move(from);
  }

  inline PredictorGetWeightsResponse& operator=(const PredictorGetWeightsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictorGetWeightsResponse& operator=(PredictorGetWeightsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictorGetWeightsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictorGetWeightsResponse* internal_default_instance() {
    return reinterpret_cast<const PredictorGetWeightsResponse*>(
               &_PredictorGetWeightsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PredictorGetWeightsResponse& a, PredictorGetWeightsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictorGetWeightsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictorGetWeightsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictorGetWeightsResponse* New() const final {
    return CreateMaybeMessage<PredictorGetWeightsResponse>(nullptr);
  }

  PredictorGetWeightsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictorGetWeightsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictorGetWeightsResponse& from);
  void MergeFrom(const PredictorGetWeightsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictorGetWeightsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PredictorGetWeightsResponse";
  }
  protected:
  explicit PredictorGetWeightsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 2,
    kStatusFieldNumber = 1,
    kTrainerFieldNumber = 3,
  };
  // map<string, .Embedding> weights = 2;
  int weights_size() const;
  private:
  int _internal_weights_size() const;
  public:
  void clear_weights();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >&
      _internal_weights() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >*
      _internal_mutable_weights();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >&
      weights() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >*
      mutable_weights();

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // .ConceptTrainerDump trainer = 3;
  bool has_trainer() const;
  private:
  bool _internal_has_trainer() const;
  public:
  void clear_trainer();
  const ::ConceptTrainerDump& trainer() const;
  ::ConceptTrainerDump* release_trainer();
  ::ConceptTrainerDump* mutable_trainer();
  void set_allocated_trainer(::ConceptTrainerDump* trainer);
  private:
  const ::ConceptTrainerDump& _internal_trainer() const;
  ::ConceptTrainerDump* _internal_mutable_trainer();
  public:
  void unsafe_arena_set_allocated_trainer(
      ::ConceptTrainerDump* trainer);
  ::ConceptTrainerDump* unsafe_arena_release_trainer();

  // @@protoc_insertion_point(class_scope:PredictorGetWeightsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PredictorGetWeightsResponse_WeightsEntry_DoNotUse,
      std::string, ::Embedding,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > weights_;
  ::ResponseStatus* status_;
  ::ConceptTrainerDump* trainer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_2eproto;
};
// -------------------------------------------------------------------

class EvalSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EvalSpec) */ {
 public:
  inline EvalSpec() : EvalSpec(nullptr) {}
  virtual ~EvalSpec();

  EvalSpec(const EvalSpec& from);
  EvalSpec(EvalSpec&& from) noexcept
    : EvalSpec() {
    *this = ::std::move(from);
  }

  inline EvalSpec& operator=(const EvalSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvalSpec& operator=(EvalSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EvalSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EvalSpec* internal_default_instance() {
    return reinterpret_cast<const EvalSpec*>(
               &_EvalSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EvalSpec& a, EvalSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(EvalSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvalSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvalSpec* New() const final {
    return CreateMaybeMessage<EvalSpec>(nullptr);
  }

  EvalSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvalSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EvalSpec& from);
  void MergeFrom(const EvalSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvalSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EvalSpec";
  }
  protected:
  explicit EvalSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfusionMatrixTopkFieldNumber = 1,
    kCooccurrenceMatrixTopkFieldNumber = 2,
  };
  // int32 confusion_matrix_topk = 1;
  void clear_confusion_matrix_topk();
  ::PROTOBUF_NAMESPACE_ID::int32 confusion_matrix_topk() const;
  void set_confusion_matrix_topk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confusion_matrix_topk() const;
  void _internal_set_confusion_matrix_topk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cooccurrence_matrix_topk = 2;
  void clear_cooccurrence_matrix_topk();
  ::PROTOBUF_NAMESPACE_ID::int32 cooccurrence_matrix_topk() const;
  void set_cooccurrence_matrix_topk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cooccurrence_matrix_topk() const;
  void _internal_set_cooccurrence_matrix_topk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:EvalSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 confusion_matrix_topk_;
  ::PROTOBUF_NAMESPACE_ID::int32 cooccurrence_matrix_topk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PredictorPredictRequest

// .RequestMeta meta = 1;
inline bool PredictorPredictRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool PredictorPredictRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& PredictorPredictRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& PredictorPredictRequest::meta() const {
  // @@protoc_insertion_point(field_get:PredictorPredictRequest.meta)
  return _internal_meta();
}
inline void PredictorPredictRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorPredictRequest.meta)
}
inline ::RequestMeta* PredictorPredictRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* PredictorPredictRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:PredictorPredictRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* PredictorPredictRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* PredictorPredictRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:PredictorPredictRequest.meta)
  return _internal_mutable_meta();
}
inline void PredictorPredictRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:PredictorPredictRequest.meta)
}

// .DataBatch data = 2;
inline bool PredictorPredictRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool PredictorPredictRequest::has_data() const {
  return _internal_has_data();
}
inline const ::DataBatch& PredictorPredictRequest::_internal_data() const {
  const ::DataBatch* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& PredictorPredictRequest::data() const {
  // @@protoc_insertion_point(field_get:PredictorPredictRequest.data)
  return _internal_data();
}
inline void PredictorPredictRequest::unsafe_arena_set_allocated_data(
    ::DataBatch* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorPredictRequest.data)
}
inline ::DataBatch* PredictorPredictRequest::release_data() {
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* PredictorPredictRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:PredictorPredictRequest.data)
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DataBatch* PredictorPredictRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::DataBatch* PredictorPredictRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:PredictorPredictRequest.data)
  return _internal_mutable_data();
}
inline void PredictorPredictRequest::set_allocated_data(::DataBatch* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:PredictorPredictRequest.data)
}

// string trainer_name = 3;
inline void PredictorPredictRequest::clear_trainer_name() {
  trainer_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PredictorPredictRequest::trainer_name() const {
  // @@protoc_insertion_point(field_get:PredictorPredictRequest.trainer_name)
  return _internal_trainer_name();
}
inline void PredictorPredictRequest::set_trainer_name(const std::string& value) {
  _internal_set_trainer_name(value);
  // @@protoc_insertion_point(field_set:PredictorPredictRequest.trainer_name)
}
inline std::string* PredictorPredictRequest::mutable_trainer_name() {
  // @@protoc_insertion_point(field_mutable:PredictorPredictRequest.trainer_name)
  return _internal_mutable_trainer_name();
}
inline const std::string& PredictorPredictRequest::_internal_trainer_name() const {
  return trainer_name_.Get();
}
inline void PredictorPredictRequest::_internal_set_trainer_name(const std::string& value) {
  
  trainer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PredictorPredictRequest::set_trainer_name(std::string&& value) {
  
  trainer_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PredictorPredictRequest.trainer_name)
}
inline void PredictorPredictRequest::set_trainer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trainer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PredictorPredictRequest.trainer_name)
}
inline void PredictorPredictRequest::set_trainer_name(const char* value,
    size_t size) {
  
  trainer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PredictorPredictRequest.trainer_name)
}
inline std::string* PredictorPredictRequest::_internal_mutable_trainer_name() {
  
  return trainer_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PredictorPredictRequest::release_trainer_name() {
  // @@protoc_insertion_point(field_release:PredictorPredictRequest.trainer_name)
  return trainer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PredictorPredictRequest::set_allocated_trainer_name(std::string* trainer_name) {
  if (trainer_name != nullptr) {
    
  } else {
    
  }
  trainer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trainer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PredictorPredictRequest.trainer_name)
}

// repeated string aiids = 4;
inline int PredictorPredictRequest::_internal_aiids_size() const {
  return aiids_.size();
}
inline int PredictorPredictRequest::aiids_size() const {
  return _internal_aiids_size();
}
inline void PredictorPredictRequest::clear_aiids() {
  aiids_.Clear();
}
inline std::string* PredictorPredictRequest::add_aiids() {
  // @@protoc_insertion_point(field_add_mutable:PredictorPredictRequest.aiids)
  return _internal_add_aiids();
}
inline const std::string& PredictorPredictRequest::_internal_aiids(int index) const {
  return aiids_.Get(index);
}
inline const std::string& PredictorPredictRequest::aiids(int index) const {
  // @@protoc_insertion_point(field_get:PredictorPredictRequest.aiids)
  return _internal_aiids(index);
}
inline std::string* PredictorPredictRequest::mutable_aiids(int index) {
  // @@protoc_insertion_point(field_mutable:PredictorPredictRequest.aiids)
  return aiids_.Mutable(index);
}
inline void PredictorPredictRequest::set_aiids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PredictorPredictRequest.aiids)
  aiids_.Mutable(index)->assign(value);
}
inline void PredictorPredictRequest::set_aiids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PredictorPredictRequest.aiids)
  aiids_.Mutable(index)->assign(std::move(value));
}
inline void PredictorPredictRequest::set_aiids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aiids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PredictorPredictRequest.aiids)
}
inline void PredictorPredictRequest::set_aiids(int index, const char* value, size_t size) {
  aiids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PredictorPredictRequest.aiids)
}
inline std::string* PredictorPredictRequest::_internal_add_aiids() {
  return aiids_.Add();
}
inline void PredictorPredictRequest::add_aiids(const std::string& value) {
  aiids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PredictorPredictRequest.aiids)
}
inline void PredictorPredictRequest::add_aiids(std::string&& value) {
  aiids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PredictorPredictRequest.aiids)
}
inline void PredictorPredictRequest::add_aiids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aiids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PredictorPredictRequest.aiids)
}
inline void PredictorPredictRequest::add_aiids(const char* value, size_t size) {
  aiids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PredictorPredictRequest.aiids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PredictorPredictRequest::aiids() const {
  // @@protoc_insertion_point(field_list:PredictorPredictRequest.aiids)
  return aiids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PredictorPredictRequest::mutable_aiids() {
  // @@protoc_insertion_point(field_mutable_list:PredictorPredictRequest.aiids)
  return &aiids_;
}

// int32 topk = 5;
inline void PredictorPredictRequest::clear_topk() {
  topk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictorPredictRequest::_internal_topk() const {
  return topk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictorPredictRequest::topk() const {
  // @@protoc_insertion_point(field_get:PredictorPredictRequest.topk)
  return _internal_topk();
}
inline void PredictorPredictRequest::_internal_set_topk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  topk_ = value;
}
inline void PredictorPredictRequest::set_topk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_topk(value);
  // @@protoc_insertion_point(field_set:PredictorPredictRequest.topk)
}

// bool echo_aiids = 6;
inline void PredictorPredictRequest::clear_echo_aiids() {
  echo_aiids_ = false;
}
inline bool PredictorPredictRequest::_internal_echo_aiids() const {
  return echo_aiids_;
}
inline bool PredictorPredictRequest::echo_aiids() const {
  // @@protoc_insertion_point(field_get:PredictorPredictRequest.echo_aiids)
  return _internal_echo_aiids();
}
inline void PredictorPredictRequest::_internal_set_echo_aiids(bool value) {
  
  echo_aiids_ = value;
}
inline void PredictorPredictRequest::set_echo_aiids(bool value) {
  _internal_set_echo_aiids(value);
  // @@protoc_insertion_point(field_set:PredictorPredictRequest.echo_aiids)
}

// -------------------------------------------------------------------

// PredictorPredictSQLQueryRequest

// .RequestMeta meta = 1;
inline bool PredictorPredictSQLQueryRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool PredictorPredictSQLQueryRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& PredictorPredictSQLQueryRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& PredictorPredictSQLQueryRequest::meta() const {
  // @@protoc_insertion_point(field_get:PredictorPredictSQLQueryRequest.meta)
  return _internal_meta();
}
inline void PredictorPredictSQLQueryRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorPredictSQLQueryRequest.meta)
}
inline ::RequestMeta* PredictorPredictSQLQueryRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* PredictorPredictSQLQueryRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:PredictorPredictSQLQueryRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* PredictorPredictSQLQueryRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* PredictorPredictSQLQueryRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:PredictorPredictSQLQueryRequest.meta)
  return _internal_mutable_meta();
}
inline void PredictorPredictSQLQueryRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:PredictorPredictSQLQueryRequest.meta)
}

// string sql_query = 2;
inline void PredictorPredictSQLQueryRequest::clear_sql_query() {
  sql_query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PredictorPredictSQLQueryRequest::sql_query() const {
  // @@protoc_insertion_point(field_get:PredictorPredictSQLQueryRequest.sql_query)
  return _internal_sql_query();
}
inline void PredictorPredictSQLQueryRequest::set_sql_query(const std::string& value) {
  _internal_set_sql_query(value);
  // @@protoc_insertion_point(field_set:PredictorPredictSQLQueryRequest.sql_query)
}
inline std::string* PredictorPredictSQLQueryRequest::mutable_sql_query() {
  // @@protoc_insertion_point(field_mutable:PredictorPredictSQLQueryRequest.sql_query)
  return _internal_mutable_sql_query();
}
inline const std::string& PredictorPredictSQLQueryRequest::_internal_sql_query() const {
  return sql_query_.Get();
}
inline void PredictorPredictSQLQueryRequest::_internal_set_sql_query(const std::string& value) {
  
  sql_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PredictorPredictSQLQueryRequest::set_sql_query(std::string&& value) {
  
  sql_query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PredictorPredictSQLQueryRequest.sql_query)
}
inline void PredictorPredictSQLQueryRequest::set_sql_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sql_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PredictorPredictSQLQueryRequest.sql_query)
}
inline void PredictorPredictSQLQueryRequest::set_sql_query(const char* value,
    size_t size) {
  
  sql_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PredictorPredictSQLQueryRequest.sql_query)
}
inline std::string* PredictorPredictSQLQueryRequest::_internal_mutable_sql_query() {
  
  return sql_query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PredictorPredictSQLQueryRequest::release_sql_query() {
  // @@protoc_insertion_point(field_release:PredictorPredictSQLQueryRequest.sql_query)
  return sql_query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PredictorPredictSQLQueryRequest::set_allocated_sql_query(std::string* sql_query) {
  if (sql_query != nullptr) {
    
  } else {
    
  }
  sql_query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sql_query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PredictorPredictSQLQueryRequest.sql_query)
}

// string trainer_name = 3;
inline void PredictorPredictSQLQueryRequest::clear_trainer_name() {
  trainer_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PredictorPredictSQLQueryRequest::trainer_name() const {
  // @@protoc_insertion_point(field_get:PredictorPredictSQLQueryRequest.trainer_name)
  return _internal_trainer_name();
}
inline void PredictorPredictSQLQueryRequest::set_trainer_name(const std::string& value) {
  _internal_set_trainer_name(value);
  // @@protoc_insertion_point(field_set:PredictorPredictSQLQueryRequest.trainer_name)
}
inline std::string* PredictorPredictSQLQueryRequest::mutable_trainer_name() {
  // @@protoc_insertion_point(field_mutable:PredictorPredictSQLQueryRequest.trainer_name)
  return _internal_mutable_trainer_name();
}
inline const std::string& PredictorPredictSQLQueryRequest::_internal_trainer_name() const {
  return trainer_name_.Get();
}
inline void PredictorPredictSQLQueryRequest::_internal_set_trainer_name(const std::string& value) {
  
  trainer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PredictorPredictSQLQueryRequest::set_trainer_name(std::string&& value) {
  
  trainer_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PredictorPredictSQLQueryRequest.trainer_name)
}
inline void PredictorPredictSQLQueryRequest::set_trainer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trainer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PredictorPredictSQLQueryRequest.trainer_name)
}
inline void PredictorPredictSQLQueryRequest::set_trainer_name(const char* value,
    size_t size) {
  
  trainer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PredictorPredictSQLQueryRequest.trainer_name)
}
inline std::string* PredictorPredictSQLQueryRequest::_internal_mutable_trainer_name() {
  
  return trainer_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PredictorPredictSQLQueryRequest::release_trainer_name() {
  // @@protoc_insertion_point(field_release:PredictorPredictSQLQueryRequest.trainer_name)
  return trainer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PredictorPredictSQLQueryRequest::set_allocated_trainer_name(std::string* trainer_name) {
  if (trainer_name != nullptr) {
    
  } else {
    
  }
  trainer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trainer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PredictorPredictSQLQueryRequest.trainer_name)
}

// int32 top_k_data_examples = 4;
inline void PredictorPredictSQLQueryRequest::clear_top_k_data_examples() {
  top_k_data_examples_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictorPredictSQLQueryRequest::_internal_top_k_data_examples() const {
  return top_k_data_examples_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictorPredictSQLQueryRequest::top_k_data_examples() const {
  // @@protoc_insertion_point(field_get:PredictorPredictSQLQueryRequest.top_k_data_examples)
  return _internal_top_k_data_examples();
}
inline void PredictorPredictSQLQueryRequest::_internal_set_top_k_data_examples(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  top_k_data_examples_ = value;
}
inline void PredictorPredictSQLQueryRequest::set_top_k_data_examples(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_top_k_data_examples(value);
  // @@protoc_insertion_point(field_set:PredictorPredictSQLQueryRequest.top_k_data_examples)
}

// repeated string aiids = 5;
inline int PredictorPredictSQLQueryRequest::_internal_aiids_size() const {
  return aiids_.size();
}
inline int PredictorPredictSQLQueryRequest::aiids_size() const {
  return _internal_aiids_size();
}
inline void PredictorPredictSQLQueryRequest::clear_aiids() {
  aiids_.Clear();
}
inline std::string* PredictorPredictSQLQueryRequest::add_aiids() {
  // @@protoc_insertion_point(field_add_mutable:PredictorPredictSQLQueryRequest.aiids)
  return _internal_add_aiids();
}
inline const std::string& PredictorPredictSQLQueryRequest::_internal_aiids(int index) const {
  return aiids_.Get(index);
}
inline const std::string& PredictorPredictSQLQueryRequest::aiids(int index) const {
  // @@protoc_insertion_point(field_get:PredictorPredictSQLQueryRequest.aiids)
  return _internal_aiids(index);
}
inline std::string* PredictorPredictSQLQueryRequest::mutable_aiids(int index) {
  // @@protoc_insertion_point(field_mutable:PredictorPredictSQLQueryRequest.aiids)
  return aiids_.Mutable(index);
}
inline void PredictorPredictSQLQueryRequest::set_aiids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PredictorPredictSQLQueryRequest.aiids)
  aiids_.Mutable(index)->assign(value);
}
inline void PredictorPredictSQLQueryRequest::set_aiids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PredictorPredictSQLQueryRequest.aiids)
  aiids_.Mutable(index)->assign(std::move(value));
}
inline void PredictorPredictSQLQueryRequest::set_aiids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aiids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PredictorPredictSQLQueryRequest.aiids)
}
inline void PredictorPredictSQLQueryRequest::set_aiids(int index, const char* value, size_t size) {
  aiids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PredictorPredictSQLQueryRequest.aiids)
}
inline std::string* PredictorPredictSQLQueryRequest::_internal_add_aiids() {
  return aiids_.Add();
}
inline void PredictorPredictSQLQueryRequest::add_aiids(const std::string& value) {
  aiids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PredictorPredictSQLQueryRequest.aiids)
}
inline void PredictorPredictSQLQueryRequest::add_aiids(std::string&& value) {
  aiids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PredictorPredictSQLQueryRequest.aiids)
}
inline void PredictorPredictSQLQueryRequest::add_aiids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aiids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PredictorPredictSQLQueryRequest.aiids)
}
inline void PredictorPredictSQLQueryRequest::add_aiids(const char* value, size_t size) {
  aiids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PredictorPredictSQLQueryRequest.aiids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PredictorPredictSQLQueryRequest::aiids() const {
  // @@protoc_insertion_point(field_list:PredictorPredictSQLQueryRequest.aiids)
  return aiids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PredictorPredictSQLQueryRequest::mutable_aiids() {
  // @@protoc_insertion_point(field_mutable_list:PredictorPredictSQLQueryRequest.aiids)
  return &aiids_;
}

// int32 top_k_predictions = 6;
inline void PredictorPredictSQLQueryRequest::clear_top_k_predictions() {
  top_k_predictions_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictorPredictSQLQueryRequest::_internal_top_k_predictions() const {
  return top_k_predictions_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictorPredictSQLQueryRequest::top_k_predictions() const {
  // @@protoc_insertion_point(field_get:PredictorPredictSQLQueryRequest.top_k_predictions)
  return _internal_top_k_predictions();
}
inline void PredictorPredictSQLQueryRequest::_internal_set_top_k_predictions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  top_k_predictions_ = value;
}
inline void PredictorPredictSQLQueryRequest::set_top_k_predictions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_top_k_predictions(value);
  // @@protoc_insertion_point(field_set:PredictorPredictSQLQueryRequest.top_k_predictions)
}

// bool echo_aiids = 7;
inline void PredictorPredictSQLQueryRequest::clear_echo_aiids() {
  echo_aiids_ = false;
}
inline bool PredictorPredictSQLQueryRequest::_internal_echo_aiids() const {
  return echo_aiids_;
}
inline bool PredictorPredictSQLQueryRequest::echo_aiids() const {
  // @@protoc_insertion_point(field_get:PredictorPredictSQLQueryRequest.echo_aiids)
  return _internal_echo_aiids();
}
inline void PredictorPredictSQLQueryRequest::_internal_set_echo_aiids(bool value) {
  
  echo_aiids_ = value;
}
inline void PredictorPredictSQLQueryRequest::set_echo_aiids(bool value) {
  _internal_set_echo_aiids(value);
  // @@protoc_insertion_point(field_set:PredictorPredictSQLQueryRequest.echo_aiids)
}

// -------------------------------------------------------------------

// PredictorPredictResponse

// .ResponseStatus status = 1;
inline bool PredictorPredictResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool PredictorPredictResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& PredictorPredictResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& PredictorPredictResponse::status() const {
  // @@protoc_insertion_point(field_get:PredictorPredictResponse.status)
  return _internal_status();
}
inline void PredictorPredictResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorPredictResponse.status)
}
inline ::ResponseStatus* PredictorPredictResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* PredictorPredictResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:PredictorPredictResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* PredictorPredictResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* PredictorPredictResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:PredictorPredictResponse.status)
  return _internal_mutable_status();
}
inline void PredictorPredictResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:PredictorPredictResponse.status)
}

// .DataBatch results = 2;
inline bool PredictorPredictResponse::_internal_has_results() const {
  return this != internal_default_instance() && results_ != nullptr;
}
inline bool PredictorPredictResponse::has_results() const {
  return _internal_has_results();
}
inline const ::DataBatch& PredictorPredictResponse::_internal_results() const {
  const ::DataBatch* p = results_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& PredictorPredictResponse::results() const {
  // @@protoc_insertion_point(field_get:PredictorPredictResponse.results)
  return _internal_results();
}
inline void PredictorPredictResponse::unsafe_arena_set_allocated_results(
    ::DataBatch* results) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_);
  }
  results_ = results;
  if (results) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorPredictResponse.results)
}
inline ::DataBatch* PredictorPredictResponse::release_results() {
  
  ::DataBatch* temp = results_;
  results_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* PredictorPredictResponse::unsafe_arena_release_results() {
  // @@protoc_insertion_point(field_release:PredictorPredictResponse.results)
  
  ::DataBatch* temp = results_;
  results_ = nullptr;
  return temp;
}
inline ::DataBatch* PredictorPredictResponse::_internal_mutable_results() {
  
  if (results_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    results_ = p;
  }
  return results_;
}
inline ::DataBatch* PredictorPredictResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable:PredictorPredictResponse.results)
  return _internal_mutable_results();
}
inline void PredictorPredictResponse::set_allocated_results(::DataBatch* results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_);
  }
  if (results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(results)->GetArena();
    if (message_arena != submessage_arena) {
      results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, results, submessage_arena);
    }
    
  } else {
    
  }
  results_ = results;
  // @@protoc_insertion_point(field_set_allocated:PredictorPredictResponse.results)
}

// repeated string aiids = 3;
inline int PredictorPredictResponse::_internal_aiids_size() const {
  return aiids_.size();
}
inline int PredictorPredictResponse::aiids_size() const {
  return _internal_aiids_size();
}
inline void PredictorPredictResponse::clear_aiids() {
  aiids_.Clear();
}
inline std::string* PredictorPredictResponse::add_aiids() {
  // @@protoc_insertion_point(field_add_mutable:PredictorPredictResponse.aiids)
  return _internal_add_aiids();
}
inline const std::string& PredictorPredictResponse::_internal_aiids(int index) const {
  return aiids_.Get(index);
}
inline const std::string& PredictorPredictResponse::aiids(int index) const {
  // @@protoc_insertion_point(field_get:PredictorPredictResponse.aiids)
  return _internal_aiids(index);
}
inline std::string* PredictorPredictResponse::mutable_aiids(int index) {
  // @@protoc_insertion_point(field_mutable:PredictorPredictResponse.aiids)
  return aiids_.Mutable(index);
}
inline void PredictorPredictResponse::set_aiids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PredictorPredictResponse.aiids)
  aiids_.Mutable(index)->assign(value);
}
inline void PredictorPredictResponse::set_aiids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PredictorPredictResponse.aiids)
  aiids_.Mutable(index)->assign(std::move(value));
}
inline void PredictorPredictResponse::set_aiids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aiids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PredictorPredictResponse.aiids)
}
inline void PredictorPredictResponse::set_aiids(int index, const char* value, size_t size) {
  aiids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PredictorPredictResponse.aiids)
}
inline std::string* PredictorPredictResponse::_internal_add_aiids() {
  return aiids_.Add();
}
inline void PredictorPredictResponse::add_aiids(const std::string& value) {
  aiids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PredictorPredictResponse.aiids)
}
inline void PredictorPredictResponse::add_aiids(std::string&& value) {
  aiids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PredictorPredictResponse.aiids)
}
inline void PredictorPredictResponse::add_aiids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aiids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PredictorPredictResponse.aiids)
}
inline void PredictorPredictResponse::add_aiids(const char* value, size_t size) {
  aiids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PredictorPredictResponse.aiids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PredictorPredictResponse::aiids() const {
  // @@protoc_insertion_point(field_list:PredictorPredictResponse.aiids)
  return aiids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PredictorPredictResponse::mutable_aiids() {
  // @@protoc_insertion_point(field_mutable_list:PredictorPredictResponse.aiids)
  return &aiids_;
}

// -------------------------------------------------------------------

// PredictorTrainAndEvalRequest

// .RequestMeta meta = 1;
inline bool PredictorTrainAndEvalRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool PredictorTrainAndEvalRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& PredictorTrainAndEvalRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& PredictorTrainAndEvalRequest::meta() const {
  // @@protoc_insertion_point(field_get:PredictorTrainAndEvalRequest.meta)
  return _internal_meta();
}
inline void PredictorTrainAndEvalRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorTrainAndEvalRequest.meta)
}
inline ::RequestMeta* PredictorTrainAndEvalRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* PredictorTrainAndEvalRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:PredictorTrainAndEvalRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* PredictorTrainAndEvalRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* PredictorTrainAndEvalRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:PredictorTrainAndEvalRequest.meta)
  return _internal_mutable_meta();
}
inline void PredictorTrainAndEvalRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:PredictorTrainAndEvalRequest.meta)
}

// .PredictorTrainRequest train_request = 2;
inline bool PredictorTrainAndEvalRequest::_internal_has_train_request() const {
  return this != internal_default_instance() && train_request_ != nullptr;
}
inline bool PredictorTrainAndEvalRequest::has_train_request() const {
  return _internal_has_train_request();
}
inline void PredictorTrainAndEvalRequest::clear_train_request() {
  if (GetArena() == nullptr && train_request_ != nullptr) {
    delete train_request_;
  }
  train_request_ = nullptr;
}
inline const ::PredictorTrainRequest& PredictorTrainAndEvalRequest::_internal_train_request() const {
  const ::PredictorTrainRequest* p = train_request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PredictorTrainRequest*>(
      &::_PredictorTrainRequest_default_instance_);
}
inline const ::PredictorTrainRequest& PredictorTrainAndEvalRequest::train_request() const {
  // @@protoc_insertion_point(field_get:PredictorTrainAndEvalRequest.train_request)
  return _internal_train_request();
}
inline void PredictorTrainAndEvalRequest::unsafe_arena_set_allocated_train_request(
    ::PredictorTrainRequest* train_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(train_request_);
  }
  train_request_ = train_request;
  if (train_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorTrainAndEvalRequest.train_request)
}
inline ::PredictorTrainRequest* PredictorTrainAndEvalRequest::release_train_request() {
  
  ::PredictorTrainRequest* temp = train_request_;
  train_request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PredictorTrainRequest* PredictorTrainAndEvalRequest::unsafe_arena_release_train_request() {
  // @@protoc_insertion_point(field_release:PredictorTrainAndEvalRequest.train_request)
  
  ::PredictorTrainRequest* temp = train_request_;
  train_request_ = nullptr;
  return temp;
}
inline ::PredictorTrainRequest* PredictorTrainAndEvalRequest::_internal_mutable_train_request() {
  
  if (train_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::PredictorTrainRequest>(GetArena());
    train_request_ = p;
  }
  return train_request_;
}
inline ::PredictorTrainRequest* PredictorTrainAndEvalRequest::mutable_train_request() {
  // @@protoc_insertion_point(field_mutable:PredictorTrainAndEvalRequest.train_request)
  return _internal_mutable_train_request();
}
inline void PredictorTrainAndEvalRequest::set_allocated_train_request(::PredictorTrainRequest* train_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete train_request_;
  }
  if (train_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(train_request);
    if (message_arena != submessage_arena) {
      train_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, train_request, submessage_arena);
    }
    
  } else {
    
  }
  train_request_ = train_request;
  // @@protoc_insertion_point(field_set_allocated:PredictorTrainAndEvalRequest.train_request)
}

// .EvalSpec eval_spec = 3;
inline bool PredictorTrainAndEvalRequest::_internal_has_eval_spec() const {
  return this != internal_default_instance() && eval_spec_ != nullptr;
}
inline bool PredictorTrainAndEvalRequest::has_eval_spec() const {
  return _internal_has_eval_spec();
}
inline void PredictorTrainAndEvalRequest::clear_eval_spec() {
  if (GetArena() == nullptr && eval_spec_ != nullptr) {
    delete eval_spec_;
  }
  eval_spec_ = nullptr;
}
inline const ::EvalSpec& PredictorTrainAndEvalRequest::_internal_eval_spec() const {
  const ::EvalSpec* p = eval_spec_;
  return p != nullptr ? *p : *reinterpret_cast<const ::EvalSpec*>(
      &::_EvalSpec_default_instance_);
}
inline const ::EvalSpec& PredictorTrainAndEvalRequest::eval_spec() const {
  // @@protoc_insertion_point(field_get:PredictorTrainAndEvalRequest.eval_spec)
  return _internal_eval_spec();
}
inline void PredictorTrainAndEvalRequest::unsafe_arena_set_allocated_eval_spec(
    ::EvalSpec* eval_spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_spec_);
  }
  eval_spec_ = eval_spec;
  if (eval_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorTrainAndEvalRequest.eval_spec)
}
inline ::EvalSpec* PredictorTrainAndEvalRequest::release_eval_spec() {
  
  ::EvalSpec* temp = eval_spec_;
  eval_spec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EvalSpec* PredictorTrainAndEvalRequest::unsafe_arena_release_eval_spec() {
  // @@protoc_insertion_point(field_release:PredictorTrainAndEvalRequest.eval_spec)
  
  ::EvalSpec* temp = eval_spec_;
  eval_spec_ = nullptr;
  return temp;
}
inline ::EvalSpec* PredictorTrainAndEvalRequest::_internal_mutable_eval_spec() {
  
  if (eval_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::EvalSpec>(GetArena());
    eval_spec_ = p;
  }
  return eval_spec_;
}
inline ::EvalSpec* PredictorTrainAndEvalRequest::mutable_eval_spec() {
  // @@protoc_insertion_point(field_mutable:PredictorTrainAndEvalRequest.eval_spec)
  return _internal_mutable_eval_spec();
}
inline void PredictorTrainAndEvalRequest::set_allocated_eval_spec(::EvalSpec* eval_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_spec_;
  }
  if (eval_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval_spec);
    if (message_arena != submessage_arena) {
      eval_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval_spec, submessage_arena);
    }
    
  } else {
    
  }
  eval_spec_ = eval_spec;
  // @@protoc_insertion_point(field_set_allocated:PredictorTrainAndEvalRequest.eval_spec)
}

// -------------------------------------------------------------------

// PredictorTrainRequest

// .RequestMeta meta = 1;
inline bool PredictorTrainRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool PredictorTrainRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& PredictorTrainRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& PredictorTrainRequest::meta() const {
  // @@protoc_insertion_point(field_get:PredictorTrainRequest.meta)
  return _internal_meta();
}
inline void PredictorTrainRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorTrainRequest.meta)
}
inline ::RequestMeta* PredictorTrainRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* PredictorTrainRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:PredictorTrainRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* PredictorTrainRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* PredictorTrainRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:PredictorTrainRequest.meta)
  return _internal_mutable_meta();
}
inline void PredictorTrainRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:PredictorTrainRequest.meta)
}

// string trainer_name = 2;
inline void PredictorTrainRequest::clear_trainer_name() {
  trainer_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PredictorTrainRequest::trainer_name() const {
  // @@protoc_insertion_point(field_get:PredictorTrainRequest.trainer_name)
  return _internal_trainer_name();
}
inline void PredictorTrainRequest::set_trainer_name(const std::string& value) {
  _internal_set_trainer_name(value);
  // @@protoc_insertion_point(field_set:PredictorTrainRequest.trainer_name)
}
inline std::string* PredictorTrainRequest::mutable_trainer_name() {
  // @@protoc_insertion_point(field_mutable:PredictorTrainRequest.trainer_name)
  return _internal_mutable_trainer_name();
}
inline const std::string& PredictorTrainRequest::_internal_trainer_name() const {
  return trainer_name_.Get();
}
inline void PredictorTrainRequest::_internal_set_trainer_name(const std::string& value) {
  
  trainer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PredictorTrainRequest::set_trainer_name(std::string&& value) {
  
  trainer_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PredictorTrainRequest.trainer_name)
}
inline void PredictorTrainRequest::set_trainer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trainer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PredictorTrainRequest.trainer_name)
}
inline void PredictorTrainRequest::set_trainer_name(const char* value,
    size_t size) {
  
  trainer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PredictorTrainRequest.trainer_name)
}
inline std::string* PredictorTrainRequest::_internal_mutable_trainer_name() {
  
  return trainer_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PredictorTrainRequest::release_trainer_name() {
  // @@protoc_insertion_point(field_release:PredictorTrainRequest.trainer_name)
  return trainer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PredictorTrainRequest::set_allocated_trainer_name(std::string* trainer_name) {
  if (trainer_name != nullptr) {
    
  } else {
    
  }
  trainer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trainer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PredictorTrainRequest.trainer_name)
}

// bool use_prev_trained = 3;
inline void PredictorTrainRequest::clear_use_prev_trained() {
  use_prev_trained_ = false;
}
inline bool PredictorTrainRequest::_internal_use_prev_trained() const {
  return use_prev_trained_;
}
inline bool PredictorTrainRequest::use_prev_trained() const {
  // @@protoc_insertion_point(field_get:PredictorTrainRequest.use_prev_trained)
  return _internal_use_prev_trained();
}
inline void PredictorTrainRequest::_internal_set_use_prev_trained(bool value) {
  
  use_prev_trained_ = value;
}
inline void PredictorTrainRequest::set_use_prev_trained(bool value) {
  _internal_set_use_prev_trained(value);
  // @@protoc_insertion_point(field_set:PredictorTrainRequest.use_prev_trained)
}

// .TrainingType training_type = 4;
inline void PredictorTrainRequest::clear_training_type() {
  training_type_ = 0;
}
inline ::TrainingType PredictorTrainRequest::_internal_training_type() const {
  return static_cast< ::TrainingType >(training_type_);
}
inline ::TrainingType PredictorTrainRequest::training_type() const {
  // @@protoc_insertion_point(field_get:PredictorTrainRequest.training_type)
  return _internal_training_type();
}
inline void PredictorTrainRequest::_internal_set_training_type(::TrainingType value) {
  
  training_type_ = value;
}
inline void PredictorTrainRequest::set_training_type(::TrainingType value) {
  _internal_set_training_type(value);
  // @@protoc_insertion_point(field_set:PredictorTrainRequest.training_type)
}

// .DataBatch data = 100;
inline bool PredictorTrainRequest::_internal_has_data() const {
  return training_data_case() == kData;
}
inline bool PredictorTrainRequest::has_data() const {
  return _internal_has_data();
}
inline void PredictorTrainRequest::set_has_data() {
  _oneof_case_[0] = kData;
}
inline ::DataBatch* PredictorTrainRequest::release_data() {
  // @@protoc_insertion_point(field_release:PredictorTrainRequest.data)
  if (_internal_has_data()) {
    clear_has_training_data();
      ::DataBatch* temp = training_data_.data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    training_data_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DataBatch& PredictorTrainRequest::_internal_data() const {
  return _internal_has_data()
      ? *training_data_.data_
      : *reinterpret_cast< ::DataBatch*>(&::_DataBatch_default_instance_);
}
inline const ::DataBatch& PredictorTrainRequest::data() const {
  // @@protoc_insertion_point(field_get:PredictorTrainRequest.data)
  return _internal_data();
}
inline ::DataBatch* PredictorTrainRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PredictorTrainRequest.data)
  if (_internal_has_data()) {
    clear_has_training_data();
    ::DataBatch* temp = training_data_.data_;
    training_data_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PredictorTrainRequest::unsafe_arena_set_allocated_data(::DataBatch* data) {
  clear_training_data();
  if (data) {
    set_has_data();
    training_data_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorTrainRequest.data)
}
inline ::DataBatch* PredictorTrainRequest::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_training_data();
    set_has_data();
    training_data_.data_ = CreateMaybeMessage< ::DataBatch >(GetArena());
  }
  return training_data_.data_;
}
inline ::DataBatch* PredictorTrainRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:PredictorTrainRequest.data)
  return _internal_mutable_data();
}

// string sql_query = 101;
inline bool PredictorTrainRequest::_internal_has_sql_query() const {
  return training_data_case() == kSqlQuery;
}
inline void PredictorTrainRequest::set_has_sql_query() {
  _oneof_case_[0] = kSqlQuery;
}
inline void PredictorTrainRequest::clear_sql_query() {
  if (_internal_has_sql_query()) {
    training_data_.sql_query_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_training_data();
  }
}
inline const std::string& PredictorTrainRequest::sql_query() const {
  // @@protoc_insertion_point(field_get:PredictorTrainRequest.sql_query)
  return _internal_sql_query();
}
inline void PredictorTrainRequest::set_sql_query(const std::string& value) {
  _internal_set_sql_query(value);
  // @@protoc_insertion_point(field_set:PredictorTrainRequest.sql_query)
}
inline std::string* PredictorTrainRequest::mutable_sql_query() {
  // @@protoc_insertion_point(field_mutable:PredictorTrainRequest.sql_query)
  return _internal_mutable_sql_query();
}
inline const std::string& PredictorTrainRequest::_internal_sql_query() const {
  if (_internal_has_sql_query()) {
    return training_data_.sql_query_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PredictorTrainRequest::_internal_set_sql_query(const std::string& value) {
  if (!_internal_has_sql_query()) {
    clear_training_data();
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  training_data_.sql_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PredictorTrainRequest::set_sql_query(std::string&& value) {
  // @@protoc_insertion_point(field_set:PredictorTrainRequest.sql_query)
  if (!_internal_has_sql_query()) {
    clear_training_data();
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  training_data_.sql_query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PredictorTrainRequest.sql_query)
}
inline void PredictorTrainRequest::set_sql_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_sql_query()) {
    clear_training_data();
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  training_data_.sql_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PredictorTrainRequest.sql_query)
}
inline void PredictorTrainRequest::set_sql_query(const char* value,
                             size_t size) {
  if (!_internal_has_sql_query()) {
    clear_training_data();
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  training_data_.sql_query_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:PredictorTrainRequest.sql_query)
}
inline std::string* PredictorTrainRequest::_internal_mutable_sql_query() {
  if (!_internal_has_sql_query()) {
    clear_training_data();
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return training_data_.sql_query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PredictorTrainRequest::release_sql_query() {
  // @@protoc_insertion_point(field_release:PredictorTrainRequest.sql_query)
  if (_internal_has_sql_query()) {
    clear_has_training_data();
    return training_data_.sql_query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PredictorTrainRequest::set_allocated_sql_query(std::string* sql_query) {
  if (has_training_data()) {
    clear_training_data();
  }
  if (sql_query != nullptr) {
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(sql_query);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(sql_query);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:PredictorTrainRequest.sql_query)
}

// string embeddings_model = 5;
inline void PredictorTrainRequest::clear_embeddings_model() {
  embeddings_model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PredictorTrainRequest::embeddings_model() const {
  // @@protoc_insertion_point(field_get:PredictorTrainRequest.embeddings_model)
  return _internal_embeddings_model();
}
inline void PredictorTrainRequest::set_embeddings_model(const std::string& value) {
  _internal_set_embeddings_model(value);
  // @@protoc_insertion_point(field_set:PredictorTrainRequest.embeddings_model)
}
inline std::string* PredictorTrainRequest::mutable_embeddings_model() {
  // @@protoc_insertion_point(field_mutable:PredictorTrainRequest.embeddings_model)
  return _internal_mutable_embeddings_model();
}
inline const std::string& PredictorTrainRequest::_internal_embeddings_model() const {
  return embeddings_model_.Get();
}
inline void PredictorTrainRequest::_internal_set_embeddings_model(const std::string& value) {
  
  embeddings_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PredictorTrainRequest::set_embeddings_model(std::string&& value) {
  
  embeddings_model_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PredictorTrainRequest.embeddings_model)
}
inline void PredictorTrainRequest::set_embeddings_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  embeddings_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PredictorTrainRequest.embeddings_model)
}
inline void PredictorTrainRequest::set_embeddings_model(const char* value,
    size_t size) {
  
  embeddings_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PredictorTrainRequest.embeddings_model)
}
inline std::string* PredictorTrainRequest::_internal_mutable_embeddings_model() {
  
  return embeddings_model_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PredictorTrainRequest::release_embeddings_model() {
  // @@protoc_insertion_point(field_release:PredictorTrainRequest.embeddings_model)
  return embeddings_model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PredictorTrainRequest::set_allocated_embeddings_model(std::string* embeddings_model) {
  if (embeddings_model != nullptr) {
    
  } else {
    
  }
  embeddings_model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), embeddings_model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PredictorTrainRequest.embeddings_model)
}

// repeated string aiids = 6;
inline int PredictorTrainRequest::_internal_aiids_size() const {
  return aiids_.size();
}
inline int PredictorTrainRequest::aiids_size() const {
  return _internal_aiids_size();
}
inline void PredictorTrainRequest::clear_aiids() {
  aiids_.Clear();
}
inline std::string* PredictorTrainRequest::add_aiids() {
  // @@protoc_insertion_point(field_add_mutable:PredictorTrainRequest.aiids)
  return _internal_add_aiids();
}
inline const std::string& PredictorTrainRequest::_internal_aiids(int index) const {
  return aiids_.Get(index);
}
inline const std::string& PredictorTrainRequest::aiids(int index) const {
  // @@protoc_insertion_point(field_get:PredictorTrainRequest.aiids)
  return _internal_aiids(index);
}
inline std::string* PredictorTrainRequest::mutable_aiids(int index) {
  // @@protoc_insertion_point(field_mutable:PredictorTrainRequest.aiids)
  return aiids_.Mutable(index);
}
inline void PredictorTrainRequest::set_aiids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PredictorTrainRequest.aiids)
  aiids_.Mutable(index)->assign(value);
}
inline void PredictorTrainRequest::set_aiids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PredictorTrainRequest.aiids)
  aiids_.Mutable(index)->assign(std::move(value));
}
inline void PredictorTrainRequest::set_aiids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aiids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PredictorTrainRequest.aiids)
}
inline void PredictorTrainRequest::set_aiids(int index, const char* value, size_t size) {
  aiids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PredictorTrainRequest.aiids)
}
inline std::string* PredictorTrainRequest::_internal_add_aiids() {
  return aiids_.Add();
}
inline void PredictorTrainRequest::add_aiids(const std::string& value) {
  aiids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PredictorTrainRequest.aiids)
}
inline void PredictorTrainRequest::add_aiids(std::string&& value) {
  aiids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PredictorTrainRequest.aiids)
}
inline void PredictorTrainRequest::add_aiids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aiids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PredictorTrainRequest.aiids)
}
inline void PredictorTrainRequest::add_aiids(const char* value, size_t size) {
  aiids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PredictorTrainRequest.aiids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PredictorTrainRequest::aiids() const {
  // @@protoc_insertion_point(field_list:PredictorTrainRequest.aiids)
  return aiids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PredictorTrainRequest::mutable_aiids() {
  // @@protoc_insertion_point(field_mutable_list:PredictorTrainRequest.aiids)
  return &aiids_;
}

// int32 train_iters = 7;
inline void PredictorTrainRequest::clear_train_iters() {
  train_iters_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictorTrainRequest::_internal_train_iters() const {
  return train_iters_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictorTrainRequest::train_iters() const {
  // @@protoc_insertion_point(field_get:PredictorTrainRequest.train_iters)
  return _internal_train_iters();
}
inline void PredictorTrainRequest::_internal_set_train_iters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  train_iters_ = value;
}
inline void PredictorTrainRequest::set_train_iters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_train_iters(value);
  // @@protoc_insertion_point(field_set:PredictorTrainRequest.train_iters)
}

// .TrainingEnvironment training_environment = 8;
inline void PredictorTrainRequest::clear_training_environment() {
  training_environment_ = 0;
}
inline ::TrainingEnvironment PredictorTrainRequest::_internal_training_environment() const {
  return static_cast< ::TrainingEnvironment >(training_environment_);
}
inline ::TrainingEnvironment PredictorTrainRequest::training_environment() const {
  // @@protoc_insertion_point(field_get:PredictorTrainRequest.training_environment)
  return _internal_training_environment();
}
inline void PredictorTrainRequest::_internal_set_training_environment(::TrainingEnvironment value) {
  
  training_environment_ = value;
}
inline void PredictorTrainRequest::set_training_environment(::TrainingEnvironment value) {
  _internal_set_training_environment(value);
  // @@protoc_insertion_point(field_set:PredictorTrainRequest.training_environment)
}

// string hyper_parameters = 9;
inline void PredictorTrainRequest::clear_hyper_parameters() {
  hyper_parameters_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PredictorTrainRequest::hyper_parameters() const {
  // @@protoc_insertion_point(field_get:PredictorTrainRequest.hyper_parameters)
  return _internal_hyper_parameters();
}
inline void PredictorTrainRequest::set_hyper_parameters(const std::string& value) {
  _internal_set_hyper_parameters(value);
  // @@protoc_insertion_point(field_set:PredictorTrainRequest.hyper_parameters)
}
inline std::string* PredictorTrainRequest::mutable_hyper_parameters() {
  // @@protoc_insertion_point(field_mutable:PredictorTrainRequest.hyper_parameters)
  return _internal_mutable_hyper_parameters();
}
inline const std::string& PredictorTrainRequest::_internal_hyper_parameters() const {
  return hyper_parameters_.Get();
}
inline void PredictorTrainRequest::_internal_set_hyper_parameters(const std::string& value) {
  
  hyper_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PredictorTrainRequest::set_hyper_parameters(std::string&& value) {
  
  hyper_parameters_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PredictorTrainRequest.hyper_parameters)
}
inline void PredictorTrainRequest::set_hyper_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hyper_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PredictorTrainRequest.hyper_parameters)
}
inline void PredictorTrainRequest::set_hyper_parameters(const char* value,
    size_t size) {
  
  hyper_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PredictorTrainRequest.hyper_parameters)
}
inline std::string* PredictorTrainRequest::_internal_mutable_hyper_parameters() {
  
  return hyper_parameters_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PredictorTrainRequest::release_hyper_parameters() {
  // @@protoc_insertion_point(field_release:PredictorTrainRequest.hyper_parameters)
  return hyper_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PredictorTrainRequest::set_allocated_hyper_parameters(std::string* hyper_parameters) {
  if (hyper_parameters != nullptr) {
    
  } else {
    
  }
  hyper_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hyper_parameters,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PredictorTrainRequest.hyper_parameters)
}

// .MissingPositiveExamplePolicy missing_positive_example_policy = 10;
inline void PredictorTrainRequest::clear_missing_positive_example_policy() {
  missing_positive_example_policy_ = 0;
}
inline ::MissingPositiveExamplePolicy PredictorTrainRequest::_internal_missing_positive_example_policy() const {
  return static_cast< ::MissingPositiveExamplePolicy >(missing_positive_example_policy_);
}
inline ::MissingPositiveExamplePolicy PredictorTrainRequest::missing_positive_example_policy() const {
  // @@protoc_insertion_point(field_get:PredictorTrainRequest.missing_positive_example_policy)
  return _internal_missing_positive_example_policy();
}
inline void PredictorTrainRequest::_internal_set_missing_positive_example_policy(::MissingPositiveExamplePolicy value) {
  
  missing_positive_example_policy_ = value;
}
inline void PredictorTrainRequest::set_missing_positive_example_policy(::MissingPositiveExamplePolicy value) {
  _internal_set_missing_positive_example_policy(value);
  // @@protoc_insertion_point(field_set:PredictorTrainRequest.missing_positive_example_policy)
}

inline bool PredictorTrainRequest::has_training_data() const {
  return training_data_case() != TRAINING_DATA_NOT_SET;
}
inline void PredictorTrainRequest::clear_has_training_data() {
  _oneof_case_[0] = TRAINING_DATA_NOT_SET;
}
inline PredictorTrainRequest::TrainingDataCase PredictorTrainRequest::training_data_case() const {
  return PredictorTrainRequest::TrainingDataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PredictorTrainResponse

// .ResponseStatus status = 1;
inline bool PredictorTrainResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool PredictorTrainResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& PredictorTrainResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& PredictorTrainResponse::status() const {
  // @@protoc_insertion_point(field_get:PredictorTrainResponse.status)
  return _internal_status();
}
inline void PredictorTrainResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorTrainResponse.status)
}
inline ::ResponseStatus* PredictorTrainResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* PredictorTrainResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:PredictorTrainResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* PredictorTrainResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* PredictorTrainResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:PredictorTrainResponse.status)
  return _internal_mutable_status();
}
inline void PredictorTrainResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:PredictorTrainResponse.status)
}

// .ConceptTrainerDump trainer = 2;
inline bool PredictorTrainResponse::_internal_has_trainer() const {
  return this != internal_default_instance() && trainer_ != nullptr;
}
inline bool PredictorTrainResponse::has_trainer() const {
  return _internal_has_trainer();
}
inline const ::ConceptTrainerDump& PredictorTrainResponse::_internal_trainer() const {
  const ::ConceptTrainerDump* p = trainer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ConceptTrainerDump*>(
      &::_ConceptTrainerDump_default_instance_);
}
inline const ::ConceptTrainerDump& PredictorTrainResponse::trainer() const {
  // @@protoc_insertion_point(field_get:PredictorTrainResponse.trainer)
  return _internal_trainer();
}
inline void PredictorTrainResponse::unsafe_arena_set_allocated_trainer(
    ::ConceptTrainerDump* trainer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trainer_);
  }
  trainer_ = trainer;
  if (trainer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorTrainResponse.trainer)
}
inline ::ConceptTrainerDump* PredictorTrainResponse::release_trainer() {
  
  ::ConceptTrainerDump* temp = trainer_;
  trainer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ConceptTrainerDump* PredictorTrainResponse::unsafe_arena_release_trainer() {
  // @@protoc_insertion_point(field_release:PredictorTrainResponse.trainer)
  
  ::ConceptTrainerDump* temp = trainer_;
  trainer_ = nullptr;
  return temp;
}
inline ::ConceptTrainerDump* PredictorTrainResponse::_internal_mutable_trainer() {
  
  if (trainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConceptTrainerDump>(GetArena());
    trainer_ = p;
  }
  return trainer_;
}
inline ::ConceptTrainerDump* PredictorTrainResponse::mutable_trainer() {
  // @@protoc_insertion_point(field_mutable:PredictorTrainResponse.trainer)
  return _internal_mutable_trainer();
}
inline void PredictorTrainResponse::set_allocated_trainer(::ConceptTrainerDump* trainer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trainer_);
  }
  if (trainer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trainer)->GetArena();
    if (message_arena != submessage_arena) {
      trainer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trainer, submessage_arena);
    }
    
  } else {
    
  }
  trainer_ = trainer;
  // @@protoc_insertion_point(field_set_allocated:PredictorTrainResponse.trainer)
}

// repeated string failed_aiids = 3;
inline int PredictorTrainResponse::_internal_failed_aiids_size() const {
  return failed_aiids_.size();
}
inline int PredictorTrainResponse::failed_aiids_size() const {
  return _internal_failed_aiids_size();
}
inline void PredictorTrainResponse::clear_failed_aiids() {
  failed_aiids_.Clear();
}
inline std::string* PredictorTrainResponse::add_failed_aiids() {
  // @@protoc_insertion_point(field_add_mutable:PredictorTrainResponse.failed_aiids)
  return _internal_add_failed_aiids();
}
inline const std::string& PredictorTrainResponse::_internal_failed_aiids(int index) const {
  return failed_aiids_.Get(index);
}
inline const std::string& PredictorTrainResponse::failed_aiids(int index) const {
  // @@protoc_insertion_point(field_get:PredictorTrainResponse.failed_aiids)
  return _internal_failed_aiids(index);
}
inline std::string* PredictorTrainResponse::mutable_failed_aiids(int index) {
  // @@protoc_insertion_point(field_mutable:PredictorTrainResponse.failed_aiids)
  return failed_aiids_.Mutable(index);
}
inline void PredictorTrainResponse::set_failed_aiids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PredictorTrainResponse.failed_aiids)
  failed_aiids_.Mutable(index)->assign(value);
}
inline void PredictorTrainResponse::set_failed_aiids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PredictorTrainResponse.failed_aiids)
  failed_aiids_.Mutable(index)->assign(std::move(value));
}
inline void PredictorTrainResponse::set_failed_aiids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  failed_aiids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PredictorTrainResponse.failed_aiids)
}
inline void PredictorTrainResponse::set_failed_aiids(int index, const char* value, size_t size) {
  failed_aiids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PredictorTrainResponse.failed_aiids)
}
inline std::string* PredictorTrainResponse::_internal_add_failed_aiids() {
  return failed_aiids_.Add();
}
inline void PredictorTrainResponse::add_failed_aiids(const std::string& value) {
  failed_aiids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PredictorTrainResponse.failed_aiids)
}
inline void PredictorTrainResponse::add_failed_aiids(std::string&& value) {
  failed_aiids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PredictorTrainResponse.failed_aiids)
}
inline void PredictorTrainResponse::add_failed_aiids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  failed_aiids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PredictorTrainResponse.failed_aiids)
}
inline void PredictorTrainResponse::add_failed_aiids(const char* value, size_t size) {
  failed_aiids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PredictorTrainResponse.failed_aiids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PredictorTrainResponse::failed_aiids() const {
  // @@protoc_insertion_point(field_list:PredictorTrainResponse.failed_aiids)
  return failed_aiids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PredictorTrainResponse::mutable_failed_aiids() {
  // @@protoc_insertion_point(field_mutable_list:PredictorTrainResponse.failed_aiids)
  return &failed_aiids_;
}

// .ProgressStatus progress_status = 4;
inline bool PredictorTrainResponse::_internal_has_progress_status() const {
  return this != internal_default_instance() && progress_status_ != nullptr;
}
inline bool PredictorTrainResponse::has_progress_status() const {
  return _internal_has_progress_status();
}
inline const ::ProgressStatus& PredictorTrainResponse::_internal_progress_status() const {
  const ::ProgressStatus* p = progress_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ProgressStatus*>(
      &::_ProgressStatus_default_instance_);
}
inline const ::ProgressStatus& PredictorTrainResponse::progress_status() const {
  // @@protoc_insertion_point(field_get:PredictorTrainResponse.progress_status)
  return _internal_progress_status();
}
inline void PredictorTrainResponse::unsafe_arena_set_allocated_progress_status(
    ::ProgressStatus* progress_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_status_);
  }
  progress_status_ = progress_status;
  if (progress_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorTrainResponse.progress_status)
}
inline ::ProgressStatus* PredictorTrainResponse::release_progress_status() {
  
  ::ProgressStatus* temp = progress_status_;
  progress_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProgressStatus* PredictorTrainResponse::unsafe_arena_release_progress_status() {
  // @@protoc_insertion_point(field_release:PredictorTrainResponse.progress_status)
  
  ::ProgressStatus* temp = progress_status_;
  progress_status_ = nullptr;
  return temp;
}
inline ::ProgressStatus* PredictorTrainResponse::_internal_mutable_progress_status() {
  
  if (progress_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProgressStatus>(GetArena());
    progress_status_ = p;
  }
  return progress_status_;
}
inline ::ProgressStatus* PredictorTrainResponse::mutable_progress_status() {
  // @@protoc_insertion_point(field_mutable:PredictorTrainResponse.progress_status)
  return _internal_mutable_progress_status();
}
inline void PredictorTrainResponse::set_allocated_progress_status(::ProgressStatus* progress_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_status_);
  }
  if (progress_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_status)->GetArena();
    if (message_arena != submessage_arena) {
      progress_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress_status, submessage_arena);
    }
    
  } else {
    
  }
  progress_status_ = progress_status;
  // @@protoc_insertion_point(field_set_allocated:PredictorTrainResponse.progress_status)
}

// -------------------------------------------------------------------

// PredictorGetWeightsRequest

// .RequestMeta meta = 1;
inline bool PredictorGetWeightsRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool PredictorGetWeightsRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& PredictorGetWeightsRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& PredictorGetWeightsRequest::meta() const {
  // @@protoc_insertion_point(field_get:PredictorGetWeightsRequest.meta)
  return _internal_meta();
}
inline void PredictorGetWeightsRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorGetWeightsRequest.meta)
}
inline ::RequestMeta* PredictorGetWeightsRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* PredictorGetWeightsRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:PredictorGetWeightsRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* PredictorGetWeightsRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* PredictorGetWeightsRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:PredictorGetWeightsRequest.meta)
  return _internal_mutable_meta();
}
inline void PredictorGetWeightsRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:PredictorGetWeightsRequest.meta)
}

// string trainer_name = 2;
inline void PredictorGetWeightsRequest::clear_trainer_name() {
  trainer_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PredictorGetWeightsRequest::trainer_name() const {
  // @@protoc_insertion_point(field_get:PredictorGetWeightsRequest.trainer_name)
  return _internal_trainer_name();
}
inline void PredictorGetWeightsRequest::set_trainer_name(const std::string& value) {
  _internal_set_trainer_name(value);
  // @@protoc_insertion_point(field_set:PredictorGetWeightsRequest.trainer_name)
}
inline std::string* PredictorGetWeightsRequest::mutable_trainer_name() {
  // @@protoc_insertion_point(field_mutable:PredictorGetWeightsRequest.trainer_name)
  return _internal_mutable_trainer_name();
}
inline const std::string& PredictorGetWeightsRequest::_internal_trainer_name() const {
  return trainer_name_.Get();
}
inline void PredictorGetWeightsRequest::_internal_set_trainer_name(const std::string& value) {
  
  trainer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PredictorGetWeightsRequest::set_trainer_name(std::string&& value) {
  
  trainer_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PredictorGetWeightsRequest.trainer_name)
}
inline void PredictorGetWeightsRequest::set_trainer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trainer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PredictorGetWeightsRequest.trainer_name)
}
inline void PredictorGetWeightsRequest::set_trainer_name(const char* value,
    size_t size) {
  
  trainer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PredictorGetWeightsRequest.trainer_name)
}
inline std::string* PredictorGetWeightsRequest::_internal_mutable_trainer_name() {
  
  return trainer_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PredictorGetWeightsRequest::release_trainer_name() {
  // @@protoc_insertion_point(field_release:PredictorGetWeightsRequest.trainer_name)
  return trainer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PredictorGetWeightsRequest::set_allocated_trainer_name(std::string* trainer_name) {
  if (trainer_name != nullptr) {
    
  } else {
    
  }
  trainer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trainer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PredictorGetWeightsRequest.trainer_name)
}

// string embeddings_model = 5 [deprecated = true];
inline void PredictorGetWeightsRequest::clear_embeddings_model() {
  embeddings_model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PredictorGetWeightsRequest::embeddings_model() const {
  // @@protoc_insertion_point(field_get:PredictorGetWeightsRequest.embeddings_model)
  return _internal_embeddings_model();
}
inline void PredictorGetWeightsRequest::set_embeddings_model(const std::string& value) {
  _internal_set_embeddings_model(value);
  // @@protoc_insertion_point(field_set:PredictorGetWeightsRequest.embeddings_model)
}
inline std::string* PredictorGetWeightsRequest::mutable_embeddings_model() {
  // @@protoc_insertion_point(field_mutable:PredictorGetWeightsRequest.embeddings_model)
  return _internal_mutable_embeddings_model();
}
inline const std::string& PredictorGetWeightsRequest::_internal_embeddings_model() const {
  return embeddings_model_.Get();
}
inline void PredictorGetWeightsRequest::_internal_set_embeddings_model(const std::string& value) {
  
  embeddings_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PredictorGetWeightsRequest::set_embeddings_model(std::string&& value) {
  
  embeddings_model_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PredictorGetWeightsRequest.embeddings_model)
}
inline void PredictorGetWeightsRequest::set_embeddings_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  embeddings_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PredictorGetWeightsRequest.embeddings_model)
}
inline void PredictorGetWeightsRequest::set_embeddings_model(const char* value,
    size_t size) {
  
  embeddings_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PredictorGetWeightsRequest.embeddings_model)
}
inline std::string* PredictorGetWeightsRequest::_internal_mutable_embeddings_model() {
  
  return embeddings_model_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PredictorGetWeightsRequest::release_embeddings_model() {
  // @@protoc_insertion_point(field_release:PredictorGetWeightsRequest.embeddings_model)
  return embeddings_model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PredictorGetWeightsRequest::set_allocated_embeddings_model(std::string* embeddings_model) {
  if (embeddings_model != nullptr) {
    
  } else {
    
  }
  embeddings_model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), embeddings_model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PredictorGetWeightsRequest.embeddings_model)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PredictorGetWeightsResponse

// .ResponseStatus status = 1;
inline bool PredictorGetWeightsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool PredictorGetWeightsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& PredictorGetWeightsResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& PredictorGetWeightsResponse::status() const {
  // @@protoc_insertion_point(field_get:PredictorGetWeightsResponse.status)
  return _internal_status();
}
inline void PredictorGetWeightsResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorGetWeightsResponse.status)
}
inline ::ResponseStatus* PredictorGetWeightsResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* PredictorGetWeightsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:PredictorGetWeightsResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* PredictorGetWeightsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* PredictorGetWeightsResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:PredictorGetWeightsResponse.status)
  return _internal_mutable_status();
}
inline void PredictorGetWeightsResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:PredictorGetWeightsResponse.status)
}

// map<string, .Embedding> weights = 2;
inline int PredictorGetWeightsResponse::_internal_weights_size() const {
  return weights_.size();
}
inline int PredictorGetWeightsResponse::weights_size() const {
  return _internal_weights_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >&
PredictorGetWeightsResponse::_internal_weights() const {
  return weights_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >&
PredictorGetWeightsResponse::weights() const {
  // @@protoc_insertion_point(field_map:PredictorGetWeightsResponse.weights)
  return _internal_weights();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >*
PredictorGetWeightsResponse::_internal_mutable_weights() {
  return weights_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >*
PredictorGetWeightsResponse::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_map:PredictorGetWeightsResponse.weights)
  return _internal_mutable_weights();
}

// .ConceptTrainerDump trainer = 3;
inline bool PredictorGetWeightsResponse::_internal_has_trainer() const {
  return this != internal_default_instance() && trainer_ != nullptr;
}
inline bool PredictorGetWeightsResponse::has_trainer() const {
  return _internal_has_trainer();
}
inline const ::ConceptTrainerDump& PredictorGetWeightsResponse::_internal_trainer() const {
  const ::ConceptTrainerDump* p = trainer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ConceptTrainerDump*>(
      &::_ConceptTrainerDump_default_instance_);
}
inline const ::ConceptTrainerDump& PredictorGetWeightsResponse::trainer() const {
  // @@protoc_insertion_point(field_get:PredictorGetWeightsResponse.trainer)
  return _internal_trainer();
}
inline void PredictorGetWeightsResponse::unsafe_arena_set_allocated_trainer(
    ::ConceptTrainerDump* trainer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trainer_);
  }
  trainer_ = trainer;
  if (trainer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PredictorGetWeightsResponse.trainer)
}
inline ::ConceptTrainerDump* PredictorGetWeightsResponse::release_trainer() {
  
  ::ConceptTrainerDump* temp = trainer_;
  trainer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ConceptTrainerDump* PredictorGetWeightsResponse::unsafe_arena_release_trainer() {
  // @@protoc_insertion_point(field_release:PredictorGetWeightsResponse.trainer)
  
  ::ConceptTrainerDump* temp = trainer_;
  trainer_ = nullptr;
  return temp;
}
inline ::ConceptTrainerDump* PredictorGetWeightsResponse::_internal_mutable_trainer() {
  
  if (trainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConceptTrainerDump>(GetArena());
    trainer_ = p;
  }
  return trainer_;
}
inline ::ConceptTrainerDump* PredictorGetWeightsResponse::mutable_trainer() {
  // @@protoc_insertion_point(field_mutable:PredictorGetWeightsResponse.trainer)
  return _internal_mutable_trainer();
}
inline void PredictorGetWeightsResponse::set_allocated_trainer(::ConceptTrainerDump* trainer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trainer_);
  }
  if (trainer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trainer)->GetArena();
    if (message_arena != submessage_arena) {
      trainer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trainer, submessage_arena);
    }
    
  } else {
    
  }
  trainer_ = trainer;
  // @@protoc_insertion_point(field_set_allocated:PredictorGetWeightsResponse.trainer)
}

// -------------------------------------------------------------------

// EvalSpec

// int32 confusion_matrix_topk = 1;
inline void EvalSpec::clear_confusion_matrix_topk() {
  confusion_matrix_topk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EvalSpec::_internal_confusion_matrix_topk() const {
  return confusion_matrix_topk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EvalSpec::confusion_matrix_topk() const {
  // @@protoc_insertion_point(field_get:EvalSpec.confusion_matrix_topk)
  return _internal_confusion_matrix_topk();
}
inline void EvalSpec::_internal_set_confusion_matrix_topk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confusion_matrix_topk_ = value;
}
inline void EvalSpec::set_confusion_matrix_topk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confusion_matrix_topk(value);
  // @@protoc_insertion_point(field_set:EvalSpec.confusion_matrix_topk)
}

// int32 cooccurrence_matrix_topk = 2;
inline void EvalSpec::clear_cooccurrence_matrix_topk() {
  cooccurrence_matrix_topk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EvalSpec::_internal_cooccurrence_matrix_topk() const {
  return cooccurrence_matrix_topk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EvalSpec::cooccurrence_matrix_topk() const {
  // @@protoc_insertion_point(field_get:EvalSpec.cooccurrence_matrix_topk)
  return _internal_cooccurrence_matrix_topk();
}
inline void EvalSpec::_internal_set_cooccurrence_matrix_topk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cooccurrence_matrix_topk_ = value;
}
inline void EvalSpec::set_cooccurrence_matrix_topk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cooccurrence_matrix_topk(value);
  // @@protoc_insertion_point(field_set:EvalSpec.cooccurrence_matrix_topk)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fpredictor_2fpredictor_2eproto
