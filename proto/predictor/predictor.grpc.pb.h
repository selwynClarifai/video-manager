// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/predictor/predictor.proto
#ifndef GRPC_proto_2fpredictor_2fpredictor_2eproto__INCLUDED
#define GRPC_proto_2fpredictor_2fpredictor_2eproto__INCLUDED

#include "proto/predictor/predictor.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

// Interface exported by the server.
class PredictorService final {
 public:
  static constexpr char const* service_full_name() {
    return "PredictorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Predict given a trained model and embeddings from some examples
    virtual ::grpc::Status PredictorPredict(::grpc::ClientContext* context, const ::PredictorPredictRequest& request, ::PredictorPredictResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorPredictResponse>> AsyncPredictorPredict(::grpc::ClientContext* context, const ::PredictorPredictRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorPredictResponse>>(AsyncPredictorPredictRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorPredictResponse>> PrepareAsyncPredictorPredict(::grpc::ClientContext* context, const ::PredictorPredictRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorPredictResponse>>(PrepareAsyncPredictorPredictRaw(context, request, cq));
    }
    // Predict given a trained model and embeddings from some examples
    // return result with topk examples sorted
    virtual ::grpc::Status PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest& request, ::PredictorPredictResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorPredictResponse>> AsyncPredictorPredictSQLQuery(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorPredictResponse>>(AsyncPredictorPredictSQLQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorPredictResponse>> PrepareAsyncPredictorPredictSQLQuery(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorPredictResponse>>(PrepareAsyncPredictorPredictSQLQueryRaw(context, request, cq));
    }
    // Put new DataExamples into the desired collection.
    virtual ::grpc::Status PredictorTrain(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::PredictorTrainResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorTrainResponse>> AsyncPredictorTrain(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorTrainResponse>>(AsyncPredictorTrainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorTrainResponse>> PrepareAsyncPredictorTrain(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorTrainResponse>>(PrepareAsyncPredictorTrainRaw(context, request, cq));
    }
    // Same as above except server streams back intermediate results
    std::unique_ptr< ::grpc::ClientReaderInterface< ::PredictorTrainResponse>> PredictorTrainStream(::grpc::ClientContext* context, const ::PredictorTrainRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::PredictorTrainResponse>>(PredictorTrainStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::PredictorTrainResponse>> AsyncPredictorTrainStream(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::PredictorTrainResponse>>(AsyncPredictorTrainStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::PredictorTrainResponse>> PrepareAsyncPredictorTrainStream(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::PredictorTrainResponse>>(PrepareAsyncPredictorTrainStreamRaw(context, request, cq));
    }
    // Get the weights as a list of embeddings from the given model.
    virtual ::grpc::Status PredictorGetWeights(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest& request, ::PredictorGetWeightsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorGetWeightsResponse>> AsyncPredictorGetWeights(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorGetWeightsResponse>>(AsyncPredictorGetWeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorGetWeightsResponse>> PrepareAsyncPredictorGetWeights(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PredictorGetWeightsResponse>>(PrepareAsyncPredictorGetWeightsRaw(context, request, cq));
    }
    // evaluate a model
    virtual ::grpc::Status PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest& request, ::MulticlassMetricsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MulticlassMetricsResponse>> AsyncPredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MulticlassMetricsResponse>>(AsyncPredictorGetMulticlassMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MulticlassMetricsResponse>> PrepareAsyncPredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MulticlassMetricsResponse>>(PrepareAsyncPredictorGetMulticlassMetricsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Predict given a trained model and embeddings from some examples
      virtual void PredictorPredict(::grpc::ClientContext* context, const ::PredictorPredictRequest* request, ::PredictorPredictResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PredictorPredict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PredictorPredict(::grpc::ClientContext* context, const ::PredictorPredictRequest* request, ::PredictorPredictResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PredictorPredict(::grpc::ClientContext* context, const ::PredictorPredictRequest* request, ::PredictorPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PredictorPredict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PredictorPredict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Predict given a trained model and embeddings from some examples
      // return result with topk examples sorted
      virtual void PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest* request, ::PredictorPredictResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest* request, ::PredictorPredictResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest* request, ::PredictorPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Put new DataExamples into the desired collection.
      virtual void PredictorTrain(::grpc::ClientContext* context, const ::PredictorTrainRequest* request, ::PredictorTrainResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PredictorTrain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorTrainResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PredictorTrain(::grpc::ClientContext* context, const ::PredictorTrainRequest* request, ::PredictorTrainResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PredictorTrain(::grpc::ClientContext* context, const ::PredictorTrainRequest* request, ::PredictorTrainResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PredictorTrain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorTrainResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PredictorTrain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorTrainResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Same as above except server streams back intermediate results
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PredictorTrainStream(::grpc::ClientContext* context, ::PredictorTrainRequest* request, ::grpc::ClientReadReactor< ::PredictorTrainResponse>* reactor) = 0;
      #else
      virtual void PredictorTrainStream(::grpc::ClientContext* context, ::PredictorTrainRequest* request, ::grpc::experimental::ClientReadReactor< ::PredictorTrainResponse>* reactor) = 0;
      #endif
      // Get the weights as a list of embeddings from the given model.
      virtual void PredictorGetWeights(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest* request, ::PredictorGetWeightsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PredictorGetWeights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorGetWeightsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PredictorGetWeights(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest* request, ::PredictorGetWeightsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PredictorGetWeights(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest* request, ::PredictorGetWeightsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PredictorGetWeights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorGetWeightsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PredictorGetWeights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorGetWeightsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // evaluate a model
      virtual void PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest* request, ::MulticlassMetricsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MulticlassMetricsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest* request, ::MulticlassMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest* request, ::MulticlassMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MulticlassMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MulticlassMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PredictorPredictResponse>* AsyncPredictorPredictRaw(::grpc::ClientContext* context, const ::PredictorPredictRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PredictorPredictResponse>* PrepareAsyncPredictorPredictRaw(::grpc::ClientContext* context, const ::PredictorPredictRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PredictorPredictResponse>* AsyncPredictorPredictSQLQueryRaw(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PredictorPredictResponse>* PrepareAsyncPredictorPredictSQLQueryRaw(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PredictorTrainResponse>* AsyncPredictorTrainRaw(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PredictorTrainResponse>* PrepareAsyncPredictorTrainRaw(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::PredictorTrainResponse>* PredictorTrainStreamRaw(::grpc::ClientContext* context, const ::PredictorTrainRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::PredictorTrainResponse>* AsyncPredictorTrainStreamRaw(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::PredictorTrainResponse>* PrepareAsyncPredictorTrainStreamRaw(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PredictorGetWeightsResponse>* AsyncPredictorGetWeightsRaw(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PredictorGetWeightsResponse>* PrepareAsyncPredictorGetWeightsRaw(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MulticlassMetricsResponse>* AsyncPredictorGetMulticlassMetricsRaw(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MulticlassMetricsResponse>* PrepareAsyncPredictorGetMulticlassMetricsRaw(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status PredictorPredict(::grpc::ClientContext* context, const ::PredictorPredictRequest& request, ::PredictorPredictResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>> AsyncPredictorPredict(::grpc::ClientContext* context, const ::PredictorPredictRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>>(AsyncPredictorPredictRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>> PrepareAsyncPredictorPredict(::grpc::ClientContext* context, const ::PredictorPredictRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>>(PrepareAsyncPredictorPredictRaw(context, request, cq));
    }
    ::grpc::Status PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest& request, ::PredictorPredictResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>> AsyncPredictorPredictSQLQuery(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>>(AsyncPredictorPredictSQLQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>> PrepareAsyncPredictorPredictSQLQuery(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>>(PrepareAsyncPredictorPredictSQLQueryRaw(context, request, cq));
    }
    ::grpc::Status PredictorTrain(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::PredictorTrainResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorTrainResponse>> AsyncPredictorTrain(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorTrainResponse>>(AsyncPredictorTrainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorTrainResponse>> PrepareAsyncPredictorTrain(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorTrainResponse>>(PrepareAsyncPredictorTrainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::PredictorTrainResponse>> PredictorTrainStream(::grpc::ClientContext* context, const ::PredictorTrainRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::PredictorTrainResponse>>(PredictorTrainStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::PredictorTrainResponse>> AsyncPredictorTrainStream(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::PredictorTrainResponse>>(AsyncPredictorTrainStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::PredictorTrainResponse>> PrepareAsyncPredictorTrainStream(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::PredictorTrainResponse>>(PrepareAsyncPredictorTrainStreamRaw(context, request, cq));
    }
    ::grpc::Status PredictorGetWeights(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest& request, ::PredictorGetWeightsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorGetWeightsResponse>> AsyncPredictorGetWeights(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorGetWeightsResponse>>(AsyncPredictorGetWeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorGetWeightsResponse>> PrepareAsyncPredictorGetWeights(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PredictorGetWeightsResponse>>(PrepareAsyncPredictorGetWeightsRaw(context, request, cq));
    }
    ::grpc::Status PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest& request, ::MulticlassMetricsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MulticlassMetricsResponse>> AsyncPredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MulticlassMetricsResponse>>(AsyncPredictorGetMulticlassMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MulticlassMetricsResponse>> PrepareAsyncPredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MulticlassMetricsResponse>>(PrepareAsyncPredictorGetMulticlassMetricsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void PredictorPredict(::grpc::ClientContext* context, const ::PredictorPredictRequest* request, ::PredictorPredictResponse* response, std::function<void(::grpc::Status)>) override;
      void PredictorPredict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PredictorPredict(::grpc::ClientContext* context, const ::PredictorPredictRequest* request, ::PredictorPredictResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PredictorPredict(::grpc::ClientContext* context, const ::PredictorPredictRequest* request, ::PredictorPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PredictorPredict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PredictorPredict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest* request, ::PredictorPredictResponse* response, std::function<void(::grpc::Status)>) override;
      void PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest* request, ::PredictorPredictResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest* request, ::PredictorPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PredictorPredictSQLQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PredictorTrain(::grpc::ClientContext* context, const ::PredictorTrainRequest* request, ::PredictorTrainResponse* response, std::function<void(::grpc::Status)>) override;
      void PredictorTrain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorTrainResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PredictorTrain(::grpc::ClientContext* context, const ::PredictorTrainRequest* request, ::PredictorTrainResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PredictorTrain(::grpc::ClientContext* context, const ::PredictorTrainRequest* request, ::PredictorTrainResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PredictorTrain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorTrainResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PredictorTrain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorTrainResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PredictorTrainStream(::grpc::ClientContext* context, ::PredictorTrainRequest* request, ::grpc::ClientReadReactor< ::PredictorTrainResponse>* reactor) override;
      #else
      void PredictorTrainStream(::grpc::ClientContext* context, ::PredictorTrainRequest* request, ::grpc::experimental::ClientReadReactor< ::PredictorTrainResponse>* reactor) override;
      #endif
      void PredictorGetWeights(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest* request, ::PredictorGetWeightsResponse* response, std::function<void(::grpc::Status)>) override;
      void PredictorGetWeights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorGetWeightsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PredictorGetWeights(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest* request, ::PredictorGetWeightsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PredictorGetWeights(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest* request, ::PredictorGetWeightsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PredictorGetWeights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorGetWeightsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PredictorGetWeights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PredictorGetWeightsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest* request, ::MulticlassMetricsResponse* response, std::function<void(::grpc::Status)>) override;
      void PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MulticlassMetricsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest* request, ::MulticlassMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest* request, ::MulticlassMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MulticlassMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PredictorGetMulticlassMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MulticlassMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>* AsyncPredictorPredictRaw(::grpc::ClientContext* context, const ::PredictorPredictRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>* PrepareAsyncPredictorPredictRaw(::grpc::ClientContext* context, const ::PredictorPredictRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>* AsyncPredictorPredictSQLQueryRaw(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PredictorPredictResponse>* PrepareAsyncPredictorPredictSQLQueryRaw(::grpc::ClientContext* context, const ::PredictorPredictSQLQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PredictorTrainResponse>* AsyncPredictorTrainRaw(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PredictorTrainResponse>* PrepareAsyncPredictorTrainRaw(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::PredictorTrainResponse>* PredictorTrainStreamRaw(::grpc::ClientContext* context, const ::PredictorTrainRequest& request) override;
    ::grpc::ClientAsyncReader< ::PredictorTrainResponse>* AsyncPredictorTrainStreamRaw(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::PredictorTrainResponse>* PrepareAsyncPredictorTrainStreamRaw(::grpc::ClientContext* context, const ::PredictorTrainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PredictorGetWeightsResponse>* AsyncPredictorGetWeightsRaw(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PredictorGetWeightsResponse>* PrepareAsyncPredictorGetWeightsRaw(::grpc::ClientContext* context, const ::PredictorGetWeightsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MulticlassMetricsResponse>* AsyncPredictorGetMulticlassMetricsRaw(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MulticlassMetricsResponse>* PrepareAsyncPredictorGetMulticlassMetricsRaw(::grpc::ClientContext* context, const ::PredictorTrainAndEvalRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PredictorPredict_;
    const ::grpc::internal::RpcMethod rpcmethod_PredictorPredictSQLQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_PredictorTrain_;
    const ::grpc::internal::RpcMethod rpcmethod_PredictorTrainStream_;
    const ::grpc::internal::RpcMethod rpcmethod_PredictorGetWeights_;
    const ::grpc::internal::RpcMethod rpcmethod_PredictorGetMulticlassMetrics_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Predict given a trained model and embeddings from some examples
    virtual ::grpc::Status PredictorPredict(::grpc::ServerContext* context, const ::PredictorPredictRequest* request, ::PredictorPredictResponse* response);
    // Predict given a trained model and embeddings from some examples
    // return result with topk examples sorted
    virtual ::grpc::Status PredictorPredictSQLQuery(::grpc::ServerContext* context, const ::PredictorPredictSQLQueryRequest* request, ::PredictorPredictResponse* response);
    // Put new DataExamples into the desired collection.
    virtual ::grpc::Status PredictorTrain(::grpc::ServerContext* context, const ::PredictorTrainRequest* request, ::PredictorTrainResponse* response);
    // Same as above except server streams back intermediate results
    virtual ::grpc::Status PredictorTrainStream(::grpc::ServerContext* context, const ::PredictorTrainRequest* request, ::grpc::ServerWriter< ::PredictorTrainResponse>* writer);
    // Get the weights as a list of embeddings from the given model.
    virtual ::grpc::Status PredictorGetWeights(::grpc::ServerContext* context, const ::PredictorGetWeightsRequest* request, ::PredictorGetWeightsResponse* response);
    // evaluate a model
    virtual ::grpc::Status PredictorGetMulticlassMetrics(::grpc::ServerContext* context, const ::PredictorTrainAndEvalRequest* request, ::MulticlassMetricsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PredictorPredict : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PredictorPredict() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PredictorPredict() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorPredict(::grpc::ServerContext* /*context*/, const ::PredictorPredictRequest* /*request*/, ::PredictorPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredictorPredict(::grpc::ServerContext* context, ::PredictorPredictRequest* request, ::grpc::ServerAsyncResponseWriter< ::PredictorPredictResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PredictorPredictSQLQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PredictorPredictSQLQuery() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PredictorPredictSQLQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorPredictSQLQuery(::grpc::ServerContext* /*context*/, const ::PredictorPredictSQLQueryRequest* /*request*/, ::PredictorPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredictorPredictSQLQuery(::grpc::ServerContext* context, ::PredictorPredictSQLQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::PredictorPredictResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PredictorTrain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PredictorTrain() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PredictorTrain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorTrain(::grpc::ServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/, ::PredictorTrainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredictorTrain(::grpc::ServerContext* context, ::PredictorTrainRequest* request, ::grpc::ServerAsyncResponseWriter< ::PredictorTrainResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PredictorTrainStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PredictorTrainStream() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PredictorTrainStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorTrainStream(::grpc::ServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/, ::grpc::ServerWriter< ::PredictorTrainResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredictorTrainStream(::grpc::ServerContext* context, ::PredictorTrainRequest* request, ::grpc::ServerAsyncWriter< ::PredictorTrainResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PredictorGetWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PredictorGetWeights() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PredictorGetWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorGetWeights(::grpc::ServerContext* /*context*/, const ::PredictorGetWeightsRequest* /*request*/, ::PredictorGetWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredictorGetWeights(::grpc::ServerContext* context, ::PredictorGetWeightsRequest* request, ::grpc::ServerAsyncResponseWriter< ::PredictorGetWeightsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PredictorGetMulticlassMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PredictorGetMulticlassMetrics() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_PredictorGetMulticlassMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorGetMulticlassMetrics(::grpc::ServerContext* /*context*/, const ::PredictorTrainAndEvalRequest* /*request*/, ::MulticlassMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredictorGetMulticlassMetrics(::grpc::ServerContext* context, ::PredictorTrainAndEvalRequest* request, ::grpc::ServerAsyncResponseWriter< ::MulticlassMetricsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PredictorPredict<WithAsyncMethod_PredictorPredictSQLQuery<WithAsyncMethod_PredictorTrain<WithAsyncMethod_PredictorTrainStream<WithAsyncMethod_PredictorGetWeights<WithAsyncMethod_PredictorGetMulticlassMetrics<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PredictorPredict : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PredictorPredict() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::PredictorPredictRequest, ::PredictorPredictResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::PredictorPredictRequest* request, ::PredictorPredictResponse* response) { return this->PredictorPredict(context, request, response); }));}
    void SetMessageAllocatorFor_PredictorPredict(
        ::grpc::experimental::MessageAllocator< ::PredictorPredictRequest, ::PredictorPredictResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::PredictorPredictRequest, ::PredictorPredictResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PredictorPredict() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorPredict(::grpc::ServerContext* /*context*/, const ::PredictorPredictRequest* /*request*/, ::PredictorPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PredictorPredict(
      ::grpc::CallbackServerContext* /*context*/, const ::PredictorPredictRequest* /*request*/, ::PredictorPredictResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PredictorPredict(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::PredictorPredictRequest* /*request*/, ::PredictorPredictResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PredictorPredictSQLQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PredictorPredictSQLQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::PredictorPredictSQLQueryRequest, ::PredictorPredictResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::PredictorPredictSQLQueryRequest* request, ::PredictorPredictResponse* response) { return this->PredictorPredictSQLQuery(context, request, response); }));}
    void SetMessageAllocatorFor_PredictorPredictSQLQuery(
        ::grpc::experimental::MessageAllocator< ::PredictorPredictSQLQueryRequest, ::PredictorPredictResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::PredictorPredictSQLQueryRequest, ::PredictorPredictResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PredictorPredictSQLQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorPredictSQLQuery(::grpc::ServerContext* /*context*/, const ::PredictorPredictSQLQueryRequest* /*request*/, ::PredictorPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PredictorPredictSQLQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::PredictorPredictSQLQueryRequest* /*request*/, ::PredictorPredictResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PredictorPredictSQLQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::PredictorPredictSQLQueryRequest* /*request*/, ::PredictorPredictResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PredictorTrain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PredictorTrain() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::PredictorTrainRequest, ::PredictorTrainResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::PredictorTrainRequest* request, ::PredictorTrainResponse* response) { return this->PredictorTrain(context, request, response); }));}
    void SetMessageAllocatorFor_PredictorTrain(
        ::grpc::experimental::MessageAllocator< ::PredictorTrainRequest, ::PredictorTrainResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::PredictorTrainRequest, ::PredictorTrainResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PredictorTrain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorTrain(::grpc::ServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/, ::PredictorTrainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PredictorTrain(
      ::grpc::CallbackServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/, ::PredictorTrainResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PredictorTrain(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/, ::PredictorTrainResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PredictorTrainStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PredictorTrainStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::PredictorTrainRequest, ::PredictorTrainResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::PredictorTrainRequest* request) { return this->PredictorTrainStream(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_PredictorTrainStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorTrainStream(::grpc::ServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/, ::grpc::ServerWriter< ::PredictorTrainResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::PredictorTrainResponse>* PredictorTrainStream(
      ::grpc::CallbackServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::PredictorTrainResponse>* PredictorTrainStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PredictorGetWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PredictorGetWeights() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::PredictorGetWeightsRequest, ::PredictorGetWeightsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::PredictorGetWeightsRequest* request, ::PredictorGetWeightsResponse* response) { return this->PredictorGetWeights(context, request, response); }));}
    void SetMessageAllocatorFor_PredictorGetWeights(
        ::grpc::experimental::MessageAllocator< ::PredictorGetWeightsRequest, ::PredictorGetWeightsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::PredictorGetWeightsRequest, ::PredictorGetWeightsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PredictorGetWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorGetWeights(::grpc::ServerContext* /*context*/, const ::PredictorGetWeightsRequest* /*request*/, ::PredictorGetWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PredictorGetWeights(
      ::grpc::CallbackServerContext* /*context*/, const ::PredictorGetWeightsRequest* /*request*/, ::PredictorGetWeightsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PredictorGetWeights(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::PredictorGetWeightsRequest* /*request*/, ::PredictorGetWeightsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PredictorGetMulticlassMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PredictorGetMulticlassMetrics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::PredictorTrainAndEvalRequest, ::MulticlassMetricsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::PredictorTrainAndEvalRequest* request, ::MulticlassMetricsResponse* response) { return this->PredictorGetMulticlassMetrics(context, request, response); }));}
    void SetMessageAllocatorFor_PredictorGetMulticlassMetrics(
        ::grpc::experimental::MessageAllocator< ::PredictorTrainAndEvalRequest, ::MulticlassMetricsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::PredictorTrainAndEvalRequest, ::MulticlassMetricsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PredictorGetMulticlassMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorGetMulticlassMetrics(::grpc::ServerContext* /*context*/, const ::PredictorTrainAndEvalRequest* /*request*/, ::MulticlassMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PredictorGetMulticlassMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::PredictorTrainAndEvalRequest* /*request*/, ::MulticlassMetricsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PredictorGetMulticlassMetrics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::PredictorTrainAndEvalRequest* /*request*/, ::MulticlassMetricsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_PredictorPredict<ExperimentalWithCallbackMethod_PredictorPredictSQLQuery<ExperimentalWithCallbackMethod_PredictorTrain<ExperimentalWithCallbackMethod_PredictorTrainStream<ExperimentalWithCallbackMethod_PredictorGetWeights<ExperimentalWithCallbackMethod_PredictorGetMulticlassMetrics<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_PredictorPredict<ExperimentalWithCallbackMethod_PredictorPredictSQLQuery<ExperimentalWithCallbackMethod_PredictorTrain<ExperimentalWithCallbackMethod_PredictorTrainStream<ExperimentalWithCallbackMethod_PredictorGetWeights<ExperimentalWithCallbackMethod_PredictorGetMulticlassMetrics<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PredictorPredict : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PredictorPredict() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PredictorPredict() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorPredict(::grpc::ServerContext* /*context*/, const ::PredictorPredictRequest* /*request*/, ::PredictorPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PredictorPredictSQLQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PredictorPredictSQLQuery() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PredictorPredictSQLQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorPredictSQLQuery(::grpc::ServerContext* /*context*/, const ::PredictorPredictSQLQueryRequest* /*request*/, ::PredictorPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PredictorTrain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PredictorTrain() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PredictorTrain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorTrain(::grpc::ServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/, ::PredictorTrainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PredictorTrainStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PredictorTrainStream() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PredictorTrainStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorTrainStream(::grpc::ServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/, ::grpc::ServerWriter< ::PredictorTrainResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PredictorGetWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PredictorGetWeights() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PredictorGetWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorGetWeights(::grpc::ServerContext* /*context*/, const ::PredictorGetWeightsRequest* /*request*/, ::PredictorGetWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PredictorGetMulticlassMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PredictorGetMulticlassMetrics() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_PredictorGetMulticlassMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorGetMulticlassMetrics(::grpc::ServerContext* /*context*/, const ::PredictorTrainAndEvalRequest* /*request*/, ::MulticlassMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PredictorPredict : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PredictorPredict() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PredictorPredict() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorPredict(::grpc::ServerContext* /*context*/, const ::PredictorPredictRequest* /*request*/, ::PredictorPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredictorPredict(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PredictorPredictSQLQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PredictorPredictSQLQuery() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PredictorPredictSQLQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorPredictSQLQuery(::grpc::ServerContext* /*context*/, const ::PredictorPredictSQLQueryRequest* /*request*/, ::PredictorPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredictorPredictSQLQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PredictorTrain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PredictorTrain() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PredictorTrain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorTrain(::grpc::ServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/, ::PredictorTrainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredictorTrain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PredictorTrainStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PredictorTrainStream() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PredictorTrainStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorTrainStream(::grpc::ServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/, ::grpc::ServerWriter< ::PredictorTrainResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredictorTrainStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PredictorGetWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PredictorGetWeights() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_PredictorGetWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorGetWeights(::grpc::ServerContext* /*context*/, const ::PredictorGetWeightsRequest* /*request*/, ::PredictorGetWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredictorGetWeights(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PredictorGetMulticlassMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PredictorGetMulticlassMetrics() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_PredictorGetMulticlassMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorGetMulticlassMetrics(::grpc::ServerContext* /*context*/, const ::PredictorTrainAndEvalRequest* /*request*/, ::MulticlassMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredictorGetMulticlassMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PredictorPredict : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PredictorPredict() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PredictorPredict(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PredictorPredict() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorPredict(::grpc::ServerContext* /*context*/, const ::PredictorPredictRequest* /*request*/, ::PredictorPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PredictorPredict(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PredictorPredict(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PredictorPredictSQLQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PredictorPredictSQLQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PredictorPredictSQLQuery(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PredictorPredictSQLQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorPredictSQLQuery(::grpc::ServerContext* /*context*/, const ::PredictorPredictSQLQueryRequest* /*request*/, ::PredictorPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PredictorPredictSQLQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PredictorPredictSQLQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PredictorTrain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PredictorTrain() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PredictorTrain(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PredictorTrain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorTrain(::grpc::ServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/, ::PredictorTrainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PredictorTrain(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PredictorTrain(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PredictorTrainStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PredictorTrainStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->PredictorTrainStream(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_PredictorTrainStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorTrainStream(::grpc::ServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/, ::grpc::ServerWriter< ::PredictorTrainResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* PredictorTrainStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* PredictorTrainStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PredictorGetWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PredictorGetWeights() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PredictorGetWeights(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PredictorGetWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorGetWeights(::grpc::ServerContext* /*context*/, const ::PredictorGetWeightsRequest* /*request*/, ::PredictorGetWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PredictorGetWeights(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PredictorGetWeights(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PredictorGetMulticlassMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PredictorGetMulticlassMetrics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PredictorGetMulticlassMetrics(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PredictorGetMulticlassMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictorGetMulticlassMetrics(::grpc::ServerContext* /*context*/, const ::PredictorTrainAndEvalRequest* /*request*/, ::MulticlassMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PredictorGetMulticlassMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PredictorGetMulticlassMetrics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PredictorPredict : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PredictorPredict() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::PredictorPredictRequest, ::PredictorPredictResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::PredictorPredictRequest, ::PredictorPredictResponse>* streamer) {
                       return this->StreamedPredictorPredict(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PredictorPredict() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PredictorPredict(::grpc::ServerContext* /*context*/, const ::PredictorPredictRequest* /*request*/, ::PredictorPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPredictorPredict(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::PredictorPredictRequest,::PredictorPredictResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PredictorPredictSQLQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PredictorPredictSQLQuery() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::PredictorPredictSQLQueryRequest, ::PredictorPredictResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::PredictorPredictSQLQueryRequest, ::PredictorPredictResponse>* streamer) {
                       return this->StreamedPredictorPredictSQLQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PredictorPredictSQLQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PredictorPredictSQLQuery(::grpc::ServerContext* /*context*/, const ::PredictorPredictSQLQueryRequest* /*request*/, ::PredictorPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPredictorPredictSQLQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::PredictorPredictSQLQueryRequest,::PredictorPredictResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PredictorTrain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PredictorTrain() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::PredictorTrainRequest, ::PredictorTrainResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::PredictorTrainRequest, ::PredictorTrainResponse>* streamer) {
                       return this->StreamedPredictorTrain(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PredictorTrain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PredictorTrain(::grpc::ServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/, ::PredictorTrainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPredictorTrain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::PredictorTrainRequest,::PredictorTrainResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PredictorGetWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PredictorGetWeights() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::PredictorGetWeightsRequest, ::PredictorGetWeightsResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::PredictorGetWeightsRequest, ::PredictorGetWeightsResponse>* streamer) {
                       return this->StreamedPredictorGetWeights(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PredictorGetWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PredictorGetWeights(::grpc::ServerContext* /*context*/, const ::PredictorGetWeightsRequest* /*request*/, ::PredictorGetWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPredictorGetWeights(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::PredictorGetWeightsRequest,::PredictorGetWeightsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PredictorGetMulticlassMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PredictorGetMulticlassMetrics() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::PredictorTrainAndEvalRequest, ::MulticlassMetricsResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::PredictorTrainAndEvalRequest, ::MulticlassMetricsResponse>* streamer) {
                       return this->StreamedPredictorGetMulticlassMetrics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PredictorGetMulticlassMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PredictorGetMulticlassMetrics(::grpc::ServerContext* /*context*/, const ::PredictorTrainAndEvalRequest* /*request*/, ::MulticlassMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPredictorGetMulticlassMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::PredictorTrainAndEvalRequest,::MulticlassMetricsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PredictorPredict<WithStreamedUnaryMethod_PredictorPredictSQLQuery<WithStreamedUnaryMethod_PredictorTrain<WithStreamedUnaryMethod_PredictorGetWeights<WithStreamedUnaryMethod_PredictorGetMulticlassMetrics<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_PredictorTrainStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_PredictorTrainStream() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::PredictorTrainRequest, ::PredictorTrainResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::PredictorTrainRequest, ::PredictorTrainResponse>* streamer) {
                       return this->StreamedPredictorTrainStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_PredictorTrainStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PredictorTrainStream(::grpc::ServerContext* /*context*/, const ::PredictorTrainRequest* /*request*/, ::grpc::ServerWriter< ::PredictorTrainResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedPredictorTrainStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::PredictorTrainRequest,::PredictorTrainResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_PredictorTrainStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_PredictorPredict<WithStreamedUnaryMethod_PredictorPredictSQLQuery<WithStreamedUnaryMethod_PredictorTrain<WithSplitStreamingMethod_PredictorTrainStream<WithStreamedUnaryMethod_PredictorGetWeights<WithStreamedUnaryMethod_PredictorGetMulticlassMetrics<Service > > > > > > StreamedService;
};


#endif  // GRPC_proto_2fpredictor_2fpredictor_2eproto__INCLUDED
