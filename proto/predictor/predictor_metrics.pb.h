// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/predictor/predictor_metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fpredictor_2fpredictor_5fmetrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fpredictor_2fpredictor_5fmetrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/databatch.pb.h"
#include "proto/utils/request_meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_5fmetrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
class BinaryMetrics;
class BinaryMetricsDefaultTypeInternal;
extern BinaryMetricsDefaultTypeInternal _BinaryMetrics_default_instance_;
class ConfusionMatrix;
class ConfusionMatrixDefaultTypeInternal;
extern ConfusionMatrixDefaultTypeInternal _ConfusionMatrix_default_instance_;
class ConfusionMatrixEntry;
class ConfusionMatrixEntryDefaultTypeInternal;
extern ConfusionMatrixEntryDefaultTypeInternal _ConfusionMatrixEntry_default_instance_;
class CooccurrenceMatrix;
class CooccurrenceMatrixDefaultTypeInternal;
extern CooccurrenceMatrixDefaultTypeInternal _CooccurrenceMatrix_default_instance_;
class CooccurrenceMatrixEntry;
class CooccurrenceMatrixEntryDefaultTypeInternal;
extern CooccurrenceMatrixEntryDefaultTypeInternal _CooccurrenceMatrixEntry_default_instance_;
class LabelFreq;
class LabelFreqDefaultTypeInternal;
extern LabelFreqDefaultTypeInternal _LabelFreq_default_instance_;
class MulticlassMetrics;
class MulticlassMetricsDefaultTypeInternal;
extern MulticlassMetricsDefaultTypeInternal _MulticlassMetrics_default_instance_;
class MulticlassMetricsResponse;
class MulticlassMetricsResponseDefaultTypeInternal;
extern MulticlassMetricsResponseDefaultTypeInternal _MulticlassMetricsResponse_default_instance_;
class PositiveLabelDistribution;
class PositiveLabelDistributionDefaultTypeInternal;
extern PositiveLabelDistributionDefaultTypeInternal _PositiveLabelDistribution_default_instance_;
class PrecisionRecallCurve;
class PrecisionRecallCurveDefaultTypeInternal;
extern PrecisionRecallCurveDefaultTypeInternal _PrecisionRecallCurve_default_instance_;
class ProgressStatus;
class ProgressStatusDefaultTypeInternal;
extern ProgressStatusDefaultTypeInternal _ProgressStatus_default_instance_;
class ProgressStatus_ConceptCountsEntry_DoNotUse;
class ProgressStatus_ConceptCountsEntry_DoNotUseDefaultTypeInternal;
extern ProgressStatus_ConceptCountsEntry_DoNotUseDefaultTypeInternal _ProgressStatus_ConceptCountsEntry_DoNotUse_default_instance_;
class ROC;
class ROCDefaultTypeInternal;
extern ROCDefaultTypeInternal _ROC_default_instance_;
class TrainStats;
class TrainStatsDefaultTypeInternal;
extern TrainStatsDefaultTypeInternal _TrainStats_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BinaryMetrics* Arena::CreateMaybeMessage<::BinaryMetrics>(Arena*);
template<> ::ConfusionMatrix* Arena::CreateMaybeMessage<::ConfusionMatrix>(Arena*);
template<> ::ConfusionMatrixEntry* Arena::CreateMaybeMessage<::ConfusionMatrixEntry>(Arena*);
template<> ::CooccurrenceMatrix* Arena::CreateMaybeMessage<::CooccurrenceMatrix>(Arena*);
template<> ::CooccurrenceMatrixEntry* Arena::CreateMaybeMessage<::CooccurrenceMatrixEntry>(Arena*);
template<> ::LabelFreq* Arena::CreateMaybeMessage<::LabelFreq>(Arena*);
template<> ::MulticlassMetrics* Arena::CreateMaybeMessage<::MulticlassMetrics>(Arena*);
template<> ::MulticlassMetricsResponse* Arena::CreateMaybeMessage<::MulticlassMetricsResponse>(Arena*);
template<> ::PositiveLabelDistribution* Arena::CreateMaybeMessage<::PositiveLabelDistribution>(Arena*);
template<> ::PrecisionRecallCurve* Arena::CreateMaybeMessage<::PrecisionRecallCurve>(Arena*);
template<> ::ProgressStatus* Arena::CreateMaybeMessage<::ProgressStatus>(Arena*);
template<> ::ProgressStatus_ConceptCountsEntry_DoNotUse* Arena::CreateMaybeMessage<::ProgressStatus_ConceptCountsEntry_DoNotUse>(Arena*);
template<> ::ROC* Arena::CreateMaybeMessage<::ROC>(Arena*);
template<> ::TrainStats* Arena::CreateMaybeMessage<::TrainStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class LabelFreq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabelFreq) */ {
 public:
  inline LabelFreq() : LabelFreq(nullptr) {}
  virtual ~LabelFreq();

  LabelFreq(const LabelFreq& from);
  LabelFreq(LabelFreq&& from) noexcept
    : LabelFreq() {
    *this = ::std::move(from);
  }

  inline LabelFreq& operator=(const LabelFreq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelFreq& operator=(LabelFreq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelFreq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelFreq* internal_default_instance() {
    return reinterpret_cast<const LabelFreq*>(
               &_LabelFreq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LabelFreq& a, LabelFreq& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelFreq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelFreq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelFreq* New() const final {
    return CreateMaybeMessage<LabelFreq>(nullptr);
  }

  LabelFreq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelFreq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelFreq& from);
  void MergeFrom(const LabelFreq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelFreq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabelFreq";
  }
  protected:
  explicit LabelFreq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAiidFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // string aiid = 1;
  void clear_aiid();
  const std::string& aiid() const;
  void set_aiid(const std::string& value);
  void set_aiid(std::string&& value);
  void set_aiid(const char* value);
  void set_aiid(const char* value, size_t size);
  std::string* mutable_aiid();
  std::string* release_aiid();
  void set_allocated_aiid(std::string* aiid);
  private:
  const std::string& _internal_aiid() const;
  void _internal_set_aiid(const std::string& value);
  std::string* _internal_mutable_aiid();
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LabelFreq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aiid_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class PositiveLabelDistribution PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PositiveLabelDistribution) */ {
 public:
  inline PositiveLabelDistribution() : PositiveLabelDistribution(nullptr) {}
  virtual ~PositiveLabelDistribution();

  PositiveLabelDistribution(const PositiveLabelDistribution& from);
  PositiveLabelDistribution(PositiveLabelDistribution&& from) noexcept
    : PositiveLabelDistribution() {
    *this = ::std::move(from);
  }

  inline PositiveLabelDistribution& operator=(const PositiveLabelDistribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositiveLabelDistribution& operator=(PositiveLabelDistribution&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositiveLabelDistribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositiveLabelDistribution* internal_default_instance() {
    return reinterpret_cast<const PositiveLabelDistribution*>(
               &_PositiveLabelDistribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PositiveLabelDistribution& a, PositiveLabelDistribution& b) {
    a.Swap(&b);
  }
  inline void Swap(PositiveLabelDistribution* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositiveLabelDistribution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositiveLabelDistribution* New() const final {
    return CreateMaybeMessage<PositiveLabelDistribution>(nullptr);
  }

  PositiveLabelDistribution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositiveLabelDistribution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositiveLabelDistribution& from);
  void MergeFrom(const PositiveLabelDistribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositiveLabelDistribution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PositiveLabelDistribution";
  }
  protected:
  explicit PositiveLabelDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFreqsFieldNumber = 1,
  };
  // repeated .LabelFreq label_freqs = 1;
  int label_freqs_size() const;
  private:
  int _internal_label_freqs_size() const;
  public:
  void clear_label_freqs();
  ::LabelFreq* mutable_label_freqs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelFreq >*
      mutable_label_freqs();
  private:
  const ::LabelFreq& _internal_label_freqs(int index) const;
  ::LabelFreq* _internal_add_label_freqs();
  public:
  const ::LabelFreq& label_freqs(int index) const;
  ::LabelFreq* add_label_freqs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelFreq >&
      label_freqs() const;

  // @@protoc_insertion_point(class_scope:PositiveLabelDistribution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelFreq > label_freqs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class CooccurrenceMatrixEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CooccurrenceMatrixEntry) */ {
 public:
  inline CooccurrenceMatrixEntry() : CooccurrenceMatrixEntry(nullptr) {}
  virtual ~CooccurrenceMatrixEntry();

  CooccurrenceMatrixEntry(const CooccurrenceMatrixEntry& from);
  CooccurrenceMatrixEntry(CooccurrenceMatrixEntry&& from) noexcept
    : CooccurrenceMatrixEntry() {
    *this = ::std::move(from);
  }

  inline CooccurrenceMatrixEntry& operator=(const CooccurrenceMatrixEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CooccurrenceMatrixEntry& operator=(CooccurrenceMatrixEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CooccurrenceMatrixEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CooccurrenceMatrixEntry* internal_default_instance() {
    return reinterpret_cast<const CooccurrenceMatrixEntry*>(
               &_CooccurrenceMatrixEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CooccurrenceMatrixEntry& a, CooccurrenceMatrixEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CooccurrenceMatrixEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CooccurrenceMatrixEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CooccurrenceMatrixEntry* New() const final {
    return CreateMaybeMessage<CooccurrenceMatrixEntry>(nullptr);
  }

  CooccurrenceMatrixEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CooccurrenceMatrixEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CooccurrenceMatrixEntry& from);
  void MergeFrom(const CooccurrenceMatrixEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CooccurrenceMatrixEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CooccurrenceMatrixEntry";
  }
  protected:
  explicit CooccurrenceMatrixEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // string row = 1;
  void clear_row();
  const std::string& row() const;
  void set_row(const std::string& value);
  void set_row(std::string&& value);
  void set_row(const char* value);
  void set_row(const char* value, size_t size);
  std::string* mutable_row();
  std::string* release_row();
  void set_allocated_row(std::string* row);
  private:
  const std::string& _internal_row() const;
  void _internal_set_row(const std::string& value);
  std::string* _internal_mutable_row();
  public:

  // string col = 2;
  void clear_col();
  const std::string& col() const;
  void set_col(const std::string& value);
  void set_col(std::string&& value);
  void set_col(const char* value);
  void set_col(const char* value, size_t size);
  std::string* mutable_col();
  std::string* release_col();
  void set_allocated_col(std::string* col);
  private:
  const std::string& _internal_col() const;
  void _internal_set_col(const std::string& value);
  std::string* _internal_mutable_col();
  public:

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CooccurrenceMatrixEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr col_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class CooccurrenceMatrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CooccurrenceMatrix) */ {
 public:
  inline CooccurrenceMatrix() : CooccurrenceMatrix(nullptr) {}
  virtual ~CooccurrenceMatrix();

  CooccurrenceMatrix(const CooccurrenceMatrix& from);
  CooccurrenceMatrix(CooccurrenceMatrix&& from) noexcept
    : CooccurrenceMatrix() {
    *this = ::std::move(from);
  }

  inline CooccurrenceMatrix& operator=(const CooccurrenceMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline CooccurrenceMatrix& operator=(CooccurrenceMatrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CooccurrenceMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CooccurrenceMatrix* internal_default_instance() {
    return reinterpret_cast<const CooccurrenceMatrix*>(
               &_CooccurrenceMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CooccurrenceMatrix& a, CooccurrenceMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(CooccurrenceMatrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CooccurrenceMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CooccurrenceMatrix* New() const final {
    return CreateMaybeMessage<CooccurrenceMatrix>(nullptr);
  }

  CooccurrenceMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CooccurrenceMatrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CooccurrenceMatrix& from);
  void MergeFrom(const CooccurrenceMatrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CooccurrenceMatrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CooccurrenceMatrix";
  }
  protected:
  explicit CooccurrenceMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatrixFieldNumber = 1,
    kAiidOrderFieldNumber = 2,
  };
  // repeated .CooccurrenceMatrixEntry matrix = 1;
  int matrix_size() const;
  private:
  int _internal_matrix_size() const;
  public:
  void clear_matrix();
  ::CooccurrenceMatrixEntry* mutable_matrix(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CooccurrenceMatrixEntry >*
      mutable_matrix();
  private:
  const ::CooccurrenceMatrixEntry& _internal_matrix(int index) const;
  ::CooccurrenceMatrixEntry* _internal_add_matrix();
  public:
  const ::CooccurrenceMatrixEntry& matrix(int index) const;
  ::CooccurrenceMatrixEntry* add_matrix();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CooccurrenceMatrixEntry >&
      matrix() const;

  // repeated string aiid_order = 2;
  int aiid_order_size() const;
  private:
  int _internal_aiid_order_size() const;
  public:
  void clear_aiid_order();
  const std::string& aiid_order(int index) const;
  std::string* mutable_aiid_order(int index);
  void set_aiid_order(int index, const std::string& value);
  void set_aiid_order(int index, std::string&& value);
  void set_aiid_order(int index, const char* value);
  void set_aiid_order(int index, const char* value, size_t size);
  std::string* add_aiid_order();
  void add_aiid_order(const std::string& value);
  void add_aiid_order(std::string&& value);
  void add_aiid_order(const char* value);
  void add_aiid_order(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aiid_order() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aiid_order();
  private:
  const std::string& _internal_aiid_order(int index) const;
  std::string* _internal_add_aiid_order();
  public:

  // @@protoc_insertion_point(class_scope:CooccurrenceMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CooccurrenceMatrixEntry > matrix_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aiid_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ConfusionMatrixEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfusionMatrixEntry) */ {
 public:
  inline ConfusionMatrixEntry() : ConfusionMatrixEntry(nullptr) {}
  virtual ~ConfusionMatrixEntry();

  ConfusionMatrixEntry(const ConfusionMatrixEntry& from);
  ConfusionMatrixEntry(ConfusionMatrixEntry&& from) noexcept
    : ConfusionMatrixEntry() {
    *this = ::std::move(from);
  }

  inline ConfusionMatrixEntry& operator=(const ConfusionMatrixEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfusionMatrixEntry& operator=(ConfusionMatrixEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfusionMatrixEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfusionMatrixEntry* internal_default_instance() {
    return reinterpret_cast<const ConfusionMatrixEntry*>(
               &_ConfusionMatrixEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConfusionMatrixEntry& a, ConfusionMatrixEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfusionMatrixEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfusionMatrixEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfusionMatrixEntry* New() const final {
    return CreateMaybeMessage<ConfusionMatrixEntry>(nullptr);
  }

  ConfusionMatrixEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfusionMatrixEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfusionMatrixEntry& from);
  void MergeFrom(const ConfusionMatrixEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfusionMatrixEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfusionMatrixEntry";
  }
  protected:
  explicit ConfusionMatrixEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredAiidFieldNumber = 1,
    kTrueAiidFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string pred_aiid = 1;
  void clear_pred_aiid();
  const std::string& pred_aiid() const;
  void set_pred_aiid(const std::string& value);
  void set_pred_aiid(std::string&& value);
  void set_pred_aiid(const char* value);
  void set_pred_aiid(const char* value, size_t size);
  std::string* mutable_pred_aiid();
  std::string* release_pred_aiid();
  void set_allocated_pred_aiid(std::string* pred_aiid);
  private:
  const std::string& _internal_pred_aiid() const;
  void _internal_set_pred_aiid(const std::string& value);
  std::string* _internal_mutable_pred_aiid();
  public:

  // string true_aiid = 2;
  void clear_true_aiid();
  const std::string& true_aiid() const;
  void set_true_aiid(const std::string& value);
  void set_true_aiid(std::string&& value);
  void set_true_aiid(const char* value);
  void set_true_aiid(const char* value, size_t size);
  std::string* mutable_true_aiid();
  std::string* release_true_aiid();
  void set_allocated_true_aiid(std::string* true_aiid);
  private:
  const std::string& _internal_true_aiid() const;
  void _internal_set_true_aiid(const std::string& value);
  std::string* _internal_mutable_true_aiid();
  public:

  // float value = 3;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:ConfusionMatrixEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pred_aiid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr true_aiid_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ConfusionMatrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfusionMatrix) */ {
 public:
  inline ConfusionMatrix() : ConfusionMatrix(nullptr) {}
  virtual ~ConfusionMatrix();

  ConfusionMatrix(const ConfusionMatrix& from);
  ConfusionMatrix(ConfusionMatrix&& from) noexcept
    : ConfusionMatrix() {
    *this = ::std::move(from);
  }

  inline ConfusionMatrix& operator=(const ConfusionMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfusionMatrix& operator=(ConfusionMatrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfusionMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfusionMatrix* internal_default_instance() {
    return reinterpret_cast<const ConfusionMatrix*>(
               &_ConfusionMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ConfusionMatrix& a, ConfusionMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfusionMatrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfusionMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfusionMatrix* New() const final {
    return CreateMaybeMessage<ConfusionMatrix>(nullptr);
  }

  ConfusionMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfusionMatrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfusionMatrix& from);
  void MergeFrom(const ConfusionMatrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfusionMatrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfusionMatrix";
  }
  protected:
  explicit ConfusionMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatrixFieldNumber = 1,
    kAiidOrderFieldNumber = 2,
  };
  // repeated .ConfusionMatrixEntry matrix = 1;
  int matrix_size() const;
  private:
  int _internal_matrix_size() const;
  public:
  void clear_matrix();
  ::ConfusionMatrixEntry* mutable_matrix(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfusionMatrixEntry >*
      mutable_matrix();
  private:
  const ::ConfusionMatrixEntry& _internal_matrix(int index) const;
  ::ConfusionMatrixEntry* _internal_add_matrix();
  public:
  const ::ConfusionMatrixEntry& matrix(int index) const;
  ::ConfusionMatrixEntry* add_matrix();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfusionMatrixEntry >&
      matrix() const;

  // repeated string aiid_order = 2;
  int aiid_order_size() const;
  private:
  int _internal_aiid_order_size() const;
  public:
  void clear_aiid_order();
  const std::string& aiid_order(int index) const;
  std::string* mutable_aiid_order(int index);
  void set_aiid_order(int index, const std::string& value);
  void set_aiid_order(int index, std::string&& value);
  void set_aiid_order(int index, const char* value);
  void set_aiid_order(int index, const char* value, size_t size);
  std::string* add_aiid_order();
  void add_aiid_order(const std::string& value);
  void add_aiid_order(std::string&& value);
  void add_aiid_order(const char* value);
  void add_aiid_order(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aiid_order() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aiid_order();
  private:
  const std::string& _internal_aiid_order(int index) const;
  std::string* _internal_add_aiid_order();
  public:

  // @@protoc_insertion_point(class_scope:ConfusionMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfusionMatrixEntry > matrix_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aiid_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ROC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ROC) */ {
 public:
  inline ROC() : ROC(nullptr) {}
  virtual ~ROC();

  ROC(const ROC& from);
  ROC(ROC&& from) noexcept
    : ROC() {
    *this = ::std::move(from);
  }

  inline ROC& operator=(const ROC& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROC& operator=(ROC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROC* internal_default_instance() {
    return reinterpret_cast<const ROC*>(
               &_ROC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ROC& a, ROC& b) {
    a.Swap(&b);
  }
  inline void Swap(ROC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROC* New() const final {
    return CreateMaybeMessage<ROC>(nullptr);
  }

  ROC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROC& from);
  void MergeFrom(const ROC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ROC";
  }
  protected:
  explicit ROC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFprFieldNumber = 1,
    kTprFieldNumber = 2,
    kThresholdsFieldNumber = 3,
    kFprPerImageFieldNumber = 4,
    kFprPerObjectFieldNumber = 5,
  };
  // repeated float fpr = 1 [packed = true];
  int fpr_size() const;
  private:
  int _internal_fpr_size() const;
  public:
  void clear_fpr();
  private:
  float _internal_fpr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fpr() const;
  void _internal_add_fpr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fpr();
  public:
  float fpr(int index) const;
  void set_fpr(int index, float value);
  void add_fpr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fpr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fpr();

  // repeated float tpr = 2 [packed = true];
  int tpr_size() const;
  private:
  int _internal_tpr_size() const;
  public:
  void clear_tpr();
  private:
  float _internal_tpr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_tpr() const;
  void _internal_add_tpr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_tpr();
  public:
  float tpr(int index) const;
  void set_tpr(int index, float value);
  void add_tpr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpr();

  // repeated float thresholds = 3 [packed = true];
  int thresholds_size() const;
  private:
  int _internal_thresholds_size() const;
  public:
  void clear_thresholds();
  private:
  float _internal_thresholds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_thresholds() const;
  void _internal_add_thresholds(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_thresholds();
  public:
  float thresholds(int index) const;
  void set_thresholds(int index, float value);
  void add_thresholds(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      thresholds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_thresholds();

  // repeated float fpr_per_image = 4 [packed = true];
  int fpr_per_image_size() const;
  private:
  int _internal_fpr_per_image_size() const;
  public:
  void clear_fpr_per_image();
  private:
  float _internal_fpr_per_image(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fpr_per_image() const;
  void _internal_add_fpr_per_image(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fpr_per_image();
  public:
  float fpr_per_image(int index) const;
  void set_fpr_per_image(int index, float value);
  void add_fpr_per_image(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fpr_per_image() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fpr_per_image();

  // repeated float fpr_per_object = 5 [packed = true];
  int fpr_per_object_size() const;
  private:
  int _internal_fpr_per_object_size() const;
  public:
  void clear_fpr_per_object();
  private:
  float _internal_fpr_per_object(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fpr_per_object() const;
  void _internal_add_fpr_per_object(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fpr_per_object();
  public:
  float fpr_per_object(int index) const;
  void set_fpr_per_object(int index, float value);
  void add_fpr_per_object(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fpr_per_object() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fpr_per_object();

  // @@protoc_insertion_point(class_scope:ROC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fpr_;
  mutable std::atomic<int> _fpr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpr_;
  mutable std::atomic<int> _tpr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > thresholds_;
  mutable std::atomic<int> _thresholds_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fpr_per_image_;
  mutable std::atomic<int> _fpr_per_image_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fpr_per_object_;
  mutable std::atomic<int> _fpr_per_object_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class PrecisionRecallCurve PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PrecisionRecallCurve) */ {
 public:
  inline PrecisionRecallCurve() : PrecisionRecallCurve(nullptr) {}
  virtual ~PrecisionRecallCurve();

  PrecisionRecallCurve(const PrecisionRecallCurve& from);
  PrecisionRecallCurve(PrecisionRecallCurve&& from) noexcept
    : PrecisionRecallCurve() {
    *this = ::std::move(from);
  }

  inline PrecisionRecallCurve& operator=(const PrecisionRecallCurve& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrecisionRecallCurve& operator=(PrecisionRecallCurve&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrecisionRecallCurve& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrecisionRecallCurve* internal_default_instance() {
    return reinterpret_cast<const PrecisionRecallCurve*>(
               &_PrecisionRecallCurve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PrecisionRecallCurve& a, PrecisionRecallCurve& b) {
    a.Swap(&b);
  }
  inline void Swap(PrecisionRecallCurve* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrecisionRecallCurve* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrecisionRecallCurve* New() const final {
    return CreateMaybeMessage<PrecisionRecallCurve>(nullptr);
  }

  PrecisionRecallCurve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrecisionRecallCurve>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrecisionRecallCurve& from);
  void MergeFrom(const PrecisionRecallCurve& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrecisionRecallCurve* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PrecisionRecallCurve";
  }
  protected:
  explicit PrecisionRecallCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecallFieldNumber = 1,
    kPrecisionFieldNumber = 2,
    kThresholdsFieldNumber = 3,
  };
  // repeated float recall = 1 [packed = true];
  int recall_size() const;
  private:
  int _internal_recall_size() const;
  public:
  void clear_recall();
  private:
  float _internal_recall(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_recall() const;
  void _internal_add_recall(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_recall();
  public:
  float recall(int index) const;
  void set_recall(int index, float value);
  void add_recall(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      recall() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_recall();

  // repeated float precision = 2 [packed = true];
  int precision_size() const;
  private:
  int _internal_precision_size() const;
  public:
  void clear_precision();
  private:
  float _internal_precision(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_precision() const;
  void _internal_add_precision(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_precision();
  public:
  float precision(int index) const;
  void set_precision(int index, float value);
  void add_precision(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      precision() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_precision();

  // repeated float thresholds = 3 [packed = true];
  int thresholds_size() const;
  private:
  int _internal_thresholds_size() const;
  public:
  void clear_thresholds();
  private:
  float _internal_thresholds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_thresholds() const;
  void _internal_add_thresholds(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_thresholds();
  public:
  float thresholds(int index) const;
  void set_thresholds(int index, float value);
  void add_thresholds(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      thresholds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_thresholds();

  // @@protoc_insertion_point(class_scope:PrecisionRecallCurve)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > recall_;
  mutable std::atomic<int> _recall_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > precision_;
  mutable std::atomic<int> _precision_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > thresholds_;
  mutable std::atomic<int> _thresholds_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class BinaryMetrics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BinaryMetrics) */ {
 public:
  inline BinaryMetrics() : BinaryMetrics(nullptr) {}
  virtual ~BinaryMetrics();

  BinaryMetrics(const BinaryMetrics& from);
  BinaryMetrics(BinaryMetrics&& from) noexcept
    : BinaryMetrics() {
    *this = ::std::move(from);
  }

  inline BinaryMetrics& operator=(const BinaryMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryMetrics& operator=(BinaryMetrics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BinaryMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinaryMetrics* internal_default_instance() {
    return reinterpret_cast<const BinaryMetrics*>(
               &_BinaryMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BinaryMetrics& a, BinaryMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryMetrics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinaryMetrics* New() const final {
    return CreateMaybeMessage<BinaryMetrics>(nullptr);
  }

  BinaryMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinaryMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BinaryMetrics& from);
  void MergeFrom(const BinaryMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BinaryMetrics";
  }
  protected:
  explicit BinaryMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAiidFieldNumber = 9,
    kAreaRangeNameFieldNumber = 14,
    kRocCurveFieldNumber = 8,
    kPrecisionRecallCurveFieldNumber = 12,
    kNumPosFieldNumber = 1,
    kNumNegFieldNumber = 2,
    kNumExamplesFieldNumber = 3,
    kRocAucFieldNumber = 4,
    kF1FieldNumber = 5,
    kMatthewsCorrcoefFieldNumber = 6,
    kBrierScoreFieldNumber = 7,
    kPrecisionFieldNumber = 10,
    kRecallFieldNumber = 11,
    kAvgPrecisionFieldNumber = 13,
    kAreaMinFieldNumber = 15,
    kAreaMaxFieldNumber = 16,
    kIouFieldNumber = 17,
  };
  // string aiid = 9;
  void clear_aiid();
  const std::string& aiid() const;
  void set_aiid(const std::string& value);
  void set_aiid(std::string&& value);
  void set_aiid(const char* value);
  void set_aiid(const char* value, size_t size);
  std::string* mutable_aiid();
  std::string* release_aiid();
  void set_allocated_aiid(std::string* aiid);
  private:
  const std::string& _internal_aiid() const;
  void _internal_set_aiid(const std::string& value);
  std::string* _internal_mutable_aiid();
  public:

  // string area_range_name = 14;
  void clear_area_range_name();
  const std::string& area_range_name() const;
  void set_area_range_name(const std::string& value);
  void set_area_range_name(std::string&& value);
  void set_area_range_name(const char* value);
  void set_area_range_name(const char* value, size_t size);
  std::string* mutable_area_range_name();
  std::string* release_area_range_name();
  void set_allocated_area_range_name(std::string* area_range_name);
  private:
  const std::string& _internal_area_range_name() const;
  void _internal_set_area_range_name(const std::string& value);
  std::string* _internal_mutable_area_range_name();
  public:

  // .ROC roc_curve = 8;
  bool has_roc_curve() const;
  private:
  bool _internal_has_roc_curve() const;
  public:
  void clear_roc_curve();
  const ::ROC& roc_curve() const;
  ::ROC* release_roc_curve();
  ::ROC* mutable_roc_curve();
  void set_allocated_roc_curve(::ROC* roc_curve);
  private:
  const ::ROC& _internal_roc_curve() const;
  ::ROC* _internal_mutable_roc_curve();
  public:
  void unsafe_arena_set_allocated_roc_curve(
      ::ROC* roc_curve);
  ::ROC* unsafe_arena_release_roc_curve();

  // .PrecisionRecallCurve precision_recall_curve = 12;
  bool has_precision_recall_curve() const;
  private:
  bool _internal_has_precision_recall_curve() const;
  public:
  void clear_precision_recall_curve();
  const ::PrecisionRecallCurve& precision_recall_curve() const;
  ::PrecisionRecallCurve* release_precision_recall_curve();
  ::PrecisionRecallCurve* mutable_precision_recall_curve();
  void set_allocated_precision_recall_curve(::PrecisionRecallCurve* precision_recall_curve);
  private:
  const ::PrecisionRecallCurve& _internal_precision_recall_curve() const;
  ::PrecisionRecallCurve* _internal_mutable_precision_recall_curve();
  public:
  void unsafe_arena_set_allocated_precision_recall_curve(
      ::PrecisionRecallCurve* precision_recall_curve);
  ::PrecisionRecallCurve* unsafe_arena_release_precision_recall_curve();

  // int32 num_pos = 1;
  void clear_num_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 num_pos() const;
  void set_num_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_pos() const;
  void _internal_set_num_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_neg = 2;
  void clear_num_neg();
  ::PROTOBUF_NAMESPACE_ID::int32 num_neg() const;
  void set_num_neg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_neg() const;
  void _internal_set_num_neg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_examples = 3;
  void clear_num_examples();
  ::PROTOBUF_NAMESPACE_ID::int32 num_examples() const;
  void set_num_examples(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_examples() const;
  void _internal_set_num_examples(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float roc_auc = 4;
  void clear_roc_auc();
  float roc_auc() const;
  void set_roc_auc(float value);
  private:
  float _internal_roc_auc() const;
  void _internal_set_roc_auc(float value);
  public:

  // float f1 = 5;
  void clear_f1();
  float f1() const;
  void set_f1(float value);
  private:
  float _internal_f1() const;
  void _internal_set_f1(float value);
  public:

  // float matthews_corrcoef = 6;
  void clear_matthews_corrcoef();
  float matthews_corrcoef() const;
  void set_matthews_corrcoef(float value);
  private:
  float _internal_matthews_corrcoef() const;
  void _internal_set_matthews_corrcoef(float value);
  public:

  // float brier_score = 7;
  void clear_brier_score();
  float brier_score() const;
  void set_brier_score(float value);
  private:
  float _internal_brier_score() const;
  void _internal_set_brier_score(float value);
  public:

  // float precision = 10;
  void clear_precision();
  float precision() const;
  void set_precision(float value);
  private:
  float _internal_precision() const;
  void _internal_set_precision(float value);
  public:

  // float recall = 11;
  void clear_recall();
  float recall() const;
  void set_recall(float value);
  private:
  float _internal_recall() const;
  void _internal_set_recall(float value);
  public:

  // float avg_precision = 13;
  void clear_avg_precision();
  float avg_precision() const;
  void set_avg_precision(float value);
  private:
  float _internal_avg_precision() const;
  void _internal_set_avg_precision(float value);
  public:

  // double area_min = 15;
  void clear_area_min();
  double area_min() const;
  void set_area_min(double value);
  private:
  double _internal_area_min() const;
  void _internal_set_area_min(double value);
  public:

  // double area_max = 16;
  void clear_area_max();
  double area_max() const;
  void set_area_max(double value);
  private:
  double _internal_area_max() const;
  void _internal_set_area_max(double value);
  public:

  // float iou = 17;
  void clear_iou();
  float iou() const;
  void set_iou(float value);
  private:
  float _internal_iou() const;
  void _internal_set_iou(float value);
  public:

  // @@protoc_insertion_point(class_scope:BinaryMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aiid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_range_name_;
  ::ROC* roc_curve_;
  ::PrecisionRecallCurve* precision_recall_curve_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_neg_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_examples_;
  float roc_auc_;
  float f1_;
  float matthews_corrcoef_;
  float brier_score_;
  float precision_;
  float recall_;
  float avg_precision_;
  double area_min_;
  double area_max_;
  float iou_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class MulticlassMetrics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MulticlassMetrics) */ {
 public:
  inline MulticlassMetrics() : MulticlassMetrics(nullptr) {}
  virtual ~MulticlassMetrics();

  MulticlassMetrics(const MulticlassMetrics& from);
  MulticlassMetrics(MulticlassMetrics&& from) noexcept
    : MulticlassMetrics() {
    *this = ::std::move(from);
  }

  inline MulticlassMetrics& operator=(const MulticlassMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline MulticlassMetrics& operator=(MulticlassMetrics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MulticlassMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MulticlassMetrics* internal_default_instance() {
    return reinterpret_cast<const MulticlassMetrics*>(
               &_MulticlassMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MulticlassMetrics& a, MulticlassMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(MulticlassMetrics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MulticlassMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MulticlassMetrics* New() const final {
    return CreateMaybeMessage<MulticlassMetrics>(nullptr);
  }

  MulticlassMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MulticlassMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MulticlassMetrics& from);
  void MergeFrom(const MulticlassMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MulticlassMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MulticlassMetrics";
  }
  protected:
  explicit MulticlassMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinaryMetricsFieldNumber = 10,
    kMetricsByClassFieldNumber = 23,
    kMetricsByAreaFieldNumber = 24,
    kConfusionMatrixFieldNumber = 8,
    kTestGroundTruthFieldNumber = 11,
    kTestPredictionsFieldNumber = 12,
    kCooccurrenceMatrixFieldNumber = 13,
    kPositiveLabelDistributionFieldNumber = 14,
    kTop1FieldNumber = 1,
    kTop5FieldNumber = 2,
    kMacroAvgRocAucFieldNumber = 3,
    kMacroStdRocAucFieldNumber = 4,
    kMacroAvgF1FieldNumber = 5,
    kMacroStdF1FieldNumber = 6,
    kNumClassesFieldNumber = 7,
    kTestedOnOutsideNegativesFieldNumber = 9,
    kTrainingTimeFieldNumber = 15,
    kMacroAvgPrecisionFieldNumber = 16,
    kMacroAvgRecallFieldNumber = 17,
    kKFoldTrainAndApplyTimeFieldNumber = 18,
    kNumExamplesFieldNumber = 19,
    kMetricsAssemblyTimeFieldNumber = 20,
    kMeanAveragePrecisionIou50FieldNumber = 21,
    kMeanAveragePrecisionIouRangeFieldNumber = 22,
  };
  // repeated .BinaryMetrics binary_metrics = 10;
  int binary_metrics_size() const;
  private:
  int _internal_binary_metrics_size() const;
  public:
  void clear_binary_metrics();
  ::BinaryMetrics* mutable_binary_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BinaryMetrics >*
      mutable_binary_metrics();
  private:
  const ::BinaryMetrics& _internal_binary_metrics(int index) const;
  ::BinaryMetrics* _internal_add_binary_metrics();
  public:
  const ::BinaryMetrics& binary_metrics(int index) const;
  ::BinaryMetrics* add_binary_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BinaryMetrics >&
      binary_metrics() const;

  // repeated .BinaryMetrics metrics_by_class = 23;
  int metrics_by_class_size() const;
  private:
  int _internal_metrics_by_class_size() const;
  public:
  void clear_metrics_by_class();
  ::BinaryMetrics* mutable_metrics_by_class(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BinaryMetrics >*
      mutable_metrics_by_class();
  private:
  const ::BinaryMetrics& _internal_metrics_by_class(int index) const;
  ::BinaryMetrics* _internal_add_metrics_by_class();
  public:
  const ::BinaryMetrics& metrics_by_class(int index) const;
  ::BinaryMetrics* add_metrics_by_class();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BinaryMetrics >&
      metrics_by_class() const;

  // repeated .BinaryMetrics metrics_by_area = 24;
  int metrics_by_area_size() const;
  private:
  int _internal_metrics_by_area_size() const;
  public:
  void clear_metrics_by_area();
  ::BinaryMetrics* mutable_metrics_by_area(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BinaryMetrics >*
      mutable_metrics_by_area();
  private:
  const ::BinaryMetrics& _internal_metrics_by_area(int index) const;
  ::BinaryMetrics* _internal_add_metrics_by_area();
  public:
  const ::BinaryMetrics& metrics_by_area(int index) const;
  ::BinaryMetrics* add_metrics_by_area();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BinaryMetrics >&
      metrics_by_area() const;

  // .ConfusionMatrix confusion_matrix = 8;
  bool has_confusion_matrix() const;
  private:
  bool _internal_has_confusion_matrix() const;
  public:
  void clear_confusion_matrix();
  const ::ConfusionMatrix& confusion_matrix() const;
  ::ConfusionMatrix* release_confusion_matrix();
  ::ConfusionMatrix* mutable_confusion_matrix();
  void set_allocated_confusion_matrix(::ConfusionMatrix* confusion_matrix);
  private:
  const ::ConfusionMatrix& _internal_confusion_matrix() const;
  ::ConfusionMatrix* _internal_mutable_confusion_matrix();
  public:
  void unsafe_arena_set_allocated_confusion_matrix(
      ::ConfusionMatrix* confusion_matrix);
  ::ConfusionMatrix* unsafe_arena_release_confusion_matrix();

  // .DataBatch test_ground_truth = 11;
  bool has_test_ground_truth() const;
  private:
  bool _internal_has_test_ground_truth() const;
  public:
  void clear_test_ground_truth();
  const ::DataBatch& test_ground_truth() const;
  ::DataBatch* release_test_ground_truth();
  ::DataBatch* mutable_test_ground_truth();
  void set_allocated_test_ground_truth(::DataBatch* test_ground_truth);
  private:
  const ::DataBatch& _internal_test_ground_truth() const;
  ::DataBatch* _internal_mutable_test_ground_truth();
  public:
  void unsafe_arena_set_allocated_test_ground_truth(
      ::DataBatch* test_ground_truth);
  ::DataBatch* unsafe_arena_release_test_ground_truth();

  // .DataBatch test_predictions = 12;
  bool has_test_predictions() const;
  private:
  bool _internal_has_test_predictions() const;
  public:
  void clear_test_predictions();
  const ::DataBatch& test_predictions() const;
  ::DataBatch* release_test_predictions();
  ::DataBatch* mutable_test_predictions();
  void set_allocated_test_predictions(::DataBatch* test_predictions);
  private:
  const ::DataBatch& _internal_test_predictions() const;
  ::DataBatch* _internal_mutable_test_predictions();
  public:
  void unsafe_arena_set_allocated_test_predictions(
      ::DataBatch* test_predictions);
  ::DataBatch* unsafe_arena_release_test_predictions();

  // .CooccurrenceMatrix cooccurrence_matrix = 13;
  bool has_cooccurrence_matrix() const;
  private:
  bool _internal_has_cooccurrence_matrix() const;
  public:
  void clear_cooccurrence_matrix();
  const ::CooccurrenceMatrix& cooccurrence_matrix() const;
  ::CooccurrenceMatrix* release_cooccurrence_matrix();
  ::CooccurrenceMatrix* mutable_cooccurrence_matrix();
  void set_allocated_cooccurrence_matrix(::CooccurrenceMatrix* cooccurrence_matrix);
  private:
  const ::CooccurrenceMatrix& _internal_cooccurrence_matrix() const;
  ::CooccurrenceMatrix* _internal_mutable_cooccurrence_matrix();
  public:
  void unsafe_arena_set_allocated_cooccurrence_matrix(
      ::CooccurrenceMatrix* cooccurrence_matrix);
  ::CooccurrenceMatrix* unsafe_arena_release_cooccurrence_matrix();

  // .PositiveLabelDistribution positive_label_distribution = 14;
  bool has_positive_label_distribution() const;
  private:
  bool _internal_has_positive_label_distribution() const;
  public:
  void clear_positive_label_distribution();
  const ::PositiveLabelDistribution& positive_label_distribution() const;
  ::PositiveLabelDistribution* release_positive_label_distribution();
  ::PositiveLabelDistribution* mutable_positive_label_distribution();
  void set_allocated_positive_label_distribution(::PositiveLabelDistribution* positive_label_distribution);
  private:
  const ::PositiveLabelDistribution& _internal_positive_label_distribution() const;
  ::PositiveLabelDistribution* _internal_mutable_positive_label_distribution();
  public:
  void unsafe_arena_set_allocated_positive_label_distribution(
      ::PositiveLabelDistribution* positive_label_distribution);
  ::PositiveLabelDistribution* unsafe_arena_release_positive_label_distribution();

  // float top1 = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_top1();
  PROTOBUF_DEPRECATED float top1() const;
  PROTOBUF_DEPRECATED void set_top1(float value);
  private:
  float _internal_top1() const;
  void _internal_set_top1(float value);
  public:

  // float top5 = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_top5();
  PROTOBUF_DEPRECATED float top5() const;
  PROTOBUF_DEPRECATED void set_top5(float value);
  private:
  float _internal_top5() const;
  void _internal_set_top5(float value);
  public:

  // float macro_avg_roc_auc = 3;
  void clear_macro_avg_roc_auc();
  float macro_avg_roc_auc() const;
  void set_macro_avg_roc_auc(float value);
  private:
  float _internal_macro_avg_roc_auc() const;
  void _internal_set_macro_avg_roc_auc(float value);
  public:

  // float macro_std_roc_auc = 4;
  void clear_macro_std_roc_auc();
  float macro_std_roc_auc() const;
  void set_macro_std_roc_auc(float value);
  private:
  float _internal_macro_std_roc_auc() const;
  void _internal_set_macro_std_roc_auc(float value);
  public:

  // float macro_avg_f1 = 5;
  void clear_macro_avg_f1();
  float macro_avg_f1() const;
  void set_macro_avg_f1(float value);
  private:
  float _internal_macro_avg_f1() const;
  void _internal_set_macro_avg_f1(float value);
  public:

  // float macro_std_f1 = 6;
  void clear_macro_std_f1();
  float macro_std_f1() const;
  void set_macro_std_f1(float value);
  private:
  float _internal_macro_std_f1() const;
  void _internal_set_macro_std_f1(float value);
  public:

  // int32 num_classes = 7;
  void clear_num_classes();
  ::PROTOBUF_NAMESPACE_ID::int32 num_classes() const;
  void set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_classes() const;
  void _internal_set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool tested_on_outside_negatives = 9;
  void clear_tested_on_outside_negatives();
  bool tested_on_outside_negatives() const;
  void set_tested_on_outside_negatives(bool value);
  private:
  bool _internal_tested_on_outside_negatives() const;
  void _internal_set_tested_on_outside_negatives(bool value);
  public:

  // float training_time = 15;
  void clear_training_time();
  float training_time() const;
  void set_training_time(float value);
  private:
  float _internal_training_time() const;
  void _internal_set_training_time(float value);
  public:

  // float macro_avg_precision = 16;
  void clear_macro_avg_precision();
  float macro_avg_precision() const;
  void set_macro_avg_precision(float value);
  private:
  float _internal_macro_avg_precision() const;
  void _internal_set_macro_avg_precision(float value);
  public:

  // float macro_avg_recall = 17;
  void clear_macro_avg_recall();
  float macro_avg_recall() const;
  void set_macro_avg_recall(float value);
  private:
  float _internal_macro_avg_recall() const;
  void _internal_set_macro_avg_recall(float value);
  public:

  // float k_fold_train_and_apply_time = 18;
  void clear_k_fold_train_and_apply_time();
  float k_fold_train_and_apply_time() const;
  void set_k_fold_train_and_apply_time(float value);
  private:
  float _internal_k_fold_train_and_apply_time() const;
  void _internal_set_k_fold_train_and_apply_time(float value);
  public:

  // float num_examples = 19;
  void clear_num_examples();
  float num_examples() const;
  void set_num_examples(float value);
  private:
  float _internal_num_examples() const;
  void _internal_set_num_examples(float value);
  public:

  // float metrics_assembly_time = 20;
  void clear_metrics_assembly_time();
  float metrics_assembly_time() const;
  void set_metrics_assembly_time(float value);
  private:
  float _internal_metrics_assembly_time() const;
  void _internal_set_metrics_assembly_time(float value);
  public:

  // float mean_average_precision_iou_50 = 21;
  void clear_mean_average_precision_iou_50();
  float mean_average_precision_iou_50() const;
  void set_mean_average_precision_iou_50(float value);
  private:
  float _internal_mean_average_precision_iou_50() const;
  void _internal_set_mean_average_precision_iou_50(float value);
  public:

  // float mean_average_precision_iou_range = 22;
  void clear_mean_average_precision_iou_range();
  float mean_average_precision_iou_range() const;
  void set_mean_average_precision_iou_range(float value);
  private:
  float _internal_mean_average_precision_iou_range() const;
  void _internal_set_mean_average_precision_iou_range(float value);
  public:

  // @@protoc_insertion_point(class_scope:MulticlassMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BinaryMetrics > binary_metrics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BinaryMetrics > metrics_by_class_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BinaryMetrics > metrics_by_area_;
  ::ConfusionMatrix* confusion_matrix_;
  ::DataBatch* test_ground_truth_;
  ::DataBatch* test_predictions_;
  ::CooccurrenceMatrix* cooccurrence_matrix_;
  ::PositiveLabelDistribution* positive_label_distribution_;
  float top1_;
  float top5_;
  float macro_avg_roc_auc_;
  float macro_std_roc_auc_;
  float macro_avg_f1_;
  float macro_std_f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_classes_;
  bool tested_on_outside_negatives_;
  float training_time_;
  float macro_avg_precision_;
  float macro_avg_recall_;
  float k_fold_train_and_apply_time_;
  float num_examples_;
  float metrics_assembly_time_;
  float mean_average_precision_iou_50_;
  float mean_average_precision_iou_range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class MulticlassMetricsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MulticlassMetricsResponse) */ {
 public:
  inline MulticlassMetricsResponse() : MulticlassMetricsResponse(nullptr) {}
  virtual ~MulticlassMetricsResponse();

  MulticlassMetricsResponse(const MulticlassMetricsResponse& from);
  MulticlassMetricsResponse(MulticlassMetricsResponse&& from) noexcept
    : MulticlassMetricsResponse() {
    *this = ::std::move(from);
  }

  inline MulticlassMetricsResponse& operator=(const MulticlassMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MulticlassMetricsResponse& operator=(MulticlassMetricsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MulticlassMetricsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MulticlassMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const MulticlassMetricsResponse*>(
               &_MulticlassMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MulticlassMetricsResponse& a, MulticlassMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MulticlassMetricsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MulticlassMetricsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MulticlassMetricsResponse* New() const final {
    return CreateMaybeMessage<MulticlassMetricsResponse>(nullptr);
  }

  MulticlassMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MulticlassMetricsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MulticlassMetricsResponse& from);
  void MergeFrom(const MulticlassMetricsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MulticlassMetricsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MulticlassMetricsResponse";
  }
  protected:
  explicit MulticlassMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // .MulticlassMetrics result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::MulticlassMetrics& result() const;
  ::MulticlassMetrics* release_result();
  ::MulticlassMetrics* mutable_result();
  void set_allocated_result(::MulticlassMetrics* result);
  private:
  const ::MulticlassMetrics& _internal_result() const;
  ::MulticlassMetrics* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::MulticlassMetrics* result);
  ::MulticlassMetrics* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:MulticlassMetricsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ResponseStatus* status_;
  ::MulticlassMetrics* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ProgressStatus_ConceptCountsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProgressStatus_ConceptCountsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProgressStatus_ConceptCountsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > SuperType;
  ProgressStatus_ConceptCountsEntry_DoNotUse();
  explicit ProgressStatus_ConceptCountsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ProgressStatus_ConceptCountsEntry_DoNotUse& other);
  static const ProgressStatus_ConceptCountsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ProgressStatus_ConceptCountsEntry_DoNotUse*>(&_ProgressStatus_ConceptCountsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ProgressStatus.ConceptCountsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class ProgressStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProgressStatus) */ {
 public:
  inline ProgressStatus() : ProgressStatus(nullptr) {}
  virtual ~ProgressStatus();

  ProgressStatus(const ProgressStatus& from);
  ProgressStatus(ProgressStatus&& from) noexcept
    : ProgressStatus() {
    *this = ::std::move(from);
  }

  inline ProgressStatus& operator=(const ProgressStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgressStatus& operator=(ProgressStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProgressStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProgressStatus* internal_default_instance() {
    return reinterpret_cast<const ProgressStatus*>(
               &_ProgressStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ProgressStatus& a, ProgressStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgressStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgressStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProgressStatus* New() const final {
    return CreateMaybeMessage<ProgressStatus>(nullptr);
  }

  ProgressStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProgressStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProgressStatus& from);
  void MergeFrom(const ProgressStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgressStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProgressStatus";
  }
  protected:
  explicit ProgressStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kConceptCountsFieldNumber = 4,
    kTrainStatsFieldNumber = 5,
    kPercentCompletedFieldNumber = 1,
    kTimeRemainingFieldNumber = 2,
    kTotalInputCountFieldNumber = 3,
  };
  // map<string, uint32> concept_counts = 4;
  int concept_counts_size() const;
  private:
  int _internal_concept_counts_size() const;
  public:
  void clear_concept_counts();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_concept_counts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_concept_counts();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      concept_counts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_concept_counts();

  // repeated .TrainStats train_stats = 5;
  int train_stats_size() const;
  private:
  int _internal_train_stats_size() const;
  public:
  void clear_train_stats();
  ::TrainStats* mutable_train_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrainStats >*
      mutable_train_stats();
  private:
  const ::TrainStats& _internal_train_stats(int index) const;
  ::TrainStats* _internal_add_train_stats();
  public:
  const ::TrainStats& train_stats(int index) const;
  ::TrainStats* add_train_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrainStats >&
      train_stats() const;

  // uint32 percent_completed = 1;
  void clear_percent_completed();
  ::PROTOBUF_NAMESPACE_ID::uint32 percent_completed() const;
  void set_percent_completed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_percent_completed() const;
  void _internal_set_percent_completed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 time_remaining = 2;
  void clear_time_remaining();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_remaining() const;
  void set_time_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_remaining() const;
  void _internal_set_time_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_input_count = 3;
  void clear_total_input_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_input_count() const;
  void set_total_input_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_input_count() const;
  void _internal_set_total_input_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProgressStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ProgressStatus_ConceptCountsEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      0 > concept_counts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrainStats > train_stats_;
  ::PROTOBUF_NAMESPACE_ID::uint32 percent_completed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_remaining_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_input_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class TrainStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrainStats) */ {
 public:
  inline TrainStats() : TrainStats(nullptr) {}
  virtual ~TrainStats();

  TrainStats(const TrainStats& from);
  TrainStats(TrainStats&& from) noexcept
    : TrainStats() {
    *this = ::std::move(from);
  }

  inline TrainStats& operator=(const TrainStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainStats& operator=(TrainStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainStats* internal_default_instance() {
    return reinterpret_cast<const TrainStats*>(
               &_TrainStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TrainStats& a, TrainStats& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainStats* New() const final {
    return CreateMaybeMessage<TrainStats>(nullptr);
  }

  TrainStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainStats& from);
  void MergeFrom(const TrainStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrainStats";
  }
  protected:
  explicit TrainStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto);
    return ::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpochFieldNumber = 1,
    kGlobalStepFieldNumber = 2,
    kCostFieldNumber = 3,
  };
  // uint32 epoch = 1;
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 global_step = 2;
  void clear_global_step();
  ::PROTOBUF_NAMESPACE_ID::uint32 global_step() const;
  void set_global_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_global_step() const;
  void _internal_set_global_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float cost = 3;
  void clear_cost();
  float cost() const;
  void set_cost(float value);
  private:
  float _internal_cost() const;
  void _internal_set_cost(float value);
  public:

  // @@protoc_insertion_point(class_scope:TrainStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 global_step_;
  float cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LabelFreq

// string aiid = 1;
inline void LabelFreq::clear_aiid() {
  aiid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabelFreq::aiid() const {
  // @@protoc_insertion_point(field_get:LabelFreq.aiid)
  return _internal_aiid();
}
inline void LabelFreq::set_aiid(const std::string& value) {
  _internal_set_aiid(value);
  // @@protoc_insertion_point(field_set:LabelFreq.aiid)
}
inline std::string* LabelFreq::mutable_aiid() {
  // @@protoc_insertion_point(field_mutable:LabelFreq.aiid)
  return _internal_mutable_aiid();
}
inline const std::string& LabelFreq::_internal_aiid() const {
  return aiid_.Get();
}
inline void LabelFreq::_internal_set_aiid(const std::string& value) {
  
  aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabelFreq::set_aiid(std::string&& value) {
  
  aiid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabelFreq.aiid)
}
inline void LabelFreq::set_aiid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabelFreq.aiid)
}
inline void LabelFreq::set_aiid(const char* value,
    size_t size) {
  
  aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabelFreq.aiid)
}
inline std::string* LabelFreq::_internal_mutable_aiid() {
  
  return aiid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabelFreq::release_aiid() {
  // @@protoc_insertion_point(field_release:LabelFreq.aiid)
  return aiid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelFreq::set_allocated_aiid(std::string* aiid) {
  if (aiid != nullptr) {
    
  } else {
    
  }
  aiid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aiid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabelFreq.aiid)
}

// int32 count = 2;
inline void LabelFreq::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelFreq::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelFreq::count() const {
  // @@protoc_insertion_point(field_get:LabelFreq.count)
  return _internal_count();
}
inline void LabelFreq::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void LabelFreq::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:LabelFreq.count)
}

// -------------------------------------------------------------------

// PositiveLabelDistribution

// repeated .LabelFreq label_freqs = 1;
inline int PositiveLabelDistribution::_internal_label_freqs_size() const {
  return label_freqs_.size();
}
inline int PositiveLabelDistribution::label_freqs_size() const {
  return _internal_label_freqs_size();
}
inline void PositiveLabelDistribution::clear_label_freqs() {
  label_freqs_.Clear();
}
inline ::LabelFreq* PositiveLabelDistribution::mutable_label_freqs(int index) {
  // @@protoc_insertion_point(field_mutable:PositiveLabelDistribution.label_freqs)
  return label_freqs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelFreq >*
PositiveLabelDistribution::mutable_label_freqs() {
  // @@protoc_insertion_point(field_mutable_list:PositiveLabelDistribution.label_freqs)
  return &label_freqs_;
}
inline const ::LabelFreq& PositiveLabelDistribution::_internal_label_freqs(int index) const {
  return label_freqs_.Get(index);
}
inline const ::LabelFreq& PositiveLabelDistribution::label_freqs(int index) const {
  // @@protoc_insertion_point(field_get:PositiveLabelDistribution.label_freqs)
  return _internal_label_freqs(index);
}
inline ::LabelFreq* PositiveLabelDistribution::_internal_add_label_freqs() {
  return label_freqs_.Add();
}
inline ::LabelFreq* PositiveLabelDistribution::add_label_freqs() {
  // @@protoc_insertion_point(field_add:PositiveLabelDistribution.label_freqs)
  return _internal_add_label_freqs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelFreq >&
PositiveLabelDistribution::label_freqs() const {
  // @@protoc_insertion_point(field_list:PositiveLabelDistribution.label_freqs)
  return label_freqs_;
}

// -------------------------------------------------------------------

// CooccurrenceMatrixEntry

// string row = 1;
inline void CooccurrenceMatrixEntry::clear_row() {
  row_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CooccurrenceMatrixEntry::row() const {
  // @@protoc_insertion_point(field_get:CooccurrenceMatrixEntry.row)
  return _internal_row();
}
inline void CooccurrenceMatrixEntry::set_row(const std::string& value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:CooccurrenceMatrixEntry.row)
}
inline std::string* CooccurrenceMatrixEntry::mutable_row() {
  // @@protoc_insertion_point(field_mutable:CooccurrenceMatrixEntry.row)
  return _internal_mutable_row();
}
inline const std::string& CooccurrenceMatrixEntry::_internal_row() const {
  return row_.Get();
}
inline void CooccurrenceMatrixEntry::_internal_set_row(const std::string& value) {
  
  row_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CooccurrenceMatrixEntry::set_row(std::string&& value) {
  
  row_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CooccurrenceMatrixEntry.row)
}
inline void CooccurrenceMatrixEntry::set_row(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CooccurrenceMatrixEntry.row)
}
inline void CooccurrenceMatrixEntry::set_row(const char* value,
    size_t size) {
  
  row_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CooccurrenceMatrixEntry.row)
}
inline std::string* CooccurrenceMatrixEntry::_internal_mutable_row() {
  
  return row_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CooccurrenceMatrixEntry::release_row() {
  // @@protoc_insertion_point(field_release:CooccurrenceMatrixEntry.row)
  return row_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CooccurrenceMatrixEntry::set_allocated_row(std::string* row) {
  if (row != nullptr) {
    
  } else {
    
  }
  row_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CooccurrenceMatrixEntry.row)
}

// string col = 2;
inline void CooccurrenceMatrixEntry::clear_col() {
  col_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CooccurrenceMatrixEntry::col() const {
  // @@protoc_insertion_point(field_get:CooccurrenceMatrixEntry.col)
  return _internal_col();
}
inline void CooccurrenceMatrixEntry::set_col(const std::string& value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:CooccurrenceMatrixEntry.col)
}
inline std::string* CooccurrenceMatrixEntry::mutable_col() {
  // @@protoc_insertion_point(field_mutable:CooccurrenceMatrixEntry.col)
  return _internal_mutable_col();
}
inline const std::string& CooccurrenceMatrixEntry::_internal_col() const {
  return col_.Get();
}
inline void CooccurrenceMatrixEntry::_internal_set_col(const std::string& value) {
  
  col_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CooccurrenceMatrixEntry::set_col(std::string&& value) {
  
  col_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CooccurrenceMatrixEntry.col)
}
inline void CooccurrenceMatrixEntry::set_col(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  col_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CooccurrenceMatrixEntry.col)
}
inline void CooccurrenceMatrixEntry::set_col(const char* value,
    size_t size) {
  
  col_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CooccurrenceMatrixEntry.col)
}
inline std::string* CooccurrenceMatrixEntry::_internal_mutable_col() {
  
  return col_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CooccurrenceMatrixEntry::release_col() {
  // @@protoc_insertion_point(field_release:CooccurrenceMatrixEntry.col)
  return col_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CooccurrenceMatrixEntry::set_allocated_col(std::string* col) {
  if (col != nullptr) {
    
  } else {
    
  }
  col_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), col,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CooccurrenceMatrixEntry.col)
}

// int32 count = 3;
inline void CooccurrenceMatrixEntry::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CooccurrenceMatrixEntry::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CooccurrenceMatrixEntry::count() const {
  // @@protoc_insertion_point(field_get:CooccurrenceMatrixEntry.count)
  return _internal_count();
}
inline void CooccurrenceMatrixEntry::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void CooccurrenceMatrixEntry::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CooccurrenceMatrixEntry.count)
}

// -------------------------------------------------------------------

// CooccurrenceMatrix

// repeated .CooccurrenceMatrixEntry matrix = 1;
inline int CooccurrenceMatrix::_internal_matrix_size() const {
  return matrix_.size();
}
inline int CooccurrenceMatrix::matrix_size() const {
  return _internal_matrix_size();
}
inline void CooccurrenceMatrix::clear_matrix() {
  matrix_.Clear();
}
inline ::CooccurrenceMatrixEntry* CooccurrenceMatrix::mutable_matrix(int index) {
  // @@protoc_insertion_point(field_mutable:CooccurrenceMatrix.matrix)
  return matrix_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CooccurrenceMatrixEntry >*
CooccurrenceMatrix::mutable_matrix() {
  // @@protoc_insertion_point(field_mutable_list:CooccurrenceMatrix.matrix)
  return &matrix_;
}
inline const ::CooccurrenceMatrixEntry& CooccurrenceMatrix::_internal_matrix(int index) const {
  return matrix_.Get(index);
}
inline const ::CooccurrenceMatrixEntry& CooccurrenceMatrix::matrix(int index) const {
  // @@protoc_insertion_point(field_get:CooccurrenceMatrix.matrix)
  return _internal_matrix(index);
}
inline ::CooccurrenceMatrixEntry* CooccurrenceMatrix::_internal_add_matrix() {
  return matrix_.Add();
}
inline ::CooccurrenceMatrixEntry* CooccurrenceMatrix::add_matrix() {
  // @@protoc_insertion_point(field_add:CooccurrenceMatrix.matrix)
  return _internal_add_matrix();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CooccurrenceMatrixEntry >&
CooccurrenceMatrix::matrix() const {
  // @@protoc_insertion_point(field_list:CooccurrenceMatrix.matrix)
  return matrix_;
}

// repeated string aiid_order = 2;
inline int CooccurrenceMatrix::_internal_aiid_order_size() const {
  return aiid_order_.size();
}
inline int CooccurrenceMatrix::aiid_order_size() const {
  return _internal_aiid_order_size();
}
inline void CooccurrenceMatrix::clear_aiid_order() {
  aiid_order_.Clear();
}
inline std::string* CooccurrenceMatrix::add_aiid_order() {
  // @@protoc_insertion_point(field_add_mutable:CooccurrenceMatrix.aiid_order)
  return _internal_add_aiid_order();
}
inline const std::string& CooccurrenceMatrix::_internal_aiid_order(int index) const {
  return aiid_order_.Get(index);
}
inline const std::string& CooccurrenceMatrix::aiid_order(int index) const {
  // @@protoc_insertion_point(field_get:CooccurrenceMatrix.aiid_order)
  return _internal_aiid_order(index);
}
inline std::string* CooccurrenceMatrix::mutable_aiid_order(int index) {
  // @@protoc_insertion_point(field_mutable:CooccurrenceMatrix.aiid_order)
  return aiid_order_.Mutable(index);
}
inline void CooccurrenceMatrix::set_aiid_order(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CooccurrenceMatrix.aiid_order)
  aiid_order_.Mutable(index)->assign(value);
}
inline void CooccurrenceMatrix::set_aiid_order(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CooccurrenceMatrix.aiid_order)
  aiid_order_.Mutable(index)->assign(std::move(value));
}
inline void CooccurrenceMatrix::set_aiid_order(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aiid_order_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CooccurrenceMatrix.aiid_order)
}
inline void CooccurrenceMatrix::set_aiid_order(int index, const char* value, size_t size) {
  aiid_order_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CooccurrenceMatrix.aiid_order)
}
inline std::string* CooccurrenceMatrix::_internal_add_aiid_order() {
  return aiid_order_.Add();
}
inline void CooccurrenceMatrix::add_aiid_order(const std::string& value) {
  aiid_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CooccurrenceMatrix.aiid_order)
}
inline void CooccurrenceMatrix::add_aiid_order(std::string&& value) {
  aiid_order_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CooccurrenceMatrix.aiid_order)
}
inline void CooccurrenceMatrix::add_aiid_order(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aiid_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CooccurrenceMatrix.aiid_order)
}
inline void CooccurrenceMatrix::add_aiid_order(const char* value, size_t size) {
  aiid_order_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CooccurrenceMatrix.aiid_order)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CooccurrenceMatrix::aiid_order() const {
  // @@protoc_insertion_point(field_list:CooccurrenceMatrix.aiid_order)
  return aiid_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CooccurrenceMatrix::mutable_aiid_order() {
  // @@protoc_insertion_point(field_mutable_list:CooccurrenceMatrix.aiid_order)
  return &aiid_order_;
}

// -------------------------------------------------------------------

// ConfusionMatrixEntry

// string pred_aiid = 1;
inline void ConfusionMatrixEntry::clear_pred_aiid() {
  pred_aiid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfusionMatrixEntry::pred_aiid() const {
  // @@protoc_insertion_point(field_get:ConfusionMatrixEntry.pred_aiid)
  return _internal_pred_aiid();
}
inline void ConfusionMatrixEntry::set_pred_aiid(const std::string& value) {
  _internal_set_pred_aiid(value);
  // @@protoc_insertion_point(field_set:ConfusionMatrixEntry.pred_aiid)
}
inline std::string* ConfusionMatrixEntry::mutable_pred_aiid() {
  // @@protoc_insertion_point(field_mutable:ConfusionMatrixEntry.pred_aiid)
  return _internal_mutable_pred_aiid();
}
inline const std::string& ConfusionMatrixEntry::_internal_pred_aiid() const {
  return pred_aiid_.Get();
}
inline void ConfusionMatrixEntry::_internal_set_pred_aiid(const std::string& value) {
  
  pred_aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfusionMatrixEntry::set_pred_aiid(std::string&& value) {
  
  pred_aiid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfusionMatrixEntry.pred_aiid)
}
inline void ConfusionMatrixEntry::set_pred_aiid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pred_aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConfusionMatrixEntry.pred_aiid)
}
inline void ConfusionMatrixEntry::set_pred_aiid(const char* value,
    size_t size) {
  
  pred_aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfusionMatrixEntry.pred_aiid)
}
inline std::string* ConfusionMatrixEntry::_internal_mutable_pred_aiid() {
  
  return pred_aiid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfusionMatrixEntry::release_pred_aiid() {
  // @@protoc_insertion_point(field_release:ConfusionMatrixEntry.pred_aiid)
  return pred_aiid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfusionMatrixEntry::set_allocated_pred_aiid(std::string* pred_aiid) {
  if (pred_aiid != nullptr) {
    
  } else {
    
  }
  pred_aiid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pred_aiid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfusionMatrixEntry.pred_aiid)
}

// string true_aiid = 2;
inline void ConfusionMatrixEntry::clear_true_aiid() {
  true_aiid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfusionMatrixEntry::true_aiid() const {
  // @@protoc_insertion_point(field_get:ConfusionMatrixEntry.true_aiid)
  return _internal_true_aiid();
}
inline void ConfusionMatrixEntry::set_true_aiid(const std::string& value) {
  _internal_set_true_aiid(value);
  // @@protoc_insertion_point(field_set:ConfusionMatrixEntry.true_aiid)
}
inline std::string* ConfusionMatrixEntry::mutable_true_aiid() {
  // @@protoc_insertion_point(field_mutable:ConfusionMatrixEntry.true_aiid)
  return _internal_mutable_true_aiid();
}
inline const std::string& ConfusionMatrixEntry::_internal_true_aiid() const {
  return true_aiid_.Get();
}
inline void ConfusionMatrixEntry::_internal_set_true_aiid(const std::string& value) {
  
  true_aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfusionMatrixEntry::set_true_aiid(std::string&& value) {
  
  true_aiid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfusionMatrixEntry.true_aiid)
}
inline void ConfusionMatrixEntry::set_true_aiid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  true_aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConfusionMatrixEntry.true_aiid)
}
inline void ConfusionMatrixEntry::set_true_aiid(const char* value,
    size_t size) {
  
  true_aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfusionMatrixEntry.true_aiid)
}
inline std::string* ConfusionMatrixEntry::_internal_mutable_true_aiid() {
  
  return true_aiid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfusionMatrixEntry::release_true_aiid() {
  // @@protoc_insertion_point(field_release:ConfusionMatrixEntry.true_aiid)
  return true_aiid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfusionMatrixEntry::set_allocated_true_aiid(std::string* true_aiid) {
  if (true_aiid != nullptr) {
    
  } else {
    
  }
  true_aiid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), true_aiid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfusionMatrixEntry.true_aiid)
}

// float value = 3;
inline void ConfusionMatrixEntry::clear_value() {
  value_ = 0;
}
inline float ConfusionMatrixEntry::_internal_value() const {
  return value_;
}
inline float ConfusionMatrixEntry::value() const {
  // @@protoc_insertion_point(field_get:ConfusionMatrixEntry.value)
  return _internal_value();
}
inline void ConfusionMatrixEntry::_internal_set_value(float value) {
  
  value_ = value;
}
inline void ConfusionMatrixEntry::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ConfusionMatrixEntry.value)
}

// -------------------------------------------------------------------

// ConfusionMatrix

// repeated .ConfusionMatrixEntry matrix = 1;
inline int ConfusionMatrix::_internal_matrix_size() const {
  return matrix_.size();
}
inline int ConfusionMatrix::matrix_size() const {
  return _internal_matrix_size();
}
inline void ConfusionMatrix::clear_matrix() {
  matrix_.Clear();
}
inline ::ConfusionMatrixEntry* ConfusionMatrix::mutable_matrix(int index) {
  // @@protoc_insertion_point(field_mutable:ConfusionMatrix.matrix)
  return matrix_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfusionMatrixEntry >*
ConfusionMatrix::mutable_matrix() {
  // @@protoc_insertion_point(field_mutable_list:ConfusionMatrix.matrix)
  return &matrix_;
}
inline const ::ConfusionMatrixEntry& ConfusionMatrix::_internal_matrix(int index) const {
  return matrix_.Get(index);
}
inline const ::ConfusionMatrixEntry& ConfusionMatrix::matrix(int index) const {
  // @@protoc_insertion_point(field_get:ConfusionMatrix.matrix)
  return _internal_matrix(index);
}
inline ::ConfusionMatrixEntry* ConfusionMatrix::_internal_add_matrix() {
  return matrix_.Add();
}
inline ::ConfusionMatrixEntry* ConfusionMatrix::add_matrix() {
  // @@protoc_insertion_point(field_add:ConfusionMatrix.matrix)
  return _internal_add_matrix();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfusionMatrixEntry >&
ConfusionMatrix::matrix() const {
  // @@protoc_insertion_point(field_list:ConfusionMatrix.matrix)
  return matrix_;
}

// repeated string aiid_order = 2;
inline int ConfusionMatrix::_internal_aiid_order_size() const {
  return aiid_order_.size();
}
inline int ConfusionMatrix::aiid_order_size() const {
  return _internal_aiid_order_size();
}
inline void ConfusionMatrix::clear_aiid_order() {
  aiid_order_.Clear();
}
inline std::string* ConfusionMatrix::add_aiid_order() {
  // @@protoc_insertion_point(field_add_mutable:ConfusionMatrix.aiid_order)
  return _internal_add_aiid_order();
}
inline const std::string& ConfusionMatrix::_internal_aiid_order(int index) const {
  return aiid_order_.Get(index);
}
inline const std::string& ConfusionMatrix::aiid_order(int index) const {
  // @@protoc_insertion_point(field_get:ConfusionMatrix.aiid_order)
  return _internal_aiid_order(index);
}
inline std::string* ConfusionMatrix::mutable_aiid_order(int index) {
  // @@protoc_insertion_point(field_mutable:ConfusionMatrix.aiid_order)
  return aiid_order_.Mutable(index);
}
inline void ConfusionMatrix::set_aiid_order(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ConfusionMatrix.aiid_order)
  aiid_order_.Mutable(index)->assign(value);
}
inline void ConfusionMatrix::set_aiid_order(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ConfusionMatrix.aiid_order)
  aiid_order_.Mutable(index)->assign(std::move(value));
}
inline void ConfusionMatrix::set_aiid_order(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aiid_order_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ConfusionMatrix.aiid_order)
}
inline void ConfusionMatrix::set_aiid_order(int index, const char* value, size_t size) {
  aiid_order_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ConfusionMatrix.aiid_order)
}
inline std::string* ConfusionMatrix::_internal_add_aiid_order() {
  return aiid_order_.Add();
}
inline void ConfusionMatrix::add_aiid_order(const std::string& value) {
  aiid_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ConfusionMatrix.aiid_order)
}
inline void ConfusionMatrix::add_aiid_order(std::string&& value) {
  aiid_order_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ConfusionMatrix.aiid_order)
}
inline void ConfusionMatrix::add_aiid_order(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aiid_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ConfusionMatrix.aiid_order)
}
inline void ConfusionMatrix::add_aiid_order(const char* value, size_t size) {
  aiid_order_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ConfusionMatrix.aiid_order)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConfusionMatrix::aiid_order() const {
  // @@protoc_insertion_point(field_list:ConfusionMatrix.aiid_order)
  return aiid_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConfusionMatrix::mutable_aiid_order() {
  // @@protoc_insertion_point(field_mutable_list:ConfusionMatrix.aiid_order)
  return &aiid_order_;
}

// -------------------------------------------------------------------

// ROC

// repeated float fpr = 1 [packed = true];
inline int ROC::_internal_fpr_size() const {
  return fpr_.size();
}
inline int ROC::fpr_size() const {
  return _internal_fpr_size();
}
inline void ROC::clear_fpr() {
  fpr_.Clear();
}
inline float ROC::_internal_fpr(int index) const {
  return fpr_.Get(index);
}
inline float ROC::fpr(int index) const {
  // @@protoc_insertion_point(field_get:ROC.fpr)
  return _internal_fpr(index);
}
inline void ROC::set_fpr(int index, float value) {
  fpr_.Set(index, value);
  // @@protoc_insertion_point(field_set:ROC.fpr)
}
inline void ROC::_internal_add_fpr(float value) {
  fpr_.Add(value);
}
inline void ROC::add_fpr(float value) {
  _internal_add_fpr(value);
  // @@protoc_insertion_point(field_add:ROC.fpr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::_internal_fpr() const {
  return fpr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::fpr() const {
  // @@protoc_insertion_point(field_list:ROC.fpr)
  return _internal_fpr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::_internal_mutable_fpr() {
  return &fpr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::mutable_fpr() {
  // @@protoc_insertion_point(field_mutable_list:ROC.fpr)
  return _internal_mutable_fpr();
}

// repeated float tpr = 2 [packed = true];
inline int ROC::_internal_tpr_size() const {
  return tpr_.size();
}
inline int ROC::tpr_size() const {
  return _internal_tpr_size();
}
inline void ROC::clear_tpr() {
  tpr_.Clear();
}
inline float ROC::_internal_tpr(int index) const {
  return tpr_.Get(index);
}
inline float ROC::tpr(int index) const {
  // @@protoc_insertion_point(field_get:ROC.tpr)
  return _internal_tpr(index);
}
inline void ROC::set_tpr(int index, float value) {
  tpr_.Set(index, value);
  // @@protoc_insertion_point(field_set:ROC.tpr)
}
inline void ROC::_internal_add_tpr(float value) {
  tpr_.Add(value);
}
inline void ROC::add_tpr(float value) {
  _internal_add_tpr(value);
  // @@protoc_insertion_point(field_add:ROC.tpr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::_internal_tpr() const {
  return tpr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::tpr() const {
  // @@protoc_insertion_point(field_list:ROC.tpr)
  return _internal_tpr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::_internal_mutable_tpr() {
  return &tpr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::mutable_tpr() {
  // @@protoc_insertion_point(field_mutable_list:ROC.tpr)
  return _internal_mutable_tpr();
}

// repeated float thresholds = 3 [packed = true];
inline int ROC::_internal_thresholds_size() const {
  return thresholds_.size();
}
inline int ROC::thresholds_size() const {
  return _internal_thresholds_size();
}
inline void ROC::clear_thresholds() {
  thresholds_.Clear();
}
inline float ROC::_internal_thresholds(int index) const {
  return thresholds_.Get(index);
}
inline float ROC::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:ROC.thresholds)
  return _internal_thresholds(index);
}
inline void ROC::set_thresholds(int index, float value) {
  thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:ROC.thresholds)
}
inline void ROC::_internal_add_thresholds(float value) {
  thresholds_.Add(value);
}
inline void ROC::add_thresholds(float value) {
  _internal_add_thresholds(value);
  // @@protoc_insertion_point(field_add:ROC.thresholds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::_internal_thresholds() const {
  return thresholds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::thresholds() const {
  // @@protoc_insertion_point(field_list:ROC.thresholds)
  return _internal_thresholds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::_internal_mutable_thresholds() {
  return &thresholds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:ROC.thresholds)
  return _internal_mutable_thresholds();
}

// repeated float fpr_per_image = 4 [packed = true];
inline int ROC::_internal_fpr_per_image_size() const {
  return fpr_per_image_.size();
}
inline int ROC::fpr_per_image_size() const {
  return _internal_fpr_per_image_size();
}
inline void ROC::clear_fpr_per_image() {
  fpr_per_image_.Clear();
}
inline float ROC::_internal_fpr_per_image(int index) const {
  return fpr_per_image_.Get(index);
}
inline float ROC::fpr_per_image(int index) const {
  // @@protoc_insertion_point(field_get:ROC.fpr_per_image)
  return _internal_fpr_per_image(index);
}
inline void ROC::set_fpr_per_image(int index, float value) {
  fpr_per_image_.Set(index, value);
  // @@protoc_insertion_point(field_set:ROC.fpr_per_image)
}
inline void ROC::_internal_add_fpr_per_image(float value) {
  fpr_per_image_.Add(value);
}
inline void ROC::add_fpr_per_image(float value) {
  _internal_add_fpr_per_image(value);
  // @@protoc_insertion_point(field_add:ROC.fpr_per_image)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::_internal_fpr_per_image() const {
  return fpr_per_image_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::fpr_per_image() const {
  // @@protoc_insertion_point(field_list:ROC.fpr_per_image)
  return _internal_fpr_per_image();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::_internal_mutable_fpr_per_image() {
  return &fpr_per_image_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::mutable_fpr_per_image() {
  // @@protoc_insertion_point(field_mutable_list:ROC.fpr_per_image)
  return _internal_mutable_fpr_per_image();
}

// repeated float fpr_per_object = 5 [packed = true];
inline int ROC::_internal_fpr_per_object_size() const {
  return fpr_per_object_.size();
}
inline int ROC::fpr_per_object_size() const {
  return _internal_fpr_per_object_size();
}
inline void ROC::clear_fpr_per_object() {
  fpr_per_object_.Clear();
}
inline float ROC::_internal_fpr_per_object(int index) const {
  return fpr_per_object_.Get(index);
}
inline float ROC::fpr_per_object(int index) const {
  // @@protoc_insertion_point(field_get:ROC.fpr_per_object)
  return _internal_fpr_per_object(index);
}
inline void ROC::set_fpr_per_object(int index, float value) {
  fpr_per_object_.Set(index, value);
  // @@protoc_insertion_point(field_set:ROC.fpr_per_object)
}
inline void ROC::_internal_add_fpr_per_object(float value) {
  fpr_per_object_.Add(value);
}
inline void ROC::add_fpr_per_object(float value) {
  _internal_add_fpr_per_object(value);
  // @@protoc_insertion_point(field_add:ROC.fpr_per_object)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::_internal_fpr_per_object() const {
  return fpr_per_object_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::fpr_per_object() const {
  // @@protoc_insertion_point(field_list:ROC.fpr_per_object)
  return _internal_fpr_per_object();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::_internal_mutable_fpr_per_object() {
  return &fpr_per_object_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::mutable_fpr_per_object() {
  // @@protoc_insertion_point(field_mutable_list:ROC.fpr_per_object)
  return _internal_mutable_fpr_per_object();
}

// -------------------------------------------------------------------

// PrecisionRecallCurve

// repeated float recall = 1 [packed = true];
inline int PrecisionRecallCurve::_internal_recall_size() const {
  return recall_.size();
}
inline int PrecisionRecallCurve::recall_size() const {
  return _internal_recall_size();
}
inline void PrecisionRecallCurve::clear_recall() {
  recall_.Clear();
}
inline float PrecisionRecallCurve::_internal_recall(int index) const {
  return recall_.Get(index);
}
inline float PrecisionRecallCurve::recall(int index) const {
  // @@protoc_insertion_point(field_get:PrecisionRecallCurve.recall)
  return _internal_recall(index);
}
inline void PrecisionRecallCurve::set_recall(int index, float value) {
  recall_.Set(index, value);
  // @@protoc_insertion_point(field_set:PrecisionRecallCurve.recall)
}
inline void PrecisionRecallCurve::_internal_add_recall(float value) {
  recall_.Add(value);
}
inline void PrecisionRecallCurve::add_recall(float value) {
  _internal_add_recall(value);
  // @@protoc_insertion_point(field_add:PrecisionRecallCurve.recall)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::_internal_recall() const {
  return recall_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::recall() const {
  // @@protoc_insertion_point(field_list:PrecisionRecallCurve.recall)
  return _internal_recall();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::_internal_mutable_recall() {
  return &recall_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::mutable_recall() {
  // @@protoc_insertion_point(field_mutable_list:PrecisionRecallCurve.recall)
  return _internal_mutable_recall();
}

// repeated float precision = 2 [packed = true];
inline int PrecisionRecallCurve::_internal_precision_size() const {
  return precision_.size();
}
inline int PrecisionRecallCurve::precision_size() const {
  return _internal_precision_size();
}
inline void PrecisionRecallCurve::clear_precision() {
  precision_.Clear();
}
inline float PrecisionRecallCurve::_internal_precision(int index) const {
  return precision_.Get(index);
}
inline float PrecisionRecallCurve::precision(int index) const {
  // @@protoc_insertion_point(field_get:PrecisionRecallCurve.precision)
  return _internal_precision(index);
}
inline void PrecisionRecallCurve::set_precision(int index, float value) {
  precision_.Set(index, value);
  // @@protoc_insertion_point(field_set:PrecisionRecallCurve.precision)
}
inline void PrecisionRecallCurve::_internal_add_precision(float value) {
  precision_.Add(value);
}
inline void PrecisionRecallCurve::add_precision(float value) {
  _internal_add_precision(value);
  // @@protoc_insertion_point(field_add:PrecisionRecallCurve.precision)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::_internal_precision() const {
  return precision_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::precision() const {
  // @@protoc_insertion_point(field_list:PrecisionRecallCurve.precision)
  return _internal_precision();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::_internal_mutable_precision() {
  return &precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::mutable_precision() {
  // @@protoc_insertion_point(field_mutable_list:PrecisionRecallCurve.precision)
  return _internal_mutable_precision();
}

// repeated float thresholds = 3 [packed = true];
inline int PrecisionRecallCurve::_internal_thresholds_size() const {
  return thresholds_.size();
}
inline int PrecisionRecallCurve::thresholds_size() const {
  return _internal_thresholds_size();
}
inline void PrecisionRecallCurve::clear_thresholds() {
  thresholds_.Clear();
}
inline float PrecisionRecallCurve::_internal_thresholds(int index) const {
  return thresholds_.Get(index);
}
inline float PrecisionRecallCurve::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:PrecisionRecallCurve.thresholds)
  return _internal_thresholds(index);
}
inline void PrecisionRecallCurve::set_thresholds(int index, float value) {
  thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:PrecisionRecallCurve.thresholds)
}
inline void PrecisionRecallCurve::_internal_add_thresholds(float value) {
  thresholds_.Add(value);
}
inline void PrecisionRecallCurve::add_thresholds(float value) {
  _internal_add_thresholds(value);
  // @@protoc_insertion_point(field_add:PrecisionRecallCurve.thresholds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::_internal_thresholds() const {
  return thresholds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::thresholds() const {
  // @@protoc_insertion_point(field_list:PrecisionRecallCurve.thresholds)
  return _internal_thresholds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::_internal_mutable_thresholds() {
  return &thresholds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:PrecisionRecallCurve.thresholds)
  return _internal_mutable_thresholds();
}

// -------------------------------------------------------------------

// BinaryMetrics

// int32 num_pos = 1;
inline void BinaryMetrics::clear_num_pos() {
  num_pos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinaryMetrics::_internal_num_pos() const {
  return num_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinaryMetrics::num_pos() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.num_pos)
  return _internal_num_pos();
}
inline void BinaryMetrics::_internal_set_num_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_pos_ = value;
}
inline void BinaryMetrics::set_num_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_pos(value);
  // @@protoc_insertion_point(field_set:BinaryMetrics.num_pos)
}

// int32 num_neg = 2;
inline void BinaryMetrics::clear_num_neg() {
  num_neg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinaryMetrics::_internal_num_neg() const {
  return num_neg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinaryMetrics::num_neg() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.num_neg)
  return _internal_num_neg();
}
inline void BinaryMetrics::_internal_set_num_neg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_neg_ = value;
}
inline void BinaryMetrics::set_num_neg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_neg(value);
  // @@protoc_insertion_point(field_set:BinaryMetrics.num_neg)
}

// int32 num_examples = 3;
inline void BinaryMetrics::clear_num_examples() {
  num_examples_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinaryMetrics::_internal_num_examples() const {
  return num_examples_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinaryMetrics::num_examples() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.num_examples)
  return _internal_num_examples();
}
inline void BinaryMetrics::_internal_set_num_examples(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_examples_ = value;
}
inline void BinaryMetrics::set_num_examples(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_examples(value);
  // @@protoc_insertion_point(field_set:BinaryMetrics.num_examples)
}

// float roc_auc = 4;
inline void BinaryMetrics::clear_roc_auc() {
  roc_auc_ = 0;
}
inline float BinaryMetrics::_internal_roc_auc() const {
  return roc_auc_;
}
inline float BinaryMetrics::roc_auc() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.roc_auc)
  return _internal_roc_auc();
}
inline void BinaryMetrics::_internal_set_roc_auc(float value) {
  
  roc_auc_ = value;
}
inline void BinaryMetrics::set_roc_auc(float value) {
  _internal_set_roc_auc(value);
  // @@protoc_insertion_point(field_set:BinaryMetrics.roc_auc)
}

// float f1 = 5;
inline void BinaryMetrics::clear_f1() {
  f1_ = 0;
}
inline float BinaryMetrics::_internal_f1() const {
  return f1_;
}
inline float BinaryMetrics::f1() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.f1)
  return _internal_f1();
}
inline void BinaryMetrics::_internal_set_f1(float value) {
  
  f1_ = value;
}
inline void BinaryMetrics::set_f1(float value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:BinaryMetrics.f1)
}

// float matthews_corrcoef = 6;
inline void BinaryMetrics::clear_matthews_corrcoef() {
  matthews_corrcoef_ = 0;
}
inline float BinaryMetrics::_internal_matthews_corrcoef() const {
  return matthews_corrcoef_;
}
inline float BinaryMetrics::matthews_corrcoef() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.matthews_corrcoef)
  return _internal_matthews_corrcoef();
}
inline void BinaryMetrics::_internal_set_matthews_corrcoef(float value) {
  
  matthews_corrcoef_ = value;
}
inline void BinaryMetrics::set_matthews_corrcoef(float value) {
  _internal_set_matthews_corrcoef(value);
  // @@protoc_insertion_point(field_set:BinaryMetrics.matthews_corrcoef)
}

// float brier_score = 7;
inline void BinaryMetrics::clear_brier_score() {
  brier_score_ = 0;
}
inline float BinaryMetrics::_internal_brier_score() const {
  return brier_score_;
}
inline float BinaryMetrics::brier_score() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.brier_score)
  return _internal_brier_score();
}
inline void BinaryMetrics::_internal_set_brier_score(float value) {
  
  brier_score_ = value;
}
inline void BinaryMetrics::set_brier_score(float value) {
  _internal_set_brier_score(value);
  // @@protoc_insertion_point(field_set:BinaryMetrics.brier_score)
}

// .ROC roc_curve = 8;
inline bool BinaryMetrics::_internal_has_roc_curve() const {
  return this != internal_default_instance() && roc_curve_ != nullptr;
}
inline bool BinaryMetrics::has_roc_curve() const {
  return _internal_has_roc_curve();
}
inline void BinaryMetrics::clear_roc_curve() {
  if (GetArena() == nullptr && roc_curve_ != nullptr) {
    delete roc_curve_;
  }
  roc_curve_ = nullptr;
}
inline const ::ROC& BinaryMetrics::_internal_roc_curve() const {
  const ::ROC* p = roc_curve_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ROC*>(
      &::_ROC_default_instance_);
}
inline const ::ROC& BinaryMetrics::roc_curve() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.roc_curve)
  return _internal_roc_curve();
}
inline void BinaryMetrics::unsafe_arena_set_allocated_roc_curve(
    ::ROC* roc_curve) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roc_curve_);
  }
  roc_curve_ = roc_curve;
  if (roc_curve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BinaryMetrics.roc_curve)
}
inline ::ROC* BinaryMetrics::release_roc_curve() {
  
  ::ROC* temp = roc_curve_;
  roc_curve_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ROC* BinaryMetrics::unsafe_arena_release_roc_curve() {
  // @@protoc_insertion_point(field_release:BinaryMetrics.roc_curve)
  
  ::ROC* temp = roc_curve_;
  roc_curve_ = nullptr;
  return temp;
}
inline ::ROC* BinaryMetrics::_internal_mutable_roc_curve() {
  
  if (roc_curve_ == nullptr) {
    auto* p = CreateMaybeMessage<::ROC>(GetArena());
    roc_curve_ = p;
  }
  return roc_curve_;
}
inline ::ROC* BinaryMetrics::mutable_roc_curve() {
  // @@protoc_insertion_point(field_mutable:BinaryMetrics.roc_curve)
  return _internal_mutable_roc_curve();
}
inline void BinaryMetrics::set_allocated_roc_curve(::ROC* roc_curve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roc_curve_;
  }
  if (roc_curve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roc_curve);
    if (message_arena != submessage_arena) {
      roc_curve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roc_curve, submessage_arena);
    }
    
  } else {
    
  }
  roc_curve_ = roc_curve;
  // @@protoc_insertion_point(field_set_allocated:BinaryMetrics.roc_curve)
}

// string aiid = 9;
inline void BinaryMetrics::clear_aiid() {
  aiid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BinaryMetrics::aiid() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.aiid)
  return _internal_aiid();
}
inline void BinaryMetrics::set_aiid(const std::string& value) {
  _internal_set_aiid(value);
  // @@protoc_insertion_point(field_set:BinaryMetrics.aiid)
}
inline std::string* BinaryMetrics::mutable_aiid() {
  // @@protoc_insertion_point(field_mutable:BinaryMetrics.aiid)
  return _internal_mutable_aiid();
}
inline const std::string& BinaryMetrics::_internal_aiid() const {
  return aiid_.Get();
}
inline void BinaryMetrics::_internal_set_aiid(const std::string& value) {
  
  aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BinaryMetrics::set_aiid(std::string&& value) {
  
  aiid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BinaryMetrics.aiid)
}
inline void BinaryMetrics::set_aiid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BinaryMetrics.aiid)
}
inline void BinaryMetrics::set_aiid(const char* value,
    size_t size) {
  
  aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BinaryMetrics.aiid)
}
inline std::string* BinaryMetrics::_internal_mutable_aiid() {
  
  return aiid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BinaryMetrics::release_aiid() {
  // @@protoc_insertion_point(field_release:BinaryMetrics.aiid)
  return aiid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BinaryMetrics::set_allocated_aiid(std::string* aiid) {
  if (aiid != nullptr) {
    
  } else {
    
  }
  aiid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aiid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BinaryMetrics.aiid)
}

// float precision = 10;
inline void BinaryMetrics::clear_precision() {
  precision_ = 0;
}
inline float BinaryMetrics::_internal_precision() const {
  return precision_;
}
inline float BinaryMetrics::precision() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.precision)
  return _internal_precision();
}
inline void BinaryMetrics::_internal_set_precision(float value) {
  
  precision_ = value;
}
inline void BinaryMetrics::set_precision(float value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:BinaryMetrics.precision)
}

// float recall = 11;
inline void BinaryMetrics::clear_recall() {
  recall_ = 0;
}
inline float BinaryMetrics::_internal_recall() const {
  return recall_;
}
inline float BinaryMetrics::recall() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.recall)
  return _internal_recall();
}
inline void BinaryMetrics::_internal_set_recall(float value) {
  
  recall_ = value;
}
inline void BinaryMetrics::set_recall(float value) {
  _internal_set_recall(value);
  // @@protoc_insertion_point(field_set:BinaryMetrics.recall)
}

// .PrecisionRecallCurve precision_recall_curve = 12;
inline bool BinaryMetrics::_internal_has_precision_recall_curve() const {
  return this != internal_default_instance() && precision_recall_curve_ != nullptr;
}
inline bool BinaryMetrics::has_precision_recall_curve() const {
  return _internal_has_precision_recall_curve();
}
inline void BinaryMetrics::clear_precision_recall_curve() {
  if (GetArena() == nullptr && precision_recall_curve_ != nullptr) {
    delete precision_recall_curve_;
  }
  precision_recall_curve_ = nullptr;
}
inline const ::PrecisionRecallCurve& BinaryMetrics::_internal_precision_recall_curve() const {
  const ::PrecisionRecallCurve* p = precision_recall_curve_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PrecisionRecallCurve*>(
      &::_PrecisionRecallCurve_default_instance_);
}
inline const ::PrecisionRecallCurve& BinaryMetrics::precision_recall_curve() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.precision_recall_curve)
  return _internal_precision_recall_curve();
}
inline void BinaryMetrics::unsafe_arena_set_allocated_precision_recall_curve(
    ::PrecisionRecallCurve* precision_recall_curve) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(precision_recall_curve_);
  }
  precision_recall_curve_ = precision_recall_curve;
  if (precision_recall_curve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BinaryMetrics.precision_recall_curve)
}
inline ::PrecisionRecallCurve* BinaryMetrics::release_precision_recall_curve() {
  
  ::PrecisionRecallCurve* temp = precision_recall_curve_;
  precision_recall_curve_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PrecisionRecallCurve* BinaryMetrics::unsafe_arena_release_precision_recall_curve() {
  // @@protoc_insertion_point(field_release:BinaryMetrics.precision_recall_curve)
  
  ::PrecisionRecallCurve* temp = precision_recall_curve_;
  precision_recall_curve_ = nullptr;
  return temp;
}
inline ::PrecisionRecallCurve* BinaryMetrics::_internal_mutable_precision_recall_curve() {
  
  if (precision_recall_curve_ == nullptr) {
    auto* p = CreateMaybeMessage<::PrecisionRecallCurve>(GetArena());
    precision_recall_curve_ = p;
  }
  return precision_recall_curve_;
}
inline ::PrecisionRecallCurve* BinaryMetrics::mutable_precision_recall_curve() {
  // @@protoc_insertion_point(field_mutable:BinaryMetrics.precision_recall_curve)
  return _internal_mutable_precision_recall_curve();
}
inline void BinaryMetrics::set_allocated_precision_recall_curve(::PrecisionRecallCurve* precision_recall_curve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete precision_recall_curve_;
  }
  if (precision_recall_curve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(precision_recall_curve);
    if (message_arena != submessage_arena) {
      precision_recall_curve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, precision_recall_curve, submessage_arena);
    }
    
  } else {
    
  }
  precision_recall_curve_ = precision_recall_curve;
  // @@protoc_insertion_point(field_set_allocated:BinaryMetrics.precision_recall_curve)
}

// float avg_precision = 13;
inline void BinaryMetrics::clear_avg_precision() {
  avg_precision_ = 0;
}
inline float BinaryMetrics::_internal_avg_precision() const {
  return avg_precision_;
}
inline float BinaryMetrics::avg_precision() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.avg_precision)
  return _internal_avg_precision();
}
inline void BinaryMetrics::_internal_set_avg_precision(float value) {
  
  avg_precision_ = value;
}
inline void BinaryMetrics::set_avg_precision(float value) {
  _internal_set_avg_precision(value);
  // @@protoc_insertion_point(field_set:BinaryMetrics.avg_precision)
}

// string area_range_name = 14;
inline void BinaryMetrics::clear_area_range_name() {
  area_range_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BinaryMetrics::area_range_name() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.area_range_name)
  return _internal_area_range_name();
}
inline void BinaryMetrics::set_area_range_name(const std::string& value) {
  _internal_set_area_range_name(value);
  // @@protoc_insertion_point(field_set:BinaryMetrics.area_range_name)
}
inline std::string* BinaryMetrics::mutable_area_range_name() {
  // @@protoc_insertion_point(field_mutable:BinaryMetrics.area_range_name)
  return _internal_mutable_area_range_name();
}
inline const std::string& BinaryMetrics::_internal_area_range_name() const {
  return area_range_name_.Get();
}
inline void BinaryMetrics::_internal_set_area_range_name(const std::string& value) {
  
  area_range_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BinaryMetrics::set_area_range_name(std::string&& value) {
  
  area_range_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BinaryMetrics.area_range_name)
}
inline void BinaryMetrics::set_area_range_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  area_range_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BinaryMetrics.area_range_name)
}
inline void BinaryMetrics::set_area_range_name(const char* value,
    size_t size) {
  
  area_range_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BinaryMetrics.area_range_name)
}
inline std::string* BinaryMetrics::_internal_mutable_area_range_name() {
  
  return area_range_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BinaryMetrics::release_area_range_name() {
  // @@protoc_insertion_point(field_release:BinaryMetrics.area_range_name)
  return area_range_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BinaryMetrics::set_allocated_area_range_name(std::string* area_range_name) {
  if (area_range_name != nullptr) {
    
  } else {
    
  }
  area_range_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), area_range_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BinaryMetrics.area_range_name)
}

// double area_min = 15;
inline void BinaryMetrics::clear_area_min() {
  area_min_ = 0;
}
inline double BinaryMetrics::_internal_area_min() const {
  return area_min_;
}
inline double BinaryMetrics::area_min() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.area_min)
  return _internal_area_min();
}
inline void BinaryMetrics::_internal_set_area_min(double value) {
  
  area_min_ = value;
}
inline void BinaryMetrics::set_area_min(double value) {
  _internal_set_area_min(value);
  // @@protoc_insertion_point(field_set:BinaryMetrics.area_min)
}

// double area_max = 16;
inline void BinaryMetrics::clear_area_max() {
  area_max_ = 0;
}
inline double BinaryMetrics::_internal_area_max() const {
  return area_max_;
}
inline double BinaryMetrics::area_max() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.area_max)
  return _internal_area_max();
}
inline void BinaryMetrics::_internal_set_area_max(double value) {
  
  area_max_ = value;
}
inline void BinaryMetrics::set_area_max(double value) {
  _internal_set_area_max(value);
  // @@protoc_insertion_point(field_set:BinaryMetrics.area_max)
}

// float iou = 17;
inline void BinaryMetrics::clear_iou() {
  iou_ = 0;
}
inline float BinaryMetrics::_internal_iou() const {
  return iou_;
}
inline float BinaryMetrics::iou() const {
  // @@protoc_insertion_point(field_get:BinaryMetrics.iou)
  return _internal_iou();
}
inline void BinaryMetrics::_internal_set_iou(float value) {
  
  iou_ = value;
}
inline void BinaryMetrics::set_iou(float value) {
  _internal_set_iou(value);
  // @@protoc_insertion_point(field_set:BinaryMetrics.iou)
}

// -------------------------------------------------------------------

// MulticlassMetrics

// float top1 = 1 [deprecated = true];
inline void MulticlassMetrics::clear_top1() {
  top1_ = 0;
}
inline float MulticlassMetrics::_internal_top1() const {
  return top1_;
}
inline float MulticlassMetrics::top1() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.top1)
  return _internal_top1();
}
inline void MulticlassMetrics::_internal_set_top1(float value) {
  
  top1_ = value;
}
inline void MulticlassMetrics::set_top1(float value) {
  _internal_set_top1(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.top1)
}

// float top5 = 2 [deprecated = true];
inline void MulticlassMetrics::clear_top5() {
  top5_ = 0;
}
inline float MulticlassMetrics::_internal_top5() const {
  return top5_;
}
inline float MulticlassMetrics::top5() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.top5)
  return _internal_top5();
}
inline void MulticlassMetrics::_internal_set_top5(float value) {
  
  top5_ = value;
}
inline void MulticlassMetrics::set_top5(float value) {
  _internal_set_top5(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.top5)
}

// float macro_avg_roc_auc = 3;
inline void MulticlassMetrics::clear_macro_avg_roc_auc() {
  macro_avg_roc_auc_ = 0;
}
inline float MulticlassMetrics::_internal_macro_avg_roc_auc() const {
  return macro_avg_roc_auc_;
}
inline float MulticlassMetrics::macro_avg_roc_auc() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.macro_avg_roc_auc)
  return _internal_macro_avg_roc_auc();
}
inline void MulticlassMetrics::_internal_set_macro_avg_roc_auc(float value) {
  
  macro_avg_roc_auc_ = value;
}
inline void MulticlassMetrics::set_macro_avg_roc_auc(float value) {
  _internal_set_macro_avg_roc_auc(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.macro_avg_roc_auc)
}

// float macro_std_roc_auc = 4;
inline void MulticlassMetrics::clear_macro_std_roc_auc() {
  macro_std_roc_auc_ = 0;
}
inline float MulticlassMetrics::_internal_macro_std_roc_auc() const {
  return macro_std_roc_auc_;
}
inline float MulticlassMetrics::macro_std_roc_auc() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.macro_std_roc_auc)
  return _internal_macro_std_roc_auc();
}
inline void MulticlassMetrics::_internal_set_macro_std_roc_auc(float value) {
  
  macro_std_roc_auc_ = value;
}
inline void MulticlassMetrics::set_macro_std_roc_auc(float value) {
  _internal_set_macro_std_roc_auc(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.macro_std_roc_auc)
}

// float macro_avg_f1 = 5;
inline void MulticlassMetrics::clear_macro_avg_f1() {
  macro_avg_f1_ = 0;
}
inline float MulticlassMetrics::_internal_macro_avg_f1() const {
  return macro_avg_f1_;
}
inline float MulticlassMetrics::macro_avg_f1() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.macro_avg_f1)
  return _internal_macro_avg_f1();
}
inline void MulticlassMetrics::_internal_set_macro_avg_f1(float value) {
  
  macro_avg_f1_ = value;
}
inline void MulticlassMetrics::set_macro_avg_f1(float value) {
  _internal_set_macro_avg_f1(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.macro_avg_f1)
}

// float macro_std_f1 = 6;
inline void MulticlassMetrics::clear_macro_std_f1() {
  macro_std_f1_ = 0;
}
inline float MulticlassMetrics::_internal_macro_std_f1() const {
  return macro_std_f1_;
}
inline float MulticlassMetrics::macro_std_f1() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.macro_std_f1)
  return _internal_macro_std_f1();
}
inline void MulticlassMetrics::_internal_set_macro_std_f1(float value) {
  
  macro_std_f1_ = value;
}
inline void MulticlassMetrics::set_macro_std_f1(float value) {
  _internal_set_macro_std_f1(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.macro_std_f1)
}

// int32 num_classes = 7;
inline void MulticlassMetrics::clear_num_classes() {
  num_classes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MulticlassMetrics::_internal_num_classes() const {
  return num_classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MulticlassMetrics::num_classes() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.num_classes)
  return _internal_num_classes();
}
inline void MulticlassMetrics::_internal_set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_classes_ = value;
}
inline void MulticlassMetrics::set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.num_classes)
}

// .ConfusionMatrix confusion_matrix = 8;
inline bool MulticlassMetrics::_internal_has_confusion_matrix() const {
  return this != internal_default_instance() && confusion_matrix_ != nullptr;
}
inline bool MulticlassMetrics::has_confusion_matrix() const {
  return _internal_has_confusion_matrix();
}
inline void MulticlassMetrics::clear_confusion_matrix() {
  if (GetArena() == nullptr && confusion_matrix_ != nullptr) {
    delete confusion_matrix_;
  }
  confusion_matrix_ = nullptr;
}
inline const ::ConfusionMatrix& MulticlassMetrics::_internal_confusion_matrix() const {
  const ::ConfusionMatrix* p = confusion_matrix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ConfusionMatrix*>(
      &::_ConfusionMatrix_default_instance_);
}
inline const ::ConfusionMatrix& MulticlassMetrics::confusion_matrix() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.confusion_matrix)
  return _internal_confusion_matrix();
}
inline void MulticlassMetrics::unsafe_arena_set_allocated_confusion_matrix(
    ::ConfusionMatrix* confusion_matrix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(confusion_matrix_);
  }
  confusion_matrix_ = confusion_matrix;
  if (confusion_matrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MulticlassMetrics.confusion_matrix)
}
inline ::ConfusionMatrix* MulticlassMetrics::release_confusion_matrix() {
  
  ::ConfusionMatrix* temp = confusion_matrix_;
  confusion_matrix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ConfusionMatrix* MulticlassMetrics::unsafe_arena_release_confusion_matrix() {
  // @@protoc_insertion_point(field_release:MulticlassMetrics.confusion_matrix)
  
  ::ConfusionMatrix* temp = confusion_matrix_;
  confusion_matrix_ = nullptr;
  return temp;
}
inline ::ConfusionMatrix* MulticlassMetrics::_internal_mutable_confusion_matrix() {
  
  if (confusion_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConfusionMatrix>(GetArena());
    confusion_matrix_ = p;
  }
  return confusion_matrix_;
}
inline ::ConfusionMatrix* MulticlassMetrics::mutable_confusion_matrix() {
  // @@protoc_insertion_point(field_mutable:MulticlassMetrics.confusion_matrix)
  return _internal_mutable_confusion_matrix();
}
inline void MulticlassMetrics::set_allocated_confusion_matrix(::ConfusionMatrix* confusion_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete confusion_matrix_;
  }
  if (confusion_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(confusion_matrix);
    if (message_arena != submessage_arena) {
      confusion_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confusion_matrix, submessage_arena);
    }
    
  } else {
    
  }
  confusion_matrix_ = confusion_matrix;
  // @@protoc_insertion_point(field_set_allocated:MulticlassMetrics.confusion_matrix)
}

// bool tested_on_outside_negatives = 9;
inline void MulticlassMetrics::clear_tested_on_outside_negatives() {
  tested_on_outside_negatives_ = false;
}
inline bool MulticlassMetrics::_internal_tested_on_outside_negatives() const {
  return tested_on_outside_negatives_;
}
inline bool MulticlassMetrics::tested_on_outside_negatives() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.tested_on_outside_negatives)
  return _internal_tested_on_outside_negatives();
}
inline void MulticlassMetrics::_internal_set_tested_on_outside_negatives(bool value) {
  
  tested_on_outside_negatives_ = value;
}
inline void MulticlassMetrics::set_tested_on_outside_negatives(bool value) {
  _internal_set_tested_on_outside_negatives(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.tested_on_outside_negatives)
}

// repeated .BinaryMetrics binary_metrics = 10;
inline int MulticlassMetrics::_internal_binary_metrics_size() const {
  return binary_metrics_.size();
}
inline int MulticlassMetrics::binary_metrics_size() const {
  return _internal_binary_metrics_size();
}
inline void MulticlassMetrics::clear_binary_metrics() {
  binary_metrics_.Clear();
}
inline ::BinaryMetrics* MulticlassMetrics::mutable_binary_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:MulticlassMetrics.binary_metrics)
  return binary_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BinaryMetrics >*
MulticlassMetrics::mutable_binary_metrics() {
  // @@protoc_insertion_point(field_mutable_list:MulticlassMetrics.binary_metrics)
  return &binary_metrics_;
}
inline const ::BinaryMetrics& MulticlassMetrics::_internal_binary_metrics(int index) const {
  return binary_metrics_.Get(index);
}
inline const ::BinaryMetrics& MulticlassMetrics::binary_metrics(int index) const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.binary_metrics)
  return _internal_binary_metrics(index);
}
inline ::BinaryMetrics* MulticlassMetrics::_internal_add_binary_metrics() {
  return binary_metrics_.Add();
}
inline ::BinaryMetrics* MulticlassMetrics::add_binary_metrics() {
  // @@protoc_insertion_point(field_add:MulticlassMetrics.binary_metrics)
  return _internal_add_binary_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BinaryMetrics >&
MulticlassMetrics::binary_metrics() const {
  // @@protoc_insertion_point(field_list:MulticlassMetrics.binary_metrics)
  return binary_metrics_;
}

// .DataBatch test_ground_truth = 11;
inline bool MulticlassMetrics::_internal_has_test_ground_truth() const {
  return this != internal_default_instance() && test_ground_truth_ != nullptr;
}
inline bool MulticlassMetrics::has_test_ground_truth() const {
  return _internal_has_test_ground_truth();
}
inline const ::DataBatch& MulticlassMetrics::_internal_test_ground_truth() const {
  const ::DataBatch* p = test_ground_truth_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& MulticlassMetrics::test_ground_truth() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.test_ground_truth)
  return _internal_test_ground_truth();
}
inline void MulticlassMetrics::unsafe_arena_set_allocated_test_ground_truth(
    ::DataBatch* test_ground_truth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_ground_truth_);
  }
  test_ground_truth_ = test_ground_truth;
  if (test_ground_truth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MulticlassMetrics.test_ground_truth)
}
inline ::DataBatch* MulticlassMetrics::release_test_ground_truth() {
  
  ::DataBatch* temp = test_ground_truth_;
  test_ground_truth_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* MulticlassMetrics::unsafe_arena_release_test_ground_truth() {
  // @@protoc_insertion_point(field_release:MulticlassMetrics.test_ground_truth)
  
  ::DataBatch* temp = test_ground_truth_;
  test_ground_truth_ = nullptr;
  return temp;
}
inline ::DataBatch* MulticlassMetrics::_internal_mutable_test_ground_truth() {
  
  if (test_ground_truth_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    test_ground_truth_ = p;
  }
  return test_ground_truth_;
}
inline ::DataBatch* MulticlassMetrics::mutable_test_ground_truth() {
  // @@protoc_insertion_point(field_mutable:MulticlassMetrics.test_ground_truth)
  return _internal_mutable_test_ground_truth();
}
inline void MulticlassMetrics::set_allocated_test_ground_truth(::DataBatch* test_ground_truth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_ground_truth_);
  }
  if (test_ground_truth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_ground_truth)->GetArena();
    if (message_arena != submessage_arena) {
      test_ground_truth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_ground_truth, submessage_arena);
    }
    
  } else {
    
  }
  test_ground_truth_ = test_ground_truth;
  // @@protoc_insertion_point(field_set_allocated:MulticlassMetrics.test_ground_truth)
}

// .DataBatch test_predictions = 12;
inline bool MulticlassMetrics::_internal_has_test_predictions() const {
  return this != internal_default_instance() && test_predictions_ != nullptr;
}
inline bool MulticlassMetrics::has_test_predictions() const {
  return _internal_has_test_predictions();
}
inline const ::DataBatch& MulticlassMetrics::_internal_test_predictions() const {
  const ::DataBatch* p = test_predictions_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& MulticlassMetrics::test_predictions() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.test_predictions)
  return _internal_test_predictions();
}
inline void MulticlassMetrics::unsafe_arena_set_allocated_test_predictions(
    ::DataBatch* test_predictions) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_predictions_);
  }
  test_predictions_ = test_predictions;
  if (test_predictions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MulticlassMetrics.test_predictions)
}
inline ::DataBatch* MulticlassMetrics::release_test_predictions() {
  
  ::DataBatch* temp = test_predictions_;
  test_predictions_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* MulticlassMetrics::unsafe_arena_release_test_predictions() {
  // @@protoc_insertion_point(field_release:MulticlassMetrics.test_predictions)
  
  ::DataBatch* temp = test_predictions_;
  test_predictions_ = nullptr;
  return temp;
}
inline ::DataBatch* MulticlassMetrics::_internal_mutable_test_predictions() {
  
  if (test_predictions_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    test_predictions_ = p;
  }
  return test_predictions_;
}
inline ::DataBatch* MulticlassMetrics::mutable_test_predictions() {
  // @@protoc_insertion_point(field_mutable:MulticlassMetrics.test_predictions)
  return _internal_mutable_test_predictions();
}
inline void MulticlassMetrics::set_allocated_test_predictions(::DataBatch* test_predictions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_predictions_);
  }
  if (test_predictions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_predictions)->GetArena();
    if (message_arena != submessage_arena) {
      test_predictions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_predictions, submessage_arena);
    }
    
  } else {
    
  }
  test_predictions_ = test_predictions;
  // @@protoc_insertion_point(field_set_allocated:MulticlassMetrics.test_predictions)
}

// .CooccurrenceMatrix cooccurrence_matrix = 13;
inline bool MulticlassMetrics::_internal_has_cooccurrence_matrix() const {
  return this != internal_default_instance() && cooccurrence_matrix_ != nullptr;
}
inline bool MulticlassMetrics::has_cooccurrence_matrix() const {
  return _internal_has_cooccurrence_matrix();
}
inline void MulticlassMetrics::clear_cooccurrence_matrix() {
  if (GetArena() == nullptr && cooccurrence_matrix_ != nullptr) {
    delete cooccurrence_matrix_;
  }
  cooccurrence_matrix_ = nullptr;
}
inline const ::CooccurrenceMatrix& MulticlassMetrics::_internal_cooccurrence_matrix() const {
  const ::CooccurrenceMatrix* p = cooccurrence_matrix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CooccurrenceMatrix*>(
      &::_CooccurrenceMatrix_default_instance_);
}
inline const ::CooccurrenceMatrix& MulticlassMetrics::cooccurrence_matrix() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.cooccurrence_matrix)
  return _internal_cooccurrence_matrix();
}
inline void MulticlassMetrics::unsafe_arena_set_allocated_cooccurrence_matrix(
    ::CooccurrenceMatrix* cooccurrence_matrix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cooccurrence_matrix_);
  }
  cooccurrence_matrix_ = cooccurrence_matrix;
  if (cooccurrence_matrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MulticlassMetrics.cooccurrence_matrix)
}
inline ::CooccurrenceMatrix* MulticlassMetrics::release_cooccurrence_matrix() {
  
  ::CooccurrenceMatrix* temp = cooccurrence_matrix_;
  cooccurrence_matrix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CooccurrenceMatrix* MulticlassMetrics::unsafe_arena_release_cooccurrence_matrix() {
  // @@protoc_insertion_point(field_release:MulticlassMetrics.cooccurrence_matrix)
  
  ::CooccurrenceMatrix* temp = cooccurrence_matrix_;
  cooccurrence_matrix_ = nullptr;
  return temp;
}
inline ::CooccurrenceMatrix* MulticlassMetrics::_internal_mutable_cooccurrence_matrix() {
  
  if (cooccurrence_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::CooccurrenceMatrix>(GetArena());
    cooccurrence_matrix_ = p;
  }
  return cooccurrence_matrix_;
}
inline ::CooccurrenceMatrix* MulticlassMetrics::mutable_cooccurrence_matrix() {
  // @@protoc_insertion_point(field_mutable:MulticlassMetrics.cooccurrence_matrix)
  return _internal_mutable_cooccurrence_matrix();
}
inline void MulticlassMetrics::set_allocated_cooccurrence_matrix(::CooccurrenceMatrix* cooccurrence_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cooccurrence_matrix_;
  }
  if (cooccurrence_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cooccurrence_matrix);
    if (message_arena != submessage_arena) {
      cooccurrence_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cooccurrence_matrix, submessage_arena);
    }
    
  } else {
    
  }
  cooccurrence_matrix_ = cooccurrence_matrix;
  // @@protoc_insertion_point(field_set_allocated:MulticlassMetrics.cooccurrence_matrix)
}

// .PositiveLabelDistribution positive_label_distribution = 14;
inline bool MulticlassMetrics::_internal_has_positive_label_distribution() const {
  return this != internal_default_instance() && positive_label_distribution_ != nullptr;
}
inline bool MulticlassMetrics::has_positive_label_distribution() const {
  return _internal_has_positive_label_distribution();
}
inline void MulticlassMetrics::clear_positive_label_distribution() {
  if (GetArena() == nullptr && positive_label_distribution_ != nullptr) {
    delete positive_label_distribution_;
  }
  positive_label_distribution_ = nullptr;
}
inline const ::PositiveLabelDistribution& MulticlassMetrics::_internal_positive_label_distribution() const {
  const ::PositiveLabelDistribution* p = positive_label_distribution_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PositiveLabelDistribution*>(
      &::_PositiveLabelDistribution_default_instance_);
}
inline const ::PositiveLabelDistribution& MulticlassMetrics::positive_label_distribution() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.positive_label_distribution)
  return _internal_positive_label_distribution();
}
inline void MulticlassMetrics::unsafe_arena_set_allocated_positive_label_distribution(
    ::PositiveLabelDistribution* positive_label_distribution) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positive_label_distribution_);
  }
  positive_label_distribution_ = positive_label_distribution;
  if (positive_label_distribution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MulticlassMetrics.positive_label_distribution)
}
inline ::PositiveLabelDistribution* MulticlassMetrics::release_positive_label_distribution() {
  
  ::PositiveLabelDistribution* temp = positive_label_distribution_;
  positive_label_distribution_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PositiveLabelDistribution* MulticlassMetrics::unsafe_arena_release_positive_label_distribution() {
  // @@protoc_insertion_point(field_release:MulticlassMetrics.positive_label_distribution)
  
  ::PositiveLabelDistribution* temp = positive_label_distribution_;
  positive_label_distribution_ = nullptr;
  return temp;
}
inline ::PositiveLabelDistribution* MulticlassMetrics::_internal_mutable_positive_label_distribution() {
  
  if (positive_label_distribution_ == nullptr) {
    auto* p = CreateMaybeMessage<::PositiveLabelDistribution>(GetArena());
    positive_label_distribution_ = p;
  }
  return positive_label_distribution_;
}
inline ::PositiveLabelDistribution* MulticlassMetrics::mutable_positive_label_distribution() {
  // @@protoc_insertion_point(field_mutable:MulticlassMetrics.positive_label_distribution)
  return _internal_mutable_positive_label_distribution();
}
inline void MulticlassMetrics::set_allocated_positive_label_distribution(::PositiveLabelDistribution* positive_label_distribution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete positive_label_distribution_;
  }
  if (positive_label_distribution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(positive_label_distribution);
    if (message_arena != submessage_arena) {
      positive_label_distribution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positive_label_distribution, submessage_arena);
    }
    
  } else {
    
  }
  positive_label_distribution_ = positive_label_distribution;
  // @@protoc_insertion_point(field_set_allocated:MulticlassMetrics.positive_label_distribution)
}

// float training_time = 15;
inline void MulticlassMetrics::clear_training_time() {
  training_time_ = 0;
}
inline float MulticlassMetrics::_internal_training_time() const {
  return training_time_;
}
inline float MulticlassMetrics::training_time() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.training_time)
  return _internal_training_time();
}
inline void MulticlassMetrics::_internal_set_training_time(float value) {
  
  training_time_ = value;
}
inline void MulticlassMetrics::set_training_time(float value) {
  _internal_set_training_time(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.training_time)
}

// float macro_avg_precision = 16;
inline void MulticlassMetrics::clear_macro_avg_precision() {
  macro_avg_precision_ = 0;
}
inline float MulticlassMetrics::_internal_macro_avg_precision() const {
  return macro_avg_precision_;
}
inline float MulticlassMetrics::macro_avg_precision() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.macro_avg_precision)
  return _internal_macro_avg_precision();
}
inline void MulticlassMetrics::_internal_set_macro_avg_precision(float value) {
  
  macro_avg_precision_ = value;
}
inline void MulticlassMetrics::set_macro_avg_precision(float value) {
  _internal_set_macro_avg_precision(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.macro_avg_precision)
}

// float macro_avg_recall = 17;
inline void MulticlassMetrics::clear_macro_avg_recall() {
  macro_avg_recall_ = 0;
}
inline float MulticlassMetrics::_internal_macro_avg_recall() const {
  return macro_avg_recall_;
}
inline float MulticlassMetrics::macro_avg_recall() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.macro_avg_recall)
  return _internal_macro_avg_recall();
}
inline void MulticlassMetrics::_internal_set_macro_avg_recall(float value) {
  
  macro_avg_recall_ = value;
}
inline void MulticlassMetrics::set_macro_avg_recall(float value) {
  _internal_set_macro_avg_recall(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.macro_avg_recall)
}

// float k_fold_train_and_apply_time = 18;
inline void MulticlassMetrics::clear_k_fold_train_and_apply_time() {
  k_fold_train_and_apply_time_ = 0;
}
inline float MulticlassMetrics::_internal_k_fold_train_and_apply_time() const {
  return k_fold_train_and_apply_time_;
}
inline float MulticlassMetrics::k_fold_train_and_apply_time() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.k_fold_train_and_apply_time)
  return _internal_k_fold_train_and_apply_time();
}
inline void MulticlassMetrics::_internal_set_k_fold_train_and_apply_time(float value) {
  
  k_fold_train_and_apply_time_ = value;
}
inline void MulticlassMetrics::set_k_fold_train_and_apply_time(float value) {
  _internal_set_k_fold_train_and_apply_time(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.k_fold_train_and_apply_time)
}

// float num_examples = 19;
inline void MulticlassMetrics::clear_num_examples() {
  num_examples_ = 0;
}
inline float MulticlassMetrics::_internal_num_examples() const {
  return num_examples_;
}
inline float MulticlassMetrics::num_examples() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.num_examples)
  return _internal_num_examples();
}
inline void MulticlassMetrics::_internal_set_num_examples(float value) {
  
  num_examples_ = value;
}
inline void MulticlassMetrics::set_num_examples(float value) {
  _internal_set_num_examples(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.num_examples)
}

// float metrics_assembly_time = 20;
inline void MulticlassMetrics::clear_metrics_assembly_time() {
  metrics_assembly_time_ = 0;
}
inline float MulticlassMetrics::_internal_metrics_assembly_time() const {
  return metrics_assembly_time_;
}
inline float MulticlassMetrics::metrics_assembly_time() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.metrics_assembly_time)
  return _internal_metrics_assembly_time();
}
inline void MulticlassMetrics::_internal_set_metrics_assembly_time(float value) {
  
  metrics_assembly_time_ = value;
}
inline void MulticlassMetrics::set_metrics_assembly_time(float value) {
  _internal_set_metrics_assembly_time(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.metrics_assembly_time)
}

// float mean_average_precision_iou_50 = 21;
inline void MulticlassMetrics::clear_mean_average_precision_iou_50() {
  mean_average_precision_iou_50_ = 0;
}
inline float MulticlassMetrics::_internal_mean_average_precision_iou_50() const {
  return mean_average_precision_iou_50_;
}
inline float MulticlassMetrics::mean_average_precision_iou_50() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.mean_average_precision_iou_50)
  return _internal_mean_average_precision_iou_50();
}
inline void MulticlassMetrics::_internal_set_mean_average_precision_iou_50(float value) {
  
  mean_average_precision_iou_50_ = value;
}
inline void MulticlassMetrics::set_mean_average_precision_iou_50(float value) {
  _internal_set_mean_average_precision_iou_50(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.mean_average_precision_iou_50)
}

// float mean_average_precision_iou_range = 22;
inline void MulticlassMetrics::clear_mean_average_precision_iou_range() {
  mean_average_precision_iou_range_ = 0;
}
inline float MulticlassMetrics::_internal_mean_average_precision_iou_range() const {
  return mean_average_precision_iou_range_;
}
inline float MulticlassMetrics::mean_average_precision_iou_range() const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.mean_average_precision_iou_range)
  return _internal_mean_average_precision_iou_range();
}
inline void MulticlassMetrics::_internal_set_mean_average_precision_iou_range(float value) {
  
  mean_average_precision_iou_range_ = value;
}
inline void MulticlassMetrics::set_mean_average_precision_iou_range(float value) {
  _internal_set_mean_average_precision_iou_range(value);
  // @@protoc_insertion_point(field_set:MulticlassMetrics.mean_average_precision_iou_range)
}

// repeated .BinaryMetrics metrics_by_class = 23;
inline int MulticlassMetrics::_internal_metrics_by_class_size() const {
  return metrics_by_class_.size();
}
inline int MulticlassMetrics::metrics_by_class_size() const {
  return _internal_metrics_by_class_size();
}
inline void MulticlassMetrics::clear_metrics_by_class() {
  metrics_by_class_.Clear();
}
inline ::BinaryMetrics* MulticlassMetrics::mutable_metrics_by_class(int index) {
  // @@protoc_insertion_point(field_mutable:MulticlassMetrics.metrics_by_class)
  return metrics_by_class_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BinaryMetrics >*
MulticlassMetrics::mutable_metrics_by_class() {
  // @@protoc_insertion_point(field_mutable_list:MulticlassMetrics.metrics_by_class)
  return &metrics_by_class_;
}
inline const ::BinaryMetrics& MulticlassMetrics::_internal_metrics_by_class(int index) const {
  return metrics_by_class_.Get(index);
}
inline const ::BinaryMetrics& MulticlassMetrics::metrics_by_class(int index) const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.metrics_by_class)
  return _internal_metrics_by_class(index);
}
inline ::BinaryMetrics* MulticlassMetrics::_internal_add_metrics_by_class() {
  return metrics_by_class_.Add();
}
inline ::BinaryMetrics* MulticlassMetrics::add_metrics_by_class() {
  // @@protoc_insertion_point(field_add:MulticlassMetrics.metrics_by_class)
  return _internal_add_metrics_by_class();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BinaryMetrics >&
MulticlassMetrics::metrics_by_class() const {
  // @@protoc_insertion_point(field_list:MulticlassMetrics.metrics_by_class)
  return metrics_by_class_;
}

// repeated .BinaryMetrics metrics_by_area = 24;
inline int MulticlassMetrics::_internal_metrics_by_area_size() const {
  return metrics_by_area_.size();
}
inline int MulticlassMetrics::metrics_by_area_size() const {
  return _internal_metrics_by_area_size();
}
inline void MulticlassMetrics::clear_metrics_by_area() {
  metrics_by_area_.Clear();
}
inline ::BinaryMetrics* MulticlassMetrics::mutable_metrics_by_area(int index) {
  // @@protoc_insertion_point(field_mutable:MulticlassMetrics.metrics_by_area)
  return metrics_by_area_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BinaryMetrics >*
MulticlassMetrics::mutable_metrics_by_area() {
  // @@protoc_insertion_point(field_mutable_list:MulticlassMetrics.metrics_by_area)
  return &metrics_by_area_;
}
inline const ::BinaryMetrics& MulticlassMetrics::_internal_metrics_by_area(int index) const {
  return metrics_by_area_.Get(index);
}
inline const ::BinaryMetrics& MulticlassMetrics::metrics_by_area(int index) const {
  // @@protoc_insertion_point(field_get:MulticlassMetrics.metrics_by_area)
  return _internal_metrics_by_area(index);
}
inline ::BinaryMetrics* MulticlassMetrics::_internal_add_metrics_by_area() {
  return metrics_by_area_.Add();
}
inline ::BinaryMetrics* MulticlassMetrics::add_metrics_by_area() {
  // @@protoc_insertion_point(field_add:MulticlassMetrics.metrics_by_area)
  return _internal_add_metrics_by_area();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BinaryMetrics >&
MulticlassMetrics::metrics_by_area() const {
  // @@protoc_insertion_point(field_list:MulticlassMetrics.metrics_by_area)
  return metrics_by_area_;
}

// -------------------------------------------------------------------

// MulticlassMetricsResponse

// .ResponseStatus status = 1;
inline bool MulticlassMetricsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MulticlassMetricsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& MulticlassMetricsResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& MulticlassMetricsResponse::status() const {
  // @@protoc_insertion_point(field_get:MulticlassMetricsResponse.status)
  return _internal_status();
}
inline void MulticlassMetricsResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MulticlassMetricsResponse.status)
}
inline ::ResponseStatus* MulticlassMetricsResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* MulticlassMetricsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:MulticlassMetricsResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* MulticlassMetricsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* MulticlassMetricsResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:MulticlassMetricsResponse.status)
  return _internal_mutable_status();
}
inline void MulticlassMetricsResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:MulticlassMetricsResponse.status)
}

// .MulticlassMetrics result = 2;
inline bool MulticlassMetricsResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool MulticlassMetricsResponse::has_result() const {
  return _internal_has_result();
}
inline void MulticlassMetricsResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::MulticlassMetrics& MulticlassMetricsResponse::_internal_result() const {
  const ::MulticlassMetrics* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MulticlassMetrics*>(
      &::_MulticlassMetrics_default_instance_);
}
inline const ::MulticlassMetrics& MulticlassMetricsResponse::result() const {
  // @@protoc_insertion_point(field_get:MulticlassMetricsResponse.result)
  return _internal_result();
}
inline void MulticlassMetricsResponse::unsafe_arena_set_allocated_result(
    ::MulticlassMetrics* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MulticlassMetricsResponse.result)
}
inline ::MulticlassMetrics* MulticlassMetricsResponse::release_result() {
  
  ::MulticlassMetrics* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MulticlassMetrics* MulticlassMetricsResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:MulticlassMetricsResponse.result)
  
  ::MulticlassMetrics* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::MulticlassMetrics* MulticlassMetricsResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::MulticlassMetrics>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::MulticlassMetrics* MulticlassMetricsResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:MulticlassMetricsResponse.result)
  return _internal_mutable_result();
}
inline void MulticlassMetricsResponse::set_allocated_result(::MulticlassMetrics* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:MulticlassMetricsResponse.result)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ProgressStatus

// uint32 percent_completed = 1;
inline void ProgressStatus::clear_percent_completed() {
  percent_completed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProgressStatus::_internal_percent_completed() const {
  return percent_completed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProgressStatus::percent_completed() const {
  // @@protoc_insertion_point(field_get:ProgressStatus.percent_completed)
  return _internal_percent_completed();
}
inline void ProgressStatus::_internal_set_percent_completed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  percent_completed_ = value;
}
inline void ProgressStatus::set_percent_completed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_percent_completed(value);
  // @@protoc_insertion_point(field_set:ProgressStatus.percent_completed)
}

// uint32 time_remaining = 2;
inline void ProgressStatus::clear_time_remaining() {
  time_remaining_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProgressStatus::_internal_time_remaining() const {
  return time_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProgressStatus::time_remaining() const {
  // @@protoc_insertion_point(field_get:ProgressStatus.time_remaining)
  return _internal_time_remaining();
}
inline void ProgressStatus::_internal_set_time_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_remaining_ = value;
}
inline void ProgressStatus::set_time_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_remaining(value);
  // @@protoc_insertion_point(field_set:ProgressStatus.time_remaining)
}

// uint32 total_input_count = 3;
inline void ProgressStatus::clear_total_input_count() {
  total_input_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProgressStatus::_internal_total_input_count() const {
  return total_input_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProgressStatus::total_input_count() const {
  // @@protoc_insertion_point(field_get:ProgressStatus.total_input_count)
  return _internal_total_input_count();
}
inline void ProgressStatus::_internal_set_total_input_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_input_count_ = value;
}
inline void ProgressStatus::set_total_input_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_input_count(value);
  // @@protoc_insertion_point(field_set:ProgressStatus.total_input_count)
}

// map<string, uint32> concept_counts = 4;
inline int ProgressStatus::_internal_concept_counts_size() const {
  return concept_counts_.size();
}
inline int ProgressStatus::concept_counts_size() const {
  return _internal_concept_counts_size();
}
inline void ProgressStatus::clear_concept_counts() {
  concept_counts_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProgressStatus::_internal_concept_counts() const {
  return concept_counts_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProgressStatus::concept_counts() const {
  // @@protoc_insertion_point(field_map:ProgressStatus.concept_counts)
  return _internal_concept_counts();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProgressStatus::_internal_mutable_concept_counts() {
  return concept_counts_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProgressStatus::mutable_concept_counts() {
  // @@protoc_insertion_point(field_mutable_map:ProgressStatus.concept_counts)
  return _internal_mutable_concept_counts();
}

// repeated .TrainStats train_stats = 5;
inline int ProgressStatus::_internal_train_stats_size() const {
  return train_stats_.size();
}
inline int ProgressStatus::train_stats_size() const {
  return _internal_train_stats_size();
}
inline void ProgressStatus::clear_train_stats() {
  train_stats_.Clear();
}
inline ::TrainStats* ProgressStatus::mutable_train_stats(int index) {
  // @@protoc_insertion_point(field_mutable:ProgressStatus.train_stats)
  return train_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrainStats >*
ProgressStatus::mutable_train_stats() {
  // @@protoc_insertion_point(field_mutable_list:ProgressStatus.train_stats)
  return &train_stats_;
}
inline const ::TrainStats& ProgressStatus::_internal_train_stats(int index) const {
  return train_stats_.Get(index);
}
inline const ::TrainStats& ProgressStatus::train_stats(int index) const {
  // @@protoc_insertion_point(field_get:ProgressStatus.train_stats)
  return _internal_train_stats(index);
}
inline ::TrainStats* ProgressStatus::_internal_add_train_stats() {
  return train_stats_.Add();
}
inline ::TrainStats* ProgressStatus::add_train_stats() {
  // @@protoc_insertion_point(field_add:ProgressStatus.train_stats)
  return _internal_add_train_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrainStats >&
ProgressStatus::train_stats() const {
  // @@protoc_insertion_point(field_list:ProgressStatus.train_stats)
  return train_stats_;
}

// -------------------------------------------------------------------

// TrainStats

// uint32 epoch = 1;
inline void TrainStats::clear_epoch() {
  epoch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrainStats::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrainStats::epoch() const {
  // @@protoc_insertion_point(field_get:TrainStats.epoch)
  return _internal_epoch();
}
inline void TrainStats::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  epoch_ = value;
}
inline void TrainStats::set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:TrainStats.epoch)
}

// uint32 global_step = 2;
inline void TrainStats::clear_global_step() {
  global_step_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrainStats::_internal_global_step() const {
  return global_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrainStats::global_step() const {
  // @@protoc_insertion_point(field_get:TrainStats.global_step)
  return _internal_global_step();
}
inline void TrainStats::_internal_set_global_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  global_step_ = value;
}
inline void TrainStats::set_global_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_global_step(value);
  // @@protoc_insertion_point(field_set:TrainStats.global_step)
}

// float cost = 3;
inline void TrainStats::clear_cost() {
  cost_ = 0;
}
inline float TrainStats::_internal_cost() const {
  return cost_;
}
inline float TrainStats::cost() const {
  // @@protoc_insertion_point(field_get:TrainStats.cost)
  return _internal_cost();
}
inline void TrainStats::_internal_set_cost(float value) {
  
  cost_ = value;
}
inline void TrainStats::set_cost(float value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:TrainStats.cost)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fpredictor_2fpredictor_5fmetrics_2eproto
