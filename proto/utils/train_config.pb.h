// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/train_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2ftrain_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2ftrain_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/databatch_generator.pb.h"
#include "proto/utils/data_provider.pb.h"
#include "proto/utils/checkpoint.pb.h"
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2ftrain_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2ftrain_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto;
class DataParams;
class DataParamsDefaultTypeInternal;
extern DataParamsDefaultTypeInternal _DataParams_default_instance_;
class EvalConfig;
class EvalConfigDefaultTypeInternal;
extern EvalConfigDefaultTypeInternal _EvalConfig_default_instance_;
class ExpInfo;
class ExpInfoDefaultTypeInternal;
extern ExpInfoDefaultTypeInternal _ExpInfo_default_instance_;
class Freqs;
class FreqsDefaultTypeInternal;
extern FreqsDefaultTypeInternal _Freqs_default_instance_;
class Lrate;
class LrateDefaultTypeInternal;
extern LrateDefaultTypeInternal _Lrate_default_instance_;
class LratePair;
class LratePairDefaultTypeInternal;
extern LratePairDefaultTypeInternal _LratePair_default_instance_;
class LratePolynomialDecayConfig;
class LratePolynomialDecayConfigDefaultTypeInternal;
extern LratePolynomialDecayConfigDefaultTypeInternal _LratePolynomialDecayConfig_default_instance_;
class ModelProfileResults;
class ModelProfileResultsDefaultTypeInternal;
extern ModelProfileResultsDefaultTypeInternal _ModelProfileResults_default_instance_;
class ModelProfileResults_TimesPerExampleEntry_DoNotUse;
class ModelProfileResults_TimesPerExampleEntry_DoNotUseDefaultTypeInternal;
extern ModelProfileResults_TimesPerExampleEntry_DoNotUseDefaultTypeInternal _ModelProfileResults_TimesPerExampleEntry_DoNotUse_default_instance_;
class ModelProfileResults_TimesTotalEntry_DoNotUse;
class ModelProfileResults_TimesTotalEntry_DoNotUseDefaultTypeInternal;
extern ModelProfileResults_TimesTotalEntry_DoNotUseDefaultTypeInternal _ModelProfileResults_TimesTotalEntry_DoNotUse_default_instance_;
class TrainConfig;
class TrainConfigDefaultTypeInternal;
extern TrainConfigDefaultTypeInternal _TrainConfig_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DataParams* Arena::CreateMaybeMessage<::DataParams>(Arena*);
template<> ::EvalConfig* Arena::CreateMaybeMessage<::EvalConfig>(Arena*);
template<> ::ExpInfo* Arena::CreateMaybeMessage<::ExpInfo>(Arena*);
template<> ::Freqs* Arena::CreateMaybeMessage<::Freqs>(Arena*);
template<> ::Lrate* Arena::CreateMaybeMessage<::Lrate>(Arena*);
template<> ::LratePair* Arena::CreateMaybeMessage<::LratePair>(Arena*);
template<> ::LratePolynomialDecayConfig* Arena::CreateMaybeMessage<::LratePolynomialDecayConfig>(Arena*);
template<> ::ModelProfileResults* Arena::CreateMaybeMessage<::ModelProfileResults>(Arena*);
template<> ::ModelProfileResults_TimesPerExampleEntry_DoNotUse* Arena::CreateMaybeMessage<::ModelProfileResults_TimesPerExampleEntry_DoNotUse>(Arena*);
template<> ::ModelProfileResults_TimesTotalEntry_DoNotUse* Arena::CreateMaybeMessage<::ModelProfileResults_TimesTotalEntry_DoNotUse>(Arena*);
template<> ::TrainConfig* Arena::CreateMaybeMessage<::TrainConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TrainConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrainConfig) */ {
 public:
  inline TrainConfig() : TrainConfig(nullptr) {}
  virtual ~TrainConfig();

  TrainConfig(const TrainConfig& from);
  TrainConfig(TrainConfig&& from) noexcept
    : TrainConfig() {
    *this = ::std::move(from);
  }

  inline TrainConfig& operator=(const TrainConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainConfig& operator=(TrainConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainConfig* internal_default_instance() {
    return reinterpret_cast<const TrainConfig*>(
               &_TrainConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrainConfig& a, TrainConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainConfig* New() const final {
    return CreateMaybeMessage<TrainConfig>(nullptr);
  }

  TrainConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainConfig& from);
  void MergeFrom(const TrainConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrainConfig";
  }
  protected:
  explicit TrainConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto);
    return ::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobNameFieldNumber = 5,
    kExpInfoFieldNumber = 1,
    kFreqsFieldNumber = 2,
    kLrateFieldNumber = 3,
    kDataParamsFieldNumber = 4,
    kClipGradientFieldNumber = 6,
    kGradientMaxFieldNumber = 7,
  };
  // string job_name = 5;
  void clear_job_name();
  const std::string& job_name() const;
  void set_job_name(const std::string& value);
  void set_job_name(std::string&& value);
  void set_job_name(const char* value);
  void set_job_name(const char* value, size_t size);
  std::string* mutable_job_name();
  std::string* release_job_name();
  void set_allocated_job_name(std::string* job_name);
  private:
  const std::string& _internal_job_name() const;
  void _internal_set_job_name(const std::string& value);
  std::string* _internal_mutable_job_name();
  public:

  // .ExpInfo exp_info = 1;
  bool has_exp_info() const;
  private:
  bool _internal_has_exp_info() const;
  public:
  void clear_exp_info();
  const ::ExpInfo& exp_info() const;
  ::ExpInfo* release_exp_info();
  ::ExpInfo* mutable_exp_info();
  void set_allocated_exp_info(::ExpInfo* exp_info);
  private:
  const ::ExpInfo& _internal_exp_info() const;
  ::ExpInfo* _internal_mutable_exp_info();
  public:
  void unsafe_arena_set_allocated_exp_info(
      ::ExpInfo* exp_info);
  ::ExpInfo* unsafe_arena_release_exp_info();

  // .Freqs freqs = 2;
  bool has_freqs() const;
  private:
  bool _internal_has_freqs() const;
  public:
  void clear_freqs();
  const ::Freqs& freqs() const;
  ::Freqs* release_freqs();
  ::Freqs* mutable_freqs();
  void set_allocated_freqs(::Freqs* freqs);
  private:
  const ::Freqs& _internal_freqs() const;
  ::Freqs* _internal_mutable_freqs();
  public:
  void unsafe_arena_set_allocated_freqs(
      ::Freqs* freqs);
  ::Freqs* unsafe_arena_release_freqs();

  // .Lrate lrate = 3;
  bool has_lrate() const;
  private:
  bool _internal_has_lrate() const;
  public:
  void clear_lrate();
  const ::Lrate& lrate() const;
  ::Lrate* release_lrate();
  ::Lrate* mutable_lrate();
  void set_allocated_lrate(::Lrate* lrate);
  private:
  const ::Lrate& _internal_lrate() const;
  ::Lrate* _internal_mutable_lrate();
  public:
  void unsafe_arena_set_allocated_lrate(
      ::Lrate* lrate);
  ::Lrate* unsafe_arena_release_lrate();

  // .DataParams data_params = 4;
  bool has_data_params() const;
  private:
  bool _internal_has_data_params() const;
  public:
  void clear_data_params();
  const ::DataParams& data_params() const;
  ::DataParams* release_data_params();
  ::DataParams* mutable_data_params();
  void set_allocated_data_params(::DataParams* data_params);
  private:
  const ::DataParams& _internal_data_params() const;
  ::DataParams* _internal_mutable_data_params();
  public:
  void unsafe_arena_set_allocated_data_params(
      ::DataParams* data_params);
  ::DataParams* unsafe_arena_release_data_params();

  // bool clip_gradient = 6;
  void clear_clip_gradient();
  bool clip_gradient() const;
  void set_clip_gradient(bool value);
  private:
  bool _internal_clip_gradient() const;
  void _internal_set_clip_gradient(bool value);
  public:

  // float gradient_max = 7;
  void clear_gradient_max();
  float gradient_max() const;
  void set_gradient_max(float value);
  private:
  float _internal_gradient_max() const;
  void _internal_set_gradient_max(float value);
  public:

  // @@protoc_insertion_point(class_scope:TrainConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_name_;
  ::ExpInfo* exp_info_;
  ::Freqs* freqs_;
  ::Lrate* lrate_;
  ::DataParams* data_params_;
  bool clip_gradient_;
  float gradient_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2ftrain_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ExpInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExpInfo) */ {
 public:
  inline ExpInfo() : ExpInfo(nullptr) {}
  virtual ~ExpInfo();

  ExpInfo(const ExpInfo& from);
  ExpInfo(ExpInfo&& from) noexcept
    : ExpInfo() {
    *this = ::std::move(from);
  }

  inline ExpInfo& operator=(const ExpInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpInfo& operator=(ExpInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExpInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExpInfo* internal_default_instance() {
    return reinterpret_cast<const ExpInfo*>(
               &_ExpInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExpInfo& a, ExpInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpInfo* New() const final {
    return CreateMaybeMessage<ExpInfo>(nullptr);
  }

  ExpInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpInfo& from);
  void MergeFrom(const ExpInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExpInfo";
  }
  protected:
  explicit ExpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto);
    return ::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadCheckpointScopesFieldNumber = 2,
    kEvaluationFieldNumber = 5,
    kExpTypeFieldNumber = 3,
    kTrainerTypeFieldNumber = 4,
    kDeviceTypeFieldNumber = 6,
    kNoteFieldNumber = 9,
    kEmailFieldNumber = 10,
    kGitHashFieldNumber = 13,
    kEidFieldNumber = 1,
    kSeedFieldNumber = 8,
    kNumEpochFieldNumber = 11,
    kNumMinibatchFieldNumber = 12,
    kNumDevicesFieldNumber = 7,
    kIsCeleryFieldNumber = 14,
    kRunEvalsInlineFieldNumber = 15,
    kRunFinalEvalsFieldNumber = 16,
  };
  // repeated .LoadCheckpointScope load_checkpoint_scopes = 2;
  int load_checkpoint_scopes_size() const;
  private:
  int _internal_load_checkpoint_scopes_size() const;
  public:
  void clear_load_checkpoint_scopes();
  ::LoadCheckpointScope* mutable_load_checkpoint_scopes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LoadCheckpointScope >*
      mutable_load_checkpoint_scopes();
  private:
  const ::LoadCheckpointScope& _internal_load_checkpoint_scopes(int index) const;
  ::LoadCheckpointScope* _internal_add_load_checkpoint_scopes();
  public:
  const ::LoadCheckpointScope& load_checkpoint_scopes(int index) const;
  ::LoadCheckpointScope* add_load_checkpoint_scopes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LoadCheckpointScope >&
      load_checkpoint_scopes() const;

  // repeated .EvalConfig evaluation = 5;
  int evaluation_size() const;
  private:
  int _internal_evaluation_size() const;
  public:
  void clear_evaluation();
  ::EvalConfig* mutable_evaluation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EvalConfig >*
      mutable_evaluation();
  private:
  const ::EvalConfig& _internal_evaluation(int index) const;
  ::EvalConfig* _internal_add_evaluation();
  public:
  const ::EvalConfig& evaluation(int index) const;
  ::EvalConfig* add_evaluation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EvalConfig >&
      evaluation() const;

  // string exp_type = 3;
  void clear_exp_type();
  const std::string& exp_type() const;
  void set_exp_type(const std::string& value);
  void set_exp_type(std::string&& value);
  void set_exp_type(const char* value);
  void set_exp_type(const char* value, size_t size);
  std::string* mutable_exp_type();
  std::string* release_exp_type();
  void set_allocated_exp_type(std::string* exp_type);
  private:
  const std::string& _internal_exp_type() const;
  void _internal_set_exp_type(const std::string& value);
  std::string* _internal_mutable_exp_type();
  public:

  // string trainer_type = 4;
  void clear_trainer_type();
  const std::string& trainer_type() const;
  void set_trainer_type(const std::string& value);
  void set_trainer_type(std::string&& value);
  void set_trainer_type(const char* value);
  void set_trainer_type(const char* value, size_t size);
  std::string* mutable_trainer_type();
  std::string* release_trainer_type();
  void set_allocated_trainer_type(std::string* trainer_type);
  private:
  const std::string& _internal_trainer_type() const;
  void _internal_set_trainer_type(const std::string& value);
  std::string* _internal_mutable_trainer_type();
  public:

  // string device_type = 6;
  void clear_device_type();
  const std::string& device_type() const;
  void set_device_type(const std::string& value);
  void set_device_type(std::string&& value);
  void set_device_type(const char* value);
  void set_device_type(const char* value, size_t size);
  std::string* mutable_device_type();
  std::string* release_device_type();
  void set_allocated_device_type(std::string* device_type);
  private:
  const std::string& _internal_device_type() const;
  void _internal_set_device_type(const std::string& value);
  std::string* _internal_mutable_device_type();
  public:

  // string note = 9;
  void clear_note();
  const std::string& note() const;
  void set_note(const std::string& value);
  void set_note(std::string&& value);
  void set_note(const char* value);
  void set_note(const char* value, size_t size);
  std::string* mutable_note();
  std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // string email = 10;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string git_hash = 13;
  void clear_git_hash();
  const std::string& git_hash() const;
  void set_git_hash(const std::string& value);
  void set_git_hash(std::string&& value);
  void set_git_hash(const char* value);
  void set_git_hash(const char* value, size_t size);
  std::string* mutable_git_hash();
  std::string* release_git_hash();
  void set_allocated_git_hash(std::string* git_hash);
  private:
  const std::string& _internal_git_hash() const;
  void _internal_set_git_hash(const std::string& value);
  std::string* _internal_mutable_git_hash();
  public:

  // int64 eid = 1;
  void clear_eid();
  ::PROTOBUF_NAMESPACE_ID::int64 eid() const;
  void set_eid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_eid() const;
  void _internal_set_eid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 seed = 8;
  void clear_seed();
  ::PROTOBUF_NAMESPACE_ID::int64 seed() const;
  void set_seed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seed() const;
  void _internal_set_seed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_epoch = 11;
  void clear_num_epoch();
  ::PROTOBUF_NAMESPACE_ID::int64 num_epoch() const;
  void set_num_epoch(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_epoch() const;
  void _internal_set_num_epoch(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_minibatch = 12;
  void clear_num_minibatch();
  ::PROTOBUF_NAMESPACE_ID::int64 num_minibatch() const;
  void set_num_minibatch(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_minibatch() const;
  void _internal_set_num_minibatch(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 num_devices = 7;
  void clear_num_devices();
  ::PROTOBUF_NAMESPACE_ID::int32 num_devices() const;
  void set_num_devices(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_devices() const;
  void _internal_set_num_devices(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_celery = 14;
  void clear_is_celery();
  bool is_celery() const;
  void set_is_celery(bool value);
  private:
  bool _internal_is_celery() const;
  void _internal_set_is_celery(bool value);
  public:

  // bool run_evals_inline = 15;
  void clear_run_evals_inline();
  bool run_evals_inline() const;
  void set_run_evals_inline(bool value);
  private:
  bool _internal_run_evals_inline() const;
  void _internal_set_run_evals_inline(bool value);
  public:

  // bool run_final_evals = 16;
  void clear_run_final_evals();
  bool run_final_evals() const;
  void set_run_final_evals(bool value);
  private:
  bool _internal_run_final_evals() const;
  void _internal_set_run_final_evals(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ExpInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LoadCheckpointScope > load_checkpoint_scopes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EvalConfig > evaluation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exp_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trainer_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr git_hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 eid_;
  ::PROTOBUF_NAMESPACE_ID::int64 seed_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_epoch_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_minibatch_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_devices_;
  bool is_celery_;
  bool run_evals_inline_;
  bool run_final_evals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2ftrain_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class EvalConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EvalConfig) */ {
 public:
  inline EvalConfig() : EvalConfig(nullptr) {}
  virtual ~EvalConfig();

  EvalConfig(const EvalConfig& from);
  EvalConfig(EvalConfig&& from) noexcept
    : EvalConfig() {
    *this = ::std::move(from);
  }

  inline EvalConfig& operator=(const EvalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvalConfig& operator=(EvalConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EvalConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EvalConfig* internal_default_instance() {
    return reinterpret_cast<const EvalConfig*>(
               &_EvalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EvalConfig& a, EvalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(EvalConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvalConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvalConfig* New() const final {
    return CreateMaybeMessage<EvalConfig>(nullptr);
  }

  EvalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvalConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EvalConfig& from);
  void MergeFrom(const EvalConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvalConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EvalConfig";
  }
  protected:
  explicit EvalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto);
    return ::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigRunnerClassFieldNumber = 1,
    kConfigFieldNumber = 2,
  };
  // string config_runner_class = 1;
  void clear_config_runner_class();
  const std::string& config_runner_class() const;
  void set_config_runner_class(const std::string& value);
  void set_config_runner_class(std::string&& value);
  void set_config_runner_class(const char* value);
  void set_config_runner_class(const char* value, size_t size);
  std::string* mutable_config_runner_class();
  std::string* release_config_runner_class();
  void set_allocated_config_runner_class(std::string* config_runner_class);
  private:
  const std::string& _internal_config_runner_class() const;
  void _internal_set_config_runner_class(const std::string& value);
  std::string* _internal_mutable_config_runner_class();
  public:

  // .google.protobuf.Struct config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const PROTOBUF_NAMESPACE_ID::Struct& config() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_config();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_config();
  void set_allocated_config(PROTOBUF_NAMESPACE_ID::Struct* config);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_config() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      PROTOBUF_NAMESPACE_ID::Struct* config);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:EvalConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_runner_class_;
  PROTOBUF_NAMESPACE_ID::Struct* config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2ftrain_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DataParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataParams) */ {
 public:
  inline DataParams() : DataParams(nullptr) {}
  virtual ~DataParams();

  DataParams(const DataParams& from);
  DataParams(DataParams&& from) noexcept
    : DataParams() {
    *this = ::std::move(from);
  }

  inline DataParams& operator=(const DataParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataParams& operator=(DataParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataParams* internal_default_instance() {
    return reinterpret_cast<const DataParams*>(
               &_DataParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DataParams& a, DataParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DataParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataParams* New() const final {
    return CreateMaybeMessage<DataParams>(nullptr);
  }

  DataParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataParams& from);
  void MergeFrom(const DataParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataParams";
  }
  protected:
  explicit DataParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto);
    return ::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCfgFieldNumber = 1,
    kDatasetFieldNumber = 5,
    kDataLayernameFieldNumber = 7,
    kTestDataLayernameFieldNumber = 8,
    kPredictSplitFieldNumber = 100,
    kCfgArgsFieldNumber = 2,
    kInputArgsFieldNumber = 3,
    kOptimizerArgsFieldNumber = 4,
    kDataProviderParamsFieldNumber = 9,
    kDatabatchGeneratorParamsFieldNumber = 10,
    kSavedOutputEidFieldNumber = 6,
  };
  // string cfg = 1;
  void clear_cfg();
  const std::string& cfg() const;
  void set_cfg(const std::string& value);
  void set_cfg(std::string&& value);
  void set_cfg(const char* value);
  void set_cfg(const char* value, size_t size);
  std::string* mutable_cfg();
  std::string* release_cfg();
  void set_allocated_cfg(std::string* cfg);
  private:
  const std::string& _internal_cfg() const;
  void _internal_set_cfg(const std::string& value);
  std::string* _internal_mutable_cfg();
  public:

  // string dataset = 5;
  void clear_dataset();
  const std::string& dataset() const;
  void set_dataset(const std::string& value);
  void set_dataset(std::string&& value);
  void set_dataset(const char* value);
  void set_dataset(const char* value, size_t size);
  std::string* mutable_dataset();
  std::string* release_dataset();
  void set_allocated_dataset(std::string* dataset);
  private:
  const std::string& _internal_dataset() const;
  void _internal_set_dataset(const std::string& value);
  std::string* _internal_mutable_dataset();
  public:

  // string data_layername = 7 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_data_layername();
  PROTOBUF_DEPRECATED const std::string& data_layername() const;
  PROTOBUF_DEPRECATED void set_data_layername(const std::string& value);
  PROTOBUF_DEPRECATED void set_data_layername(std::string&& value);
  PROTOBUF_DEPRECATED void set_data_layername(const char* value);
  PROTOBUF_DEPRECATED void set_data_layername(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_data_layername();
  PROTOBUF_DEPRECATED std::string* release_data_layername();
  PROTOBUF_DEPRECATED void set_allocated_data_layername(std::string* data_layername);
  private:
  const std::string& _internal_data_layername() const;
  void _internal_set_data_layername(const std::string& value);
  std::string* _internal_mutable_data_layername();
  public:

  // string test_data_layername = 8 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_test_data_layername();
  PROTOBUF_DEPRECATED const std::string& test_data_layername() const;
  PROTOBUF_DEPRECATED void set_test_data_layername(const std::string& value);
  PROTOBUF_DEPRECATED void set_test_data_layername(std::string&& value);
  PROTOBUF_DEPRECATED void set_test_data_layername(const char* value);
  PROTOBUF_DEPRECATED void set_test_data_layername(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_test_data_layername();
  PROTOBUF_DEPRECATED std::string* release_test_data_layername();
  PROTOBUF_DEPRECATED void set_allocated_test_data_layername(std::string* test_data_layername);
  private:
  const std::string& _internal_test_data_layername() const;
  void _internal_set_test_data_layername(const std::string& value);
  std::string* _internal_mutable_test_data_layername();
  public:

  // string predict_split = 100 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_predict_split();
  PROTOBUF_DEPRECATED const std::string& predict_split() const;
  PROTOBUF_DEPRECATED void set_predict_split(const std::string& value);
  PROTOBUF_DEPRECATED void set_predict_split(std::string&& value);
  PROTOBUF_DEPRECATED void set_predict_split(const char* value);
  PROTOBUF_DEPRECATED void set_predict_split(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_predict_split();
  PROTOBUF_DEPRECATED std::string* release_predict_split();
  PROTOBUF_DEPRECATED void set_allocated_predict_split(std::string* predict_split);
  private:
  const std::string& _internal_predict_split() const;
  void _internal_set_predict_split(const std::string& value);
  std::string* _internal_mutable_predict_split();
  public:

  // .google.protobuf.Struct cfg_args = 2;
  bool has_cfg_args() const;
  private:
  bool _internal_has_cfg_args() const;
  public:
  void clear_cfg_args();
  const PROTOBUF_NAMESPACE_ID::Struct& cfg_args() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_cfg_args();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_cfg_args();
  void set_allocated_cfg_args(PROTOBUF_NAMESPACE_ID::Struct* cfg_args);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_cfg_args() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_cfg_args();
  public:
  void unsafe_arena_set_allocated_cfg_args(
      PROTOBUF_NAMESPACE_ID::Struct* cfg_args);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_cfg_args();

  // .google.protobuf.Struct input_args = 3;
  bool has_input_args() const;
  private:
  bool _internal_has_input_args() const;
  public:
  void clear_input_args();
  const PROTOBUF_NAMESPACE_ID::Struct& input_args() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_input_args();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_input_args();
  void set_allocated_input_args(PROTOBUF_NAMESPACE_ID::Struct* input_args);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_input_args() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_input_args();
  public:
  void unsafe_arena_set_allocated_input_args(
      PROTOBUF_NAMESPACE_ID::Struct* input_args);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_input_args();

  // .google.protobuf.Struct optimizer_args = 4;
  bool has_optimizer_args() const;
  private:
  bool _internal_has_optimizer_args() const;
  public:
  void clear_optimizer_args();
  const PROTOBUF_NAMESPACE_ID::Struct& optimizer_args() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_optimizer_args();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_optimizer_args();
  void set_allocated_optimizer_args(PROTOBUF_NAMESPACE_ID::Struct* optimizer_args);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_optimizer_args() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_optimizer_args();
  public:
  void unsafe_arena_set_allocated_optimizer_args(
      PROTOBUF_NAMESPACE_ID::Struct* optimizer_args);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_optimizer_args();

  // .DataProviderParams data_provider_params = 9;
  bool has_data_provider_params() const;
  private:
  bool _internal_has_data_provider_params() const;
  public:
  void clear_data_provider_params();
  const ::DataProviderParams& data_provider_params() const;
  ::DataProviderParams* release_data_provider_params();
  ::DataProviderParams* mutable_data_provider_params();
  void set_allocated_data_provider_params(::DataProviderParams* data_provider_params);
  private:
  const ::DataProviderParams& _internal_data_provider_params() const;
  ::DataProviderParams* _internal_mutable_data_provider_params();
  public:
  void unsafe_arena_set_allocated_data_provider_params(
      ::DataProviderParams* data_provider_params);
  ::DataProviderParams* unsafe_arena_release_data_provider_params();

  // .DataBatchGeneratorParams databatch_generator_params = 10;
  bool has_databatch_generator_params() const;
  private:
  bool _internal_has_databatch_generator_params() const;
  public:
  void clear_databatch_generator_params();
  const ::DataBatchGeneratorParams& databatch_generator_params() const;
  ::DataBatchGeneratorParams* release_databatch_generator_params();
  ::DataBatchGeneratorParams* mutable_databatch_generator_params();
  void set_allocated_databatch_generator_params(::DataBatchGeneratorParams* databatch_generator_params);
  private:
  const ::DataBatchGeneratorParams& _internal_databatch_generator_params() const;
  ::DataBatchGeneratorParams* _internal_mutable_databatch_generator_params();
  public:
  void unsafe_arena_set_allocated_databatch_generator_params(
      ::DataBatchGeneratorParams* databatch_generator_params);
  ::DataBatchGeneratorParams* unsafe_arena_release_databatch_generator_params();

  // int64 saved_output_eid = 6 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_saved_output_eid();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 saved_output_eid() const;
  PROTOBUF_DEPRECATED void set_saved_output_eid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_saved_output_eid() const;
  void _internal_set_saved_output_eid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:DataParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cfg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_layername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_data_layername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predict_split_;
  PROTOBUF_NAMESPACE_ID::Struct* cfg_args_;
  PROTOBUF_NAMESPACE_ID::Struct* input_args_;
  PROTOBUF_NAMESPACE_ID::Struct* optimizer_args_;
  ::DataProviderParams* data_provider_params_;
  ::DataBatchGeneratorParams* databatch_generator_params_;
  ::PROTOBUF_NAMESPACE_ID::int64 saved_output_eid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2ftrain_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Freqs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Freqs) */ {
 public:
  inline Freqs() : Freqs(nullptr) {}
  virtual ~Freqs();

  Freqs(const Freqs& from);
  Freqs(Freqs&& from) noexcept
    : Freqs() {
    *this = ::std::move(from);
  }

  inline Freqs& operator=(const Freqs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Freqs& operator=(Freqs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Freqs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Freqs* internal_default_instance() {
    return reinterpret_cast<const Freqs*>(
               &_Freqs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Freqs& a, Freqs& b) {
    a.Swap(&b);
  }
  inline void Swap(Freqs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Freqs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Freqs* New() const final {
    return CreateMaybeMessage<Freqs>(nullptr);
  }

  Freqs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Freqs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Freqs& from);
  void MergeFrom(const Freqs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Freqs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Freqs";
  }
  protected:
  explicit Freqs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto);
    return ::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestFreqFieldNumber = 1,
    kSaveFreqFieldNumber = 2,
    kStatsFreqFieldNumber = 3,
    kSummaryFreqFieldNumber = 4,
  };
  // int64 test_freq = 1;
  void clear_test_freq();
  ::PROTOBUF_NAMESPACE_ID::int64 test_freq() const;
  void set_test_freq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_test_freq() const;
  void _internal_set_test_freq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 save_freq = 2;
  void clear_save_freq();
  ::PROTOBUF_NAMESPACE_ID::int64 save_freq() const;
  void set_save_freq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_save_freq() const;
  void _internal_set_save_freq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 stats_freq = 3;
  void clear_stats_freq();
  ::PROTOBUF_NAMESPACE_ID::int64 stats_freq() const;
  void set_stats_freq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stats_freq() const;
  void _internal_set_stats_freq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 summary_freq = 4;
  void clear_summary_freq();
  ::PROTOBUF_NAMESPACE_ID::int64 summary_freq() const;
  void set_summary_freq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_summary_freq() const;
  void _internal_set_summary_freq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Freqs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 test_freq_;
  ::PROTOBUF_NAMESPACE_ID::int64 save_freq_;
  ::PROTOBUF_NAMESPACE_ID::int64 stats_freq_;
  ::PROTOBUF_NAMESPACE_ID::int64 summary_freq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2ftrain_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LratePair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LratePair) */ {
 public:
  inline LratePair() : LratePair(nullptr) {}
  virtual ~LratePair();

  LratePair(const LratePair& from);
  LratePair(LratePair&& from) noexcept
    : LratePair() {
    *this = ::std::move(from);
  }

  inline LratePair& operator=(const LratePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline LratePair& operator=(LratePair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LratePair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LratePair* internal_default_instance() {
    return reinterpret_cast<const LratePair*>(
               &_LratePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LratePair& a, LratePair& b) {
    a.Swap(&b);
  }
  inline void Swap(LratePair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LratePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LratePair* New() const final {
    return CreateMaybeMessage<LratePair>(nullptr);
  }

  LratePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LratePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LratePair& from);
  void MergeFrom(const LratePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LratePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LratePair";
  }
  protected:
  explicit LratePair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto);
    return ::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpochFieldNumber = 1,
    kLrateFieldNumber = 2,
  };
  // float epoch = 1;
  void clear_epoch();
  float epoch() const;
  void set_epoch(float value);
  private:
  float _internal_epoch() const;
  void _internal_set_epoch(float value);
  public:

  // float lrate = 2;
  void clear_lrate();
  float lrate() const;
  void set_lrate(float value);
  private:
  float _internal_lrate() const;
  void _internal_set_lrate(float value);
  public:

  // @@protoc_insertion_point(class_scope:LratePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float epoch_;
  float lrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2ftrain_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Lrate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Lrate) */ {
 public:
  inline Lrate() : Lrate(nullptr) {}
  virtual ~Lrate();

  Lrate(const Lrate& from);
  Lrate(Lrate&& from) noexcept
    : Lrate() {
    *this = ::std::move(from);
  }

  inline Lrate& operator=(const Lrate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lrate& operator=(Lrate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lrate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lrate* internal_default_instance() {
    return reinterpret_cast<const Lrate*>(
               &_Lrate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Lrate& a, Lrate& b) {
    a.Swap(&b);
  }
  inline void Swap(Lrate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lrate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lrate* New() const final {
    return CreateMaybeMessage<Lrate>(nullptr);
  }

  Lrate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lrate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lrate& from);
  void MergeFrom(const Lrate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lrate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Lrate";
  }
  protected:
  explicit Lrate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto);
    return ::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLrateScheduleFieldNumber = 1,
    kPolynomialConfigFieldNumber = 2,
  };
  // repeated .LratePair lrate_schedule = 1;
  int lrate_schedule_size() const;
  private:
  int _internal_lrate_schedule_size() const;
  public:
  void clear_lrate_schedule();
  ::LratePair* mutable_lrate_schedule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LratePair >*
      mutable_lrate_schedule();
  private:
  const ::LratePair& _internal_lrate_schedule(int index) const;
  ::LratePair* _internal_add_lrate_schedule();
  public:
  const ::LratePair& lrate_schedule(int index) const;
  ::LratePair* add_lrate_schedule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LratePair >&
      lrate_schedule() const;

  // .LratePolynomialDecayConfig polynomial_config = 2;
  bool has_polynomial_config() const;
  private:
  bool _internal_has_polynomial_config() const;
  public:
  void clear_polynomial_config();
  const ::LratePolynomialDecayConfig& polynomial_config() const;
  ::LratePolynomialDecayConfig* release_polynomial_config();
  ::LratePolynomialDecayConfig* mutable_polynomial_config();
  void set_allocated_polynomial_config(::LratePolynomialDecayConfig* polynomial_config);
  private:
  const ::LratePolynomialDecayConfig& _internal_polynomial_config() const;
  ::LratePolynomialDecayConfig* _internal_mutable_polynomial_config();
  public:
  void unsafe_arena_set_allocated_polynomial_config(
      ::LratePolynomialDecayConfig* polynomial_config);
  ::LratePolynomialDecayConfig* unsafe_arena_release_polynomial_config();

  // @@protoc_insertion_point(class_scope:Lrate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LratePair > lrate_schedule_;
  ::LratePolynomialDecayConfig* polynomial_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2ftrain_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LratePolynomialDecayConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LratePolynomialDecayConfig) */ {
 public:
  inline LratePolynomialDecayConfig() : LratePolynomialDecayConfig(nullptr) {}
  virtual ~LratePolynomialDecayConfig();

  LratePolynomialDecayConfig(const LratePolynomialDecayConfig& from);
  LratePolynomialDecayConfig(LratePolynomialDecayConfig&& from) noexcept
    : LratePolynomialDecayConfig() {
    *this = ::std::move(from);
  }

  inline LratePolynomialDecayConfig& operator=(const LratePolynomialDecayConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LratePolynomialDecayConfig& operator=(LratePolynomialDecayConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LratePolynomialDecayConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LratePolynomialDecayConfig* internal_default_instance() {
    return reinterpret_cast<const LratePolynomialDecayConfig*>(
               &_LratePolynomialDecayConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LratePolynomialDecayConfig& a, LratePolynomialDecayConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LratePolynomialDecayConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LratePolynomialDecayConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LratePolynomialDecayConfig* New() const final {
    return CreateMaybeMessage<LratePolynomialDecayConfig>(nullptr);
  }

  LratePolynomialDecayConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LratePolynomialDecayConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LratePolynomialDecayConfig& from);
  void MergeFrom(const LratePolynomialDecayConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LratePolynomialDecayConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LratePolynomialDecayConfig";
  }
  protected:
  explicit LratePolynomialDecayConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto);
    return ::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecayStepsFieldNumber = 2,
    kInitLearningRateFieldNumber = 1,
    kEndingLearningRateFieldNumber = 3,
    kPowerFieldNumber = 4,
    kCycleFieldNumber = 5,
  };
  // int64 decay_steps = 2;
  void clear_decay_steps();
  ::PROTOBUF_NAMESPACE_ID::int64 decay_steps() const;
  void set_decay_steps(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_decay_steps() const;
  void _internal_set_decay_steps(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float init_learning_rate = 1;
  void clear_init_learning_rate();
  float init_learning_rate() const;
  void set_init_learning_rate(float value);
  private:
  float _internal_init_learning_rate() const;
  void _internal_set_init_learning_rate(float value);
  public:

  // float ending_learning_rate = 3;
  void clear_ending_learning_rate();
  float ending_learning_rate() const;
  void set_ending_learning_rate(float value);
  private:
  float _internal_ending_learning_rate() const;
  void _internal_set_ending_learning_rate(float value);
  public:

  // float power = 4;
  void clear_power();
  float power() const;
  void set_power(float value);
  private:
  float _internal_power() const;
  void _internal_set_power(float value);
  public:

  // bool cycle = 5;
  void clear_cycle();
  bool cycle() const;
  void set_cycle(bool value);
  private:
  bool _internal_cycle() const;
  void _internal_set_cycle(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LratePolynomialDecayConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 decay_steps_;
  float init_learning_rate_;
  float ending_learning_rate_;
  float power_;
  bool cycle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2ftrain_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ModelProfileResults_TimesTotalEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelProfileResults_TimesTotalEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelProfileResults_TimesTotalEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  ModelProfileResults_TimesTotalEntry_DoNotUse();
  explicit ModelProfileResults_TimesTotalEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ModelProfileResults_TimesTotalEntry_DoNotUse& other);
  static const ModelProfileResults_TimesTotalEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ModelProfileResults_TimesTotalEntry_DoNotUse*>(&_ModelProfileResults_TimesTotalEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ModelProfileResults.TimesTotalEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto);
    return ::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class ModelProfileResults_TimesPerExampleEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelProfileResults_TimesPerExampleEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ModelProfileResults_TimesPerExampleEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  ModelProfileResults_TimesPerExampleEntry_DoNotUse();
  explicit ModelProfileResults_TimesPerExampleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ModelProfileResults_TimesPerExampleEntry_DoNotUse& other);
  static const ModelProfileResults_TimesPerExampleEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ModelProfileResults_TimesPerExampleEntry_DoNotUse*>(&_ModelProfileResults_TimesPerExampleEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ModelProfileResults.TimesPerExampleEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto);
    return ::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class ModelProfileResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ModelProfileResults) */ {
 public:
  inline ModelProfileResults() : ModelProfileResults(nullptr) {}
  virtual ~ModelProfileResults();

  ModelProfileResults(const ModelProfileResults& from);
  ModelProfileResults(ModelProfileResults&& from) noexcept
    : ModelProfileResults() {
    *this = ::std::move(from);
  }

  inline ModelProfileResults& operator=(const ModelProfileResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelProfileResults& operator=(ModelProfileResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelProfileResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelProfileResults* internal_default_instance() {
    return reinterpret_cast<const ModelProfileResults*>(
               &_ModelProfileResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ModelProfileResults& a, ModelProfileResults& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelProfileResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelProfileResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelProfileResults* New() const final {
    return CreateMaybeMessage<ModelProfileResults>(nullptr);
  }

  ModelProfileResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelProfileResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelProfileResults& from);
  void MergeFrom(const ModelProfileResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelProfileResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ModelProfileResults";
  }
  protected:
  explicit ModelProfileResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto);
    return ::descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHostLoadAveragesFieldNumber = 4,
    kTimesTotalFieldNumber = 10,
    kTimesPerExampleFieldNumber = 11,
    kHostnameFieldNumber = 1,
    kDeviceDescriptionsJsonFieldNumber = 3,
    kTfProfileTimingFieldNumber = 20,
    kTfProfileFlopsFieldNumber = 21,
    kTfTimelineFieldNumber = 22,
    kCreatedAtFieldNumber = 2,
  };
  // repeated float host_load_averages = 4;
  int host_load_averages_size() const;
  private:
  int _internal_host_load_averages_size() const;
  public:
  void clear_host_load_averages();
  private:
  float _internal_host_load_averages(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_host_load_averages() const;
  void _internal_add_host_load_averages(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_host_load_averages();
  public:
  float host_load_averages(int index) const;
  void set_host_load_averages(int index, float value);
  void add_host_load_averages(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      host_load_averages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_host_load_averages();

  // map<string, double> times_total = 10;
  int times_total_size() const;
  private:
  int _internal_times_total_size() const;
  public:
  void clear_times_total();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_times_total() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_times_total();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      times_total() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_times_total();

  // map<string, double> times_per_example = 11;
  int times_per_example_size() const;
  private:
  int _internal_times_per_example_size() const;
  public:
  void clear_times_per_example();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_times_per_example() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_times_per_example();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      times_per_example() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_times_per_example();

  // string hostname = 1;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string device_descriptions_json = 3;
  void clear_device_descriptions_json();
  const std::string& device_descriptions_json() const;
  void set_device_descriptions_json(const std::string& value);
  void set_device_descriptions_json(std::string&& value);
  void set_device_descriptions_json(const char* value);
  void set_device_descriptions_json(const char* value, size_t size);
  std::string* mutable_device_descriptions_json();
  std::string* release_device_descriptions_json();
  void set_allocated_device_descriptions_json(std::string* device_descriptions_json);
  private:
  const std::string& _internal_device_descriptions_json() const;
  void _internal_set_device_descriptions_json(const std::string& value);
  std::string* _internal_mutable_device_descriptions_json();
  public:

  // string tf_profile_timing = 20;
  void clear_tf_profile_timing();
  const std::string& tf_profile_timing() const;
  void set_tf_profile_timing(const std::string& value);
  void set_tf_profile_timing(std::string&& value);
  void set_tf_profile_timing(const char* value);
  void set_tf_profile_timing(const char* value, size_t size);
  std::string* mutable_tf_profile_timing();
  std::string* release_tf_profile_timing();
  void set_allocated_tf_profile_timing(std::string* tf_profile_timing);
  private:
  const std::string& _internal_tf_profile_timing() const;
  void _internal_set_tf_profile_timing(const std::string& value);
  std::string* _internal_mutable_tf_profile_timing();
  public:

  // string tf_profile_flops = 21;
  void clear_tf_profile_flops();
  const std::string& tf_profile_flops() const;
  void set_tf_profile_flops(const std::string& value);
  void set_tf_profile_flops(std::string&& value);
  void set_tf_profile_flops(const char* value);
  void set_tf_profile_flops(const char* value, size_t size);
  std::string* mutable_tf_profile_flops();
  std::string* release_tf_profile_flops();
  void set_allocated_tf_profile_flops(std::string* tf_profile_flops);
  private:
  const std::string& _internal_tf_profile_flops() const;
  void _internal_set_tf_profile_flops(const std::string& value);
  std::string* _internal_mutable_tf_profile_flops();
  public:

  // string tf_timeline = 22;
  void clear_tf_timeline();
  const std::string& tf_timeline() const;
  void set_tf_timeline(const std::string& value);
  void set_tf_timeline(std::string&& value);
  void set_tf_timeline(const char* value);
  void set_tf_timeline(const char* value, size_t size);
  std::string* mutable_tf_timeline();
  std::string* release_tf_timeline();
  void set_allocated_tf_timeline(std::string* tf_timeline);
  private:
  const std::string& _internal_tf_timeline() const;
  void _internal_set_tf_timeline(const std::string& value);
  std::string* _internal_mutable_tf_timeline();
  public:

  // .google.protobuf.Timestamp created_at = 2;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // @@protoc_insertion_point(class_scope:ModelProfileResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > host_load_averages_;
  mutable std::atomic<int> _host_load_averages_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ModelProfileResults_TimesTotalEntry_DoNotUse,
      std::string, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
      0 > times_total_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ModelProfileResults_TimesPerExampleEntry_DoNotUse,
      std::string, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
      0 > times_per_example_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_descriptions_json_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tf_profile_timing_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tf_profile_flops_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tf_timeline_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2ftrain_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrainConfig

// .ExpInfo exp_info = 1;
inline bool TrainConfig::_internal_has_exp_info() const {
  return this != internal_default_instance() && exp_info_ != nullptr;
}
inline bool TrainConfig::has_exp_info() const {
  return _internal_has_exp_info();
}
inline void TrainConfig::clear_exp_info() {
  if (GetArena() == nullptr && exp_info_ != nullptr) {
    delete exp_info_;
  }
  exp_info_ = nullptr;
}
inline const ::ExpInfo& TrainConfig::_internal_exp_info() const {
  const ::ExpInfo* p = exp_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ExpInfo*>(
      &::_ExpInfo_default_instance_);
}
inline const ::ExpInfo& TrainConfig::exp_info() const {
  // @@protoc_insertion_point(field_get:TrainConfig.exp_info)
  return _internal_exp_info();
}
inline void TrainConfig::unsafe_arena_set_allocated_exp_info(
    ::ExpInfo* exp_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exp_info_);
  }
  exp_info_ = exp_info;
  if (exp_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrainConfig.exp_info)
}
inline ::ExpInfo* TrainConfig::release_exp_info() {
  
  ::ExpInfo* temp = exp_info_;
  exp_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ExpInfo* TrainConfig::unsafe_arena_release_exp_info() {
  // @@protoc_insertion_point(field_release:TrainConfig.exp_info)
  
  ::ExpInfo* temp = exp_info_;
  exp_info_ = nullptr;
  return temp;
}
inline ::ExpInfo* TrainConfig::_internal_mutable_exp_info() {
  
  if (exp_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ExpInfo>(GetArena());
    exp_info_ = p;
  }
  return exp_info_;
}
inline ::ExpInfo* TrainConfig::mutable_exp_info() {
  // @@protoc_insertion_point(field_mutable:TrainConfig.exp_info)
  return _internal_mutable_exp_info();
}
inline void TrainConfig::set_allocated_exp_info(::ExpInfo* exp_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete exp_info_;
  }
  if (exp_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(exp_info);
    if (message_arena != submessage_arena) {
      exp_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exp_info, submessage_arena);
    }
    
  } else {
    
  }
  exp_info_ = exp_info;
  // @@protoc_insertion_point(field_set_allocated:TrainConfig.exp_info)
}

// .Freqs freqs = 2;
inline bool TrainConfig::_internal_has_freqs() const {
  return this != internal_default_instance() && freqs_ != nullptr;
}
inline bool TrainConfig::has_freqs() const {
  return _internal_has_freqs();
}
inline void TrainConfig::clear_freqs() {
  if (GetArena() == nullptr && freqs_ != nullptr) {
    delete freqs_;
  }
  freqs_ = nullptr;
}
inline const ::Freqs& TrainConfig::_internal_freqs() const {
  const ::Freqs* p = freqs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Freqs*>(
      &::_Freqs_default_instance_);
}
inline const ::Freqs& TrainConfig::freqs() const {
  // @@protoc_insertion_point(field_get:TrainConfig.freqs)
  return _internal_freqs();
}
inline void TrainConfig::unsafe_arena_set_allocated_freqs(
    ::Freqs* freqs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freqs_);
  }
  freqs_ = freqs;
  if (freqs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrainConfig.freqs)
}
inline ::Freqs* TrainConfig::release_freqs() {
  
  ::Freqs* temp = freqs_;
  freqs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Freqs* TrainConfig::unsafe_arena_release_freqs() {
  // @@protoc_insertion_point(field_release:TrainConfig.freqs)
  
  ::Freqs* temp = freqs_;
  freqs_ = nullptr;
  return temp;
}
inline ::Freqs* TrainConfig::_internal_mutable_freqs() {
  
  if (freqs_ == nullptr) {
    auto* p = CreateMaybeMessage<::Freqs>(GetArena());
    freqs_ = p;
  }
  return freqs_;
}
inline ::Freqs* TrainConfig::mutable_freqs() {
  // @@protoc_insertion_point(field_mutable:TrainConfig.freqs)
  return _internal_mutable_freqs();
}
inline void TrainConfig::set_allocated_freqs(::Freqs* freqs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete freqs_;
  }
  if (freqs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(freqs);
    if (message_arena != submessage_arena) {
      freqs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freqs, submessage_arena);
    }
    
  } else {
    
  }
  freqs_ = freqs;
  // @@protoc_insertion_point(field_set_allocated:TrainConfig.freqs)
}

// .Lrate lrate = 3;
inline bool TrainConfig::_internal_has_lrate() const {
  return this != internal_default_instance() && lrate_ != nullptr;
}
inline bool TrainConfig::has_lrate() const {
  return _internal_has_lrate();
}
inline void TrainConfig::clear_lrate() {
  if (GetArena() == nullptr && lrate_ != nullptr) {
    delete lrate_;
  }
  lrate_ = nullptr;
}
inline const ::Lrate& TrainConfig::_internal_lrate() const {
  const ::Lrate* p = lrate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Lrate*>(
      &::_Lrate_default_instance_);
}
inline const ::Lrate& TrainConfig::lrate() const {
  // @@protoc_insertion_point(field_get:TrainConfig.lrate)
  return _internal_lrate();
}
inline void TrainConfig::unsafe_arena_set_allocated_lrate(
    ::Lrate* lrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lrate_);
  }
  lrate_ = lrate;
  if (lrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrainConfig.lrate)
}
inline ::Lrate* TrainConfig::release_lrate() {
  
  ::Lrate* temp = lrate_;
  lrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Lrate* TrainConfig::unsafe_arena_release_lrate() {
  // @@protoc_insertion_point(field_release:TrainConfig.lrate)
  
  ::Lrate* temp = lrate_;
  lrate_ = nullptr;
  return temp;
}
inline ::Lrate* TrainConfig::_internal_mutable_lrate() {
  
  if (lrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::Lrate>(GetArena());
    lrate_ = p;
  }
  return lrate_;
}
inline ::Lrate* TrainConfig::mutable_lrate() {
  // @@protoc_insertion_point(field_mutable:TrainConfig.lrate)
  return _internal_mutable_lrate();
}
inline void TrainConfig::set_allocated_lrate(::Lrate* lrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lrate_;
  }
  if (lrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lrate);
    if (message_arena != submessage_arena) {
      lrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lrate, submessage_arena);
    }
    
  } else {
    
  }
  lrate_ = lrate;
  // @@protoc_insertion_point(field_set_allocated:TrainConfig.lrate)
}

// .DataParams data_params = 4;
inline bool TrainConfig::_internal_has_data_params() const {
  return this != internal_default_instance() && data_params_ != nullptr;
}
inline bool TrainConfig::has_data_params() const {
  return _internal_has_data_params();
}
inline void TrainConfig::clear_data_params() {
  if (GetArena() == nullptr && data_params_ != nullptr) {
    delete data_params_;
  }
  data_params_ = nullptr;
}
inline const ::DataParams& TrainConfig::_internal_data_params() const {
  const ::DataParams* p = data_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataParams*>(
      &::_DataParams_default_instance_);
}
inline const ::DataParams& TrainConfig::data_params() const {
  // @@protoc_insertion_point(field_get:TrainConfig.data_params)
  return _internal_data_params();
}
inline void TrainConfig::unsafe_arena_set_allocated_data_params(
    ::DataParams* data_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_params_);
  }
  data_params_ = data_params;
  if (data_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrainConfig.data_params)
}
inline ::DataParams* TrainConfig::release_data_params() {
  
  ::DataParams* temp = data_params_;
  data_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataParams* TrainConfig::unsafe_arena_release_data_params() {
  // @@protoc_insertion_point(field_release:TrainConfig.data_params)
  
  ::DataParams* temp = data_params_;
  data_params_ = nullptr;
  return temp;
}
inline ::DataParams* TrainConfig::_internal_mutable_data_params() {
  
  if (data_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataParams>(GetArena());
    data_params_ = p;
  }
  return data_params_;
}
inline ::DataParams* TrainConfig::mutable_data_params() {
  // @@protoc_insertion_point(field_mutable:TrainConfig.data_params)
  return _internal_mutable_data_params();
}
inline void TrainConfig::set_allocated_data_params(::DataParams* data_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_params_;
  }
  if (data_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data_params);
    if (message_arena != submessage_arena) {
      data_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_params, submessage_arena);
    }
    
  } else {
    
  }
  data_params_ = data_params;
  // @@protoc_insertion_point(field_set_allocated:TrainConfig.data_params)
}

// string job_name = 5;
inline void TrainConfig::clear_job_name() {
  job_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TrainConfig::job_name() const {
  // @@protoc_insertion_point(field_get:TrainConfig.job_name)
  return _internal_job_name();
}
inline void TrainConfig::set_job_name(const std::string& value) {
  _internal_set_job_name(value);
  // @@protoc_insertion_point(field_set:TrainConfig.job_name)
}
inline std::string* TrainConfig::mutable_job_name() {
  // @@protoc_insertion_point(field_mutable:TrainConfig.job_name)
  return _internal_mutable_job_name();
}
inline const std::string& TrainConfig::_internal_job_name() const {
  return job_name_.Get();
}
inline void TrainConfig::_internal_set_job_name(const std::string& value) {
  
  job_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrainConfig::set_job_name(std::string&& value) {
  
  job_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TrainConfig.job_name)
}
inline void TrainConfig::set_job_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TrainConfig.job_name)
}
inline void TrainConfig::set_job_name(const char* value,
    size_t size) {
  
  job_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TrainConfig.job_name)
}
inline std::string* TrainConfig::_internal_mutable_job_name() {
  
  return job_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrainConfig::release_job_name() {
  // @@protoc_insertion_point(field_release:TrainConfig.job_name)
  return job_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrainConfig::set_allocated_job_name(std::string* job_name) {
  if (job_name != nullptr) {
    
  } else {
    
  }
  job_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TrainConfig.job_name)
}

// bool clip_gradient = 6;
inline void TrainConfig::clear_clip_gradient() {
  clip_gradient_ = false;
}
inline bool TrainConfig::_internal_clip_gradient() const {
  return clip_gradient_;
}
inline bool TrainConfig::clip_gradient() const {
  // @@protoc_insertion_point(field_get:TrainConfig.clip_gradient)
  return _internal_clip_gradient();
}
inline void TrainConfig::_internal_set_clip_gradient(bool value) {
  
  clip_gradient_ = value;
}
inline void TrainConfig::set_clip_gradient(bool value) {
  _internal_set_clip_gradient(value);
  // @@protoc_insertion_point(field_set:TrainConfig.clip_gradient)
}

// float gradient_max = 7;
inline void TrainConfig::clear_gradient_max() {
  gradient_max_ = 0;
}
inline float TrainConfig::_internal_gradient_max() const {
  return gradient_max_;
}
inline float TrainConfig::gradient_max() const {
  // @@protoc_insertion_point(field_get:TrainConfig.gradient_max)
  return _internal_gradient_max();
}
inline void TrainConfig::_internal_set_gradient_max(float value) {
  
  gradient_max_ = value;
}
inline void TrainConfig::set_gradient_max(float value) {
  _internal_set_gradient_max(value);
  // @@protoc_insertion_point(field_set:TrainConfig.gradient_max)
}

// -------------------------------------------------------------------

// ExpInfo

// int64 eid = 1;
inline void ExpInfo::clear_eid() {
  eid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExpInfo::_internal_eid() const {
  return eid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExpInfo::eid() const {
  // @@protoc_insertion_point(field_get:ExpInfo.eid)
  return _internal_eid();
}
inline void ExpInfo::_internal_set_eid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  eid_ = value;
}
inline void ExpInfo::set_eid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_eid(value);
  // @@protoc_insertion_point(field_set:ExpInfo.eid)
}

// repeated .LoadCheckpointScope load_checkpoint_scopes = 2;
inline int ExpInfo::_internal_load_checkpoint_scopes_size() const {
  return load_checkpoint_scopes_.size();
}
inline int ExpInfo::load_checkpoint_scopes_size() const {
  return _internal_load_checkpoint_scopes_size();
}
inline ::LoadCheckpointScope* ExpInfo::mutable_load_checkpoint_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:ExpInfo.load_checkpoint_scopes)
  return load_checkpoint_scopes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LoadCheckpointScope >*
ExpInfo::mutable_load_checkpoint_scopes() {
  // @@protoc_insertion_point(field_mutable_list:ExpInfo.load_checkpoint_scopes)
  return &load_checkpoint_scopes_;
}
inline const ::LoadCheckpointScope& ExpInfo::_internal_load_checkpoint_scopes(int index) const {
  return load_checkpoint_scopes_.Get(index);
}
inline const ::LoadCheckpointScope& ExpInfo::load_checkpoint_scopes(int index) const {
  // @@protoc_insertion_point(field_get:ExpInfo.load_checkpoint_scopes)
  return _internal_load_checkpoint_scopes(index);
}
inline ::LoadCheckpointScope* ExpInfo::_internal_add_load_checkpoint_scopes() {
  return load_checkpoint_scopes_.Add();
}
inline ::LoadCheckpointScope* ExpInfo::add_load_checkpoint_scopes() {
  // @@protoc_insertion_point(field_add:ExpInfo.load_checkpoint_scopes)
  return _internal_add_load_checkpoint_scopes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LoadCheckpointScope >&
ExpInfo::load_checkpoint_scopes() const {
  // @@protoc_insertion_point(field_list:ExpInfo.load_checkpoint_scopes)
  return load_checkpoint_scopes_;
}

// string exp_type = 3;
inline void ExpInfo::clear_exp_type() {
  exp_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExpInfo::exp_type() const {
  // @@protoc_insertion_point(field_get:ExpInfo.exp_type)
  return _internal_exp_type();
}
inline void ExpInfo::set_exp_type(const std::string& value) {
  _internal_set_exp_type(value);
  // @@protoc_insertion_point(field_set:ExpInfo.exp_type)
}
inline std::string* ExpInfo::mutable_exp_type() {
  // @@protoc_insertion_point(field_mutable:ExpInfo.exp_type)
  return _internal_mutable_exp_type();
}
inline const std::string& ExpInfo::_internal_exp_type() const {
  return exp_type_.Get();
}
inline void ExpInfo::_internal_set_exp_type(const std::string& value) {
  
  exp_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExpInfo::set_exp_type(std::string&& value) {
  
  exp_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ExpInfo.exp_type)
}
inline void ExpInfo::set_exp_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exp_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ExpInfo.exp_type)
}
inline void ExpInfo::set_exp_type(const char* value,
    size_t size) {
  
  exp_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ExpInfo.exp_type)
}
inline std::string* ExpInfo::_internal_mutable_exp_type() {
  
  return exp_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExpInfo::release_exp_type() {
  // @@protoc_insertion_point(field_release:ExpInfo.exp_type)
  return exp_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExpInfo::set_allocated_exp_type(std::string* exp_type) {
  if (exp_type != nullptr) {
    
  } else {
    
  }
  exp_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exp_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ExpInfo.exp_type)
}

// string trainer_type = 4;
inline void ExpInfo::clear_trainer_type() {
  trainer_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExpInfo::trainer_type() const {
  // @@protoc_insertion_point(field_get:ExpInfo.trainer_type)
  return _internal_trainer_type();
}
inline void ExpInfo::set_trainer_type(const std::string& value) {
  _internal_set_trainer_type(value);
  // @@protoc_insertion_point(field_set:ExpInfo.trainer_type)
}
inline std::string* ExpInfo::mutable_trainer_type() {
  // @@protoc_insertion_point(field_mutable:ExpInfo.trainer_type)
  return _internal_mutable_trainer_type();
}
inline const std::string& ExpInfo::_internal_trainer_type() const {
  return trainer_type_.Get();
}
inline void ExpInfo::_internal_set_trainer_type(const std::string& value) {
  
  trainer_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExpInfo::set_trainer_type(std::string&& value) {
  
  trainer_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ExpInfo.trainer_type)
}
inline void ExpInfo::set_trainer_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trainer_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ExpInfo.trainer_type)
}
inline void ExpInfo::set_trainer_type(const char* value,
    size_t size) {
  
  trainer_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ExpInfo.trainer_type)
}
inline std::string* ExpInfo::_internal_mutable_trainer_type() {
  
  return trainer_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExpInfo::release_trainer_type() {
  // @@protoc_insertion_point(field_release:ExpInfo.trainer_type)
  return trainer_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExpInfo::set_allocated_trainer_type(std::string* trainer_type) {
  if (trainer_type != nullptr) {
    
  } else {
    
  }
  trainer_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trainer_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ExpInfo.trainer_type)
}

// repeated .EvalConfig evaluation = 5;
inline int ExpInfo::_internal_evaluation_size() const {
  return evaluation_.size();
}
inline int ExpInfo::evaluation_size() const {
  return _internal_evaluation_size();
}
inline void ExpInfo::clear_evaluation() {
  evaluation_.Clear();
}
inline ::EvalConfig* ExpInfo::mutable_evaluation(int index) {
  // @@protoc_insertion_point(field_mutable:ExpInfo.evaluation)
  return evaluation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EvalConfig >*
ExpInfo::mutable_evaluation() {
  // @@protoc_insertion_point(field_mutable_list:ExpInfo.evaluation)
  return &evaluation_;
}
inline const ::EvalConfig& ExpInfo::_internal_evaluation(int index) const {
  return evaluation_.Get(index);
}
inline const ::EvalConfig& ExpInfo::evaluation(int index) const {
  // @@protoc_insertion_point(field_get:ExpInfo.evaluation)
  return _internal_evaluation(index);
}
inline ::EvalConfig* ExpInfo::_internal_add_evaluation() {
  return evaluation_.Add();
}
inline ::EvalConfig* ExpInfo::add_evaluation() {
  // @@protoc_insertion_point(field_add:ExpInfo.evaluation)
  return _internal_add_evaluation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EvalConfig >&
ExpInfo::evaluation() const {
  // @@protoc_insertion_point(field_list:ExpInfo.evaluation)
  return evaluation_;
}

// string device_type = 6;
inline void ExpInfo::clear_device_type() {
  device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExpInfo::device_type() const {
  // @@protoc_insertion_point(field_get:ExpInfo.device_type)
  return _internal_device_type();
}
inline void ExpInfo::set_device_type(const std::string& value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:ExpInfo.device_type)
}
inline std::string* ExpInfo::mutable_device_type() {
  // @@protoc_insertion_point(field_mutable:ExpInfo.device_type)
  return _internal_mutable_device_type();
}
inline const std::string& ExpInfo::_internal_device_type() const {
  return device_type_.Get();
}
inline void ExpInfo::_internal_set_device_type(const std::string& value) {
  
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExpInfo::set_device_type(std::string&& value) {
  
  device_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ExpInfo.device_type)
}
inline void ExpInfo::set_device_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ExpInfo.device_type)
}
inline void ExpInfo::set_device_type(const char* value,
    size_t size) {
  
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ExpInfo.device_type)
}
inline std::string* ExpInfo::_internal_mutable_device_type() {
  
  return device_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExpInfo::release_device_type() {
  // @@protoc_insertion_point(field_release:ExpInfo.device_type)
  return device_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExpInfo::set_allocated_device_type(std::string* device_type) {
  if (device_type != nullptr) {
    
  } else {
    
  }
  device_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ExpInfo.device_type)
}

// int32 num_devices = 7;
inline void ExpInfo::clear_num_devices() {
  num_devices_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExpInfo::_internal_num_devices() const {
  return num_devices_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExpInfo::num_devices() const {
  // @@protoc_insertion_point(field_get:ExpInfo.num_devices)
  return _internal_num_devices();
}
inline void ExpInfo::_internal_set_num_devices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_devices_ = value;
}
inline void ExpInfo::set_num_devices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_devices(value);
  // @@protoc_insertion_point(field_set:ExpInfo.num_devices)
}

// int64 seed = 8;
inline void ExpInfo::clear_seed() {
  seed_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExpInfo::_internal_seed() const {
  return seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExpInfo::seed() const {
  // @@protoc_insertion_point(field_get:ExpInfo.seed)
  return _internal_seed();
}
inline void ExpInfo::_internal_set_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seed_ = value;
}
inline void ExpInfo::set_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:ExpInfo.seed)
}

// string note = 9;
inline void ExpInfo::clear_note() {
  note_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExpInfo::note() const {
  // @@protoc_insertion_point(field_get:ExpInfo.note)
  return _internal_note();
}
inline void ExpInfo::set_note(const std::string& value) {
  _internal_set_note(value);
  // @@protoc_insertion_point(field_set:ExpInfo.note)
}
inline std::string* ExpInfo::mutable_note() {
  // @@protoc_insertion_point(field_mutable:ExpInfo.note)
  return _internal_mutable_note();
}
inline const std::string& ExpInfo::_internal_note() const {
  return note_.Get();
}
inline void ExpInfo::_internal_set_note(const std::string& value) {
  
  note_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExpInfo::set_note(std::string&& value) {
  
  note_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ExpInfo.note)
}
inline void ExpInfo::set_note(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  note_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ExpInfo.note)
}
inline void ExpInfo::set_note(const char* value,
    size_t size) {
  
  note_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ExpInfo.note)
}
inline std::string* ExpInfo::_internal_mutable_note() {
  
  return note_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExpInfo::release_note() {
  // @@protoc_insertion_point(field_release:ExpInfo.note)
  return note_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExpInfo::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    
  } else {
    
  }
  note_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ExpInfo.note)
}

// string email = 10;
inline void ExpInfo::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExpInfo::email() const {
  // @@protoc_insertion_point(field_get:ExpInfo.email)
  return _internal_email();
}
inline void ExpInfo::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:ExpInfo.email)
}
inline std::string* ExpInfo::mutable_email() {
  // @@protoc_insertion_point(field_mutable:ExpInfo.email)
  return _internal_mutable_email();
}
inline const std::string& ExpInfo::_internal_email() const {
  return email_.Get();
}
inline void ExpInfo::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExpInfo::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ExpInfo.email)
}
inline void ExpInfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ExpInfo.email)
}
inline void ExpInfo::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ExpInfo.email)
}
inline std::string* ExpInfo::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExpInfo::release_email() {
  // @@protoc_insertion_point(field_release:ExpInfo.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExpInfo::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ExpInfo.email)
}

// int64 num_epoch = 11;
inline void ExpInfo::clear_num_epoch() {
  num_epoch_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExpInfo::_internal_num_epoch() const {
  return num_epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExpInfo::num_epoch() const {
  // @@protoc_insertion_point(field_get:ExpInfo.num_epoch)
  return _internal_num_epoch();
}
inline void ExpInfo::_internal_set_num_epoch(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_epoch_ = value;
}
inline void ExpInfo::set_num_epoch(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_epoch(value);
  // @@protoc_insertion_point(field_set:ExpInfo.num_epoch)
}

// int64 num_minibatch = 12;
inline void ExpInfo::clear_num_minibatch() {
  num_minibatch_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExpInfo::_internal_num_minibatch() const {
  return num_minibatch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExpInfo::num_minibatch() const {
  // @@protoc_insertion_point(field_get:ExpInfo.num_minibatch)
  return _internal_num_minibatch();
}
inline void ExpInfo::_internal_set_num_minibatch(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_minibatch_ = value;
}
inline void ExpInfo::set_num_minibatch(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_minibatch(value);
  // @@protoc_insertion_point(field_set:ExpInfo.num_minibatch)
}

// string git_hash = 13;
inline void ExpInfo::clear_git_hash() {
  git_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExpInfo::git_hash() const {
  // @@protoc_insertion_point(field_get:ExpInfo.git_hash)
  return _internal_git_hash();
}
inline void ExpInfo::set_git_hash(const std::string& value) {
  _internal_set_git_hash(value);
  // @@protoc_insertion_point(field_set:ExpInfo.git_hash)
}
inline std::string* ExpInfo::mutable_git_hash() {
  // @@protoc_insertion_point(field_mutable:ExpInfo.git_hash)
  return _internal_mutable_git_hash();
}
inline const std::string& ExpInfo::_internal_git_hash() const {
  return git_hash_.Get();
}
inline void ExpInfo::_internal_set_git_hash(const std::string& value) {
  
  git_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExpInfo::set_git_hash(std::string&& value) {
  
  git_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ExpInfo.git_hash)
}
inline void ExpInfo::set_git_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  git_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ExpInfo.git_hash)
}
inline void ExpInfo::set_git_hash(const char* value,
    size_t size) {
  
  git_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ExpInfo.git_hash)
}
inline std::string* ExpInfo::_internal_mutable_git_hash() {
  
  return git_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExpInfo::release_git_hash() {
  // @@protoc_insertion_point(field_release:ExpInfo.git_hash)
  return git_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExpInfo::set_allocated_git_hash(std::string* git_hash) {
  if (git_hash != nullptr) {
    
  } else {
    
  }
  git_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), git_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ExpInfo.git_hash)
}

// bool is_celery = 14;
inline void ExpInfo::clear_is_celery() {
  is_celery_ = false;
}
inline bool ExpInfo::_internal_is_celery() const {
  return is_celery_;
}
inline bool ExpInfo::is_celery() const {
  // @@protoc_insertion_point(field_get:ExpInfo.is_celery)
  return _internal_is_celery();
}
inline void ExpInfo::_internal_set_is_celery(bool value) {
  
  is_celery_ = value;
}
inline void ExpInfo::set_is_celery(bool value) {
  _internal_set_is_celery(value);
  // @@protoc_insertion_point(field_set:ExpInfo.is_celery)
}

// bool run_evals_inline = 15;
inline void ExpInfo::clear_run_evals_inline() {
  run_evals_inline_ = false;
}
inline bool ExpInfo::_internal_run_evals_inline() const {
  return run_evals_inline_;
}
inline bool ExpInfo::run_evals_inline() const {
  // @@protoc_insertion_point(field_get:ExpInfo.run_evals_inline)
  return _internal_run_evals_inline();
}
inline void ExpInfo::_internal_set_run_evals_inline(bool value) {
  
  run_evals_inline_ = value;
}
inline void ExpInfo::set_run_evals_inline(bool value) {
  _internal_set_run_evals_inline(value);
  // @@protoc_insertion_point(field_set:ExpInfo.run_evals_inline)
}

// bool run_final_evals = 16;
inline void ExpInfo::clear_run_final_evals() {
  run_final_evals_ = false;
}
inline bool ExpInfo::_internal_run_final_evals() const {
  return run_final_evals_;
}
inline bool ExpInfo::run_final_evals() const {
  // @@protoc_insertion_point(field_get:ExpInfo.run_final_evals)
  return _internal_run_final_evals();
}
inline void ExpInfo::_internal_set_run_final_evals(bool value) {
  
  run_final_evals_ = value;
}
inline void ExpInfo::set_run_final_evals(bool value) {
  _internal_set_run_final_evals(value);
  // @@protoc_insertion_point(field_set:ExpInfo.run_final_evals)
}

// -------------------------------------------------------------------

// EvalConfig

// string config_runner_class = 1;
inline void EvalConfig::clear_config_runner_class() {
  config_runner_class_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EvalConfig::config_runner_class() const {
  // @@protoc_insertion_point(field_get:EvalConfig.config_runner_class)
  return _internal_config_runner_class();
}
inline void EvalConfig::set_config_runner_class(const std::string& value) {
  _internal_set_config_runner_class(value);
  // @@protoc_insertion_point(field_set:EvalConfig.config_runner_class)
}
inline std::string* EvalConfig::mutable_config_runner_class() {
  // @@protoc_insertion_point(field_mutable:EvalConfig.config_runner_class)
  return _internal_mutable_config_runner_class();
}
inline const std::string& EvalConfig::_internal_config_runner_class() const {
  return config_runner_class_.Get();
}
inline void EvalConfig::_internal_set_config_runner_class(const std::string& value) {
  
  config_runner_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EvalConfig::set_config_runner_class(std::string&& value) {
  
  config_runner_class_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:EvalConfig.config_runner_class)
}
inline void EvalConfig::set_config_runner_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_runner_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:EvalConfig.config_runner_class)
}
inline void EvalConfig::set_config_runner_class(const char* value,
    size_t size) {
  
  config_runner_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:EvalConfig.config_runner_class)
}
inline std::string* EvalConfig::_internal_mutable_config_runner_class() {
  
  return config_runner_class_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EvalConfig::release_config_runner_class() {
  // @@protoc_insertion_point(field_release:EvalConfig.config_runner_class)
  return config_runner_class_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EvalConfig::set_allocated_config_runner_class(std::string* config_runner_class) {
  if (config_runner_class != nullptr) {
    
  } else {
    
  }
  config_runner_class_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_runner_class,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:EvalConfig.config_runner_class)
}

// .google.protobuf.Struct config = 2;
inline bool EvalConfig::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool EvalConfig::has_config() const {
  return _internal_has_config();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& EvalConfig::_internal_config() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& EvalConfig::config() const {
  // @@protoc_insertion_point(field_get:EvalConfig.config)
  return _internal_config();
}
inline void EvalConfig::unsafe_arena_set_allocated_config(
    PROTOBUF_NAMESPACE_ID::Struct* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EvalConfig.config)
}
inline PROTOBUF_NAMESPACE_ID::Struct* EvalConfig::release_config() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = config_;
  config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* EvalConfig::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:EvalConfig.config)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = config_;
  config_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* EvalConfig::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    config_ = p;
  }
  return config_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* EvalConfig::mutable_config() {
  // @@protoc_insertion_point(field_mutable:EvalConfig.config)
  return _internal_mutable_config();
}
inline void EvalConfig::set_allocated_config(PROTOBUF_NAMESPACE_ID::Struct* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config)->GetArena();
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:EvalConfig.config)
}

// -------------------------------------------------------------------

// DataParams

// string cfg = 1;
inline void DataParams::clear_cfg() {
  cfg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataParams::cfg() const {
  // @@protoc_insertion_point(field_get:DataParams.cfg)
  return _internal_cfg();
}
inline void DataParams::set_cfg(const std::string& value) {
  _internal_set_cfg(value);
  // @@protoc_insertion_point(field_set:DataParams.cfg)
}
inline std::string* DataParams::mutable_cfg() {
  // @@protoc_insertion_point(field_mutable:DataParams.cfg)
  return _internal_mutable_cfg();
}
inline const std::string& DataParams::_internal_cfg() const {
  return cfg_.Get();
}
inline void DataParams::_internal_set_cfg(const std::string& value) {
  
  cfg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataParams::set_cfg(std::string&& value) {
  
  cfg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DataParams.cfg)
}
inline void DataParams::set_cfg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cfg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DataParams.cfg)
}
inline void DataParams::set_cfg(const char* value,
    size_t size) {
  
  cfg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DataParams.cfg)
}
inline std::string* DataParams::_internal_mutable_cfg() {
  
  return cfg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataParams::release_cfg() {
  // @@protoc_insertion_point(field_release:DataParams.cfg)
  return cfg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataParams::set_allocated_cfg(std::string* cfg) {
  if (cfg != nullptr) {
    
  } else {
    
  }
  cfg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cfg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DataParams.cfg)
}

// .google.protobuf.Struct cfg_args = 2;
inline bool DataParams::_internal_has_cfg_args() const {
  return this != internal_default_instance() && cfg_args_ != nullptr;
}
inline bool DataParams::has_cfg_args() const {
  return _internal_has_cfg_args();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& DataParams::_internal_cfg_args() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = cfg_args_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& DataParams::cfg_args() const {
  // @@protoc_insertion_point(field_get:DataParams.cfg_args)
  return _internal_cfg_args();
}
inline void DataParams::unsafe_arena_set_allocated_cfg_args(
    PROTOBUF_NAMESPACE_ID::Struct* cfg_args) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cfg_args_);
  }
  cfg_args_ = cfg_args;
  if (cfg_args) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataParams.cfg_args)
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataParams::release_cfg_args() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = cfg_args_;
  cfg_args_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataParams::unsafe_arena_release_cfg_args() {
  // @@protoc_insertion_point(field_release:DataParams.cfg_args)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = cfg_args_;
  cfg_args_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataParams::_internal_mutable_cfg_args() {
  
  if (cfg_args_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    cfg_args_ = p;
  }
  return cfg_args_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataParams::mutable_cfg_args() {
  // @@protoc_insertion_point(field_mutable:DataParams.cfg_args)
  return _internal_mutable_cfg_args();
}
inline void DataParams::set_allocated_cfg_args(PROTOBUF_NAMESPACE_ID::Struct* cfg_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cfg_args_);
  }
  if (cfg_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cfg_args)->GetArena();
    if (message_arena != submessage_arena) {
      cfg_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cfg_args, submessage_arena);
    }
    
  } else {
    
  }
  cfg_args_ = cfg_args;
  // @@protoc_insertion_point(field_set_allocated:DataParams.cfg_args)
}

// .google.protobuf.Struct input_args = 3;
inline bool DataParams::_internal_has_input_args() const {
  return this != internal_default_instance() && input_args_ != nullptr;
}
inline bool DataParams::has_input_args() const {
  return _internal_has_input_args();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& DataParams::_internal_input_args() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = input_args_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& DataParams::input_args() const {
  // @@protoc_insertion_point(field_get:DataParams.input_args)
  return _internal_input_args();
}
inline void DataParams::unsafe_arena_set_allocated_input_args(
    PROTOBUF_NAMESPACE_ID::Struct* input_args) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_args_);
  }
  input_args_ = input_args;
  if (input_args) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataParams.input_args)
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataParams::release_input_args() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = input_args_;
  input_args_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataParams::unsafe_arena_release_input_args() {
  // @@protoc_insertion_point(field_release:DataParams.input_args)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = input_args_;
  input_args_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataParams::_internal_mutable_input_args() {
  
  if (input_args_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    input_args_ = p;
  }
  return input_args_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataParams::mutable_input_args() {
  // @@protoc_insertion_point(field_mutable:DataParams.input_args)
  return _internal_mutable_input_args();
}
inline void DataParams::set_allocated_input_args(PROTOBUF_NAMESPACE_ID::Struct* input_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_args_);
  }
  if (input_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_args)->GetArena();
    if (message_arena != submessage_arena) {
      input_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_args, submessage_arena);
    }
    
  } else {
    
  }
  input_args_ = input_args;
  // @@protoc_insertion_point(field_set_allocated:DataParams.input_args)
}

// .google.protobuf.Struct optimizer_args = 4;
inline bool DataParams::_internal_has_optimizer_args() const {
  return this != internal_default_instance() && optimizer_args_ != nullptr;
}
inline bool DataParams::has_optimizer_args() const {
  return _internal_has_optimizer_args();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& DataParams::_internal_optimizer_args() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = optimizer_args_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& DataParams::optimizer_args() const {
  // @@protoc_insertion_point(field_get:DataParams.optimizer_args)
  return _internal_optimizer_args();
}
inline void DataParams::unsafe_arena_set_allocated_optimizer_args(
    PROTOBUF_NAMESPACE_ID::Struct* optimizer_args) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimizer_args_);
  }
  optimizer_args_ = optimizer_args;
  if (optimizer_args) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataParams.optimizer_args)
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataParams::release_optimizer_args() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = optimizer_args_;
  optimizer_args_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataParams::unsafe_arena_release_optimizer_args() {
  // @@protoc_insertion_point(field_release:DataParams.optimizer_args)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = optimizer_args_;
  optimizer_args_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataParams::_internal_mutable_optimizer_args() {
  
  if (optimizer_args_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    optimizer_args_ = p;
  }
  return optimizer_args_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataParams::mutable_optimizer_args() {
  // @@protoc_insertion_point(field_mutable:DataParams.optimizer_args)
  return _internal_mutable_optimizer_args();
}
inline void DataParams::set_allocated_optimizer_args(PROTOBUF_NAMESPACE_ID::Struct* optimizer_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimizer_args_);
  }
  if (optimizer_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimizer_args)->GetArena();
    if (message_arena != submessage_arena) {
      optimizer_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optimizer_args, submessage_arena);
    }
    
  } else {
    
  }
  optimizer_args_ = optimizer_args;
  // @@protoc_insertion_point(field_set_allocated:DataParams.optimizer_args)
}

// string dataset = 5;
inline void DataParams::clear_dataset() {
  dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataParams::dataset() const {
  // @@protoc_insertion_point(field_get:DataParams.dataset)
  return _internal_dataset();
}
inline void DataParams::set_dataset(const std::string& value) {
  _internal_set_dataset(value);
  // @@protoc_insertion_point(field_set:DataParams.dataset)
}
inline std::string* DataParams::mutable_dataset() {
  // @@protoc_insertion_point(field_mutable:DataParams.dataset)
  return _internal_mutable_dataset();
}
inline const std::string& DataParams::_internal_dataset() const {
  return dataset_.Get();
}
inline void DataParams::_internal_set_dataset(const std::string& value) {
  
  dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataParams::set_dataset(std::string&& value) {
  
  dataset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DataParams.dataset)
}
inline void DataParams::set_dataset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DataParams.dataset)
}
inline void DataParams::set_dataset(const char* value,
    size_t size) {
  
  dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DataParams.dataset)
}
inline std::string* DataParams::_internal_mutable_dataset() {
  
  return dataset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataParams::release_dataset() {
  // @@protoc_insertion_point(field_release:DataParams.dataset)
  return dataset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataParams::set_allocated_dataset(std::string* dataset) {
  if (dataset != nullptr) {
    
  } else {
    
  }
  dataset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DataParams.dataset)
}

// int64 saved_output_eid = 6 [deprecated = true];
inline void DataParams::clear_saved_output_eid() {
  saved_output_eid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DataParams::_internal_saved_output_eid() const {
  return saved_output_eid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DataParams::saved_output_eid() const {
  // @@protoc_insertion_point(field_get:DataParams.saved_output_eid)
  return _internal_saved_output_eid();
}
inline void DataParams::_internal_set_saved_output_eid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  saved_output_eid_ = value;
}
inline void DataParams::set_saved_output_eid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_saved_output_eid(value);
  // @@protoc_insertion_point(field_set:DataParams.saved_output_eid)
}

// string data_layername = 7 [deprecated = true];
inline void DataParams::clear_data_layername() {
  data_layername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataParams::data_layername() const {
  // @@protoc_insertion_point(field_get:DataParams.data_layername)
  return _internal_data_layername();
}
inline void DataParams::set_data_layername(const std::string& value) {
  _internal_set_data_layername(value);
  // @@protoc_insertion_point(field_set:DataParams.data_layername)
}
inline std::string* DataParams::mutable_data_layername() {
  // @@protoc_insertion_point(field_mutable:DataParams.data_layername)
  return _internal_mutable_data_layername();
}
inline const std::string& DataParams::_internal_data_layername() const {
  return data_layername_.Get();
}
inline void DataParams::_internal_set_data_layername(const std::string& value) {
  
  data_layername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataParams::set_data_layername(std::string&& value) {
  
  data_layername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DataParams.data_layername)
}
inline void DataParams::set_data_layername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_layername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DataParams.data_layername)
}
inline void DataParams::set_data_layername(const char* value,
    size_t size) {
  
  data_layername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DataParams.data_layername)
}
inline std::string* DataParams::_internal_mutable_data_layername() {
  
  return data_layername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataParams::release_data_layername() {
  // @@protoc_insertion_point(field_release:DataParams.data_layername)
  return data_layername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataParams::set_allocated_data_layername(std::string* data_layername) {
  if (data_layername != nullptr) {
    
  } else {
    
  }
  data_layername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_layername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DataParams.data_layername)
}

// string test_data_layername = 8 [deprecated = true];
inline void DataParams::clear_test_data_layername() {
  test_data_layername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataParams::test_data_layername() const {
  // @@protoc_insertion_point(field_get:DataParams.test_data_layername)
  return _internal_test_data_layername();
}
inline void DataParams::set_test_data_layername(const std::string& value) {
  _internal_set_test_data_layername(value);
  // @@protoc_insertion_point(field_set:DataParams.test_data_layername)
}
inline std::string* DataParams::mutable_test_data_layername() {
  // @@protoc_insertion_point(field_mutable:DataParams.test_data_layername)
  return _internal_mutable_test_data_layername();
}
inline const std::string& DataParams::_internal_test_data_layername() const {
  return test_data_layername_.Get();
}
inline void DataParams::_internal_set_test_data_layername(const std::string& value) {
  
  test_data_layername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataParams::set_test_data_layername(std::string&& value) {
  
  test_data_layername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DataParams.test_data_layername)
}
inline void DataParams::set_test_data_layername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test_data_layername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DataParams.test_data_layername)
}
inline void DataParams::set_test_data_layername(const char* value,
    size_t size) {
  
  test_data_layername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DataParams.test_data_layername)
}
inline std::string* DataParams::_internal_mutable_test_data_layername() {
  
  return test_data_layername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataParams::release_test_data_layername() {
  // @@protoc_insertion_point(field_release:DataParams.test_data_layername)
  return test_data_layername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataParams::set_allocated_test_data_layername(std::string* test_data_layername) {
  if (test_data_layername != nullptr) {
    
  } else {
    
  }
  test_data_layername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test_data_layername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DataParams.test_data_layername)
}

// .DataProviderParams data_provider_params = 9;
inline bool DataParams::_internal_has_data_provider_params() const {
  return this != internal_default_instance() && data_provider_params_ != nullptr;
}
inline bool DataParams::has_data_provider_params() const {
  return _internal_has_data_provider_params();
}
inline const ::DataProviderParams& DataParams::_internal_data_provider_params() const {
  const ::DataProviderParams* p = data_provider_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataProviderParams*>(
      &::_DataProviderParams_default_instance_);
}
inline const ::DataProviderParams& DataParams::data_provider_params() const {
  // @@protoc_insertion_point(field_get:DataParams.data_provider_params)
  return _internal_data_provider_params();
}
inline void DataParams::unsafe_arena_set_allocated_data_provider_params(
    ::DataProviderParams* data_provider_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_provider_params_);
  }
  data_provider_params_ = data_provider_params;
  if (data_provider_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataParams.data_provider_params)
}
inline ::DataProviderParams* DataParams::release_data_provider_params() {
  
  ::DataProviderParams* temp = data_provider_params_;
  data_provider_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataProviderParams* DataParams::unsafe_arena_release_data_provider_params() {
  // @@protoc_insertion_point(field_release:DataParams.data_provider_params)
  
  ::DataProviderParams* temp = data_provider_params_;
  data_provider_params_ = nullptr;
  return temp;
}
inline ::DataProviderParams* DataParams::_internal_mutable_data_provider_params() {
  
  if (data_provider_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataProviderParams>(GetArena());
    data_provider_params_ = p;
  }
  return data_provider_params_;
}
inline ::DataProviderParams* DataParams::mutable_data_provider_params() {
  // @@protoc_insertion_point(field_mutable:DataParams.data_provider_params)
  return _internal_mutable_data_provider_params();
}
inline void DataParams::set_allocated_data_provider_params(::DataProviderParams* data_provider_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_provider_params_);
  }
  if (data_provider_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_provider_params)->GetArena();
    if (message_arena != submessage_arena) {
      data_provider_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_provider_params, submessage_arena);
    }
    
  } else {
    
  }
  data_provider_params_ = data_provider_params;
  // @@protoc_insertion_point(field_set_allocated:DataParams.data_provider_params)
}

// .DataBatchGeneratorParams databatch_generator_params = 10;
inline bool DataParams::_internal_has_databatch_generator_params() const {
  return this != internal_default_instance() && databatch_generator_params_ != nullptr;
}
inline bool DataParams::has_databatch_generator_params() const {
  return _internal_has_databatch_generator_params();
}
inline const ::DataBatchGeneratorParams& DataParams::_internal_databatch_generator_params() const {
  const ::DataBatchGeneratorParams* p = databatch_generator_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatchGeneratorParams*>(
      &::_DataBatchGeneratorParams_default_instance_);
}
inline const ::DataBatchGeneratorParams& DataParams::databatch_generator_params() const {
  // @@protoc_insertion_point(field_get:DataParams.databatch_generator_params)
  return _internal_databatch_generator_params();
}
inline void DataParams::unsafe_arena_set_allocated_databatch_generator_params(
    ::DataBatchGeneratorParams* databatch_generator_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(databatch_generator_params_);
  }
  databatch_generator_params_ = databatch_generator_params;
  if (databatch_generator_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataParams.databatch_generator_params)
}
inline ::DataBatchGeneratorParams* DataParams::release_databatch_generator_params() {
  
  ::DataBatchGeneratorParams* temp = databatch_generator_params_;
  databatch_generator_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatchGeneratorParams* DataParams::unsafe_arena_release_databatch_generator_params() {
  // @@protoc_insertion_point(field_release:DataParams.databatch_generator_params)
  
  ::DataBatchGeneratorParams* temp = databatch_generator_params_;
  databatch_generator_params_ = nullptr;
  return temp;
}
inline ::DataBatchGeneratorParams* DataParams::_internal_mutable_databatch_generator_params() {
  
  if (databatch_generator_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatchGeneratorParams>(GetArena());
    databatch_generator_params_ = p;
  }
  return databatch_generator_params_;
}
inline ::DataBatchGeneratorParams* DataParams::mutable_databatch_generator_params() {
  // @@protoc_insertion_point(field_mutable:DataParams.databatch_generator_params)
  return _internal_mutable_databatch_generator_params();
}
inline void DataParams::set_allocated_databatch_generator_params(::DataBatchGeneratorParams* databatch_generator_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(databatch_generator_params_);
  }
  if (databatch_generator_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(databatch_generator_params)->GetArena();
    if (message_arena != submessage_arena) {
      databatch_generator_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, databatch_generator_params, submessage_arena);
    }
    
  } else {
    
  }
  databatch_generator_params_ = databatch_generator_params;
  // @@protoc_insertion_point(field_set_allocated:DataParams.databatch_generator_params)
}

// string predict_split = 100 [deprecated = true];
inline void DataParams::clear_predict_split() {
  predict_split_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataParams::predict_split() const {
  // @@protoc_insertion_point(field_get:DataParams.predict_split)
  return _internal_predict_split();
}
inline void DataParams::set_predict_split(const std::string& value) {
  _internal_set_predict_split(value);
  // @@protoc_insertion_point(field_set:DataParams.predict_split)
}
inline std::string* DataParams::mutable_predict_split() {
  // @@protoc_insertion_point(field_mutable:DataParams.predict_split)
  return _internal_mutable_predict_split();
}
inline const std::string& DataParams::_internal_predict_split() const {
  return predict_split_.Get();
}
inline void DataParams::_internal_set_predict_split(const std::string& value) {
  
  predict_split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataParams::set_predict_split(std::string&& value) {
  
  predict_split_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DataParams.predict_split)
}
inline void DataParams::set_predict_split(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  predict_split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DataParams.predict_split)
}
inline void DataParams::set_predict_split(const char* value,
    size_t size) {
  
  predict_split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DataParams.predict_split)
}
inline std::string* DataParams::_internal_mutable_predict_split() {
  
  return predict_split_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataParams::release_predict_split() {
  // @@protoc_insertion_point(field_release:DataParams.predict_split)
  return predict_split_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataParams::set_allocated_predict_split(std::string* predict_split) {
  if (predict_split != nullptr) {
    
  } else {
    
  }
  predict_split_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), predict_split,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DataParams.predict_split)
}

// -------------------------------------------------------------------

// Freqs

// int64 test_freq = 1;
inline void Freqs::clear_test_freq() {
  test_freq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Freqs::_internal_test_freq() const {
  return test_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Freqs::test_freq() const {
  // @@protoc_insertion_point(field_get:Freqs.test_freq)
  return _internal_test_freq();
}
inline void Freqs::_internal_set_test_freq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  test_freq_ = value;
}
inline void Freqs::set_test_freq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_test_freq(value);
  // @@protoc_insertion_point(field_set:Freqs.test_freq)
}

// int64 save_freq = 2;
inline void Freqs::clear_save_freq() {
  save_freq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Freqs::_internal_save_freq() const {
  return save_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Freqs::save_freq() const {
  // @@protoc_insertion_point(field_get:Freqs.save_freq)
  return _internal_save_freq();
}
inline void Freqs::_internal_set_save_freq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  save_freq_ = value;
}
inline void Freqs::set_save_freq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_save_freq(value);
  // @@protoc_insertion_point(field_set:Freqs.save_freq)
}

// int64 stats_freq = 3;
inline void Freqs::clear_stats_freq() {
  stats_freq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Freqs::_internal_stats_freq() const {
  return stats_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Freqs::stats_freq() const {
  // @@protoc_insertion_point(field_get:Freqs.stats_freq)
  return _internal_stats_freq();
}
inline void Freqs::_internal_set_stats_freq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  stats_freq_ = value;
}
inline void Freqs::set_stats_freq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stats_freq(value);
  // @@protoc_insertion_point(field_set:Freqs.stats_freq)
}

// int64 summary_freq = 4;
inline void Freqs::clear_summary_freq() {
  summary_freq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Freqs::_internal_summary_freq() const {
  return summary_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Freqs::summary_freq() const {
  // @@protoc_insertion_point(field_get:Freqs.summary_freq)
  return _internal_summary_freq();
}
inline void Freqs::_internal_set_summary_freq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  summary_freq_ = value;
}
inline void Freqs::set_summary_freq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_summary_freq(value);
  // @@protoc_insertion_point(field_set:Freqs.summary_freq)
}

// -------------------------------------------------------------------

// LratePair

// float epoch = 1;
inline void LratePair::clear_epoch() {
  epoch_ = 0;
}
inline float LratePair::_internal_epoch() const {
  return epoch_;
}
inline float LratePair::epoch() const {
  // @@protoc_insertion_point(field_get:LratePair.epoch)
  return _internal_epoch();
}
inline void LratePair::_internal_set_epoch(float value) {
  
  epoch_ = value;
}
inline void LratePair::set_epoch(float value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:LratePair.epoch)
}

// float lrate = 2;
inline void LratePair::clear_lrate() {
  lrate_ = 0;
}
inline float LratePair::_internal_lrate() const {
  return lrate_;
}
inline float LratePair::lrate() const {
  // @@protoc_insertion_point(field_get:LratePair.lrate)
  return _internal_lrate();
}
inline void LratePair::_internal_set_lrate(float value) {
  
  lrate_ = value;
}
inline void LratePair::set_lrate(float value) {
  _internal_set_lrate(value);
  // @@protoc_insertion_point(field_set:LratePair.lrate)
}

// -------------------------------------------------------------------

// Lrate

// repeated .LratePair lrate_schedule = 1;
inline int Lrate::_internal_lrate_schedule_size() const {
  return lrate_schedule_.size();
}
inline int Lrate::lrate_schedule_size() const {
  return _internal_lrate_schedule_size();
}
inline void Lrate::clear_lrate_schedule() {
  lrate_schedule_.Clear();
}
inline ::LratePair* Lrate::mutable_lrate_schedule(int index) {
  // @@protoc_insertion_point(field_mutable:Lrate.lrate_schedule)
  return lrate_schedule_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LratePair >*
Lrate::mutable_lrate_schedule() {
  // @@protoc_insertion_point(field_mutable_list:Lrate.lrate_schedule)
  return &lrate_schedule_;
}
inline const ::LratePair& Lrate::_internal_lrate_schedule(int index) const {
  return lrate_schedule_.Get(index);
}
inline const ::LratePair& Lrate::lrate_schedule(int index) const {
  // @@protoc_insertion_point(field_get:Lrate.lrate_schedule)
  return _internal_lrate_schedule(index);
}
inline ::LratePair* Lrate::_internal_add_lrate_schedule() {
  return lrate_schedule_.Add();
}
inline ::LratePair* Lrate::add_lrate_schedule() {
  // @@protoc_insertion_point(field_add:Lrate.lrate_schedule)
  return _internal_add_lrate_schedule();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LratePair >&
Lrate::lrate_schedule() const {
  // @@protoc_insertion_point(field_list:Lrate.lrate_schedule)
  return lrate_schedule_;
}

// .LratePolynomialDecayConfig polynomial_config = 2;
inline bool Lrate::_internal_has_polynomial_config() const {
  return this != internal_default_instance() && polynomial_config_ != nullptr;
}
inline bool Lrate::has_polynomial_config() const {
  return _internal_has_polynomial_config();
}
inline void Lrate::clear_polynomial_config() {
  if (GetArena() == nullptr && polynomial_config_ != nullptr) {
    delete polynomial_config_;
  }
  polynomial_config_ = nullptr;
}
inline const ::LratePolynomialDecayConfig& Lrate::_internal_polynomial_config() const {
  const ::LratePolynomialDecayConfig* p = polynomial_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LratePolynomialDecayConfig*>(
      &::_LratePolynomialDecayConfig_default_instance_);
}
inline const ::LratePolynomialDecayConfig& Lrate::polynomial_config() const {
  // @@protoc_insertion_point(field_get:Lrate.polynomial_config)
  return _internal_polynomial_config();
}
inline void Lrate::unsafe_arena_set_allocated_polynomial_config(
    ::LratePolynomialDecayConfig* polynomial_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(polynomial_config_);
  }
  polynomial_config_ = polynomial_config;
  if (polynomial_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Lrate.polynomial_config)
}
inline ::LratePolynomialDecayConfig* Lrate::release_polynomial_config() {
  
  ::LratePolynomialDecayConfig* temp = polynomial_config_;
  polynomial_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LratePolynomialDecayConfig* Lrate::unsafe_arena_release_polynomial_config() {
  // @@protoc_insertion_point(field_release:Lrate.polynomial_config)
  
  ::LratePolynomialDecayConfig* temp = polynomial_config_;
  polynomial_config_ = nullptr;
  return temp;
}
inline ::LratePolynomialDecayConfig* Lrate::_internal_mutable_polynomial_config() {
  
  if (polynomial_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::LratePolynomialDecayConfig>(GetArena());
    polynomial_config_ = p;
  }
  return polynomial_config_;
}
inline ::LratePolynomialDecayConfig* Lrate::mutable_polynomial_config() {
  // @@protoc_insertion_point(field_mutable:Lrate.polynomial_config)
  return _internal_mutable_polynomial_config();
}
inline void Lrate::set_allocated_polynomial_config(::LratePolynomialDecayConfig* polynomial_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete polynomial_config_;
  }
  if (polynomial_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(polynomial_config);
    if (message_arena != submessage_arena) {
      polynomial_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polynomial_config, submessage_arena);
    }
    
  } else {
    
  }
  polynomial_config_ = polynomial_config;
  // @@protoc_insertion_point(field_set_allocated:Lrate.polynomial_config)
}

// -------------------------------------------------------------------

// LratePolynomialDecayConfig

// float init_learning_rate = 1;
inline void LratePolynomialDecayConfig::clear_init_learning_rate() {
  init_learning_rate_ = 0;
}
inline float LratePolynomialDecayConfig::_internal_init_learning_rate() const {
  return init_learning_rate_;
}
inline float LratePolynomialDecayConfig::init_learning_rate() const {
  // @@protoc_insertion_point(field_get:LratePolynomialDecayConfig.init_learning_rate)
  return _internal_init_learning_rate();
}
inline void LratePolynomialDecayConfig::_internal_set_init_learning_rate(float value) {
  
  init_learning_rate_ = value;
}
inline void LratePolynomialDecayConfig::set_init_learning_rate(float value) {
  _internal_set_init_learning_rate(value);
  // @@protoc_insertion_point(field_set:LratePolynomialDecayConfig.init_learning_rate)
}

// int64 decay_steps = 2;
inline void LratePolynomialDecayConfig::clear_decay_steps() {
  decay_steps_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LratePolynomialDecayConfig::_internal_decay_steps() const {
  return decay_steps_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LratePolynomialDecayConfig::decay_steps() const {
  // @@protoc_insertion_point(field_get:LratePolynomialDecayConfig.decay_steps)
  return _internal_decay_steps();
}
inline void LratePolynomialDecayConfig::_internal_set_decay_steps(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  decay_steps_ = value;
}
inline void LratePolynomialDecayConfig::set_decay_steps(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_decay_steps(value);
  // @@protoc_insertion_point(field_set:LratePolynomialDecayConfig.decay_steps)
}

// float ending_learning_rate = 3;
inline void LratePolynomialDecayConfig::clear_ending_learning_rate() {
  ending_learning_rate_ = 0;
}
inline float LratePolynomialDecayConfig::_internal_ending_learning_rate() const {
  return ending_learning_rate_;
}
inline float LratePolynomialDecayConfig::ending_learning_rate() const {
  // @@protoc_insertion_point(field_get:LratePolynomialDecayConfig.ending_learning_rate)
  return _internal_ending_learning_rate();
}
inline void LratePolynomialDecayConfig::_internal_set_ending_learning_rate(float value) {
  
  ending_learning_rate_ = value;
}
inline void LratePolynomialDecayConfig::set_ending_learning_rate(float value) {
  _internal_set_ending_learning_rate(value);
  // @@protoc_insertion_point(field_set:LratePolynomialDecayConfig.ending_learning_rate)
}

// float power = 4;
inline void LratePolynomialDecayConfig::clear_power() {
  power_ = 0;
}
inline float LratePolynomialDecayConfig::_internal_power() const {
  return power_;
}
inline float LratePolynomialDecayConfig::power() const {
  // @@protoc_insertion_point(field_get:LratePolynomialDecayConfig.power)
  return _internal_power();
}
inline void LratePolynomialDecayConfig::_internal_set_power(float value) {
  
  power_ = value;
}
inline void LratePolynomialDecayConfig::set_power(float value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:LratePolynomialDecayConfig.power)
}

// bool cycle = 5;
inline void LratePolynomialDecayConfig::clear_cycle() {
  cycle_ = false;
}
inline bool LratePolynomialDecayConfig::_internal_cycle() const {
  return cycle_;
}
inline bool LratePolynomialDecayConfig::cycle() const {
  // @@protoc_insertion_point(field_get:LratePolynomialDecayConfig.cycle)
  return _internal_cycle();
}
inline void LratePolynomialDecayConfig::_internal_set_cycle(bool value) {
  
  cycle_ = value;
}
inline void LratePolynomialDecayConfig::set_cycle(bool value) {
  _internal_set_cycle(value);
  // @@protoc_insertion_point(field_set:LratePolynomialDecayConfig.cycle)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ModelProfileResults

// string hostname = 1;
inline void ModelProfileResults::clear_hostname() {
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelProfileResults::hostname() const {
  // @@protoc_insertion_point(field_get:ModelProfileResults.hostname)
  return _internal_hostname();
}
inline void ModelProfileResults::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:ModelProfileResults.hostname)
}
inline std::string* ModelProfileResults::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:ModelProfileResults.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& ModelProfileResults::_internal_hostname() const {
  return hostname_.Get();
}
inline void ModelProfileResults::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelProfileResults::set_hostname(std::string&& value) {
  
  hostname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelProfileResults.hostname)
}
inline void ModelProfileResults::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ModelProfileResults.hostname)
}
inline void ModelProfileResults::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelProfileResults.hostname)
}
inline std::string* ModelProfileResults::_internal_mutable_hostname() {
  
  return hostname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelProfileResults::release_hostname() {
  // @@protoc_insertion_point(field_release:ModelProfileResults.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelProfileResults::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ModelProfileResults.hostname)
}

// .google.protobuf.Timestamp created_at = 2;
inline bool ModelProfileResults::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool ModelProfileResults::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ModelProfileResults::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ModelProfileResults::created_at() const {
  // @@protoc_insertion_point(field_get:ModelProfileResults.created_at)
  return _internal_created_at();
}
inline void ModelProfileResults::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ModelProfileResults.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelProfileResults::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelProfileResults::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:ModelProfileResults.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelProfileResults::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelProfileResults::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:ModelProfileResults.created_at)
  return _internal_mutable_created_at();
}
inline void ModelProfileResults::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:ModelProfileResults.created_at)
}

// string device_descriptions_json = 3;
inline void ModelProfileResults::clear_device_descriptions_json() {
  device_descriptions_json_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelProfileResults::device_descriptions_json() const {
  // @@protoc_insertion_point(field_get:ModelProfileResults.device_descriptions_json)
  return _internal_device_descriptions_json();
}
inline void ModelProfileResults::set_device_descriptions_json(const std::string& value) {
  _internal_set_device_descriptions_json(value);
  // @@protoc_insertion_point(field_set:ModelProfileResults.device_descriptions_json)
}
inline std::string* ModelProfileResults::mutable_device_descriptions_json() {
  // @@protoc_insertion_point(field_mutable:ModelProfileResults.device_descriptions_json)
  return _internal_mutable_device_descriptions_json();
}
inline const std::string& ModelProfileResults::_internal_device_descriptions_json() const {
  return device_descriptions_json_.Get();
}
inline void ModelProfileResults::_internal_set_device_descriptions_json(const std::string& value) {
  
  device_descriptions_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelProfileResults::set_device_descriptions_json(std::string&& value) {
  
  device_descriptions_json_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelProfileResults.device_descriptions_json)
}
inline void ModelProfileResults::set_device_descriptions_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_descriptions_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ModelProfileResults.device_descriptions_json)
}
inline void ModelProfileResults::set_device_descriptions_json(const char* value,
    size_t size) {
  
  device_descriptions_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelProfileResults.device_descriptions_json)
}
inline std::string* ModelProfileResults::_internal_mutable_device_descriptions_json() {
  
  return device_descriptions_json_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelProfileResults::release_device_descriptions_json() {
  // @@protoc_insertion_point(field_release:ModelProfileResults.device_descriptions_json)
  return device_descriptions_json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelProfileResults::set_allocated_device_descriptions_json(std::string* device_descriptions_json) {
  if (device_descriptions_json != nullptr) {
    
  } else {
    
  }
  device_descriptions_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_descriptions_json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ModelProfileResults.device_descriptions_json)
}

// repeated float host_load_averages = 4;
inline int ModelProfileResults::_internal_host_load_averages_size() const {
  return host_load_averages_.size();
}
inline int ModelProfileResults::host_load_averages_size() const {
  return _internal_host_load_averages_size();
}
inline void ModelProfileResults::clear_host_load_averages() {
  host_load_averages_.Clear();
}
inline float ModelProfileResults::_internal_host_load_averages(int index) const {
  return host_load_averages_.Get(index);
}
inline float ModelProfileResults::host_load_averages(int index) const {
  // @@protoc_insertion_point(field_get:ModelProfileResults.host_load_averages)
  return _internal_host_load_averages(index);
}
inline void ModelProfileResults::set_host_load_averages(int index, float value) {
  host_load_averages_.Set(index, value);
  // @@protoc_insertion_point(field_set:ModelProfileResults.host_load_averages)
}
inline void ModelProfileResults::_internal_add_host_load_averages(float value) {
  host_load_averages_.Add(value);
}
inline void ModelProfileResults::add_host_load_averages(float value) {
  _internal_add_host_load_averages(value);
  // @@protoc_insertion_point(field_add:ModelProfileResults.host_load_averages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ModelProfileResults::_internal_host_load_averages() const {
  return host_load_averages_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ModelProfileResults::host_load_averages() const {
  // @@protoc_insertion_point(field_list:ModelProfileResults.host_load_averages)
  return _internal_host_load_averages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ModelProfileResults::_internal_mutable_host_load_averages() {
  return &host_load_averages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ModelProfileResults::mutable_host_load_averages() {
  // @@protoc_insertion_point(field_mutable_list:ModelProfileResults.host_load_averages)
  return _internal_mutable_host_load_averages();
}

// map<string, double> times_total = 10;
inline int ModelProfileResults::_internal_times_total_size() const {
  return times_total_.size();
}
inline int ModelProfileResults::times_total_size() const {
  return _internal_times_total_size();
}
inline void ModelProfileResults::clear_times_total() {
  times_total_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
ModelProfileResults::_internal_times_total() const {
  return times_total_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
ModelProfileResults::times_total() const {
  // @@protoc_insertion_point(field_map:ModelProfileResults.times_total)
  return _internal_times_total();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
ModelProfileResults::_internal_mutable_times_total() {
  return times_total_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
ModelProfileResults::mutable_times_total() {
  // @@protoc_insertion_point(field_mutable_map:ModelProfileResults.times_total)
  return _internal_mutable_times_total();
}

// map<string, double> times_per_example = 11;
inline int ModelProfileResults::_internal_times_per_example_size() const {
  return times_per_example_.size();
}
inline int ModelProfileResults::times_per_example_size() const {
  return _internal_times_per_example_size();
}
inline void ModelProfileResults::clear_times_per_example() {
  times_per_example_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
ModelProfileResults::_internal_times_per_example() const {
  return times_per_example_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
ModelProfileResults::times_per_example() const {
  // @@protoc_insertion_point(field_map:ModelProfileResults.times_per_example)
  return _internal_times_per_example();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
ModelProfileResults::_internal_mutable_times_per_example() {
  return times_per_example_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
ModelProfileResults::mutable_times_per_example() {
  // @@protoc_insertion_point(field_mutable_map:ModelProfileResults.times_per_example)
  return _internal_mutable_times_per_example();
}

// string tf_profile_timing = 20;
inline void ModelProfileResults::clear_tf_profile_timing() {
  tf_profile_timing_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelProfileResults::tf_profile_timing() const {
  // @@protoc_insertion_point(field_get:ModelProfileResults.tf_profile_timing)
  return _internal_tf_profile_timing();
}
inline void ModelProfileResults::set_tf_profile_timing(const std::string& value) {
  _internal_set_tf_profile_timing(value);
  // @@protoc_insertion_point(field_set:ModelProfileResults.tf_profile_timing)
}
inline std::string* ModelProfileResults::mutable_tf_profile_timing() {
  // @@protoc_insertion_point(field_mutable:ModelProfileResults.tf_profile_timing)
  return _internal_mutable_tf_profile_timing();
}
inline const std::string& ModelProfileResults::_internal_tf_profile_timing() const {
  return tf_profile_timing_.Get();
}
inline void ModelProfileResults::_internal_set_tf_profile_timing(const std::string& value) {
  
  tf_profile_timing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelProfileResults::set_tf_profile_timing(std::string&& value) {
  
  tf_profile_timing_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelProfileResults.tf_profile_timing)
}
inline void ModelProfileResults::set_tf_profile_timing(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tf_profile_timing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ModelProfileResults.tf_profile_timing)
}
inline void ModelProfileResults::set_tf_profile_timing(const char* value,
    size_t size) {
  
  tf_profile_timing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelProfileResults.tf_profile_timing)
}
inline std::string* ModelProfileResults::_internal_mutable_tf_profile_timing() {
  
  return tf_profile_timing_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelProfileResults::release_tf_profile_timing() {
  // @@protoc_insertion_point(field_release:ModelProfileResults.tf_profile_timing)
  return tf_profile_timing_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelProfileResults::set_allocated_tf_profile_timing(std::string* tf_profile_timing) {
  if (tf_profile_timing != nullptr) {
    
  } else {
    
  }
  tf_profile_timing_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tf_profile_timing,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ModelProfileResults.tf_profile_timing)
}

// string tf_profile_flops = 21;
inline void ModelProfileResults::clear_tf_profile_flops() {
  tf_profile_flops_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelProfileResults::tf_profile_flops() const {
  // @@protoc_insertion_point(field_get:ModelProfileResults.tf_profile_flops)
  return _internal_tf_profile_flops();
}
inline void ModelProfileResults::set_tf_profile_flops(const std::string& value) {
  _internal_set_tf_profile_flops(value);
  // @@protoc_insertion_point(field_set:ModelProfileResults.tf_profile_flops)
}
inline std::string* ModelProfileResults::mutable_tf_profile_flops() {
  // @@protoc_insertion_point(field_mutable:ModelProfileResults.tf_profile_flops)
  return _internal_mutable_tf_profile_flops();
}
inline const std::string& ModelProfileResults::_internal_tf_profile_flops() const {
  return tf_profile_flops_.Get();
}
inline void ModelProfileResults::_internal_set_tf_profile_flops(const std::string& value) {
  
  tf_profile_flops_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelProfileResults::set_tf_profile_flops(std::string&& value) {
  
  tf_profile_flops_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelProfileResults.tf_profile_flops)
}
inline void ModelProfileResults::set_tf_profile_flops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tf_profile_flops_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ModelProfileResults.tf_profile_flops)
}
inline void ModelProfileResults::set_tf_profile_flops(const char* value,
    size_t size) {
  
  tf_profile_flops_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelProfileResults.tf_profile_flops)
}
inline std::string* ModelProfileResults::_internal_mutable_tf_profile_flops() {
  
  return tf_profile_flops_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelProfileResults::release_tf_profile_flops() {
  // @@protoc_insertion_point(field_release:ModelProfileResults.tf_profile_flops)
  return tf_profile_flops_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelProfileResults::set_allocated_tf_profile_flops(std::string* tf_profile_flops) {
  if (tf_profile_flops != nullptr) {
    
  } else {
    
  }
  tf_profile_flops_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tf_profile_flops,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ModelProfileResults.tf_profile_flops)
}

// string tf_timeline = 22;
inline void ModelProfileResults::clear_tf_timeline() {
  tf_timeline_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelProfileResults::tf_timeline() const {
  // @@protoc_insertion_point(field_get:ModelProfileResults.tf_timeline)
  return _internal_tf_timeline();
}
inline void ModelProfileResults::set_tf_timeline(const std::string& value) {
  _internal_set_tf_timeline(value);
  // @@protoc_insertion_point(field_set:ModelProfileResults.tf_timeline)
}
inline std::string* ModelProfileResults::mutable_tf_timeline() {
  // @@protoc_insertion_point(field_mutable:ModelProfileResults.tf_timeline)
  return _internal_mutable_tf_timeline();
}
inline const std::string& ModelProfileResults::_internal_tf_timeline() const {
  return tf_timeline_.Get();
}
inline void ModelProfileResults::_internal_set_tf_timeline(const std::string& value) {
  
  tf_timeline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelProfileResults::set_tf_timeline(std::string&& value) {
  
  tf_timeline_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelProfileResults.tf_timeline)
}
inline void ModelProfileResults::set_tf_timeline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tf_timeline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ModelProfileResults.tf_timeline)
}
inline void ModelProfileResults::set_tf_timeline(const char* value,
    size_t size) {
  
  tf_timeline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelProfileResults.tf_timeline)
}
inline std::string* ModelProfileResults::_internal_mutable_tf_timeline() {
  
  return tf_timeline_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelProfileResults::release_tf_timeline() {
  // @@protoc_insertion_point(field_release:ModelProfileResults.tf_timeline)
  return tf_timeline_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelProfileResults::set_allocated_tf_timeline(std::string* tf_timeline) {
  if (tf_timeline != nullptr) {
    
  } else {
    
  }
  tf_timeline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tf_timeline,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ModelProfileResults.tf_timeline)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2ftrain_5fconfig_2eproto
