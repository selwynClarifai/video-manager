// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/embedding.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fembedding_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fembedding_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/bbox.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fembedding_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2fembedding_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fembedding_2eproto;
class Embedding;
class EmbeddingDefaultTypeInternal;
extern EmbeddingDefaultTypeInternal _Embedding_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Embedding* Arena::CreateMaybeMessage<::Embedding>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Embedding_Encoding : int {
  Embedding_Encoding_INVALID = 0,
  Embedding_Encoding_FLOATS = 1,
  Embedding_Encoding_QUANTIZED_MINMAX = 2,
  Embedding_Encoding_Embedding_Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Embedding_Encoding_Embedding_Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Embedding_Encoding_IsValid(int value);
constexpr Embedding_Encoding Embedding_Encoding_Encoding_MIN = Embedding_Encoding_INVALID;
constexpr Embedding_Encoding Embedding_Encoding_Encoding_MAX = Embedding_Encoding_QUANTIZED_MINMAX;
constexpr int Embedding_Encoding_Encoding_ARRAYSIZE = Embedding_Encoding_Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Embedding_Encoding_descriptor();
template<typename T>
inline const std::string& Embedding_Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Embedding_Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Embedding_Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Embedding_Encoding_descriptor(), enum_t_value);
}
inline bool Embedding_Encoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Embedding_Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Embedding_Encoding>(
    Embedding_Encoding_descriptor(), name, value);
}
// ===================================================================

class Embedding PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Embedding) */ {
 public:
  inline Embedding() : Embedding(nullptr) {}
  virtual ~Embedding();

  Embedding(const Embedding& from);
  Embedding(Embedding&& from) noexcept
    : Embedding() {
    *this = ::std::move(from);
  }

  inline Embedding& operator=(const Embedding& from) {
    CopyFrom(from);
    return *this;
  }
  inline Embedding& operator=(Embedding&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Embedding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Embedding* internal_default_instance() {
    return reinterpret_cast<const Embedding*>(
               &_Embedding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Embedding& a, Embedding& b) {
    a.Swap(&b);
  }
  inline void Swap(Embedding* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Embedding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Embedding* New() const final {
    return CreateMaybeMessage<Embedding>(nullptr);
  }

  Embedding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Embedding>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Embedding& from);
  void MergeFrom(const Embedding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Embedding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Embedding";
  }
  protected:
  explicit Embedding(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fembedding_2eproto);
    return ::descriptor_table_proto_2futils_2fembedding_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Embedding_Encoding Encoding;
  static constexpr Encoding INVALID =
    Embedding_Encoding_INVALID;
  static constexpr Encoding FLOATS =
    Embedding_Encoding_FLOATS;
  static constexpr Encoding QUANTIZED_MINMAX =
    Embedding_Encoding_QUANTIZED_MINMAX;
  static inline bool Encoding_IsValid(int value) {
    return Embedding_Encoding_IsValid(value);
  }
  static constexpr Encoding Encoding_MIN =
    Embedding_Encoding_Encoding_MIN;
  static constexpr Encoding Encoding_MAX =
    Embedding_Encoding_Encoding_MAX;
  static constexpr int Encoding_ARRAYSIZE =
    Embedding_Encoding_Encoding_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Encoding_descriptor() {
    return Embedding_Encoding_descriptor();
  }
  template<typename T>
  static inline const std::string& Encoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Encoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Encoding_Name.");
    return Embedding_Encoding_Name(enum_t_value);
  }
  static inline bool Encoding_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Encoding* value) {
    return Embedding_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFloatArrayFieldNumber = 4,
    kByteArrayFieldNumber = 8,
    kModelFieldNumber = 9,
    kEmbedBoxFieldNumber = 10,
    kEncodingFieldNumber = 1,
    kNdimFieldNumber = 2,
    kNormFieldNumber = 3,
    kMinFieldNumber = 5,
    kMaxFieldNumber = 6,
    kNbitsFieldNumber = 7,
  };
  // repeated float float_array = 4 [packed = true];
  int float_array_size() const;
  private:
  int _internal_float_array_size() const;
  public:
  void clear_float_array();
  private:
  float _internal_float_array(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_array() const;
  void _internal_add_float_array(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_array();
  public:
  float float_array(int index) const;
  void set_float_array(int index, float value);
  void add_float_array(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_array();

  // bytes byte_array = 8;
  void clear_byte_array();
  const std::string& byte_array() const;
  void set_byte_array(const std::string& value);
  void set_byte_array(std::string&& value);
  void set_byte_array(const char* value);
  void set_byte_array(const void* value, size_t size);
  std::string* mutable_byte_array();
  std::string* release_byte_array();
  void set_allocated_byte_array(std::string* byte_array);
  private:
  const std::string& _internal_byte_array() const;
  void _internal_set_byte_array(const std::string& value);
  std::string* _internal_mutable_byte_array();
  public:

  // string model = 9;
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // .BBox embed_box = 10;
  bool has_embed_box() const;
  private:
  bool _internal_has_embed_box() const;
  public:
  void clear_embed_box();
  const ::BBox& embed_box() const;
  ::BBox* release_embed_box();
  ::BBox* mutable_embed_box();
  void set_allocated_embed_box(::BBox* embed_box);
  private:
  const ::BBox& _internal_embed_box() const;
  ::BBox* _internal_mutable_embed_box();
  public:
  void unsafe_arena_set_allocated_embed_box(
      ::BBox* embed_box);
  ::BBox* unsafe_arena_release_embed_box();

  // .Embedding.Encoding encoding = 1;
  void clear_encoding();
  ::Embedding_Encoding encoding() const;
  void set_encoding(::Embedding_Encoding value);
  private:
  ::Embedding_Encoding _internal_encoding() const;
  void _internal_set_encoding(::Embedding_Encoding value);
  public:

  // uint32 ndim = 2;
  void clear_ndim();
  ::PROTOBUF_NAMESPACE_ID::uint32 ndim() const;
  void set_ndim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ndim() const;
  void _internal_set_ndim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float norm = 3;
  void clear_norm();
  float norm() const;
  void set_norm(float value);
  private:
  float _internal_norm() const;
  void _internal_set_norm(float value);
  public:

  // float min = 5;
  void clear_min();
  float min() const;
  void set_min(float value);
  private:
  float _internal_min() const;
  void _internal_set_min(float value);
  public:

  // float max = 6;
  void clear_max();
  float max() const;
  void set_max(float value);
  private:
  float _internal_max() const;
  void _internal_set_max(float value);
  public:

  // uint32 nbits = 7;
  void clear_nbits();
  ::PROTOBUF_NAMESPACE_ID::uint32 nbits() const;
  void set_nbits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nbits() const;
  void _internal_set_nbits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Embedding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_array_;
  mutable std::atomic<int> _float_array_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr byte_array_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::BBox* embed_box_;
  int encoding_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ndim_;
  float norm_;
  float min_;
  float max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nbits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fembedding_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Embedding

// .Embedding.Encoding encoding = 1;
inline void Embedding::clear_encoding() {
  encoding_ = 0;
}
inline ::Embedding_Encoding Embedding::_internal_encoding() const {
  return static_cast< ::Embedding_Encoding >(encoding_);
}
inline ::Embedding_Encoding Embedding::encoding() const {
  // @@protoc_insertion_point(field_get:Embedding.encoding)
  return _internal_encoding();
}
inline void Embedding::_internal_set_encoding(::Embedding_Encoding value) {
  
  encoding_ = value;
}
inline void Embedding::set_encoding(::Embedding_Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:Embedding.encoding)
}

// uint32 ndim = 2;
inline void Embedding::clear_ndim() {
  ndim_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Embedding::_internal_ndim() const {
  return ndim_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Embedding::ndim() const {
  // @@protoc_insertion_point(field_get:Embedding.ndim)
  return _internal_ndim();
}
inline void Embedding::_internal_set_ndim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ndim_ = value;
}
inline void Embedding::set_ndim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ndim(value);
  // @@protoc_insertion_point(field_set:Embedding.ndim)
}

// float norm = 3;
inline void Embedding::clear_norm() {
  norm_ = 0;
}
inline float Embedding::_internal_norm() const {
  return norm_;
}
inline float Embedding::norm() const {
  // @@protoc_insertion_point(field_get:Embedding.norm)
  return _internal_norm();
}
inline void Embedding::_internal_set_norm(float value) {
  
  norm_ = value;
}
inline void Embedding::set_norm(float value) {
  _internal_set_norm(value);
  // @@protoc_insertion_point(field_set:Embedding.norm)
}

// repeated float float_array = 4 [packed = true];
inline int Embedding::_internal_float_array_size() const {
  return float_array_.size();
}
inline int Embedding::float_array_size() const {
  return _internal_float_array_size();
}
inline void Embedding::clear_float_array() {
  float_array_.Clear();
}
inline float Embedding::_internal_float_array(int index) const {
  return float_array_.Get(index);
}
inline float Embedding::float_array(int index) const {
  // @@protoc_insertion_point(field_get:Embedding.float_array)
  return _internal_float_array(index);
}
inline void Embedding::set_float_array(int index, float value) {
  float_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:Embedding.float_array)
}
inline void Embedding::_internal_add_float_array(float value) {
  float_array_.Add(value);
}
inline void Embedding::add_float_array(float value) {
  _internal_add_float_array(value);
  // @@protoc_insertion_point(field_add:Embedding.float_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Embedding::_internal_float_array() const {
  return float_array_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Embedding::float_array() const {
  // @@protoc_insertion_point(field_list:Embedding.float_array)
  return _internal_float_array();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Embedding::_internal_mutable_float_array() {
  return &float_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Embedding::mutable_float_array() {
  // @@protoc_insertion_point(field_mutable_list:Embedding.float_array)
  return _internal_mutable_float_array();
}

// float min = 5;
inline void Embedding::clear_min() {
  min_ = 0;
}
inline float Embedding::_internal_min() const {
  return min_;
}
inline float Embedding::min() const {
  // @@protoc_insertion_point(field_get:Embedding.min)
  return _internal_min();
}
inline void Embedding::_internal_set_min(float value) {
  
  min_ = value;
}
inline void Embedding::set_min(float value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:Embedding.min)
}

// float max = 6;
inline void Embedding::clear_max() {
  max_ = 0;
}
inline float Embedding::_internal_max() const {
  return max_;
}
inline float Embedding::max() const {
  // @@protoc_insertion_point(field_get:Embedding.max)
  return _internal_max();
}
inline void Embedding::_internal_set_max(float value) {
  
  max_ = value;
}
inline void Embedding::set_max(float value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:Embedding.max)
}

// uint32 nbits = 7;
inline void Embedding::clear_nbits() {
  nbits_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Embedding::_internal_nbits() const {
  return nbits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Embedding::nbits() const {
  // @@protoc_insertion_point(field_get:Embedding.nbits)
  return _internal_nbits();
}
inline void Embedding::_internal_set_nbits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nbits_ = value;
}
inline void Embedding::set_nbits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nbits(value);
  // @@protoc_insertion_point(field_set:Embedding.nbits)
}

// bytes byte_array = 8;
inline void Embedding::clear_byte_array() {
  byte_array_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Embedding::byte_array() const {
  // @@protoc_insertion_point(field_get:Embedding.byte_array)
  return _internal_byte_array();
}
inline void Embedding::set_byte_array(const std::string& value) {
  _internal_set_byte_array(value);
  // @@protoc_insertion_point(field_set:Embedding.byte_array)
}
inline std::string* Embedding::mutable_byte_array() {
  // @@protoc_insertion_point(field_mutable:Embedding.byte_array)
  return _internal_mutable_byte_array();
}
inline const std::string& Embedding::_internal_byte_array() const {
  return byte_array_.Get();
}
inline void Embedding::_internal_set_byte_array(const std::string& value) {
  
  byte_array_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Embedding::set_byte_array(std::string&& value) {
  
  byte_array_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Embedding.byte_array)
}
inline void Embedding::set_byte_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  byte_array_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Embedding.byte_array)
}
inline void Embedding::set_byte_array(const void* value,
    size_t size) {
  
  byte_array_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Embedding.byte_array)
}
inline std::string* Embedding::_internal_mutable_byte_array() {
  
  return byte_array_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Embedding::release_byte_array() {
  // @@protoc_insertion_point(field_release:Embedding.byte_array)
  return byte_array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Embedding::set_allocated_byte_array(std::string* byte_array) {
  if (byte_array != nullptr) {
    
  } else {
    
  }
  byte_array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), byte_array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Embedding.byte_array)
}

// string model = 9;
inline void Embedding::clear_model() {
  model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Embedding::model() const {
  // @@protoc_insertion_point(field_get:Embedding.model)
  return _internal_model();
}
inline void Embedding::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:Embedding.model)
}
inline std::string* Embedding::mutable_model() {
  // @@protoc_insertion_point(field_mutable:Embedding.model)
  return _internal_mutable_model();
}
inline const std::string& Embedding::_internal_model() const {
  return model_.Get();
}
inline void Embedding::_internal_set_model(const std::string& value) {
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Embedding::set_model(std::string&& value) {
  
  model_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Embedding.model)
}
inline void Embedding::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Embedding.model)
}
inline void Embedding::set_model(const char* value,
    size_t size) {
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Embedding.model)
}
inline std::string* Embedding::_internal_mutable_model() {
  
  return model_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Embedding::release_model() {
  // @@protoc_insertion_point(field_release:Embedding.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Embedding::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Embedding.model)
}

// .BBox embed_box = 10;
inline bool Embedding::_internal_has_embed_box() const {
  return this != internal_default_instance() && embed_box_ != nullptr;
}
inline bool Embedding::has_embed_box() const {
  return _internal_has_embed_box();
}
inline const ::BBox& Embedding::_internal_embed_box() const {
  const ::BBox* p = embed_box_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BBox*>(
      &::_BBox_default_instance_);
}
inline const ::BBox& Embedding::embed_box() const {
  // @@protoc_insertion_point(field_get:Embedding.embed_box)
  return _internal_embed_box();
}
inline void Embedding::unsafe_arena_set_allocated_embed_box(
    ::BBox* embed_box) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(embed_box_);
  }
  embed_box_ = embed_box;
  if (embed_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Embedding.embed_box)
}
inline ::BBox* Embedding::release_embed_box() {
  
  ::BBox* temp = embed_box_;
  embed_box_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BBox* Embedding::unsafe_arena_release_embed_box() {
  // @@protoc_insertion_point(field_release:Embedding.embed_box)
  
  ::BBox* temp = embed_box_;
  embed_box_ = nullptr;
  return temp;
}
inline ::BBox* Embedding::_internal_mutable_embed_box() {
  
  if (embed_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::BBox>(GetArena());
    embed_box_ = p;
  }
  return embed_box_;
}
inline ::BBox* Embedding::mutable_embed_box() {
  // @@protoc_insertion_point(field_mutable:Embedding.embed_box)
  return _internal_mutable_embed_box();
}
inline void Embedding::set_allocated_embed_box(::BBox* embed_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(embed_box_);
  }
  if (embed_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(embed_box)->GetArena();
    if (message_arena != submessage_arena) {
      embed_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, embed_box, submessage_arena);
    }
    
  } else {
    
  }
  embed_box_ = embed_box;
  // @@protoc_insertion_point(field_set_allocated:Embedding.embed_box)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Embedding_Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Embedding_Encoding>() {
  return ::Embedding_Encoding_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fembedding_2eproto
