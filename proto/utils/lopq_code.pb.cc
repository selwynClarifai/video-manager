// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/lopq_code.proto

#include "proto/utils/lopq_code.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class LOPQCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQCode> _instance;
} _LOPQCode_default_instance_;
static void InitDefaultsscc_info_LOPQCode_proto_2futils_2flopq_5fcode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQCode_default_instance_;
    new (ptr) ::LOPQCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LOPQCode_proto_2futils_2flopq_5fcode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LOPQCode_proto_2futils_2flopq_5fcode_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2futils_2flopq_5fcode_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2futils_2flopq_5fcode_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2futils_2flopq_5fcode_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2futils_2flopq_5fcode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQCode, coarse_key_),
  PROTOBUF_FIELD_OFFSET(::LOPQCode, fine_key_),
  PROTOBUF_FIELD_OFFSET(::LOPQCode, projection_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LOPQCode)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQCode_default_instance_),
};

const char descriptor_table_protodef_proto_2futils_2flopq_5fcode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033proto/utils/lopq_code.proto\032)proto/cla"
  "rifai/api/utils/extensions.proto\"J\n\010LOPQ"
  "Code\022\022\n\ncoarse_key\030\001 \001(\014\022\020\n\010fine_key\030\002 \001"
  "(\014\022\030\n\nprojection\030\003 \003(\002B\004\200\265\030\001B\016\n\005utilsZ\005u"
  "tilsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2futils_2flopq_5fcode_2eproto_deps[1] = {
  &::descriptor_table_proto_2fclarifai_2fapi_2futils_2fextensions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2futils_2flopq_5fcode_2eproto_sccs[1] = {
  &scc_info_LOPQCode_proto_2futils_2flopq_5fcode_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2futils_2flopq_5fcode_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2flopq_5fcode_2eproto = {
  false, false, descriptor_table_protodef_proto_2futils_2flopq_5fcode_2eproto, "proto/utils/lopq_code.proto", 172,
  &descriptor_table_proto_2futils_2flopq_5fcode_2eproto_once, descriptor_table_proto_2futils_2flopq_5fcode_2eproto_sccs, descriptor_table_proto_2futils_2flopq_5fcode_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_proto_2futils_2flopq_5fcode_2eproto::offsets,
  file_level_metadata_proto_2futils_2flopq_5fcode_2eproto, 1, file_level_enum_descriptors_proto_2futils_2flopq_5fcode_2eproto, file_level_service_descriptors_proto_2futils_2flopq_5fcode_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2futils_2flopq_5fcode_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2futils_2flopq_5fcode_2eproto)), true);

// ===================================================================

void LOPQCode::InitAsDefaultInstance() {
}
class LOPQCode::_Internal {
 public:
};

LOPQCode::LOPQCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  projection_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQCode)
}
LOPQCode::LOPQCode(const LOPQCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      projection_(from.projection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  coarse_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_coarse_key().empty()) {
    coarse_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coarse_key(),
      GetArena());
  }
  fine_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fine_key().empty()) {
    fine_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fine_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:LOPQCode)
}

void LOPQCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQCode_proto_2futils_2flopq_5fcode_2eproto.base);
  coarse_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fine_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LOPQCode::~LOPQCode() {
  // @@protoc_insertion_point(destructor:LOPQCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  coarse_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fine_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LOPQCode::ArenaDtor(void* object) {
  LOPQCode* _this = reinterpret_cast< LOPQCode* >(object);
  (void)_this;
}
void LOPQCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQCode& LOPQCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQCode_proto_2futils_2flopq_5fcode_2eproto.base);
  return *internal_default_instance();
}


void LOPQCode::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  projection_.Clear();
  coarse_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fine_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes coarse_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_coarse_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes fine_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fine_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float projection = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_projection(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_projection(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes coarse_key = 1;
  if (this->coarse_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_coarse_key(), target);
  }

  // bytes fine_key = 2;
  if (this->fine_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_fine_key(), target);
  }

  // repeated float projection = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_projection_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_projection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQCode)
  return target;
}

size_t LOPQCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float projection = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_projection_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _projection_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes coarse_key = 1;
  if (this->coarse_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_coarse_key());
  }

  // bytes fine_key = 2;
  if (this->fine_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fine_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQCode)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQCode)
    MergeFrom(*source);
  }
}

void LOPQCode::MergeFrom(const LOPQCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  projection_.MergeFrom(from.projection_);
  if (from.coarse_key().size() > 0) {
    _internal_set_coarse_key(from._internal_coarse_key());
  }
  if (from.fine_key().size() > 0) {
    _internal_set_fine_key(from._internal_fine_key());
  }
}

void LOPQCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQCode::CopyFrom(const LOPQCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQCode::IsInitialized() const {
  return true;
}

void LOPQCode::InternalSwap(LOPQCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  projection_.InternalSwap(&other->projection_);
  coarse_key_.Swap(&other->coarse_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fine_key_.Swap(&other->fine_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQCode::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LOPQCode* Arena::CreateMaybeMessage< ::LOPQCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQCode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
