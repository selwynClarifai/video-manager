// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/audio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2faudio_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2faudio_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/ndarray.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2faudio_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2faudio_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2faudio_2eproto;
class Audio;
class AudioDefaultTypeInternal;
extern AudioDefaultTypeInternal _Audio_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Audio* Arena::CreateMaybeMessage<::Audio>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Audio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Audio) */ {
 public:
  inline Audio() : Audio(nullptr) {}
  virtual ~Audio();

  Audio(const Audio& from);
  Audio(Audio&& from) noexcept
    : Audio() {
    *this = ::std::move(from);
  }

  inline Audio& operator=(const Audio& from) {
    CopyFrom(from);
    return *this;
  }
  inline Audio& operator=(Audio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Audio& default_instance();

  enum DataCase {
    kEncodedBytes = 2,
    kNdarray = 3,
    kDecodedBytes = 5,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Audio* internal_default_instance() {
    return reinterpret_cast<const Audio*>(
               &_Audio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Audio& a, Audio& b) {
    a.Swap(&b);
  }
  inline void Swap(Audio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Audio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Audio* New() const final {
    return CreateMaybeMessage<Audio>(nullptr);
  }

  Audio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Audio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Audio& from);
  void MergeFrom(const Audio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Audio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Audio";
  }
  protected:
  explicit Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2faudio_2eproto);
    return ::descriptor_table_proto_2futils_2faudio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUrlFieldNumber = 4,
    kEncodedBytesFieldNumber = 2,
    kNdarrayFieldNumber = 3,
    kDecodedBytesFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string url = 4;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes encoded_bytes = 2;
  private:
  bool _internal_has_encoded_bytes() const;
  public:
  void clear_encoded_bytes();
  const std::string& encoded_bytes() const;
  void set_encoded_bytes(const std::string& value);
  void set_encoded_bytes(std::string&& value);
  void set_encoded_bytes(const char* value);
  void set_encoded_bytes(const void* value, size_t size);
  std::string* mutable_encoded_bytes();
  std::string* release_encoded_bytes();
  void set_allocated_encoded_bytes(std::string* encoded_bytes);
  private:
  const std::string& _internal_encoded_bytes() const;
  void _internal_set_encoded_bytes(const std::string& value);
  std::string* _internal_mutable_encoded_bytes();
  public:

  // .NDArray ndarray = 3;
  bool has_ndarray() const;
  private:
  bool _internal_has_ndarray() const;
  public:
  void clear_ndarray();
  const ::NDArray& ndarray() const;
  ::NDArray* release_ndarray();
  ::NDArray* mutable_ndarray();
  void set_allocated_ndarray(::NDArray* ndarray);
  private:
  const ::NDArray& _internal_ndarray() const;
  ::NDArray* _internal_mutable_ndarray();
  public:
  void unsafe_arena_set_allocated_ndarray(
      ::NDArray* ndarray);
  ::NDArray* unsafe_arena_release_ndarray();

  // bytes decoded_bytes = 5;
  private:
  bool _internal_has_decoded_bytes() const;
  public:
  void clear_decoded_bytes();
  const std::string& decoded_bytes() const;
  void set_decoded_bytes(const std::string& value);
  void set_decoded_bytes(std::string&& value);
  void set_decoded_bytes(const char* value);
  void set_decoded_bytes(const void* value, size_t size);
  std::string* mutable_decoded_bytes();
  std::string* release_decoded_bytes();
  void set_allocated_decoded_bytes(std::string* decoded_bytes);
  private:
  const std::string& _internal_decoded_bytes() const;
  void _internal_set_decoded_bytes(const std::string& value);
  std::string* _internal_mutable_decoded_bytes();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:Audio)
 private:
  class _Internal;
  void set_has_encoded_bytes();
  void set_has_ndarray();
  void set_has_decoded_bytes();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  union DataUnion {
    DataUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_bytes_;
    ::NDArray* ndarray_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decoded_bytes_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2futils_2faudio_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Audio

// string name = 1;
inline void Audio::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Audio::name() const {
  // @@protoc_insertion_point(field_get:Audio.name)
  return _internal_name();
}
inline void Audio::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Audio.name)
}
inline std::string* Audio::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Audio.name)
  return _internal_mutable_name();
}
inline const std::string& Audio::_internal_name() const {
  return name_.Get();
}
inline void Audio::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Audio::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Audio.name)
}
inline void Audio::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Audio.name)
}
inline void Audio::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Audio.name)
}
inline std::string* Audio::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Audio::release_name() {
  // @@protoc_insertion_point(field_release:Audio.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Audio::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Audio.name)
}

// bytes encoded_bytes = 2;
inline bool Audio::_internal_has_encoded_bytes() const {
  return data_case() == kEncodedBytes;
}
inline void Audio::set_has_encoded_bytes() {
  _oneof_case_[0] = kEncodedBytes;
}
inline void Audio::clear_encoded_bytes() {
  if (_internal_has_encoded_bytes()) {
    data_.encoded_bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_data();
  }
}
inline const std::string& Audio::encoded_bytes() const {
  // @@protoc_insertion_point(field_get:Audio.encoded_bytes)
  return _internal_encoded_bytes();
}
inline void Audio::set_encoded_bytes(const std::string& value) {
  _internal_set_encoded_bytes(value);
  // @@protoc_insertion_point(field_set:Audio.encoded_bytes)
}
inline std::string* Audio::mutable_encoded_bytes() {
  // @@protoc_insertion_point(field_mutable:Audio.encoded_bytes)
  return _internal_mutable_encoded_bytes();
}
inline const std::string& Audio::_internal_encoded_bytes() const {
  if (_internal_has_encoded_bytes()) {
    return data_.encoded_bytes_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Audio::_internal_set_encoded_bytes(const std::string& value) {
  if (!_internal_has_encoded_bytes()) {
    clear_data();
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encoded_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Audio::set_encoded_bytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:Audio.encoded_bytes)
  if (!_internal_has_encoded_bytes()) {
    clear_data();
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encoded_bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Audio.encoded_bytes)
}
inline void Audio::set_encoded_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_encoded_bytes()) {
    clear_data();
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encoded_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Audio.encoded_bytes)
}
inline void Audio::set_encoded_bytes(const void* value,
                             size_t size) {
  if (!_internal_has_encoded_bytes()) {
    clear_data();
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encoded_bytes_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:Audio.encoded_bytes)
}
inline std::string* Audio::_internal_mutable_encoded_bytes() {
  if (!_internal_has_encoded_bytes()) {
    clear_data();
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.encoded_bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Audio::release_encoded_bytes() {
  // @@protoc_insertion_point(field_release:Audio.encoded_bytes)
  if (_internal_has_encoded_bytes()) {
    clear_has_data();
    return data_.encoded_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Audio::set_allocated_encoded_bytes(std::string* encoded_bytes) {
  if (has_data()) {
    clear_data();
  }
  if (encoded_bytes != nullptr) {
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(encoded_bytes);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(encoded_bytes);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Audio.encoded_bytes)
}

// .NDArray ndarray = 3;
inline bool Audio::_internal_has_ndarray() const {
  return data_case() == kNdarray;
}
inline bool Audio::has_ndarray() const {
  return _internal_has_ndarray();
}
inline void Audio::set_has_ndarray() {
  _oneof_case_[0] = kNdarray;
}
inline ::NDArray* Audio::release_ndarray() {
  // @@protoc_insertion_point(field_release:Audio.ndarray)
  if (_internal_has_ndarray()) {
    clear_has_data();
      ::NDArray* temp = data_.ndarray_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.ndarray_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NDArray& Audio::_internal_ndarray() const {
  return _internal_has_ndarray()
      ? *data_.ndarray_
      : *reinterpret_cast< ::NDArray*>(&::_NDArray_default_instance_);
}
inline const ::NDArray& Audio::ndarray() const {
  // @@protoc_insertion_point(field_get:Audio.ndarray)
  return _internal_ndarray();
}
inline ::NDArray* Audio::unsafe_arena_release_ndarray() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Audio.ndarray)
  if (_internal_has_ndarray()) {
    clear_has_data();
    ::NDArray* temp = data_.ndarray_;
    data_.ndarray_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Audio::unsafe_arena_set_allocated_ndarray(::NDArray* ndarray) {
  clear_data();
  if (ndarray) {
    set_has_ndarray();
    data_.ndarray_ = ndarray;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Audio.ndarray)
}
inline ::NDArray* Audio::_internal_mutable_ndarray() {
  if (!_internal_has_ndarray()) {
    clear_data();
    set_has_ndarray();
    data_.ndarray_ = CreateMaybeMessage< ::NDArray >(GetArena());
  }
  return data_.ndarray_;
}
inline ::NDArray* Audio::mutable_ndarray() {
  // @@protoc_insertion_point(field_mutable:Audio.ndarray)
  return _internal_mutable_ndarray();
}

// bytes decoded_bytes = 5;
inline bool Audio::_internal_has_decoded_bytes() const {
  return data_case() == kDecodedBytes;
}
inline void Audio::set_has_decoded_bytes() {
  _oneof_case_[0] = kDecodedBytes;
}
inline void Audio::clear_decoded_bytes() {
  if (_internal_has_decoded_bytes()) {
    data_.decoded_bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_data();
  }
}
inline const std::string& Audio::decoded_bytes() const {
  // @@protoc_insertion_point(field_get:Audio.decoded_bytes)
  return _internal_decoded_bytes();
}
inline void Audio::set_decoded_bytes(const std::string& value) {
  _internal_set_decoded_bytes(value);
  // @@protoc_insertion_point(field_set:Audio.decoded_bytes)
}
inline std::string* Audio::mutable_decoded_bytes() {
  // @@protoc_insertion_point(field_mutable:Audio.decoded_bytes)
  return _internal_mutable_decoded_bytes();
}
inline const std::string& Audio::_internal_decoded_bytes() const {
  if (_internal_has_decoded_bytes()) {
    return data_.decoded_bytes_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Audio::_internal_set_decoded_bytes(const std::string& value) {
  if (!_internal_has_decoded_bytes()) {
    clear_data();
    set_has_decoded_bytes();
    data_.decoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.decoded_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Audio::set_decoded_bytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:Audio.decoded_bytes)
  if (!_internal_has_decoded_bytes()) {
    clear_data();
    set_has_decoded_bytes();
    data_.decoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.decoded_bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Audio.decoded_bytes)
}
inline void Audio::set_decoded_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_decoded_bytes()) {
    clear_data();
    set_has_decoded_bytes();
    data_.decoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.decoded_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Audio.decoded_bytes)
}
inline void Audio::set_decoded_bytes(const void* value,
                             size_t size) {
  if (!_internal_has_decoded_bytes()) {
    clear_data();
    set_has_decoded_bytes();
    data_.decoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.decoded_bytes_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:Audio.decoded_bytes)
}
inline std::string* Audio::_internal_mutable_decoded_bytes() {
  if (!_internal_has_decoded_bytes()) {
    clear_data();
    set_has_decoded_bytes();
    data_.decoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.decoded_bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Audio::release_decoded_bytes() {
  // @@protoc_insertion_point(field_release:Audio.decoded_bytes)
  if (_internal_has_decoded_bytes()) {
    clear_has_data();
    return data_.decoded_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Audio::set_allocated_decoded_bytes(std::string* decoded_bytes) {
  if (has_data()) {
    clear_data();
  }
  if (decoded_bytes != nullptr) {
    set_has_decoded_bytes();
    data_.decoded_bytes_.UnsafeSetDefault(decoded_bytes);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(decoded_bytes);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Audio.decoded_bytes)
}

// string url = 4;
inline void Audio::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Audio::url() const {
  // @@protoc_insertion_point(field_get:Audio.url)
  return _internal_url();
}
inline void Audio::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:Audio.url)
}
inline std::string* Audio::mutable_url() {
  // @@protoc_insertion_point(field_mutable:Audio.url)
  return _internal_mutable_url();
}
inline const std::string& Audio::_internal_url() const {
  return url_.Get();
}
inline void Audio::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Audio::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Audio.url)
}
inline void Audio::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Audio.url)
}
inline void Audio::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Audio.url)
}
inline std::string* Audio::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Audio::release_url() {
  // @@protoc_insertion_point(field_release:Audio.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Audio::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Audio.url)
}

inline bool Audio::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Audio::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Audio::DataCase Audio::data_case() const {
  return Audio::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2faudio_2eproto
