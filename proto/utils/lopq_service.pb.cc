// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/lopq_service.proto

#include "proto/utils/lopq_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class LOPQEvalResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQEvalResult> _instance;
} _LOPQEvalResult_default_instance_;
static void InitDefaultsscc_info_LOPQEvalResult_proto_2futils_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQEvalResult_default_instance_;
    new (ptr) ::LOPQEvalResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQEvalResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LOPQEvalResult_proto_2futils_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LOPQEvalResult_proto_2futils_2flopq_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2futils_2flopq_5fservice_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2futils_2flopq_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2futils_2flopq_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2futils_2flopq_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQEvalResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQEvalResult, k_),
  PROTOBUF_FIELD_OFFSET(::LOPQEvalResult, recall_vs_brute_force_),
  PROTOBUF_FIELD_OFFSET(::LOPQEvalResult, kendall_tau_vs_brute_force_),
  PROTOBUF_FIELD_OFFSET(::LOPQEvalResult, most_frequent_code_percent_),
  PROTOBUF_FIELD_OFFSET(::LOPQEvalResult, lopq_ndcg_),
  PROTOBUF_FIELD_OFFSET(::LOPQEvalResult, brute_force_ndcg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LOPQEvalResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQEvalResult_default_instance_),
};

const char descriptor_table_protodef_proto_2futils_2flopq_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036proto/utils/lopq_service.proto\032)proto/"
  "clarifai/api/utils/extensions.proto\"\315\001\n\016"
  "LOPQEvalResult\022\t\n\001k\030\001 \001(\005\022#\n\025recall_vs_b"
  "rute_force\030\002 \001(\002B\004\200\265\030\001\022(\n\032kendall_tau_vs"
  "_brute_force\030\003 \001(\002B\004\200\265\030\001\022(\n\032most_frequen"
  "t_code_percent\030\004 \001(\002B\004\200\265\030\001\022\027\n\tlopq_ndcg\030"
  "\005 \001(\002B\004\200\265\030\001\022\036\n\020brute_force_ndcg\030\006 \001(\002B\004\200"
  "\265\030\001B\016\n\005utilsZ\005utilsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2futils_2flopq_5fservice_2eproto_deps[1] = {
  &::descriptor_table_proto_2fclarifai_2fapi_2futils_2fextensions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2futils_2flopq_5fservice_2eproto_sccs[1] = {
  &scc_info_LOPQEvalResult_proto_2futils_2flopq_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2futils_2flopq_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2flopq_5fservice_2eproto = {
  false, false, descriptor_table_protodef_proto_2futils_2flopq_5fservice_2eproto, "proto/utils/lopq_service.proto", 307,
  &descriptor_table_proto_2futils_2flopq_5fservice_2eproto_once, descriptor_table_proto_2futils_2flopq_5fservice_2eproto_sccs, descriptor_table_proto_2futils_2flopq_5fservice_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_proto_2futils_2flopq_5fservice_2eproto::offsets,
  file_level_metadata_proto_2futils_2flopq_5fservice_2eproto, 1, file_level_enum_descriptors_proto_2futils_2flopq_5fservice_2eproto, file_level_service_descriptors_proto_2futils_2flopq_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2futils_2flopq_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2futils_2flopq_5fservice_2eproto)), true);

// ===================================================================

void LOPQEvalResult::InitAsDefaultInstance() {
}
class LOPQEvalResult::_Internal {
 public:
};

LOPQEvalResult::LOPQEvalResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQEvalResult)
}
LOPQEvalResult::LOPQEvalResult(const LOPQEvalResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&brute_force_ndcg_) -
    reinterpret_cast<char*>(&k_)) + sizeof(brute_force_ndcg_));
  // @@protoc_insertion_point(copy_constructor:LOPQEvalResult)
}

void LOPQEvalResult::SharedCtor() {
  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brute_force_ndcg_) -
      reinterpret_cast<char*>(&k_)) + sizeof(brute_force_ndcg_));
}

LOPQEvalResult::~LOPQEvalResult() {
  // @@protoc_insertion_point(destructor:LOPQEvalResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQEvalResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LOPQEvalResult::ArenaDtor(void* object) {
  LOPQEvalResult* _this = reinterpret_cast< LOPQEvalResult* >(object);
  (void)_this;
}
void LOPQEvalResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQEvalResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQEvalResult& LOPQEvalResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQEvalResult_proto_2futils_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQEvalResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQEvalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brute_force_ndcg_) -
      reinterpret_cast<char*>(&k_)) + sizeof(brute_force_ndcg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQEvalResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          recall_vs_brute_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          kendall_tau_vs_brute_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          most_frequent_code_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          lopq_ndcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          brute_force_ndcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQEvalResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQEvalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 k = 1;
  if (this->k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_k(), target);
  }

  // float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->recall_vs_brute_force() <= 0 && this->recall_vs_brute_force() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_recall_vs_brute_force(), target);
  }

  // float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->kendall_tau_vs_brute_force() <= 0 && this->kendall_tau_vs_brute_force() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_kendall_tau_vs_brute_force(), target);
  }

  // float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->most_frequent_code_percent() <= 0 && this->most_frequent_code_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_most_frequent_code_percent(), target);
  }

  // float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->lopq_ndcg() <= 0 && this->lopq_ndcg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_lopq_ndcg(), target);
  }

  // float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->brute_force_ndcg() <= 0 && this->brute_force_ndcg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_brute_force_ndcg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQEvalResult)
  return target;
}

size_t LOPQEvalResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQEvalResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 k = 1;
  if (this->k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_k());
  }

  // float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->recall_vs_brute_force() <= 0 && this->recall_vs_brute_force() >= 0)) {
    total_size += 1 + 4;
  }

  // float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->kendall_tau_vs_brute_force() <= 0 && this->kendall_tau_vs_brute_force() >= 0)) {
    total_size += 1 + 4;
  }

  // float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->most_frequent_code_percent() <= 0 && this->most_frequent_code_percent() >= 0)) {
    total_size += 1 + 4;
  }

  // float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->lopq_ndcg() <= 0 && this->lopq_ndcg() >= 0)) {
    total_size += 1 + 4;
  }

  // float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->brute_force_ndcg() <= 0 && this->brute_force_ndcg() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQEvalResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQEvalResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQEvalResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQEvalResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQEvalResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQEvalResult)
    MergeFrom(*source);
  }
}

void LOPQEvalResult::MergeFrom(const LOPQEvalResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQEvalResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.k() != 0) {
    _internal_set_k(from._internal_k());
  }
  if (!(from.recall_vs_brute_force() <= 0 && from.recall_vs_brute_force() >= 0)) {
    _internal_set_recall_vs_brute_force(from._internal_recall_vs_brute_force());
  }
  if (!(from.kendall_tau_vs_brute_force() <= 0 && from.kendall_tau_vs_brute_force() >= 0)) {
    _internal_set_kendall_tau_vs_brute_force(from._internal_kendall_tau_vs_brute_force());
  }
  if (!(from.most_frequent_code_percent() <= 0 && from.most_frequent_code_percent() >= 0)) {
    _internal_set_most_frequent_code_percent(from._internal_most_frequent_code_percent());
  }
  if (!(from.lopq_ndcg() <= 0 && from.lopq_ndcg() >= 0)) {
    _internal_set_lopq_ndcg(from._internal_lopq_ndcg());
  }
  if (!(from.brute_force_ndcg() <= 0 && from.brute_force_ndcg() >= 0)) {
    _internal_set_brute_force_ndcg(from._internal_brute_force_ndcg());
  }
}

void LOPQEvalResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQEvalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQEvalResult::CopyFrom(const LOPQEvalResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQEvalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQEvalResult::IsInitialized() const {
  return true;
}

void LOPQEvalResult::InternalSwap(LOPQEvalResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LOPQEvalResult, brute_force_ndcg_)
      + sizeof(LOPQEvalResult::brute_force_ndcg_)
      - PROTOBUF_FIELD_OFFSET(LOPQEvalResult, k_)>(
          reinterpret_cast<char*>(&k_),
          reinterpret_cast<char*>(&other->k_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQEvalResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LOPQEvalResult* Arena::CreateMaybeMessage< ::LOPQEvalResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQEvalResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
