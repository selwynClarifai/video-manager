// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/pasting_data_provider.proto

#include "proto/utils/pasting_data_provider.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_MiniBatchItemStage_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fpasting_5fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PastingLevelParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessingParams_proto_2futils_2fdata_5fprovider_2eproto;
class PastingDataProviderParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PastingDataProviderParams> _instance;
} _PastingDataProviderParams_default_instance_;
class PastingLevelParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PastingLevelParams> _instance;
} _PastingLevelParams_default_instance_;
static void InitDefaultsscc_info_PastingDataProviderParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PastingDataProviderParams_default_instance_;
    new (ptr) ::PastingDataProviderParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PastingDataProviderParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PastingDataProviderParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PastingDataProviderParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto}, {
      &scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_PastingLevelParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto.base,
      &scc_info_MiniBatchItemStage_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_ProcessingParams_proto_2futils_2fdata_5fprovider_2eproto.base,}};

static void InitDefaultsscc_info_PastingLevelParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PastingLevelParams_default_instance_;
    new (ptr) ::PastingLevelParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PastingLevelParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PastingLevelParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PastingLevelParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto}, {
      &scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2futils_2fpasting_5fdata_5fprovider_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2futils_2fpasting_5fdata_5fprovider_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2futils_2fpasting_5fdata_5fprovider_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2futils_2fpasting_5fdata_5fprovider_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PastingDataProviderParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PastingDataProviderParams, background_dataset_),
  PROTOBUF_FIELD_OFFSET(::PastingDataProviderParams, background_dpp_),
  PROTOBUF_FIELD_OFFSET(::PastingDataProviderParams, level_dpp_),
  PROTOBUF_FIELD_OFFSET(::PastingDataProviderParams, output_dataset_),
  PROTOBUF_FIELD_OFFSET(::PastingDataProviderParams, mbitem_stage_),
  PROTOBUF_FIELD_OFFSET(::PastingDataProviderParams, processing_params_),
  PROTOBUF_FIELD_OFFSET(::PastingDataProviderParams, background_dataset_split_),
  PROTOBUF_FIELD_OFFSET(::PastingDataProviderParams, random_layer_order_),
  PROTOBUF_FIELD_OFFSET(::PastingDataProviderParams, constrain_boxes_to_visible_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PastingLevelParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PastingLevelParams, common_dpp_),
  PROTOBUF_FIELD_OFFSET(::PastingLevelParams, dataset_name_),
  PROTOBUF_FIELD_OFFSET(::PastingLevelParams, min_x_),
  PROTOBUF_FIELD_OFFSET(::PastingLevelParams, max_x_),
  PROTOBUF_FIELD_OFFSET(::PastingLevelParams, min_y_),
  PROTOBUF_FIELD_OFFSET(::PastingLevelParams, max_y_),
  PROTOBUF_FIELD_OFFSET(::PastingLevelParams, paste_prob_),
  PROTOBUF_FIELD_OFFSET(::PastingLevelParams, write_bbox_),
  PROTOBUF_FIELD_OFFSET(::PastingLevelParams, min_visible_),
  PROTOBUF_FIELD_OFFSET(::PastingLevelParams, max_visible_),
  PROTOBUF_FIELD_OFFSET(::PastingLevelParams, repetitions_),
  PROTOBUF_FIELD_OFFSET(::PastingLevelParams, dataset_split_),
  PROTOBUF_FIELD_OFFSET(::PastingLevelParams, pasting_method_),
  PROTOBUF_FIELD_OFFSET(::PastingLevelParams, skip_prob_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PastingDataProviderParams)},
  { 14, -1, sizeof(::PastingLevelParams)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PastingDataProviderParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PastingLevelParams_default_instance_),
};

const char descriptor_table_protodef_proto_2futils_2fpasting_5fdata_5fprovider_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'proto/utils/pasting_data_provider.prot"
  "o\032\037proto/utils/data_provider.proto\"\337\002\n\031P"
  "astingDataProviderParams\022\032\n\022background_d"
  "ataset\030\001 \001(\t\022+\n\016background_dpp\030\002 \001(\0132\023.D"
  "ataProviderParams\022&\n\tlevel_dpp\030\003 \003(\0132\023.P"
  "astingLevelParams\022\026\n\016output_dataset\030\004 \001("
  "\t\022)\n\014mbitem_stage\030\005 \003(\0132\023.MiniBatchItemS"
  "tage\022,\n\021processing_params\030\006 \001(\0132\021.Proces"
  "singParams\022 \n\030background_dataset_split\030\007"
  " \001(\t\022\032\n\022random_layer_order\030\010 \001(\010\022\"\n\032cons"
  "train_boxes_to_visible\030\t \001(\010\"\270\002\n\022Pasting"
  "LevelParams\022\'\n\ncommon_dpp\030\001 \001(\0132\023.DataPr"
  "oviderParams\022\024\n\014dataset_name\030\002 \001(\t\022\r\n\005mi"
  "n_x\030\003 \001(\002\022\r\n\005max_x\030\004 \001(\002\022\r\n\005min_y\030\005 \001(\002\022"
  "\r\n\005max_y\030\006 \001(\002\022\022\n\npaste_prob\030\007 \001(\002\022\022\n\nwr"
  "ite_bbox\030\010 \001(\010\022\023\n\013min_visible\030\t \001(\002\022\023\n\013m"
  "ax_visible\030\n \001(\002\022\023\n\013repetitions\030\013 \001(\005\022\025\n"
  "\rdataset_split\030\014 \001(\t\022\026\n\016pasting_method\030\r"
  " \001(\t\022\021\n\tskip_prob\030\016 \001(\002B\016\n\005utilsZ\005utilsb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2futils_2fpasting_5fdata_5fprovider_2eproto_deps[1] = {
  &::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2futils_2fpasting_5fdata_5fprovider_2eproto_sccs[2] = {
  &scc_info_PastingDataProviderParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto.base,
  &scc_info_PastingLevelParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2futils_2fpasting_5fdata_5fprovider_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fpasting_5fdata_5fprovider_2eproto = {
  false, false, descriptor_table_protodef_proto_2futils_2fpasting_5fdata_5fprovider_2eproto, "proto/utils/pasting_data_provider.proto", 767,
  &descriptor_table_proto_2futils_2fpasting_5fdata_5fprovider_2eproto_once, descriptor_table_proto_2futils_2fpasting_5fdata_5fprovider_2eproto_sccs, descriptor_table_proto_2futils_2fpasting_5fdata_5fprovider_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_proto_2futils_2fpasting_5fdata_5fprovider_2eproto::offsets,
  file_level_metadata_proto_2futils_2fpasting_5fdata_5fprovider_2eproto, 2, file_level_enum_descriptors_proto_2futils_2fpasting_5fdata_5fprovider_2eproto, file_level_service_descriptors_proto_2futils_2fpasting_5fdata_5fprovider_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2futils_2fpasting_5fdata_5fprovider_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2futils_2fpasting_5fdata_5fprovider_2eproto)), true);

// ===================================================================

void PastingDataProviderParams::InitAsDefaultInstance() {
  ::_PastingDataProviderParams_default_instance_._instance.get_mutable()->background_dpp_ = const_cast< ::DataProviderParams*>(
      ::DataProviderParams::internal_default_instance());
  ::_PastingDataProviderParams_default_instance_._instance.get_mutable()->processing_params_ = const_cast< ::ProcessingParams*>(
      ::ProcessingParams::internal_default_instance());
}
class PastingDataProviderParams::_Internal {
 public:
  static const ::DataProviderParams& background_dpp(const PastingDataProviderParams* msg);
  static const ::ProcessingParams& processing_params(const PastingDataProviderParams* msg);
};

const ::DataProviderParams&
PastingDataProviderParams::_Internal::background_dpp(const PastingDataProviderParams* msg) {
  return *msg->background_dpp_;
}
const ::ProcessingParams&
PastingDataProviderParams::_Internal::processing_params(const PastingDataProviderParams* msg) {
  return *msg->processing_params_;
}
void PastingDataProviderParams::clear_background_dpp() {
  if (GetArena() == nullptr && background_dpp_ != nullptr) {
    delete background_dpp_;
  }
  background_dpp_ = nullptr;
}
void PastingDataProviderParams::clear_mbitem_stage() {
  mbitem_stage_.Clear();
}
void PastingDataProviderParams::clear_processing_params() {
  if (GetArena() == nullptr && processing_params_ != nullptr) {
    delete processing_params_;
  }
  processing_params_ = nullptr;
}
PastingDataProviderParams::PastingDataProviderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  level_dpp_(arena),
  mbitem_stage_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PastingDataProviderParams)
}
PastingDataProviderParams::PastingDataProviderParams(const PastingDataProviderParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      level_dpp_(from.level_dpp_),
      mbitem_stage_(from.mbitem_stage_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  background_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_background_dataset().empty()) {
    background_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_background_dataset(),
      GetArena());
  }
  output_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output_dataset().empty()) {
    output_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_output_dataset(),
      GetArena());
  }
  background_dataset_split_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_background_dataset_split().empty()) {
    background_dataset_split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_background_dataset_split(),
      GetArena());
  }
  if (from._internal_has_background_dpp()) {
    background_dpp_ = new ::DataProviderParams(*from.background_dpp_);
  } else {
    background_dpp_ = nullptr;
  }
  if (from._internal_has_processing_params()) {
    processing_params_ = new ::ProcessingParams(*from.processing_params_);
  } else {
    processing_params_ = nullptr;
  }
  ::memcpy(&random_layer_order_, &from.random_layer_order_,
    static_cast<size_t>(reinterpret_cast<char*>(&constrain_boxes_to_visible_) -
    reinterpret_cast<char*>(&random_layer_order_)) + sizeof(constrain_boxes_to_visible_));
  // @@protoc_insertion_point(copy_constructor:PastingDataProviderParams)
}

void PastingDataProviderParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PastingDataProviderParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto.base);
  background_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  background_dataset_split_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&background_dpp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&constrain_boxes_to_visible_) -
      reinterpret_cast<char*>(&background_dpp_)) + sizeof(constrain_boxes_to_visible_));
}

PastingDataProviderParams::~PastingDataProviderParams() {
  // @@protoc_insertion_point(destructor:PastingDataProviderParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PastingDataProviderParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  background_dataset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_dataset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  background_dataset_split_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete background_dpp_;
  if (this != internal_default_instance()) delete processing_params_;
}

void PastingDataProviderParams::ArenaDtor(void* object) {
  PastingDataProviderParams* _this = reinterpret_cast< PastingDataProviderParams* >(object);
  (void)_this;
}
void PastingDataProviderParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PastingDataProviderParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PastingDataProviderParams& PastingDataProviderParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PastingDataProviderParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void PastingDataProviderParams::Clear() {
// @@protoc_insertion_point(message_clear_start:PastingDataProviderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_dpp_.Clear();
  mbitem_stage_.Clear();
  background_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  background_dataset_split_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && background_dpp_ != nullptr) {
    delete background_dpp_;
  }
  background_dpp_ = nullptr;
  if (GetArena() == nullptr && processing_params_ != nullptr) {
    delete processing_params_;
  }
  processing_params_ = nullptr;
  ::memset(&random_layer_order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&constrain_boxes_to_visible_) -
      reinterpret_cast<char*>(&random_layer_order_)) + sizeof(constrain_boxes_to_visible_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PastingDataProviderParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string background_dataset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_background_dataset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PastingDataProviderParams.background_dataset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataProviderParams background_dpp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_background_dpp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PastingLevelParams level_dpp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_level_dpp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string output_dataset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_output_dataset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PastingDataProviderParams.output_dataset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MiniBatchItemStage mbitem_stage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mbitem_stage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .ProcessingParams processing_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string background_dataset_split = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_background_dataset_split();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PastingDataProviderParams.background_dataset_split"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool random_layer_order = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          random_layer_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool constrain_boxes_to_visible = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          constrain_boxes_to_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PastingDataProviderParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PastingDataProviderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string background_dataset = 1;
  if (this->background_dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_background_dataset().data(), static_cast<int>(this->_internal_background_dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PastingDataProviderParams.background_dataset");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_background_dataset(), target);
  }

  // .DataProviderParams background_dpp = 2;
  if (this->has_background_dpp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::background_dpp(this), target, stream);
  }

  // repeated .PastingLevelParams level_dpp = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_level_dpp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_level_dpp(i), target, stream);
  }

  // string output_dataset = 4;
  if (this->output_dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output_dataset().data(), static_cast<int>(this->_internal_output_dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PastingDataProviderParams.output_dataset");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_output_dataset(), target);
  }

  // repeated .MiniBatchItemStage mbitem_stage = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mbitem_stage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_mbitem_stage(i), target, stream);
  }

  // .ProcessingParams processing_params = 6;
  if (this->has_processing_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::processing_params(this), target, stream);
  }

  // string background_dataset_split = 7;
  if (this->background_dataset_split().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_background_dataset_split().data(), static_cast<int>(this->_internal_background_dataset_split().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PastingDataProviderParams.background_dataset_split");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_background_dataset_split(), target);
  }

  // bool random_layer_order = 8;
  if (this->random_layer_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_random_layer_order(), target);
  }

  // bool constrain_boxes_to_visible = 9;
  if (this->constrain_boxes_to_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_constrain_boxes_to_visible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PastingDataProviderParams)
  return target;
}

size_t PastingDataProviderParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PastingDataProviderParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PastingLevelParams level_dpp = 3;
  total_size += 1UL * this->_internal_level_dpp_size();
  for (const auto& msg : this->level_dpp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MiniBatchItemStage mbitem_stage = 5;
  total_size += 1UL * this->_internal_mbitem_stage_size();
  for (const auto& msg : this->mbitem_stage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string background_dataset = 1;
  if (this->background_dataset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_background_dataset());
  }

  // string output_dataset = 4;
  if (this->output_dataset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_dataset());
  }

  // string background_dataset_split = 7;
  if (this->background_dataset_split().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_background_dataset_split());
  }

  // .DataProviderParams background_dpp = 2;
  if (this->has_background_dpp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *background_dpp_);
  }

  // .ProcessingParams processing_params = 6;
  if (this->has_processing_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *processing_params_);
  }

  // bool random_layer_order = 8;
  if (this->random_layer_order() != 0) {
    total_size += 1 + 1;
  }

  // bool constrain_boxes_to_visible = 9;
  if (this->constrain_boxes_to_visible() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PastingDataProviderParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PastingDataProviderParams)
  GOOGLE_DCHECK_NE(&from, this);
  const PastingDataProviderParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PastingDataProviderParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PastingDataProviderParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PastingDataProviderParams)
    MergeFrom(*source);
  }
}

void PastingDataProviderParams::MergeFrom(const PastingDataProviderParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PastingDataProviderParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  level_dpp_.MergeFrom(from.level_dpp_);
  mbitem_stage_.MergeFrom(from.mbitem_stage_);
  if (from.background_dataset().size() > 0) {
    _internal_set_background_dataset(from._internal_background_dataset());
  }
  if (from.output_dataset().size() > 0) {
    _internal_set_output_dataset(from._internal_output_dataset());
  }
  if (from.background_dataset_split().size() > 0) {
    _internal_set_background_dataset_split(from._internal_background_dataset_split());
  }
  if (from.has_background_dpp()) {
    _internal_mutable_background_dpp()->::DataProviderParams::MergeFrom(from._internal_background_dpp());
  }
  if (from.has_processing_params()) {
    _internal_mutable_processing_params()->::ProcessingParams::MergeFrom(from._internal_processing_params());
  }
  if (from.random_layer_order() != 0) {
    _internal_set_random_layer_order(from._internal_random_layer_order());
  }
  if (from.constrain_boxes_to_visible() != 0) {
    _internal_set_constrain_boxes_to_visible(from._internal_constrain_boxes_to_visible());
  }
}

void PastingDataProviderParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PastingDataProviderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PastingDataProviderParams::CopyFrom(const PastingDataProviderParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PastingDataProviderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PastingDataProviderParams::IsInitialized() const {
  return true;
}

void PastingDataProviderParams::InternalSwap(PastingDataProviderParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  level_dpp_.InternalSwap(&other->level_dpp_);
  mbitem_stage_.InternalSwap(&other->mbitem_stage_);
  background_dataset_.Swap(&other->background_dataset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_dataset_.Swap(&other->output_dataset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  background_dataset_split_.Swap(&other->background_dataset_split_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PastingDataProviderParams, constrain_boxes_to_visible_)
      + sizeof(PastingDataProviderParams::constrain_boxes_to_visible_)
      - PROTOBUF_FIELD_OFFSET(PastingDataProviderParams, background_dpp_)>(
          reinterpret_cast<char*>(&background_dpp_),
          reinterpret_cast<char*>(&other->background_dpp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PastingDataProviderParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PastingLevelParams::InitAsDefaultInstance() {
  ::_PastingLevelParams_default_instance_._instance.get_mutable()->common_dpp_ = const_cast< ::DataProviderParams*>(
      ::DataProviderParams::internal_default_instance());
}
class PastingLevelParams::_Internal {
 public:
  static const ::DataProviderParams& common_dpp(const PastingLevelParams* msg);
};

const ::DataProviderParams&
PastingLevelParams::_Internal::common_dpp(const PastingLevelParams* msg) {
  return *msg->common_dpp_;
}
void PastingLevelParams::clear_common_dpp() {
  if (GetArena() == nullptr && common_dpp_ != nullptr) {
    delete common_dpp_;
  }
  common_dpp_ = nullptr;
}
PastingLevelParams::PastingLevelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PastingLevelParams)
}
PastingLevelParams::PastingLevelParams(const PastingLevelParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dataset_name().empty()) {
    dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dataset_name(),
      GetArena());
  }
  dataset_split_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dataset_split().empty()) {
    dataset_split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dataset_split(),
      GetArena());
  }
  pasting_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pasting_method().empty()) {
    pasting_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pasting_method(),
      GetArena());
  }
  if (from._internal_has_common_dpp()) {
    common_dpp_ = new ::DataProviderParams(*from.common_dpp_);
  } else {
    common_dpp_ = nullptr;
  }
  ::memcpy(&min_x_, &from.min_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&skip_prob_) -
    reinterpret_cast<char*>(&min_x_)) + sizeof(skip_prob_));
  // @@protoc_insertion_point(copy_constructor:PastingLevelParams)
}

void PastingLevelParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PastingLevelParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto.base);
  dataset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_split_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pasting_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&common_dpp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_prob_) -
      reinterpret_cast<char*>(&common_dpp_)) + sizeof(skip_prob_));
}

PastingLevelParams::~PastingLevelParams() {
  // @@protoc_insertion_point(destructor:PastingLevelParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PastingLevelParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dataset_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_split_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pasting_method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete common_dpp_;
}

void PastingLevelParams::ArenaDtor(void* object) {
  PastingLevelParams* _this = reinterpret_cast< PastingLevelParams* >(object);
  (void)_this;
}
void PastingLevelParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PastingLevelParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PastingLevelParams& PastingLevelParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PastingLevelParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void PastingLevelParams::Clear() {
// @@protoc_insertion_point(message_clear_start:PastingLevelParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dataset_split_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pasting_method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && common_dpp_ != nullptr) {
    delete common_dpp_;
  }
  common_dpp_ = nullptr;
  ::memset(&min_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_prob_) -
      reinterpret_cast<char*>(&min_x_)) + sizeof(skip_prob_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PastingLevelParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DataProviderParams common_dpp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common_dpp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dataset_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dataset_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PastingLevelParams.dataset_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          min_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          max_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          min_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          max_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float paste_prob = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          paste_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool write_bbox = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          write_bbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_visible = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          min_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_visible = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          max_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 repetitions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          repetitions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dataset_split = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_dataset_split();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PastingLevelParams.dataset_split"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pasting_method = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_pasting_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PastingLevelParams.pasting_method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float skip_prob = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          skip_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PastingLevelParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PastingLevelParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DataProviderParams common_dpp = 1;
  if (this->has_common_dpp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common_dpp(this), target, stream);
  }

  // string dataset_name = 2;
  if (this->dataset_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_name().data(), static_cast<int>(this->_internal_dataset_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PastingLevelParams.dataset_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_name(), target);
  }

  // float min_x = 3;
  if (!(this->min_x() <= 0 && this->min_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_min_x(), target);
  }

  // float max_x = 4;
  if (!(this->max_x() <= 0 && this->max_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_max_x(), target);
  }

  // float min_y = 5;
  if (!(this->min_y() <= 0 && this->min_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_min_y(), target);
  }

  // float max_y = 6;
  if (!(this->max_y() <= 0 && this->max_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_max_y(), target);
  }

  // float paste_prob = 7;
  if (!(this->paste_prob() <= 0 && this->paste_prob() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_paste_prob(), target);
  }

  // bool write_bbox = 8;
  if (this->write_bbox() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_write_bbox(), target);
  }

  // float min_visible = 9;
  if (!(this->min_visible() <= 0 && this->min_visible() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_min_visible(), target);
  }

  // float max_visible = 10;
  if (!(this->max_visible() <= 0 && this->max_visible() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_max_visible(), target);
  }

  // int32 repetitions = 11;
  if (this->repetitions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_repetitions(), target);
  }

  // string dataset_split = 12;
  if (this->dataset_split().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_split().data(), static_cast<int>(this->_internal_dataset_split().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PastingLevelParams.dataset_split");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_dataset_split(), target);
  }

  // string pasting_method = 13;
  if (this->pasting_method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pasting_method().data(), static_cast<int>(this->_internal_pasting_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PastingLevelParams.pasting_method");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_pasting_method(), target);
  }

  // float skip_prob = 14;
  if (!(this->skip_prob() <= 0 && this->skip_prob() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_skip_prob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PastingLevelParams)
  return target;
}

size_t PastingLevelParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PastingLevelParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_name = 2;
  if (this->dataset_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_name());
  }

  // string dataset_split = 12;
  if (this->dataset_split().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_split());
  }

  // string pasting_method = 13;
  if (this->pasting_method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pasting_method());
  }

  // .DataProviderParams common_dpp = 1;
  if (this->has_common_dpp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_dpp_);
  }

  // float min_x = 3;
  if (!(this->min_x() <= 0 && this->min_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_x = 4;
  if (!(this->max_x() <= 0 && this->max_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_y = 5;
  if (!(this->min_y() <= 0 && this->min_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_y = 6;
  if (!(this->max_y() <= 0 && this->max_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float paste_prob = 7;
  if (!(this->paste_prob() <= 0 && this->paste_prob() >= 0)) {
    total_size += 1 + 4;
  }

  // bool write_bbox = 8;
  if (this->write_bbox() != 0) {
    total_size += 1 + 1;
  }

  // float min_visible = 9;
  if (!(this->min_visible() <= 0 && this->min_visible() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_visible = 10;
  if (!(this->max_visible() <= 0 && this->max_visible() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 repetitions = 11;
  if (this->repetitions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repetitions());
  }

  // float skip_prob = 14;
  if (!(this->skip_prob() <= 0 && this->skip_prob() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PastingLevelParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PastingLevelParams)
  GOOGLE_DCHECK_NE(&from, this);
  const PastingLevelParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PastingLevelParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PastingLevelParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PastingLevelParams)
    MergeFrom(*source);
  }
}

void PastingLevelParams::MergeFrom(const PastingLevelParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PastingLevelParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dataset_name().size() > 0) {
    _internal_set_dataset_name(from._internal_dataset_name());
  }
  if (from.dataset_split().size() > 0) {
    _internal_set_dataset_split(from._internal_dataset_split());
  }
  if (from.pasting_method().size() > 0) {
    _internal_set_pasting_method(from._internal_pasting_method());
  }
  if (from.has_common_dpp()) {
    _internal_mutable_common_dpp()->::DataProviderParams::MergeFrom(from._internal_common_dpp());
  }
  if (!(from.min_x() <= 0 && from.min_x() >= 0)) {
    _internal_set_min_x(from._internal_min_x());
  }
  if (!(from.max_x() <= 0 && from.max_x() >= 0)) {
    _internal_set_max_x(from._internal_max_x());
  }
  if (!(from.min_y() <= 0 && from.min_y() >= 0)) {
    _internal_set_min_y(from._internal_min_y());
  }
  if (!(from.max_y() <= 0 && from.max_y() >= 0)) {
    _internal_set_max_y(from._internal_max_y());
  }
  if (!(from.paste_prob() <= 0 && from.paste_prob() >= 0)) {
    _internal_set_paste_prob(from._internal_paste_prob());
  }
  if (from.write_bbox() != 0) {
    _internal_set_write_bbox(from._internal_write_bbox());
  }
  if (!(from.min_visible() <= 0 && from.min_visible() >= 0)) {
    _internal_set_min_visible(from._internal_min_visible());
  }
  if (!(from.max_visible() <= 0 && from.max_visible() >= 0)) {
    _internal_set_max_visible(from._internal_max_visible());
  }
  if (from.repetitions() != 0) {
    _internal_set_repetitions(from._internal_repetitions());
  }
  if (!(from.skip_prob() <= 0 && from.skip_prob() >= 0)) {
    _internal_set_skip_prob(from._internal_skip_prob());
  }
}

void PastingLevelParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PastingLevelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PastingLevelParams::CopyFrom(const PastingLevelParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PastingLevelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PastingLevelParams::IsInitialized() const {
  return true;
}

void PastingLevelParams::InternalSwap(PastingLevelParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dataset_name_.Swap(&other->dataset_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dataset_split_.Swap(&other->dataset_split_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pasting_method_.Swap(&other->pasting_method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PastingLevelParams, skip_prob_)
      + sizeof(PastingLevelParams::skip_prob_)
      - PROTOBUF_FIELD_OFFSET(PastingLevelParams, common_dpp_)>(
          reinterpret_cast<char*>(&common_dpp_),
          reinterpret_cast<char*>(&other->common_dpp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PastingLevelParams::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PastingDataProviderParams* Arena::CreateMaybeMessage< ::PastingDataProviderParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PastingDataProviderParams >(arena);
}
template<> PROTOBUF_NOINLINE ::PastingLevelParams* Arena::CreateMaybeMessage< ::PastingLevelParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PastingLevelParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
