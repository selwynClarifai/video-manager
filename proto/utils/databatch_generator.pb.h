// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/databatch_generator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fdatabatch_5fgenerator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fdatabatch_5fgenerator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/data_provider.pb.h"
#include "proto/utils/pasting_data_provider.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdatabatch_5fgenerator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2fdatabatch_5fgenerator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto;
class DataBatchGeneratorParams;
class DataBatchGeneratorParamsDefaultTypeInternal;
extern DataBatchGeneratorParamsDefaultTypeInternal _DataBatchGeneratorParams_default_instance_;
class DataBatchSamplerParams;
class DataBatchSamplerParamsDefaultTypeInternal;
extern DataBatchSamplerParamsDefaultTypeInternal _DataBatchSamplerParams_default_instance_;
class DatasetReaderParams;
class DatasetReaderParamsDefaultTypeInternal;
extern DatasetReaderParamsDefaultTypeInternal _DatasetReaderParams_default_instance_;
class ImageDatasetReaderParams;
class ImageDatasetReaderParamsDefaultTypeInternal;
extern ImageDatasetReaderParamsDefaultTypeInternal _ImageDatasetReaderParams_default_instance_;
class SavedOutputReaderParams;
class SavedOutputReaderParamsDefaultTypeInternal;
extern SavedOutputReaderParamsDefaultTypeInternal _SavedOutputReaderParams_default_instance_;
class gRPCDataBatchReaderParams;
class gRPCDataBatchReaderParamsDefaultTypeInternal;
extern gRPCDataBatchReaderParamsDefaultTypeInternal _gRPCDataBatchReaderParams_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DataBatchGeneratorParams* Arena::CreateMaybeMessage<::DataBatchGeneratorParams>(Arena*);
template<> ::DataBatchSamplerParams* Arena::CreateMaybeMessage<::DataBatchSamplerParams>(Arena*);
template<> ::DatasetReaderParams* Arena::CreateMaybeMessage<::DatasetReaderParams>(Arena*);
template<> ::ImageDatasetReaderParams* Arena::CreateMaybeMessage<::ImageDatasetReaderParams>(Arena*);
template<> ::SavedOutputReaderParams* Arena::CreateMaybeMessage<::SavedOutputReaderParams>(Arena*);
template<> ::gRPCDataBatchReaderParams* Arena::CreateMaybeMessage<::gRPCDataBatchReaderParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DataBatchGeneratorParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataBatchGeneratorParams) */ {
 public:
  inline DataBatchGeneratorParams() : DataBatchGeneratorParams(nullptr) {}
  virtual ~DataBatchGeneratorParams();

  DataBatchGeneratorParams(const DataBatchGeneratorParams& from);
  DataBatchGeneratorParams(DataBatchGeneratorParams&& from) noexcept
    : DataBatchGeneratorParams() {
    *this = ::std::move(from);
  }

  inline DataBatchGeneratorParams& operator=(const DataBatchGeneratorParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataBatchGeneratorParams& operator=(DataBatchGeneratorParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataBatchGeneratorParams& default_instance();

  enum GeneratorCase {
    kImageDatasetReaderParams = 1,
    kSavedOutputReaderParams = 2,
    kDatabatchSamplerParams = 3,
    kGrpcDatabatchReaderParams = 4,
    kPastingDataProviderParams = 5,
    GENERATOR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBatchGeneratorParams* internal_default_instance() {
    return reinterpret_cast<const DataBatchGeneratorParams*>(
               &_DataBatchGeneratorParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataBatchGeneratorParams& a, DataBatchGeneratorParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DataBatchGeneratorParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataBatchGeneratorParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataBatchGeneratorParams* New() const final {
    return CreateMaybeMessage<DataBatchGeneratorParams>(nullptr);
  }

  DataBatchGeneratorParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataBatchGeneratorParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataBatchGeneratorParams& from);
  void MergeFrom(const DataBatchGeneratorParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBatchGeneratorParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataBatchGeneratorParams";
  }
  protected:
  explicit DataBatchGeneratorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto);
    return ::descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabatchSizeFieldNumber = 100,
    kNumThreadsFieldNumber = 101,
    kImageDatasetReaderParamsFieldNumber = 1,
    kSavedOutputReaderParamsFieldNumber = 2,
    kDatabatchSamplerParamsFieldNumber = 3,
    kGrpcDatabatchReaderParamsFieldNumber = 4,
    kPastingDataProviderParamsFieldNumber = 5,
  };
  // int32 databatch_size = 100;
  void clear_databatch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 databatch_size() const;
  void set_databatch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_databatch_size() const;
  void _internal_set_databatch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_threads = 101;
  void clear_num_threads();
  ::PROTOBUF_NAMESPACE_ID::int32 num_threads() const;
  void set_num_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_threads() const;
  void _internal_set_num_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .ImageDatasetReaderParams image_dataset_reader_params = 1;
  bool has_image_dataset_reader_params() const;
  private:
  bool _internal_has_image_dataset_reader_params() const;
  public:
  void clear_image_dataset_reader_params();
  const ::ImageDatasetReaderParams& image_dataset_reader_params() const;
  ::ImageDatasetReaderParams* release_image_dataset_reader_params();
  ::ImageDatasetReaderParams* mutable_image_dataset_reader_params();
  void set_allocated_image_dataset_reader_params(::ImageDatasetReaderParams* image_dataset_reader_params);
  private:
  const ::ImageDatasetReaderParams& _internal_image_dataset_reader_params() const;
  ::ImageDatasetReaderParams* _internal_mutable_image_dataset_reader_params();
  public:
  void unsafe_arena_set_allocated_image_dataset_reader_params(
      ::ImageDatasetReaderParams* image_dataset_reader_params);
  ::ImageDatasetReaderParams* unsafe_arena_release_image_dataset_reader_params();

  // .SavedOutputReaderParams saved_output_reader_params = 2;
  bool has_saved_output_reader_params() const;
  private:
  bool _internal_has_saved_output_reader_params() const;
  public:
  void clear_saved_output_reader_params();
  const ::SavedOutputReaderParams& saved_output_reader_params() const;
  ::SavedOutputReaderParams* release_saved_output_reader_params();
  ::SavedOutputReaderParams* mutable_saved_output_reader_params();
  void set_allocated_saved_output_reader_params(::SavedOutputReaderParams* saved_output_reader_params);
  private:
  const ::SavedOutputReaderParams& _internal_saved_output_reader_params() const;
  ::SavedOutputReaderParams* _internal_mutable_saved_output_reader_params();
  public:
  void unsafe_arena_set_allocated_saved_output_reader_params(
      ::SavedOutputReaderParams* saved_output_reader_params);
  ::SavedOutputReaderParams* unsafe_arena_release_saved_output_reader_params();

  // .DataBatchSamplerParams databatch_sampler_params = 3;
  bool has_databatch_sampler_params() const;
  private:
  bool _internal_has_databatch_sampler_params() const;
  public:
  void clear_databatch_sampler_params();
  const ::DataBatchSamplerParams& databatch_sampler_params() const;
  ::DataBatchSamplerParams* release_databatch_sampler_params();
  ::DataBatchSamplerParams* mutable_databatch_sampler_params();
  void set_allocated_databatch_sampler_params(::DataBatchSamplerParams* databatch_sampler_params);
  private:
  const ::DataBatchSamplerParams& _internal_databatch_sampler_params() const;
  ::DataBatchSamplerParams* _internal_mutable_databatch_sampler_params();
  public:
  void unsafe_arena_set_allocated_databatch_sampler_params(
      ::DataBatchSamplerParams* databatch_sampler_params);
  ::DataBatchSamplerParams* unsafe_arena_release_databatch_sampler_params();

  // .gRPCDataBatchReaderParams grpc_databatch_reader_params = 4;
  bool has_grpc_databatch_reader_params() const;
  private:
  bool _internal_has_grpc_databatch_reader_params() const;
  public:
  void clear_grpc_databatch_reader_params();
  const ::gRPCDataBatchReaderParams& grpc_databatch_reader_params() const;
  ::gRPCDataBatchReaderParams* release_grpc_databatch_reader_params();
  ::gRPCDataBatchReaderParams* mutable_grpc_databatch_reader_params();
  void set_allocated_grpc_databatch_reader_params(::gRPCDataBatchReaderParams* grpc_databatch_reader_params);
  private:
  const ::gRPCDataBatchReaderParams& _internal_grpc_databatch_reader_params() const;
  ::gRPCDataBatchReaderParams* _internal_mutable_grpc_databatch_reader_params();
  public:
  void unsafe_arena_set_allocated_grpc_databatch_reader_params(
      ::gRPCDataBatchReaderParams* grpc_databatch_reader_params);
  ::gRPCDataBatchReaderParams* unsafe_arena_release_grpc_databatch_reader_params();

  // .PastingDataProviderParams pasting_data_provider_params = 5;
  bool has_pasting_data_provider_params() const;
  private:
  bool _internal_has_pasting_data_provider_params() const;
  public:
  void clear_pasting_data_provider_params();
  const ::PastingDataProviderParams& pasting_data_provider_params() const;
  ::PastingDataProviderParams* release_pasting_data_provider_params();
  ::PastingDataProviderParams* mutable_pasting_data_provider_params();
  void set_allocated_pasting_data_provider_params(::PastingDataProviderParams* pasting_data_provider_params);
  private:
  const ::PastingDataProviderParams& _internal_pasting_data_provider_params() const;
  ::PastingDataProviderParams* _internal_mutable_pasting_data_provider_params();
  public:
  void unsafe_arena_set_allocated_pasting_data_provider_params(
      ::PastingDataProviderParams* pasting_data_provider_params);
  ::PastingDataProviderParams* unsafe_arena_release_pasting_data_provider_params();

  void clear_generator();
  GeneratorCase generator_case() const;
  // @@protoc_insertion_point(class_scope:DataBatchGeneratorParams)
 private:
  class _Internal;
  void set_has_image_dataset_reader_params();
  void set_has_saved_output_reader_params();
  void set_has_databatch_sampler_params();
  void set_has_grpc_databatch_reader_params();
  void set_has_pasting_data_provider_params();

  inline bool has_generator() const;
  inline void clear_has_generator();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 databatch_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_threads_;
  union GeneratorUnion {
    GeneratorUnion() {}
    ::ImageDatasetReaderParams* image_dataset_reader_params_;
    ::SavedOutputReaderParams* saved_output_reader_params_;
    ::DataBatchSamplerParams* databatch_sampler_params_;
    ::gRPCDataBatchReaderParams* grpc_databatch_reader_params_;
    ::PastingDataProviderParams* pasting_data_provider_params_;
  } generator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2futils_2fdatabatch_5fgenerator_2eproto;
};
// -------------------------------------------------------------------

class DatasetReaderParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DatasetReaderParams) */ {
 public:
  inline DatasetReaderParams() : DatasetReaderParams(nullptr) {}
  virtual ~DatasetReaderParams();

  DatasetReaderParams(const DatasetReaderParams& from);
  DatasetReaderParams(DatasetReaderParams&& from) noexcept
    : DatasetReaderParams() {
    *this = ::std::move(from);
  }

  inline DatasetReaderParams& operator=(const DatasetReaderParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetReaderParams& operator=(DatasetReaderParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DatasetReaderParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatasetReaderParams* internal_default_instance() {
    return reinterpret_cast<const DatasetReaderParams*>(
               &_DatasetReaderParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DatasetReaderParams& a, DatasetReaderParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DatasetReaderParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetReaderParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatasetReaderParams* New() const final {
    return CreateMaybeMessage<DatasetReaderParams>(nullptr);
  }

  DatasetReaderParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatasetReaderParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DatasetReaderParams& from);
  void MergeFrom(const DatasetReaderParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatasetReaderParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DatasetReaderParams";
  }
  protected:
  explicit DatasetReaderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto);
    return ::descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetFieldNumber = 1,
    kSplitFieldNumber = 2,
    kShuffleFieldNumber = 3,
    kContinuousFieldNumber = 4,
    kStripEmptyFieldNumber = 5,
    kSetDatasetNameFieldNumber = 6,
  };
  // string dataset = 1;
  void clear_dataset();
  const std::string& dataset() const;
  void set_dataset(const std::string& value);
  void set_dataset(std::string&& value);
  void set_dataset(const char* value);
  void set_dataset(const char* value, size_t size);
  std::string* mutable_dataset();
  std::string* release_dataset();
  void set_allocated_dataset(std::string* dataset);
  private:
  const std::string& _internal_dataset() const;
  void _internal_set_dataset(const std::string& value);
  std::string* _internal_mutable_dataset();
  public:

  // string split = 2;
  void clear_split();
  const std::string& split() const;
  void set_split(const std::string& value);
  void set_split(std::string&& value);
  void set_split(const char* value);
  void set_split(const char* value, size_t size);
  std::string* mutable_split();
  std::string* release_split();
  void set_allocated_split(std::string* split);
  private:
  const std::string& _internal_split() const;
  void _internal_set_split(const std::string& value);
  std::string* _internal_mutable_split();
  public:

  // bool shuffle = 3;
  void clear_shuffle();
  bool shuffle() const;
  void set_shuffle(bool value);
  private:
  bool _internal_shuffle() const;
  void _internal_set_shuffle(bool value);
  public:

  // bool continuous = 4;
  void clear_continuous();
  bool continuous() const;
  void set_continuous(bool value);
  private:
  bool _internal_continuous() const;
  void _internal_set_continuous(bool value);
  public:

  // bool strip_empty = 5;
  void clear_strip_empty();
  bool strip_empty() const;
  void set_strip_empty(bool value);
  private:
  bool _internal_strip_empty() const;
  void _internal_set_strip_empty(bool value);
  public:

  // bool set_dataset_name = 6;
  void clear_set_dataset_name();
  bool set_dataset_name() const;
  void set_set_dataset_name(bool value);
  private:
  bool _internal_set_dataset_name() const;
  void _internal_set_set_dataset_name(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DatasetReaderParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr split_;
  bool shuffle_;
  bool continuous_;
  bool strip_empty_;
  bool set_dataset_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdatabatch_5fgenerator_2eproto;
};
// -------------------------------------------------------------------

class ImageDatasetReaderParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageDatasetReaderParams) */ {
 public:
  inline ImageDatasetReaderParams() : ImageDatasetReaderParams(nullptr) {}
  virtual ~ImageDatasetReaderParams();

  ImageDatasetReaderParams(const ImageDatasetReaderParams& from);
  ImageDatasetReaderParams(ImageDatasetReaderParams&& from) noexcept
    : ImageDatasetReaderParams() {
    *this = ::std::move(from);
  }

  inline ImageDatasetReaderParams& operator=(const ImageDatasetReaderParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageDatasetReaderParams& operator=(ImageDatasetReaderParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageDatasetReaderParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageDatasetReaderParams* internal_default_instance() {
    return reinterpret_cast<const ImageDatasetReaderParams*>(
               &_ImageDatasetReaderParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ImageDatasetReaderParams& a, ImageDatasetReaderParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageDatasetReaderParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageDatasetReaderParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageDatasetReaderParams* New() const final {
    return CreateMaybeMessage<ImageDatasetReaderParams>(nullptr);
  }

  ImageDatasetReaderParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageDatasetReaderParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageDatasetReaderParams& from);
  void MergeFrom(const ImageDatasetReaderParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageDatasetReaderParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageDatasetReaderParams";
  }
  protected:
  explicit ImageDatasetReaderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto);
    return ::descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetReaderParamsFieldNumber = 1,
    kFetchFromUrlsFieldNumber = 2,
  };
  // .DatasetReaderParams dataset_reader_params = 1;
  bool has_dataset_reader_params() const;
  private:
  bool _internal_has_dataset_reader_params() const;
  public:
  void clear_dataset_reader_params();
  const ::DatasetReaderParams& dataset_reader_params() const;
  ::DatasetReaderParams* release_dataset_reader_params();
  ::DatasetReaderParams* mutable_dataset_reader_params();
  void set_allocated_dataset_reader_params(::DatasetReaderParams* dataset_reader_params);
  private:
  const ::DatasetReaderParams& _internal_dataset_reader_params() const;
  ::DatasetReaderParams* _internal_mutable_dataset_reader_params();
  public:
  void unsafe_arena_set_allocated_dataset_reader_params(
      ::DatasetReaderParams* dataset_reader_params);
  ::DatasetReaderParams* unsafe_arena_release_dataset_reader_params();

  // bool fetch_from_urls = 2;
  void clear_fetch_from_urls();
  bool fetch_from_urls() const;
  void set_fetch_from_urls(bool value);
  private:
  bool _internal_fetch_from_urls() const;
  void _internal_set_fetch_from_urls(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ImageDatasetReaderParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DatasetReaderParams* dataset_reader_params_;
  bool fetch_from_urls_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdatabatch_5fgenerator_2eproto;
};
// -------------------------------------------------------------------

class SavedOutputReaderParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SavedOutputReaderParams) */ {
 public:
  inline SavedOutputReaderParams() : SavedOutputReaderParams(nullptr) {}
  virtual ~SavedOutputReaderParams();

  SavedOutputReaderParams(const SavedOutputReaderParams& from);
  SavedOutputReaderParams(SavedOutputReaderParams&& from) noexcept
    : SavedOutputReaderParams() {
    *this = ::std::move(from);
  }

  inline SavedOutputReaderParams& operator=(const SavedOutputReaderParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavedOutputReaderParams& operator=(SavedOutputReaderParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SavedOutputReaderParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SavedOutputReaderParams* internal_default_instance() {
    return reinterpret_cast<const SavedOutputReaderParams*>(
               &_SavedOutputReaderParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SavedOutputReaderParams& a, SavedOutputReaderParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SavedOutputReaderParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SavedOutputReaderParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SavedOutputReaderParams* New() const final {
    return CreateMaybeMessage<SavedOutputReaderParams>(nullptr);
  }

  SavedOutputReaderParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SavedOutputReaderParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SavedOutputReaderParams& from);
  void MergeFrom(const SavedOutputReaderParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SavedOutputReaderParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SavedOutputReaderParams";
  }
  protected:
  explicit SavedOutputReaderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto);
    return ::descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerNameFieldNumber = 3,
    kDatasetReaderParamsFieldNumber = 1,
    kSavedOutputEidFieldNumber = 2,
    kLoadOrigDatabatchFieldNumber = 4,
  };
  // string layer_name = 3;
  void clear_layer_name();
  const std::string& layer_name() const;
  void set_layer_name(const std::string& value);
  void set_layer_name(std::string&& value);
  void set_layer_name(const char* value);
  void set_layer_name(const char* value, size_t size);
  std::string* mutable_layer_name();
  std::string* release_layer_name();
  void set_allocated_layer_name(std::string* layer_name);
  private:
  const std::string& _internal_layer_name() const;
  void _internal_set_layer_name(const std::string& value);
  std::string* _internal_mutable_layer_name();
  public:

  // .DatasetReaderParams dataset_reader_params = 1;
  bool has_dataset_reader_params() const;
  private:
  bool _internal_has_dataset_reader_params() const;
  public:
  void clear_dataset_reader_params();
  const ::DatasetReaderParams& dataset_reader_params() const;
  ::DatasetReaderParams* release_dataset_reader_params();
  ::DatasetReaderParams* mutable_dataset_reader_params();
  void set_allocated_dataset_reader_params(::DatasetReaderParams* dataset_reader_params);
  private:
  const ::DatasetReaderParams& _internal_dataset_reader_params() const;
  ::DatasetReaderParams* _internal_mutable_dataset_reader_params();
  public:
  void unsafe_arena_set_allocated_dataset_reader_params(
      ::DatasetReaderParams* dataset_reader_params);
  ::DatasetReaderParams* unsafe_arena_release_dataset_reader_params();

  // int32 saved_output_eid = 2;
  void clear_saved_output_eid();
  ::PROTOBUF_NAMESPACE_ID::int32 saved_output_eid() const;
  void set_saved_output_eid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_saved_output_eid() const;
  void _internal_set_saved_output_eid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool load_orig_databatch = 4;
  void clear_load_orig_databatch();
  bool load_orig_databatch() const;
  void set_load_orig_databatch(bool value);
  private:
  bool _internal_load_orig_databatch() const;
  void _internal_set_load_orig_databatch(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SavedOutputReaderParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_name_;
  ::DatasetReaderParams* dataset_reader_params_;
  ::PROTOBUF_NAMESPACE_ID::int32 saved_output_eid_;
  bool load_orig_databatch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdatabatch_5fgenerator_2eproto;
};
// -------------------------------------------------------------------

class DataBatchSamplerParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataBatchSamplerParams) */ {
 public:
  inline DataBatchSamplerParams() : DataBatchSamplerParams(nullptr) {}
  virtual ~DataBatchSamplerParams();

  DataBatchSamplerParams(const DataBatchSamplerParams& from);
  DataBatchSamplerParams(DataBatchSamplerParams&& from) noexcept
    : DataBatchSamplerParams() {
    *this = ::std::move(from);
  }

  inline DataBatchSamplerParams& operator=(const DataBatchSamplerParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataBatchSamplerParams& operator=(DataBatchSamplerParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataBatchSamplerParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBatchSamplerParams* internal_default_instance() {
    return reinterpret_cast<const DataBatchSamplerParams*>(
               &_DataBatchSamplerParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DataBatchSamplerParams& a, DataBatchSamplerParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DataBatchSamplerParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataBatchSamplerParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataBatchSamplerParams* New() const final {
    return CreateMaybeMessage<DataBatchSamplerParams>(nullptr);
  }

  DataBatchSamplerParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataBatchSamplerParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataBatchSamplerParams& from);
  void MergeFrom(const DataBatchSamplerParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBatchSamplerParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataBatchSamplerParams";
  }
  protected:
  explicit DataBatchSamplerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto);
    return ::descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabatchGeneratorParamsFieldNumber = 1,
    kSampleRateFieldNumber = 3,
    kLabelMapperFieldNumber = 4,
    kDeterministicFieldNumber = 2,
  };
  // repeated .DataBatchGeneratorParams databatch_generator_params = 1;
  int databatch_generator_params_size() const;
  private:
  int _internal_databatch_generator_params_size() const;
  public:
  void clear_databatch_generator_params();
  ::DataBatchGeneratorParams* mutable_databatch_generator_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataBatchGeneratorParams >*
      mutable_databatch_generator_params();
  private:
  const ::DataBatchGeneratorParams& _internal_databatch_generator_params(int index) const;
  ::DataBatchGeneratorParams* _internal_add_databatch_generator_params();
  public:
  const ::DataBatchGeneratorParams& databatch_generator_params(int index) const;
  ::DataBatchGeneratorParams* add_databatch_generator_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataBatchGeneratorParams >&
      databatch_generator_params() const;

  // repeated float sample_rate = 3;
  int sample_rate_size() const;
  private:
  int _internal_sample_rate_size() const;
  public:
  void clear_sample_rate();
  private:
  float _internal_sample_rate(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_sample_rate() const;
  void _internal_add_sample_rate(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_sample_rate();
  public:
  float sample_rate(int index) const;
  void set_sample_rate(int index, float value);
  void add_sample_rate(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      sample_rate() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_sample_rate();

  // repeated .LabelMapper label_mapper = 4;
  int label_mapper_size() const;
  private:
  int _internal_label_mapper_size() const;
  public:
  void clear_label_mapper();
  ::LabelMapper* mutable_label_mapper(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelMapper >*
      mutable_label_mapper();
  private:
  const ::LabelMapper& _internal_label_mapper(int index) const;
  ::LabelMapper* _internal_add_label_mapper();
  public:
  const ::LabelMapper& label_mapper(int index) const;
  ::LabelMapper* add_label_mapper();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelMapper >&
      label_mapper() const;

  // bool deterministic = 2;
  void clear_deterministic();
  bool deterministic() const;
  void set_deterministic(bool value);
  private:
  bool _internal_deterministic() const;
  void _internal_set_deterministic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DataBatchSamplerParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataBatchGeneratorParams > databatch_generator_params_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > sample_rate_;
  mutable std::atomic<int> _sample_rate_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelMapper > label_mapper_;
  bool deterministic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdatabatch_5fgenerator_2eproto;
};
// -------------------------------------------------------------------

class gRPCDataBatchReaderParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCDataBatchReaderParams) */ {
 public:
  inline gRPCDataBatchReaderParams() : gRPCDataBatchReaderParams(nullptr) {}
  virtual ~gRPCDataBatchReaderParams();

  gRPCDataBatchReaderParams(const gRPCDataBatchReaderParams& from);
  gRPCDataBatchReaderParams(gRPCDataBatchReaderParams&& from) noexcept
    : gRPCDataBatchReaderParams() {
    *this = ::std::move(from);
  }

  inline gRPCDataBatchReaderParams& operator=(const gRPCDataBatchReaderParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline gRPCDataBatchReaderParams& operator=(gRPCDataBatchReaderParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const gRPCDataBatchReaderParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gRPCDataBatchReaderParams* internal_default_instance() {
    return reinterpret_cast<const gRPCDataBatchReaderParams*>(
               &_gRPCDataBatchReaderParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(gRPCDataBatchReaderParams& a, gRPCDataBatchReaderParams& b) {
    a.Swap(&b);
  }
  inline void Swap(gRPCDataBatchReaderParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gRPCDataBatchReaderParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline gRPCDataBatchReaderParams* New() const final {
    return CreateMaybeMessage<gRPCDataBatchReaderParams>(nullptr);
  }

  gRPCDataBatchReaderParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<gRPCDataBatchReaderParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const gRPCDataBatchReaderParams& from);
  void MergeFrom(const gRPCDataBatchReaderParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gRPCDataBatchReaderParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCDataBatchReaderParams";
  }
  protected:
  explicit gRPCDataBatchReaderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto);
    return ::descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabatchGeneratorParamsFieldNumber = 1,
  };
  // .DataBatchGeneratorParams databatch_generator_params = 1;
  bool has_databatch_generator_params() const;
  private:
  bool _internal_has_databatch_generator_params() const;
  public:
  void clear_databatch_generator_params();
  const ::DataBatchGeneratorParams& databatch_generator_params() const;
  ::DataBatchGeneratorParams* release_databatch_generator_params();
  ::DataBatchGeneratorParams* mutable_databatch_generator_params();
  void set_allocated_databatch_generator_params(::DataBatchGeneratorParams* databatch_generator_params);
  private:
  const ::DataBatchGeneratorParams& _internal_databatch_generator_params() const;
  ::DataBatchGeneratorParams* _internal_mutable_databatch_generator_params();
  public:
  void unsafe_arena_set_allocated_databatch_generator_params(
      ::DataBatchGeneratorParams* databatch_generator_params);
  ::DataBatchGeneratorParams* unsafe_arena_release_databatch_generator_params();

  // @@protoc_insertion_point(class_scope:gRPCDataBatchReaderParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DataBatchGeneratorParams* databatch_generator_params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdatabatch_5fgenerator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataBatchGeneratorParams

// .ImageDatasetReaderParams image_dataset_reader_params = 1;
inline bool DataBatchGeneratorParams::_internal_has_image_dataset_reader_params() const {
  return generator_case() == kImageDatasetReaderParams;
}
inline bool DataBatchGeneratorParams::has_image_dataset_reader_params() const {
  return _internal_has_image_dataset_reader_params();
}
inline void DataBatchGeneratorParams::set_has_image_dataset_reader_params() {
  _oneof_case_[0] = kImageDatasetReaderParams;
}
inline void DataBatchGeneratorParams::clear_image_dataset_reader_params() {
  if (_internal_has_image_dataset_reader_params()) {
    if (GetArena() == nullptr) {
      delete generator_.image_dataset_reader_params_;
    }
    clear_has_generator();
  }
}
inline ::ImageDatasetReaderParams* DataBatchGeneratorParams::release_image_dataset_reader_params() {
  // @@protoc_insertion_point(field_release:DataBatchGeneratorParams.image_dataset_reader_params)
  if (_internal_has_image_dataset_reader_params()) {
    clear_has_generator();
      ::ImageDatasetReaderParams* temp = generator_.image_dataset_reader_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    generator_.image_dataset_reader_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ImageDatasetReaderParams& DataBatchGeneratorParams::_internal_image_dataset_reader_params() const {
  return _internal_has_image_dataset_reader_params()
      ? *generator_.image_dataset_reader_params_
      : *reinterpret_cast< ::ImageDatasetReaderParams*>(&::_ImageDatasetReaderParams_default_instance_);
}
inline const ::ImageDatasetReaderParams& DataBatchGeneratorParams::image_dataset_reader_params() const {
  // @@protoc_insertion_point(field_get:DataBatchGeneratorParams.image_dataset_reader_params)
  return _internal_image_dataset_reader_params();
}
inline ::ImageDatasetReaderParams* DataBatchGeneratorParams::unsafe_arena_release_image_dataset_reader_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DataBatchGeneratorParams.image_dataset_reader_params)
  if (_internal_has_image_dataset_reader_params()) {
    clear_has_generator();
    ::ImageDatasetReaderParams* temp = generator_.image_dataset_reader_params_;
    generator_.image_dataset_reader_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataBatchGeneratorParams::unsafe_arena_set_allocated_image_dataset_reader_params(::ImageDatasetReaderParams* image_dataset_reader_params) {
  clear_generator();
  if (image_dataset_reader_params) {
    set_has_image_dataset_reader_params();
    generator_.image_dataset_reader_params_ = image_dataset_reader_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataBatchGeneratorParams.image_dataset_reader_params)
}
inline ::ImageDatasetReaderParams* DataBatchGeneratorParams::_internal_mutable_image_dataset_reader_params() {
  if (!_internal_has_image_dataset_reader_params()) {
    clear_generator();
    set_has_image_dataset_reader_params();
    generator_.image_dataset_reader_params_ = CreateMaybeMessage< ::ImageDatasetReaderParams >(GetArena());
  }
  return generator_.image_dataset_reader_params_;
}
inline ::ImageDatasetReaderParams* DataBatchGeneratorParams::mutable_image_dataset_reader_params() {
  // @@protoc_insertion_point(field_mutable:DataBatchGeneratorParams.image_dataset_reader_params)
  return _internal_mutable_image_dataset_reader_params();
}

// .SavedOutputReaderParams saved_output_reader_params = 2;
inline bool DataBatchGeneratorParams::_internal_has_saved_output_reader_params() const {
  return generator_case() == kSavedOutputReaderParams;
}
inline bool DataBatchGeneratorParams::has_saved_output_reader_params() const {
  return _internal_has_saved_output_reader_params();
}
inline void DataBatchGeneratorParams::set_has_saved_output_reader_params() {
  _oneof_case_[0] = kSavedOutputReaderParams;
}
inline void DataBatchGeneratorParams::clear_saved_output_reader_params() {
  if (_internal_has_saved_output_reader_params()) {
    if (GetArena() == nullptr) {
      delete generator_.saved_output_reader_params_;
    }
    clear_has_generator();
  }
}
inline ::SavedOutputReaderParams* DataBatchGeneratorParams::release_saved_output_reader_params() {
  // @@protoc_insertion_point(field_release:DataBatchGeneratorParams.saved_output_reader_params)
  if (_internal_has_saved_output_reader_params()) {
    clear_has_generator();
      ::SavedOutputReaderParams* temp = generator_.saved_output_reader_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    generator_.saved_output_reader_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SavedOutputReaderParams& DataBatchGeneratorParams::_internal_saved_output_reader_params() const {
  return _internal_has_saved_output_reader_params()
      ? *generator_.saved_output_reader_params_
      : *reinterpret_cast< ::SavedOutputReaderParams*>(&::_SavedOutputReaderParams_default_instance_);
}
inline const ::SavedOutputReaderParams& DataBatchGeneratorParams::saved_output_reader_params() const {
  // @@protoc_insertion_point(field_get:DataBatchGeneratorParams.saved_output_reader_params)
  return _internal_saved_output_reader_params();
}
inline ::SavedOutputReaderParams* DataBatchGeneratorParams::unsafe_arena_release_saved_output_reader_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DataBatchGeneratorParams.saved_output_reader_params)
  if (_internal_has_saved_output_reader_params()) {
    clear_has_generator();
    ::SavedOutputReaderParams* temp = generator_.saved_output_reader_params_;
    generator_.saved_output_reader_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataBatchGeneratorParams::unsafe_arena_set_allocated_saved_output_reader_params(::SavedOutputReaderParams* saved_output_reader_params) {
  clear_generator();
  if (saved_output_reader_params) {
    set_has_saved_output_reader_params();
    generator_.saved_output_reader_params_ = saved_output_reader_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataBatchGeneratorParams.saved_output_reader_params)
}
inline ::SavedOutputReaderParams* DataBatchGeneratorParams::_internal_mutable_saved_output_reader_params() {
  if (!_internal_has_saved_output_reader_params()) {
    clear_generator();
    set_has_saved_output_reader_params();
    generator_.saved_output_reader_params_ = CreateMaybeMessage< ::SavedOutputReaderParams >(GetArena());
  }
  return generator_.saved_output_reader_params_;
}
inline ::SavedOutputReaderParams* DataBatchGeneratorParams::mutable_saved_output_reader_params() {
  // @@protoc_insertion_point(field_mutable:DataBatchGeneratorParams.saved_output_reader_params)
  return _internal_mutable_saved_output_reader_params();
}

// .DataBatchSamplerParams databatch_sampler_params = 3;
inline bool DataBatchGeneratorParams::_internal_has_databatch_sampler_params() const {
  return generator_case() == kDatabatchSamplerParams;
}
inline bool DataBatchGeneratorParams::has_databatch_sampler_params() const {
  return _internal_has_databatch_sampler_params();
}
inline void DataBatchGeneratorParams::set_has_databatch_sampler_params() {
  _oneof_case_[0] = kDatabatchSamplerParams;
}
inline void DataBatchGeneratorParams::clear_databatch_sampler_params() {
  if (_internal_has_databatch_sampler_params()) {
    if (GetArena() == nullptr) {
      delete generator_.databatch_sampler_params_;
    }
    clear_has_generator();
  }
}
inline ::DataBatchSamplerParams* DataBatchGeneratorParams::release_databatch_sampler_params() {
  // @@protoc_insertion_point(field_release:DataBatchGeneratorParams.databatch_sampler_params)
  if (_internal_has_databatch_sampler_params()) {
    clear_has_generator();
      ::DataBatchSamplerParams* temp = generator_.databatch_sampler_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    generator_.databatch_sampler_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DataBatchSamplerParams& DataBatchGeneratorParams::_internal_databatch_sampler_params() const {
  return _internal_has_databatch_sampler_params()
      ? *generator_.databatch_sampler_params_
      : *reinterpret_cast< ::DataBatchSamplerParams*>(&::_DataBatchSamplerParams_default_instance_);
}
inline const ::DataBatchSamplerParams& DataBatchGeneratorParams::databatch_sampler_params() const {
  // @@protoc_insertion_point(field_get:DataBatchGeneratorParams.databatch_sampler_params)
  return _internal_databatch_sampler_params();
}
inline ::DataBatchSamplerParams* DataBatchGeneratorParams::unsafe_arena_release_databatch_sampler_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DataBatchGeneratorParams.databatch_sampler_params)
  if (_internal_has_databatch_sampler_params()) {
    clear_has_generator();
    ::DataBatchSamplerParams* temp = generator_.databatch_sampler_params_;
    generator_.databatch_sampler_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataBatchGeneratorParams::unsafe_arena_set_allocated_databatch_sampler_params(::DataBatchSamplerParams* databatch_sampler_params) {
  clear_generator();
  if (databatch_sampler_params) {
    set_has_databatch_sampler_params();
    generator_.databatch_sampler_params_ = databatch_sampler_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataBatchGeneratorParams.databatch_sampler_params)
}
inline ::DataBatchSamplerParams* DataBatchGeneratorParams::_internal_mutable_databatch_sampler_params() {
  if (!_internal_has_databatch_sampler_params()) {
    clear_generator();
    set_has_databatch_sampler_params();
    generator_.databatch_sampler_params_ = CreateMaybeMessage< ::DataBatchSamplerParams >(GetArena());
  }
  return generator_.databatch_sampler_params_;
}
inline ::DataBatchSamplerParams* DataBatchGeneratorParams::mutable_databatch_sampler_params() {
  // @@protoc_insertion_point(field_mutable:DataBatchGeneratorParams.databatch_sampler_params)
  return _internal_mutable_databatch_sampler_params();
}

// .gRPCDataBatchReaderParams grpc_databatch_reader_params = 4;
inline bool DataBatchGeneratorParams::_internal_has_grpc_databatch_reader_params() const {
  return generator_case() == kGrpcDatabatchReaderParams;
}
inline bool DataBatchGeneratorParams::has_grpc_databatch_reader_params() const {
  return _internal_has_grpc_databatch_reader_params();
}
inline void DataBatchGeneratorParams::set_has_grpc_databatch_reader_params() {
  _oneof_case_[0] = kGrpcDatabatchReaderParams;
}
inline void DataBatchGeneratorParams::clear_grpc_databatch_reader_params() {
  if (_internal_has_grpc_databatch_reader_params()) {
    if (GetArena() == nullptr) {
      delete generator_.grpc_databatch_reader_params_;
    }
    clear_has_generator();
  }
}
inline ::gRPCDataBatchReaderParams* DataBatchGeneratorParams::release_grpc_databatch_reader_params() {
  // @@protoc_insertion_point(field_release:DataBatchGeneratorParams.grpc_databatch_reader_params)
  if (_internal_has_grpc_databatch_reader_params()) {
    clear_has_generator();
      ::gRPCDataBatchReaderParams* temp = generator_.grpc_databatch_reader_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    generator_.grpc_databatch_reader_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gRPCDataBatchReaderParams& DataBatchGeneratorParams::_internal_grpc_databatch_reader_params() const {
  return _internal_has_grpc_databatch_reader_params()
      ? *generator_.grpc_databatch_reader_params_
      : *reinterpret_cast< ::gRPCDataBatchReaderParams*>(&::_gRPCDataBatchReaderParams_default_instance_);
}
inline const ::gRPCDataBatchReaderParams& DataBatchGeneratorParams::grpc_databatch_reader_params() const {
  // @@protoc_insertion_point(field_get:DataBatchGeneratorParams.grpc_databatch_reader_params)
  return _internal_grpc_databatch_reader_params();
}
inline ::gRPCDataBatchReaderParams* DataBatchGeneratorParams::unsafe_arena_release_grpc_databatch_reader_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DataBatchGeneratorParams.grpc_databatch_reader_params)
  if (_internal_has_grpc_databatch_reader_params()) {
    clear_has_generator();
    ::gRPCDataBatchReaderParams* temp = generator_.grpc_databatch_reader_params_;
    generator_.grpc_databatch_reader_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataBatchGeneratorParams::unsafe_arena_set_allocated_grpc_databatch_reader_params(::gRPCDataBatchReaderParams* grpc_databatch_reader_params) {
  clear_generator();
  if (grpc_databatch_reader_params) {
    set_has_grpc_databatch_reader_params();
    generator_.grpc_databatch_reader_params_ = grpc_databatch_reader_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataBatchGeneratorParams.grpc_databatch_reader_params)
}
inline ::gRPCDataBatchReaderParams* DataBatchGeneratorParams::_internal_mutable_grpc_databatch_reader_params() {
  if (!_internal_has_grpc_databatch_reader_params()) {
    clear_generator();
    set_has_grpc_databatch_reader_params();
    generator_.grpc_databatch_reader_params_ = CreateMaybeMessage< ::gRPCDataBatchReaderParams >(GetArena());
  }
  return generator_.grpc_databatch_reader_params_;
}
inline ::gRPCDataBatchReaderParams* DataBatchGeneratorParams::mutable_grpc_databatch_reader_params() {
  // @@protoc_insertion_point(field_mutable:DataBatchGeneratorParams.grpc_databatch_reader_params)
  return _internal_mutable_grpc_databatch_reader_params();
}

// .PastingDataProviderParams pasting_data_provider_params = 5;
inline bool DataBatchGeneratorParams::_internal_has_pasting_data_provider_params() const {
  return generator_case() == kPastingDataProviderParams;
}
inline bool DataBatchGeneratorParams::has_pasting_data_provider_params() const {
  return _internal_has_pasting_data_provider_params();
}
inline void DataBatchGeneratorParams::set_has_pasting_data_provider_params() {
  _oneof_case_[0] = kPastingDataProviderParams;
}
inline ::PastingDataProviderParams* DataBatchGeneratorParams::release_pasting_data_provider_params() {
  // @@protoc_insertion_point(field_release:DataBatchGeneratorParams.pasting_data_provider_params)
  if (_internal_has_pasting_data_provider_params()) {
    clear_has_generator();
      ::PastingDataProviderParams* temp = generator_.pasting_data_provider_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    generator_.pasting_data_provider_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PastingDataProviderParams& DataBatchGeneratorParams::_internal_pasting_data_provider_params() const {
  return _internal_has_pasting_data_provider_params()
      ? *generator_.pasting_data_provider_params_
      : *reinterpret_cast< ::PastingDataProviderParams*>(&::_PastingDataProviderParams_default_instance_);
}
inline const ::PastingDataProviderParams& DataBatchGeneratorParams::pasting_data_provider_params() const {
  // @@protoc_insertion_point(field_get:DataBatchGeneratorParams.pasting_data_provider_params)
  return _internal_pasting_data_provider_params();
}
inline ::PastingDataProviderParams* DataBatchGeneratorParams::unsafe_arena_release_pasting_data_provider_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DataBatchGeneratorParams.pasting_data_provider_params)
  if (_internal_has_pasting_data_provider_params()) {
    clear_has_generator();
    ::PastingDataProviderParams* temp = generator_.pasting_data_provider_params_;
    generator_.pasting_data_provider_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataBatchGeneratorParams::unsafe_arena_set_allocated_pasting_data_provider_params(::PastingDataProviderParams* pasting_data_provider_params) {
  clear_generator();
  if (pasting_data_provider_params) {
    set_has_pasting_data_provider_params();
    generator_.pasting_data_provider_params_ = pasting_data_provider_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataBatchGeneratorParams.pasting_data_provider_params)
}
inline ::PastingDataProviderParams* DataBatchGeneratorParams::_internal_mutable_pasting_data_provider_params() {
  if (!_internal_has_pasting_data_provider_params()) {
    clear_generator();
    set_has_pasting_data_provider_params();
    generator_.pasting_data_provider_params_ = CreateMaybeMessage< ::PastingDataProviderParams >(GetArena());
  }
  return generator_.pasting_data_provider_params_;
}
inline ::PastingDataProviderParams* DataBatchGeneratorParams::mutable_pasting_data_provider_params() {
  // @@protoc_insertion_point(field_mutable:DataBatchGeneratorParams.pasting_data_provider_params)
  return _internal_mutable_pasting_data_provider_params();
}

// int32 databatch_size = 100;
inline void DataBatchGeneratorParams::clear_databatch_size() {
  databatch_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataBatchGeneratorParams::_internal_databatch_size() const {
  return databatch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataBatchGeneratorParams::databatch_size() const {
  // @@protoc_insertion_point(field_get:DataBatchGeneratorParams.databatch_size)
  return _internal_databatch_size();
}
inline void DataBatchGeneratorParams::_internal_set_databatch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  databatch_size_ = value;
}
inline void DataBatchGeneratorParams::set_databatch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_databatch_size(value);
  // @@protoc_insertion_point(field_set:DataBatchGeneratorParams.databatch_size)
}

// int32 num_threads = 101;
inline void DataBatchGeneratorParams::clear_num_threads() {
  num_threads_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataBatchGeneratorParams::_internal_num_threads() const {
  return num_threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataBatchGeneratorParams::num_threads() const {
  // @@protoc_insertion_point(field_get:DataBatchGeneratorParams.num_threads)
  return _internal_num_threads();
}
inline void DataBatchGeneratorParams::_internal_set_num_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_threads_ = value;
}
inline void DataBatchGeneratorParams::set_num_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_threads(value);
  // @@protoc_insertion_point(field_set:DataBatchGeneratorParams.num_threads)
}

inline bool DataBatchGeneratorParams::has_generator() const {
  return generator_case() != GENERATOR_NOT_SET;
}
inline void DataBatchGeneratorParams::clear_has_generator() {
  _oneof_case_[0] = GENERATOR_NOT_SET;
}
inline DataBatchGeneratorParams::GeneratorCase DataBatchGeneratorParams::generator_case() const {
  return DataBatchGeneratorParams::GeneratorCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DatasetReaderParams

// string dataset = 1;
inline void DatasetReaderParams::clear_dataset() {
  dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DatasetReaderParams::dataset() const {
  // @@protoc_insertion_point(field_get:DatasetReaderParams.dataset)
  return _internal_dataset();
}
inline void DatasetReaderParams::set_dataset(const std::string& value) {
  _internal_set_dataset(value);
  // @@protoc_insertion_point(field_set:DatasetReaderParams.dataset)
}
inline std::string* DatasetReaderParams::mutable_dataset() {
  // @@protoc_insertion_point(field_mutable:DatasetReaderParams.dataset)
  return _internal_mutable_dataset();
}
inline const std::string& DatasetReaderParams::_internal_dataset() const {
  return dataset_.Get();
}
inline void DatasetReaderParams::_internal_set_dataset(const std::string& value) {
  
  dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DatasetReaderParams::set_dataset(std::string&& value) {
  
  dataset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DatasetReaderParams.dataset)
}
inline void DatasetReaderParams::set_dataset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DatasetReaderParams.dataset)
}
inline void DatasetReaderParams::set_dataset(const char* value,
    size_t size) {
  
  dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DatasetReaderParams.dataset)
}
inline std::string* DatasetReaderParams::_internal_mutable_dataset() {
  
  return dataset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DatasetReaderParams::release_dataset() {
  // @@protoc_insertion_point(field_release:DatasetReaderParams.dataset)
  return dataset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DatasetReaderParams::set_allocated_dataset(std::string* dataset) {
  if (dataset != nullptr) {
    
  } else {
    
  }
  dataset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DatasetReaderParams.dataset)
}

// string split = 2;
inline void DatasetReaderParams::clear_split() {
  split_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DatasetReaderParams::split() const {
  // @@protoc_insertion_point(field_get:DatasetReaderParams.split)
  return _internal_split();
}
inline void DatasetReaderParams::set_split(const std::string& value) {
  _internal_set_split(value);
  // @@protoc_insertion_point(field_set:DatasetReaderParams.split)
}
inline std::string* DatasetReaderParams::mutable_split() {
  // @@protoc_insertion_point(field_mutable:DatasetReaderParams.split)
  return _internal_mutable_split();
}
inline const std::string& DatasetReaderParams::_internal_split() const {
  return split_.Get();
}
inline void DatasetReaderParams::_internal_set_split(const std::string& value) {
  
  split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DatasetReaderParams::set_split(std::string&& value) {
  
  split_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DatasetReaderParams.split)
}
inline void DatasetReaderParams::set_split(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DatasetReaderParams.split)
}
inline void DatasetReaderParams::set_split(const char* value,
    size_t size) {
  
  split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DatasetReaderParams.split)
}
inline std::string* DatasetReaderParams::_internal_mutable_split() {
  
  return split_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DatasetReaderParams::release_split() {
  // @@protoc_insertion_point(field_release:DatasetReaderParams.split)
  return split_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DatasetReaderParams::set_allocated_split(std::string* split) {
  if (split != nullptr) {
    
  } else {
    
  }
  split_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), split,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DatasetReaderParams.split)
}

// bool shuffle = 3;
inline void DatasetReaderParams::clear_shuffle() {
  shuffle_ = false;
}
inline bool DatasetReaderParams::_internal_shuffle() const {
  return shuffle_;
}
inline bool DatasetReaderParams::shuffle() const {
  // @@protoc_insertion_point(field_get:DatasetReaderParams.shuffle)
  return _internal_shuffle();
}
inline void DatasetReaderParams::_internal_set_shuffle(bool value) {
  
  shuffle_ = value;
}
inline void DatasetReaderParams::set_shuffle(bool value) {
  _internal_set_shuffle(value);
  // @@protoc_insertion_point(field_set:DatasetReaderParams.shuffle)
}

// bool continuous = 4;
inline void DatasetReaderParams::clear_continuous() {
  continuous_ = false;
}
inline bool DatasetReaderParams::_internal_continuous() const {
  return continuous_;
}
inline bool DatasetReaderParams::continuous() const {
  // @@protoc_insertion_point(field_get:DatasetReaderParams.continuous)
  return _internal_continuous();
}
inline void DatasetReaderParams::_internal_set_continuous(bool value) {
  
  continuous_ = value;
}
inline void DatasetReaderParams::set_continuous(bool value) {
  _internal_set_continuous(value);
  // @@protoc_insertion_point(field_set:DatasetReaderParams.continuous)
}

// bool strip_empty = 5;
inline void DatasetReaderParams::clear_strip_empty() {
  strip_empty_ = false;
}
inline bool DatasetReaderParams::_internal_strip_empty() const {
  return strip_empty_;
}
inline bool DatasetReaderParams::strip_empty() const {
  // @@protoc_insertion_point(field_get:DatasetReaderParams.strip_empty)
  return _internal_strip_empty();
}
inline void DatasetReaderParams::_internal_set_strip_empty(bool value) {
  
  strip_empty_ = value;
}
inline void DatasetReaderParams::set_strip_empty(bool value) {
  _internal_set_strip_empty(value);
  // @@protoc_insertion_point(field_set:DatasetReaderParams.strip_empty)
}

// bool set_dataset_name = 6;
inline void DatasetReaderParams::clear_set_dataset_name() {
  set_dataset_name_ = false;
}
inline bool DatasetReaderParams::_internal_set_dataset_name() const {
  return set_dataset_name_;
}
inline bool DatasetReaderParams::set_dataset_name() const {
  // @@protoc_insertion_point(field_get:DatasetReaderParams.set_dataset_name)
  return _internal_set_dataset_name();
}
inline void DatasetReaderParams::_internal_set_set_dataset_name(bool value) {
  
  set_dataset_name_ = value;
}
inline void DatasetReaderParams::set_set_dataset_name(bool value) {
  _internal_set_set_dataset_name(value);
  // @@protoc_insertion_point(field_set:DatasetReaderParams.set_dataset_name)
}

// -------------------------------------------------------------------

// ImageDatasetReaderParams

// .DatasetReaderParams dataset_reader_params = 1;
inline bool ImageDatasetReaderParams::_internal_has_dataset_reader_params() const {
  return this != internal_default_instance() && dataset_reader_params_ != nullptr;
}
inline bool ImageDatasetReaderParams::has_dataset_reader_params() const {
  return _internal_has_dataset_reader_params();
}
inline void ImageDatasetReaderParams::clear_dataset_reader_params() {
  if (GetArena() == nullptr && dataset_reader_params_ != nullptr) {
    delete dataset_reader_params_;
  }
  dataset_reader_params_ = nullptr;
}
inline const ::DatasetReaderParams& ImageDatasetReaderParams::_internal_dataset_reader_params() const {
  const ::DatasetReaderParams* p = dataset_reader_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DatasetReaderParams*>(
      &::_DatasetReaderParams_default_instance_);
}
inline const ::DatasetReaderParams& ImageDatasetReaderParams::dataset_reader_params() const {
  // @@protoc_insertion_point(field_get:ImageDatasetReaderParams.dataset_reader_params)
  return _internal_dataset_reader_params();
}
inline void ImageDatasetReaderParams::unsafe_arena_set_allocated_dataset_reader_params(
    ::DatasetReaderParams* dataset_reader_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_reader_params_);
  }
  dataset_reader_params_ = dataset_reader_params;
  if (dataset_reader_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ImageDatasetReaderParams.dataset_reader_params)
}
inline ::DatasetReaderParams* ImageDatasetReaderParams::release_dataset_reader_params() {
  
  ::DatasetReaderParams* temp = dataset_reader_params_;
  dataset_reader_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DatasetReaderParams* ImageDatasetReaderParams::unsafe_arena_release_dataset_reader_params() {
  // @@protoc_insertion_point(field_release:ImageDatasetReaderParams.dataset_reader_params)
  
  ::DatasetReaderParams* temp = dataset_reader_params_;
  dataset_reader_params_ = nullptr;
  return temp;
}
inline ::DatasetReaderParams* ImageDatasetReaderParams::_internal_mutable_dataset_reader_params() {
  
  if (dataset_reader_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::DatasetReaderParams>(GetArena());
    dataset_reader_params_ = p;
  }
  return dataset_reader_params_;
}
inline ::DatasetReaderParams* ImageDatasetReaderParams::mutable_dataset_reader_params() {
  // @@protoc_insertion_point(field_mutable:ImageDatasetReaderParams.dataset_reader_params)
  return _internal_mutable_dataset_reader_params();
}
inline void ImageDatasetReaderParams::set_allocated_dataset_reader_params(::DatasetReaderParams* dataset_reader_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dataset_reader_params_;
  }
  if (dataset_reader_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dataset_reader_params);
    if (message_arena != submessage_arena) {
      dataset_reader_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataset_reader_params, submessage_arena);
    }
    
  } else {
    
  }
  dataset_reader_params_ = dataset_reader_params;
  // @@protoc_insertion_point(field_set_allocated:ImageDatasetReaderParams.dataset_reader_params)
}

// bool fetch_from_urls = 2;
inline void ImageDatasetReaderParams::clear_fetch_from_urls() {
  fetch_from_urls_ = false;
}
inline bool ImageDatasetReaderParams::_internal_fetch_from_urls() const {
  return fetch_from_urls_;
}
inline bool ImageDatasetReaderParams::fetch_from_urls() const {
  // @@protoc_insertion_point(field_get:ImageDatasetReaderParams.fetch_from_urls)
  return _internal_fetch_from_urls();
}
inline void ImageDatasetReaderParams::_internal_set_fetch_from_urls(bool value) {
  
  fetch_from_urls_ = value;
}
inline void ImageDatasetReaderParams::set_fetch_from_urls(bool value) {
  _internal_set_fetch_from_urls(value);
  // @@protoc_insertion_point(field_set:ImageDatasetReaderParams.fetch_from_urls)
}

// -------------------------------------------------------------------

// SavedOutputReaderParams

// .DatasetReaderParams dataset_reader_params = 1;
inline bool SavedOutputReaderParams::_internal_has_dataset_reader_params() const {
  return this != internal_default_instance() && dataset_reader_params_ != nullptr;
}
inline bool SavedOutputReaderParams::has_dataset_reader_params() const {
  return _internal_has_dataset_reader_params();
}
inline void SavedOutputReaderParams::clear_dataset_reader_params() {
  if (GetArena() == nullptr && dataset_reader_params_ != nullptr) {
    delete dataset_reader_params_;
  }
  dataset_reader_params_ = nullptr;
}
inline const ::DatasetReaderParams& SavedOutputReaderParams::_internal_dataset_reader_params() const {
  const ::DatasetReaderParams* p = dataset_reader_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DatasetReaderParams*>(
      &::_DatasetReaderParams_default_instance_);
}
inline const ::DatasetReaderParams& SavedOutputReaderParams::dataset_reader_params() const {
  // @@protoc_insertion_point(field_get:SavedOutputReaderParams.dataset_reader_params)
  return _internal_dataset_reader_params();
}
inline void SavedOutputReaderParams::unsafe_arena_set_allocated_dataset_reader_params(
    ::DatasetReaderParams* dataset_reader_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_reader_params_);
  }
  dataset_reader_params_ = dataset_reader_params;
  if (dataset_reader_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SavedOutputReaderParams.dataset_reader_params)
}
inline ::DatasetReaderParams* SavedOutputReaderParams::release_dataset_reader_params() {
  
  ::DatasetReaderParams* temp = dataset_reader_params_;
  dataset_reader_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DatasetReaderParams* SavedOutputReaderParams::unsafe_arena_release_dataset_reader_params() {
  // @@protoc_insertion_point(field_release:SavedOutputReaderParams.dataset_reader_params)
  
  ::DatasetReaderParams* temp = dataset_reader_params_;
  dataset_reader_params_ = nullptr;
  return temp;
}
inline ::DatasetReaderParams* SavedOutputReaderParams::_internal_mutable_dataset_reader_params() {
  
  if (dataset_reader_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::DatasetReaderParams>(GetArena());
    dataset_reader_params_ = p;
  }
  return dataset_reader_params_;
}
inline ::DatasetReaderParams* SavedOutputReaderParams::mutable_dataset_reader_params() {
  // @@protoc_insertion_point(field_mutable:SavedOutputReaderParams.dataset_reader_params)
  return _internal_mutable_dataset_reader_params();
}
inline void SavedOutputReaderParams::set_allocated_dataset_reader_params(::DatasetReaderParams* dataset_reader_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dataset_reader_params_;
  }
  if (dataset_reader_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dataset_reader_params);
    if (message_arena != submessage_arena) {
      dataset_reader_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataset_reader_params, submessage_arena);
    }
    
  } else {
    
  }
  dataset_reader_params_ = dataset_reader_params;
  // @@protoc_insertion_point(field_set_allocated:SavedOutputReaderParams.dataset_reader_params)
}

// int32 saved_output_eid = 2;
inline void SavedOutputReaderParams::clear_saved_output_eid() {
  saved_output_eid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SavedOutputReaderParams::_internal_saved_output_eid() const {
  return saved_output_eid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SavedOutputReaderParams::saved_output_eid() const {
  // @@protoc_insertion_point(field_get:SavedOutputReaderParams.saved_output_eid)
  return _internal_saved_output_eid();
}
inline void SavedOutputReaderParams::_internal_set_saved_output_eid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  saved_output_eid_ = value;
}
inline void SavedOutputReaderParams::set_saved_output_eid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_saved_output_eid(value);
  // @@protoc_insertion_point(field_set:SavedOutputReaderParams.saved_output_eid)
}

// string layer_name = 3;
inline void SavedOutputReaderParams::clear_layer_name() {
  layer_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SavedOutputReaderParams::layer_name() const {
  // @@protoc_insertion_point(field_get:SavedOutputReaderParams.layer_name)
  return _internal_layer_name();
}
inline void SavedOutputReaderParams::set_layer_name(const std::string& value) {
  _internal_set_layer_name(value);
  // @@protoc_insertion_point(field_set:SavedOutputReaderParams.layer_name)
}
inline std::string* SavedOutputReaderParams::mutable_layer_name() {
  // @@protoc_insertion_point(field_mutable:SavedOutputReaderParams.layer_name)
  return _internal_mutable_layer_name();
}
inline const std::string& SavedOutputReaderParams::_internal_layer_name() const {
  return layer_name_.Get();
}
inline void SavedOutputReaderParams::_internal_set_layer_name(const std::string& value) {
  
  layer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SavedOutputReaderParams::set_layer_name(std::string&& value) {
  
  layer_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SavedOutputReaderParams.layer_name)
}
inline void SavedOutputReaderParams::set_layer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  layer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SavedOutputReaderParams.layer_name)
}
inline void SavedOutputReaderParams::set_layer_name(const char* value,
    size_t size) {
  
  layer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SavedOutputReaderParams.layer_name)
}
inline std::string* SavedOutputReaderParams::_internal_mutable_layer_name() {
  
  return layer_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SavedOutputReaderParams::release_layer_name() {
  // @@protoc_insertion_point(field_release:SavedOutputReaderParams.layer_name)
  return layer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SavedOutputReaderParams::set_allocated_layer_name(std::string* layer_name) {
  if (layer_name != nullptr) {
    
  } else {
    
  }
  layer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SavedOutputReaderParams.layer_name)
}

// bool load_orig_databatch = 4;
inline void SavedOutputReaderParams::clear_load_orig_databatch() {
  load_orig_databatch_ = false;
}
inline bool SavedOutputReaderParams::_internal_load_orig_databatch() const {
  return load_orig_databatch_;
}
inline bool SavedOutputReaderParams::load_orig_databatch() const {
  // @@protoc_insertion_point(field_get:SavedOutputReaderParams.load_orig_databatch)
  return _internal_load_orig_databatch();
}
inline void SavedOutputReaderParams::_internal_set_load_orig_databatch(bool value) {
  
  load_orig_databatch_ = value;
}
inline void SavedOutputReaderParams::set_load_orig_databatch(bool value) {
  _internal_set_load_orig_databatch(value);
  // @@protoc_insertion_point(field_set:SavedOutputReaderParams.load_orig_databatch)
}

// -------------------------------------------------------------------

// DataBatchSamplerParams

// repeated .DataBatchGeneratorParams databatch_generator_params = 1;
inline int DataBatchSamplerParams::_internal_databatch_generator_params_size() const {
  return databatch_generator_params_.size();
}
inline int DataBatchSamplerParams::databatch_generator_params_size() const {
  return _internal_databatch_generator_params_size();
}
inline void DataBatchSamplerParams::clear_databatch_generator_params() {
  databatch_generator_params_.Clear();
}
inline ::DataBatchGeneratorParams* DataBatchSamplerParams::mutable_databatch_generator_params(int index) {
  // @@protoc_insertion_point(field_mutable:DataBatchSamplerParams.databatch_generator_params)
  return databatch_generator_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataBatchGeneratorParams >*
DataBatchSamplerParams::mutable_databatch_generator_params() {
  // @@protoc_insertion_point(field_mutable_list:DataBatchSamplerParams.databatch_generator_params)
  return &databatch_generator_params_;
}
inline const ::DataBatchGeneratorParams& DataBatchSamplerParams::_internal_databatch_generator_params(int index) const {
  return databatch_generator_params_.Get(index);
}
inline const ::DataBatchGeneratorParams& DataBatchSamplerParams::databatch_generator_params(int index) const {
  // @@protoc_insertion_point(field_get:DataBatchSamplerParams.databatch_generator_params)
  return _internal_databatch_generator_params(index);
}
inline ::DataBatchGeneratorParams* DataBatchSamplerParams::_internal_add_databatch_generator_params() {
  return databatch_generator_params_.Add();
}
inline ::DataBatchGeneratorParams* DataBatchSamplerParams::add_databatch_generator_params() {
  // @@protoc_insertion_point(field_add:DataBatchSamplerParams.databatch_generator_params)
  return _internal_add_databatch_generator_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataBatchGeneratorParams >&
DataBatchSamplerParams::databatch_generator_params() const {
  // @@protoc_insertion_point(field_list:DataBatchSamplerParams.databatch_generator_params)
  return databatch_generator_params_;
}

// bool deterministic = 2;
inline void DataBatchSamplerParams::clear_deterministic() {
  deterministic_ = false;
}
inline bool DataBatchSamplerParams::_internal_deterministic() const {
  return deterministic_;
}
inline bool DataBatchSamplerParams::deterministic() const {
  // @@protoc_insertion_point(field_get:DataBatchSamplerParams.deterministic)
  return _internal_deterministic();
}
inline void DataBatchSamplerParams::_internal_set_deterministic(bool value) {
  
  deterministic_ = value;
}
inline void DataBatchSamplerParams::set_deterministic(bool value) {
  _internal_set_deterministic(value);
  // @@protoc_insertion_point(field_set:DataBatchSamplerParams.deterministic)
}

// repeated float sample_rate = 3;
inline int DataBatchSamplerParams::_internal_sample_rate_size() const {
  return sample_rate_.size();
}
inline int DataBatchSamplerParams::sample_rate_size() const {
  return _internal_sample_rate_size();
}
inline void DataBatchSamplerParams::clear_sample_rate() {
  sample_rate_.Clear();
}
inline float DataBatchSamplerParams::_internal_sample_rate(int index) const {
  return sample_rate_.Get(index);
}
inline float DataBatchSamplerParams::sample_rate(int index) const {
  // @@protoc_insertion_point(field_get:DataBatchSamplerParams.sample_rate)
  return _internal_sample_rate(index);
}
inline void DataBatchSamplerParams::set_sample_rate(int index, float value) {
  sample_rate_.Set(index, value);
  // @@protoc_insertion_point(field_set:DataBatchSamplerParams.sample_rate)
}
inline void DataBatchSamplerParams::_internal_add_sample_rate(float value) {
  sample_rate_.Add(value);
}
inline void DataBatchSamplerParams::add_sample_rate(float value) {
  _internal_add_sample_rate(value);
  // @@protoc_insertion_point(field_add:DataBatchSamplerParams.sample_rate)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DataBatchSamplerParams::_internal_sample_rate() const {
  return sample_rate_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DataBatchSamplerParams::sample_rate() const {
  // @@protoc_insertion_point(field_list:DataBatchSamplerParams.sample_rate)
  return _internal_sample_rate();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DataBatchSamplerParams::_internal_mutable_sample_rate() {
  return &sample_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DataBatchSamplerParams::mutable_sample_rate() {
  // @@protoc_insertion_point(field_mutable_list:DataBatchSamplerParams.sample_rate)
  return _internal_mutable_sample_rate();
}

// repeated .LabelMapper label_mapper = 4;
inline int DataBatchSamplerParams::_internal_label_mapper_size() const {
  return label_mapper_.size();
}
inline int DataBatchSamplerParams::label_mapper_size() const {
  return _internal_label_mapper_size();
}
inline ::LabelMapper* DataBatchSamplerParams::mutable_label_mapper(int index) {
  // @@protoc_insertion_point(field_mutable:DataBatchSamplerParams.label_mapper)
  return label_mapper_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelMapper >*
DataBatchSamplerParams::mutable_label_mapper() {
  // @@protoc_insertion_point(field_mutable_list:DataBatchSamplerParams.label_mapper)
  return &label_mapper_;
}
inline const ::LabelMapper& DataBatchSamplerParams::_internal_label_mapper(int index) const {
  return label_mapper_.Get(index);
}
inline const ::LabelMapper& DataBatchSamplerParams::label_mapper(int index) const {
  // @@protoc_insertion_point(field_get:DataBatchSamplerParams.label_mapper)
  return _internal_label_mapper(index);
}
inline ::LabelMapper* DataBatchSamplerParams::_internal_add_label_mapper() {
  return label_mapper_.Add();
}
inline ::LabelMapper* DataBatchSamplerParams::add_label_mapper() {
  // @@protoc_insertion_point(field_add:DataBatchSamplerParams.label_mapper)
  return _internal_add_label_mapper();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelMapper >&
DataBatchSamplerParams::label_mapper() const {
  // @@protoc_insertion_point(field_list:DataBatchSamplerParams.label_mapper)
  return label_mapper_;
}

// -------------------------------------------------------------------

// gRPCDataBatchReaderParams

// .DataBatchGeneratorParams databatch_generator_params = 1;
inline bool gRPCDataBatchReaderParams::_internal_has_databatch_generator_params() const {
  return this != internal_default_instance() && databatch_generator_params_ != nullptr;
}
inline bool gRPCDataBatchReaderParams::has_databatch_generator_params() const {
  return _internal_has_databatch_generator_params();
}
inline void gRPCDataBatchReaderParams::clear_databatch_generator_params() {
  if (GetArena() == nullptr && databatch_generator_params_ != nullptr) {
    delete databatch_generator_params_;
  }
  databatch_generator_params_ = nullptr;
}
inline const ::DataBatchGeneratorParams& gRPCDataBatchReaderParams::_internal_databatch_generator_params() const {
  const ::DataBatchGeneratorParams* p = databatch_generator_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatchGeneratorParams*>(
      &::_DataBatchGeneratorParams_default_instance_);
}
inline const ::DataBatchGeneratorParams& gRPCDataBatchReaderParams::databatch_generator_params() const {
  // @@protoc_insertion_point(field_get:gRPCDataBatchReaderParams.databatch_generator_params)
  return _internal_databatch_generator_params();
}
inline void gRPCDataBatchReaderParams::unsafe_arena_set_allocated_databatch_generator_params(
    ::DataBatchGeneratorParams* databatch_generator_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(databatch_generator_params_);
  }
  databatch_generator_params_ = databatch_generator_params;
  if (databatch_generator_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCDataBatchReaderParams.databatch_generator_params)
}
inline ::DataBatchGeneratorParams* gRPCDataBatchReaderParams::release_databatch_generator_params() {
  
  ::DataBatchGeneratorParams* temp = databatch_generator_params_;
  databatch_generator_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatchGeneratorParams* gRPCDataBatchReaderParams::unsafe_arena_release_databatch_generator_params() {
  // @@protoc_insertion_point(field_release:gRPCDataBatchReaderParams.databatch_generator_params)
  
  ::DataBatchGeneratorParams* temp = databatch_generator_params_;
  databatch_generator_params_ = nullptr;
  return temp;
}
inline ::DataBatchGeneratorParams* gRPCDataBatchReaderParams::_internal_mutable_databatch_generator_params() {
  
  if (databatch_generator_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatchGeneratorParams>(GetArena());
    databatch_generator_params_ = p;
  }
  return databatch_generator_params_;
}
inline ::DataBatchGeneratorParams* gRPCDataBatchReaderParams::mutable_databatch_generator_params() {
  // @@protoc_insertion_point(field_mutable:gRPCDataBatchReaderParams.databatch_generator_params)
  return _internal_mutable_databatch_generator_params();
}
inline void gRPCDataBatchReaderParams::set_allocated_databatch_generator_params(::DataBatchGeneratorParams* databatch_generator_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete databatch_generator_params_;
  }
  if (databatch_generator_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(databatch_generator_params);
    if (message_arena != submessage_arena) {
      databatch_generator_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, databatch_generator_params, submessage_arena);
    }
    
  } else {
    
  }
  databatch_generator_params_ = databatch_generator_params;
  // @@protoc_insertion_point(field_set_allocated:gRPCDataBatchReaderParams.databatch_generator_params)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fdatabatch_5fgenerator_2eproto
