// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/checkpoint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fcheckpoint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fcheckpoint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fcheckpoint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2fcheckpoint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fcheckpoint_2eproto;
class LoadCheckpointScope;
class LoadCheckpointScopeDefaultTypeInternal;
extern LoadCheckpointScopeDefaultTypeInternal _LoadCheckpointScope_default_instance_;
class ModelBytes;
class ModelBytesDefaultTypeInternal;
extern ModelBytesDefaultTypeInternal _ModelBytes_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::LoadCheckpointScope* Arena::CreateMaybeMessage<::LoadCheckpointScope>(Arena*);
template<> ::ModelBytes* Arena::CreateMaybeMessage<::ModelBytes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ModelFormat : int {
  NotSet = 0,
  TensorFlow = 1,
  Ambarella = 2,
  TensorRT = 3,
  TensorFlowLite = 4,
  TF_STRAITE = 5,
  PyTorch = 6,
  ModelFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ModelFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ModelFormat_IsValid(int value);
constexpr ModelFormat ModelFormat_MIN = NotSet;
constexpr ModelFormat ModelFormat_MAX = PyTorch;
constexpr int ModelFormat_ARRAYSIZE = ModelFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelFormat_descriptor();
template<typename T>
inline const std::string& ModelFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModelFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModelFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModelFormat_descriptor(), enum_t_value);
}
inline bool ModelFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModelFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModelFormat>(
    ModelFormat_descriptor(), name, value);
}
// ===================================================================

class LoadCheckpointScope PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoadCheckpointScope) */ {
 public:
  inline LoadCheckpointScope() : LoadCheckpointScope(nullptr) {}
  virtual ~LoadCheckpointScope();

  LoadCheckpointScope(const LoadCheckpointScope& from);
  LoadCheckpointScope(LoadCheckpointScope&& from) noexcept
    : LoadCheckpointScope() {
    *this = ::std::move(from);
  }

  inline LoadCheckpointScope& operator=(const LoadCheckpointScope& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadCheckpointScope& operator=(LoadCheckpointScope&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadCheckpointScope& default_instance();

  enum SourceCase {
    kEid = 1,
    kCheckpoint = 2,
    kModelBytes = 7,
    SOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadCheckpointScope* internal_default_instance() {
    return reinterpret_cast<const LoadCheckpointScope*>(
               &_LoadCheckpointScope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoadCheckpointScope& a, LoadCheckpointScope& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadCheckpointScope* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadCheckpointScope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadCheckpointScope* New() const final {
    return CreateMaybeMessage<LoadCheckpointScope>(nullptr);
  }

  LoadCheckpointScope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadCheckpointScope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadCheckpointScope& from);
  void MergeFrom(const LoadCheckpointScope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadCheckpointScope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoadCheckpointScope";
  }
  protected:
  explicit LoadCheckpointScope(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fcheckpoint_2eproto);
    return ::descriptor_table_proto_2futils_2fcheckpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegexFieldNumber = 3,
    kCheckpointRegexFieldNumber = 4,
    kExcludeRegexFieldNumber = 5,
    kSkipMissingFieldNumber = 6,
    kEidFieldNumber = 1,
    kCheckpointFieldNumber = 2,
    kModelBytesFieldNumber = 7,
  };
  // string regex = 3;
  void clear_regex();
  const std::string& regex() const;
  void set_regex(const std::string& value);
  void set_regex(std::string&& value);
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  std::string* mutable_regex();
  std::string* release_regex();
  void set_allocated_regex(std::string* regex);
  private:
  const std::string& _internal_regex() const;
  void _internal_set_regex(const std::string& value);
  std::string* _internal_mutable_regex();
  public:

  // string checkpoint_regex = 4;
  void clear_checkpoint_regex();
  const std::string& checkpoint_regex() const;
  void set_checkpoint_regex(const std::string& value);
  void set_checkpoint_regex(std::string&& value);
  void set_checkpoint_regex(const char* value);
  void set_checkpoint_regex(const char* value, size_t size);
  std::string* mutable_checkpoint_regex();
  std::string* release_checkpoint_regex();
  void set_allocated_checkpoint_regex(std::string* checkpoint_regex);
  private:
  const std::string& _internal_checkpoint_regex() const;
  void _internal_set_checkpoint_regex(const std::string& value);
  std::string* _internal_mutable_checkpoint_regex();
  public:

  // string exclude_regex = 5;
  void clear_exclude_regex();
  const std::string& exclude_regex() const;
  void set_exclude_regex(const std::string& value);
  void set_exclude_regex(std::string&& value);
  void set_exclude_regex(const char* value);
  void set_exclude_regex(const char* value, size_t size);
  std::string* mutable_exclude_regex();
  std::string* release_exclude_regex();
  void set_allocated_exclude_regex(std::string* exclude_regex);
  private:
  const std::string& _internal_exclude_regex() const;
  void _internal_set_exclude_regex(const std::string& value);
  std::string* _internal_mutable_exclude_regex();
  public:

  // bool skip_missing = 6;
  void clear_skip_missing();
  bool skip_missing() const;
  void set_skip_missing(bool value);
  private:
  bool _internal_skip_missing() const;
  void _internal_set_skip_missing(bool value);
  public:

  // int64 eid = 1;
  private:
  bool _internal_has_eid() const;
  public:
  void clear_eid();
  ::PROTOBUF_NAMESPACE_ID::int64 eid() const;
  void set_eid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_eid() const;
  void _internal_set_eid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // string checkpoint = 2;
  private:
  bool _internal_has_checkpoint() const;
  public:
  void clear_checkpoint();
  const std::string& checkpoint() const;
  void set_checkpoint(const std::string& value);
  void set_checkpoint(std::string&& value);
  void set_checkpoint(const char* value);
  void set_checkpoint(const char* value, size_t size);
  std::string* mutable_checkpoint();
  std::string* release_checkpoint();
  void set_allocated_checkpoint(std::string* checkpoint);
  private:
  const std::string& _internal_checkpoint() const;
  void _internal_set_checkpoint(const std::string& value);
  std::string* _internal_mutable_checkpoint();
  public:

  // .ModelBytes model_bytes = 7;
  bool has_model_bytes() const;
  private:
  bool _internal_has_model_bytes() const;
  public:
  void clear_model_bytes();
  const ::ModelBytes& model_bytes() const;
  ::ModelBytes* release_model_bytes();
  ::ModelBytes* mutable_model_bytes();
  void set_allocated_model_bytes(::ModelBytes* model_bytes);
  private:
  const ::ModelBytes& _internal_model_bytes() const;
  ::ModelBytes* _internal_mutable_model_bytes();
  public:
  void unsafe_arena_set_allocated_model_bytes(
      ::ModelBytes* model_bytes);
  ::ModelBytes* unsafe_arena_release_model_bytes();

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:LoadCheckpointScope)
 private:
  class _Internal;
  void set_has_eid();
  void set_has_checkpoint();
  void set_has_model_bytes();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpoint_regex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exclude_regex_;
  bool skip_missing_;
  union SourceUnion {
    SourceUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 eid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpoint_;
    ::ModelBytes* model_bytes_;
  } source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2futils_2fcheckpoint_2eproto;
};
// -------------------------------------------------------------------

class ModelBytes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ModelBytes) */ {
 public:
  inline ModelBytes() : ModelBytes(nullptr) {}
  virtual ~ModelBytes();

  ModelBytes(const ModelBytes& from);
  ModelBytes(ModelBytes&& from) noexcept
    : ModelBytes() {
    *this = ::std::move(from);
  }

  inline ModelBytes& operator=(const ModelBytes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelBytes& operator=(ModelBytes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelBytes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelBytes* internal_default_instance() {
    return reinterpret_cast<const ModelBytes*>(
               &_ModelBytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelBytes& a, ModelBytes& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelBytes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelBytes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelBytes* New() const final {
    return CreateMaybeMessage<ModelBytes>(nullptr);
  }

  ModelBytes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelBytes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelBytes& from);
  void MergeFrom(const ModelBytes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelBytes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ModelBytes";
  }
  protected:
  explicit ModelBytes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fcheckpoint_2eproto);
    return ::descriptor_table_proto_2futils_2fcheckpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrozenMetaGraphFieldNumber = 1,
    kMmappedGraphDefFieldNumber = 2,
    kSerializedTraceFieldNumber = 4,
    kDeviceTypeFieldNumber = 5,
    kModelModuleFieldNumber = 6,
    kModelFormatFieldNumber = 3,
  };
  // bytes frozen_meta_graph = 1;
  void clear_frozen_meta_graph();
  const std::string& frozen_meta_graph() const;
  void set_frozen_meta_graph(const std::string& value);
  void set_frozen_meta_graph(std::string&& value);
  void set_frozen_meta_graph(const char* value);
  void set_frozen_meta_graph(const void* value, size_t size);
  std::string* mutable_frozen_meta_graph();
  std::string* release_frozen_meta_graph();
  void set_allocated_frozen_meta_graph(std::string* frozen_meta_graph);
  private:
  const std::string& _internal_frozen_meta_graph() const;
  void _internal_set_frozen_meta_graph(const std::string& value);
  std::string* _internal_mutable_frozen_meta_graph();
  public:

  // bytes mmapped_graph_def = 2;
  void clear_mmapped_graph_def();
  const std::string& mmapped_graph_def() const;
  void set_mmapped_graph_def(const std::string& value);
  void set_mmapped_graph_def(std::string&& value);
  void set_mmapped_graph_def(const char* value);
  void set_mmapped_graph_def(const void* value, size_t size);
  std::string* mutable_mmapped_graph_def();
  std::string* release_mmapped_graph_def();
  void set_allocated_mmapped_graph_def(std::string* mmapped_graph_def);
  private:
  const std::string& _internal_mmapped_graph_def() const;
  void _internal_set_mmapped_graph_def(const std::string& value);
  std::string* _internal_mutable_mmapped_graph_def();
  public:

  // bytes serialized_trace = 4;
  void clear_serialized_trace();
  const std::string& serialized_trace() const;
  void set_serialized_trace(const std::string& value);
  void set_serialized_trace(std::string&& value);
  void set_serialized_trace(const char* value);
  void set_serialized_trace(const void* value, size_t size);
  std::string* mutable_serialized_trace();
  std::string* release_serialized_trace();
  void set_allocated_serialized_trace(std::string* serialized_trace);
  private:
  const std::string& _internal_serialized_trace() const;
  void _internal_set_serialized_trace(const std::string& value);
  std::string* _internal_mutable_serialized_trace();
  public:

  // string device_type = 5;
  void clear_device_type();
  const std::string& device_type() const;
  void set_device_type(const std::string& value);
  void set_device_type(std::string&& value);
  void set_device_type(const char* value);
  void set_device_type(const char* value, size_t size);
  std::string* mutable_device_type();
  std::string* release_device_type();
  void set_allocated_device_type(std::string* device_type);
  private:
  const std::string& _internal_device_type() const;
  void _internal_set_device_type(const std::string& value);
  std::string* _internal_mutable_device_type();
  public:

  // string model_module = 6;
  void clear_model_module();
  const std::string& model_module() const;
  void set_model_module(const std::string& value);
  void set_model_module(std::string&& value);
  void set_model_module(const char* value);
  void set_model_module(const char* value, size_t size);
  std::string* mutable_model_module();
  std::string* release_model_module();
  void set_allocated_model_module(std::string* model_module);
  private:
  const std::string& _internal_model_module() const;
  void _internal_set_model_module(const std::string& value);
  std::string* _internal_mutable_model_module();
  public:

  // .ModelFormat model_format = 3;
  void clear_model_format();
  ::ModelFormat model_format() const;
  void set_model_format(::ModelFormat value);
  private:
  ::ModelFormat _internal_model_format() const;
  void _internal_set_model_format(::ModelFormat value);
  public:

  // @@protoc_insertion_point(class_scope:ModelBytes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frozen_meta_graph_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mmapped_graph_def_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_trace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_module_;
  int model_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fcheckpoint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoadCheckpointScope

// int64 eid = 1;
inline bool LoadCheckpointScope::_internal_has_eid() const {
  return source_case() == kEid;
}
inline void LoadCheckpointScope::set_has_eid() {
  _oneof_case_[0] = kEid;
}
inline void LoadCheckpointScope::clear_eid() {
  if (_internal_has_eid()) {
    source_.eid_ = PROTOBUF_LONGLONG(0);
    clear_has_source();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadCheckpointScope::_internal_eid() const {
  if (_internal_has_eid()) {
    return source_.eid_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void LoadCheckpointScope::_internal_set_eid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_eid()) {
    clear_source();
    set_has_eid();
  }
  source_.eid_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadCheckpointScope::eid() const {
  // @@protoc_insertion_point(field_get:LoadCheckpointScope.eid)
  return _internal_eid();
}
inline void LoadCheckpointScope::set_eid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_eid(value);
  // @@protoc_insertion_point(field_set:LoadCheckpointScope.eid)
}

// string checkpoint = 2;
inline bool LoadCheckpointScope::_internal_has_checkpoint() const {
  return source_case() == kCheckpoint;
}
inline void LoadCheckpointScope::set_has_checkpoint() {
  _oneof_case_[0] = kCheckpoint;
}
inline void LoadCheckpointScope::clear_checkpoint() {
  if (_internal_has_checkpoint()) {
    source_.checkpoint_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_source();
  }
}
inline const std::string& LoadCheckpointScope::checkpoint() const {
  // @@protoc_insertion_point(field_get:LoadCheckpointScope.checkpoint)
  return _internal_checkpoint();
}
inline void LoadCheckpointScope::set_checkpoint(const std::string& value) {
  _internal_set_checkpoint(value);
  // @@protoc_insertion_point(field_set:LoadCheckpointScope.checkpoint)
}
inline std::string* LoadCheckpointScope::mutable_checkpoint() {
  // @@protoc_insertion_point(field_mutable:LoadCheckpointScope.checkpoint)
  return _internal_mutable_checkpoint();
}
inline const std::string& LoadCheckpointScope::_internal_checkpoint() const {
  if (_internal_has_checkpoint()) {
    return source_.checkpoint_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void LoadCheckpointScope::_internal_set_checkpoint(const std::string& value) {
  if (!_internal_has_checkpoint()) {
    clear_source();
    set_has_checkpoint();
    source_.checkpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.checkpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadCheckpointScope::set_checkpoint(std::string&& value) {
  // @@protoc_insertion_point(field_set:LoadCheckpointScope.checkpoint)
  if (!_internal_has_checkpoint()) {
    clear_source();
    set_has_checkpoint();
    source_.checkpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.checkpoint_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoadCheckpointScope.checkpoint)
}
inline void LoadCheckpointScope::set_checkpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_checkpoint()) {
    clear_source();
    set_has_checkpoint();
    source_.checkpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.checkpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LoadCheckpointScope.checkpoint)
}
inline void LoadCheckpointScope::set_checkpoint(const char* value,
                             size_t size) {
  if (!_internal_has_checkpoint()) {
    clear_source();
    set_has_checkpoint();
    source_.checkpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.checkpoint_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoadCheckpointScope.checkpoint)
}
inline std::string* LoadCheckpointScope::_internal_mutable_checkpoint() {
  if (!_internal_has_checkpoint()) {
    clear_source();
    set_has_checkpoint();
    source_.checkpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return source_.checkpoint_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadCheckpointScope::release_checkpoint() {
  // @@protoc_insertion_point(field_release:LoadCheckpointScope.checkpoint)
  if (_internal_has_checkpoint()) {
    clear_has_source();
    return source_.checkpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void LoadCheckpointScope::set_allocated_checkpoint(std::string* checkpoint) {
  if (has_source()) {
    clear_source();
  }
  if (checkpoint != nullptr) {
    set_has_checkpoint();
    source_.checkpoint_.UnsafeSetDefault(checkpoint);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(checkpoint);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:LoadCheckpointScope.checkpoint)
}

// .ModelBytes model_bytes = 7;
inline bool LoadCheckpointScope::_internal_has_model_bytes() const {
  return source_case() == kModelBytes;
}
inline bool LoadCheckpointScope::has_model_bytes() const {
  return _internal_has_model_bytes();
}
inline void LoadCheckpointScope::set_has_model_bytes() {
  _oneof_case_[0] = kModelBytes;
}
inline void LoadCheckpointScope::clear_model_bytes() {
  if (_internal_has_model_bytes()) {
    if (GetArena() == nullptr) {
      delete source_.model_bytes_;
    }
    clear_has_source();
  }
}
inline ::ModelBytes* LoadCheckpointScope::release_model_bytes() {
  // @@protoc_insertion_point(field_release:LoadCheckpointScope.model_bytes)
  if (_internal_has_model_bytes()) {
    clear_has_source();
      ::ModelBytes* temp = source_.model_bytes_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    source_.model_bytes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ModelBytes& LoadCheckpointScope::_internal_model_bytes() const {
  return _internal_has_model_bytes()
      ? *source_.model_bytes_
      : *reinterpret_cast< ::ModelBytes*>(&::_ModelBytes_default_instance_);
}
inline const ::ModelBytes& LoadCheckpointScope::model_bytes() const {
  // @@protoc_insertion_point(field_get:LoadCheckpointScope.model_bytes)
  return _internal_model_bytes();
}
inline ::ModelBytes* LoadCheckpointScope::unsafe_arena_release_model_bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LoadCheckpointScope.model_bytes)
  if (_internal_has_model_bytes()) {
    clear_has_source();
    ::ModelBytes* temp = source_.model_bytes_;
    source_.model_bytes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LoadCheckpointScope::unsafe_arena_set_allocated_model_bytes(::ModelBytes* model_bytes) {
  clear_source();
  if (model_bytes) {
    set_has_model_bytes();
    source_.model_bytes_ = model_bytes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoadCheckpointScope.model_bytes)
}
inline ::ModelBytes* LoadCheckpointScope::_internal_mutable_model_bytes() {
  if (!_internal_has_model_bytes()) {
    clear_source();
    set_has_model_bytes();
    source_.model_bytes_ = CreateMaybeMessage< ::ModelBytes >(GetArena());
  }
  return source_.model_bytes_;
}
inline ::ModelBytes* LoadCheckpointScope::mutable_model_bytes() {
  // @@protoc_insertion_point(field_mutable:LoadCheckpointScope.model_bytes)
  return _internal_mutable_model_bytes();
}

// string regex = 3;
inline void LoadCheckpointScope::clear_regex() {
  regex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoadCheckpointScope::regex() const {
  // @@protoc_insertion_point(field_get:LoadCheckpointScope.regex)
  return _internal_regex();
}
inline void LoadCheckpointScope::set_regex(const std::string& value) {
  _internal_set_regex(value);
  // @@protoc_insertion_point(field_set:LoadCheckpointScope.regex)
}
inline std::string* LoadCheckpointScope::mutable_regex() {
  // @@protoc_insertion_point(field_mutable:LoadCheckpointScope.regex)
  return _internal_mutable_regex();
}
inline const std::string& LoadCheckpointScope::_internal_regex() const {
  return regex_.Get();
}
inline void LoadCheckpointScope::_internal_set_regex(const std::string& value) {
  
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadCheckpointScope::set_regex(std::string&& value) {
  
  regex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoadCheckpointScope.regex)
}
inline void LoadCheckpointScope::set_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LoadCheckpointScope.regex)
}
inline void LoadCheckpointScope::set_regex(const char* value,
    size_t size) {
  
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoadCheckpointScope.regex)
}
inline std::string* LoadCheckpointScope::_internal_mutable_regex() {
  
  return regex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadCheckpointScope::release_regex() {
  // @@protoc_insertion_point(field_release:LoadCheckpointScope.regex)
  return regex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadCheckpointScope::set_allocated_regex(std::string* regex) {
  if (regex != nullptr) {
    
  } else {
    
  }
  regex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoadCheckpointScope.regex)
}

// string checkpoint_regex = 4;
inline void LoadCheckpointScope::clear_checkpoint_regex() {
  checkpoint_regex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoadCheckpointScope::checkpoint_regex() const {
  // @@protoc_insertion_point(field_get:LoadCheckpointScope.checkpoint_regex)
  return _internal_checkpoint_regex();
}
inline void LoadCheckpointScope::set_checkpoint_regex(const std::string& value) {
  _internal_set_checkpoint_regex(value);
  // @@protoc_insertion_point(field_set:LoadCheckpointScope.checkpoint_regex)
}
inline std::string* LoadCheckpointScope::mutable_checkpoint_regex() {
  // @@protoc_insertion_point(field_mutable:LoadCheckpointScope.checkpoint_regex)
  return _internal_mutable_checkpoint_regex();
}
inline const std::string& LoadCheckpointScope::_internal_checkpoint_regex() const {
  return checkpoint_regex_.Get();
}
inline void LoadCheckpointScope::_internal_set_checkpoint_regex(const std::string& value) {
  
  checkpoint_regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadCheckpointScope::set_checkpoint_regex(std::string&& value) {
  
  checkpoint_regex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoadCheckpointScope.checkpoint_regex)
}
inline void LoadCheckpointScope::set_checkpoint_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpoint_regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LoadCheckpointScope.checkpoint_regex)
}
inline void LoadCheckpointScope::set_checkpoint_regex(const char* value,
    size_t size) {
  
  checkpoint_regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoadCheckpointScope.checkpoint_regex)
}
inline std::string* LoadCheckpointScope::_internal_mutable_checkpoint_regex() {
  
  return checkpoint_regex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadCheckpointScope::release_checkpoint_regex() {
  // @@protoc_insertion_point(field_release:LoadCheckpointScope.checkpoint_regex)
  return checkpoint_regex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadCheckpointScope::set_allocated_checkpoint_regex(std::string* checkpoint_regex) {
  if (checkpoint_regex != nullptr) {
    
  } else {
    
  }
  checkpoint_regex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpoint_regex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoadCheckpointScope.checkpoint_regex)
}

// string exclude_regex = 5;
inline void LoadCheckpointScope::clear_exclude_regex() {
  exclude_regex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoadCheckpointScope::exclude_regex() const {
  // @@protoc_insertion_point(field_get:LoadCheckpointScope.exclude_regex)
  return _internal_exclude_regex();
}
inline void LoadCheckpointScope::set_exclude_regex(const std::string& value) {
  _internal_set_exclude_regex(value);
  // @@protoc_insertion_point(field_set:LoadCheckpointScope.exclude_regex)
}
inline std::string* LoadCheckpointScope::mutable_exclude_regex() {
  // @@protoc_insertion_point(field_mutable:LoadCheckpointScope.exclude_regex)
  return _internal_mutable_exclude_regex();
}
inline const std::string& LoadCheckpointScope::_internal_exclude_regex() const {
  return exclude_regex_.Get();
}
inline void LoadCheckpointScope::_internal_set_exclude_regex(const std::string& value) {
  
  exclude_regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadCheckpointScope::set_exclude_regex(std::string&& value) {
  
  exclude_regex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoadCheckpointScope.exclude_regex)
}
inline void LoadCheckpointScope::set_exclude_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exclude_regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LoadCheckpointScope.exclude_regex)
}
inline void LoadCheckpointScope::set_exclude_regex(const char* value,
    size_t size) {
  
  exclude_regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoadCheckpointScope.exclude_regex)
}
inline std::string* LoadCheckpointScope::_internal_mutable_exclude_regex() {
  
  return exclude_regex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadCheckpointScope::release_exclude_regex() {
  // @@protoc_insertion_point(field_release:LoadCheckpointScope.exclude_regex)
  return exclude_regex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadCheckpointScope::set_allocated_exclude_regex(std::string* exclude_regex) {
  if (exclude_regex != nullptr) {
    
  } else {
    
  }
  exclude_regex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exclude_regex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoadCheckpointScope.exclude_regex)
}

// bool skip_missing = 6;
inline void LoadCheckpointScope::clear_skip_missing() {
  skip_missing_ = false;
}
inline bool LoadCheckpointScope::_internal_skip_missing() const {
  return skip_missing_;
}
inline bool LoadCheckpointScope::skip_missing() const {
  // @@protoc_insertion_point(field_get:LoadCheckpointScope.skip_missing)
  return _internal_skip_missing();
}
inline void LoadCheckpointScope::_internal_set_skip_missing(bool value) {
  
  skip_missing_ = value;
}
inline void LoadCheckpointScope::set_skip_missing(bool value) {
  _internal_set_skip_missing(value);
  // @@protoc_insertion_point(field_set:LoadCheckpointScope.skip_missing)
}

inline bool LoadCheckpointScope::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void LoadCheckpointScope::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline LoadCheckpointScope::SourceCase LoadCheckpointScope::source_case() const {
  return LoadCheckpointScope::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ModelBytes

// bytes frozen_meta_graph = 1;
inline void ModelBytes::clear_frozen_meta_graph() {
  frozen_meta_graph_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelBytes::frozen_meta_graph() const {
  // @@protoc_insertion_point(field_get:ModelBytes.frozen_meta_graph)
  return _internal_frozen_meta_graph();
}
inline void ModelBytes::set_frozen_meta_graph(const std::string& value) {
  _internal_set_frozen_meta_graph(value);
  // @@protoc_insertion_point(field_set:ModelBytes.frozen_meta_graph)
}
inline std::string* ModelBytes::mutable_frozen_meta_graph() {
  // @@protoc_insertion_point(field_mutable:ModelBytes.frozen_meta_graph)
  return _internal_mutable_frozen_meta_graph();
}
inline const std::string& ModelBytes::_internal_frozen_meta_graph() const {
  return frozen_meta_graph_.Get();
}
inline void ModelBytes::_internal_set_frozen_meta_graph(const std::string& value) {
  
  frozen_meta_graph_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelBytes::set_frozen_meta_graph(std::string&& value) {
  
  frozen_meta_graph_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelBytes.frozen_meta_graph)
}
inline void ModelBytes::set_frozen_meta_graph(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frozen_meta_graph_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ModelBytes.frozen_meta_graph)
}
inline void ModelBytes::set_frozen_meta_graph(const void* value,
    size_t size) {
  
  frozen_meta_graph_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelBytes.frozen_meta_graph)
}
inline std::string* ModelBytes::_internal_mutable_frozen_meta_graph() {
  
  return frozen_meta_graph_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelBytes::release_frozen_meta_graph() {
  // @@protoc_insertion_point(field_release:ModelBytes.frozen_meta_graph)
  return frozen_meta_graph_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelBytes::set_allocated_frozen_meta_graph(std::string* frozen_meta_graph) {
  if (frozen_meta_graph != nullptr) {
    
  } else {
    
  }
  frozen_meta_graph_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frozen_meta_graph,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ModelBytes.frozen_meta_graph)
}

// bytes mmapped_graph_def = 2;
inline void ModelBytes::clear_mmapped_graph_def() {
  mmapped_graph_def_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelBytes::mmapped_graph_def() const {
  // @@protoc_insertion_point(field_get:ModelBytes.mmapped_graph_def)
  return _internal_mmapped_graph_def();
}
inline void ModelBytes::set_mmapped_graph_def(const std::string& value) {
  _internal_set_mmapped_graph_def(value);
  // @@protoc_insertion_point(field_set:ModelBytes.mmapped_graph_def)
}
inline std::string* ModelBytes::mutable_mmapped_graph_def() {
  // @@protoc_insertion_point(field_mutable:ModelBytes.mmapped_graph_def)
  return _internal_mutable_mmapped_graph_def();
}
inline const std::string& ModelBytes::_internal_mmapped_graph_def() const {
  return mmapped_graph_def_.Get();
}
inline void ModelBytes::_internal_set_mmapped_graph_def(const std::string& value) {
  
  mmapped_graph_def_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelBytes::set_mmapped_graph_def(std::string&& value) {
  
  mmapped_graph_def_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelBytes.mmapped_graph_def)
}
inline void ModelBytes::set_mmapped_graph_def(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mmapped_graph_def_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ModelBytes.mmapped_graph_def)
}
inline void ModelBytes::set_mmapped_graph_def(const void* value,
    size_t size) {
  
  mmapped_graph_def_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelBytes.mmapped_graph_def)
}
inline std::string* ModelBytes::_internal_mutable_mmapped_graph_def() {
  
  return mmapped_graph_def_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelBytes::release_mmapped_graph_def() {
  // @@protoc_insertion_point(field_release:ModelBytes.mmapped_graph_def)
  return mmapped_graph_def_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelBytes::set_allocated_mmapped_graph_def(std::string* mmapped_graph_def) {
  if (mmapped_graph_def != nullptr) {
    
  } else {
    
  }
  mmapped_graph_def_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mmapped_graph_def,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ModelBytes.mmapped_graph_def)
}

// .ModelFormat model_format = 3;
inline void ModelBytes::clear_model_format() {
  model_format_ = 0;
}
inline ::ModelFormat ModelBytes::_internal_model_format() const {
  return static_cast< ::ModelFormat >(model_format_);
}
inline ::ModelFormat ModelBytes::model_format() const {
  // @@protoc_insertion_point(field_get:ModelBytes.model_format)
  return _internal_model_format();
}
inline void ModelBytes::_internal_set_model_format(::ModelFormat value) {
  
  model_format_ = value;
}
inline void ModelBytes::set_model_format(::ModelFormat value) {
  _internal_set_model_format(value);
  // @@protoc_insertion_point(field_set:ModelBytes.model_format)
}

// bytes serialized_trace = 4;
inline void ModelBytes::clear_serialized_trace() {
  serialized_trace_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelBytes::serialized_trace() const {
  // @@protoc_insertion_point(field_get:ModelBytes.serialized_trace)
  return _internal_serialized_trace();
}
inline void ModelBytes::set_serialized_trace(const std::string& value) {
  _internal_set_serialized_trace(value);
  // @@protoc_insertion_point(field_set:ModelBytes.serialized_trace)
}
inline std::string* ModelBytes::mutable_serialized_trace() {
  // @@protoc_insertion_point(field_mutable:ModelBytes.serialized_trace)
  return _internal_mutable_serialized_trace();
}
inline const std::string& ModelBytes::_internal_serialized_trace() const {
  return serialized_trace_.Get();
}
inline void ModelBytes::_internal_set_serialized_trace(const std::string& value) {
  
  serialized_trace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelBytes::set_serialized_trace(std::string&& value) {
  
  serialized_trace_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelBytes.serialized_trace)
}
inline void ModelBytes::set_serialized_trace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serialized_trace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ModelBytes.serialized_trace)
}
inline void ModelBytes::set_serialized_trace(const void* value,
    size_t size) {
  
  serialized_trace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelBytes.serialized_trace)
}
inline std::string* ModelBytes::_internal_mutable_serialized_trace() {
  
  return serialized_trace_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelBytes::release_serialized_trace() {
  // @@protoc_insertion_point(field_release:ModelBytes.serialized_trace)
  return serialized_trace_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelBytes::set_allocated_serialized_trace(std::string* serialized_trace) {
  if (serialized_trace != nullptr) {
    
  } else {
    
  }
  serialized_trace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_trace,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ModelBytes.serialized_trace)
}

// string device_type = 5;
inline void ModelBytes::clear_device_type() {
  device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelBytes::device_type() const {
  // @@protoc_insertion_point(field_get:ModelBytes.device_type)
  return _internal_device_type();
}
inline void ModelBytes::set_device_type(const std::string& value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:ModelBytes.device_type)
}
inline std::string* ModelBytes::mutable_device_type() {
  // @@protoc_insertion_point(field_mutable:ModelBytes.device_type)
  return _internal_mutable_device_type();
}
inline const std::string& ModelBytes::_internal_device_type() const {
  return device_type_.Get();
}
inline void ModelBytes::_internal_set_device_type(const std::string& value) {
  
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelBytes::set_device_type(std::string&& value) {
  
  device_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelBytes.device_type)
}
inline void ModelBytes::set_device_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ModelBytes.device_type)
}
inline void ModelBytes::set_device_type(const char* value,
    size_t size) {
  
  device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelBytes.device_type)
}
inline std::string* ModelBytes::_internal_mutable_device_type() {
  
  return device_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelBytes::release_device_type() {
  // @@protoc_insertion_point(field_release:ModelBytes.device_type)
  return device_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelBytes::set_allocated_device_type(std::string* device_type) {
  if (device_type != nullptr) {
    
  } else {
    
  }
  device_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ModelBytes.device_type)
}

// string model_module = 6;
inline void ModelBytes::clear_model_module() {
  model_module_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelBytes::model_module() const {
  // @@protoc_insertion_point(field_get:ModelBytes.model_module)
  return _internal_model_module();
}
inline void ModelBytes::set_model_module(const std::string& value) {
  _internal_set_model_module(value);
  // @@protoc_insertion_point(field_set:ModelBytes.model_module)
}
inline std::string* ModelBytes::mutable_model_module() {
  // @@protoc_insertion_point(field_mutable:ModelBytes.model_module)
  return _internal_mutable_model_module();
}
inline const std::string& ModelBytes::_internal_model_module() const {
  return model_module_.Get();
}
inline void ModelBytes::_internal_set_model_module(const std::string& value) {
  
  model_module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelBytes::set_model_module(std::string&& value) {
  
  model_module_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelBytes.model_module)
}
inline void ModelBytes::set_model_module(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ModelBytes.model_module)
}
inline void ModelBytes::set_model_module(const char* value,
    size_t size) {
  
  model_module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelBytes.model_module)
}
inline std::string* ModelBytes::_internal_mutable_model_module() {
  
  return model_module_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelBytes::release_model_module() {
  // @@protoc_insertion_point(field_release:ModelBytes.model_module)
  return model_module_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelBytes::set_allocated_model_module(std::string* model_module) {
  if (model_module != nullptr) {
    
  } else {
    
  }
  model_module_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_module,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ModelBytes.model_module)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ModelFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ModelFormat>() {
  return ::ModelFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fcheckpoint_2eproto
