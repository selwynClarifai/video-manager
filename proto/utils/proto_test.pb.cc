// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/proto_test.proto

#include "proto/utils/proto_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fproto_5ftest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnotherMessage_proto_2futils_2fproto_5ftest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fproto_5ftest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MyMessage_proto_2futils_2fproto_5ftest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fproto_5ftest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProtoTest_MapMsgEntry_DoNotUse_proto_2futils_2fproto_5ftest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fproto_5ftest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoTest_MapScalarEntry_DoNotUse_proto_2futils_2fproto_5ftest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto;
class AnotherMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnotherMessage> _instance;
} _AnotherMessage_default_instance_;
class MyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyMessage> _instance;
} _MyMessage_default_instance_;
class ProtoTest_MapScalarEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoTest_MapScalarEntry_DoNotUse> _instance;
} _ProtoTest_MapScalarEntry_DoNotUse_default_instance_;
class ProtoTest_MapMsgEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoTest_MapMsgEntry_DoNotUse> _instance;
} _ProtoTest_MapMsgEntry_DoNotUse_default_instance_;
class ProtoTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoTest> _instance;
} _ProtoTest_default_instance_;
class ProtoTestRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoTestRequest> _instance;
} _ProtoTestRequest_default_instance_;
class ProtoTestResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoTestResponse> _instance;
} _ProtoTestResponse_default_instance_;
static void InitDefaultsscc_info_AnotherMessage_proto_2futils_2fproto_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AnotherMessage_default_instance_;
    new (ptr) ::AnotherMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AnotherMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnotherMessage_proto_2futils_2fproto_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnotherMessage_proto_2futils_2fproto_5ftest_2eproto}, {}};

static void InitDefaultsscc_info_MyMessage_proto_2futils_2fproto_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MyMessage_default_instance_;
    new (ptr) ::MyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MyMessage_proto_2futils_2fproto_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MyMessage_proto_2futils_2fproto_5ftest_2eproto}, {
      &scc_info_AnotherMessage_proto_2futils_2fproto_5ftest_2eproto.base,}};

static void InitDefaultsscc_info_ProtoTest_proto_2futils_2fproto_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoTest_default_instance_;
    new (ptr) ::ProtoTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProtoTest_proto_2futils_2fproto_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProtoTest_proto_2futils_2fproto_5ftest_2eproto}, {
      &scc_info_MyMessage_proto_2futils_2fproto_5ftest_2eproto.base,
      &scc_info_ProtoTest_MapScalarEntry_DoNotUse_proto_2futils_2fproto_5ftest_2eproto.base,
      &scc_info_ProtoTest_MapMsgEntry_DoNotUse_proto_2futils_2fproto_5ftest_2eproto.base,}};

static void InitDefaultsscc_info_ProtoTest_MapMsgEntry_DoNotUse_proto_2futils_2fproto_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoTest_MapMsgEntry_DoNotUse_default_instance_;
    new (ptr) ::ProtoTest_MapMsgEntry_DoNotUse();
  }
  ::ProtoTest_MapMsgEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProtoTest_MapMsgEntry_DoNotUse_proto_2futils_2fproto_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProtoTest_MapMsgEntry_DoNotUse_proto_2futils_2fproto_5ftest_2eproto}, {
      &scc_info_MyMessage_proto_2futils_2fproto_5ftest_2eproto.base,}};

static void InitDefaultsscc_info_ProtoTest_MapScalarEntry_DoNotUse_proto_2futils_2fproto_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoTest_MapScalarEntry_DoNotUse_default_instance_;
    new (ptr) ::ProtoTest_MapScalarEntry_DoNotUse();
  }
  ::ProtoTest_MapScalarEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoTest_MapScalarEntry_DoNotUse_proto_2futils_2fproto_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoTest_MapScalarEntry_DoNotUse_proto_2futils_2fproto_5ftest_2eproto}, {}};

static void InitDefaultsscc_info_ProtoTestRequest_proto_2futils_2fproto_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoTestRequest_default_instance_;
    new (ptr) ::ProtoTestRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoTestRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProtoTestRequest_proto_2futils_2fproto_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProtoTestRequest_proto_2futils_2fproto_5ftest_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_ProtoTestResponse_proto_2futils_2fproto_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoTestResponse_default_instance_;
    new (ptr) ::ProtoTestResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoTestResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProtoTestResponse_proto_2futils_2fproto_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProtoTestResponse_proto_2futils_2fproto_5ftest_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2futils_2fproto_5ftest_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2futils_2fproto_5ftest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2futils_2fproto_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2futils_2fproto_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AnotherMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AnotherMessage, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MyMessage, name_),
  PROTOBUF_FIELD_OFFSET(::MyMessage, num_),
  PROTOBUF_FIELD_OFFSET(::MyMessage, another_msg_),
  PROTOBUF_FIELD_OFFSET(::ProtoTest_MapScalarEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoTest_MapScalarEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoTest_MapScalarEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ProtoTest_MapScalarEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoTest_MapMsgEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoTest_MapMsgEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoTest_MapMsgEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ProtoTest_MapMsgEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoTest, scalar_),
  PROTOBUF_FIELD_OFFSET(::ProtoTest, repeated_scalar_),
  PROTOBUF_FIELD_OFFSET(::ProtoTest, msg_),
  PROTOBUF_FIELD_OFFSET(::ProtoTest, repeated_msg_),
  PROTOBUF_FIELD_OFFSET(::ProtoTest, map_scalar_),
  PROTOBUF_FIELD_OFFSET(::ProtoTest, map_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoTestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoTestRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::ProtoTestRequest, value_),
  PROTOBUF_FIELD_OFFSET(::ProtoTestRequest, sleep_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoTestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoTestResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ProtoTestResponse, value_),
  PROTOBUF_FIELD_OFFSET(::ProtoTestResponse, sleep_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AnotherMessage)},
  { 6, -1, sizeof(::MyMessage)},
  { 14, 21, sizeof(::ProtoTest_MapScalarEntry_DoNotUse)},
  { 23, 30, sizeof(::ProtoTest_MapMsgEntry_DoNotUse)},
  { 32, -1, sizeof(::ProtoTest)},
  { 43, -1, sizeof(::ProtoTestRequest)},
  { 51, -1, sizeof(::ProtoTestResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AnotherMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoTest_MapScalarEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoTest_MapMsgEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoTestRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoTestResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2futils_2fproto_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034proto/utils/proto_test.proto\032\036proto/ut"
  "ils/request_meta.proto\"\034\n\016AnotherMessage"
  "\022\n\n\002id\030\001 \001(\t\"L\n\tMyMessage\022\014\n\004name\030\001 \001(\t\022"
  "\013\n\003num\030\002 \001(\r\022$\n\013another_msg\030\003 \001(\0132\017.Anot"
  "herMessage\"\264\002\n\tProtoTest\022\016\n\006scalar\030\001 \001(\t"
  "\022\027\n\017repeated_scalar\030\002 \003(\r\022\027\n\003msg\030\003 \001(\0132\n"
  ".MyMessage\022 \n\014repeated_msg\030\004 \003(\0132\n.MyMes"
  "sage\022-\n\nmap_scalar\030\005 \003(\0132\031.ProtoTest.Map"
  "ScalarEntry\022\'\n\007map_msg\030\006 \003(\0132\026.ProtoTest"
  ".MapMsgEntry\0320\n\016MapScalarEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0329\n\013MapMsgEntry\022\013\n"
  "\003key\030\001 \001(\t\022\031\n\005value\030\002 \001(\0132\n.MyMessage:\0028"
  "\001\"Q\n\020ProtoTestRequest\022\032\n\004meta\030\001 \001(\0132\014.Re"
  "questMeta\022\r\n\005value\030\002 \001(\t\022\022\n\nsleep_time\030\003"
  " \001(\r\"W\n\021ProtoTestResponse\022\037\n\006status\030\001 \001("
  "\0132\017.ResponseStatus\022\r\n\005value\030\002 \001(\t\022\022\n\nsle"
  "ep_time\030\003 \001(\r2O\n\020ProtoTestService\022;\n\020Pro"
  "toTestPredict\022\021.ProtoTestRequest\032\022.Proto"
  "TestResponse\"\000B\016\n\005utilsZ\005utilsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2futils_2fproto_5ftest_2eproto_deps[1] = {
  &::descriptor_table_proto_2futils_2frequest_5fmeta_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2futils_2fproto_5ftest_2eproto_sccs[7] = {
  &scc_info_AnotherMessage_proto_2futils_2fproto_5ftest_2eproto.base,
  &scc_info_MyMessage_proto_2futils_2fproto_5ftest_2eproto.base,
  &scc_info_ProtoTest_proto_2futils_2fproto_5ftest_2eproto.base,
  &scc_info_ProtoTest_MapMsgEntry_DoNotUse_proto_2futils_2fproto_5ftest_2eproto.base,
  &scc_info_ProtoTest_MapScalarEntry_DoNotUse_proto_2futils_2fproto_5ftest_2eproto.base,
  &scc_info_ProtoTestRequest_proto_2futils_2fproto_5ftest_2eproto.base,
  &scc_info_ProtoTestResponse_proto_2futils_2fproto_5ftest_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2futils_2fproto_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fproto_5ftest_2eproto = {
  false, false, descriptor_table_protodef_proto_2futils_2fproto_5ftest_2eproto, "proto/utils/proto_test.proto", 758,
  &descriptor_table_proto_2futils_2fproto_5ftest_2eproto_once, descriptor_table_proto_2futils_2fproto_5ftest_2eproto_sccs, descriptor_table_proto_2futils_2fproto_5ftest_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_proto_2futils_2fproto_5ftest_2eproto::offsets,
  file_level_metadata_proto_2futils_2fproto_5ftest_2eproto, 7, file_level_enum_descriptors_proto_2futils_2fproto_5ftest_2eproto, file_level_service_descriptors_proto_2futils_2fproto_5ftest_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2futils_2fproto_5ftest_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2futils_2fproto_5ftest_2eproto)), true);

// ===================================================================

void AnotherMessage::InitAsDefaultInstance() {
}
class AnotherMessage::_Internal {
 public:
};

AnotherMessage::AnotherMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AnotherMessage)
}
AnotherMessage::AnotherMessage(const AnotherMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:AnotherMessage)
}

void AnotherMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnotherMessage_proto_2futils_2fproto_5ftest_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AnotherMessage::~AnotherMessage() {
  // @@protoc_insertion_point(destructor:AnotherMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnotherMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnotherMessage::ArenaDtor(void* object) {
  AnotherMessage* _this = reinterpret_cast< AnotherMessage* >(object);
  (void)_this;
}
void AnotherMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnotherMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnotherMessage& AnotherMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnotherMessage_proto_2futils_2fproto_5ftest_2eproto.base);
  return *internal_default_instance();
}


void AnotherMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AnotherMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnotherMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AnotherMessage.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnotherMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AnotherMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AnotherMessage.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnotherMessage)
  return target;
}

size_t AnotherMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnotherMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnotherMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AnotherMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AnotherMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnotherMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AnotherMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AnotherMessage)
    MergeFrom(*source);
  }
}

void AnotherMessage::MergeFrom(const AnotherMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnotherMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void AnotherMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AnotherMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnotherMessage::CopyFrom(const AnotherMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnotherMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnotherMessage::IsInitialized() const {
  return true;
}

void AnotherMessage::InternalSwap(AnotherMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AnotherMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MyMessage::InitAsDefaultInstance() {
  ::_MyMessage_default_instance_._instance.get_mutable()->another_msg_ = const_cast< ::AnotherMessage*>(
      ::AnotherMessage::internal_default_instance());
}
class MyMessage::_Internal {
 public:
  static const ::AnotherMessage& another_msg(const MyMessage* msg);
};

const ::AnotherMessage&
MyMessage::_Internal::another_msg(const MyMessage* msg) {
  return *msg->another_msg_;
}
MyMessage::MyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MyMessage)
}
MyMessage::MyMessage(const MyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_another_msg()) {
    another_msg_ = new ::AnotherMessage(*from.another_msg_);
  } else {
    another_msg_ = nullptr;
  }
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:MyMessage)
}

void MyMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MyMessage_proto_2futils_2fproto_5ftest_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&another_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&another_msg_)) + sizeof(num_));
}

MyMessage::~MyMessage() {
  // @@protoc_insertion_point(destructor:MyMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete another_msg_;
}

void MyMessage::ArenaDtor(void* object) {
  MyMessage* _this = reinterpret_cast< MyMessage* >(object);
  (void)_this;
}
void MyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyMessage& MyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyMessage_proto_2futils_2fproto_5ftest_2eproto.base);
  return *internal_default_instance();
}


void MyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && another_msg_ != nullptr) {
    delete another_msg_;
  }
  another_msg_ = nullptr;
  num_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyMessage.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AnotherMessage another_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_another_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyMessage.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num(), target);
  }

  // .AnotherMessage another_msg = 3;
  if (this->has_another_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::another_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyMessage)
  return target;
}

size_t MyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .AnotherMessage another_msg = 3;
  if (this->has_another_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *another_msg_);
  }

  // uint32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MyMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyMessage)
    MergeFrom(*source);
  }
}

void MyMessage::MergeFrom(const MyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_another_msg()) {
    _internal_mutable_another_msg()->::AnotherMessage::MergeFrom(from._internal_another_msg());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void MyMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyMessage::CopyFrom(const MyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyMessage::IsInitialized() const {
  return true;
}

void MyMessage::InternalSwap(MyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MyMessage, num_)
      + sizeof(MyMessage::num_)
      - PROTOBUF_FIELD_OFFSET(MyMessage, another_msg_)>(
          reinterpret_cast<char*>(&another_msg_),
          reinterpret_cast<char*>(&other->another_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MyMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ProtoTest_MapScalarEntry_DoNotUse::ProtoTest_MapScalarEntry_DoNotUse() {}
ProtoTest_MapScalarEntry_DoNotUse::ProtoTest_MapScalarEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProtoTest_MapScalarEntry_DoNotUse::MergeFrom(const ProtoTest_MapScalarEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProtoTest_MapScalarEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProtoTest_MapScalarEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ProtoTest_MapMsgEntry_DoNotUse::ProtoTest_MapMsgEntry_DoNotUse() {}
ProtoTest_MapMsgEntry_DoNotUse::ProtoTest_MapMsgEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProtoTest_MapMsgEntry_DoNotUse::MergeFrom(const ProtoTest_MapMsgEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProtoTest_MapMsgEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProtoTest_MapMsgEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ProtoTest::InitAsDefaultInstance() {
  ::_ProtoTest_default_instance_._instance.get_mutable()->msg_ = const_cast< ::MyMessage*>(
      ::MyMessage::internal_default_instance());
}
class ProtoTest::_Internal {
 public:
  static const ::MyMessage& msg(const ProtoTest* msg);
};

const ::MyMessage&
ProtoTest::_Internal::msg(const ProtoTest* msg) {
  return *msg->msg_;
}
ProtoTest::ProtoTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  repeated_scalar_(arena),
  repeated_msg_(arena),
  map_scalar_(arena),
  map_msg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoTest)
}
ProtoTest::ProtoTest(const ProtoTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      repeated_scalar_(from.repeated_scalar_),
      repeated_msg_(from.repeated_msg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_scalar_.MergeFrom(from.map_scalar_);
  map_msg_.MergeFrom(from.map_msg_);
  scalar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scalar().empty()) {
    scalar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scalar(),
      GetArena());
  }
  if (from._internal_has_msg()) {
    msg_ = new ::MyMessage(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ProtoTest)
}

void ProtoTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoTest_proto_2futils_2fproto_5ftest_2eproto.base);
  scalar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_ = nullptr;
}

ProtoTest::~ProtoTest() {
  // @@protoc_insertion_point(destructor:ProtoTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scalar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete msg_;
}

void ProtoTest::ArenaDtor(void* object) {
  ProtoTest* _this = reinterpret_cast< ProtoTest* >(object);
  (void)_this;
}
void ProtoTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoTest& ProtoTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoTest_proto_2futils_2fproto_5ftest_2eproto.base);
  return *internal_default_instance();
}


void ProtoTest::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_scalar_.Clear();
  repeated_msg_.Clear();
  map_scalar_.Clear();
  map_msg_.Clear();
  scalar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string scalar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_scalar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoTest.scalar"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 repeated_scalar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_repeated_scalar(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_repeated_scalar(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MyMessage msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MyMessage repeated_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> map_scalar = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_scalar_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .MyMessage> map_msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_msg_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scalar = 1;
  if (this->scalar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scalar().data(), static_cast<int>(this->_internal_scalar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProtoTest.scalar");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scalar(), target);
  }

  // repeated uint32 repeated_scalar = 2;
  {
    int byte_size = _repeated_scalar_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_repeated_scalar(), byte_size, target);
    }
  }

  // .MyMessage msg = 3;
  if (this->has_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::msg(this), target, stream);
  }

  // repeated .MyMessage repeated_msg = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_repeated_msg(i), target, stream);
  }

  // map<string, string> map_scalar = 5;
  if (!this->_internal_map_scalar().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ProtoTest.MapScalarEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ProtoTest.MapScalarEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_scalar().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_scalar().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_map_scalar().begin();
          it != this->_internal_map_scalar().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProtoTest_MapScalarEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_map_scalar().begin();
          it != this->_internal_map_scalar().end(); ++it) {
        target = ProtoTest_MapScalarEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .MyMessage> map_msg = 6;
  if (!this->_internal_map_msg().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MyMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ProtoTest.MapMsgEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_msg().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_msg().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MyMessage >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MyMessage >::const_iterator
          it = this->_internal_map_msg().begin();
          it != this->_internal_map_msg().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProtoTest_MapMsgEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MyMessage >::const_iterator
          it = this->_internal_map_msg().begin();
          it != this->_internal_map_msg().end(); ++it) {
        target = ProtoTest_MapMsgEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTest)
  return target;
}

size_t ProtoTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 repeated_scalar = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->repeated_scalar_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_scalar_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .MyMessage repeated_msg = 4;
  total_size += 1UL * this->_internal_repeated_msg_size();
  for (const auto& msg : this->repeated_msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> map_scalar = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_scalar_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_map_scalar().begin();
      it != this->_internal_map_scalar().end(); ++it) {
    total_size += ProtoTest_MapScalarEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .MyMessage> map_msg = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_msg_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MyMessage >::const_iterator
      it = this->_internal_map_msg().begin();
      it != this->_internal_map_msg().end(); ++it) {
    total_size += ProtoTest_MapMsgEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string scalar = 1;
  if (this->scalar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scalar());
  }

  // .MyMessage msg = 3;
  if (this->has_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoTest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoTest)
    MergeFrom(*source);
  }
}

void ProtoTest::MergeFrom(const ProtoTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_scalar_.MergeFrom(from.repeated_scalar_);
  repeated_msg_.MergeFrom(from.repeated_msg_);
  map_scalar_.MergeFrom(from.map_scalar_);
  map_msg_.MergeFrom(from.map_msg_);
  if (from.scalar().size() > 0) {
    _internal_set_scalar(from._internal_scalar());
  }
  if (from.has_msg()) {
    _internal_mutable_msg()->::MyMessage::MergeFrom(from._internal_msg());
  }
}

void ProtoTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTest::CopyFrom(const ProtoTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTest::IsInitialized() const {
  return true;
}

void ProtoTest::InternalSwap(ProtoTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  repeated_scalar_.InternalSwap(&other->repeated_scalar_);
  repeated_msg_.InternalSwap(&other->repeated_msg_);
  map_scalar_.Swap(&other->map_scalar_);
  map_msg_.Swap(&other->map_msg_);
  scalar_.Swap(&other->scalar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProtoTestRequest::InitAsDefaultInstance() {
  ::_ProtoTestRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
}
class ProtoTestRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const ProtoTestRequest* msg);
};

const ::RequestMeta&
ProtoTestRequest::_Internal::meta(const ProtoTestRequest* msg) {
  return *msg->meta_;
}
void ProtoTestRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
ProtoTestRequest::ProtoTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoTestRequest)
}
ProtoTestRequest::ProtoTestRequest(const ProtoTestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  sleep_time_ = from.sleep_time_;
  // @@protoc_insertion_point(copy_constructor:ProtoTestRequest)
}

void ProtoTestRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoTestRequest_proto_2futils_2fproto_5ftest_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sleep_time_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(sleep_time_));
}

ProtoTestRequest::~ProtoTestRequest() {
  // @@protoc_insertion_point(destructor:ProtoTestRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoTestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
}

void ProtoTestRequest::ArenaDtor(void* object) {
  ProtoTestRequest* _this = reinterpret_cast< ProtoTestRequest* >(object);
  (void)_this;
}
void ProtoTestRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoTestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoTestRequest& ProtoTestRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoTestRequest_proto_2futils_2fproto_5ftest_2eproto.base);
  return *internal_default_instance();
}


void ProtoTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  sleep_time_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoTestRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoTestRequest.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sleep_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sleep_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoTestRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProtoTestRequest.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // uint32 sleep_time = 3;
  if (this->sleep_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sleep_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTestRequest)
  return target;
}

size_t ProtoTestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoTestRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // uint32 sleep_time = 3;
  if (this->sleep_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sleep_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoTestRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoTestRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoTestRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoTestRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoTestRequest)
    MergeFrom(*source);
  }
}

void ProtoTestRequest::MergeFrom(const ProtoTestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.sleep_time() != 0) {
    _internal_set_sleep_time(from._internal_sleep_time());
  }
}

void ProtoTestRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTestRequest::CopyFrom(const ProtoTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTestRequest::IsInitialized() const {
  return true;
}

void ProtoTestRequest::InternalSwap(ProtoTestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoTestRequest, sleep_time_)
      + sizeof(ProtoTestRequest::sleep_time_)
      - PROTOBUF_FIELD_OFFSET(ProtoTestRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoTestRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProtoTestResponse::InitAsDefaultInstance() {
  ::_ProtoTestResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
}
class ProtoTestResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const ProtoTestResponse* msg);
};

const ::ResponseStatus&
ProtoTestResponse::_Internal::status(const ProtoTestResponse* msg) {
  return *msg->status_;
}
void ProtoTestResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ProtoTestResponse::ProtoTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoTestResponse)
}
ProtoTestResponse::ProtoTestResponse(const ProtoTestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  sleep_time_ = from.sleep_time_;
  // @@protoc_insertion_point(copy_constructor:ProtoTestResponse)
}

void ProtoTestResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoTestResponse_proto_2futils_2fproto_5ftest_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sleep_time_) -
      reinterpret_cast<char*>(&status_)) + sizeof(sleep_time_));
}

ProtoTestResponse::~ProtoTestResponse() {
  // @@protoc_insertion_point(destructor:ProtoTestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoTestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void ProtoTestResponse::ArenaDtor(void* object) {
  ProtoTestResponse* _this = reinterpret_cast< ProtoTestResponse* >(object);
  (void)_this;
}
void ProtoTestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoTestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoTestResponse& ProtoTestResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoTestResponse_proto_2futils_2fproto_5ftest_2eproto.base);
  return *internal_default_instance();
}


void ProtoTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  sleep_time_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoTestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoTestResponse.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sleep_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sleep_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoTestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProtoTestResponse.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // uint32 sleep_time = 3;
  if (this->sleep_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sleep_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTestResponse)
  return target;
}

size_t ProtoTestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoTestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // uint32 sleep_time = 3;
  if (this->sleep_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sleep_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoTestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoTestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoTestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoTestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoTestResponse)
    MergeFrom(*source);
  }
}

void ProtoTestResponse::MergeFrom(const ProtoTestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
  if (from.sleep_time() != 0) {
    _internal_set_sleep_time(from._internal_sleep_time());
  }
}

void ProtoTestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTestResponse::CopyFrom(const ProtoTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTestResponse::IsInitialized() const {
  return true;
}

void ProtoTestResponse::InternalSwap(ProtoTestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoTestResponse, sleep_time_)
      + sizeof(ProtoTestResponse::sleep_time_)
      - PROTOBUF_FIELD_OFFSET(ProtoTestResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoTestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AnotherMessage* Arena::CreateMaybeMessage< ::AnotherMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AnotherMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::MyMessage* Arena::CreateMaybeMessage< ::MyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoTest_MapScalarEntry_DoNotUse* Arena::CreateMaybeMessage< ::ProtoTest_MapScalarEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoTest_MapScalarEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoTest_MapMsgEntry_DoNotUse* Arena::CreateMaybeMessage< ::ProtoTest_MapMsgEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoTest_MapMsgEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoTest* Arena::CreateMaybeMessage< ::ProtoTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoTest >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoTestRequest* Arena::CreateMaybeMessage< ::ProtoTestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoTestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoTestResponse* Arena::CreateMaybeMessage< ::ProtoTestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoTestResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
