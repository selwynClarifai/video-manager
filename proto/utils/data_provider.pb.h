// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/data_provider.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fdata_5fprovider_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fdata_5fprovider_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2fdata_5fprovider_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[34]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fdata_5fprovider_2eproto;
class AffineTransform;
class AffineTransformDefaultTypeInternal;
extern AffineTransformDefaultTypeInternal _AffineTransform_default_instance_;
class AspectRatioTransform;
class AspectRatioTransformDefaultTypeInternal;
extern AspectRatioTransformDefaultTypeInternal _AspectRatioTransform_default_instance_;
class AudioMFCCTransform;
class AudioMFCCTransformDefaultTypeInternal;
extern AudioMFCCTransformDefaultTypeInternal _AudioMFCCTransform_default_instance_;
class ColorTransform;
class ColorTransformDefaultTypeInternal;
extern ColorTransformDefaultTypeInternal _ColorTransform_default_instance_;
class DataProviderParams;
class DataProviderParamsDefaultTypeInternal;
extern DataProviderParamsDefaultTypeInternal _DataProviderParams_default_instance_;
class DistortionTransform;
class DistortionTransformDefaultTypeInternal;
extern DistortionTransformDefaultTypeInternal _DistortionTransform_default_instance_;
class FakeBoxes;
class FakeBoxesDefaultTypeInternal;
extern FakeBoxesDefaultTypeInternal _FakeBoxes_default_instance_;
class FilterBbox;
class FilterBboxDefaultTypeInternal;
extern FilterBboxDefaultTypeInternal _FilterBbox_default_instance_;
class FilterInvalidItems;
class FilterInvalidItemsDefaultTypeInternal;
extern FilterInvalidItemsDefaultTypeInternal _FilterInvalidItems_default_instance_;
class FlipTransform;
class FlipTransformDefaultTypeInternal;
extern FlipTransformDefaultTypeInternal _FlipTransform_default_instance_;
class ImageCropTransform;
class ImageCropTransformDefaultTypeInternal;
extern ImageCropTransformDefaultTypeInternal _ImageCropTransform_default_instance_;
class JPEGRecompression;
class JPEGRecompressionDefaultTypeInternal;
extern JPEGRecompressionDefaultTypeInternal _JPEGRecompression_default_instance_;
class LabelDropper;
class LabelDropperDefaultTypeInternal;
extern LabelDropperDefaultTypeInternal _LabelDropper_default_instance_;
class LabelMapper;
class LabelMapperDefaultTypeInternal;
extern LabelMapperDefaultTypeInternal _LabelMapper_default_instance_;
class LabelMapper_CatidMapEntry_DoNotUse;
class LabelMapper_CatidMapEntry_DoNotUseDefaultTypeInternal;
extern LabelMapper_CatidMapEntry_DoNotUseDefaultTypeInternal _LabelMapper_CatidMapEntry_DoNotUse_default_instance_;
class LabelSetter;
class LabelSetterDefaultTypeInternal;
extern LabelSetterDefaultTypeInternal _LabelSetter_default_instance_;
class LabelSmoother;
class LabelSmootherDefaultTypeInternal;
extern LabelSmootherDefaultTypeInternal _LabelSmoother_default_instance_;
class LabelWeight;
class LabelWeightDefaultTypeInternal;
extern LabelWeightDefaultTypeInternal _LabelWeight_default_instance_;
class LabelWeight_CatidConstWeightsEntry_DoNotUse;
class LabelWeight_CatidConstWeightsEntry_DoNotUseDefaultTypeInternal;
extern LabelWeight_CatidConstWeightsEntry_DoNotUseDefaultTypeInternal _LabelWeight_CatidConstWeightsEntry_DoNotUse_default_instance_;
class LabelsFromBboxes;
class LabelsFromBboxesDefaultTypeInternal;
extern LabelsFromBboxesDefaultTypeInternal _LabelsFromBboxes_default_instance_;
class LandmarkAlignTransform;
class LandmarkAlignTransformDefaultTypeInternal;
extern LandmarkAlignTransformDefaultTypeInternal _LandmarkAlignTransform_default_instance_;
class LogoDataParams;
class LogoDataParamsDefaultTypeInternal;
extern LogoDataParamsDefaultTypeInternal _LogoDataParams_default_instance_;
class MaxNumLabelDropper;
class MaxNumLabelDropperDefaultTypeInternal;
extern MaxNumLabelDropperDefaultTypeInternal _MaxNumLabelDropper_default_instance_;
class MiniBatchItemStage;
class MiniBatchItemStageDefaultTypeInternal;
extern MiniBatchItemStageDefaultTypeInternal _MiniBatchItemStage_default_instance_;
class MultiDataset;
class MultiDatasetDefaultTypeInternal;
extern MultiDatasetDefaultTypeInternal _MultiDataset_default_instance_;
class OCRCropTransform;
class OCRCropTransformDefaultTypeInternal;
extern OCRCropTransformDefaultTypeInternal _OCRCropTransform_default_instance_;
class ProcessingParams;
class ProcessingParamsDefaultTypeInternal;
extern ProcessingParamsDefaultTypeInternal _ProcessingParams_default_instance_;
class RelativeCropTransform;
class RelativeCropTransformDefaultTypeInternal;
extern RelativeCropTransformDefaultTypeInternal _RelativeCropTransform_default_instance_;
class SSDRandomCropOperation;
class SSDRandomCropOperationDefaultTypeInternal;
extern SSDRandomCropOperationDefaultTypeInternal _SSDRandomCropOperation_default_instance_;
class SavedOutputParams;
class SavedOutputParamsDefaultTypeInternal;
extern SavedOutputParamsDefaultTypeInternal _SavedOutputParams_default_instance_;
class ScaleTransform;
class ScaleTransformDefaultTypeInternal;
extern ScaleTransformDefaultTypeInternal _ScaleTransform_default_instance_;
class TokenIndexer;
class TokenIndexerDefaultTypeInternal;
extern TokenIndexerDefaultTypeInternal _TokenIndexer_default_instance_;
class WhitespaceTokenizer;
class WhitespaceTokenizerDefaultTypeInternal;
extern WhitespaceTokenizerDefaultTypeInternal _WhitespaceTokenizer_default_instance_;
class gRPCReaderParams;
class gRPCReaderParamsDefaultTypeInternal;
extern gRPCReaderParamsDefaultTypeInternal _gRPCReaderParams_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AffineTransform* Arena::CreateMaybeMessage<::AffineTransform>(Arena*);
template<> ::AspectRatioTransform* Arena::CreateMaybeMessage<::AspectRatioTransform>(Arena*);
template<> ::AudioMFCCTransform* Arena::CreateMaybeMessage<::AudioMFCCTransform>(Arena*);
template<> ::ColorTransform* Arena::CreateMaybeMessage<::ColorTransform>(Arena*);
template<> ::DataProviderParams* Arena::CreateMaybeMessage<::DataProviderParams>(Arena*);
template<> ::DistortionTransform* Arena::CreateMaybeMessage<::DistortionTransform>(Arena*);
template<> ::FakeBoxes* Arena::CreateMaybeMessage<::FakeBoxes>(Arena*);
template<> ::FilterBbox* Arena::CreateMaybeMessage<::FilterBbox>(Arena*);
template<> ::FilterInvalidItems* Arena::CreateMaybeMessage<::FilterInvalidItems>(Arena*);
template<> ::FlipTransform* Arena::CreateMaybeMessage<::FlipTransform>(Arena*);
template<> ::ImageCropTransform* Arena::CreateMaybeMessage<::ImageCropTransform>(Arena*);
template<> ::JPEGRecompression* Arena::CreateMaybeMessage<::JPEGRecompression>(Arena*);
template<> ::LabelDropper* Arena::CreateMaybeMessage<::LabelDropper>(Arena*);
template<> ::LabelMapper* Arena::CreateMaybeMessage<::LabelMapper>(Arena*);
template<> ::LabelMapper_CatidMapEntry_DoNotUse* Arena::CreateMaybeMessage<::LabelMapper_CatidMapEntry_DoNotUse>(Arena*);
template<> ::LabelSetter* Arena::CreateMaybeMessage<::LabelSetter>(Arena*);
template<> ::LabelSmoother* Arena::CreateMaybeMessage<::LabelSmoother>(Arena*);
template<> ::LabelWeight* Arena::CreateMaybeMessage<::LabelWeight>(Arena*);
template<> ::LabelWeight_CatidConstWeightsEntry_DoNotUse* Arena::CreateMaybeMessage<::LabelWeight_CatidConstWeightsEntry_DoNotUse>(Arena*);
template<> ::LabelsFromBboxes* Arena::CreateMaybeMessage<::LabelsFromBboxes>(Arena*);
template<> ::LandmarkAlignTransform* Arena::CreateMaybeMessage<::LandmarkAlignTransform>(Arena*);
template<> ::LogoDataParams* Arena::CreateMaybeMessage<::LogoDataParams>(Arena*);
template<> ::MaxNumLabelDropper* Arena::CreateMaybeMessage<::MaxNumLabelDropper>(Arena*);
template<> ::MiniBatchItemStage* Arena::CreateMaybeMessage<::MiniBatchItemStage>(Arena*);
template<> ::MultiDataset* Arena::CreateMaybeMessage<::MultiDataset>(Arena*);
template<> ::OCRCropTransform* Arena::CreateMaybeMessage<::OCRCropTransform>(Arena*);
template<> ::ProcessingParams* Arena::CreateMaybeMessage<::ProcessingParams>(Arena*);
template<> ::RelativeCropTransform* Arena::CreateMaybeMessage<::RelativeCropTransform>(Arena*);
template<> ::SSDRandomCropOperation* Arena::CreateMaybeMessage<::SSDRandomCropOperation>(Arena*);
template<> ::SavedOutputParams* Arena::CreateMaybeMessage<::SavedOutputParams>(Arena*);
template<> ::ScaleTransform* Arena::CreateMaybeMessage<::ScaleTransform>(Arena*);
template<> ::TokenIndexer* Arena::CreateMaybeMessage<::TokenIndexer>(Arena*);
template<> ::WhitespaceTokenizer* Arena::CreateMaybeMessage<::WhitespaceTokenizer>(Arena*);
template<> ::gRPCReaderParams* Arena::CreateMaybeMessage<::gRPCReaderParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum RelativeCropTransform_FallbackMode : int {
  RelativeCropTransform_FallbackMode_ORIG_IMAGE = 0,
  RelativeCropTransform_FallbackMode_CROP = 1,
  RelativeCropTransform_FallbackMode_DISCARD = 2,
  RelativeCropTransform_FallbackMode_RelativeCropTransform_FallbackMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RelativeCropTransform_FallbackMode_RelativeCropTransform_FallbackMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RelativeCropTransform_FallbackMode_IsValid(int value);
constexpr RelativeCropTransform_FallbackMode RelativeCropTransform_FallbackMode_FallbackMode_MIN = RelativeCropTransform_FallbackMode_ORIG_IMAGE;
constexpr RelativeCropTransform_FallbackMode RelativeCropTransform_FallbackMode_FallbackMode_MAX = RelativeCropTransform_FallbackMode_DISCARD;
constexpr int RelativeCropTransform_FallbackMode_FallbackMode_ARRAYSIZE = RelativeCropTransform_FallbackMode_FallbackMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelativeCropTransform_FallbackMode_descriptor();
template<typename T>
inline const std::string& RelativeCropTransform_FallbackMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RelativeCropTransform_FallbackMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RelativeCropTransform_FallbackMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RelativeCropTransform_FallbackMode_descriptor(), enum_t_value);
}
inline bool RelativeCropTransform_FallbackMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RelativeCropTransform_FallbackMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RelativeCropTransform_FallbackMode>(
    RelativeCropTransform_FallbackMode_descriptor(), name, value);
}
// ===================================================================

class DataProviderParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataProviderParams) */ {
 public:
  inline DataProviderParams() : DataProviderParams(nullptr) {}
  virtual ~DataProviderParams();

  DataProviderParams(const DataProviderParams& from);
  DataProviderParams(DataProviderParams&& from) noexcept
    : DataProviderParams() {
    *this = ::std::move(from);
  }

  inline DataProviderParams& operator=(const DataProviderParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataProviderParams& operator=(DataProviderParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataProviderParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataProviderParams* internal_default_instance() {
    return reinterpret_cast<const DataProviderParams*>(
               &_DataProviderParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataProviderParams& a, DataProviderParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DataProviderParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataProviderParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataProviderParams* New() const final {
    return CreateMaybeMessage<DataProviderParams>(nullptr);
  }

  DataProviderParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataProviderParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataProviderParams& from);
  void MergeFrom(const DataProviderParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataProviderParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataProviderParams";
  }
  protected:
  explicit DataProviderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiDatasetFieldNumber = 4,
    kLabelSetterFieldNumber = 5,
    kLabelMapperFieldNumber = 6,
    kMbitemStageFieldNumber = 20,
    kServingMbitemStageFieldNumber = 23,
    kProcessingParamsFieldNumber = 1,
    kImageCropTransformFieldNumber = 2,
    kSavedOutputFieldNumber = 3,
    kLabelSmootherFieldNumber = 7,
    kLabelDropperFieldNumber = 8,
    kMaxNumLabelDropperFieldNumber = 9,
    kLabelWeightFieldNumber = 10,
    kSsdRandomCropFieldNumber = 11,
    kRelativeCropTransformFieldNumber = 12,
    kAffineTransformFieldNumber = 13,
    kColorTransformFieldNumber = 14,
    kFilterBboxFieldNumber = 15,
    kLogoDataFieldNumber = 16,
    kAspectRatioTransformFieldNumber = 17,
    kFlipTransformFieldNumber = 18,
    kJpegRecompressionFieldNumber = 19,
    kGrpcReaderParamsFieldNumber = 22,
    kFakeBoxesFieldNumber = 24,
    kFilterInvalidItemsFieldNumber = 25,
    kNumGrpcReadersFieldNumber = 21,
  };
  // repeated .MultiDataset multi_dataset = 4 [deprecated = true];
  PROTOBUF_DEPRECATED int multi_dataset_size() const;
  private:
  int _internal_multi_dataset_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_multi_dataset();
  PROTOBUF_DEPRECATED ::MultiDataset* mutable_multi_dataset(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MultiDataset >*
      mutable_multi_dataset();
  private:
  const ::MultiDataset& _internal_multi_dataset(int index) const;
  ::MultiDataset* _internal_add_multi_dataset();
  public:
  PROTOBUF_DEPRECATED const ::MultiDataset& multi_dataset(int index) const;
  PROTOBUF_DEPRECATED ::MultiDataset* add_multi_dataset();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MultiDataset >&
      multi_dataset() const;

  // repeated .LabelSetter label_setter = 5 [deprecated = true];
  PROTOBUF_DEPRECATED int label_setter_size() const;
  private:
  int _internal_label_setter_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_label_setter();
  PROTOBUF_DEPRECATED ::LabelSetter* mutable_label_setter(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelSetter >*
      mutable_label_setter();
  private:
  const ::LabelSetter& _internal_label_setter(int index) const;
  ::LabelSetter* _internal_add_label_setter();
  public:
  PROTOBUF_DEPRECATED const ::LabelSetter& label_setter(int index) const;
  PROTOBUF_DEPRECATED ::LabelSetter* add_label_setter();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelSetter >&
      label_setter() const;

  // repeated .LabelMapper label_mapper = 6 [deprecated = true];
  PROTOBUF_DEPRECATED int label_mapper_size() const;
  private:
  int _internal_label_mapper_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_label_mapper();
  PROTOBUF_DEPRECATED ::LabelMapper* mutable_label_mapper(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelMapper >*
      mutable_label_mapper();
  private:
  const ::LabelMapper& _internal_label_mapper(int index) const;
  ::LabelMapper* _internal_add_label_mapper();
  public:
  PROTOBUF_DEPRECATED const ::LabelMapper& label_mapper(int index) const;
  PROTOBUF_DEPRECATED ::LabelMapper* add_label_mapper();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelMapper >&
      label_mapper() const;

  // repeated .MiniBatchItemStage mbitem_stage = 20;
  int mbitem_stage_size() const;
  private:
  int _internal_mbitem_stage_size() const;
  public:
  void clear_mbitem_stage();
  ::MiniBatchItemStage* mutable_mbitem_stage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MiniBatchItemStage >*
      mutable_mbitem_stage();
  private:
  const ::MiniBatchItemStage& _internal_mbitem_stage(int index) const;
  ::MiniBatchItemStage* _internal_add_mbitem_stage();
  public:
  const ::MiniBatchItemStage& mbitem_stage(int index) const;
  ::MiniBatchItemStage* add_mbitem_stage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MiniBatchItemStage >&
      mbitem_stage() const;

  // repeated .MiniBatchItemStage serving_mbitem_stage = 23;
  int serving_mbitem_stage_size() const;
  private:
  int _internal_serving_mbitem_stage_size() const;
  public:
  void clear_serving_mbitem_stage();
  ::MiniBatchItemStage* mutable_serving_mbitem_stage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MiniBatchItemStage >*
      mutable_serving_mbitem_stage();
  private:
  const ::MiniBatchItemStage& _internal_serving_mbitem_stage(int index) const;
  ::MiniBatchItemStage* _internal_add_serving_mbitem_stage();
  public:
  const ::MiniBatchItemStage& serving_mbitem_stage(int index) const;
  ::MiniBatchItemStage* add_serving_mbitem_stage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MiniBatchItemStage >&
      serving_mbitem_stage() const;

  // .ProcessingParams processing_params = 1;
  bool has_processing_params() const;
  private:
  bool _internal_has_processing_params() const;
  public:
  void clear_processing_params();
  const ::ProcessingParams& processing_params() const;
  ::ProcessingParams* release_processing_params();
  ::ProcessingParams* mutable_processing_params();
  void set_allocated_processing_params(::ProcessingParams* processing_params);
  private:
  const ::ProcessingParams& _internal_processing_params() const;
  ::ProcessingParams* _internal_mutable_processing_params();
  public:
  void unsafe_arena_set_allocated_processing_params(
      ::ProcessingParams* processing_params);
  ::ProcessingParams* unsafe_arena_release_processing_params();

  // .ImageCropTransform image_crop_transform = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_image_crop_transform() const;
  private:
  bool _internal_has_image_crop_transform() const;
  public:
  PROTOBUF_DEPRECATED void clear_image_crop_transform();
  PROTOBUF_DEPRECATED const ::ImageCropTransform& image_crop_transform() const;
  PROTOBUF_DEPRECATED ::ImageCropTransform* release_image_crop_transform();
  PROTOBUF_DEPRECATED ::ImageCropTransform* mutable_image_crop_transform();
  PROTOBUF_DEPRECATED void set_allocated_image_crop_transform(::ImageCropTransform* image_crop_transform);
  private:
  const ::ImageCropTransform& _internal_image_crop_transform() const;
  ::ImageCropTransform* _internal_mutable_image_crop_transform();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_image_crop_transform(
      ::ImageCropTransform* image_crop_transform);
  PROTOBUF_DEPRECATED ::ImageCropTransform* unsafe_arena_release_image_crop_transform();

  // .SavedOutputParams saved_output = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_saved_output() const;
  private:
  bool _internal_has_saved_output() const;
  public:
  PROTOBUF_DEPRECATED void clear_saved_output();
  PROTOBUF_DEPRECATED const ::SavedOutputParams& saved_output() const;
  PROTOBUF_DEPRECATED ::SavedOutputParams* release_saved_output();
  PROTOBUF_DEPRECATED ::SavedOutputParams* mutable_saved_output();
  PROTOBUF_DEPRECATED void set_allocated_saved_output(::SavedOutputParams* saved_output);
  private:
  const ::SavedOutputParams& _internal_saved_output() const;
  ::SavedOutputParams* _internal_mutable_saved_output();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_saved_output(
      ::SavedOutputParams* saved_output);
  PROTOBUF_DEPRECATED ::SavedOutputParams* unsafe_arena_release_saved_output();

  // .LabelSmoother label_smoother = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_label_smoother() const;
  private:
  bool _internal_has_label_smoother() const;
  public:
  PROTOBUF_DEPRECATED void clear_label_smoother();
  PROTOBUF_DEPRECATED const ::LabelSmoother& label_smoother() const;
  PROTOBUF_DEPRECATED ::LabelSmoother* release_label_smoother();
  PROTOBUF_DEPRECATED ::LabelSmoother* mutable_label_smoother();
  PROTOBUF_DEPRECATED void set_allocated_label_smoother(::LabelSmoother* label_smoother);
  private:
  const ::LabelSmoother& _internal_label_smoother() const;
  ::LabelSmoother* _internal_mutable_label_smoother();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_label_smoother(
      ::LabelSmoother* label_smoother);
  PROTOBUF_DEPRECATED ::LabelSmoother* unsafe_arena_release_label_smoother();

  // .LabelDropper label_dropper = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_label_dropper() const;
  private:
  bool _internal_has_label_dropper() const;
  public:
  PROTOBUF_DEPRECATED void clear_label_dropper();
  PROTOBUF_DEPRECATED const ::LabelDropper& label_dropper() const;
  PROTOBUF_DEPRECATED ::LabelDropper* release_label_dropper();
  PROTOBUF_DEPRECATED ::LabelDropper* mutable_label_dropper();
  PROTOBUF_DEPRECATED void set_allocated_label_dropper(::LabelDropper* label_dropper);
  private:
  const ::LabelDropper& _internal_label_dropper() const;
  ::LabelDropper* _internal_mutable_label_dropper();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_label_dropper(
      ::LabelDropper* label_dropper);
  PROTOBUF_DEPRECATED ::LabelDropper* unsafe_arena_release_label_dropper();

  // .MaxNumLabelDropper max_num_label_dropper = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_max_num_label_dropper() const;
  private:
  bool _internal_has_max_num_label_dropper() const;
  public:
  PROTOBUF_DEPRECATED void clear_max_num_label_dropper();
  PROTOBUF_DEPRECATED const ::MaxNumLabelDropper& max_num_label_dropper() const;
  PROTOBUF_DEPRECATED ::MaxNumLabelDropper* release_max_num_label_dropper();
  PROTOBUF_DEPRECATED ::MaxNumLabelDropper* mutable_max_num_label_dropper();
  PROTOBUF_DEPRECATED void set_allocated_max_num_label_dropper(::MaxNumLabelDropper* max_num_label_dropper);
  private:
  const ::MaxNumLabelDropper& _internal_max_num_label_dropper() const;
  ::MaxNumLabelDropper* _internal_mutable_max_num_label_dropper();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_max_num_label_dropper(
      ::MaxNumLabelDropper* max_num_label_dropper);
  PROTOBUF_DEPRECATED ::MaxNumLabelDropper* unsafe_arena_release_max_num_label_dropper();

  // .LabelWeight label_weight = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_label_weight() const;
  private:
  bool _internal_has_label_weight() const;
  public:
  PROTOBUF_DEPRECATED void clear_label_weight();
  PROTOBUF_DEPRECATED const ::LabelWeight& label_weight() const;
  PROTOBUF_DEPRECATED ::LabelWeight* release_label_weight();
  PROTOBUF_DEPRECATED ::LabelWeight* mutable_label_weight();
  PROTOBUF_DEPRECATED void set_allocated_label_weight(::LabelWeight* label_weight);
  private:
  const ::LabelWeight& _internal_label_weight() const;
  ::LabelWeight* _internal_mutable_label_weight();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_label_weight(
      ::LabelWeight* label_weight);
  PROTOBUF_DEPRECATED ::LabelWeight* unsafe_arena_release_label_weight();

  // .SSDRandomCropOperation ssd_random_crop = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_ssd_random_crop() const;
  private:
  bool _internal_has_ssd_random_crop() const;
  public:
  PROTOBUF_DEPRECATED void clear_ssd_random_crop();
  PROTOBUF_DEPRECATED const ::SSDRandomCropOperation& ssd_random_crop() const;
  PROTOBUF_DEPRECATED ::SSDRandomCropOperation* release_ssd_random_crop();
  PROTOBUF_DEPRECATED ::SSDRandomCropOperation* mutable_ssd_random_crop();
  PROTOBUF_DEPRECATED void set_allocated_ssd_random_crop(::SSDRandomCropOperation* ssd_random_crop);
  private:
  const ::SSDRandomCropOperation& _internal_ssd_random_crop() const;
  ::SSDRandomCropOperation* _internal_mutable_ssd_random_crop();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_ssd_random_crop(
      ::SSDRandomCropOperation* ssd_random_crop);
  PROTOBUF_DEPRECATED ::SSDRandomCropOperation* unsafe_arena_release_ssd_random_crop();

  // .RelativeCropTransform relative_crop_transform = 12 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_relative_crop_transform() const;
  private:
  bool _internal_has_relative_crop_transform() const;
  public:
  PROTOBUF_DEPRECATED void clear_relative_crop_transform();
  PROTOBUF_DEPRECATED const ::RelativeCropTransform& relative_crop_transform() const;
  PROTOBUF_DEPRECATED ::RelativeCropTransform* release_relative_crop_transform();
  PROTOBUF_DEPRECATED ::RelativeCropTransform* mutable_relative_crop_transform();
  PROTOBUF_DEPRECATED void set_allocated_relative_crop_transform(::RelativeCropTransform* relative_crop_transform);
  private:
  const ::RelativeCropTransform& _internal_relative_crop_transform() const;
  ::RelativeCropTransform* _internal_mutable_relative_crop_transform();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_relative_crop_transform(
      ::RelativeCropTransform* relative_crop_transform);
  PROTOBUF_DEPRECATED ::RelativeCropTransform* unsafe_arena_release_relative_crop_transform();

  // .AffineTransform affine_transform = 13 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_affine_transform() const;
  private:
  bool _internal_has_affine_transform() const;
  public:
  PROTOBUF_DEPRECATED void clear_affine_transform();
  PROTOBUF_DEPRECATED const ::AffineTransform& affine_transform() const;
  PROTOBUF_DEPRECATED ::AffineTransform* release_affine_transform();
  PROTOBUF_DEPRECATED ::AffineTransform* mutable_affine_transform();
  PROTOBUF_DEPRECATED void set_allocated_affine_transform(::AffineTransform* affine_transform);
  private:
  const ::AffineTransform& _internal_affine_transform() const;
  ::AffineTransform* _internal_mutable_affine_transform();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_affine_transform(
      ::AffineTransform* affine_transform);
  PROTOBUF_DEPRECATED ::AffineTransform* unsafe_arena_release_affine_transform();

  // .ColorTransform color_transform = 14 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_color_transform() const;
  private:
  bool _internal_has_color_transform() const;
  public:
  PROTOBUF_DEPRECATED void clear_color_transform();
  PROTOBUF_DEPRECATED const ::ColorTransform& color_transform() const;
  PROTOBUF_DEPRECATED ::ColorTransform* release_color_transform();
  PROTOBUF_DEPRECATED ::ColorTransform* mutable_color_transform();
  PROTOBUF_DEPRECATED void set_allocated_color_transform(::ColorTransform* color_transform);
  private:
  const ::ColorTransform& _internal_color_transform() const;
  ::ColorTransform* _internal_mutable_color_transform();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_color_transform(
      ::ColorTransform* color_transform);
  PROTOBUF_DEPRECATED ::ColorTransform* unsafe_arena_release_color_transform();

  // .FilterBbox filter_bbox = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_filter_bbox() const;
  private:
  bool _internal_has_filter_bbox() const;
  public:
  PROTOBUF_DEPRECATED void clear_filter_bbox();
  PROTOBUF_DEPRECATED const ::FilterBbox& filter_bbox() const;
  PROTOBUF_DEPRECATED ::FilterBbox* release_filter_bbox();
  PROTOBUF_DEPRECATED ::FilterBbox* mutable_filter_bbox();
  PROTOBUF_DEPRECATED void set_allocated_filter_bbox(::FilterBbox* filter_bbox);
  private:
  const ::FilterBbox& _internal_filter_bbox() const;
  ::FilterBbox* _internal_mutable_filter_bbox();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_filter_bbox(
      ::FilterBbox* filter_bbox);
  PROTOBUF_DEPRECATED ::FilterBbox* unsafe_arena_release_filter_bbox();

  // .LogoDataParams logo_data = 16;
  bool has_logo_data() const;
  private:
  bool _internal_has_logo_data() const;
  public:
  void clear_logo_data();
  const ::LogoDataParams& logo_data() const;
  ::LogoDataParams* release_logo_data();
  ::LogoDataParams* mutable_logo_data();
  void set_allocated_logo_data(::LogoDataParams* logo_data);
  private:
  const ::LogoDataParams& _internal_logo_data() const;
  ::LogoDataParams* _internal_mutable_logo_data();
  public:
  void unsafe_arena_set_allocated_logo_data(
      ::LogoDataParams* logo_data);
  ::LogoDataParams* unsafe_arena_release_logo_data();

  // .AspectRatioTransform aspect_ratio_transform = 17 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_aspect_ratio_transform() const;
  private:
  bool _internal_has_aspect_ratio_transform() const;
  public:
  PROTOBUF_DEPRECATED void clear_aspect_ratio_transform();
  PROTOBUF_DEPRECATED const ::AspectRatioTransform& aspect_ratio_transform() const;
  PROTOBUF_DEPRECATED ::AspectRatioTransform* release_aspect_ratio_transform();
  PROTOBUF_DEPRECATED ::AspectRatioTransform* mutable_aspect_ratio_transform();
  PROTOBUF_DEPRECATED void set_allocated_aspect_ratio_transform(::AspectRatioTransform* aspect_ratio_transform);
  private:
  const ::AspectRatioTransform& _internal_aspect_ratio_transform() const;
  ::AspectRatioTransform* _internal_mutable_aspect_ratio_transform();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_aspect_ratio_transform(
      ::AspectRatioTransform* aspect_ratio_transform);
  PROTOBUF_DEPRECATED ::AspectRatioTransform* unsafe_arena_release_aspect_ratio_transform();

  // .FlipTransform flip_transform = 18 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_flip_transform() const;
  private:
  bool _internal_has_flip_transform() const;
  public:
  PROTOBUF_DEPRECATED void clear_flip_transform();
  PROTOBUF_DEPRECATED const ::FlipTransform& flip_transform() const;
  PROTOBUF_DEPRECATED ::FlipTransform* release_flip_transform();
  PROTOBUF_DEPRECATED ::FlipTransform* mutable_flip_transform();
  PROTOBUF_DEPRECATED void set_allocated_flip_transform(::FlipTransform* flip_transform);
  private:
  const ::FlipTransform& _internal_flip_transform() const;
  ::FlipTransform* _internal_mutable_flip_transform();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_flip_transform(
      ::FlipTransform* flip_transform);
  PROTOBUF_DEPRECATED ::FlipTransform* unsafe_arena_release_flip_transform();

  // .JPEGRecompression jpeg_recompression = 19 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_jpeg_recompression() const;
  private:
  bool _internal_has_jpeg_recompression() const;
  public:
  PROTOBUF_DEPRECATED void clear_jpeg_recompression();
  PROTOBUF_DEPRECATED const ::JPEGRecompression& jpeg_recompression() const;
  PROTOBUF_DEPRECATED ::JPEGRecompression* release_jpeg_recompression();
  PROTOBUF_DEPRECATED ::JPEGRecompression* mutable_jpeg_recompression();
  PROTOBUF_DEPRECATED void set_allocated_jpeg_recompression(::JPEGRecompression* jpeg_recompression);
  private:
  const ::JPEGRecompression& _internal_jpeg_recompression() const;
  ::JPEGRecompression* _internal_mutable_jpeg_recompression();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_jpeg_recompression(
      ::JPEGRecompression* jpeg_recompression);
  PROTOBUF_DEPRECATED ::JPEGRecompression* unsafe_arena_release_jpeg_recompression();

  // .gRPCReaderParams grpc_reader_params = 22 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_grpc_reader_params() const;
  private:
  bool _internal_has_grpc_reader_params() const;
  public:
  PROTOBUF_DEPRECATED void clear_grpc_reader_params();
  PROTOBUF_DEPRECATED const ::gRPCReaderParams& grpc_reader_params() const;
  PROTOBUF_DEPRECATED ::gRPCReaderParams* release_grpc_reader_params();
  PROTOBUF_DEPRECATED ::gRPCReaderParams* mutable_grpc_reader_params();
  PROTOBUF_DEPRECATED void set_allocated_grpc_reader_params(::gRPCReaderParams* grpc_reader_params);
  private:
  const ::gRPCReaderParams& _internal_grpc_reader_params() const;
  ::gRPCReaderParams* _internal_mutable_grpc_reader_params();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_grpc_reader_params(
      ::gRPCReaderParams* grpc_reader_params);
  PROTOBUF_DEPRECATED ::gRPCReaderParams* unsafe_arena_release_grpc_reader_params();

  // .FakeBoxes fake_boxes = 24;
  bool has_fake_boxes() const;
  private:
  bool _internal_has_fake_boxes() const;
  public:
  void clear_fake_boxes();
  const ::FakeBoxes& fake_boxes() const;
  ::FakeBoxes* release_fake_boxes();
  ::FakeBoxes* mutable_fake_boxes();
  void set_allocated_fake_boxes(::FakeBoxes* fake_boxes);
  private:
  const ::FakeBoxes& _internal_fake_boxes() const;
  ::FakeBoxes* _internal_mutable_fake_boxes();
  public:
  void unsafe_arena_set_allocated_fake_boxes(
      ::FakeBoxes* fake_boxes);
  ::FakeBoxes* unsafe_arena_release_fake_boxes();

  // .FilterInvalidItems filter_invalid_items = 25;
  bool has_filter_invalid_items() const;
  private:
  bool _internal_has_filter_invalid_items() const;
  public:
  void clear_filter_invalid_items();
  const ::FilterInvalidItems& filter_invalid_items() const;
  ::FilterInvalidItems* release_filter_invalid_items();
  ::FilterInvalidItems* mutable_filter_invalid_items();
  void set_allocated_filter_invalid_items(::FilterInvalidItems* filter_invalid_items);
  private:
  const ::FilterInvalidItems& _internal_filter_invalid_items() const;
  ::FilterInvalidItems* _internal_mutable_filter_invalid_items();
  public:
  void unsafe_arena_set_allocated_filter_invalid_items(
      ::FilterInvalidItems* filter_invalid_items);
  ::FilterInvalidItems* unsafe_arena_release_filter_invalid_items();

  // int32 num_grpc_readers = 21 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_num_grpc_readers();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 num_grpc_readers() const;
  PROTOBUF_DEPRECATED void set_num_grpc_readers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_grpc_readers() const;
  void _internal_set_num_grpc_readers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DataProviderParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MultiDataset > multi_dataset_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelSetter > label_setter_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelMapper > label_mapper_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MiniBatchItemStage > mbitem_stage_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MiniBatchItemStage > serving_mbitem_stage_;
  ::ProcessingParams* processing_params_;
  ::ImageCropTransform* image_crop_transform_;
  ::SavedOutputParams* saved_output_;
  ::LabelSmoother* label_smoother_;
  ::LabelDropper* label_dropper_;
  ::MaxNumLabelDropper* max_num_label_dropper_;
  ::LabelWeight* label_weight_;
  ::SSDRandomCropOperation* ssd_random_crop_;
  ::RelativeCropTransform* relative_crop_transform_;
  ::AffineTransform* affine_transform_;
  ::ColorTransform* color_transform_;
  ::FilterBbox* filter_bbox_;
  ::LogoDataParams* logo_data_;
  ::AspectRatioTransform* aspect_ratio_transform_;
  ::FlipTransform* flip_transform_;
  ::JPEGRecompression* jpeg_recompression_;
  ::gRPCReaderParams* grpc_reader_params_;
  ::FakeBoxes* fake_boxes_;
  ::FilterInvalidItems* filter_invalid_items_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_grpc_readers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class ProcessingParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcessingParams) */ {
 public:
  inline ProcessingParams() : ProcessingParams(nullptr) {}
  virtual ~ProcessingParams();

  ProcessingParams(const ProcessingParams& from);
  ProcessingParams(ProcessingParams&& from) noexcept
    : ProcessingParams() {
    *this = ::std::move(from);
  }

  inline ProcessingParams& operator=(const ProcessingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessingParams& operator=(ProcessingParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessingParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessingParams* internal_default_instance() {
    return reinterpret_cast<const ProcessingParams*>(
               &_ProcessingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessingParams& a, ProcessingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessingParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessingParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessingParams* New() const final {
    return CreateMaybeMessage<ProcessingParams>(nullptr);
  }

  ProcessingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessingParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessingParams& from);
  void MergeFrom(const ProcessingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessingParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcessingParams";
  }
  protected:
  explicit ProcessingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredOutputFieldsFieldNumber = 8,
    kReaderThreadsFieldNumber = 2,
    kWorkerThreadsFieldNumber = 3,
    kMinibatchSizeFieldNumber = 4,
    kReadersKeepEmptyFieldNumber = 1,
    kContinuousFieldNumber = 5,
    kShuffleFieldNumber = 6,
    kNumItemsPerEpochFieldNumber = 7,
    kQueueSizeFieldNumber = 9,
  };
  // repeated string required_output_fields = 8;
  int required_output_fields_size() const;
  private:
  int _internal_required_output_fields_size() const;
  public:
  void clear_required_output_fields();
  const std::string& required_output_fields(int index) const;
  std::string* mutable_required_output_fields(int index);
  void set_required_output_fields(int index, const std::string& value);
  void set_required_output_fields(int index, std::string&& value);
  void set_required_output_fields(int index, const char* value);
  void set_required_output_fields(int index, const char* value, size_t size);
  std::string* add_required_output_fields();
  void add_required_output_fields(const std::string& value);
  void add_required_output_fields(std::string&& value);
  void add_required_output_fields(const char* value);
  void add_required_output_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& required_output_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_required_output_fields();
  private:
  const std::string& _internal_required_output_fields(int index) const;
  std::string* _internal_add_required_output_fields();
  public:

  // int32 reader_threads = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_reader_threads();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 reader_threads() const;
  PROTOBUF_DEPRECATED void set_reader_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reader_threads() const;
  void _internal_set_reader_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 worker_threads = 3;
  void clear_worker_threads();
  ::PROTOBUF_NAMESPACE_ID::int32 worker_threads() const;
  void set_worker_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_worker_threads() const;
  void _internal_set_worker_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 minibatch_size = 4;
  void clear_minibatch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 minibatch_size() const;
  void set_minibatch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minibatch_size() const;
  void _internal_set_minibatch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool readers_keep_empty = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_readers_keep_empty();
  PROTOBUF_DEPRECATED bool readers_keep_empty() const;
  PROTOBUF_DEPRECATED void set_readers_keep_empty(bool value);
  private:
  bool _internal_readers_keep_empty() const;
  void _internal_set_readers_keep_empty(bool value);
  public:

  // bool continuous = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_continuous();
  PROTOBUF_DEPRECATED bool continuous() const;
  PROTOBUF_DEPRECATED void set_continuous(bool value);
  private:
  bool _internal_continuous() const;
  void _internal_set_continuous(bool value);
  public:

  // bool shuffle = 6;
  void clear_shuffle();
  bool shuffle() const;
  void set_shuffle(bool value);
  private:
  bool _internal_shuffle() const;
  void _internal_set_shuffle(bool value);
  public:

  // int64 num_items_per_epoch = 7;
  void clear_num_items_per_epoch();
  ::PROTOBUF_NAMESPACE_ID::int64 num_items_per_epoch() const;
  void set_num_items_per_epoch(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_items_per_epoch() const;
  void _internal_set_num_items_per_epoch(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 queue_size = 9;
  void clear_queue_size();
  ::PROTOBUF_NAMESPACE_ID::int32 queue_size() const;
  void set_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_queue_size() const;
  void _internal_set_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProcessingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> required_output_fields_;
  ::PROTOBUF_NAMESPACE_ID::int32 reader_threads_;
  ::PROTOBUF_NAMESPACE_ID::int32 worker_threads_;
  ::PROTOBUF_NAMESPACE_ID::int32 minibatch_size_;
  bool readers_keep_empty_;
  bool continuous_;
  bool shuffle_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_items_per_epoch_;
  ::PROTOBUF_NAMESPACE_ID::int32 queue_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class ImageCropTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageCropTransform) */ {
 public:
  inline ImageCropTransform() : ImageCropTransform(nullptr) {}
  virtual ~ImageCropTransform();

  ImageCropTransform(const ImageCropTransform& from);
  ImageCropTransform(ImageCropTransform&& from) noexcept
    : ImageCropTransform() {
    *this = ::std::move(from);
  }

  inline ImageCropTransform& operator=(const ImageCropTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageCropTransform& operator=(ImageCropTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageCropTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageCropTransform* internal_default_instance() {
    return reinterpret_cast<const ImageCropTransform*>(
               &_ImageCropTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ImageCropTransform& a, ImageCropTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageCropTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageCropTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageCropTransform* New() const final {
    return CreateMaybeMessage<ImageCropTransform>(nullptr);
  }

  ImageCropTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageCropTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageCropTransform& from);
  void MergeFrom(const ImageCropTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageCropTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageCropTransform";
  }
  protected:
  explicit ImageCropTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCropSizeFieldNumber = 3,
    kDownsampleSizeFieldNumber = 4,
    kCropTypeFieldNumber = 1,
    kTestCropTypeFieldNumber = 2,
    kCropSizePixelStrideFieldNumber = 5,
    kSkipConvertRgbFieldNumber = 7,
    kSkipResizeFieldNumber = 8,
    kSkipCropFieldNumber = 9,
  };
  // repeated int32 crop_size = 3;
  int crop_size_size() const;
  private:
  int _internal_crop_size_size() const;
  public:
  void clear_crop_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crop_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_crop_size() const;
  void _internal_add_crop_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_crop_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 crop_size(int index) const;
  void set_crop_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_crop_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      crop_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_crop_size();

  // repeated int32 downsample_size = 4;
  int downsample_size_size() const;
  private:
  int _internal_downsample_size_size() const;
  public:
  void clear_downsample_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_downsample_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_downsample_size() const;
  void _internal_add_downsample_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_downsample_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 downsample_size(int index) const;
  void set_downsample_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_downsample_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      downsample_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_downsample_size();

  // string crop_type = 1;
  void clear_crop_type();
  const std::string& crop_type() const;
  void set_crop_type(const std::string& value);
  void set_crop_type(std::string&& value);
  void set_crop_type(const char* value);
  void set_crop_type(const char* value, size_t size);
  std::string* mutable_crop_type();
  std::string* release_crop_type();
  void set_allocated_crop_type(std::string* crop_type);
  private:
  const std::string& _internal_crop_type() const;
  void _internal_set_crop_type(const std::string& value);
  std::string* _internal_mutable_crop_type();
  public:

  // string test_crop_type = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_test_crop_type();
  PROTOBUF_DEPRECATED const std::string& test_crop_type() const;
  PROTOBUF_DEPRECATED void set_test_crop_type(const std::string& value);
  PROTOBUF_DEPRECATED void set_test_crop_type(std::string&& value);
  PROTOBUF_DEPRECATED void set_test_crop_type(const char* value);
  PROTOBUF_DEPRECATED void set_test_crop_type(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_test_crop_type();
  PROTOBUF_DEPRECATED std::string* release_test_crop_type();
  PROTOBUF_DEPRECATED void set_allocated_test_crop_type(std::string* test_crop_type);
  private:
  const std::string& _internal_test_crop_type() const;
  void _internal_set_test_crop_type(const std::string& value);
  std::string* _internal_mutable_test_crop_type();
  public:

  // int32 crop_size_pixel_stride = 5;
  void clear_crop_size_pixel_stride();
  ::PROTOBUF_NAMESPACE_ID::int32 crop_size_pixel_stride() const;
  void set_crop_size_pixel_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crop_size_pixel_stride() const;
  void _internal_set_crop_size_pixel_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool skip_convert_rgb = 7;
  void clear_skip_convert_rgb();
  bool skip_convert_rgb() const;
  void set_skip_convert_rgb(bool value);
  private:
  bool _internal_skip_convert_rgb() const;
  void _internal_set_skip_convert_rgb(bool value);
  public:

  // bool skip_resize = 8;
  void clear_skip_resize();
  bool skip_resize() const;
  void set_skip_resize(bool value);
  private:
  bool _internal_skip_resize() const;
  void _internal_set_skip_resize(bool value);
  public:

  // bool skip_crop = 9;
  void clear_skip_crop();
  bool skip_crop() const;
  void set_skip_crop(bool value);
  private:
  bool _internal_skip_crop() const;
  void _internal_set_skip_crop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ImageCropTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > crop_size_;
  mutable std::atomic<int> _crop_size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > downsample_size_;
  mutable std::atomic<int> _downsample_size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crop_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_crop_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 crop_size_pixel_stride_;
  bool skip_convert_rgb_;
  bool skip_resize_;
  bool skip_crop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class SavedOutputParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SavedOutputParams) */ {
 public:
  inline SavedOutputParams() : SavedOutputParams(nullptr) {}
  virtual ~SavedOutputParams();

  SavedOutputParams(const SavedOutputParams& from);
  SavedOutputParams(SavedOutputParams&& from) noexcept
    : SavedOutputParams() {
    *this = ::std::move(from);
  }

  inline SavedOutputParams& operator=(const SavedOutputParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavedOutputParams& operator=(SavedOutputParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SavedOutputParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SavedOutputParams* internal_default_instance() {
    return reinterpret_cast<const SavedOutputParams*>(
               &_SavedOutputParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SavedOutputParams& a, SavedOutputParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SavedOutputParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SavedOutputParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SavedOutputParams* New() const final {
    return CreateMaybeMessage<SavedOutputParams>(nullptr);
  }

  SavedOutputParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SavedOutputParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SavedOutputParams& from);
  void MergeFrom(const SavedOutputParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SavedOutputParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SavedOutputParams";
  }
  protected:
  explicit SavedOutputParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSavedOutputLoadDatabatchFieldNumber = 1,
  };
  // bool saved_output_load_databatch = 1;
  void clear_saved_output_load_databatch();
  bool saved_output_load_databatch() const;
  void set_saved_output_load_databatch(bool value);
  private:
  bool _internal_saved_output_load_databatch() const;
  void _internal_set_saved_output_load_databatch(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SavedOutputParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool saved_output_load_databatch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class MultiDataset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MultiDataset) */ {
 public:
  inline MultiDataset() : MultiDataset(nullptr) {}
  virtual ~MultiDataset();

  MultiDataset(const MultiDataset& from);
  MultiDataset(MultiDataset&& from) noexcept
    : MultiDataset() {
    *this = ::std::move(from);
  }

  inline MultiDataset& operator=(const MultiDataset& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiDataset& operator=(MultiDataset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiDataset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiDataset* internal_default_instance() {
    return reinterpret_cast<const MultiDataset*>(
               &_MultiDataset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MultiDataset& a, MultiDataset& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiDataset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiDataset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiDataset* New() const final {
    return CreateMaybeMessage<MultiDataset>(nullptr);
  }

  MultiDataset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiDataset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiDataset& from);
  void MergeFrom(const MultiDataset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiDataset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MultiDataset";
  }
  protected:
  explicit MultiDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetNameFieldNumber = 1,
    kSavedOutputLayerFieldNumber = 4,
    kSampleRateFieldNumber = 2,
    kSavedOutputEidFieldNumber = 3,
  };
  // string dataset_name = 1;
  void clear_dataset_name();
  const std::string& dataset_name() const;
  void set_dataset_name(const std::string& value);
  void set_dataset_name(std::string&& value);
  void set_dataset_name(const char* value);
  void set_dataset_name(const char* value, size_t size);
  std::string* mutable_dataset_name();
  std::string* release_dataset_name();
  void set_allocated_dataset_name(std::string* dataset_name);
  private:
  const std::string& _internal_dataset_name() const;
  void _internal_set_dataset_name(const std::string& value);
  std::string* _internal_mutable_dataset_name();
  public:

  // string saved_output_layer = 4;
  void clear_saved_output_layer();
  const std::string& saved_output_layer() const;
  void set_saved_output_layer(const std::string& value);
  void set_saved_output_layer(std::string&& value);
  void set_saved_output_layer(const char* value);
  void set_saved_output_layer(const char* value, size_t size);
  std::string* mutable_saved_output_layer();
  std::string* release_saved_output_layer();
  void set_allocated_saved_output_layer(std::string* saved_output_layer);
  private:
  const std::string& _internal_saved_output_layer() const;
  void _internal_set_saved_output_layer(const std::string& value);
  std::string* _internal_mutable_saved_output_layer();
  public:

  // float sample_rate = 2;
  void clear_sample_rate();
  float sample_rate() const;
  void set_sample_rate(float value);
  private:
  float _internal_sample_rate() const;
  void _internal_set_sample_rate(float value);
  public:

  // int32 saved_output_eid = 3;
  void clear_saved_output_eid();
  ::PROTOBUF_NAMESPACE_ID::int32 saved_output_eid() const;
  void set_saved_output_eid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_saved_output_eid() const;
  void _internal_set_saved_output_eid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MultiDataset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr saved_output_layer_;
  float sample_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 saved_output_eid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class LabelSetter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabelSetter) */ {
 public:
  inline LabelSetter() : LabelSetter(nullptr) {}
  virtual ~LabelSetter();

  LabelSetter(const LabelSetter& from);
  LabelSetter(LabelSetter&& from) noexcept
    : LabelSetter() {
    *this = ::std::move(from);
  }

  inline LabelSetter& operator=(const LabelSetter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelSetter& operator=(LabelSetter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelSetter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelSetter* internal_default_instance() {
    return reinterpret_cast<const LabelSetter*>(
               &_LabelSetter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LabelSetter& a, LabelSetter& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelSetter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelSetter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelSetter* New() const final {
    return CreateMaybeMessage<LabelSetter>(nullptr);
  }

  LabelSetter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelSetter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelSetter& from);
  void MergeFrom(const LabelSetter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelSetter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabelSetter";
  }
  protected:
  explicit LabelSetter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHardcodedLabelsFieldNumber = 1,
  };
  // repeated int64 hardcoded_labels = 1;
  int hardcoded_labels_size() const;
  private:
  int _internal_hardcoded_labels_size() const;
  public:
  void clear_hardcoded_labels();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_hardcoded_labels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_hardcoded_labels() const;
  void _internal_add_hardcoded_labels(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_hardcoded_labels();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 hardcoded_labels(int index) const;
  void set_hardcoded_labels(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_hardcoded_labels(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      hardcoded_labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_hardcoded_labels();

  // @@protoc_insertion_point(class_scope:LabelSetter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > hardcoded_labels_;
  mutable std::atomic<int> _hardcoded_labels_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class LabelMapper_CatidMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LabelMapper_CatidMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LabelMapper_CatidMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  LabelMapper_CatidMapEntry_DoNotUse();
  explicit LabelMapper_CatidMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LabelMapper_CatidMapEntry_DoNotUse& other);
  static const LabelMapper_CatidMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LabelMapper_CatidMapEntry_DoNotUse*>(&_LabelMapper_CatidMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "LabelMapper.CatidMapEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "LabelMapper.CatidMapEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class LabelMapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabelMapper) */ {
 public:
  inline LabelMapper() : LabelMapper(nullptr) {}
  virtual ~LabelMapper();

  LabelMapper(const LabelMapper& from);
  LabelMapper(LabelMapper&& from) noexcept
    : LabelMapper() {
    *this = ::std::move(from);
  }

  inline LabelMapper& operator=(const LabelMapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelMapper& operator=(LabelMapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelMapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelMapper* internal_default_instance() {
    return reinterpret_cast<const LabelMapper*>(
               &_LabelMapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LabelMapper& a, LabelMapper& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelMapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelMapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelMapper* New() const final {
    return CreateMaybeMessage<LabelMapper>(nullptr);
  }

  LabelMapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelMapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelMapper& from);
  void MergeFrom(const LabelMapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelMapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabelMapper";
  }
  protected:
  explicit LabelMapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCatidMapFieldNumber = 7,
    kDatasetNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kNotInOutputAiidFieldNumber = 3,
    kAiidFieldNumber = 4,
    kSrcDatasetFieldNumber = 5,
    kDstDatasetFieldNumber = 6,
  };
  // map<string, string> catid_map = 7;
  int catid_map_size() const;
  private:
  int _internal_catid_map_size() const;
  public:
  void clear_catid_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_catid_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_catid_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      catid_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_catid_map();

  // string dataset_name = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_dataset_name();
  PROTOBUF_DEPRECATED const std::string& dataset_name() const;
  PROTOBUF_DEPRECATED void set_dataset_name(const std::string& value);
  PROTOBUF_DEPRECATED void set_dataset_name(std::string&& value);
  PROTOBUF_DEPRECATED void set_dataset_name(const char* value);
  PROTOBUF_DEPRECATED void set_dataset_name(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_dataset_name();
  PROTOBUF_DEPRECATED std::string* release_dataset_name();
  PROTOBUF_DEPRECATED void set_allocated_dataset_name(std::string* dataset_name);
  private:
  const std::string& _internal_dataset_name() const;
  void _internal_set_dataset_name(const std::string& value);
  std::string* _internal_mutable_dataset_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string not_in_output_aiid = 3;
  void clear_not_in_output_aiid();
  const std::string& not_in_output_aiid() const;
  void set_not_in_output_aiid(const std::string& value);
  void set_not_in_output_aiid(std::string&& value);
  void set_not_in_output_aiid(const char* value);
  void set_not_in_output_aiid(const char* value, size_t size);
  std::string* mutable_not_in_output_aiid();
  std::string* release_not_in_output_aiid();
  void set_allocated_not_in_output_aiid(std::string* not_in_output_aiid);
  private:
  const std::string& _internal_not_in_output_aiid() const;
  void _internal_set_not_in_output_aiid(const std::string& value);
  std::string* _internal_mutable_not_in_output_aiid();
  public:

  // string aiid = 4;
  void clear_aiid();
  const std::string& aiid() const;
  void set_aiid(const std::string& value);
  void set_aiid(std::string&& value);
  void set_aiid(const char* value);
  void set_aiid(const char* value, size_t size);
  std::string* mutable_aiid();
  std::string* release_aiid();
  void set_allocated_aiid(std::string* aiid);
  private:
  const std::string& _internal_aiid() const;
  void _internal_set_aiid(const std::string& value);
  std::string* _internal_mutable_aiid();
  public:

  // string src_dataset = 5;
  void clear_src_dataset();
  const std::string& src_dataset() const;
  void set_src_dataset(const std::string& value);
  void set_src_dataset(std::string&& value);
  void set_src_dataset(const char* value);
  void set_src_dataset(const char* value, size_t size);
  std::string* mutable_src_dataset();
  std::string* release_src_dataset();
  void set_allocated_src_dataset(std::string* src_dataset);
  private:
  const std::string& _internal_src_dataset() const;
  void _internal_set_src_dataset(const std::string& value);
  std::string* _internal_mutable_src_dataset();
  public:

  // string dst_dataset = 6;
  void clear_dst_dataset();
  const std::string& dst_dataset() const;
  void set_dst_dataset(const std::string& value);
  void set_dst_dataset(std::string&& value);
  void set_dst_dataset(const char* value);
  void set_dst_dataset(const char* value, size_t size);
  std::string* mutable_dst_dataset();
  std::string* release_dst_dataset();
  void set_allocated_dst_dataset(std::string* dst_dataset);
  private:
  const std::string& _internal_dst_dataset() const;
  void _internal_set_dst_dataset(const std::string& value);
  std::string* _internal_mutable_dst_dataset();
  public:

  // @@protoc_insertion_point(class_scope:LabelMapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      LabelMapper_CatidMapEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > catid_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr not_in_output_aiid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aiid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_dataset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class LabelSmoother PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabelSmoother) */ {
 public:
  inline LabelSmoother() : LabelSmoother(nullptr) {}
  virtual ~LabelSmoother();

  LabelSmoother(const LabelSmoother& from);
  LabelSmoother(LabelSmoother&& from) noexcept
    : LabelSmoother() {
    *this = ::std::move(from);
  }

  inline LabelSmoother& operator=(const LabelSmoother& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelSmoother& operator=(LabelSmoother&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelSmoother& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelSmoother* internal_default_instance() {
    return reinterpret_cast<const LabelSmoother*>(
               &_LabelSmoother_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LabelSmoother& a, LabelSmoother& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelSmoother* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelSmoother* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelSmoother* New() const final {
    return CreateMaybeMessage<LabelSmoother>(nullptr);
  }

  LabelSmoother* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelSmoother>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelSmoother& from);
  void MergeFrom(const LabelSmoother& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelSmoother* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabelSmoother";
  }
  protected:
  explicit LabelSmoother(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstantRangeFieldNumber = 2,
    kLinearScaleFieldNumber = 3,
    kLogScaleFieldNumber = 4,
    kModeFieldNumber = 1,
    kNumLabelsFieldNumber = 5,
  };
  // repeated float constant_range = 2;
  int constant_range_size() const;
  private:
  int _internal_constant_range_size() const;
  public:
  void clear_constant_range();
  private:
  float _internal_constant_range(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_constant_range() const;
  void _internal_add_constant_range(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_constant_range();
  public:
  float constant_range(int index) const;
  void set_constant_range(int index, float value);
  void add_constant_range(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      constant_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_constant_range();

  // repeated float linear_scale = 3;
  int linear_scale_size() const;
  private:
  int _internal_linear_scale_size() const;
  public:
  void clear_linear_scale();
  private:
  float _internal_linear_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_linear_scale() const;
  void _internal_add_linear_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_linear_scale();
  public:
  float linear_scale(int index) const;
  void set_linear_scale(int index, float value);
  void add_linear_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      linear_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_linear_scale();

  // repeated float log_scale = 4;
  int log_scale_size() const;
  private:
  int _internal_log_scale_size() const;
  public:
  void clear_log_scale();
  private:
  float _internal_log_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_log_scale() const;
  void _internal_add_log_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_log_scale();
  public:
  float log_scale(int index) const;
  void set_log_scale(int index, float value);
  void add_log_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      log_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_log_scale();

  // string mode = 1;
  void clear_mode();
  const std::string& mode() const;
  void set_mode(const std::string& value);
  void set_mode(std::string&& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  std::string* mutable_mode();
  std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  private:
  const std::string& _internal_mode() const;
  void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // int64 num_labels = 5;
  void clear_num_labels();
  ::PROTOBUF_NAMESPACE_ID::int64 num_labels() const;
  void set_num_labels(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_labels() const;
  void _internal_set_num_labels(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:LabelSmoother)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > constant_range_;
  mutable std::atomic<int> _constant_range_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > linear_scale_;
  mutable std::atomic<int> _linear_scale_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > log_scale_;
  mutable std::atomic<int> _log_scale_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_labels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class LabelDropper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabelDropper) */ {
 public:
  inline LabelDropper() : LabelDropper(nullptr) {}
  virtual ~LabelDropper();

  LabelDropper(const LabelDropper& from);
  LabelDropper(LabelDropper&& from) noexcept
    : LabelDropper() {
    *this = ::std::move(from);
  }

  inline LabelDropper& operator=(const LabelDropper& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelDropper& operator=(LabelDropper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelDropper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelDropper* internal_default_instance() {
    return reinterpret_cast<const LabelDropper*>(
               &_LabelDropper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LabelDropper& a, LabelDropper& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelDropper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelDropper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelDropper* New() const final {
    return CreateMaybeMessage<LabelDropper>(nullptr);
  }

  LabelDropper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelDropper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelDropper& from);
  void MergeFrom(const LabelDropper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelDropper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabelDropper";
  }
  protected:
  explicit LabelDropper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDropLabelsFieldNumber = 1,
  };
  // repeated int64 drop_labels = 1;
  int drop_labels_size() const;
  private:
  int _internal_drop_labels_size() const;
  public:
  void clear_drop_labels();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_drop_labels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_drop_labels() const;
  void _internal_add_drop_labels(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_drop_labels();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 drop_labels(int index) const;
  void set_drop_labels(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_drop_labels(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      drop_labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_drop_labels();

  // @@protoc_insertion_point(class_scope:LabelDropper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > drop_labels_;
  mutable std::atomic<int> _drop_labels_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class OCRCropTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OCRCropTransform) */ {
 public:
  inline OCRCropTransform() : OCRCropTransform(nullptr) {}
  virtual ~OCRCropTransform();

  OCRCropTransform(const OCRCropTransform& from);
  OCRCropTransform(OCRCropTransform&& from) noexcept
    : OCRCropTransform() {
    *this = ::std::move(from);
  }

  inline OCRCropTransform& operator=(const OCRCropTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline OCRCropTransform& operator=(OCRCropTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OCRCropTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OCRCropTransform* internal_default_instance() {
    return reinterpret_cast<const OCRCropTransform*>(
               &_OCRCropTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(OCRCropTransform& a, OCRCropTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(OCRCropTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OCRCropTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OCRCropTransform* New() const final {
    return CreateMaybeMessage<OCRCropTransform>(nullptr);
  }

  OCRCropTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OCRCropTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OCRCropTransform& from);
  void MergeFrom(const OCRCropTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OCRCropTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OCRCropTransform";
  }
  protected:
  explicit OCRCropTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
  };
  // int64 height = 1;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int64 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:OCRCropTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_;
  ::PROTOBUF_NAMESPACE_ID::int64 width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class MaxNumLabelDropper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MaxNumLabelDropper) */ {
 public:
  inline MaxNumLabelDropper() : MaxNumLabelDropper(nullptr) {}
  virtual ~MaxNumLabelDropper();

  MaxNumLabelDropper(const MaxNumLabelDropper& from);
  MaxNumLabelDropper(MaxNumLabelDropper&& from) noexcept
    : MaxNumLabelDropper() {
    *this = ::std::move(from);
  }

  inline MaxNumLabelDropper& operator=(const MaxNumLabelDropper& from) {
    CopyFrom(from);
    return *this;
  }
  inline MaxNumLabelDropper& operator=(MaxNumLabelDropper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MaxNumLabelDropper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaxNumLabelDropper* internal_default_instance() {
    return reinterpret_cast<const MaxNumLabelDropper*>(
               &_MaxNumLabelDropper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MaxNumLabelDropper& a, MaxNumLabelDropper& b) {
    a.Swap(&b);
  }
  inline void Swap(MaxNumLabelDropper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MaxNumLabelDropper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MaxNumLabelDropper* New() const final {
    return CreateMaybeMessage<MaxNumLabelDropper>(nullptr);
  }

  MaxNumLabelDropper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MaxNumLabelDropper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MaxNumLabelDropper& from);
  void MergeFrom(const MaxNumLabelDropper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaxNumLabelDropper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MaxNumLabelDropper";
  }
  protected:
  explicit MaxNumLabelDropper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxNumLabelsFieldNumber = 1,
    kMinNumLabelsFieldNumber = 2,
  };
  // int64 max_num_labels = 1;
  void clear_max_num_labels();
  ::PROTOBUF_NAMESPACE_ID::int64 max_num_labels() const;
  void set_max_num_labels(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_num_labels() const;
  void _internal_set_max_num_labels(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 min_num_labels = 2;
  void clear_min_num_labels();
  ::PROTOBUF_NAMESPACE_ID::int64 min_num_labels() const;
  void set_min_num_labels(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_min_num_labels() const;
  void _internal_set_min_num_labels(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:MaxNumLabelDropper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_num_labels_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_num_labels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class LabelWeight_CatidConstWeightsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LabelWeight_CatidConstWeightsEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LabelWeight_CatidConstWeightsEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > SuperType;
  LabelWeight_CatidConstWeightsEntry_DoNotUse();
  explicit LabelWeight_CatidConstWeightsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LabelWeight_CatidConstWeightsEntry_DoNotUse& other);
  static const LabelWeight_CatidConstWeightsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LabelWeight_CatidConstWeightsEntry_DoNotUse*>(&_LabelWeight_CatidConstWeightsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "LabelWeight.CatidConstWeightsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class LabelWeight PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabelWeight) */ {
 public:
  inline LabelWeight() : LabelWeight(nullptr) {}
  virtual ~LabelWeight();

  LabelWeight(const LabelWeight& from);
  LabelWeight(LabelWeight&& from) noexcept
    : LabelWeight() {
    *this = ::std::move(from);
  }

  inline LabelWeight& operator=(const LabelWeight& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelWeight& operator=(LabelWeight&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelWeight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelWeight* internal_default_instance() {
    return reinterpret_cast<const LabelWeight*>(
               &_LabelWeight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LabelWeight& a, LabelWeight& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelWeight* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelWeight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelWeight* New() const final {
    return CreateMaybeMessage<LabelWeight>(nullptr);
  }

  LabelWeight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelWeight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelWeight& from);
  void MergeFrom(const LabelWeight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelWeight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabelWeight";
  }
  protected:
  explicit LabelWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCatidConstWeightsFieldNumber = 5,
    kCatidFrequenciesFileFieldNumber = 1,
    kDatasetNameFieldNumber = 7,
    kSplitFieldNumber = 8,
    kMinCountFieldNumber = 3,
    kTargetFrequencyFieldNumber = 2,
    kSqrtFieldNumber = 4,
    kDefaultWeightFieldNumber = 6,
  };
  // map<string, float> catid_const_weights = 5;
  int catid_const_weights_size() const;
  private:
  int _internal_catid_const_weights_size() const;
  public:
  void clear_catid_const_weights();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      _internal_catid_const_weights() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      _internal_mutable_catid_const_weights();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      catid_const_weights() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_catid_const_weights();

  // string catid_frequencies_file = 1;
  void clear_catid_frequencies_file();
  const std::string& catid_frequencies_file() const;
  void set_catid_frequencies_file(const std::string& value);
  void set_catid_frequencies_file(std::string&& value);
  void set_catid_frequencies_file(const char* value);
  void set_catid_frequencies_file(const char* value, size_t size);
  std::string* mutable_catid_frequencies_file();
  std::string* release_catid_frequencies_file();
  void set_allocated_catid_frequencies_file(std::string* catid_frequencies_file);
  private:
  const std::string& _internal_catid_frequencies_file() const;
  void _internal_set_catid_frequencies_file(const std::string& value);
  std::string* _internal_mutable_catid_frequencies_file();
  public:

  // string dataset_name = 7;
  void clear_dataset_name();
  const std::string& dataset_name() const;
  void set_dataset_name(const std::string& value);
  void set_dataset_name(std::string&& value);
  void set_dataset_name(const char* value);
  void set_dataset_name(const char* value, size_t size);
  std::string* mutable_dataset_name();
  std::string* release_dataset_name();
  void set_allocated_dataset_name(std::string* dataset_name);
  private:
  const std::string& _internal_dataset_name() const;
  void _internal_set_dataset_name(const std::string& value);
  std::string* _internal_mutable_dataset_name();
  public:

  // string split = 8;
  void clear_split();
  const std::string& split() const;
  void set_split(const std::string& value);
  void set_split(std::string&& value);
  void set_split(const char* value);
  void set_split(const char* value, size_t size);
  std::string* mutable_split();
  std::string* release_split();
  void set_allocated_split(std::string* split);
  private:
  const std::string& _internal_split() const;
  void _internal_set_split(const std::string& value);
  std::string* _internal_mutable_split();
  public:

  // int64 min_count = 3;
  void clear_min_count();
  ::PROTOBUF_NAMESPACE_ID::int64 min_count() const;
  void set_min_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_min_count() const;
  void _internal_set_min_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float target_frequency = 2;
  void clear_target_frequency();
  float target_frequency() const;
  void set_target_frequency(float value);
  private:
  float _internal_target_frequency() const;
  void _internal_set_target_frequency(float value);
  public:

  // bool sqrt = 4;
  void clear_sqrt();
  bool sqrt() const;
  void set_sqrt(bool value);
  private:
  bool _internal_sqrt() const;
  void _internal_set_sqrt(bool value);
  public:

  // float default_weight = 6;
  void clear_default_weight();
  float default_weight() const;
  void set_default_weight(float value);
  private:
  float _internal_default_weight() const;
  void _internal_set_default_weight(float value);
  public:

  // @@protoc_insertion_point(class_scope:LabelWeight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      LabelWeight_CatidConstWeightsEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
      0 > catid_const_weights_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr catid_frequencies_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr split_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_count_;
  float target_frequency_;
  bool sqrt_;
  float default_weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class LabelsFromBboxes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabelsFromBboxes) */ {
 public:
  inline LabelsFromBboxes() : LabelsFromBboxes(nullptr) {}
  virtual ~LabelsFromBboxes();

  LabelsFromBboxes(const LabelsFromBboxes& from);
  LabelsFromBboxes(LabelsFromBboxes&& from) noexcept
    : LabelsFromBboxes() {
    *this = ::std::move(from);
  }

  inline LabelsFromBboxes& operator=(const LabelsFromBboxes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelsFromBboxes& operator=(LabelsFromBboxes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelsFromBboxes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelsFromBboxes* internal_default_instance() {
    return reinterpret_cast<const LabelsFromBboxes*>(
               &_LabelsFromBboxes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LabelsFromBboxes& a, LabelsFromBboxes& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelsFromBboxes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelsFromBboxes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelsFromBboxes* New() const final {
    return CreateMaybeMessage<LabelsFromBboxes>(nullptr);
  }

  LabelsFromBboxes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelsFromBboxes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelsFromBboxes& from);
  void MergeFrom(const LabelsFromBboxes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelsFromBboxes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabelsFromBboxes";
  }
  protected:
  explicit LabelsFromBboxes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetBackgroundLabelZeroFieldNumber = 1,
  };
  // bool set_background_label_zero = 1;
  void clear_set_background_label_zero();
  bool set_background_label_zero() const;
  void set_set_background_label_zero(bool value);
  private:
  bool _internal_set_background_label_zero() const;
  void _internal_set_set_background_label_zero(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabelsFromBboxes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool set_background_label_zero_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class SSDRandomCropOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDRandomCropOperation) */ {
 public:
  inline SSDRandomCropOperation() : SSDRandomCropOperation(nullptr) {}
  virtual ~SSDRandomCropOperation();

  SSDRandomCropOperation(const SSDRandomCropOperation& from);
  SSDRandomCropOperation(SSDRandomCropOperation&& from) noexcept
    : SSDRandomCropOperation() {
    *this = ::std::move(from);
  }

  inline SSDRandomCropOperation& operator=(const SSDRandomCropOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDRandomCropOperation& operator=(SSDRandomCropOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSDRandomCropOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSDRandomCropOperation* internal_default_instance() {
    return reinterpret_cast<const SSDRandomCropOperation*>(
               &_SSDRandomCropOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SSDRandomCropOperation& a, SSDRandomCropOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDRandomCropOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDRandomCropOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSDRandomCropOperation* New() const final {
    return CreateMaybeMessage<SSDRandomCropOperation>(nullptr);
  }

  SSDRandomCropOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSDRandomCropOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSDRandomCropOperation& from);
  void MergeFrom(const SSDRandomCropOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDRandomCropOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDRandomCropOperation";
  }
  protected:
  explicit SSDRandomCropOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinObjectCoveredFieldNumber = 1,
    kMinAspectRatioFieldNumber = 2,
    kMaxAspectRatioFieldNumber = 3,
    kMinAreaFieldNumber = 4,
    kMaxAreaFieldNumber = 5,
    kOverlapThreshFieldNumber = 6,
    kRandomCoefFieldNumber = 7,
  };
  // float min_object_covered = 1;
  void clear_min_object_covered();
  float min_object_covered() const;
  void set_min_object_covered(float value);
  private:
  float _internal_min_object_covered() const;
  void _internal_set_min_object_covered(float value);
  public:

  // float min_aspect_ratio = 2;
  void clear_min_aspect_ratio();
  float min_aspect_ratio() const;
  void set_min_aspect_ratio(float value);
  private:
  float _internal_min_aspect_ratio() const;
  void _internal_set_min_aspect_ratio(float value);
  public:

  // float max_aspect_ratio = 3;
  void clear_max_aspect_ratio();
  float max_aspect_ratio() const;
  void set_max_aspect_ratio(float value);
  private:
  float _internal_max_aspect_ratio() const;
  void _internal_set_max_aspect_ratio(float value);
  public:

  // float min_area = 4;
  void clear_min_area();
  float min_area() const;
  void set_min_area(float value);
  private:
  float _internal_min_area() const;
  void _internal_set_min_area(float value);
  public:

  // float max_area = 5;
  void clear_max_area();
  float max_area() const;
  void set_max_area(float value);
  private:
  float _internal_max_area() const;
  void _internal_set_max_area(float value);
  public:

  // float overlap_thresh = 6;
  void clear_overlap_thresh();
  float overlap_thresh() const;
  void set_overlap_thresh(float value);
  private:
  float _internal_overlap_thresh() const;
  void _internal_set_overlap_thresh(float value);
  public:

  // float random_coef = 7;
  void clear_random_coef();
  float random_coef() const;
  void set_random_coef(float value);
  private:
  float _internal_random_coef() const;
  void _internal_set_random_coef(float value);
  public:

  // @@protoc_insertion_point(class_scope:SSDRandomCropOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float min_object_covered_;
  float min_aspect_ratio_;
  float max_aspect_ratio_;
  float min_area_;
  float max_area_;
  float overlap_thresh_;
  float random_coef_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class RelativeCropTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RelativeCropTransform) */ {
 public:
  inline RelativeCropTransform() : RelativeCropTransform(nullptr) {}
  virtual ~RelativeCropTransform();

  RelativeCropTransform(const RelativeCropTransform& from);
  RelativeCropTransform(RelativeCropTransform&& from) noexcept
    : RelativeCropTransform() {
    *this = ::std::move(from);
  }

  inline RelativeCropTransform& operator=(const RelativeCropTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelativeCropTransform& operator=(RelativeCropTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelativeCropTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelativeCropTransform* internal_default_instance() {
    return reinterpret_cast<const RelativeCropTransform*>(
               &_RelativeCropTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RelativeCropTransform& a, RelativeCropTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(RelativeCropTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelativeCropTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelativeCropTransform* New() const final {
    return CreateMaybeMessage<RelativeCropTransform>(nullptr);
  }

  RelativeCropTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelativeCropTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelativeCropTransform& from);
  void MergeFrom(const RelativeCropTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelativeCropTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RelativeCropTransform";
  }
  protected:
  explicit RelativeCropTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RelativeCropTransform_FallbackMode FallbackMode;
  static constexpr FallbackMode ORIG_IMAGE =
    RelativeCropTransform_FallbackMode_ORIG_IMAGE;
  static constexpr FallbackMode CROP =
    RelativeCropTransform_FallbackMode_CROP;
  static constexpr FallbackMode DISCARD =
    RelativeCropTransform_FallbackMode_DISCARD;
  static inline bool FallbackMode_IsValid(int value) {
    return RelativeCropTransform_FallbackMode_IsValid(value);
  }
  static constexpr FallbackMode FallbackMode_MIN =
    RelativeCropTransform_FallbackMode_FallbackMode_MIN;
  static constexpr FallbackMode FallbackMode_MAX =
    RelativeCropTransform_FallbackMode_FallbackMode_MAX;
  static constexpr int FallbackMode_ARRAYSIZE =
    RelativeCropTransform_FallbackMode_FallbackMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FallbackMode_descriptor() {
    return RelativeCropTransform_FallbackMode_descriptor();
  }
  template<typename T>
  static inline const std::string& FallbackMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FallbackMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FallbackMode_Name.");
    return RelativeCropTransform_FallbackMode_Name(enum_t_value);
  }
  static inline bool FallbackMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FallbackMode* value) {
    return RelativeCropTransform_FallbackMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRelativeScaleRangeFieldNumber = 1,
    kRelativeAspectRangeFieldNumber = 2,
    kHorizontalFlipFieldNumber = 3,
    kMinBboxOverlapFieldNumber = 4,
    kAttemptsFieldNumber = 5,
    kMaxAttemptsFallbackFieldNumber = 6,
    kImagesWithNoBboxesFallbackFieldNumber = 7,
  };
  // repeated float relative_scale_range = 1;
  int relative_scale_range_size() const;
  private:
  int _internal_relative_scale_range_size() const;
  public:
  void clear_relative_scale_range();
  private:
  float _internal_relative_scale_range(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_relative_scale_range() const;
  void _internal_add_relative_scale_range(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_relative_scale_range();
  public:
  float relative_scale_range(int index) const;
  void set_relative_scale_range(int index, float value);
  void add_relative_scale_range(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      relative_scale_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_relative_scale_range();

  // repeated float relative_aspect_range = 2;
  int relative_aspect_range_size() const;
  private:
  int _internal_relative_aspect_range_size() const;
  public:
  void clear_relative_aspect_range();
  private:
  float _internal_relative_aspect_range(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_relative_aspect_range() const;
  void _internal_add_relative_aspect_range(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_relative_aspect_range();
  public:
  float relative_aspect_range(int index) const;
  void set_relative_aspect_range(int index, float value);
  void add_relative_aspect_range(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      relative_aspect_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_relative_aspect_range();

  // bool horizontal_flip = 3;
  void clear_horizontal_flip();
  bool horizontal_flip() const;
  void set_horizontal_flip(bool value);
  private:
  bool _internal_horizontal_flip() const;
  void _internal_set_horizontal_flip(bool value);
  public:

  // float min_bbox_overlap = 4;
  void clear_min_bbox_overlap();
  float min_bbox_overlap() const;
  void set_min_bbox_overlap(float value);
  private:
  float _internal_min_bbox_overlap() const;
  void _internal_set_min_bbox_overlap(float value);
  public:

  // int32 attempts = 5;
  void clear_attempts();
  ::PROTOBUF_NAMESPACE_ID::int32 attempts() const;
  void set_attempts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attempts() const;
  void _internal_set_attempts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .RelativeCropTransform.FallbackMode max_attempts_fallback = 6;
  void clear_max_attempts_fallback();
  ::RelativeCropTransform_FallbackMode max_attempts_fallback() const;
  void set_max_attempts_fallback(::RelativeCropTransform_FallbackMode value);
  private:
  ::RelativeCropTransform_FallbackMode _internal_max_attempts_fallback() const;
  void _internal_set_max_attempts_fallback(::RelativeCropTransform_FallbackMode value);
  public:

  // .RelativeCropTransform.FallbackMode images_with_no_bboxes_fallback = 7;
  void clear_images_with_no_bboxes_fallback();
  ::RelativeCropTransform_FallbackMode images_with_no_bboxes_fallback() const;
  void set_images_with_no_bboxes_fallback(::RelativeCropTransform_FallbackMode value);
  private:
  ::RelativeCropTransform_FallbackMode _internal_images_with_no_bboxes_fallback() const;
  void _internal_set_images_with_no_bboxes_fallback(::RelativeCropTransform_FallbackMode value);
  public:

  // @@protoc_insertion_point(class_scope:RelativeCropTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > relative_scale_range_;
  mutable std::atomic<int> _relative_scale_range_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > relative_aspect_range_;
  mutable std::atomic<int> _relative_aspect_range_cached_byte_size_;
  bool horizontal_flip_;
  float min_bbox_overlap_;
  ::PROTOBUF_NAMESPACE_ID::int32 attempts_;
  int max_attempts_fallback_;
  int images_with_no_bboxes_fallback_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class AspectRatioTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AspectRatioTransform) */ {
 public:
  inline AspectRatioTransform() : AspectRatioTransform(nullptr) {}
  virtual ~AspectRatioTransform();

  AspectRatioTransform(const AspectRatioTransform& from);
  AspectRatioTransform(AspectRatioTransform&& from) noexcept
    : AspectRatioTransform() {
    *this = ::std::move(from);
  }

  inline AspectRatioTransform& operator=(const AspectRatioTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline AspectRatioTransform& operator=(AspectRatioTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AspectRatioTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AspectRatioTransform* internal_default_instance() {
    return reinterpret_cast<const AspectRatioTransform*>(
               &_AspectRatioTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AspectRatioTransform& a, AspectRatioTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(AspectRatioTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AspectRatioTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AspectRatioTransform* New() const final {
    return CreateMaybeMessage<AspectRatioTransform>(nullptr);
  }

  AspectRatioTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AspectRatioTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AspectRatioTransform& from);
  void MergeFrom(const AspectRatioTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AspectRatioTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AspectRatioTransform";
  }
  protected:
  explicit AspectRatioTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativeAspectRangeFieldNumber = 1,
  };
  // repeated float relative_aspect_range = 1;
  int relative_aspect_range_size() const;
  private:
  int _internal_relative_aspect_range_size() const;
  public:
  void clear_relative_aspect_range();
  private:
  float _internal_relative_aspect_range(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_relative_aspect_range() const;
  void _internal_add_relative_aspect_range(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_relative_aspect_range();
  public:
  float relative_aspect_range(int index) const;
  void set_relative_aspect_range(int index, float value);
  void add_relative_aspect_range(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      relative_aspect_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_relative_aspect_range();

  // @@protoc_insertion_point(class_scope:AspectRatioTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > relative_aspect_range_;
  mutable std::atomic<int> _relative_aspect_range_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class AffineTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AffineTransform) */ {
 public:
  inline AffineTransform() : AffineTransform(nullptr) {}
  virtual ~AffineTransform();

  AffineTransform(const AffineTransform& from);
  AffineTransform(AffineTransform&& from) noexcept
    : AffineTransform() {
    *this = ::std::move(from);
  }

  inline AffineTransform& operator=(const AffineTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline AffineTransform& operator=(AffineTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AffineTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AffineTransform* internal_default_instance() {
    return reinterpret_cast<const AffineTransform*>(
               &_AffineTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(AffineTransform& a, AffineTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(AffineTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AffineTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AffineTransform* New() const final {
    return CreateMaybeMessage<AffineTransform>(nullptr);
  }

  AffineTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AffineTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AffineTransform& from);
  void MergeFrom(const AffineTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AffineTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AffineTransform";
  }
  protected:
  explicit AffineTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkipProbFieldNumber = 1,
    kRotateMinFieldNumber = 2,
    kRotateMaxFieldNumber = 3,
    kCropOriginalSizeFieldNumber = 4,
    kUseTransparentCornersFieldNumber = 5,
  };
  // float skip_prob = 1;
  void clear_skip_prob();
  float skip_prob() const;
  void set_skip_prob(float value);
  private:
  float _internal_skip_prob() const;
  void _internal_set_skip_prob(float value);
  public:

  // float rotate_min = 2;
  void clear_rotate_min();
  float rotate_min() const;
  void set_rotate_min(float value);
  private:
  float _internal_rotate_min() const;
  void _internal_set_rotate_min(float value);
  public:

  // float rotate_max = 3;
  void clear_rotate_max();
  float rotate_max() const;
  void set_rotate_max(float value);
  private:
  float _internal_rotate_max() const;
  void _internal_set_rotate_max(float value);
  public:

  // bool crop_original_size = 4;
  void clear_crop_original_size();
  bool crop_original_size() const;
  void set_crop_original_size(bool value);
  private:
  bool _internal_crop_original_size() const;
  void _internal_set_crop_original_size(bool value);
  public:

  // bool use_transparent_corners = 5;
  void clear_use_transparent_corners();
  bool use_transparent_corners() const;
  void set_use_transparent_corners(bool value);
  private:
  bool _internal_use_transparent_corners() const;
  void _internal_set_use_transparent_corners(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AffineTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float skip_prob_;
  float rotate_min_;
  float rotate_max_;
  bool crop_original_size_;
  bool use_transparent_corners_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class ScaleTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ScaleTransform) */ {
 public:
  inline ScaleTransform() : ScaleTransform(nullptr) {}
  virtual ~ScaleTransform();

  ScaleTransform(const ScaleTransform& from);
  ScaleTransform(ScaleTransform&& from) noexcept
    : ScaleTransform() {
    *this = ::std::move(from);
  }

  inline ScaleTransform& operator=(const ScaleTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScaleTransform& operator=(ScaleTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScaleTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScaleTransform* internal_default_instance() {
    return reinterpret_cast<const ScaleTransform*>(
               &_ScaleTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ScaleTransform& a, ScaleTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(ScaleTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScaleTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScaleTransform* New() const final {
    return CreateMaybeMessage<ScaleTransform>(nullptr);
  }

  ScaleTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScaleTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScaleTransform& from);
  void MergeFrom(const ScaleTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScaleTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ScaleTransform";
  }
  protected:
  explicit ScaleTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeRangeFieldNumber = 2,
    kScaleBasedOnFieldNumber = 1,
  };
  // repeated float size_range = 2;
  int size_range_size() const;
  private:
  int _internal_size_range_size() const;
  public:
  void clear_size_range();
  private:
  float _internal_size_range(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_size_range() const;
  void _internal_add_size_range(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_size_range();
  public:
  float size_range(int index) const;
  void set_size_range(int index, float value);
  void add_size_range(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      size_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_size_range();

  // string scale_based_on = 1;
  void clear_scale_based_on();
  const std::string& scale_based_on() const;
  void set_scale_based_on(const std::string& value);
  void set_scale_based_on(std::string&& value);
  void set_scale_based_on(const char* value);
  void set_scale_based_on(const char* value, size_t size);
  std::string* mutable_scale_based_on();
  std::string* release_scale_based_on();
  void set_allocated_scale_based_on(std::string* scale_based_on);
  private:
  const std::string& _internal_scale_based_on() const;
  void _internal_set_scale_based_on(const std::string& value);
  std::string* _internal_mutable_scale_based_on();
  public:

  // @@protoc_insertion_point(class_scope:ScaleTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > size_range_;
  mutable std::atomic<int> _size_range_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scale_based_on_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class DistortionTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistortionTransform) */ {
 public:
  inline DistortionTransform() : DistortionTransform(nullptr) {}
  virtual ~DistortionTransform();

  DistortionTransform(const DistortionTransform& from);
  DistortionTransform(DistortionTransform&& from) noexcept
    : DistortionTransform() {
    *this = ::std::move(from);
  }

  inline DistortionTransform& operator=(const DistortionTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistortionTransform& operator=(DistortionTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DistortionTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistortionTransform* internal_default_instance() {
    return reinterpret_cast<const DistortionTransform*>(
               &_DistortionTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DistortionTransform& a, DistortionTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(DistortionTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistortionTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DistortionTransform* New() const final {
    return CreateMaybeMessage<DistortionTransform>(nullptr);
  }

  DistortionTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DistortionTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DistortionTransform& from);
  void MergeFrom(const DistortionTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistortionTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistortionTransform";
  }
  protected:
  explicit DistortionTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkipProbFieldNumber = 1,
    kGridWidthFieldNumber = 2,
    kGridHeightFieldNumber = 3,
    kMagnitudeFieldNumber = 4,
  };
  // float skip_prob = 1;
  void clear_skip_prob();
  float skip_prob() const;
  void set_skip_prob(float value);
  private:
  float _internal_skip_prob() const;
  void _internal_set_skip_prob(float value);
  public:

  // int32 grid_width = 2;
  void clear_grid_width();
  ::PROTOBUF_NAMESPACE_ID::int32 grid_width() const;
  void set_grid_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grid_width() const;
  void _internal_set_grid_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 grid_height = 3;
  void clear_grid_height();
  ::PROTOBUF_NAMESPACE_ID::int32 grid_height() const;
  void set_grid_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grid_height() const;
  void _internal_set_grid_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float magnitude = 4;
  void clear_magnitude();
  float magnitude() const;
  void set_magnitude(float value);
  private:
  float _internal_magnitude() const;
  void _internal_set_magnitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:DistortionTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float skip_prob_;
  ::PROTOBUF_NAMESPACE_ID::int32 grid_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 grid_height_;
  float magnitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class FlipTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FlipTransform) */ {
 public:
  inline FlipTransform() : FlipTransform(nullptr) {}
  virtual ~FlipTransform();

  FlipTransform(const FlipTransform& from);
  FlipTransform(FlipTransform&& from) noexcept
    : FlipTransform() {
    *this = ::std::move(from);
  }

  inline FlipTransform& operator=(const FlipTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlipTransform& operator=(FlipTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlipTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlipTransform* internal_default_instance() {
    return reinterpret_cast<const FlipTransform*>(
               &_FlipTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(FlipTransform& a, FlipTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(FlipTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlipTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlipTransform* New() const final {
    return CreateMaybeMessage<FlipTransform>(nullptr);
  }

  FlipTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlipTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlipTransform& from);
  void MergeFrom(const FlipTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlipTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FlipTransform";
  }
  protected:
  explicit FlipTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlipProbFieldNumber = 1,
    kHorizontalFieldNumber = 2,
    kVerticalFieldNumber = 3,
  };
  // float flip_prob = 1;
  void clear_flip_prob();
  float flip_prob() const;
  void set_flip_prob(float value);
  private:
  float _internal_flip_prob() const;
  void _internal_set_flip_prob(float value);
  public:

  // bool horizontal = 2;
  void clear_horizontal();
  bool horizontal() const;
  void set_horizontal(bool value);
  private:
  bool _internal_horizontal() const;
  void _internal_set_horizontal(bool value);
  public:

  // bool vertical = 3;
  void clear_vertical();
  bool vertical() const;
  void set_vertical(bool value);
  private:
  bool _internal_vertical() const;
  void _internal_set_vertical(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FlipTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float flip_prob_;
  bool horizontal_;
  bool vertical_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class ColorTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColorTransform) */ {
 public:
  inline ColorTransform() : ColorTransform(nullptr) {}
  virtual ~ColorTransform();

  ColorTransform(const ColorTransform& from);
  ColorTransform(ColorTransform&& from) noexcept
    : ColorTransform() {
    *this = ::std::move(from);
  }

  inline ColorTransform& operator=(const ColorTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorTransform& operator=(ColorTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorTransform* internal_default_instance() {
    return reinterpret_cast<const ColorTransform*>(
               &_ColorTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ColorTransform& a, ColorTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorTransform* New() const final {
    return CreateMaybeMessage<ColorTransform>(nullptr);
  }

  ColorTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorTransform& from);
  void MergeFrom(const ColorTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColorTransform";
  }
  protected:
  explicit ColorTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrightnessRangeFieldNumber = 1,
    kContrastRangeFieldNumber = 2,
    kColorRangeFieldNumber = 3,
    kSharpnessRangeFieldNumber = 4,
    kInvertProbFieldNumber = 5,
    kSkipProbFieldNumber = 6,
  };
  // repeated float brightness_range = 1;
  int brightness_range_size() const;
  private:
  int _internal_brightness_range_size() const;
  public:
  void clear_brightness_range();
  private:
  float _internal_brightness_range(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_brightness_range() const;
  void _internal_add_brightness_range(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_brightness_range();
  public:
  float brightness_range(int index) const;
  void set_brightness_range(int index, float value);
  void add_brightness_range(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      brightness_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_brightness_range();

  // repeated float contrast_range = 2;
  int contrast_range_size() const;
  private:
  int _internal_contrast_range_size() const;
  public:
  void clear_contrast_range();
  private:
  float _internal_contrast_range(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_contrast_range() const;
  void _internal_add_contrast_range(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_contrast_range();
  public:
  float contrast_range(int index) const;
  void set_contrast_range(int index, float value);
  void add_contrast_range(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      contrast_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_contrast_range();

  // repeated float color_range = 3;
  int color_range_size() const;
  private:
  int _internal_color_range_size() const;
  public:
  void clear_color_range();
  private:
  float _internal_color_range(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_color_range() const;
  void _internal_add_color_range(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_color_range();
  public:
  float color_range(int index) const;
  void set_color_range(int index, float value);
  void add_color_range(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      color_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_color_range();

  // repeated float sharpness_range = 4;
  int sharpness_range_size() const;
  private:
  int _internal_sharpness_range_size() const;
  public:
  void clear_sharpness_range();
  private:
  float _internal_sharpness_range(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_sharpness_range() const;
  void _internal_add_sharpness_range(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_sharpness_range();
  public:
  float sharpness_range(int index) const;
  void set_sharpness_range(int index, float value);
  void add_sharpness_range(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      sharpness_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_sharpness_range();

  // float invert_prob = 5;
  void clear_invert_prob();
  float invert_prob() const;
  void set_invert_prob(float value);
  private:
  float _internal_invert_prob() const;
  void _internal_set_invert_prob(float value);
  public:

  // float skip_prob = 6;
  void clear_skip_prob();
  float skip_prob() const;
  void set_skip_prob(float value);
  private:
  float _internal_skip_prob() const;
  void _internal_set_skip_prob(float value);
  public:

  // @@protoc_insertion_point(class_scope:ColorTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > brightness_range_;
  mutable std::atomic<int> _brightness_range_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > contrast_range_;
  mutable std::atomic<int> _contrast_range_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > color_range_;
  mutable std::atomic<int> _color_range_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > sharpness_range_;
  mutable std::atomic<int> _sharpness_range_cached_byte_size_;
  float invert_prob_;
  float skip_prob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class LandmarkAlignTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LandmarkAlignTransform) */ {
 public:
  inline LandmarkAlignTransform() : LandmarkAlignTransform(nullptr) {}
  virtual ~LandmarkAlignTransform();

  LandmarkAlignTransform(const LandmarkAlignTransform& from);
  LandmarkAlignTransform(LandmarkAlignTransform&& from) noexcept
    : LandmarkAlignTransform() {
    *this = ::std::move(from);
  }

  inline LandmarkAlignTransform& operator=(const LandmarkAlignTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandmarkAlignTransform& operator=(LandmarkAlignTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LandmarkAlignTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LandmarkAlignTransform* internal_default_instance() {
    return reinterpret_cast<const LandmarkAlignTransform*>(
               &_LandmarkAlignTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(LandmarkAlignTransform& a, LandmarkAlignTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(LandmarkAlignTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandmarkAlignTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LandmarkAlignTransform* New() const final {
    return CreateMaybeMessage<LandmarkAlignTransform>(nullptr);
  }

  LandmarkAlignTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LandmarkAlignTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LandmarkAlignTransform& from);
  void MergeFrom(const LandmarkAlignTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandmarkAlignTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LandmarkAlignTransform";
  }
  protected:
  explicit LandmarkAlignTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformTypeFieldNumber = 1,
    kOutputSizeFieldNumber = 2,
  };
  // string transform_type = 1;
  void clear_transform_type();
  const std::string& transform_type() const;
  void set_transform_type(const std::string& value);
  void set_transform_type(std::string&& value);
  void set_transform_type(const char* value);
  void set_transform_type(const char* value, size_t size);
  std::string* mutable_transform_type();
  std::string* release_transform_type();
  void set_allocated_transform_type(std::string* transform_type);
  private:
  const std::string& _internal_transform_type() const;
  void _internal_set_transform_type(const std::string& value);
  std::string* _internal_mutable_transform_type();
  public:

  // int32 output_size = 2;
  void clear_output_size();
  ::PROTOBUF_NAMESPACE_ID::int32 output_size() const;
  void set_output_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_output_size() const;
  void _internal_set_output_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LandmarkAlignTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 output_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class FilterBbox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FilterBbox) */ {
 public:
  inline FilterBbox() : FilterBbox(nullptr) {}
  virtual ~FilterBbox();

  FilterBbox(const FilterBbox& from);
  FilterBbox(FilterBbox&& from) noexcept
    : FilterBbox() {
    *this = ::std::move(from);
  }

  inline FilterBbox& operator=(const FilterBbox& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterBbox& operator=(FilterBbox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilterBbox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilterBbox* internal_default_instance() {
    return reinterpret_cast<const FilterBbox*>(
               &_FilterBbox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(FilterBbox& a, FilterBbox& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterBbox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterBbox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterBbox* New() const final {
    return CreateMaybeMessage<FilterBbox>(nullptr);
  }

  FilterBbox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterBbox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterBbox& from);
  void MergeFrom(const FilterBbox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterBbox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FilterBbox";
  }
  protected:
  explicit FilterBbox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterBgLabelsFieldNumber = 1,
    kClipFieldNumber = 2,
    kVisibleAreaThresholdFieldNumber = 3,
    kNoBboxesCropSampleFieldNumber = 4,
    kVisibleAbsoluteAreaThresholdFieldNumber = 5,
  };
  // bool filter_bg_labels = 1;
  void clear_filter_bg_labels();
  bool filter_bg_labels() const;
  void set_filter_bg_labels(bool value);
  private:
  bool _internal_filter_bg_labels() const;
  void _internal_set_filter_bg_labels(bool value);
  public:

  // bool clip = 2;
  void clear_clip();
  bool clip() const;
  void set_clip(bool value);
  private:
  bool _internal_clip() const;
  void _internal_set_clip(bool value);
  public:

  // float visible_area_threshold = 3;
  void clear_visible_area_threshold();
  float visible_area_threshold() const;
  void set_visible_area_threshold(float value);
  private:
  float _internal_visible_area_threshold() const;
  void _internal_set_visible_area_threshold(float value);
  public:

  // float no_bboxes_crop_sample = 4;
  void clear_no_bboxes_crop_sample();
  float no_bboxes_crop_sample() const;
  void set_no_bboxes_crop_sample(float value);
  private:
  float _internal_no_bboxes_crop_sample() const;
  void _internal_set_no_bboxes_crop_sample(float value);
  public:

  // float visible_absolute_area_threshold = 5;
  void clear_visible_absolute_area_threshold();
  float visible_absolute_area_threshold() const;
  void set_visible_absolute_area_threshold(float value);
  private:
  float _internal_visible_absolute_area_threshold() const;
  void _internal_set_visible_absolute_area_threshold(float value);
  public:

  // @@protoc_insertion_point(class_scope:FilterBbox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool filter_bg_labels_;
  bool clip_;
  float visible_area_threshold_;
  float no_bboxes_crop_sample_;
  float visible_absolute_area_threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class JPEGRecompression PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JPEGRecompression) */ {
 public:
  inline JPEGRecompression() : JPEGRecompression(nullptr) {}
  virtual ~JPEGRecompression();

  JPEGRecompression(const JPEGRecompression& from);
  JPEGRecompression(JPEGRecompression&& from) noexcept
    : JPEGRecompression() {
    *this = ::std::move(from);
  }

  inline JPEGRecompression& operator=(const JPEGRecompression& from) {
    CopyFrom(from);
    return *this;
  }
  inline JPEGRecompression& operator=(JPEGRecompression&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JPEGRecompression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JPEGRecompression* internal_default_instance() {
    return reinterpret_cast<const JPEGRecompression*>(
               &_JPEGRecompression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(JPEGRecompression& a, JPEGRecompression& b) {
    a.Swap(&b);
  }
  inline void Swap(JPEGRecompression* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JPEGRecompression* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JPEGRecompression* New() const final {
    return CreateMaybeMessage<JPEGRecompression>(nullptr);
  }

  JPEGRecompression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JPEGRecompression>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JPEGRecompression& from);
  void MergeFrom(const JPEGRecompression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JPEGRecompression* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JPEGRecompression";
  }
  protected:
  explicit JPEGRecompression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQminFieldNumber = 1,
    kQmaxFieldNumber = 2,
  };
  // int32 qmin = 1;
  void clear_qmin();
  ::PROTOBUF_NAMESPACE_ID::int32 qmin() const;
  void set_qmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_qmin() const;
  void _internal_set_qmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 qmax = 2;
  void clear_qmax();
  ::PROTOBUF_NAMESPACE_ID::int32 qmax() const;
  void set_qmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_qmax() const;
  void _internal_set_qmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JPEGRecompression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 qmin_;
  ::PROTOBUF_NAMESPACE_ID::int32 qmax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class LogoDataParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogoDataParams) */ {
 public:
  inline LogoDataParams() : LogoDataParams(nullptr) {}
  virtual ~LogoDataParams();

  LogoDataParams(const LogoDataParams& from);
  LogoDataParams(LogoDataParams&& from) noexcept
    : LogoDataParams() {
    *this = ::std::move(from);
  }

  inline LogoDataParams& operator=(const LogoDataParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoDataParams& operator=(LogoDataParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoDataParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoDataParams* internal_default_instance() {
    return reinterpret_cast<const LogoDataParams*>(
               &_LogoDataParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(LogoDataParams& a, LogoDataParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoDataParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoDataParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoDataParams* New() const final {
    return CreateMaybeMessage<LogoDataParams>(nullptr);
  }

  LogoDataParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoDataParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoDataParams& from);
  void MergeFrom(const LogoDataParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoDataParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogoDataParams";
  }
  protected:
  explicit LogoDataParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackgroundCropSizeRangeFieldNumber = 12,
    kCombinationModesFieldNumber = 18,
    kAlphaRangeFieldNumber = 19,
    kJpegRecompressRangeFieldNumber = 20,
    kContrastFieldNumber = 25,
    kColorTintFieldNumber = 26,
    kMultiDatasetFieldNumber = 40,
    kOutputLogosDatasetFieldNumber = 1,
    kPosLogosDatasetFieldNumber = 2,
    kNegLogosDatasetFieldNumber = 3,
    kBackgroundDatasetFieldNumber = 6,
    kModeFieldNumber = 41,
    kPosLogosRatioFieldNumber = 7,
    kNegLogosRatioFieldNumber = 8,
    kOutputSizeFieldNumber = 9,
    kLogoWorkingResFieldNumber = 10,
    kAlphaCropThresholdFieldNumber = 11,
    kMinLogoSizeOfImageFieldNumber = 13,
    kMaxLogoSizeOfImageFieldNumber = 14,
    kPosLogosPregeneratedFieldNumber = 4,
    kNegLogosPregeneratedFieldNumber = 5,
    kHorizontalFlipsFieldNumber = 23,
    kGrayscaleFieldNumber = 24,
    kMinLogoSizeFieldNumber = 15,
    kMaxBlurFieldNumber = 16,
    kColorSwapProbFieldNumber = 17,
    kRotateFieldNumber = 21,
    kRot90FieldNumber = 22,
    kNologoLabelIndFieldNumber = 28,
    kUseNegLogoLabelIndexFieldNumber = 27,
    kRemoveNologoBboxesFieldNumber = 30,
    kMaxLogoOutOfImageFieldNumber = 29,
    kFullImageCropFieldNumber = 31,
    kWorkingResScaleFieldNumber = 32,
    kPosMinOverlapOfWindowThresholdFieldNumber = 33,
    kPosMaxOverlapOfWindowThresholdFieldNumber = 34,
    kNegOverlapOfLogoThresholdFieldNumber = 35,
    kPosOverlapOfLogoThresholdFieldNumber = 36,
    kOverlapMaxLogoAspectFieldNumber = 37,
    kNumViewsFieldNumber = 38,
    kWhiteBgProbFieldNumber = 39,
  };
  // repeated int32 background_crop_size_range = 12;
  int background_crop_size_range_size() const;
  private:
  int _internal_background_crop_size_range_size() const;
  public:
  void clear_background_crop_size_range();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_background_crop_size_range(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_background_crop_size_range() const;
  void _internal_add_background_crop_size_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_background_crop_size_range();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 background_crop_size_range(int index) const;
  void set_background_crop_size_range(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_background_crop_size_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      background_crop_size_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_background_crop_size_range();

  // repeated string combination_modes = 18;
  int combination_modes_size() const;
  private:
  int _internal_combination_modes_size() const;
  public:
  void clear_combination_modes();
  const std::string& combination_modes(int index) const;
  std::string* mutable_combination_modes(int index);
  void set_combination_modes(int index, const std::string& value);
  void set_combination_modes(int index, std::string&& value);
  void set_combination_modes(int index, const char* value);
  void set_combination_modes(int index, const char* value, size_t size);
  std::string* add_combination_modes();
  void add_combination_modes(const std::string& value);
  void add_combination_modes(std::string&& value);
  void add_combination_modes(const char* value);
  void add_combination_modes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& combination_modes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_combination_modes();
  private:
  const std::string& _internal_combination_modes(int index) const;
  std::string* _internal_add_combination_modes();
  public:

  // repeated float alpha_range = 19;
  int alpha_range_size() const;
  private:
  int _internal_alpha_range_size() const;
  public:
  void clear_alpha_range();
  private:
  float _internal_alpha_range(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_alpha_range() const;
  void _internal_add_alpha_range(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_alpha_range();
  public:
  float alpha_range(int index) const;
  void set_alpha_range(int index, float value);
  void add_alpha_range(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      alpha_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_alpha_range();

  // repeated int32 jpeg_recompress_range = 20;
  int jpeg_recompress_range_size() const;
  private:
  int _internal_jpeg_recompress_range_size() const;
  public:
  void clear_jpeg_recompress_range();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_jpeg_recompress_range(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_jpeg_recompress_range() const;
  void _internal_add_jpeg_recompress_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_jpeg_recompress_range();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 jpeg_recompress_range(int index) const;
  void set_jpeg_recompress_range(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_jpeg_recompress_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      jpeg_recompress_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_jpeg_recompress_range();

  // repeated float contrast = 25;
  int contrast_size() const;
  private:
  int _internal_contrast_size() const;
  public:
  void clear_contrast();
  private:
  float _internal_contrast(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_contrast() const;
  void _internal_add_contrast(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_contrast();
  public:
  float contrast(int index) const;
  void set_contrast(int index, float value);
  void add_contrast(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      contrast() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_contrast();

  // repeated float color_tint = 26;
  int color_tint_size() const;
  private:
  int _internal_color_tint_size() const;
  public:
  void clear_color_tint();
  private:
  float _internal_color_tint(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_color_tint() const;
  void _internal_add_color_tint(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_color_tint();
  public:
  float color_tint(int index) const;
  void set_color_tint(int index, float value);
  void add_color_tint(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      color_tint() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_color_tint();

  // repeated .MultiDataset multi_dataset = 40;
  int multi_dataset_size() const;
  private:
  int _internal_multi_dataset_size() const;
  public:
  void clear_multi_dataset();
  ::MultiDataset* mutable_multi_dataset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MultiDataset >*
      mutable_multi_dataset();
  private:
  const ::MultiDataset& _internal_multi_dataset(int index) const;
  ::MultiDataset* _internal_add_multi_dataset();
  public:
  const ::MultiDataset& multi_dataset(int index) const;
  ::MultiDataset* add_multi_dataset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MultiDataset >&
      multi_dataset() const;

  // string output_logos_dataset = 1;
  void clear_output_logos_dataset();
  const std::string& output_logos_dataset() const;
  void set_output_logos_dataset(const std::string& value);
  void set_output_logos_dataset(std::string&& value);
  void set_output_logos_dataset(const char* value);
  void set_output_logos_dataset(const char* value, size_t size);
  std::string* mutable_output_logos_dataset();
  std::string* release_output_logos_dataset();
  void set_allocated_output_logos_dataset(std::string* output_logos_dataset);
  private:
  const std::string& _internal_output_logos_dataset() const;
  void _internal_set_output_logos_dataset(const std::string& value);
  std::string* _internal_mutable_output_logos_dataset();
  public:

  // string pos_logos_dataset = 2;
  void clear_pos_logos_dataset();
  const std::string& pos_logos_dataset() const;
  void set_pos_logos_dataset(const std::string& value);
  void set_pos_logos_dataset(std::string&& value);
  void set_pos_logos_dataset(const char* value);
  void set_pos_logos_dataset(const char* value, size_t size);
  std::string* mutable_pos_logos_dataset();
  std::string* release_pos_logos_dataset();
  void set_allocated_pos_logos_dataset(std::string* pos_logos_dataset);
  private:
  const std::string& _internal_pos_logos_dataset() const;
  void _internal_set_pos_logos_dataset(const std::string& value);
  std::string* _internal_mutable_pos_logos_dataset();
  public:

  // string neg_logos_dataset = 3;
  void clear_neg_logos_dataset();
  const std::string& neg_logos_dataset() const;
  void set_neg_logos_dataset(const std::string& value);
  void set_neg_logos_dataset(std::string&& value);
  void set_neg_logos_dataset(const char* value);
  void set_neg_logos_dataset(const char* value, size_t size);
  std::string* mutable_neg_logos_dataset();
  std::string* release_neg_logos_dataset();
  void set_allocated_neg_logos_dataset(std::string* neg_logos_dataset);
  private:
  const std::string& _internal_neg_logos_dataset() const;
  void _internal_set_neg_logos_dataset(const std::string& value);
  std::string* _internal_mutable_neg_logos_dataset();
  public:

  // string background_dataset = 6;
  void clear_background_dataset();
  const std::string& background_dataset() const;
  void set_background_dataset(const std::string& value);
  void set_background_dataset(std::string&& value);
  void set_background_dataset(const char* value);
  void set_background_dataset(const char* value, size_t size);
  std::string* mutable_background_dataset();
  std::string* release_background_dataset();
  void set_allocated_background_dataset(std::string* background_dataset);
  private:
  const std::string& _internal_background_dataset() const;
  void _internal_set_background_dataset(const std::string& value);
  std::string* _internal_mutable_background_dataset();
  public:

  // string mode = 41;
  void clear_mode();
  const std::string& mode() const;
  void set_mode(const std::string& value);
  void set_mode(std::string&& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  std::string* mutable_mode();
  std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  private:
  const std::string& _internal_mode() const;
  void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // float pos_logos_ratio = 7;
  void clear_pos_logos_ratio();
  float pos_logos_ratio() const;
  void set_pos_logos_ratio(float value);
  private:
  float _internal_pos_logos_ratio() const;
  void _internal_set_pos_logos_ratio(float value);
  public:

  // float neg_logos_ratio = 8;
  void clear_neg_logos_ratio();
  float neg_logos_ratio() const;
  void set_neg_logos_ratio(float value);
  private:
  float _internal_neg_logos_ratio() const;
  void _internal_set_neg_logos_ratio(float value);
  public:

  // int32 output_size = 9;
  void clear_output_size();
  ::PROTOBUF_NAMESPACE_ID::int32 output_size() const;
  void set_output_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_output_size() const;
  void _internal_set_output_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 logo_working_res = 10;
  void clear_logo_working_res();
  ::PROTOBUF_NAMESPACE_ID::int32 logo_working_res() const;
  void set_logo_working_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_logo_working_res() const;
  void _internal_set_logo_working_res(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float alpha_crop_threshold = 11;
  void clear_alpha_crop_threshold();
  float alpha_crop_threshold() const;
  void set_alpha_crop_threshold(float value);
  private:
  float _internal_alpha_crop_threshold() const;
  void _internal_set_alpha_crop_threshold(float value);
  public:

  // float min_logo_size_of_image = 13;
  void clear_min_logo_size_of_image();
  float min_logo_size_of_image() const;
  void set_min_logo_size_of_image(float value);
  private:
  float _internal_min_logo_size_of_image() const;
  void _internal_set_min_logo_size_of_image(float value);
  public:

  // float max_logo_size_of_image = 14;
  void clear_max_logo_size_of_image();
  float max_logo_size_of_image() const;
  void set_max_logo_size_of_image(float value);
  private:
  float _internal_max_logo_size_of_image() const;
  void _internal_set_max_logo_size_of_image(float value);
  public:

  // bool pos_logos_pregenerated = 4;
  void clear_pos_logos_pregenerated();
  bool pos_logos_pregenerated() const;
  void set_pos_logos_pregenerated(bool value);
  private:
  bool _internal_pos_logos_pregenerated() const;
  void _internal_set_pos_logos_pregenerated(bool value);
  public:

  // bool neg_logos_pregenerated = 5;
  void clear_neg_logos_pregenerated();
  bool neg_logos_pregenerated() const;
  void set_neg_logos_pregenerated(bool value);
  private:
  bool _internal_neg_logos_pregenerated() const;
  void _internal_set_neg_logos_pregenerated(bool value);
  public:

  // bool horizontal_flips = 23;
  void clear_horizontal_flips();
  bool horizontal_flips() const;
  void set_horizontal_flips(bool value);
  private:
  bool _internal_horizontal_flips() const;
  void _internal_set_horizontal_flips(bool value);
  public:

  // bool grayscale = 24;
  void clear_grayscale();
  bool grayscale() const;
  void set_grayscale(bool value);
  private:
  bool _internal_grayscale() const;
  void _internal_set_grayscale(bool value);
  public:

  // int32 min_logo_size = 15;
  void clear_min_logo_size();
  ::PROTOBUF_NAMESPACE_ID::int32 min_logo_size() const;
  void set_min_logo_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_logo_size() const;
  void _internal_set_min_logo_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float max_blur = 16;
  void clear_max_blur();
  float max_blur() const;
  void set_max_blur(float value);
  private:
  float _internal_max_blur() const;
  void _internal_set_max_blur(float value);
  public:

  // float color_swap_prob = 17;
  void clear_color_swap_prob();
  float color_swap_prob() const;
  void set_color_swap_prob(float value);
  private:
  float _internal_color_swap_prob() const;
  void _internal_set_color_swap_prob(float value);
  public:

  // float rotate = 21;
  void clear_rotate();
  float rotate() const;
  void set_rotate(float value);
  private:
  float _internal_rotate() const;
  void _internal_set_rotate(float value);
  public:

  // float rot90 = 22;
  void clear_rot90();
  float rot90() const;
  void set_rot90(float value);
  private:
  float _internal_rot90() const;
  void _internal_set_rot90(float value);
  public:

  // int32 nologo_label_ind = 28;
  void clear_nologo_label_ind();
  ::PROTOBUF_NAMESPACE_ID::int32 nologo_label_ind() const;
  void set_nologo_label_ind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nologo_label_ind() const;
  void _internal_set_nologo_label_ind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool use_neg_logo_label_index = 27;
  void clear_use_neg_logo_label_index();
  bool use_neg_logo_label_index() const;
  void set_use_neg_logo_label_index(bool value);
  private:
  bool _internal_use_neg_logo_label_index() const;
  void _internal_set_use_neg_logo_label_index(bool value);
  public:

  // bool remove_nologo_bboxes = 30;
  void clear_remove_nologo_bboxes();
  bool remove_nologo_bboxes() const;
  void set_remove_nologo_bboxes(bool value);
  private:
  bool _internal_remove_nologo_bboxes() const;
  void _internal_set_remove_nologo_bboxes(bool value);
  public:

  // float max_logo_out_of_image = 29;
  void clear_max_logo_out_of_image();
  float max_logo_out_of_image() const;
  void set_max_logo_out_of_image(float value);
  private:
  float _internal_max_logo_out_of_image() const;
  void _internal_set_max_logo_out_of_image(float value);
  public:

  // int32 full_image_crop = 31;
  void clear_full_image_crop();
  ::PROTOBUF_NAMESPACE_ID::int32 full_image_crop() const;
  void set_full_image_crop(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_full_image_crop() const;
  void _internal_set_full_image_crop(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float working_res_scale = 32;
  void clear_working_res_scale();
  float working_res_scale() const;
  void set_working_res_scale(float value);
  private:
  float _internal_working_res_scale() const;
  void _internal_set_working_res_scale(float value);
  public:

  // float pos_min_overlap_of_window_threshold = 33;
  void clear_pos_min_overlap_of_window_threshold();
  float pos_min_overlap_of_window_threshold() const;
  void set_pos_min_overlap_of_window_threshold(float value);
  private:
  float _internal_pos_min_overlap_of_window_threshold() const;
  void _internal_set_pos_min_overlap_of_window_threshold(float value);
  public:

  // float pos_max_overlap_of_window_threshold = 34;
  void clear_pos_max_overlap_of_window_threshold();
  float pos_max_overlap_of_window_threshold() const;
  void set_pos_max_overlap_of_window_threshold(float value);
  private:
  float _internal_pos_max_overlap_of_window_threshold() const;
  void _internal_set_pos_max_overlap_of_window_threshold(float value);
  public:

  // float neg_overlap_of_logo_threshold = 35;
  void clear_neg_overlap_of_logo_threshold();
  float neg_overlap_of_logo_threshold() const;
  void set_neg_overlap_of_logo_threshold(float value);
  private:
  float _internal_neg_overlap_of_logo_threshold() const;
  void _internal_set_neg_overlap_of_logo_threshold(float value);
  public:

  // float pos_overlap_of_logo_threshold = 36;
  void clear_pos_overlap_of_logo_threshold();
  float pos_overlap_of_logo_threshold() const;
  void set_pos_overlap_of_logo_threshold(float value);
  private:
  float _internal_pos_overlap_of_logo_threshold() const;
  void _internal_set_pos_overlap_of_logo_threshold(float value);
  public:

  // float overlap_max_logo_aspect = 37;
  void clear_overlap_max_logo_aspect();
  float overlap_max_logo_aspect() const;
  void set_overlap_max_logo_aspect(float value);
  private:
  float _internal_overlap_max_logo_aspect() const;
  void _internal_set_overlap_max_logo_aspect(float value);
  public:

  // int32 num_views = 38;
  void clear_num_views();
  ::PROTOBUF_NAMESPACE_ID::int32 num_views() const;
  void set_num_views(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_views() const;
  void _internal_set_num_views(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float white_bg_prob = 39;
  void clear_white_bg_prob();
  float white_bg_prob() const;
  void set_white_bg_prob(float value);
  private:
  float _internal_white_bg_prob() const;
  void _internal_set_white_bg_prob(float value);
  public:

  // @@protoc_insertion_point(class_scope:LogoDataParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > background_crop_size_range_;
  mutable std::atomic<int> _background_crop_size_range_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> combination_modes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > alpha_range_;
  mutable std::atomic<int> _alpha_range_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > jpeg_recompress_range_;
  mutable std::atomic<int> _jpeg_recompress_range_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > contrast_;
  mutable std::atomic<int> _contrast_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > color_tint_;
  mutable std::atomic<int> _color_tint_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MultiDataset > multi_dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_logos_dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pos_logos_dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr neg_logos_dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr background_dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  float pos_logos_ratio_;
  float neg_logos_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 output_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 logo_working_res_;
  float alpha_crop_threshold_;
  float min_logo_size_of_image_;
  float max_logo_size_of_image_;
  bool pos_logos_pregenerated_;
  bool neg_logos_pregenerated_;
  bool horizontal_flips_;
  bool grayscale_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_logo_size_;
  float max_blur_;
  float color_swap_prob_;
  float rotate_;
  float rot90_;
  ::PROTOBUF_NAMESPACE_ID::int32 nologo_label_ind_;
  bool use_neg_logo_label_index_;
  bool remove_nologo_bboxes_;
  float max_logo_out_of_image_;
  ::PROTOBUF_NAMESPACE_ID::int32 full_image_crop_;
  float working_res_scale_;
  float pos_min_overlap_of_window_threshold_;
  float pos_max_overlap_of_window_threshold_;
  float neg_overlap_of_logo_threshold_;
  float pos_overlap_of_logo_threshold_;
  float overlap_max_logo_aspect_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_views_;
  float white_bg_prob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class WhitespaceTokenizer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WhitespaceTokenizer) */ {
 public:
  inline WhitespaceTokenizer() : WhitespaceTokenizer(nullptr) {}
  virtual ~WhitespaceTokenizer();

  WhitespaceTokenizer(const WhitespaceTokenizer& from);
  WhitespaceTokenizer(WhitespaceTokenizer&& from) noexcept
    : WhitespaceTokenizer() {
    *this = ::std::move(from);
  }

  inline WhitespaceTokenizer& operator=(const WhitespaceTokenizer& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhitespaceTokenizer& operator=(WhitespaceTokenizer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WhitespaceTokenizer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WhitespaceTokenizer* internal_default_instance() {
    return reinterpret_cast<const WhitespaceTokenizer*>(
               &_WhitespaceTokenizer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(WhitespaceTokenizer& a, WhitespaceTokenizer& b) {
    a.Swap(&b);
  }
  inline void Swap(WhitespaceTokenizer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhitespaceTokenizer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WhitespaceTokenizer* New() const final {
    return CreateMaybeMessage<WhitespaceTokenizer>(nullptr);
  }

  WhitespaceTokenizer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WhitespaceTokenizer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WhitespaceTokenizer& from);
  void MergeFrom(const WhitespaceTokenizer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhitespaceTokenizer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WhitespaceTokenizer";
  }
  protected:
  explicit WhitespaceTokenizer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPadTokenFieldNumber = 1,
    kMaxLengthFieldNumber = 2,
    kNoStripSpecialFieldNumber = 3,
    kPreserveCaseFieldNumber = 4,
  };
  // string pad_token = 1;
  void clear_pad_token();
  const std::string& pad_token() const;
  void set_pad_token(const std::string& value);
  void set_pad_token(std::string&& value);
  void set_pad_token(const char* value);
  void set_pad_token(const char* value, size_t size);
  std::string* mutable_pad_token();
  std::string* release_pad_token();
  void set_allocated_pad_token(std::string* pad_token);
  private:
  const std::string& _internal_pad_token() const;
  void _internal_set_pad_token(const std::string& value);
  std::string* _internal_mutable_pad_token();
  public:

  // int32 max_length = 2;
  void clear_max_length();
  ::PROTOBUF_NAMESPACE_ID::int32 max_length() const;
  void set_max_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_length() const;
  void _internal_set_max_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool no_strip_special = 3;
  void clear_no_strip_special();
  bool no_strip_special() const;
  void set_no_strip_special(bool value);
  private:
  bool _internal_no_strip_special() const;
  void _internal_set_no_strip_special(bool value);
  public:

  // bool preserve_case = 4;
  void clear_preserve_case();
  bool preserve_case() const;
  void set_preserve_case(bool value);
  private:
  bool _internal_preserve_case() const;
  void _internal_set_preserve_case(bool value);
  public:

  // @@protoc_insertion_point(class_scope:WhitespaceTokenizer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pad_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_length_;
  bool no_strip_special_;
  bool preserve_case_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class TokenIndexer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TokenIndexer) */ {
 public:
  inline TokenIndexer() : TokenIndexer(nullptr) {}
  virtual ~TokenIndexer();

  TokenIndexer(const TokenIndexer& from);
  TokenIndexer(TokenIndexer&& from) noexcept
    : TokenIndexer() {
    *this = ::std::move(from);
  }

  inline TokenIndexer& operator=(const TokenIndexer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenIndexer& operator=(TokenIndexer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenIndexer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenIndexer* internal_default_instance() {
    return reinterpret_cast<const TokenIndexer*>(
               &_TokenIndexer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(TokenIndexer& a, TokenIndexer& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenIndexer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenIndexer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenIndexer* New() const final {
    return CreateMaybeMessage<TokenIndexer>(nullptr);
  }

  TokenIndexer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenIndexer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenIndexer& from);
  void MergeFrom(const TokenIndexer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenIndexer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TokenIndexer";
  }
  protected:
  explicit TokenIndexer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVocabPathFieldNumber = 1,
    kNumOovBucketsFieldNumber = 2,
  };
  // string vocab_path = 1;
  void clear_vocab_path();
  const std::string& vocab_path() const;
  void set_vocab_path(const std::string& value);
  void set_vocab_path(std::string&& value);
  void set_vocab_path(const char* value);
  void set_vocab_path(const char* value, size_t size);
  std::string* mutable_vocab_path();
  std::string* release_vocab_path();
  void set_allocated_vocab_path(std::string* vocab_path);
  private:
  const std::string& _internal_vocab_path() const;
  void _internal_set_vocab_path(const std::string& value);
  std::string* _internal_mutable_vocab_path();
  public:

  // int32 num_oov_buckets = 2;
  void clear_num_oov_buckets();
  ::PROTOBUF_NAMESPACE_ID::int32 num_oov_buckets() const;
  void set_num_oov_buckets(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_oov_buckets() const;
  void _internal_set_num_oov_buckets(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TokenIndexer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vocab_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_oov_buckets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class AudioMFCCTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AudioMFCCTransform) */ {
 public:
  inline AudioMFCCTransform() : AudioMFCCTransform(nullptr) {}
  virtual ~AudioMFCCTransform();

  AudioMFCCTransform(const AudioMFCCTransform& from);
  AudioMFCCTransform(AudioMFCCTransform&& from) noexcept
    : AudioMFCCTransform() {
    *this = ::std::move(from);
  }

  inline AudioMFCCTransform& operator=(const AudioMFCCTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioMFCCTransform& operator=(AudioMFCCTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioMFCCTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioMFCCTransform* internal_default_instance() {
    return reinterpret_cast<const AudioMFCCTransform*>(
               &_AudioMFCCTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(AudioMFCCTransform& a, AudioMFCCTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioMFCCTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioMFCCTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioMFCCTransform* New() const final {
    return CreateMaybeMessage<AudioMFCCTransform>(nullptr);
  }

  AudioMFCCTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioMFCCTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioMFCCTransform& from);
  void MergeFrom(const AudioMFCCTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioMFCCTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AudioMFCCTransform";
  }
  protected:
  explicit AudioMFCCTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumcepFieldNumber = 1,
    kNumcontextFieldNumber = 2,
  };
  // int32 numcep = 1;
  void clear_numcep();
  ::PROTOBUF_NAMESPACE_ID::int32 numcep() const;
  void set_numcep(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numcep() const;
  void _internal_set_numcep(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 numcontext = 2;
  void clear_numcontext();
  ::PROTOBUF_NAMESPACE_ID::int32 numcontext() const;
  void set_numcontext(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numcontext() const;
  void _internal_set_numcontext(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AudioMFCCTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 numcep_;
  ::PROTOBUF_NAMESPACE_ID::int32 numcontext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class FilterInvalidItems PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FilterInvalidItems) */ {
 public:
  inline FilterInvalidItems() : FilterInvalidItems(nullptr) {}
  virtual ~FilterInvalidItems();

  FilterInvalidItems(const FilterInvalidItems& from);
  FilterInvalidItems(FilterInvalidItems&& from) noexcept
    : FilterInvalidItems() {
    *this = ::std::move(from);
  }

  inline FilterInvalidItems& operator=(const FilterInvalidItems& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterInvalidItems& operator=(FilterInvalidItems&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilterInvalidItems& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilterInvalidItems* internal_default_instance() {
    return reinterpret_cast<const FilterInvalidItems*>(
               &_FilterInvalidItems_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(FilterInvalidItems& a, FilterInvalidItems& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterInvalidItems* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterInvalidItems* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterInvalidItems* New() const final {
    return CreateMaybeMessage<FilterInvalidItems>(nullptr);
  }

  FilterInvalidItems* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterInvalidItems>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterInvalidItems& from);
  void MergeFrom(const FilterInvalidItems& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterInvalidItems* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FilterInvalidItems";
  }
  protected:
  explicit FilterInvalidItems(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequireImagesFieldNumber = 1,
    kRequireBboxesFieldNumber = 2,
    kRequireLabelsFieldNumber = 3,
  };
  // bool require_images = 1;
  void clear_require_images();
  bool require_images() const;
  void set_require_images(bool value);
  private:
  bool _internal_require_images() const;
  void _internal_set_require_images(bool value);
  public:

  // bool require_bboxes = 2;
  void clear_require_bboxes();
  bool require_bboxes() const;
  void set_require_bboxes(bool value);
  private:
  bool _internal_require_bboxes() const;
  void _internal_set_require_bboxes(bool value);
  public:

  // bool require_labels = 3;
  void clear_require_labels();
  bool require_labels() const;
  void set_require_labels(bool value);
  private:
  bool _internal_require_labels() const;
  void _internal_set_require_labels(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FilterInvalidItems)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool require_images_;
  bool require_bboxes_;
  bool require_labels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class MiniBatchItemStage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MiniBatchItemStage) */ {
 public:
  inline MiniBatchItemStage() : MiniBatchItemStage(nullptr) {}
  virtual ~MiniBatchItemStage();

  MiniBatchItemStage(const MiniBatchItemStage& from);
  MiniBatchItemStage(MiniBatchItemStage&& from) noexcept
    : MiniBatchItemStage() {
    *this = ::std::move(from);
  }

  inline MiniBatchItemStage& operator=(const MiniBatchItemStage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiniBatchItemStage& operator=(MiniBatchItemStage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MiniBatchItemStage& default_instance();

  enum StageCase {
    kImageCropTransform = 1,
    kLabelSmoother = 2,
    kLabelDropper = 3,
    kMaxNumLabelDropper = 4,
    kLabelWeight = 5,
    kSsdRandomCrop = 6,
    kRelativeCropTransform = 7,
    kAspectRatioTransform = 8,
    kAffineTransform = 9,
    kFlipTransform = 10,
    kJpegRecompression = 11,
    kFilterBbox = 12,
    kColorTransform = 13,
    kScaleTransform = 14,
    kLabelsFromBboxes = 15,
    kDistortionTransform = 16,
    kWhitespaceTokenizer = 17,
    kTokenIndexer = 18,
    kAudioMfccTransform = 19,
    kOcrCropTransform = 20,
    kFilterInvalidItems = 21,
    kLandmarkAlignTransform = 22,
    STAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MiniBatchItemStage* internal_default_instance() {
    return reinterpret_cast<const MiniBatchItemStage*>(
               &_MiniBatchItemStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(MiniBatchItemStage& a, MiniBatchItemStage& b) {
    a.Swap(&b);
  }
  inline void Swap(MiniBatchItemStage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiniBatchItemStage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MiniBatchItemStage* New() const final {
    return CreateMaybeMessage<MiniBatchItemStage>(nullptr);
  }

  MiniBatchItemStage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MiniBatchItemStage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MiniBatchItemStage& from);
  void MergeFrom(const MiniBatchItemStage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MiniBatchItemStage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MiniBatchItemStage";
  }
  protected:
  explicit MiniBatchItemStage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageCropTransformFieldNumber = 1,
    kLabelSmootherFieldNumber = 2,
    kLabelDropperFieldNumber = 3,
    kMaxNumLabelDropperFieldNumber = 4,
    kLabelWeightFieldNumber = 5,
    kSsdRandomCropFieldNumber = 6,
    kRelativeCropTransformFieldNumber = 7,
    kAspectRatioTransformFieldNumber = 8,
    kAffineTransformFieldNumber = 9,
    kFlipTransformFieldNumber = 10,
    kJpegRecompressionFieldNumber = 11,
    kFilterBboxFieldNumber = 12,
    kColorTransformFieldNumber = 13,
    kScaleTransformFieldNumber = 14,
    kLabelsFromBboxesFieldNumber = 15,
    kDistortionTransformFieldNumber = 16,
    kWhitespaceTokenizerFieldNumber = 17,
    kTokenIndexerFieldNumber = 18,
    kAudioMfccTransformFieldNumber = 19,
    kOcrCropTransformFieldNumber = 20,
    kFilterInvalidItemsFieldNumber = 21,
    kLandmarkAlignTransformFieldNumber = 22,
  };
  // .ImageCropTransform image_crop_transform = 1;
  bool has_image_crop_transform() const;
  private:
  bool _internal_has_image_crop_transform() const;
  public:
  void clear_image_crop_transform();
  const ::ImageCropTransform& image_crop_transform() const;
  ::ImageCropTransform* release_image_crop_transform();
  ::ImageCropTransform* mutable_image_crop_transform();
  void set_allocated_image_crop_transform(::ImageCropTransform* image_crop_transform);
  private:
  const ::ImageCropTransform& _internal_image_crop_transform() const;
  ::ImageCropTransform* _internal_mutable_image_crop_transform();
  public:
  void unsafe_arena_set_allocated_image_crop_transform(
      ::ImageCropTransform* image_crop_transform);
  ::ImageCropTransform* unsafe_arena_release_image_crop_transform();

  // .LabelSmoother label_smoother = 2;
  bool has_label_smoother() const;
  private:
  bool _internal_has_label_smoother() const;
  public:
  void clear_label_smoother();
  const ::LabelSmoother& label_smoother() const;
  ::LabelSmoother* release_label_smoother();
  ::LabelSmoother* mutable_label_smoother();
  void set_allocated_label_smoother(::LabelSmoother* label_smoother);
  private:
  const ::LabelSmoother& _internal_label_smoother() const;
  ::LabelSmoother* _internal_mutable_label_smoother();
  public:
  void unsafe_arena_set_allocated_label_smoother(
      ::LabelSmoother* label_smoother);
  ::LabelSmoother* unsafe_arena_release_label_smoother();

  // .LabelDropper label_dropper = 3;
  bool has_label_dropper() const;
  private:
  bool _internal_has_label_dropper() const;
  public:
  void clear_label_dropper();
  const ::LabelDropper& label_dropper() const;
  ::LabelDropper* release_label_dropper();
  ::LabelDropper* mutable_label_dropper();
  void set_allocated_label_dropper(::LabelDropper* label_dropper);
  private:
  const ::LabelDropper& _internal_label_dropper() const;
  ::LabelDropper* _internal_mutable_label_dropper();
  public:
  void unsafe_arena_set_allocated_label_dropper(
      ::LabelDropper* label_dropper);
  ::LabelDropper* unsafe_arena_release_label_dropper();

  // .MaxNumLabelDropper max_num_label_dropper = 4;
  bool has_max_num_label_dropper() const;
  private:
  bool _internal_has_max_num_label_dropper() const;
  public:
  void clear_max_num_label_dropper();
  const ::MaxNumLabelDropper& max_num_label_dropper() const;
  ::MaxNumLabelDropper* release_max_num_label_dropper();
  ::MaxNumLabelDropper* mutable_max_num_label_dropper();
  void set_allocated_max_num_label_dropper(::MaxNumLabelDropper* max_num_label_dropper);
  private:
  const ::MaxNumLabelDropper& _internal_max_num_label_dropper() const;
  ::MaxNumLabelDropper* _internal_mutable_max_num_label_dropper();
  public:
  void unsafe_arena_set_allocated_max_num_label_dropper(
      ::MaxNumLabelDropper* max_num_label_dropper);
  ::MaxNumLabelDropper* unsafe_arena_release_max_num_label_dropper();

  // .LabelWeight label_weight = 5;
  bool has_label_weight() const;
  private:
  bool _internal_has_label_weight() const;
  public:
  void clear_label_weight();
  const ::LabelWeight& label_weight() const;
  ::LabelWeight* release_label_weight();
  ::LabelWeight* mutable_label_weight();
  void set_allocated_label_weight(::LabelWeight* label_weight);
  private:
  const ::LabelWeight& _internal_label_weight() const;
  ::LabelWeight* _internal_mutable_label_weight();
  public:
  void unsafe_arena_set_allocated_label_weight(
      ::LabelWeight* label_weight);
  ::LabelWeight* unsafe_arena_release_label_weight();

  // .SSDRandomCropOperation ssd_random_crop = 6;
  bool has_ssd_random_crop() const;
  private:
  bool _internal_has_ssd_random_crop() const;
  public:
  void clear_ssd_random_crop();
  const ::SSDRandomCropOperation& ssd_random_crop() const;
  ::SSDRandomCropOperation* release_ssd_random_crop();
  ::SSDRandomCropOperation* mutable_ssd_random_crop();
  void set_allocated_ssd_random_crop(::SSDRandomCropOperation* ssd_random_crop);
  private:
  const ::SSDRandomCropOperation& _internal_ssd_random_crop() const;
  ::SSDRandomCropOperation* _internal_mutable_ssd_random_crop();
  public:
  void unsafe_arena_set_allocated_ssd_random_crop(
      ::SSDRandomCropOperation* ssd_random_crop);
  ::SSDRandomCropOperation* unsafe_arena_release_ssd_random_crop();

  // .RelativeCropTransform relative_crop_transform = 7;
  bool has_relative_crop_transform() const;
  private:
  bool _internal_has_relative_crop_transform() const;
  public:
  void clear_relative_crop_transform();
  const ::RelativeCropTransform& relative_crop_transform() const;
  ::RelativeCropTransform* release_relative_crop_transform();
  ::RelativeCropTransform* mutable_relative_crop_transform();
  void set_allocated_relative_crop_transform(::RelativeCropTransform* relative_crop_transform);
  private:
  const ::RelativeCropTransform& _internal_relative_crop_transform() const;
  ::RelativeCropTransform* _internal_mutable_relative_crop_transform();
  public:
  void unsafe_arena_set_allocated_relative_crop_transform(
      ::RelativeCropTransform* relative_crop_transform);
  ::RelativeCropTransform* unsafe_arena_release_relative_crop_transform();

  // .AspectRatioTransform aspect_ratio_transform = 8;
  bool has_aspect_ratio_transform() const;
  private:
  bool _internal_has_aspect_ratio_transform() const;
  public:
  void clear_aspect_ratio_transform();
  const ::AspectRatioTransform& aspect_ratio_transform() const;
  ::AspectRatioTransform* release_aspect_ratio_transform();
  ::AspectRatioTransform* mutable_aspect_ratio_transform();
  void set_allocated_aspect_ratio_transform(::AspectRatioTransform* aspect_ratio_transform);
  private:
  const ::AspectRatioTransform& _internal_aspect_ratio_transform() const;
  ::AspectRatioTransform* _internal_mutable_aspect_ratio_transform();
  public:
  void unsafe_arena_set_allocated_aspect_ratio_transform(
      ::AspectRatioTransform* aspect_ratio_transform);
  ::AspectRatioTransform* unsafe_arena_release_aspect_ratio_transform();

  // .AffineTransform affine_transform = 9;
  bool has_affine_transform() const;
  private:
  bool _internal_has_affine_transform() const;
  public:
  void clear_affine_transform();
  const ::AffineTransform& affine_transform() const;
  ::AffineTransform* release_affine_transform();
  ::AffineTransform* mutable_affine_transform();
  void set_allocated_affine_transform(::AffineTransform* affine_transform);
  private:
  const ::AffineTransform& _internal_affine_transform() const;
  ::AffineTransform* _internal_mutable_affine_transform();
  public:
  void unsafe_arena_set_allocated_affine_transform(
      ::AffineTransform* affine_transform);
  ::AffineTransform* unsafe_arena_release_affine_transform();

  // .FlipTransform flip_transform = 10;
  bool has_flip_transform() const;
  private:
  bool _internal_has_flip_transform() const;
  public:
  void clear_flip_transform();
  const ::FlipTransform& flip_transform() const;
  ::FlipTransform* release_flip_transform();
  ::FlipTransform* mutable_flip_transform();
  void set_allocated_flip_transform(::FlipTransform* flip_transform);
  private:
  const ::FlipTransform& _internal_flip_transform() const;
  ::FlipTransform* _internal_mutable_flip_transform();
  public:
  void unsafe_arena_set_allocated_flip_transform(
      ::FlipTransform* flip_transform);
  ::FlipTransform* unsafe_arena_release_flip_transform();

  // .JPEGRecompression jpeg_recompression = 11;
  bool has_jpeg_recompression() const;
  private:
  bool _internal_has_jpeg_recompression() const;
  public:
  void clear_jpeg_recompression();
  const ::JPEGRecompression& jpeg_recompression() const;
  ::JPEGRecompression* release_jpeg_recompression();
  ::JPEGRecompression* mutable_jpeg_recompression();
  void set_allocated_jpeg_recompression(::JPEGRecompression* jpeg_recompression);
  private:
  const ::JPEGRecompression& _internal_jpeg_recompression() const;
  ::JPEGRecompression* _internal_mutable_jpeg_recompression();
  public:
  void unsafe_arena_set_allocated_jpeg_recompression(
      ::JPEGRecompression* jpeg_recompression);
  ::JPEGRecompression* unsafe_arena_release_jpeg_recompression();

  // .FilterBbox filter_bbox = 12;
  bool has_filter_bbox() const;
  private:
  bool _internal_has_filter_bbox() const;
  public:
  void clear_filter_bbox();
  const ::FilterBbox& filter_bbox() const;
  ::FilterBbox* release_filter_bbox();
  ::FilterBbox* mutable_filter_bbox();
  void set_allocated_filter_bbox(::FilterBbox* filter_bbox);
  private:
  const ::FilterBbox& _internal_filter_bbox() const;
  ::FilterBbox* _internal_mutable_filter_bbox();
  public:
  void unsafe_arena_set_allocated_filter_bbox(
      ::FilterBbox* filter_bbox);
  ::FilterBbox* unsafe_arena_release_filter_bbox();

  // .ColorTransform color_transform = 13;
  bool has_color_transform() const;
  private:
  bool _internal_has_color_transform() const;
  public:
  void clear_color_transform();
  const ::ColorTransform& color_transform() const;
  ::ColorTransform* release_color_transform();
  ::ColorTransform* mutable_color_transform();
  void set_allocated_color_transform(::ColorTransform* color_transform);
  private:
  const ::ColorTransform& _internal_color_transform() const;
  ::ColorTransform* _internal_mutable_color_transform();
  public:
  void unsafe_arena_set_allocated_color_transform(
      ::ColorTransform* color_transform);
  ::ColorTransform* unsafe_arena_release_color_transform();

  // .ScaleTransform scale_transform = 14;
  bool has_scale_transform() const;
  private:
  bool _internal_has_scale_transform() const;
  public:
  void clear_scale_transform();
  const ::ScaleTransform& scale_transform() const;
  ::ScaleTransform* release_scale_transform();
  ::ScaleTransform* mutable_scale_transform();
  void set_allocated_scale_transform(::ScaleTransform* scale_transform);
  private:
  const ::ScaleTransform& _internal_scale_transform() const;
  ::ScaleTransform* _internal_mutable_scale_transform();
  public:
  void unsafe_arena_set_allocated_scale_transform(
      ::ScaleTransform* scale_transform);
  ::ScaleTransform* unsafe_arena_release_scale_transform();

  // .LabelsFromBboxes labels_from_bboxes = 15;
  bool has_labels_from_bboxes() const;
  private:
  bool _internal_has_labels_from_bboxes() const;
  public:
  void clear_labels_from_bboxes();
  const ::LabelsFromBboxes& labels_from_bboxes() const;
  ::LabelsFromBboxes* release_labels_from_bboxes();
  ::LabelsFromBboxes* mutable_labels_from_bboxes();
  void set_allocated_labels_from_bboxes(::LabelsFromBboxes* labels_from_bboxes);
  private:
  const ::LabelsFromBboxes& _internal_labels_from_bboxes() const;
  ::LabelsFromBboxes* _internal_mutable_labels_from_bboxes();
  public:
  void unsafe_arena_set_allocated_labels_from_bboxes(
      ::LabelsFromBboxes* labels_from_bboxes);
  ::LabelsFromBboxes* unsafe_arena_release_labels_from_bboxes();

  // .DistortionTransform distortion_transform = 16;
  bool has_distortion_transform() const;
  private:
  bool _internal_has_distortion_transform() const;
  public:
  void clear_distortion_transform();
  const ::DistortionTransform& distortion_transform() const;
  ::DistortionTransform* release_distortion_transform();
  ::DistortionTransform* mutable_distortion_transform();
  void set_allocated_distortion_transform(::DistortionTransform* distortion_transform);
  private:
  const ::DistortionTransform& _internal_distortion_transform() const;
  ::DistortionTransform* _internal_mutable_distortion_transform();
  public:
  void unsafe_arena_set_allocated_distortion_transform(
      ::DistortionTransform* distortion_transform);
  ::DistortionTransform* unsafe_arena_release_distortion_transform();

  // .WhitespaceTokenizer whitespace_tokenizer = 17;
  bool has_whitespace_tokenizer() const;
  private:
  bool _internal_has_whitespace_tokenizer() const;
  public:
  void clear_whitespace_tokenizer();
  const ::WhitespaceTokenizer& whitespace_tokenizer() const;
  ::WhitespaceTokenizer* release_whitespace_tokenizer();
  ::WhitespaceTokenizer* mutable_whitespace_tokenizer();
  void set_allocated_whitespace_tokenizer(::WhitespaceTokenizer* whitespace_tokenizer);
  private:
  const ::WhitespaceTokenizer& _internal_whitespace_tokenizer() const;
  ::WhitespaceTokenizer* _internal_mutable_whitespace_tokenizer();
  public:
  void unsafe_arena_set_allocated_whitespace_tokenizer(
      ::WhitespaceTokenizer* whitespace_tokenizer);
  ::WhitespaceTokenizer* unsafe_arena_release_whitespace_tokenizer();

  // .TokenIndexer token_indexer = 18;
  bool has_token_indexer() const;
  private:
  bool _internal_has_token_indexer() const;
  public:
  void clear_token_indexer();
  const ::TokenIndexer& token_indexer() const;
  ::TokenIndexer* release_token_indexer();
  ::TokenIndexer* mutable_token_indexer();
  void set_allocated_token_indexer(::TokenIndexer* token_indexer);
  private:
  const ::TokenIndexer& _internal_token_indexer() const;
  ::TokenIndexer* _internal_mutable_token_indexer();
  public:
  void unsafe_arena_set_allocated_token_indexer(
      ::TokenIndexer* token_indexer);
  ::TokenIndexer* unsafe_arena_release_token_indexer();

  // .AudioMFCCTransform audio_mfcc_transform = 19;
  bool has_audio_mfcc_transform() const;
  private:
  bool _internal_has_audio_mfcc_transform() const;
  public:
  void clear_audio_mfcc_transform();
  const ::AudioMFCCTransform& audio_mfcc_transform() const;
  ::AudioMFCCTransform* release_audio_mfcc_transform();
  ::AudioMFCCTransform* mutable_audio_mfcc_transform();
  void set_allocated_audio_mfcc_transform(::AudioMFCCTransform* audio_mfcc_transform);
  private:
  const ::AudioMFCCTransform& _internal_audio_mfcc_transform() const;
  ::AudioMFCCTransform* _internal_mutable_audio_mfcc_transform();
  public:
  void unsafe_arena_set_allocated_audio_mfcc_transform(
      ::AudioMFCCTransform* audio_mfcc_transform);
  ::AudioMFCCTransform* unsafe_arena_release_audio_mfcc_transform();

  // .OCRCropTransform ocr_crop_transform = 20;
  bool has_ocr_crop_transform() const;
  private:
  bool _internal_has_ocr_crop_transform() const;
  public:
  void clear_ocr_crop_transform();
  const ::OCRCropTransform& ocr_crop_transform() const;
  ::OCRCropTransform* release_ocr_crop_transform();
  ::OCRCropTransform* mutable_ocr_crop_transform();
  void set_allocated_ocr_crop_transform(::OCRCropTransform* ocr_crop_transform);
  private:
  const ::OCRCropTransform& _internal_ocr_crop_transform() const;
  ::OCRCropTransform* _internal_mutable_ocr_crop_transform();
  public:
  void unsafe_arena_set_allocated_ocr_crop_transform(
      ::OCRCropTransform* ocr_crop_transform);
  ::OCRCropTransform* unsafe_arena_release_ocr_crop_transform();

  // .FilterInvalidItems filter_invalid_items = 21;
  bool has_filter_invalid_items() const;
  private:
  bool _internal_has_filter_invalid_items() const;
  public:
  void clear_filter_invalid_items();
  const ::FilterInvalidItems& filter_invalid_items() const;
  ::FilterInvalidItems* release_filter_invalid_items();
  ::FilterInvalidItems* mutable_filter_invalid_items();
  void set_allocated_filter_invalid_items(::FilterInvalidItems* filter_invalid_items);
  private:
  const ::FilterInvalidItems& _internal_filter_invalid_items() const;
  ::FilterInvalidItems* _internal_mutable_filter_invalid_items();
  public:
  void unsafe_arena_set_allocated_filter_invalid_items(
      ::FilterInvalidItems* filter_invalid_items);
  ::FilterInvalidItems* unsafe_arena_release_filter_invalid_items();

  // .LandmarkAlignTransform landmark_align_transform = 22;
  bool has_landmark_align_transform() const;
  private:
  bool _internal_has_landmark_align_transform() const;
  public:
  void clear_landmark_align_transform();
  const ::LandmarkAlignTransform& landmark_align_transform() const;
  ::LandmarkAlignTransform* release_landmark_align_transform();
  ::LandmarkAlignTransform* mutable_landmark_align_transform();
  void set_allocated_landmark_align_transform(::LandmarkAlignTransform* landmark_align_transform);
  private:
  const ::LandmarkAlignTransform& _internal_landmark_align_transform() const;
  ::LandmarkAlignTransform* _internal_mutable_landmark_align_transform();
  public:
  void unsafe_arena_set_allocated_landmark_align_transform(
      ::LandmarkAlignTransform* landmark_align_transform);
  ::LandmarkAlignTransform* unsafe_arena_release_landmark_align_transform();

  void clear_stage();
  StageCase stage_case() const;
  // @@protoc_insertion_point(class_scope:MiniBatchItemStage)
 private:
  class _Internal;
  void set_has_image_crop_transform();
  void set_has_label_smoother();
  void set_has_label_dropper();
  void set_has_max_num_label_dropper();
  void set_has_label_weight();
  void set_has_ssd_random_crop();
  void set_has_relative_crop_transform();
  void set_has_aspect_ratio_transform();
  void set_has_affine_transform();
  void set_has_flip_transform();
  void set_has_jpeg_recompression();
  void set_has_filter_bbox();
  void set_has_color_transform();
  void set_has_scale_transform();
  void set_has_labels_from_bboxes();
  void set_has_distortion_transform();
  void set_has_whitespace_tokenizer();
  void set_has_token_indexer();
  void set_has_audio_mfcc_transform();
  void set_has_ocr_crop_transform();
  void set_has_filter_invalid_items();
  void set_has_landmark_align_transform();

  inline bool has_stage() const;
  inline void clear_has_stage();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StageUnion {
    StageUnion() {}
    ::ImageCropTransform* image_crop_transform_;
    ::LabelSmoother* label_smoother_;
    ::LabelDropper* label_dropper_;
    ::MaxNumLabelDropper* max_num_label_dropper_;
    ::LabelWeight* label_weight_;
    ::SSDRandomCropOperation* ssd_random_crop_;
    ::RelativeCropTransform* relative_crop_transform_;
    ::AspectRatioTransform* aspect_ratio_transform_;
    ::AffineTransform* affine_transform_;
    ::FlipTransform* flip_transform_;
    ::JPEGRecompression* jpeg_recompression_;
    ::FilterBbox* filter_bbox_;
    ::ColorTransform* color_transform_;
    ::ScaleTransform* scale_transform_;
    ::LabelsFromBboxes* labels_from_bboxes_;
    ::DistortionTransform* distortion_transform_;
    ::WhitespaceTokenizer* whitespace_tokenizer_;
    ::TokenIndexer* token_indexer_;
    ::AudioMFCCTransform* audio_mfcc_transform_;
    ::OCRCropTransform* ocr_crop_transform_;
    ::FilterInvalidItems* filter_invalid_items_;
    ::LandmarkAlignTransform* landmark_align_transform_;
  } stage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class gRPCReaderParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCReaderParams) */ {
 public:
  inline gRPCReaderParams() : gRPCReaderParams(nullptr) {}
  virtual ~gRPCReaderParams();

  gRPCReaderParams(const gRPCReaderParams& from);
  gRPCReaderParams(gRPCReaderParams&& from) noexcept
    : gRPCReaderParams() {
    *this = ::std::move(from);
  }

  inline gRPCReaderParams& operator=(const gRPCReaderParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline gRPCReaderParams& operator=(gRPCReaderParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const gRPCReaderParams& default_instance();

  enum ParamsCase {
    kDataProviderParams = 2,
    kSerializedParams = 3,
    PARAMS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gRPCReaderParams* internal_default_instance() {
    return reinterpret_cast<const gRPCReaderParams*>(
               &_gRPCReaderParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(gRPCReaderParams& a, gRPCReaderParams& b) {
    a.Swap(&b);
  }
  inline void Swap(gRPCReaderParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gRPCReaderParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline gRPCReaderParams* New() const final {
    return CreateMaybeMessage<gRPCReaderParams>(nullptr);
  }

  gRPCReaderParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<gRPCReaderParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const gRPCReaderParams& from);
  void MergeFrom(const gRPCReaderParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gRPCReaderParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCReaderParams";
  }
  protected:
  explicit gRPCReaderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeneratorClassNameFieldNumber = 1,
    kBatchSizeFieldNumber = 4,
    kDataProviderParamsFieldNumber = 2,
    kSerializedParamsFieldNumber = 3,
  };
  // string generator_class_name = 1;
  void clear_generator_class_name();
  const std::string& generator_class_name() const;
  void set_generator_class_name(const std::string& value);
  void set_generator_class_name(std::string&& value);
  void set_generator_class_name(const char* value);
  void set_generator_class_name(const char* value, size_t size);
  std::string* mutable_generator_class_name();
  std::string* release_generator_class_name();
  void set_allocated_generator_class_name(std::string* generator_class_name);
  private:
  const std::string& _internal_generator_class_name() const;
  void _internal_set_generator_class_name(const std::string& value);
  std::string* _internal_mutable_generator_class_name();
  public:

  // int32 batch_size = 4;
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .DataProviderParams data_provider_params = 2;
  bool has_data_provider_params() const;
  private:
  bool _internal_has_data_provider_params() const;
  public:
  void clear_data_provider_params();
  const ::DataProviderParams& data_provider_params() const;
  ::DataProviderParams* release_data_provider_params();
  ::DataProviderParams* mutable_data_provider_params();
  void set_allocated_data_provider_params(::DataProviderParams* data_provider_params);
  private:
  const ::DataProviderParams& _internal_data_provider_params() const;
  ::DataProviderParams* _internal_mutable_data_provider_params();
  public:
  void unsafe_arena_set_allocated_data_provider_params(
      ::DataProviderParams* data_provider_params);
  ::DataProviderParams* unsafe_arena_release_data_provider_params();

  // bytes serialized_params = 3;
  private:
  bool _internal_has_serialized_params() const;
  public:
  void clear_serialized_params();
  const std::string& serialized_params() const;
  void set_serialized_params(const std::string& value);
  void set_serialized_params(std::string&& value);
  void set_serialized_params(const char* value);
  void set_serialized_params(const void* value, size_t size);
  std::string* mutable_serialized_params();
  std::string* release_serialized_params();
  void set_allocated_serialized_params(std::string* serialized_params);
  private:
  const std::string& _internal_serialized_params() const;
  void _internal_set_serialized_params(const std::string& value);
  std::string* _internal_mutable_serialized_params();
  public:

  void clear_params();
  ParamsCase params_case() const;
  // @@protoc_insertion_point(class_scope:gRPCReaderParams)
 private:
  class _Internal;
  void set_has_data_provider_params();
  void set_has_serialized_params();

  inline bool has_params() const;
  inline void clear_has_params();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr generator_class_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size_;
  union ParamsUnion {
    ParamsUnion() {}
    ::DataProviderParams* data_provider_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_params_;
  } params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class FakeBoxes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FakeBoxes) */ {
 public:
  inline FakeBoxes() : FakeBoxes(nullptr) {}
  virtual ~FakeBoxes();

  FakeBoxes(const FakeBoxes& from);
  FakeBoxes(FakeBoxes&& from) noexcept
    : FakeBoxes() {
    *this = ::std::move(from);
  }

  inline FakeBoxes& operator=(const FakeBoxes& from) {
    CopyFrom(from);
    return *this;
  }
  inline FakeBoxes& operator=(FakeBoxes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FakeBoxes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FakeBoxes* internal_default_instance() {
    return reinterpret_cast<const FakeBoxes*>(
               &_FakeBoxes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(FakeBoxes& a, FakeBoxes& b) {
    a.Swap(&b);
  }
  inline void Swap(FakeBoxes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FakeBoxes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FakeBoxes* New() const final {
    return CreateMaybeMessage<FakeBoxes>(nullptr);
  }

  FakeBoxes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FakeBoxes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FakeBoxes& from);
  void MergeFrom(const FakeBoxes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FakeBoxes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FakeBoxes";
  }
  protected:
  explicit FakeBoxes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativeScaleRangeFieldNumber = 1,
    kRelativeAspectRangeFieldNumber = 2,
    kImsizeFieldNumber = 5,
    kFillColorFieldNumber = 3,
    kBackgroundColorFieldNumber = 4,
    kMinDimFieldNumber = 6,
  };
  // repeated float relative_scale_range = 1;
  int relative_scale_range_size() const;
  private:
  int _internal_relative_scale_range_size() const;
  public:
  void clear_relative_scale_range();
  private:
  float _internal_relative_scale_range(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_relative_scale_range() const;
  void _internal_add_relative_scale_range(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_relative_scale_range();
  public:
  float relative_scale_range(int index) const;
  void set_relative_scale_range(int index, float value);
  void add_relative_scale_range(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      relative_scale_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_relative_scale_range();

  // repeated float relative_aspect_range = 2;
  int relative_aspect_range_size() const;
  private:
  int _internal_relative_aspect_range_size() const;
  public:
  void clear_relative_aspect_range();
  private:
  float _internal_relative_aspect_range(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_relative_aspect_range() const;
  void _internal_add_relative_aspect_range(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_relative_aspect_range();
  public:
  float relative_aspect_range(int index) const;
  void set_relative_aspect_range(int index, float value);
  void add_relative_aspect_range(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      relative_aspect_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_relative_aspect_range();

  // repeated uint32 imsize = 5;
  int imsize_size() const;
  private:
  int _internal_imsize_size() const;
  public:
  void clear_imsize();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_imsize(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_imsize() const;
  void _internal_add_imsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_imsize();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 imsize(int index) const;
  void set_imsize(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_imsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      imsize() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_imsize();

  // uint32 fill_color = 3;
  void clear_fill_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 fill_color() const;
  void set_fill_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fill_color() const;
  void _internal_set_fill_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 background_color = 4;
  void clear_background_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 background_color() const;
  void set_background_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_background_color() const;
  void _internal_set_background_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 min_dim = 6;
  void clear_min_dim();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_dim() const;
  void set_min_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_dim() const;
  void _internal_set_min_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FakeBoxes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > relative_scale_range_;
  mutable std::atomic<int> _relative_scale_range_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > relative_aspect_range_;
  mutable std::atomic<int> _relative_aspect_range_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > imsize_;
  mutable std::atomic<int> _imsize_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fill_color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 background_color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_dim_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fprovider_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataProviderParams

// .ProcessingParams processing_params = 1;
inline bool DataProviderParams::_internal_has_processing_params() const {
  return this != internal_default_instance() && processing_params_ != nullptr;
}
inline bool DataProviderParams::has_processing_params() const {
  return _internal_has_processing_params();
}
inline void DataProviderParams::clear_processing_params() {
  if (GetArena() == nullptr && processing_params_ != nullptr) {
    delete processing_params_;
  }
  processing_params_ = nullptr;
}
inline const ::ProcessingParams& DataProviderParams::_internal_processing_params() const {
  const ::ProcessingParams* p = processing_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ProcessingParams*>(
      &::_ProcessingParams_default_instance_);
}
inline const ::ProcessingParams& DataProviderParams::processing_params() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.processing_params)
  return _internal_processing_params();
}
inline void DataProviderParams::unsafe_arena_set_allocated_processing_params(
    ::ProcessingParams* processing_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(processing_params_);
  }
  processing_params_ = processing_params;
  if (processing_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.processing_params)
}
inline ::ProcessingParams* DataProviderParams::release_processing_params() {
  
  ::ProcessingParams* temp = processing_params_;
  processing_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProcessingParams* DataProviderParams::unsafe_arena_release_processing_params() {
  // @@protoc_insertion_point(field_release:DataProviderParams.processing_params)
  
  ::ProcessingParams* temp = processing_params_;
  processing_params_ = nullptr;
  return temp;
}
inline ::ProcessingParams* DataProviderParams::_internal_mutable_processing_params() {
  
  if (processing_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProcessingParams>(GetArena());
    processing_params_ = p;
  }
  return processing_params_;
}
inline ::ProcessingParams* DataProviderParams::mutable_processing_params() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.processing_params)
  return _internal_mutable_processing_params();
}
inline void DataProviderParams::set_allocated_processing_params(::ProcessingParams* processing_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete processing_params_;
  }
  if (processing_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(processing_params);
    if (message_arena != submessage_arena) {
      processing_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processing_params, submessage_arena);
    }
    
  } else {
    
  }
  processing_params_ = processing_params;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.processing_params)
}

// .ImageCropTransform image_crop_transform = 2 [deprecated = true];
inline bool DataProviderParams::_internal_has_image_crop_transform() const {
  return this != internal_default_instance() && image_crop_transform_ != nullptr;
}
inline bool DataProviderParams::has_image_crop_transform() const {
  return _internal_has_image_crop_transform();
}
inline void DataProviderParams::clear_image_crop_transform() {
  if (GetArena() == nullptr && image_crop_transform_ != nullptr) {
    delete image_crop_transform_;
  }
  image_crop_transform_ = nullptr;
}
inline const ::ImageCropTransform& DataProviderParams::_internal_image_crop_transform() const {
  const ::ImageCropTransform* p = image_crop_transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ImageCropTransform*>(
      &::_ImageCropTransform_default_instance_);
}
inline const ::ImageCropTransform& DataProviderParams::image_crop_transform() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.image_crop_transform)
  return _internal_image_crop_transform();
}
inline void DataProviderParams::unsafe_arena_set_allocated_image_crop_transform(
    ::ImageCropTransform* image_crop_transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_crop_transform_);
  }
  image_crop_transform_ = image_crop_transform;
  if (image_crop_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.image_crop_transform)
}
inline ::ImageCropTransform* DataProviderParams::release_image_crop_transform() {
  
  ::ImageCropTransform* temp = image_crop_transform_;
  image_crop_transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ImageCropTransform* DataProviderParams::unsafe_arena_release_image_crop_transform() {
  // @@protoc_insertion_point(field_release:DataProviderParams.image_crop_transform)
  
  ::ImageCropTransform* temp = image_crop_transform_;
  image_crop_transform_ = nullptr;
  return temp;
}
inline ::ImageCropTransform* DataProviderParams::_internal_mutable_image_crop_transform() {
  
  if (image_crop_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::ImageCropTransform>(GetArena());
    image_crop_transform_ = p;
  }
  return image_crop_transform_;
}
inline ::ImageCropTransform* DataProviderParams::mutable_image_crop_transform() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.image_crop_transform)
  return _internal_mutable_image_crop_transform();
}
inline void DataProviderParams::set_allocated_image_crop_transform(::ImageCropTransform* image_crop_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_crop_transform_;
  }
  if (image_crop_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_crop_transform);
    if (message_arena != submessage_arena) {
      image_crop_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_crop_transform, submessage_arena);
    }
    
  } else {
    
  }
  image_crop_transform_ = image_crop_transform;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.image_crop_transform)
}

// .SavedOutputParams saved_output = 3 [deprecated = true];
inline bool DataProviderParams::_internal_has_saved_output() const {
  return this != internal_default_instance() && saved_output_ != nullptr;
}
inline bool DataProviderParams::has_saved_output() const {
  return _internal_has_saved_output();
}
inline void DataProviderParams::clear_saved_output() {
  if (GetArena() == nullptr && saved_output_ != nullptr) {
    delete saved_output_;
  }
  saved_output_ = nullptr;
}
inline const ::SavedOutputParams& DataProviderParams::_internal_saved_output() const {
  const ::SavedOutputParams* p = saved_output_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SavedOutputParams*>(
      &::_SavedOutputParams_default_instance_);
}
inline const ::SavedOutputParams& DataProviderParams::saved_output() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.saved_output)
  return _internal_saved_output();
}
inline void DataProviderParams::unsafe_arena_set_allocated_saved_output(
    ::SavedOutputParams* saved_output) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(saved_output_);
  }
  saved_output_ = saved_output;
  if (saved_output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.saved_output)
}
inline ::SavedOutputParams* DataProviderParams::release_saved_output() {
  
  ::SavedOutputParams* temp = saved_output_;
  saved_output_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SavedOutputParams* DataProviderParams::unsafe_arena_release_saved_output() {
  // @@protoc_insertion_point(field_release:DataProviderParams.saved_output)
  
  ::SavedOutputParams* temp = saved_output_;
  saved_output_ = nullptr;
  return temp;
}
inline ::SavedOutputParams* DataProviderParams::_internal_mutable_saved_output() {
  
  if (saved_output_ == nullptr) {
    auto* p = CreateMaybeMessage<::SavedOutputParams>(GetArena());
    saved_output_ = p;
  }
  return saved_output_;
}
inline ::SavedOutputParams* DataProviderParams::mutable_saved_output() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.saved_output)
  return _internal_mutable_saved_output();
}
inline void DataProviderParams::set_allocated_saved_output(::SavedOutputParams* saved_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete saved_output_;
  }
  if (saved_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(saved_output);
    if (message_arena != submessage_arena) {
      saved_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saved_output, submessage_arena);
    }
    
  } else {
    
  }
  saved_output_ = saved_output;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.saved_output)
}

// repeated .MultiDataset multi_dataset = 4 [deprecated = true];
inline int DataProviderParams::_internal_multi_dataset_size() const {
  return multi_dataset_.size();
}
inline int DataProviderParams::multi_dataset_size() const {
  return _internal_multi_dataset_size();
}
inline void DataProviderParams::clear_multi_dataset() {
  multi_dataset_.Clear();
}
inline ::MultiDataset* DataProviderParams::mutable_multi_dataset(int index) {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.multi_dataset)
  return multi_dataset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MultiDataset >*
DataProviderParams::mutable_multi_dataset() {
  // @@protoc_insertion_point(field_mutable_list:DataProviderParams.multi_dataset)
  return &multi_dataset_;
}
inline const ::MultiDataset& DataProviderParams::_internal_multi_dataset(int index) const {
  return multi_dataset_.Get(index);
}
inline const ::MultiDataset& DataProviderParams::multi_dataset(int index) const {
  // @@protoc_insertion_point(field_get:DataProviderParams.multi_dataset)
  return _internal_multi_dataset(index);
}
inline ::MultiDataset* DataProviderParams::_internal_add_multi_dataset() {
  return multi_dataset_.Add();
}
inline ::MultiDataset* DataProviderParams::add_multi_dataset() {
  // @@protoc_insertion_point(field_add:DataProviderParams.multi_dataset)
  return _internal_add_multi_dataset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MultiDataset >&
DataProviderParams::multi_dataset() const {
  // @@protoc_insertion_point(field_list:DataProviderParams.multi_dataset)
  return multi_dataset_;
}

// repeated .LabelSetter label_setter = 5 [deprecated = true];
inline int DataProviderParams::_internal_label_setter_size() const {
  return label_setter_.size();
}
inline int DataProviderParams::label_setter_size() const {
  return _internal_label_setter_size();
}
inline void DataProviderParams::clear_label_setter() {
  label_setter_.Clear();
}
inline ::LabelSetter* DataProviderParams::mutable_label_setter(int index) {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.label_setter)
  return label_setter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelSetter >*
DataProviderParams::mutable_label_setter() {
  // @@protoc_insertion_point(field_mutable_list:DataProviderParams.label_setter)
  return &label_setter_;
}
inline const ::LabelSetter& DataProviderParams::_internal_label_setter(int index) const {
  return label_setter_.Get(index);
}
inline const ::LabelSetter& DataProviderParams::label_setter(int index) const {
  // @@protoc_insertion_point(field_get:DataProviderParams.label_setter)
  return _internal_label_setter(index);
}
inline ::LabelSetter* DataProviderParams::_internal_add_label_setter() {
  return label_setter_.Add();
}
inline ::LabelSetter* DataProviderParams::add_label_setter() {
  // @@protoc_insertion_point(field_add:DataProviderParams.label_setter)
  return _internal_add_label_setter();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelSetter >&
DataProviderParams::label_setter() const {
  // @@protoc_insertion_point(field_list:DataProviderParams.label_setter)
  return label_setter_;
}

// repeated .LabelMapper label_mapper = 6 [deprecated = true];
inline int DataProviderParams::_internal_label_mapper_size() const {
  return label_mapper_.size();
}
inline int DataProviderParams::label_mapper_size() const {
  return _internal_label_mapper_size();
}
inline void DataProviderParams::clear_label_mapper() {
  label_mapper_.Clear();
}
inline ::LabelMapper* DataProviderParams::mutable_label_mapper(int index) {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.label_mapper)
  return label_mapper_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelMapper >*
DataProviderParams::mutable_label_mapper() {
  // @@protoc_insertion_point(field_mutable_list:DataProviderParams.label_mapper)
  return &label_mapper_;
}
inline const ::LabelMapper& DataProviderParams::_internal_label_mapper(int index) const {
  return label_mapper_.Get(index);
}
inline const ::LabelMapper& DataProviderParams::label_mapper(int index) const {
  // @@protoc_insertion_point(field_get:DataProviderParams.label_mapper)
  return _internal_label_mapper(index);
}
inline ::LabelMapper* DataProviderParams::_internal_add_label_mapper() {
  return label_mapper_.Add();
}
inline ::LabelMapper* DataProviderParams::add_label_mapper() {
  // @@protoc_insertion_point(field_add:DataProviderParams.label_mapper)
  return _internal_add_label_mapper();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelMapper >&
DataProviderParams::label_mapper() const {
  // @@protoc_insertion_point(field_list:DataProviderParams.label_mapper)
  return label_mapper_;
}

// .LabelSmoother label_smoother = 7 [deprecated = true];
inline bool DataProviderParams::_internal_has_label_smoother() const {
  return this != internal_default_instance() && label_smoother_ != nullptr;
}
inline bool DataProviderParams::has_label_smoother() const {
  return _internal_has_label_smoother();
}
inline void DataProviderParams::clear_label_smoother() {
  if (GetArena() == nullptr && label_smoother_ != nullptr) {
    delete label_smoother_;
  }
  label_smoother_ = nullptr;
}
inline const ::LabelSmoother& DataProviderParams::_internal_label_smoother() const {
  const ::LabelSmoother* p = label_smoother_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LabelSmoother*>(
      &::_LabelSmoother_default_instance_);
}
inline const ::LabelSmoother& DataProviderParams::label_smoother() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.label_smoother)
  return _internal_label_smoother();
}
inline void DataProviderParams::unsafe_arena_set_allocated_label_smoother(
    ::LabelSmoother* label_smoother) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_smoother_);
  }
  label_smoother_ = label_smoother;
  if (label_smoother) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.label_smoother)
}
inline ::LabelSmoother* DataProviderParams::release_label_smoother() {
  
  ::LabelSmoother* temp = label_smoother_;
  label_smoother_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LabelSmoother* DataProviderParams::unsafe_arena_release_label_smoother() {
  // @@protoc_insertion_point(field_release:DataProviderParams.label_smoother)
  
  ::LabelSmoother* temp = label_smoother_;
  label_smoother_ = nullptr;
  return temp;
}
inline ::LabelSmoother* DataProviderParams::_internal_mutable_label_smoother() {
  
  if (label_smoother_ == nullptr) {
    auto* p = CreateMaybeMessage<::LabelSmoother>(GetArena());
    label_smoother_ = p;
  }
  return label_smoother_;
}
inline ::LabelSmoother* DataProviderParams::mutable_label_smoother() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.label_smoother)
  return _internal_mutable_label_smoother();
}
inline void DataProviderParams::set_allocated_label_smoother(::LabelSmoother* label_smoother) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete label_smoother_;
  }
  if (label_smoother) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(label_smoother);
    if (message_arena != submessage_arena) {
      label_smoother = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_smoother, submessage_arena);
    }
    
  } else {
    
  }
  label_smoother_ = label_smoother;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.label_smoother)
}

// .LabelDropper label_dropper = 8 [deprecated = true];
inline bool DataProviderParams::_internal_has_label_dropper() const {
  return this != internal_default_instance() && label_dropper_ != nullptr;
}
inline bool DataProviderParams::has_label_dropper() const {
  return _internal_has_label_dropper();
}
inline void DataProviderParams::clear_label_dropper() {
  if (GetArena() == nullptr && label_dropper_ != nullptr) {
    delete label_dropper_;
  }
  label_dropper_ = nullptr;
}
inline const ::LabelDropper& DataProviderParams::_internal_label_dropper() const {
  const ::LabelDropper* p = label_dropper_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LabelDropper*>(
      &::_LabelDropper_default_instance_);
}
inline const ::LabelDropper& DataProviderParams::label_dropper() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.label_dropper)
  return _internal_label_dropper();
}
inline void DataProviderParams::unsafe_arena_set_allocated_label_dropper(
    ::LabelDropper* label_dropper) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_dropper_);
  }
  label_dropper_ = label_dropper;
  if (label_dropper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.label_dropper)
}
inline ::LabelDropper* DataProviderParams::release_label_dropper() {
  
  ::LabelDropper* temp = label_dropper_;
  label_dropper_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LabelDropper* DataProviderParams::unsafe_arena_release_label_dropper() {
  // @@protoc_insertion_point(field_release:DataProviderParams.label_dropper)
  
  ::LabelDropper* temp = label_dropper_;
  label_dropper_ = nullptr;
  return temp;
}
inline ::LabelDropper* DataProviderParams::_internal_mutable_label_dropper() {
  
  if (label_dropper_ == nullptr) {
    auto* p = CreateMaybeMessage<::LabelDropper>(GetArena());
    label_dropper_ = p;
  }
  return label_dropper_;
}
inline ::LabelDropper* DataProviderParams::mutable_label_dropper() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.label_dropper)
  return _internal_mutable_label_dropper();
}
inline void DataProviderParams::set_allocated_label_dropper(::LabelDropper* label_dropper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete label_dropper_;
  }
  if (label_dropper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(label_dropper);
    if (message_arena != submessage_arena) {
      label_dropper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_dropper, submessage_arena);
    }
    
  } else {
    
  }
  label_dropper_ = label_dropper;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.label_dropper)
}

// .MaxNumLabelDropper max_num_label_dropper = 9 [deprecated = true];
inline bool DataProviderParams::_internal_has_max_num_label_dropper() const {
  return this != internal_default_instance() && max_num_label_dropper_ != nullptr;
}
inline bool DataProviderParams::has_max_num_label_dropper() const {
  return _internal_has_max_num_label_dropper();
}
inline void DataProviderParams::clear_max_num_label_dropper() {
  if (GetArena() == nullptr && max_num_label_dropper_ != nullptr) {
    delete max_num_label_dropper_;
  }
  max_num_label_dropper_ = nullptr;
}
inline const ::MaxNumLabelDropper& DataProviderParams::_internal_max_num_label_dropper() const {
  const ::MaxNumLabelDropper* p = max_num_label_dropper_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaxNumLabelDropper*>(
      &::_MaxNumLabelDropper_default_instance_);
}
inline const ::MaxNumLabelDropper& DataProviderParams::max_num_label_dropper() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.max_num_label_dropper)
  return _internal_max_num_label_dropper();
}
inline void DataProviderParams::unsafe_arena_set_allocated_max_num_label_dropper(
    ::MaxNumLabelDropper* max_num_label_dropper) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_num_label_dropper_);
  }
  max_num_label_dropper_ = max_num_label_dropper;
  if (max_num_label_dropper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.max_num_label_dropper)
}
inline ::MaxNumLabelDropper* DataProviderParams::release_max_num_label_dropper() {
  
  ::MaxNumLabelDropper* temp = max_num_label_dropper_;
  max_num_label_dropper_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MaxNumLabelDropper* DataProviderParams::unsafe_arena_release_max_num_label_dropper() {
  // @@protoc_insertion_point(field_release:DataProviderParams.max_num_label_dropper)
  
  ::MaxNumLabelDropper* temp = max_num_label_dropper_;
  max_num_label_dropper_ = nullptr;
  return temp;
}
inline ::MaxNumLabelDropper* DataProviderParams::_internal_mutable_max_num_label_dropper() {
  
  if (max_num_label_dropper_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaxNumLabelDropper>(GetArena());
    max_num_label_dropper_ = p;
  }
  return max_num_label_dropper_;
}
inline ::MaxNumLabelDropper* DataProviderParams::mutable_max_num_label_dropper() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.max_num_label_dropper)
  return _internal_mutable_max_num_label_dropper();
}
inline void DataProviderParams::set_allocated_max_num_label_dropper(::MaxNumLabelDropper* max_num_label_dropper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete max_num_label_dropper_;
  }
  if (max_num_label_dropper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(max_num_label_dropper);
    if (message_arena != submessage_arena) {
      max_num_label_dropper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_num_label_dropper, submessage_arena);
    }
    
  } else {
    
  }
  max_num_label_dropper_ = max_num_label_dropper;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.max_num_label_dropper)
}

// .LabelWeight label_weight = 10 [deprecated = true];
inline bool DataProviderParams::_internal_has_label_weight() const {
  return this != internal_default_instance() && label_weight_ != nullptr;
}
inline bool DataProviderParams::has_label_weight() const {
  return _internal_has_label_weight();
}
inline void DataProviderParams::clear_label_weight() {
  if (GetArena() == nullptr && label_weight_ != nullptr) {
    delete label_weight_;
  }
  label_weight_ = nullptr;
}
inline const ::LabelWeight& DataProviderParams::_internal_label_weight() const {
  const ::LabelWeight* p = label_weight_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LabelWeight*>(
      &::_LabelWeight_default_instance_);
}
inline const ::LabelWeight& DataProviderParams::label_weight() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.label_weight)
  return _internal_label_weight();
}
inline void DataProviderParams::unsafe_arena_set_allocated_label_weight(
    ::LabelWeight* label_weight) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_weight_);
  }
  label_weight_ = label_weight;
  if (label_weight) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.label_weight)
}
inline ::LabelWeight* DataProviderParams::release_label_weight() {
  
  ::LabelWeight* temp = label_weight_;
  label_weight_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LabelWeight* DataProviderParams::unsafe_arena_release_label_weight() {
  // @@protoc_insertion_point(field_release:DataProviderParams.label_weight)
  
  ::LabelWeight* temp = label_weight_;
  label_weight_ = nullptr;
  return temp;
}
inline ::LabelWeight* DataProviderParams::_internal_mutable_label_weight() {
  
  if (label_weight_ == nullptr) {
    auto* p = CreateMaybeMessage<::LabelWeight>(GetArena());
    label_weight_ = p;
  }
  return label_weight_;
}
inline ::LabelWeight* DataProviderParams::mutable_label_weight() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.label_weight)
  return _internal_mutable_label_weight();
}
inline void DataProviderParams::set_allocated_label_weight(::LabelWeight* label_weight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete label_weight_;
  }
  if (label_weight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(label_weight);
    if (message_arena != submessage_arena) {
      label_weight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_weight, submessage_arena);
    }
    
  } else {
    
  }
  label_weight_ = label_weight;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.label_weight)
}

// .SSDRandomCropOperation ssd_random_crop = 11 [deprecated = true];
inline bool DataProviderParams::_internal_has_ssd_random_crop() const {
  return this != internal_default_instance() && ssd_random_crop_ != nullptr;
}
inline bool DataProviderParams::has_ssd_random_crop() const {
  return _internal_has_ssd_random_crop();
}
inline void DataProviderParams::clear_ssd_random_crop() {
  if (GetArena() == nullptr && ssd_random_crop_ != nullptr) {
    delete ssd_random_crop_;
  }
  ssd_random_crop_ = nullptr;
}
inline const ::SSDRandomCropOperation& DataProviderParams::_internal_ssd_random_crop() const {
  const ::SSDRandomCropOperation* p = ssd_random_crop_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SSDRandomCropOperation*>(
      &::_SSDRandomCropOperation_default_instance_);
}
inline const ::SSDRandomCropOperation& DataProviderParams::ssd_random_crop() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.ssd_random_crop)
  return _internal_ssd_random_crop();
}
inline void DataProviderParams::unsafe_arena_set_allocated_ssd_random_crop(
    ::SSDRandomCropOperation* ssd_random_crop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssd_random_crop_);
  }
  ssd_random_crop_ = ssd_random_crop;
  if (ssd_random_crop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.ssd_random_crop)
}
inline ::SSDRandomCropOperation* DataProviderParams::release_ssd_random_crop() {
  
  ::SSDRandomCropOperation* temp = ssd_random_crop_;
  ssd_random_crop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SSDRandomCropOperation* DataProviderParams::unsafe_arena_release_ssd_random_crop() {
  // @@protoc_insertion_point(field_release:DataProviderParams.ssd_random_crop)
  
  ::SSDRandomCropOperation* temp = ssd_random_crop_;
  ssd_random_crop_ = nullptr;
  return temp;
}
inline ::SSDRandomCropOperation* DataProviderParams::_internal_mutable_ssd_random_crop() {
  
  if (ssd_random_crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSDRandomCropOperation>(GetArena());
    ssd_random_crop_ = p;
  }
  return ssd_random_crop_;
}
inline ::SSDRandomCropOperation* DataProviderParams::mutable_ssd_random_crop() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.ssd_random_crop)
  return _internal_mutable_ssd_random_crop();
}
inline void DataProviderParams::set_allocated_ssd_random_crop(::SSDRandomCropOperation* ssd_random_crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ssd_random_crop_;
  }
  if (ssd_random_crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ssd_random_crop);
    if (message_arena != submessage_arena) {
      ssd_random_crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssd_random_crop, submessage_arena);
    }
    
  } else {
    
  }
  ssd_random_crop_ = ssd_random_crop;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.ssd_random_crop)
}

// .RelativeCropTransform relative_crop_transform = 12 [deprecated = true];
inline bool DataProviderParams::_internal_has_relative_crop_transform() const {
  return this != internal_default_instance() && relative_crop_transform_ != nullptr;
}
inline bool DataProviderParams::has_relative_crop_transform() const {
  return _internal_has_relative_crop_transform();
}
inline void DataProviderParams::clear_relative_crop_transform() {
  if (GetArena() == nullptr && relative_crop_transform_ != nullptr) {
    delete relative_crop_transform_;
  }
  relative_crop_transform_ = nullptr;
}
inline const ::RelativeCropTransform& DataProviderParams::_internal_relative_crop_transform() const {
  const ::RelativeCropTransform* p = relative_crop_transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RelativeCropTransform*>(
      &::_RelativeCropTransform_default_instance_);
}
inline const ::RelativeCropTransform& DataProviderParams::relative_crop_transform() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.relative_crop_transform)
  return _internal_relative_crop_transform();
}
inline void DataProviderParams::unsafe_arena_set_allocated_relative_crop_transform(
    ::RelativeCropTransform* relative_crop_transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_crop_transform_);
  }
  relative_crop_transform_ = relative_crop_transform;
  if (relative_crop_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.relative_crop_transform)
}
inline ::RelativeCropTransform* DataProviderParams::release_relative_crop_transform() {
  
  ::RelativeCropTransform* temp = relative_crop_transform_;
  relative_crop_transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RelativeCropTransform* DataProviderParams::unsafe_arena_release_relative_crop_transform() {
  // @@protoc_insertion_point(field_release:DataProviderParams.relative_crop_transform)
  
  ::RelativeCropTransform* temp = relative_crop_transform_;
  relative_crop_transform_ = nullptr;
  return temp;
}
inline ::RelativeCropTransform* DataProviderParams::_internal_mutable_relative_crop_transform() {
  
  if (relative_crop_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::RelativeCropTransform>(GetArena());
    relative_crop_transform_ = p;
  }
  return relative_crop_transform_;
}
inline ::RelativeCropTransform* DataProviderParams::mutable_relative_crop_transform() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.relative_crop_transform)
  return _internal_mutable_relative_crop_transform();
}
inline void DataProviderParams::set_allocated_relative_crop_transform(::RelativeCropTransform* relative_crop_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete relative_crop_transform_;
  }
  if (relative_crop_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(relative_crop_transform);
    if (message_arena != submessage_arena) {
      relative_crop_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_crop_transform, submessage_arena);
    }
    
  } else {
    
  }
  relative_crop_transform_ = relative_crop_transform;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.relative_crop_transform)
}

// .AffineTransform affine_transform = 13 [deprecated = true];
inline bool DataProviderParams::_internal_has_affine_transform() const {
  return this != internal_default_instance() && affine_transform_ != nullptr;
}
inline bool DataProviderParams::has_affine_transform() const {
  return _internal_has_affine_transform();
}
inline void DataProviderParams::clear_affine_transform() {
  if (GetArena() == nullptr && affine_transform_ != nullptr) {
    delete affine_transform_;
  }
  affine_transform_ = nullptr;
}
inline const ::AffineTransform& DataProviderParams::_internal_affine_transform() const {
  const ::AffineTransform* p = affine_transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::AffineTransform*>(
      &::_AffineTransform_default_instance_);
}
inline const ::AffineTransform& DataProviderParams::affine_transform() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.affine_transform)
  return _internal_affine_transform();
}
inline void DataProviderParams::unsafe_arena_set_allocated_affine_transform(
    ::AffineTransform* affine_transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affine_transform_);
  }
  affine_transform_ = affine_transform;
  if (affine_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.affine_transform)
}
inline ::AffineTransform* DataProviderParams::release_affine_transform() {
  
  ::AffineTransform* temp = affine_transform_;
  affine_transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AffineTransform* DataProviderParams::unsafe_arena_release_affine_transform() {
  // @@protoc_insertion_point(field_release:DataProviderParams.affine_transform)
  
  ::AffineTransform* temp = affine_transform_;
  affine_transform_ = nullptr;
  return temp;
}
inline ::AffineTransform* DataProviderParams::_internal_mutable_affine_transform() {
  
  if (affine_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::AffineTransform>(GetArena());
    affine_transform_ = p;
  }
  return affine_transform_;
}
inline ::AffineTransform* DataProviderParams::mutable_affine_transform() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.affine_transform)
  return _internal_mutable_affine_transform();
}
inline void DataProviderParams::set_allocated_affine_transform(::AffineTransform* affine_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete affine_transform_;
  }
  if (affine_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(affine_transform);
    if (message_arena != submessage_arena) {
      affine_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affine_transform, submessage_arena);
    }
    
  } else {
    
  }
  affine_transform_ = affine_transform;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.affine_transform)
}

// .ColorTransform color_transform = 14 [deprecated = true];
inline bool DataProviderParams::_internal_has_color_transform() const {
  return this != internal_default_instance() && color_transform_ != nullptr;
}
inline bool DataProviderParams::has_color_transform() const {
  return _internal_has_color_transform();
}
inline void DataProviderParams::clear_color_transform() {
  if (GetArena() == nullptr && color_transform_ != nullptr) {
    delete color_transform_;
  }
  color_transform_ = nullptr;
}
inline const ::ColorTransform& DataProviderParams::_internal_color_transform() const {
  const ::ColorTransform* p = color_transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ColorTransform*>(
      &::_ColorTransform_default_instance_);
}
inline const ::ColorTransform& DataProviderParams::color_transform() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.color_transform)
  return _internal_color_transform();
}
inline void DataProviderParams::unsafe_arena_set_allocated_color_transform(
    ::ColorTransform* color_transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_transform_);
  }
  color_transform_ = color_transform;
  if (color_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.color_transform)
}
inline ::ColorTransform* DataProviderParams::release_color_transform() {
  
  ::ColorTransform* temp = color_transform_;
  color_transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ColorTransform* DataProviderParams::unsafe_arena_release_color_transform() {
  // @@protoc_insertion_point(field_release:DataProviderParams.color_transform)
  
  ::ColorTransform* temp = color_transform_;
  color_transform_ = nullptr;
  return temp;
}
inline ::ColorTransform* DataProviderParams::_internal_mutable_color_transform() {
  
  if (color_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColorTransform>(GetArena());
    color_transform_ = p;
  }
  return color_transform_;
}
inline ::ColorTransform* DataProviderParams::mutable_color_transform() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.color_transform)
  return _internal_mutable_color_transform();
}
inline void DataProviderParams::set_allocated_color_transform(::ColorTransform* color_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_transform_;
  }
  if (color_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color_transform);
    if (message_arena != submessage_arena) {
      color_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_transform, submessage_arena);
    }
    
  } else {
    
  }
  color_transform_ = color_transform;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.color_transform)
}

// .FilterBbox filter_bbox = 15 [deprecated = true];
inline bool DataProviderParams::_internal_has_filter_bbox() const {
  return this != internal_default_instance() && filter_bbox_ != nullptr;
}
inline bool DataProviderParams::has_filter_bbox() const {
  return _internal_has_filter_bbox();
}
inline void DataProviderParams::clear_filter_bbox() {
  if (GetArena() == nullptr && filter_bbox_ != nullptr) {
    delete filter_bbox_;
  }
  filter_bbox_ = nullptr;
}
inline const ::FilterBbox& DataProviderParams::_internal_filter_bbox() const {
  const ::FilterBbox* p = filter_bbox_;
  return p != nullptr ? *p : *reinterpret_cast<const ::FilterBbox*>(
      &::_FilterBbox_default_instance_);
}
inline const ::FilterBbox& DataProviderParams::filter_bbox() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.filter_bbox)
  return _internal_filter_bbox();
}
inline void DataProviderParams::unsafe_arena_set_allocated_filter_bbox(
    ::FilterBbox* filter_bbox) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_bbox_);
  }
  filter_bbox_ = filter_bbox;
  if (filter_bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.filter_bbox)
}
inline ::FilterBbox* DataProviderParams::release_filter_bbox() {
  
  ::FilterBbox* temp = filter_bbox_;
  filter_bbox_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FilterBbox* DataProviderParams::unsafe_arena_release_filter_bbox() {
  // @@protoc_insertion_point(field_release:DataProviderParams.filter_bbox)
  
  ::FilterBbox* temp = filter_bbox_;
  filter_bbox_ = nullptr;
  return temp;
}
inline ::FilterBbox* DataProviderParams::_internal_mutable_filter_bbox() {
  
  if (filter_bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::FilterBbox>(GetArena());
    filter_bbox_ = p;
  }
  return filter_bbox_;
}
inline ::FilterBbox* DataProviderParams::mutable_filter_bbox() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.filter_bbox)
  return _internal_mutable_filter_bbox();
}
inline void DataProviderParams::set_allocated_filter_bbox(::FilterBbox* filter_bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_bbox_;
  }
  if (filter_bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter_bbox);
    if (message_arena != submessage_arena) {
      filter_bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_bbox, submessage_arena);
    }
    
  } else {
    
  }
  filter_bbox_ = filter_bbox;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.filter_bbox)
}

// .LogoDataParams logo_data = 16;
inline bool DataProviderParams::_internal_has_logo_data() const {
  return this != internal_default_instance() && logo_data_ != nullptr;
}
inline bool DataProviderParams::has_logo_data() const {
  return _internal_has_logo_data();
}
inline void DataProviderParams::clear_logo_data() {
  if (GetArena() == nullptr && logo_data_ != nullptr) {
    delete logo_data_;
  }
  logo_data_ = nullptr;
}
inline const ::LogoDataParams& DataProviderParams::_internal_logo_data() const {
  const ::LogoDataParams* p = logo_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LogoDataParams*>(
      &::_LogoDataParams_default_instance_);
}
inline const ::LogoDataParams& DataProviderParams::logo_data() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.logo_data)
  return _internal_logo_data();
}
inline void DataProviderParams::unsafe_arena_set_allocated_logo_data(
    ::LogoDataParams* logo_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logo_data_);
  }
  logo_data_ = logo_data;
  if (logo_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.logo_data)
}
inline ::LogoDataParams* DataProviderParams::release_logo_data() {
  
  ::LogoDataParams* temp = logo_data_;
  logo_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LogoDataParams* DataProviderParams::unsafe_arena_release_logo_data() {
  // @@protoc_insertion_point(field_release:DataProviderParams.logo_data)
  
  ::LogoDataParams* temp = logo_data_;
  logo_data_ = nullptr;
  return temp;
}
inline ::LogoDataParams* DataProviderParams::_internal_mutable_logo_data() {
  
  if (logo_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::LogoDataParams>(GetArena());
    logo_data_ = p;
  }
  return logo_data_;
}
inline ::LogoDataParams* DataProviderParams::mutable_logo_data() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.logo_data)
  return _internal_mutable_logo_data();
}
inline void DataProviderParams::set_allocated_logo_data(::LogoDataParams* logo_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logo_data_;
  }
  if (logo_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logo_data);
    if (message_arena != submessage_arena) {
      logo_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logo_data, submessage_arena);
    }
    
  } else {
    
  }
  logo_data_ = logo_data;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.logo_data)
}

// .AspectRatioTransform aspect_ratio_transform = 17 [deprecated = true];
inline bool DataProviderParams::_internal_has_aspect_ratio_transform() const {
  return this != internal_default_instance() && aspect_ratio_transform_ != nullptr;
}
inline bool DataProviderParams::has_aspect_ratio_transform() const {
  return _internal_has_aspect_ratio_transform();
}
inline void DataProviderParams::clear_aspect_ratio_transform() {
  if (GetArena() == nullptr && aspect_ratio_transform_ != nullptr) {
    delete aspect_ratio_transform_;
  }
  aspect_ratio_transform_ = nullptr;
}
inline const ::AspectRatioTransform& DataProviderParams::_internal_aspect_ratio_transform() const {
  const ::AspectRatioTransform* p = aspect_ratio_transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::AspectRatioTransform*>(
      &::_AspectRatioTransform_default_instance_);
}
inline const ::AspectRatioTransform& DataProviderParams::aspect_ratio_transform() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.aspect_ratio_transform)
  return _internal_aspect_ratio_transform();
}
inline void DataProviderParams::unsafe_arena_set_allocated_aspect_ratio_transform(
    ::AspectRatioTransform* aspect_ratio_transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aspect_ratio_transform_);
  }
  aspect_ratio_transform_ = aspect_ratio_transform;
  if (aspect_ratio_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.aspect_ratio_transform)
}
inline ::AspectRatioTransform* DataProviderParams::release_aspect_ratio_transform() {
  
  ::AspectRatioTransform* temp = aspect_ratio_transform_;
  aspect_ratio_transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AspectRatioTransform* DataProviderParams::unsafe_arena_release_aspect_ratio_transform() {
  // @@protoc_insertion_point(field_release:DataProviderParams.aspect_ratio_transform)
  
  ::AspectRatioTransform* temp = aspect_ratio_transform_;
  aspect_ratio_transform_ = nullptr;
  return temp;
}
inline ::AspectRatioTransform* DataProviderParams::_internal_mutable_aspect_ratio_transform() {
  
  if (aspect_ratio_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::AspectRatioTransform>(GetArena());
    aspect_ratio_transform_ = p;
  }
  return aspect_ratio_transform_;
}
inline ::AspectRatioTransform* DataProviderParams::mutable_aspect_ratio_transform() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.aspect_ratio_transform)
  return _internal_mutable_aspect_ratio_transform();
}
inline void DataProviderParams::set_allocated_aspect_ratio_transform(::AspectRatioTransform* aspect_ratio_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete aspect_ratio_transform_;
  }
  if (aspect_ratio_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(aspect_ratio_transform);
    if (message_arena != submessage_arena) {
      aspect_ratio_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aspect_ratio_transform, submessage_arena);
    }
    
  } else {
    
  }
  aspect_ratio_transform_ = aspect_ratio_transform;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.aspect_ratio_transform)
}

// .FlipTransform flip_transform = 18 [deprecated = true];
inline bool DataProviderParams::_internal_has_flip_transform() const {
  return this != internal_default_instance() && flip_transform_ != nullptr;
}
inline bool DataProviderParams::has_flip_transform() const {
  return _internal_has_flip_transform();
}
inline void DataProviderParams::clear_flip_transform() {
  if (GetArena() == nullptr && flip_transform_ != nullptr) {
    delete flip_transform_;
  }
  flip_transform_ = nullptr;
}
inline const ::FlipTransform& DataProviderParams::_internal_flip_transform() const {
  const ::FlipTransform* p = flip_transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::FlipTransform*>(
      &::_FlipTransform_default_instance_);
}
inline const ::FlipTransform& DataProviderParams::flip_transform() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.flip_transform)
  return _internal_flip_transform();
}
inline void DataProviderParams::unsafe_arena_set_allocated_flip_transform(
    ::FlipTransform* flip_transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flip_transform_);
  }
  flip_transform_ = flip_transform;
  if (flip_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.flip_transform)
}
inline ::FlipTransform* DataProviderParams::release_flip_transform() {
  
  ::FlipTransform* temp = flip_transform_;
  flip_transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FlipTransform* DataProviderParams::unsafe_arena_release_flip_transform() {
  // @@protoc_insertion_point(field_release:DataProviderParams.flip_transform)
  
  ::FlipTransform* temp = flip_transform_;
  flip_transform_ = nullptr;
  return temp;
}
inline ::FlipTransform* DataProviderParams::_internal_mutable_flip_transform() {
  
  if (flip_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::FlipTransform>(GetArena());
    flip_transform_ = p;
  }
  return flip_transform_;
}
inline ::FlipTransform* DataProviderParams::mutable_flip_transform() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.flip_transform)
  return _internal_mutable_flip_transform();
}
inline void DataProviderParams::set_allocated_flip_transform(::FlipTransform* flip_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete flip_transform_;
  }
  if (flip_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flip_transform);
    if (message_arena != submessage_arena) {
      flip_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flip_transform, submessage_arena);
    }
    
  } else {
    
  }
  flip_transform_ = flip_transform;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.flip_transform)
}

// .JPEGRecompression jpeg_recompression = 19 [deprecated = true];
inline bool DataProviderParams::_internal_has_jpeg_recompression() const {
  return this != internal_default_instance() && jpeg_recompression_ != nullptr;
}
inline bool DataProviderParams::has_jpeg_recompression() const {
  return _internal_has_jpeg_recompression();
}
inline void DataProviderParams::clear_jpeg_recompression() {
  if (GetArena() == nullptr && jpeg_recompression_ != nullptr) {
    delete jpeg_recompression_;
  }
  jpeg_recompression_ = nullptr;
}
inline const ::JPEGRecompression& DataProviderParams::_internal_jpeg_recompression() const {
  const ::JPEGRecompression* p = jpeg_recompression_;
  return p != nullptr ? *p : *reinterpret_cast<const ::JPEGRecompression*>(
      &::_JPEGRecompression_default_instance_);
}
inline const ::JPEGRecompression& DataProviderParams::jpeg_recompression() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.jpeg_recompression)
  return _internal_jpeg_recompression();
}
inline void DataProviderParams::unsafe_arena_set_allocated_jpeg_recompression(
    ::JPEGRecompression* jpeg_recompression) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jpeg_recompression_);
  }
  jpeg_recompression_ = jpeg_recompression;
  if (jpeg_recompression) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.jpeg_recompression)
}
inline ::JPEGRecompression* DataProviderParams::release_jpeg_recompression() {
  
  ::JPEGRecompression* temp = jpeg_recompression_;
  jpeg_recompression_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JPEGRecompression* DataProviderParams::unsafe_arena_release_jpeg_recompression() {
  // @@protoc_insertion_point(field_release:DataProviderParams.jpeg_recompression)
  
  ::JPEGRecompression* temp = jpeg_recompression_;
  jpeg_recompression_ = nullptr;
  return temp;
}
inline ::JPEGRecompression* DataProviderParams::_internal_mutable_jpeg_recompression() {
  
  if (jpeg_recompression_ == nullptr) {
    auto* p = CreateMaybeMessage<::JPEGRecompression>(GetArena());
    jpeg_recompression_ = p;
  }
  return jpeg_recompression_;
}
inline ::JPEGRecompression* DataProviderParams::mutable_jpeg_recompression() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.jpeg_recompression)
  return _internal_mutable_jpeg_recompression();
}
inline void DataProviderParams::set_allocated_jpeg_recompression(::JPEGRecompression* jpeg_recompression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete jpeg_recompression_;
  }
  if (jpeg_recompression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(jpeg_recompression);
    if (message_arena != submessage_arena) {
      jpeg_recompression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jpeg_recompression, submessage_arena);
    }
    
  } else {
    
  }
  jpeg_recompression_ = jpeg_recompression;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.jpeg_recompression)
}

// repeated .MiniBatchItemStage mbitem_stage = 20;
inline int DataProviderParams::_internal_mbitem_stage_size() const {
  return mbitem_stage_.size();
}
inline int DataProviderParams::mbitem_stage_size() const {
  return _internal_mbitem_stage_size();
}
inline void DataProviderParams::clear_mbitem_stage() {
  mbitem_stage_.Clear();
}
inline ::MiniBatchItemStage* DataProviderParams::mutable_mbitem_stage(int index) {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.mbitem_stage)
  return mbitem_stage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MiniBatchItemStage >*
DataProviderParams::mutable_mbitem_stage() {
  // @@protoc_insertion_point(field_mutable_list:DataProviderParams.mbitem_stage)
  return &mbitem_stage_;
}
inline const ::MiniBatchItemStage& DataProviderParams::_internal_mbitem_stage(int index) const {
  return mbitem_stage_.Get(index);
}
inline const ::MiniBatchItemStage& DataProviderParams::mbitem_stage(int index) const {
  // @@protoc_insertion_point(field_get:DataProviderParams.mbitem_stage)
  return _internal_mbitem_stage(index);
}
inline ::MiniBatchItemStage* DataProviderParams::_internal_add_mbitem_stage() {
  return mbitem_stage_.Add();
}
inline ::MiniBatchItemStage* DataProviderParams::add_mbitem_stage() {
  // @@protoc_insertion_point(field_add:DataProviderParams.mbitem_stage)
  return _internal_add_mbitem_stage();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MiniBatchItemStage >&
DataProviderParams::mbitem_stage() const {
  // @@protoc_insertion_point(field_list:DataProviderParams.mbitem_stage)
  return mbitem_stage_;
}

// int32 num_grpc_readers = 21 [deprecated = true];
inline void DataProviderParams::clear_num_grpc_readers() {
  num_grpc_readers_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataProviderParams::_internal_num_grpc_readers() const {
  return num_grpc_readers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataProviderParams::num_grpc_readers() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.num_grpc_readers)
  return _internal_num_grpc_readers();
}
inline void DataProviderParams::_internal_set_num_grpc_readers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_grpc_readers_ = value;
}
inline void DataProviderParams::set_num_grpc_readers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_grpc_readers(value);
  // @@protoc_insertion_point(field_set:DataProviderParams.num_grpc_readers)
}

// .gRPCReaderParams grpc_reader_params = 22 [deprecated = true];
inline bool DataProviderParams::_internal_has_grpc_reader_params() const {
  return this != internal_default_instance() && grpc_reader_params_ != nullptr;
}
inline bool DataProviderParams::has_grpc_reader_params() const {
  return _internal_has_grpc_reader_params();
}
inline void DataProviderParams::clear_grpc_reader_params() {
  if (GetArena() == nullptr && grpc_reader_params_ != nullptr) {
    delete grpc_reader_params_;
  }
  grpc_reader_params_ = nullptr;
}
inline const ::gRPCReaderParams& DataProviderParams::_internal_grpc_reader_params() const {
  const ::gRPCReaderParams* p = grpc_reader_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gRPCReaderParams*>(
      &::_gRPCReaderParams_default_instance_);
}
inline const ::gRPCReaderParams& DataProviderParams::grpc_reader_params() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.grpc_reader_params)
  return _internal_grpc_reader_params();
}
inline void DataProviderParams::unsafe_arena_set_allocated_grpc_reader_params(
    ::gRPCReaderParams* grpc_reader_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grpc_reader_params_);
  }
  grpc_reader_params_ = grpc_reader_params;
  if (grpc_reader_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.grpc_reader_params)
}
inline ::gRPCReaderParams* DataProviderParams::release_grpc_reader_params() {
  
  ::gRPCReaderParams* temp = grpc_reader_params_;
  grpc_reader_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gRPCReaderParams* DataProviderParams::unsafe_arena_release_grpc_reader_params() {
  // @@protoc_insertion_point(field_release:DataProviderParams.grpc_reader_params)
  
  ::gRPCReaderParams* temp = grpc_reader_params_;
  grpc_reader_params_ = nullptr;
  return temp;
}
inline ::gRPCReaderParams* DataProviderParams::_internal_mutable_grpc_reader_params() {
  
  if (grpc_reader_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCReaderParams>(GetArena());
    grpc_reader_params_ = p;
  }
  return grpc_reader_params_;
}
inline ::gRPCReaderParams* DataProviderParams::mutable_grpc_reader_params() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.grpc_reader_params)
  return _internal_mutable_grpc_reader_params();
}
inline void DataProviderParams::set_allocated_grpc_reader_params(::gRPCReaderParams* grpc_reader_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete grpc_reader_params_;
  }
  if (grpc_reader_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(grpc_reader_params);
    if (message_arena != submessage_arena) {
      grpc_reader_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grpc_reader_params, submessage_arena);
    }
    
  } else {
    
  }
  grpc_reader_params_ = grpc_reader_params;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.grpc_reader_params)
}

// repeated .MiniBatchItemStage serving_mbitem_stage = 23;
inline int DataProviderParams::_internal_serving_mbitem_stage_size() const {
  return serving_mbitem_stage_.size();
}
inline int DataProviderParams::serving_mbitem_stage_size() const {
  return _internal_serving_mbitem_stage_size();
}
inline void DataProviderParams::clear_serving_mbitem_stage() {
  serving_mbitem_stage_.Clear();
}
inline ::MiniBatchItemStage* DataProviderParams::mutable_serving_mbitem_stage(int index) {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.serving_mbitem_stage)
  return serving_mbitem_stage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MiniBatchItemStage >*
DataProviderParams::mutable_serving_mbitem_stage() {
  // @@protoc_insertion_point(field_mutable_list:DataProviderParams.serving_mbitem_stage)
  return &serving_mbitem_stage_;
}
inline const ::MiniBatchItemStage& DataProviderParams::_internal_serving_mbitem_stage(int index) const {
  return serving_mbitem_stage_.Get(index);
}
inline const ::MiniBatchItemStage& DataProviderParams::serving_mbitem_stage(int index) const {
  // @@protoc_insertion_point(field_get:DataProviderParams.serving_mbitem_stage)
  return _internal_serving_mbitem_stage(index);
}
inline ::MiniBatchItemStage* DataProviderParams::_internal_add_serving_mbitem_stage() {
  return serving_mbitem_stage_.Add();
}
inline ::MiniBatchItemStage* DataProviderParams::add_serving_mbitem_stage() {
  // @@protoc_insertion_point(field_add:DataProviderParams.serving_mbitem_stage)
  return _internal_add_serving_mbitem_stage();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MiniBatchItemStage >&
DataProviderParams::serving_mbitem_stage() const {
  // @@protoc_insertion_point(field_list:DataProviderParams.serving_mbitem_stage)
  return serving_mbitem_stage_;
}

// .FakeBoxes fake_boxes = 24;
inline bool DataProviderParams::_internal_has_fake_boxes() const {
  return this != internal_default_instance() && fake_boxes_ != nullptr;
}
inline bool DataProviderParams::has_fake_boxes() const {
  return _internal_has_fake_boxes();
}
inline void DataProviderParams::clear_fake_boxes() {
  if (GetArena() == nullptr && fake_boxes_ != nullptr) {
    delete fake_boxes_;
  }
  fake_boxes_ = nullptr;
}
inline const ::FakeBoxes& DataProviderParams::_internal_fake_boxes() const {
  const ::FakeBoxes* p = fake_boxes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::FakeBoxes*>(
      &::_FakeBoxes_default_instance_);
}
inline const ::FakeBoxes& DataProviderParams::fake_boxes() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.fake_boxes)
  return _internal_fake_boxes();
}
inline void DataProviderParams::unsafe_arena_set_allocated_fake_boxes(
    ::FakeBoxes* fake_boxes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fake_boxes_);
  }
  fake_boxes_ = fake_boxes;
  if (fake_boxes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.fake_boxes)
}
inline ::FakeBoxes* DataProviderParams::release_fake_boxes() {
  
  ::FakeBoxes* temp = fake_boxes_;
  fake_boxes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FakeBoxes* DataProviderParams::unsafe_arena_release_fake_boxes() {
  // @@protoc_insertion_point(field_release:DataProviderParams.fake_boxes)
  
  ::FakeBoxes* temp = fake_boxes_;
  fake_boxes_ = nullptr;
  return temp;
}
inline ::FakeBoxes* DataProviderParams::_internal_mutable_fake_boxes() {
  
  if (fake_boxes_ == nullptr) {
    auto* p = CreateMaybeMessage<::FakeBoxes>(GetArena());
    fake_boxes_ = p;
  }
  return fake_boxes_;
}
inline ::FakeBoxes* DataProviderParams::mutable_fake_boxes() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.fake_boxes)
  return _internal_mutable_fake_boxes();
}
inline void DataProviderParams::set_allocated_fake_boxes(::FakeBoxes* fake_boxes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fake_boxes_;
  }
  if (fake_boxes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fake_boxes);
    if (message_arena != submessage_arena) {
      fake_boxes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fake_boxes, submessage_arena);
    }
    
  } else {
    
  }
  fake_boxes_ = fake_boxes;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.fake_boxes)
}

// .FilterInvalidItems filter_invalid_items = 25;
inline bool DataProviderParams::_internal_has_filter_invalid_items() const {
  return this != internal_default_instance() && filter_invalid_items_ != nullptr;
}
inline bool DataProviderParams::has_filter_invalid_items() const {
  return _internal_has_filter_invalid_items();
}
inline void DataProviderParams::clear_filter_invalid_items() {
  if (GetArena() == nullptr && filter_invalid_items_ != nullptr) {
    delete filter_invalid_items_;
  }
  filter_invalid_items_ = nullptr;
}
inline const ::FilterInvalidItems& DataProviderParams::_internal_filter_invalid_items() const {
  const ::FilterInvalidItems* p = filter_invalid_items_;
  return p != nullptr ? *p : *reinterpret_cast<const ::FilterInvalidItems*>(
      &::_FilterInvalidItems_default_instance_);
}
inline const ::FilterInvalidItems& DataProviderParams::filter_invalid_items() const {
  // @@protoc_insertion_point(field_get:DataProviderParams.filter_invalid_items)
  return _internal_filter_invalid_items();
}
inline void DataProviderParams::unsafe_arena_set_allocated_filter_invalid_items(
    ::FilterInvalidItems* filter_invalid_items) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_invalid_items_);
  }
  filter_invalid_items_ = filter_invalid_items;
  if (filter_invalid_items) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataProviderParams.filter_invalid_items)
}
inline ::FilterInvalidItems* DataProviderParams::release_filter_invalid_items() {
  
  ::FilterInvalidItems* temp = filter_invalid_items_;
  filter_invalid_items_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FilterInvalidItems* DataProviderParams::unsafe_arena_release_filter_invalid_items() {
  // @@protoc_insertion_point(field_release:DataProviderParams.filter_invalid_items)
  
  ::FilterInvalidItems* temp = filter_invalid_items_;
  filter_invalid_items_ = nullptr;
  return temp;
}
inline ::FilterInvalidItems* DataProviderParams::_internal_mutable_filter_invalid_items() {
  
  if (filter_invalid_items_ == nullptr) {
    auto* p = CreateMaybeMessage<::FilterInvalidItems>(GetArena());
    filter_invalid_items_ = p;
  }
  return filter_invalid_items_;
}
inline ::FilterInvalidItems* DataProviderParams::mutable_filter_invalid_items() {
  // @@protoc_insertion_point(field_mutable:DataProviderParams.filter_invalid_items)
  return _internal_mutable_filter_invalid_items();
}
inline void DataProviderParams::set_allocated_filter_invalid_items(::FilterInvalidItems* filter_invalid_items) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_invalid_items_;
  }
  if (filter_invalid_items) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter_invalid_items);
    if (message_arena != submessage_arena) {
      filter_invalid_items = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_invalid_items, submessage_arena);
    }
    
  } else {
    
  }
  filter_invalid_items_ = filter_invalid_items;
  // @@protoc_insertion_point(field_set_allocated:DataProviderParams.filter_invalid_items)
}

// -------------------------------------------------------------------

// ProcessingParams

// bool readers_keep_empty = 1 [deprecated = true];
inline void ProcessingParams::clear_readers_keep_empty() {
  readers_keep_empty_ = false;
}
inline bool ProcessingParams::_internal_readers_keep_empty() const {
  return readers_keep_empty_;
}
inline bool ProcessingParams::readers_keep_empty() const {
  // @@protoc_insertion_point(field_get:ProcessingParams.readers_keep_empty)
  return _internal_readers_keep_empty();
}
inline void ProcessingParams::_internal_set_readers_keep_empty(bool value) {
  
  readers_keep_empty_ = value;
}
inline void ProcessingParams::set_readers_keep_empty(bool value) {
  _internal_set_readers_keep_empty(value);
  // @@protoc_insertion_point(field_set:ProcessingParams.readers_keep_empty)
}

// int32 reader_threads = 2 [deprecated = true];
inline void ProcessingParams::clear_reader_threads() {
  reader_threads_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessingParams::_internal_reader_threads() const {
  return reader_threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessingParams::reader_threads() const {
  // @@protoc_insertion_point(field_get:ProcessingParams.reader_threads)
  return _internal_reader_threads();
}
inline void ProcessingParams::_internal_set_reader_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reader_threads_ = value;
}
inline void ProcessingParams::set_reader_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reader_threads(value);
  // @@protoc_insertion_point(field_set:ProcessingParams.reader_threads)
}

// int32 worker_threads = 3;
inline void ProcessingParams::clear_worker_threads() {
  worker_threads_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessingParams::_internal_worker_threads() const {
  return worker_threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessingParams::worker_threads() const {
  // @@protoc_insertion_point(field_get:ProcessingParams.worker_threads)
  return _internal_worker_threads();
}
inline void ProcessingParams::_internal_set_worker_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  worker_threads_ = value;
}
inline void ProcessingParams::set_worker_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_worker_threads(value);
  // @@protoc_insertion_point(field_set:ProcessingParams.worker_threads)
}

// int32 minibatch_size = 4;
inline void ProcessingParams::clear_minibatch_size() {
  minibatch_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessingParams::_internal_minibatch_size() const {
  return minibatch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessingParams::minibatch_size() const {
  // @@protoc_insertion_point(field_get:ProcessingParams.minibatch_size)
  return _internal_minibatch_size();
}
inline void ProcessingParams::_internal_set_minibatch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minibatch_size_ = value;
}
inline void ProcessingParams::set_minibatch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minibatch_size(value);
  // @@protoc_insertion_point(field_set:ProcessingParams.minibatch_size)
}

// bool continuous = 5 [deprecated = true];
inline void ProcessingParams::clear_continuous() {
  continuous_ = false;
}
inline bool ProcessingParams::_internal_continuous() const {
  return continuous_;
}
inline bool ProcessingParams::continuous() const {
  // @@protoc_insertion_point(field_get:ProcessingParams.continuous)
  return _internal_continuous();
}
inline void ProcessingParams::_internal_set_continuous(bool value) {
  
  continuous_ = value;
}
inline void ProcessingParams::set_continuous(bool value) {
  _internal_set_continuous(value);
  // @@protoc_insertion_point(field_set:ProcessingParams.continuous)
}

// bool shuffle = 6;
inline void ProcessingParams::clear_shuffle() {
  shuffle_ = false;
}
inline bool ProcessingParams::_internal_shuffle() const {
  return shuffle_;
}
inline bool ProcessingParams::shuffle() const {
  // @@protoc_insertion_point(field_get:ProcessingParams.shuffle)
  return _internal_shuffle();
}
inline void ProcessingParams::_internal_set_shuffle(bool value) {
  
  shuffle_ = value;
}
inline void ProcessingParams::set_shuffle(bool value) {
  _internal_set_shuffle(value);
  // @@protoc_insertion_point(field_set:ProcessingParams.shuffle)
}

// int64 num_items_per_epoch = 7;
inline void ProcessingParams::clear_num_items_per_epoch() {
  num_items_per_epoch_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessingParams::_internal_num_items_per_epoch() const {
  return num_items_per_epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessingParams::num_items_per_epoch() const {
  // @@protoc_insertion_point(field_get:ProcessingParams.num_items_per_epoch)
  return _internal_num_items_per_epoch();
}
inline void ProcessingParams::_internal_set_num_items_per_epoch(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_items_per_epoch_ = value;
}
inline void ProcessingParams::set_num_items_per_epoch(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_items_per_epoch(value);
  // @@protoc_insertion_point(field_set:ProcessingParams.num_items_per_epoch)
}

// repeated string required_output_fields = 8;
inline int ProcessingParams::_internal_required_output_fields_size() const {
  return required_output_fields_.size();
}
inline int ProcessingParams::required_output_fields_size() const {
  return _internal_required_output_fields_size();
}
inline void ProcessingParams::clear_required_output_fields() {
  required_output_fields_.Clear();
}
inline std::string* ProcessingParams::add_required_output_fields() {
  // @@protoc_insertion_point(field_add_mutable:ProcessingParams.required_output_fields)
  return _internal_add_required_output_fields();
}
inline const std::string& ProcessingParams::_internal_required_output_fields(int index) const {
  return required_output_fields_.Get(index);
}
inline const std::string& ProcessingParams::required_output_fields(int index) const {
  // @@protoc_insertion_point(field_get:ProcessingParams.required_output_fields)
  return _internal_required_output_fields(index);
}
inline std::string* ProcessingParams::mutable_required_output_fields(int index) {
  // @@protoc_insertion_point(field_mutable:ProcessingParams.required_output_fields)
  return required_output_fields_.Mutable(index);
}
inline void ProcessingParams::set_required_output_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ProcessingParams.required_output_fields)
  required_output_fields_.Mutable(index)->assign(value);
}
inline void ProcessingParams::set_required_output_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ProcessingParams.required_output_fields)
  required_output_fields_.Mutable(index)->assign(std::move(value));
}
inline void ProcessingParams::set_required_output_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  required_output_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ProcessingParams.required_output_fields)
}
inline void ProcessingParams::set_required_output_fields(int index, const char* value, size_t size) {
  required_output_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProcessingParams.required_output_fields)
}
inline std::string* ProcessingParams::_internal_add_required_output_fields() {
  return required_output_fields_.Add();
}
inline void ProcessingParams::add_required_output_fields(const std::string& value) {
  required_output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ProcessingParams.required_output_fields)
}
inline void ProcessingParams::add_required_output_fields(std::string&& value) {
  required_output_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ProcessingParams.required_output_fields)
}
inline void ProcessingParams::add_required_output_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  required_output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ProcessingParams.required_output_fields)
}
inline void ProcessingParams::add_required_output_fields(const char* value, size_t size) {
  required_output_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ProcessingParams.required_output_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessingParams::required_output_fields() const {
  // @@protoc_insertion_point(field_list:ProcessingParams.required_output_fields)
  return required_output_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessingParams::mutable_required_output_fields() {
  // @@protoc_insertion_point(field_mutable_list:ProcessingParams.required_output_fields)
  return &required_output_fields_;
}

// int32 queue_size = 9;
inline void ProcessingParams::clear_queue_size() {
  queue_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessingParams::_internal_queue_size() const {
  return queue_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessingParams::queue_size() const {
  // @@protoc_insertion_point(field_get:ProcessingParams.queue_size)
  return _internal_queue_size();
}
inline void ProcessingParams::_internal_set_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  queue_size_ = value;
}
inline void ProcessingParams::set_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_queue_size(value);
  // @@protoc_insertion_point(field_set:ProcessingParams.queue_size)
}

// -------------------------------------------------------------------

// ImageCropTransform

// string crop_type = 1;
inline void ImageCropTransform::clear_crop_type() {
  crop_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImageCropTransform::crop_type() const {
  // @@protoc_insertion_point(field_get:ImageCropTransform.crop_type)
  return _internal_crop_type();
}
inline void ImageCropTransform::set_crop_type(const std::string& value) {
  _internal_set_crop_type(value);
  // @@protoc_insertion_point(field_set:ImageCropTransform.crop_type)
}
inline std::string* ImageCropTransform::mutable_crop_type() {
  // @@protoc_insertion_point(field_mutable:ImageCropTransform.crop_type)
  return _internal_mutable_crop_type();
}
inline const std::string& ImageCropTransform::_internal_crop_type() const {
  return crop_type_.Get();
}
inline void ImageCropTransform::_internal_set_crop_type(const std::string& value) {
  
  crop_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageCropTransform::set_crop_type(std::string&& value) {
  
  crop_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ImageCropTransform.crop_type)
}
inline void ImageCropTransform::set_crop_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crop_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ImageCropTransform.crop_type)
}
inline void ImageCropTransform::set_crop_type(const char* value,
    size_t size) {
  
  crop_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ImageCropTransform.crop_type)
}
inline std::string* ImageCropTransform::_internal_mutable_crop_type() {
  
  return crop_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageCropTransform::release_crop_type() {
  // @@protoc_insertion_point(field_release:ImageCropTransform.crop_type)
  return crop_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageCropTransform::set_allocated_crop_type(std::string* crop_type) {
  if (crop_type != nullptr) {
    
  } else {
    
  }
  crop_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crop_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ImageCropTransform.crop_type)
}

// string test_crop_type = 2 [deprecated = true];
inline void ImageCropTransform::clear_test_crop_type() {
  test_crop_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImageCropTransform::test_crop_type() const {
  // @@protoc_insertion_point(field_get:ImageCropTransform.test_crop_type)
  return _internal_test_crop_type();
}
inline void ImageCropTransform::set_test_crop_type(const std::string& value) {
  _internal_set_test_crop_type(value);
  // @@protoc_insertion_point(field_set:ImageCropTransform.test_crop_type)
}
inline std::string* ImageCropTransform::mutable_test_crop_type() {
  // @@protoc_insertion_point(field_mutable:ImageCropTransform.test_crop_type)
  return _internal_mutable_test_crop_type();
}
inline const std::string& ImageCropTransform::_internal_test_crop_type() const {
  return test_crop_type_.Get();
}
inline void ImageCropTransform::_internal_set_test_crop_type(const std::string& value) {
  
  test_crop_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageCropTransform::set_test_crop_type(std::string&& value) {
  
  test_crop_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ImageCropTransform.test_crop_type)
}
inline void ImageCropTransform::set_test_crop_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test_crop_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ImageCropTransform.test_crop_type)
}
inline void ImageCropTransform::set_test_crop_type(const char* value,
    size_t size) {
  
  test_crop_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ImageCropTransform.test_crop_type)
}
inline std::string* ImageCropTransform::_internal_mutable_test_crop_type() {
  
  return test_crop_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageCropTransform::release_test_crop_type() {
  // @@protoc_insertion_point(field_release:ImageCropTransform.test_crop_type)
  return test_crop_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageCropTransform::set_allocated_test_crop_type(std::string* test_crop_type) {
  if (test_crop_type != nullptr) {
    
  } else {
    
  }
  test_crop_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test_crop_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ImageCropTransform.test_crop_type)
}

// repeated int32 crop_size = 3;
inline int ImageCropTransform::_internal_crop_size_size() const {
  return crop_size_.size();
}
inline int ImageCropTransform::crop_size_size() const {
  return _internal_crop_size_size();
}
inline void ImageCropTransform::clear_crop_size() {
  crop_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageCropTransform::_internal_crop_size(int index) const {
  return crop_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageCropTransform::crop_size(int index) const {
  // @@protoc_insertion_point(field_get:ImageCropTransform.crop_size)
  return _internal_crop_size(index);
}
inline void ImageCropTransform::set_crop_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  crop_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:ImageCropTransform.crop_size)
}
inline void ImageCropTransform::_internal_add_crop_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  crop_size_.Add(value);
}
inline void ImageCropTransform::add_crop_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_crop_size(value);
  // @@protoc_insertion_point(field_add:ImageCropTransform.crop_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImageCropTransform::_internal_crop_size() const {
  return crop_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImageCropTransform::crop_size() const {
  // @@protoc_insertion_point(field_list:ImageCropTransform.crop_size)
  return _internal_crop_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImageCropTransform::_internal_mutable_crop_size() {
  return &crop_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImageCropTransform::mutable_crop_size() {
  // @@protoc_insertion_point(field_mutable_list:ImageCropTransform.crop_size)
  return _internal_mutable_crop_size();
}

// repeated int32 downsample_size = 4;
inline int ImageCropTransform::_internal_downsample_size_size() const {
  return downsample_size_.size();
}
inline int ImageCropTransform::downsample_size_size() const {
  return _internal_downsample_size_size();
}
inline void ImageCropTransform::clear_downsample_size() {
  downsample_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageCropTransform::_internal_downsample_size(int index) const {
  return downsample_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageCropTransform::downsample_size(int index) const {
  // @@protoc_insertion_point(field_get:ImageCropTransform.downsample_size)
  return _internal_downsample_size(index);
}
inline void ImageCropTransform::set_downsample_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  downsample_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:ImageCropTransform.downsample_size)
}
inline void ImageCropTransform::_internal_add_downsample_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  downsample_size_.Add(value);
}
inline void ImageCropTransform::add_downsample_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_downsample_size(value);
  // @@protoc_insertion_point(field_add:ImageCropTransform.downsample_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImageCropTransform::_internal_downsample_size() const {
  return downsample_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImageCropTransform::downsample_size() const {
  // @@protoc_insertion_point(field_list:ImageCropTransform.downsample_size)
  return _internal_downsample_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImageCropTransform::_internal_mutable_downsample_size() {
  return &downsample_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImageCropTransform::mutable_downsample_size() {
  // @@protoc_insertion_point(field_mutable_list:ImageCropTransform.downsample_size)
  return _internal_mutable_downsample_size();
}

// int32 crop_size_pixel_stride = 5;
inline void ImageCropTransform::clear_crop_size_pixel_stride() {
  crop_size_pixel_stride_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageCropTransform::_internal_crop_size_pixel_stride() const {
  return crop_size_pixel_stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageCropTransform::crop_size_pixel_stride() const {
  // @@protoc_insertion_point(field_get:ImageCropTransform.crop_size_pixel_stride)
  return _internal_crop_size_pixel_stride();
}
inline void ImageCropTransform::_internal_set_crop_size_pixel_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  crop_size_pixel_stride_ = value;
}
inline void ImageCropTransform::set_crop_size_pixel_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_crop_size_pixel_stride(value);
  // @@protoc_insertion_point(field_set:ImageCropTransform.crop_size_pixel_stride)
}

// bool skip_convert_rgb = 7;
inline void ImageCropTransform::clear_skip_convert_rgb() {
  skip_convert_rgb_ = false;
}
inline bool ImageCropTransform::_internal_skip_convert_rgb() const {
  return skip_convert_rgb_;
}
inline bool ImageCropTransform::skip_convert_rgb() const {
  // @@protoc_insertion_point(field_get:ImageCropTransform.skip_convert_rgb)
  return _internal_skip_convert_rgb();
}
inline void ImageCropTransform::_internal_set_skip_convert_rgb(bool value) {
  
  skip_convert_rgb_ = value;
}
inline void ImageCropTransform::set_skip_convert_rgb(bool value) {
  _internal_set_skip_convert_rgb(value);
  // @@protoc_insertion_point(field_set:ImageCropTransform.skip_convert_rgb)
}

// bool skip_resize = 8;
inline void ImageCropTransform::clear_skip_resize() {
  skip_resize_ = false;
}
inline bool ImageCropTransform::_internal_skip_resize() const {
  return skip_resize_;
}
inline bool ImageCropTransform::skip_resize() const {
  // @@protoc_insertion_point(field_get:ImageCropTransform.skip_resize)
  return _internal_skip_resize();
}
inline void ImageCropTransform::_internal_set_skip_resize(bool value) {
  
  skip_resize_ = value;
}
inline void ImageCropTransform::set_skip_resize(bool value) {
  _internal_set_skip_resize(value);
  // @@protoc_insertion_point(field_set:ImageCropTransform.skip_resize)
}

// bool skip_crop = 9;
inline void ImageCropTransform::clear_skip_crop() {
  skip_crop_ = false;
}
inline bool ImageCropTransform::_internal_skip_crop() const {
  return skip_crop_;
}
inline bool ImageCropTransform::skip_crop() const {
  // @@protoc_insertion_point(field_get:ImageCropTransform.skip_crop)
  return _internal_skip_crop();
}
inline void ImageCropTransform::_internal_set_skip_crop(bool value) {
  
  skip_crop_ = value;
}
inline void ImageCropTransform::set_skip_crop(bool value) {
  _internal_set_skip_crop(value);
  // @@protoc_insertion_point(field_set:ImageCropTransform.skip_crop)
}

// -------------------------------------------------------------------

// SavedOutputParams

// bool saved_output_load_databatch = 1;
inline void SavedOutputParams::clear_saved_output_load_databatch() {
  saved_output_load_databatch_ = false;
}
inline bool SavedOutputParams::_internal_saved_output_load_databatch() const {
  return saved_output_load_databatch_;
}
inline bool SavedOutputParams::saved_output_load_databatch() const {
  // @@protoc_insertion_point(field_get:SavedOutputParams.saved_output_load_databatch)
  return _internal_saved_output_load_databatch();
}
inline void SavedOutputParams::_internal_set_saved_output_load_databatch(bool value) {
  
  saved_output_load_databatch_ = value;
}
inline void SavedOutputParams::set_saved_output_load_databatch(bool value) {
  _internal_set_saved_output_load_databatch(value);
  // @@protoc_insertion_point(field_set:SavedOutputParams.saved_output_load_databatch)
}

// -------------------------------------------------------------------

// MultiDataset

// string dataset_name = 1;
inline void MultiDataset::clear_dataset_name() {
  dataset_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MultiDataset::dataset_name() const {
  // @@protoc_insertion_point(field_get:MultiDataset.dataset_name)
  return _internal_dataset_name();
}
inline void MultiDataset::set_dataset_name(const std::string& value) {
  _internal_set_dataset_name(value);
  // @@protoc_insertion_point(field_set:MultiDataset.dataset_name)
}
inline std::string* MultiDataset::mutable_dataset_name() {
  // @@protoc_insertion_point(field_mutable:MultiDataset.dataset_name)
  return _internal_mutable_dataset_name();
}
inline const std::string& MultiDataset::_internal_dataset_name() const {
  return dataset_name_.Get();
}
inline void MultiDataset::_internal_set_dataset_name(const std::string& value) {
  
  dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MultiDataset::set_dataset_name(std::string&& value) {
  
  dataset_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MultiDataset.dataset_name)
}
inline void MultiDataset::set_dataset_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MultiDataset.dataset_name)
}
inline void MultiDataset::set_dataset_name(const char* value,
    size_t size) {
  
  dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MultiDataset.dataset_name)
}
inline std::string* MultiDataset::_internal_mutable_dataset_name() {
  
  return dataset_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MultiDataset::release_dataset_name() {
  // @@protoc_insertion_point(field_release:MultiDataset.dataset_name)
  return dataset_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MultiDataset::set_allocated_dataset_name(std::string* dataset_name) {
  if (dataset_name != nullptr) {
    
  } else {
    
  }
  dataset_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MultiDataset.dataset_name)
}

// float sample_rate = 2;
inline void MultiDataset::clear_sample_rate() {
  sample_rate_ = 0;
}
inline float MultiDataset::_internal_sample_rate() const {
  return sample_rate_;
}
inline float MultiDataset::sample_rate() const {
  // @@protoc_insertion_point(field_get:MultiDataset.sample_rate)
  return _internal_sample_rate();
}
inline void MultiDataset::_internal_set_sample_rate(float value) {
  
  sample_rate_ = value;
}
inline void MultiDataset::set_sample_rate(float value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:MultiDataset.sample_rate)
}

// int32 saved_output_eid = 3;
inline void MultiDataset::clear_saved_output_eid() {
  saved_output_eid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiDataset::_internal_saved_output_eid() const {
  return saved_output_eid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiDataset::saved_output_eid() const {
  // @@protoc_insertion_point(field_get:MultiDataset.saved_output_eid)
  return _internal_saved_output_eid();
}
inline void MultiDataset::_internal_set_saved_output_eid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  saved_output_eid_ = value;
}
inline void MultiDataset::set_saved_output_eid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_saved_output_eid(value);
  // @@protoc_insertion_point(field_set:MultiDataset.saved_output_eid)
}

// string saved_output_layer = 4;
inline void MultiDataset::clear_saved_output_layer() {
  saved_output_layer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MultiDataset::saved_output_layer() const {
  // @@protoc_insertion_point(field_get:MultiDataset.saved_output_layer)
  return _internal_saved_output_layer();
}
inline void MultiDataset::set_saved_output_layer(const std::string& value) {
  _internal_set_saved_output_layer(value);
  // @@protoc_insertion_point(field_set:MultiDataset.saved_output_layer)
}
inline std::string* MultiDataset::mutable_saved_output_layer() {
  // @@protoc_insertion_point(field_mutable:MultiDataset.saved_output_layer)
  return _internal_mutable_saved_output_layer();
}
inline const std::string& MultiDataset::_internal_saved_output_layer() const {
  return saved_output_layer_.Get();
}
inline void MultiDataset::_internal_set_saved_output_layer(const std::string& value) {
  
  saved_output_layer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MultiDataset::set_saved_output_layer(std::string&& value) {
  
  saved_output_layer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MultiDataset.saved_output_layer)
}
inline void MultiDataset::set_saved_output_layer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  saved_output_layer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MultiDataset.saved_output_layer)
}
inline void MultiDataset::set_saved_output_layer(const char* value,
    size_t size) {
  
  saved_output_layer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MultiDataset.saved_output_layer)
}
inline std::string* MultiDataset::_internal_mutable_saved_output_layer() {
  
  return saved_output_layer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MultiDataset::release_saved_output_layer() {
  // @@protoc_insertion_point(field_release:MultiDataset.saved_output_layer)
  return saved_output_layer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MultiDataset::set_allocated_saved_output_layer(std::string* saved_output_layer) {
  if (saved_output_layer != nullptr) {
    
  } else {
    
  }
  saved_output_layer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), saved_output_layer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MultiDataset.saved_output_layer)
}

// -------------------------------------------------------------------

// LabelSetter

// repeated int64 hardcoded_labels = 1;
inline int LabelSetter::_internal_hardcoded_labels_size() const {
  return hardcoded_labels_.size();
}
inline int LabelSetter::hardcoded_labels_size() const {
  return _internal_hardcoded_labels_size();
}
inline void LabelSetter::clear_hardcoded_labels() {
  hardcoded_labels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LabelSetter::_internal_hardcoded_labels(int index) const {
  return hardcoded_labels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LabelSetter::hardcoded_labels(int index) const {
  // @@protoc_insertion_point(field_get:LabelSetter.hardcoded_labels)
  return _internal_hardcoded_labels(index);
}
inline void LabelSetter::set_hardcoded_labels(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  hardcoded_labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:LabelSetter.hardcoded_labels)
}
inline void LabelSetter::_internal_add_hardcoded_labels(::PROTOBUF_NAMESPACE_ID::int64 value) {
  hardcoded_labels_.Add(value);
}
inline void LabelSetter::add_hardcoded_labels(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_hardcoded_labels(value);
  // @@protoc_insertion_point(field_add:LabelSetter.hardcoded_labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LabelSetter::_internal_hardcoded_labels() const {
  return hardcoded_labels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LabelSetter::hardcoded_labels() const {
  // @@protoc_insertion_point(field_list:LabelSetter.hardcoded_labels)
  return _internal_hardcoded_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LabelSetter::_internal_mutable_hardcoded_labels() {
  return &hardcoded_labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LabelSetter::mutable_hardcoded_labels() {
  // @@protoc_insertion_point(field_mutable_list:LabelSetter.hardcoded_labels)
  return _internal_mutable_hardcoded_labels();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LabelMapper

// string dataset_name = 1 [deprecated = true];
inline void LabelMapper::clear_dataset_name() {
  dataset_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabelMapper::dataset_name() const {
  // @@protoc_insertion_point(field_get:LabelMapper.dataset_name)
  return _internal_dataset_name();
}
inline void LabelMapper::set_dataset_name(const std::string& value) {
  _internal_set_dataset_name(value);
  // @@protoc_insertion_point(field_set:LabelMapper.dataset_name)
}
inline std::string* LabelMapper::mutable_dataset_name() {
  // @@protoc_insertion_point(field_mutable:LabelMapper.dataset_name)
  return _internal_mutable_dataset_name();
}
inline const std::string& LabelMapper::_internal_dataset_name() const {
  return dataset_name_.Get();
}
inline void LabelMapper::_internal_set_dataset_name(const std::string& value) {
  
  dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabelMapper::set_dataset_name(std::string&& value) {
  
  dataset_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabelMapper.dataset_name)
}
inline void LabelMapper::set_dataset_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabelMapper.dataset_name)
}
inline void LabelMapper::set_dataset_name(const char* value,
    size_t size) {
  
  dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabelMapper.dataset_name)
}
inline std::string* LabelMapper::_internal_mutable_dataset_name() {
  
  return dataset_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabelMapper::release_dataset_name() {
  // @@protoc_insertion_point(field_release:LabelMapper.dataset_name)
  return dataset_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelMapper::set_allocated_dataset_name(std::string* dataset_name) {
  if (dataset_name != nullptr) {
    
  } else {
    
  }
  dataset_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabelMapper.dataset_name)
}

// string type = 2;
inline void LabelMapper::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabelMapper::type() const {
  // @@protoc_insertion_point(field_get:LabelMapper.type)
  return _internal_type();
}
inline void LabelMapper::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:LabelMapper.type)
}
inline std::string* LabelMapper::mutable_type() {
  // @@protoc_insertion_point(field_mutable:LabelMapper.type)
  return _internal_mutable_type();
}
inline const std::string& LabelMapper::_internal_type() const {
  return type_.Get();
}
inline void LabelMapper::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabelMapper::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabelMapper.type)
}
inline void LabelMapper::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabelMapper.type)
}
inline void LabelMapper::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabelMapper.type)
}
inline std::string* LabelMapper::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabelMapper::release_type() {
  // @@protoc_insertion_point(field_release:LabelMapper.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelMapper::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabelMapper.type)
}

// string not_in_output_aiid = 3;
inline void LabelMapper::clear_not_in_output_aiid() {
  not_in_output_aiid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabelMapper::not_in_output_aiid() const {
  // @@protoc_insertion_point(field_get:LabelMapper.not_in_output_aiid)
  return _internal_not_in_output_aiid();
}
inline void LabelMapper::set_not_in_output_aiid(const std::string& value) {
  _internal_set_not_in_output_aiid(value);
  // @@protoc_insertion_point(field_set:LabelMapper.not_in_output_aiid)
}
inline std::string* LabelMapper::mutable_not_in_output_aiid() {
  // @@protoc_insertion_point(field_mutable:LabelMapper.not_in_output_aiid)
  return _internal_mutable_not_in_output_aiid();
}
inline const std::string& LabelMapper::_internal_not_in_output_aiid() const {
  return not_in_output_aiid_.Get();
}
inline void LabelMapper::_internal_set_not_in_output_aiid(const std::string& value) {
  
  not_in_output_aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabelMapper::set_not_in_output_aiid(std::string&& value) {
  
  not_in_output_aiid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabelMapper.not_in_output_aiid)
}
inline void LabelMapper::set_not_in_output_aiid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  not_in_output_aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabelMapper.not_in_output_aiid)
}
inline void LabelMapper::set_not_in_output_aiid(const char* value,
    size_t size) {
  
  not_in_output_aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabelMapper.not_in_output_aiid)
}
inline std::string* LabelMapper::_internal_mutable_not_in_output_aiid() {
  
  return not_in_output_aiid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabelMapper::release_not_in_output_aiid() {
  // @@protoc_insertion_point(field_release:LabelMapper.not_in_output_aiid)
  return not_in_output_aiid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelMapper::set_allocated_not_in_output_aiid(std::string* not_in_output_aiid) {
  if (not_in_output_aiid != nullptr) {
    
  } else {
    
  }
  not_in_output_aiid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), not_in_output_aiid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabelMapper.not_in_output_aiid)
}

// string aiid = 4;
inline void LabelMapper::clear_aiid() {
  aiid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabelMapper::aiid() const {
  // @@protoc_insertion_point(field_get:LabelMapper.aiid)
  return _internal_aiid();
}
inline void LabelMapper::set_aiid(const std::string& value) {
  _internal_set_aiid(value);
  // @@protoc_insertion_point(field_set:LabelMapper.aiid)
}
inline std::string* LabelMapper::mutable_aiid() {
  // @@protoc_insertion_point(field_mutable:LabelMapper.aiid)
  return _internal_mutable_aiid();
}
inline const std::string& LabelMapper::_internal_aiid() const {
  return aiid_.Get();
}
inline void LabelMapper::_internal_set_aiid(const std::string& value) {
  
  aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabelMapper::set_aiid(std::string&& value) {
  
  aiid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabelMapper.aiid)
}
inline void LabelMapper::set_aiid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabelMapper.aiid)
}
inline void LabelMapper::set_aiid(const char* value,
    size_t size) {
  
  aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabelMapper.aiid)
}
inline std::string* LabelMapper::_internal_mutable_aiid() {
  
  return aiid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabelMapper::release_aiid() {
  // @@protoc_insertion_point(field_release:LabelMapper.aiid)
  return aiid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelMapper::set_allocated_aiid(std::string* aiid) {
  if (aiid != nullptr) {
    
  } else {
    
  }
  aiid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aiid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabelMapper.aiid)
}

// string src_dataset = 5;
inline void LabelMapper::clear_src_dataset() {
  src_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabelMapper::src_dataset() const {
  // @@protoc_insertion_point(field_get:LabelMapper.src_dataset)
  return _internal_src_dataset();
}
inline void LabelMapper::set_src_dataset(const std::string& value) {
  _internal_set_src_dataset(value);
  // @@protoc_insertion_point(field_set:LabelMapper.src_dataset)
}
inline std::string* LabelMapper::mutable_src_dataset() {
  // @@protoc_insertion_point(field_mutable:LabelMapper.src_dataset)
  return _internal_mutable_src_dataset();
}
inline const std::string& LabelMapper::_internal_src_dataset() const {
  return src_dataset_.Get();
}
inline void LabelMapper::_internal_set_src_dataset(const std::string& value) {
  
  src_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabelMapper::set_src_dataset(std::string&& value) {
  
  src_dataset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabelMapper.src_dataset)
}
inline void LabelMapper::set_src_dataset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  src_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabelMapper.src_dataset)
}
inline void LabelMapper::set_src_dataset(const char* value,
    size_t size) {
  
  src_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabelMapper.src_dataset)
}
inline std::string* LabelMapper::_internal_mutable_src_dataset() {
  
  return src_dataset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabelMapper::release_src_dataset() {
  // @@protoc_insertion_point(field_release:LabelMapper.src_dataset)
  return src_dataset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelMapper::set_allocated_src_dataset(std::string* src_dataset) {
  if (src_dataset != nullptr) {
    
  } else {
    
  }
  src_dataset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_dataset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabelMapper.src_dataset)
}

// string dst_dataset = 6;
inline void LabelMapper::clear_dst_dataset() {
  dst_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabelMapper::dst_dataset() const {
  // @@protoc_insertion_point(field_get:LabelMapper.dst_dataset)
  return _internal_dst_dataset();
}
inline void LabelMapper::set_dst_dataset(const std::string& value) {
  _internal_set_dst_dataset(value);
  // @@protoc_insertion_point(field_set:LabelMapper.dst_dataset)
}
inline std::string* LabelMapper::mutable_dst_dataset() {
  // @@protoc_insertion_point(field_mutable:LabelMapper.dst_dataset)
  return _internal_mutable_dst_dataset();
}
inline const std::string& LabelMapper::_internal_dst_dataset() const {
  return dst_dataset_.Get();
}
inline void LabelMapper::_internal_set_dst_dataset(const std::string& value) {
  
  dst_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabelMapper::set_dst_dataset(std::string&& value) {
  
  dst_dataset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabelMapper.dst_dataset)
}
inline void LabelMapper::set_dst_dataset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dst_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabelMapper.dst_dataset)
}
inline void LabelMapper::set_dst_dataset(const char* value,
    size_t size) {
  
  dst_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabelMapper.dst_dataset)
}
inline std::string* LabelMapper::_internal_mutable_dst_dataset() {
  
  return dst_dataset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabelMapper::release_dst_dataset() {
  // @@protoc_insertion_point(field_release:LabelMapper.dst_dataset)
  return dst_dataset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelMapper::set_allocated_dst_dataset(std::string* dst_dataset) {
  if (dst_dataset != nullptr) {
    
  } else {
    
  }
  dst_dataset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_dataset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabelMapper.dst_dataset)
}

// map<string, string> catid_map = 7;
inline int LabelMapper::_internal_catid_map_size() const {
  return catid_map_.size();
}
inline int LabelMapper::catid_map_size() const {
  return _internal_catid_map_size();
}
inline void LabelMapper::clear_catid_map() {
  catid_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LabelMapper::_internal_catid_map() const {
  return catid_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LabelMapper::catid_map() const {
  // @@protoc_insertion_point(field_map:LabelMapper.catid_map)
  return _internal_catid_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LabelMapper::_internal_mutable_catid_map() {
  return catid_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LabelMapper::mutable_catid_map() {
  // @@protoc_insertion_point(field_mutable_map:LabelMapper.catid_map)
  return _internal_mutable_catid_map();
}

// -------------------------------------------------------------------

// LabelSmoother

// string mode = 1;
inline void LabelSmoother::clear_mode() {
  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabelSmoother::mode() const {
  // @@protoc_insertion_point(field_get:LabelSmoother.mode)
  return _internal_mode();
}
inline void LabelSmoother::set_mode(const std::string& value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:LabelSmoother.mode)
}
inline std::string* LabelSmoother::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:LabelSmoother.mode)
  return _internal_mutable_mode();
}
inline const std::string& LabelSmoother::_internal_mode() const {
  return mode_.Get();
}
inline void LabelSmoother::_internal_set_mode(const std::string& value) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabelSmoother::set_mode(std::string&& value) {
  
  mode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabelSmoother.mode)
}
inline void LabelSmoother::set_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabelSmoother.mode)
}
inline void LabelSmoother::set_mode(const char* value,
    size_t size) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabelSmoother.mode)
}
inline std::string* LabelSmoother::_internal_mutable_mode() {
  
  return mode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabelSmoother::release_mode() {
  // @@protoc_insertion_point(field_release:LabelSmoother.mode)
  return mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelSmoother::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabelSmoother.mode)
}

// repeated float constant_range = 2;
inline int LabelSmoother::_internal_constant_range_size() const {
  return constant_range_.size();
}
inline int LabelSmoother::constant_range_size() const {
  return _internal_constant_range_size();
}
inline void LabelSmoother::clear_constant_range() {
  constant_range_.Clear();
}
inline float LabelSmoother::_internal_constant_range(int index) const {
  return constant_range_.Get(index);
}
inline float LabelSmoother::constant_range(int index) const {
  // @@protoc_insertion_point(field_get:LabelSmoother.constant_range)
  return _internal_constant_range(index);
}
inline void LabelSmoother::set_constant_range(int index, float value) {
  constant_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:LabelSmoother.constant_range)
}
inline void LabelSmoother::_internal_add_constant_range(float value) {
  constant_range_.Add(value);
}
inline void LabelSmoother::add_constant_range(float value) {
  _internal_add_constant_range(value);
  // @@protoc_insertion_point(field_add:LabelSmoother.constant_range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LabelSmoother::_internal_constant_range() const {
  return constant_range_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LabelSmoother::constant_range() const {
  // @@protoc_insertion_point(field_list:LabelSmoother.constant_range)
  return _internal_constant_range();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LabelSmoother::_internal_mutable_constant_range() {
  return &constant_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LabelSmoother::mutable_constant_range() {
  // @@protoc_insertion_point(field_mutable_list:LabelSmoother.constant_range)
  return _internal_mutable_constant_range();
}

// repeated float linear_scale = 3;
inline int LabelSmoother::_internal_linear_scale_size() const {
  return linear_scale_.size();
}
inline int LabelSmoother::linear_scale_size() const {
  return _internal_linear_scale_size();
}
inline void LabelSmoother::clear_linear_scale() {
  linear_scale_.Clear();
}
inline float LabelSmoother::_internal_linear_scale(int index) const {
  return linear_scale_.Get(index);
}
inline float LabelSmoother::linear_scale(int index) const {
  // @@protoc_insertion_point(field_get:LabelSmoother.linear_scale)
  return _internal_linear_scale(index);
}
inline void LabelSmoother::set_linear_scale(int index, float value) {
  linear_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:LabelSmoother.linear_scale)
}
inline void LabelSmoother::_internal_add_linear_scale(float value) {
  linear_scale_.Add(value);
}
inline void LabelSmoother::add_linear_scale(float value) {
  _internal_add_linear_scale(value);
  // @@protoc_insertion_point(field_add:LabelSmoother.linear_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LabelSmoother::_internal_linear_scale() const {
  return linear_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LabelSmoother::linear_scale() const {
  // @@protoc_insertion_point(field_list:LabelSmoother.linear_scale)
  return _internal_linear_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LabelSmoother::_internal_mutable_linear_scale() {
  return &linear_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LabelSmoother::mutable_linear_scale() {
  // @@protoc_insertion_point(field_mutable_list:LabelSmoother.linear_scale)
  return _internal_mutable_linear_scale();
}

// repeated float log_scale = 4;
inline int LabelSmoother::_internal_log_scale_size() const {
  return log_scale_.size();
}
inline int LabelSmoother::log_scale_size() const {
  return _internal_log_scale_size();
}
inline void LabelSmoother::clear_log_scale() {
  log_scale_.Clear();
}
inline float LabelSmoother::_internal_log_scale(int index) const {
  return log_scale_.Get(index);
}
inline float LabelSmoother::log_scale(int index) const {
  // @@protoc_insertion_point(field_get:LabelSmoother.log_scale)
  return _internal_log_scale(index);
}
inline void LabelSmoother::set_log_scale(int index, float value) {
  log_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:LabelSmoother.log_scale)
}
inline void LabelSmoother::_internal_add_log_scale(float value) {
  log_scale_.Add(value);
}
inline void LabelSmoother::add_log_scale(float value) {
  _internal_add_log_scale(value);
  // @@protoc_insertion_point(field_add:LabelSmoother.log_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LabelSmoother::_internal_log_scale() const {
  return log_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LabelSmoother::log_scale() const {
  // @@protoc_insertion_point(field_list:LabelSmoother.log_scale)
  return _internal_log_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LabelSmoother::_internal_mutable_log_scale() {
  return &log_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LabelSmoother::mutable_log_scale() {
  // @@protoc_insertion_point(field_mutable_list:LabelSmoother.log_scale)
  return _internal_mutable_log_scale();
}

// int64 num_labels = 5;
inline void LabelSmoother::clear_num_labels() {
  num_labels_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LabelSmoother::_internal_num_labels() const {
  return num_labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LabelSmoother::num_labels() const {
  // @@protoc_insertion_point(field_get:LabelSmoother.num_labels)
  return _internal_num_labels();
}
inline void LabelSmoother::_internal_set_num_labels(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_labels_ = value;
}
inline void LabelSmoother::set_num_labels(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_labels(value);
  // @@protoc_insertion_point(field_set:LabelSmoother.num_labels)
}

// -------------------------------------------------------------------

// LabelDropper

// repeated int64 drop_labels = 1;
inline int LabelDropper::_internal_drop_labels_size() const {
  return drop_labels_.size();
}
inline int LabelDropper::drop_labels_size() const {
  return _internal_drop_labels_size();
}
inline void LabelDropper::clear_drop_labels() {
  drop_labels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LabelDropper::_internal_drop_labels(int index) const {
  return drop_labels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LabelDropper::drop_labels(int index) const {
  // @@protoc_insertion_point(field_get:LabelDropper.drop_labels)
  return _internal_drop_labels(index);
}
inline void LabelDropper::set_drop_labels(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  drop_labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:LabelDropper.drop_labels)
}
inline void LabelDropper::_internal_add_drop_labels(::PROTOBUF_NAMESPACE_ID::int64 value) {
  drop_labels_.Add(value);
}
inline void LabelDropper::add_drop_labels(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_drop_labels(value);
  // @@protoc_insertion_point(field_add:LabelDropper.drop_labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LabelDropper::_internal_drop_labels() const {
  return drop_labels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LabelDropper::drop_labels() const {
  // @@protoc_insertion_point(field_list:LabelDropper.drop_labels)
  return _internal_drop_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LabelDropper::_internal_mutable_drop_labels() {
  return &drop_labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LabelDropper::mutable_drop_labels() {
  // @@protoc_insertion_point(field_mutable_list:LabelDropper.drop_labels)
  return _internal_mutable_drop_labels();
}

// -------------------------------------------------------------------

// OCRCropTransform

// int64 height = 1;
inline void OCRCropTransform::clear_height() {
  height_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OCRCropTransform::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OCRCropTransform::height() const {
  // @@protoc_insertion_point(field_get:OCRCropTransform.height)
  return _internal_height();
}
inline void OCRCropTransform::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  height_ = value;
}
inline void OCRCropTransform::set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:OCRCropTransform.height)
}

// int64 width = 2;
inline void OCRCropTransform::clear_width() {
  width_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OCRCropTransform::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OCRCropTransform::width() const {
  // @@protoc_insertion_point(field_get:OCRCropTransform.width)
  return _internal_width();
}
inline void OCRCropTransform::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  width_ = value;
}
inline void OCRCropTransform::set_width(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:OCRCropTransform.width)
}

// -------------------------------------------------------------------

// MaxNumLabelDropper

// int64 max_num_labels = 1;
inline void MaxNumLabelDropper::clear_max_num_labels() {
  max_num_labels_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MaxNumLabelDropper::_internal_max_num_labels() const {
  return max_num_labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MaxNumLabelDropper::max_num_labels() const {
  // @@protoc_insertion_point(field_get:MaxNumLabelDropper.max_num_labels)
  return _internal_max_num_labels();
}
inline void MaxNumLabelDropper::_internal_set_max_num_labels(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_num_labels_ = value;
}
inline void MaxNumLabelDropper::set_max_num_labels(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_num_labels(value);
  // @@protoc_insertion_point(field_set:MaxNumLabelDropper.max_num_labels)
}

// int64 min_num_labels = 2;
inline void MaxNumLabelDropper::clear_min_num_labels() {
  min_num_labels_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MaxNumLabelDropper::_internal_min_num_labels() const {
  return min_num_labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MaxNumLabelDropper::min_num_labels() const {
  // @@protoc_insertion_point(field_get:MaxNumLabelDropper.min_num_labels)
  return _internal_min_num_labels();
}
inline void MaxNumLabelDropper::_internal_set_min_num_labels(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  min_num_labels_ = value;
}
inline void MaxNumLabelDropper::set_min_num_labels(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_min_num_labels(value);
  // @@protoc_insertion_point(field_set:MaxNumLabelDropper.min_num_labels)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LabelWeight

// string catid_frequencies_file = 1;
inline void LabelWeight::clear_catid_frequencies_file() {
  catid_frequencies_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabelWeight::catid_frequencies_file() const {
  // @@protoc_insertion_point(field_get:LabelWeight.catid_frequencies_file)
  return _internal_catid_frequencies_file();
}
inline void LabelWeight::set_catid_frequencies_file(const std::string& value) {
  _internal_set_catid_frequencies_file(value);
  // @@protoc_insertion_point(field_set:LabelWeight.catid_frequencies_file)
}
inline std::string* LabelWeight::mutable_catid_frequencies_file() {
  // @@protoc_insertion_point(field_mutable:LabelWeight.catid_frequencies_file)
  return _internal_mutable_catid_frequencies_file();
}
inline const std::string& LabelWeight::_internal_catid_frequencies_file() const {
  return catid_frequencies_file_.Get();
}
inline void LabelWeight::_internal_set_catid_frequencies_file(const std::string& value) {
  
  catid_frequencies_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabelWeight::set_catid_frequencies_file(std::string&& value) {
  
  catid_frequencies_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabelWeight.catid_frequencies_file)
}
inline void LabelWeight::set_catid_frequencies_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  catid_frequencies_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabelWeight.catid_frequencies_file)
}
inline void LabelWeight::set_catid_frequencies_file(const char* value,
    size_t size) {
  
  catid_frequencies_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabelWeight.catid_frequencies_file)
}
inline std::string* LabelWeight::_internal_mutable_catid_frequencies_file() {
  
  return catid_frequencies_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabelWeight::release_catid_frequencies_file() {
  // @@protoc_insertion_point(field_release:LabelWeight.catid_frequencies_file)
  return catid_frequencies_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelWeight::set_allocated_catid_frequencies_file(std::string* catid_frequencies_file) {
  if (catid_frequencies_file != nullptr) {
    
  } else {
    
  }
  catid_frequencies_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), catid_frequencies_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabelWeight.catid_frequencies_file)
}

// float target_frequency = 2;
inline void LabelWeight::clear_target_frequency() {
  target_frequency_ = 0;
}
inline float LabelWeight::_internal_target_frequency() const {
  return target_frequency_;
}
inline float LabelWeight::target_frequency() const {
  // @@protoc_insertion_point(field_get:LabelWeight.target_frequency)
  return _internal_target_frequency();
}
inline void LabelWeight::_internal_set_target_frequency(float value) {
  
  target_frequency_ = value;
}
inline void LabelWeight::set_target_frequency(float value) {
  _internal_set_target_frequency(value);
  // @@protoc_insertion_point(field_set:LabelWeight.target_frequency)
}

// int64 min_count = 3;
inline void LabelWeight::clear_min_count() {
  min_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LabelWeight::_internal_min_count() const {
  return min_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LabelWeight::min_count() const {
  // @@protoc_insertion_point(field_get:LabelWeight.min_count)
  return _internal_min_count();
}
inline void LabelWeight::_internal_set_min_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  min_count_ = value;
}
inline void LabelWeight::set_min_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_min_count(value);
  // @@protoc_insertion_point(field_set:LabelWeight.min_count)
}

// bool sqrt = 4;
inline void LabelWeight::clear_sqrt() {
  sqrt_ = false;
}
inline bool LabelWeight::_internal_sqrt() const {
  return sqrt_;
}
inline bool LabelWeight::sqrt() const {
  // @@protoc_insertion_point(field_get:LabelWeight.sqrt)
  return _internal_sqrt();
}
inline void LabelWeight::_internal_set_sqrt(bool value) {
  
  sqrt_ = value;
}
inline void LabelWeight::set_sqrt(bool value) {
  _internal_set_sqrt(value);
  // @@protoc_insertion_point(field_set:LabelWeight.sqrt)
}

// map<string, float> catid_const_weights = 5;
inline int LabelWeight::_internal_catid_const_weights_size() const {
  return catid_const_weights_.size();
}
inline int LabelWeight::catid_const_weights_size() const {
  return _internal_catid_const_weights_size();
}
inline void LabelWeight::clear_catid_const_weights() {
  catid_const_weights_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
LabelWeight::_internal_catid_const_weights() const {
  return catid_const_weights_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
LabelWeight::catid_const_weights() const {
  // @@protoc_insertion_point(field_map:LabelWeight.catid_const_weights)
  return _internal_catid_const_weights();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
LabelWeight::_internal_mutable_catid_const_weights() {
  return catid_const_weights_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
LabelWeight::mutable_catid_const_weights() {
  // @@protoc_insertion_point(field_mutable_map:LabelWeight.catid_const_weights)
  return _internal_mutable_catid_const_weights();
}

// float default_weight = 6;
inline void LabelWeight::clear_default_weight() {
  default_weight_ = 0;
}
inline float LabelWeight::_internal_default_weight() const {
  return default_weight_;
}
inline float LabelWeight::default_weight() const {
  // @@protoc_insertion_point(field_get:LabelWeight.default_weight)
  return _internal_default_weight();
}
inline void LabelWeight::_internal_set_default_weight(float value) {
  
  default_weight_ = value;
}
inline void LabelWeight::set_default_weight(float value) {
  _internal_set_default_weight(value);
  // @@protoc_insertion_point(field_set:LabelWeight.default_weight)
}

// string dataset_name = 7;
inline void LabelWeight::clear_dataset_name() {
  dataset_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabelWeight::dataset_name() const {
  // @@protoc_insertion_point(field_get:LabelWeight.dataset_name)
  return _internal_dataset_name();
}
inline void LabelWeight::set_dataset_name(const std::string& value) {
  _internal_set_dataset_name(value);
  // @@protoc_insertion_point(field_set:LabelWeight.dataset_name)
}
inline std::string* LabelWeight::mutable_dataset_name() {
  // @@protoc_insertion_point(field_mutable:LabelWeight.dataset_name)
  return _internal_mutable_dataset_name();
}
inline const std::string& LabelWeight::_internal_dataset_name() const {
  return dataset_name_.Get();
}
inline void LabelWeight::_internal_set_dataset_name(const std::string& value) {
  
  dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabelWeight::set_dataset_name(std::string&& value) {
  
  dataset_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabelWeight.dataset_name)
}
inline void LabelWeight::set_dataset_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabelWeight.dataset_name)
}
inline void LabelWeight::set_dataset_name(const char* value,
    size_t size) {
  
  dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabelWeight.dataset_name)
}
inline std::string* LabelWeight::_internal_mutable_dataset_name() {
  
  return dataset_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabelWeight::release_dataset_name() {
  // @@protoc_insertion_point(field_release:LabelWeight.dataset_name)
  return dataset_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelWeight::set_allocated_dataset_name(std::string* dataset_name) {
  if (dataset_name != nullptr) {
    
  } else {
    
  }
  dataset_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabelWeight.dataset_name)
}

// string split = 8;
inline void LabelWeight::clear_split() {
  split_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabelWeight::split() const {
  // @@protoc_insertion_point(field_get:LabelWeight.split)
  return _internal_split();
}
inline void LabelWeight::set_split(const std::string& value) {
  _internal_set_split(value);
  // @@protoc_insertion_point(field_set:LabelWeight.split)
}
inline std::string* LabelWeight::mutable_split() {
  // @@protoc_insertion_point(field_mutable:LabelWeight.split)
  return _internal_mutable_split();
}
inline const std::string& LabelWeight::_internal_split() const {
  return split_.Get();
}
inline void LabelWeight::_internal_set_split(const std::string& value) {
  
  split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabelWeight::set_split(std::string&& value) {
  
  split_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabelWeight.split)
}
inline void LabelWeight::set_split(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabelWeight.split)
}
inline void LabelWeight::set_split(const char* value,
    size_t size) {
  
  split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabelWeight.split)
}
inline std::string* LabelWeight::_internal_mutable_split() {
  
  return split_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabelWeight::release_split() {
  // @@protoc_insertion_point(field_release:LabelWeight.split)
  return split_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelWeight::set_allocated_split(std::string* split) {
  if (split != nullptr) {
    
  } else {
    
  }
  split_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), split,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabelWeight.split)
}

// -------------------------------------------------------------------

// LabelsFromBboxes

// bool set_background_label_zero = 1;
inline void LabelsFromBboxes::clear_set_background_label_zero() {
  set_background_label_zero_ = false;
}
inline bool LabelsFromBboxes::_internal_set_background_label_zero() const {
  return set_background_label_zero_;
}
inline bool LabelsFromBboxes::set_background_label_zero() const {
  // @@protoc_insertion_point(field_get:LabelsFromBboxes.set_background_label_zero)
  return _internal_set_background_label_zero();
}
inline void LabelsFromBboxes::_internal_set_set_background_label_zero(bool value) {
  
  set_background_label_zero_ = value;
}
inline void LabelsFromBboxes::set_set_background_label_zero(bool value) {
  _internal_set_set_background_label_zero(value);
  // @@protoc_insertion_point(field_set:LabelsFromBboxes.set_background_label_zero)
}

// -------------------------------------------------------------------

// SSDRandomCropOperation

// float min_object_covered = 1;
inline void SSDRandomCropOperation::clear_min_object_covered() {
  min_object_covered_ = 0;
}
inline float SSDRandomCropOperation::_internal_min_object_covered() const {
  return min_object_covered_;
}
inline float SSDRandomCropOperation::min_object_covered() const {
  // @@protoc_insertion_point(field_get:SSDRandomCropOperation.min_object_covered)
  return _internal_min_object_covered();
}
inline void SSDRandomCropOperation::_internal_set_min_object_covered(float value) {
  
  min_object_covered_ = value;
}
inline void SSDRandomCropOperation::set_min_object_covered(float value) {
  _internal_set_min_object_covered(value);
  // @@protoc_insertion_point(field_set:SSDRandomCropOperation.min_object_covered)
}

// float min_aspect_ratio = 2;
inline void SSDRandomCropOperation::clear_min_aspect_ratio() {
  min_aspect_ratio_ = 0;
}
inline float SSDRandomCropOperation::_internal_min_aspect_ratio() const {
  return min_aspect_ratio_;
}
inline float SSDRandomCropOperation::min_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:SSDRandomCropOperation.min_aspect_ratio)
  return _internal_min_aspect_ratio();
}
inline void SSDRandomCropOperation::_internal_set_min_aspect_ratio(float value) {
  
  min_aspect_ratio_ = value;
}
inline void SSDRandomCropOperation::set_min_aspect_ratio(float value) {
  _internal_set_min_aspect_ratio(value);
  // @@protoc_insertion_point(field_set:SSDRandomCropOperation.min_aspect_ratio)
}

// float max_aspect_ratio = 3;
inline void SSDRandomCropOperation::clear_max_aspect_ratio() {
  max_aspect_ratio_ = 0;
}
inline float SSDRandomCropOperation::_internal_max_aspect_ratio() const {
  return max_aspect_ratio_;
}
inline float SSDRandomCropOperation::max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:SSDRandomCropOperation.max_aspect_ratio)
  return _internal_max_aspect_ratio();
}
inline void SSDRandomCropOperation::_internal_set_max_aspect_ratio(float value) {
  
  max_aspect_ratio_ = value;
}
inline void SSDRandomCropOperation::set_max_aspect_ratio(float value) {
  _internal_set_max_aspect_ratio(value);
  // @@protoc_insertion_point(field_set:SSDRandomCropOperation.max_aspect_ratio)
}

// float min_area = 4;
inline void SSDRandomCropOperation::clear_min_area() {
  min_area_ = 0;
}
inline float SSDRandomCropOperation::_internal_min_area() const {
  return min_area_;
}
inline float SSDRandomCropOperation::min_area() const {
  // @@protoc_insertion_point(field_get:SSDRandomCropOperation.min_area)
  return _internal_min_area();
}
inline void SSDRandomCropOperation::_internal_set_min_area(float value) {
  
  min_area_ = value;
}
inline void SSDRandomCropOperation::set_min_area(float value) {
  _internal_set_min_area(value);
  // @@protoc_insertion_point(field_set:SSDRandomCropOperation.min_area)
}

// float max_area = 5;
inline void SSDRandomCropOperation::clear_max_area() {
  max_area_ = 0;
}
inline float SSDRandomCropOperation::_internal_max_area() const {
  return max_area_;
}
inline float SSDRandomCropOperation::max_area() const {
  // @@protoc_insertion_point(field_get:SSDRandomCropOperation.max_area)
  return _internal_max_area();
}
inline void SSDRandomCropOperation::_internal_set_max_area(float value) {
  
  max_area_ = value;
}
inline void SSDRandomCropOperation::set_max_area(float value) {
  _internal_set_max_area(value);
  // @@protoc_insertion_point(field_set:SSDRandomCropOperation.max_area)
}

// float overlap_thresh = 6;
inline void SSDRandomCropOperation::clear_overlap_thresh() {
  overlap_thresh_ = 0;
}
inline float SSDRandomCropOperation::_internal_overlap_thresh() const {
  return overlap_thresh_;
}
inline float SSDRandomCropOperation::overlap_thresh() const {
  // @@protoc_insertion_point(field_get:SSDRandomCropOperation.overlap_thresh)
  return _internal_overlap_thresh();
}
inline void SSDRandomCropOperation::_internal_set_overlap_thresh(float value) {
  
  overlap_thresh_ = value;
}
inline void SSDRandomCropOperation::set_overlap_thresh(float value) {
  _internal_set_overlap_thresh(value);
  // @@protoc_insertion_point(field_set:SSDRandomCropOperation.overlap_thresh)
}

// float random_coef = 7;
inline void SSDRandomCropOperation::clear_random_coef() {
  random_coef_ = 0;
}
inline float SSDRandomCropOperation::_internal_random_coef() const {
  return random_coef_;
}
inline float SSDRandomCropOperation::random_coef() const {
  // @@protoc_insertion_point(field_get:SSDRandomCropOperation.random_coef)
  return _internal_random_coef();
}
inline void SSDRandomCropOperation::_internal_set_random_coef(float value) {
  
  random_coef_ = value;
}
inline void SSDRandomCropOperation::set_random_coef(float value) {
  _internal_set_random_coef(value);
  // @@protoc_insertion_point(field_set:SSDRandomCropOperation.random_coef)
}

// -------------------------------------------------------------------

// RelativeCropTransform

// repeated float relative_scale_range = 1;
inline int RelativeCropTransform::_internal_relative_scale_range_size() const {
  return relative_scale_range_.size();
}
inline int RelativeCropTransform::relative_scale_range_size() const {
  return _internal_relative_scale_range_size();
}
inline void RelativeCropTransform::clear_relative_scale_range() {
  relative_scale_range_.Clear();
}
inline float RelativeCropTransform::_internal_relative_scale_range(int index) const {
  return relative_scale_range_.Get(index);
}
inline float RelativeCropTransform::relative_scale_range(int index) const {
  // @@protoc_insertion_point(field_get:RelativeCropTransform.relative_scale_range)
  return _internal_relative_scale_range(index);
}
inline void RelativeCropTransform::set_relative_scale_range(int index, float value) {
  relative_scale_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:RelativeCropTransform.relative_scale_range)
}
inline void RelativeCropTransform::_internal_add_relative_scale_range(float value) {
  relative_scale_range_.Add(value);
}
inline void RelativeCropTransform::add_relative_scale_range(float value) {
  _internal_add_relative_scale_range(value);
  // @@protoc_insertion_point(field_add:RelativeCropTransform.relative_scale_range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RelativeCropTransform::_internal_relative_scale_range() const {
  return relative_scale_range_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RelativeCropTransform::relative_scale_range() const {
  // @@protoc_insertion_point(field_list:RelativeCropTransform.relative_scale_range)
  return _internal_relative_scale_range();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RelativeCropTransform::_internal_mutable_relative_scale_range() {
  return &relative_scale_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RelativeCropTransform::mutable_relative_scale_range() {
  // @@protoc_insertion_point(field_mutable_list:RelativeCropTransform.relative_scale_range)
  return _internal_mutable_relative_scale_range();
}

// repeated float relative_aspect_range = 2;
inline int RelativeCropTransform::_internal_relative_aspect_range_size() const {
  return relative_aspect_range_.size();
}
inline int RelativeCropTransform::relative_aspect_range_size() const {
  return _internal_relative_aspect_range_size();
}
inline void RelativeCropTransform::clear_relative_aspect_range() {
  relative_aspect_range_.Clear();
}
inline float RelativeCropTransform::_internal_relative_aspect_range(int index) const {
  return relative_aspect_range_.Get(index);
}
inline float RelativeCropTransform::relative_aspect_range(int index) const {
  // @@protoc_insertion_point(field_get:RelativeCropTransform.relative_aspect_range)
  return _internal_relative_aspect_range(index);
}
inline void RelativeCropTransform::set_relative_aspect_range(int index, float value) {
  relative_aspect_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:RelativeCropTransform.relative_aspect_range)
}
inline void RelativeCropTransform::_internal_add_relative_aspect_range(float value) {
  relative_aspect_range_.Add(value);
}
inline void RelativeCropTransform::add_relative_aspect_range(float value) {
  _internal_add_relative_aspect_range(value);
  // @@protoc_insertion_point(field_add:RelativeCropTransform.relative_aspect_range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RelativeCropTransform::_internal_relative_aspect_range() const {
  return relative_aspect_range_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RelativeCropTransform::relative_aspect_range() const {
  // @@protoc_insertion_point(field_list:RelativeCropTransform.relative_aspect_range)
  return _internal_relative_aspect_range();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RelativeCropTransform::_internal_mutable_relative_aspect_range() {
  return &relative_aspect_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RelativeCropTransform::mutable_relative_aspect_range() {
  // @@protoc_insertion_point(field_mutable_list:RelativeCropTransform.relative_aspect_range)
  return _internal_mutable_relative_aspect_range();
}

// bool horizontal_flip = 3;
inline void RelativeCropTransform::clear_horizontal_flip() {
  horizontal_flip_ = false;
}
inline bool RelativeCropTransform::_internal_horizontal_flip() const {
  return horizontal_flip_;
}
inline bool RelativeCropTransform::horizontal_flip() const {
  // @@protoc_insertion_point(field_get:RelativeCropTransform.horizontal_flip)
  return _internal_horizontal_flip();
}
inline void RelativeCropTransform::_internal_set_horizontal_flip(bool value) {
  
  horizontal_flip_ = value;
}
inline void RelativeCropTransform::set_horizontal_flip(bool value) {
  _internal_set_horizontal_flip(value);
  // @@protoc_insertion_point(field_set:RelativeCropTransform.horizontal_flip)
}

// float min_bbox_overlap = 4;
inline void RelativeCropTransform::clear_min_bbox_overlap() {
  min_bbox_overlap_ = 0;
}
inline float RelativeCropTransform::_internal_min_bbox_overlap() const {
  return min_bbox_overlap_;
}
inline float RelativeCropTransform::min_bbox_overlap() const {
  // @@protoc_insertion_point(field_get:RelativeCropTransform.min_bbox_overlap)
  return _internal_min_bbox_overlap();
}
inline void RelativeCropTransform::_internal_set_min_bbox_overlap(float value) {
  
  min_bbox_overlap_ = value;
}
inline void RelativeCropTransform::set_min_bbox_overlap(float value) {
  _internal_set_min_bbox_overlap(value);
  // @@protoc_insertion_point(field_set:RelativeCropTransform.min_bbox_overlap)
}

// int32 attempts = 5;
inline void RelativeCropTransform::clear_attempts() {
  attempts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RelativeCropTransform::_internal_attempts() const {
  return attempts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RelativeCropTransform::attempts() const {
  // @@protoc_insertion_point(field_get:RelativeCropTransform.attempts)
  return _internal_attempts();
}
inline void RelativeCropTransform::_internal_set_attempts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attempts_ = value;
}
inline void RelativeCropTransform::set_attempts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attempts(value);
  // @@protoc_insertion_point(field_set:RelativeCropTransform.attempts)
}

// .RelativeCropTransform.FallbackMode max_attempts_fallback = 6;
inline void RelativeCropTransform::clear_max_attempts_fallback() {
  max_attempts_fallback_ = 0;
}
inline ::RelativeCropTransform_FallbackMode RelativeCropTransform::_internal_max_attempts_fallback() const {
  return static_cast< ::RelativeCropTransform_FallbackMode >(max_attempts_fallback_);
}
inline ::RelativeCropTransform_FallbackMode RelativeCropTransform::max_attempts_fallback() const {
  // @@protoc_insertion_point(field_get:RelativeCropTransform.max_attempts_fallback)
  return _internal_max_attempts_fallback();
}
inline void RelativeCropTransform::_internal_set_max_attempts_fallback(::RelativeCropTransform_FallbackMode value) {
  
  max_attempts_fallback_ = value;
}
inline void RelativeCropTransform::set_max_attempts_fallback(::RelativeCropTransform_FallbackMode value) {
  _internal_set_max_attempts_fallback(value);
  // @@protoc_insertion_point(field_set:RelativeCropTransform.max_attempts_fallback)
}

// .RelativeCropTransform.FallbackMode images_with_no_bboxes_fallback = 7;
inline void RelativeCropTransform::clear_images_with_no_bboxes_fallback() {
  images_with_no_bboxes_fallback_ = 0;
}
inline ::RelativeCropTransform_FallbackMode RelativeCropTransform::_internal_images_with_no_bboxes_fallback() const {
  return static_cast< ::RelativeCropTransform_FallbackMode >(images_with_no_bboxes_fallback_);
}
inline ::RelativeCropTransform_FallbackMode RelativeCropTransform::images_with_no_bboxes_fallback() const {
  // @@protoc_insertion_point(field_get:RelativeCropTransform.images_with_no_bboxes_fallback)
  return _internal_images_with_no_bboxes_fallback();
}
inline void RelativeCropTransform::_internal_set_images_with_no_bboxes_fallback(::RelativeCropTransform_FallbackMode value) {
  
  images_with_no_bboxes_fallback_ = value;
}
inline void RelativeCropTransform::set_images_with_no_bboxes_fallback(::RelativeCropTransform_FallbackMode value) {
  _internal_set_images_with_no_bboxes_fallback(value);
  // @@protoc_insertion_point(field_set:RelativeCropTransform.images_with_no_bboxes_fallback)
}

// -------------------------------------------------------------------

// AspectRatioTransform

// repeated float relative_aspect_range = 1;
inline int AspectRatioTransform::_internal_relative_aspect_range_size() const {
  return relative_aspect_range_.size();
}
inline int AspectRatioTransform::relative_aspect_range_size() const {
  return _internal_relative_aspect_range_size();
}
inline void AspectRatioTransform::clear_relative_aspect_range() {
  relative_aspect_range_.Clear();
}
inline float AspectRatioTransform::_internal_relative_aspect_range(int index) const {
  return relative_aspect_range_.Get(index);
}
inline float AspectRatioTransform::relative_aspect_range(int index) const {
  // @@protoc_insertion_point(field_get:AspectRatioTransform.relative_aspect_range)
  return _internal_relative_aspect_range(index);
}
inline void AspectRatioTransform::set_relative_aspect_range(int index, float value) {
  relative_aspect_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:AspectRatioTransform.relative_aspect_range)
}
inline void AspectRatioTransform::_internal_add_relative_aspect_range(float value) {
  relative_aspect_range_.Add(value);
}
inline void AspectRatioTransform::add_relative_aspect_range(float value) {
  _internal_add_relative_aspect_range(value);
  // @@protoc_insertion_point(field_add:AspectRatioTransform.relative_aspect_range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AspectRatioTransform::_internal_relative_aspect_range() const {
  return relative_aspect_range_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AspectRatioTransform::relative_aspect_range() const {
  // @@protoc_insertion_point(field_list:AspectRatioTransform.relative_aspect_range)
  return _internal_relative_aspect_range();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AspectRatioTransform::_internal_mutable_relative_aspect_range() {
  return &relative_aspect_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AspectRatioTransform::mutable_relative_aspect_range() {
  // @@protoc_insertion_point(field_mutable_list:AspectRatioTransform.relative_aspect_range)
  return _internal_mutable_relative_aspect_range();
}

// -------------------------------------------------------------------

// AffineTransform

// float skip_prob = 1;
inline void AffineTransform::clear_skip_prob() {
  skip_prob_ = 0;
}
inline float AffineTransform::_internal_skip_prob() const {
  return skip_prob_;
}
inline float AffineTransform::skip_prob() const {
  // @@protoc_insertion_point(field_get:AffineTransform.skip_prob)
  return _internal_skip_prob();
}
inline void AffineTransform::_internal_set_skip_prob(float value) {
  
  skip_prob_ = value;
}
inline void AffineTransform::set_skip_prob(float value) {
  _internal_set_skip_prob(value);
  // @@protoc_insertion_point(field_set:AffineTransform.skip_prob)
}

// float rotate_min = 2;
inline void AffineTransform::clear_rotate_min() {
  rotate_min_ = 0;
}
inline float AffineTransform::_internal_rotate_min() const {
  return rotate_min_;
}
inline float AffineTransform::rotate_min() const {
  // @@protoc_insertion_point(field_get:AffineTransform.rotate_min)
  return _internal_rotate_min();
}
inline void AffineTransform::_internal_set_rotate_min(float value) {
  
  rotate_min_ = value;
}
inline void AffineTransform::set_rotate_min(float value) {
  _internal_set_rotate_min(value);
  // @@protoc_insertion_point(field_set:AffineTransform.rotate_min)
}

// float rotate_max = 3;
inline void AffineTransform::clear_rotate_max() {
  rotate_max_ = 0;
}
inline float AffineTransform::_internal_rotate_max() const {
  return rotate_max_;
}
inline float AffineTransform::rotate_max() const {
  // @@protoc_insertion_point(field_get:AffineTransform.rotate_max)
  return _internal_rotate_max();
}
inline void AffineTransform::_internal_set_rotate_max(float value) {
  
  rotate_max_ = value;
}
inline void AffineTransform::set_rotate_max(float value) {
  _internal_set_rotate_max(value);
  // @@protoc_insertion_point(field_set:AffineTransform.rotate_max)
}

// bool crop_original_size = 4;
inline void AffineTransform::clear_crop_original_size() {
  crop_original_size_ = false;
}
inline bool AffineTransform::_internal_crop_original_size() const {
  return crop_original_size_;
}
inline bool AffineTransform::crop_original_size() const {
  // @@protoc_insertion_point(field_get:AffineTransform.crop_original_size)
  return _internal_crop_original_size();
}
inline void AffineTransform::_internal_set_crop_original_size(bool value) {
  
  crop_original_size_ = value;
}
inline void AffineTransform::set_crop_original_size(bool value) {
  _internal_set_crop_original_size(value);
  // @@protoc_insertion_point(field_set:AffineTransform.crop_original_size)
}

// bool use_transparent_corners = 5;
inline void AffineTransform::clear_use_transparent_corners() {
  use_transparent_corners_ = false;
}
inline bool AffineTransform::_internal_use_transparent_corners() const {
  return use_transparent_corners_;
}
inline bool AffineTransform::use_transparent_corners() const {
  // @@protoc_insertion_point(field_get:AffineTransform.use_transparent_corners)
  return _internal_use_transparent_corners();
}
inline void AffineTransform::_internal_set_use_transparent_corners(bool value) {
  
  use_transparent_corners_ = value;
}
inline void AffineTransform::set_use_transparent_corners(bool value) {
  _internal_set_use_transparent_corners(value);
  // @@protoc_insertion_point(field_set:AffineTransform.use_transparent_corners)
}

// -------------------------------------------------------------------

// ScaleTransform

// string scale_based_on = 1;
inline void ScaleTransform::clear_scale_based_on() {
  scale_based_on_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ScaleTransform::scale_based_on() const {
  // @@protoc_insertion_point(field_get:ScaleTransform.scale_based_on)
  return _internal_scale_based_on();
}
inline void ScaleTransform::set_scale_based_on(const std::string& value) {
  _internal_set_scale_based_on(value);
  // @@protoc_insertion_point(field_set:ScaleTransform.scale_based_on)
}
inline std::string* ScaleTransform::mutable_scale_based_on() {
  // @@protoc_insertion_point(field_mutable:ScaleTransform.scale_based_on)
  return _internal_mutable_scale_based_on();
}
inline const std::string& ScaleTransform::_internal_scale_based_on() const {
  return scale_based_on_.Get();
}
inline void ScaleTransform::_internal_set_scale_based_on(const std::string& value) {
  
  scale_based_on_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ScaleTransform::set_scale_based_on(std::string&& value) {
  
  scale_based_on_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ScaleTransform.scale_based_on)
}
inline void ScaleTransform::set_scale_based_on(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scale_based_on_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ScaleTransform.scale_based_on)
}
inline void ScaleTransform::set_scale_based_on(const char* value,
    size_t size) {
  
  scale_based_on_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ScaleTransform.scale_based_on)
}
inline std::string* ScaleTransform::_internal_mutable_scale_based_on() {
  
  return scale_based_on_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ScaleTransform::release_scale_based_on() {
  // @@protoc_insertion_point(field_release:ScaleTransform.scale_based_on)
  return scale_based_on_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScaleTransform::set_allocated_scale_based_on(std::string* scale_based_on) {
  if (scale_based_on != nullptr) {
    
  } else {
    
  }
  scale_based_on_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scale_based_on,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ScaleTransform.scale_based_on)
}

// repeated float size_range = 2;
inline int ScaleTransform::_internal_size_range_size() const {
  return size_range_.size();
}
inline int ScaleTransform::size_range_size() const {
  return _internal_size_range_size();
}
inline void ScaleTransform::clear_size_range() {
  size_range_.Clear();
}
inline float ScaleTransform::_internal_size_range(int index) const {
  return size_range_.Get(index);
}
inline float ScaleTransform::size_range(int index) const {
  // @@protoc_insertion_point(field_get:ScaleTransform.size_range)
  return _internal_size_range(index);
}
inline void ScaleTransform::set_size_range(int index, float value) {
  size_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:ScaleTransform.size_range)
}
inline void ScaleTransform::_internal_add_size_range(float value) {
  size_range_.Add(value);
}
inline void ScaleTransform::add_size_range(float value) {
  _internal_add_size_range(value);
  // @@protoc_insertion_point(field_add:ScaleTransform.size_range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ScaleTransform::_internal_size_range() const {
  return size_range_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ScaleTransform::size_range() const {
  // @@protoc_insertion_point(field_list:ScaleTransform.size_range)
  return _internal_size_range();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ScaleTransform::_internal_mutable_size_range() {
  return &size_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ScaleTransform::mutable_size_range() {
  // @@protoc_insertion_point(field_mutable_list:ScaleTransform.size_range)
  return _internal_mutable_size_range();
}

// -------------------------------------------------------------------

// DistortionTransform

// float skip_prob = 1;
inline void DistortionTransform::clear_skip_prob() {
  skip_prob_ = 0;
}
inline float DistortionTransform::_internal_skip_prob() const {
  return skip_prob_;
}
inline float DistortionTransform::skip_prob() const {
  // @@protoc_insertion_point(field_get:DistortionTransform.skip_prob)
  return _internal_skip_prob();
}
inline void DistortionTransform::_internal_set_skip_prob(float value) {
  
  skip_prob_ = value;
}
inline void DistortionTransform::set_skip_prob(float value) {
  _internal_set_skip_prob(value);
  // @@protoc_insertion_point(field_set:DistortionTransform.skip_prob)
}

// int32 grid_width = 2;
inline void DistortionTransform::clear_grid_width() {
  grid_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DistortionTransform::_internal_grid_width() const {
  return grid_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DistortionTransform::grid_width() const {
  // @@protoc_insertion_point(field_get:DistortionTransform.grid_width)
  return _internal_grid_width();
}
inline void DistortionTransform::_internal_set_grid_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grid_width_ = value;
}
inline void DistortionTransform::set_grid_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grid_width(value);
  // @@protoc_insertion_point(field_set:DistortionTransform.grid_width)
}

// int32 grid_height = 3;
inline void DistortionTransform::clear_grid_height() {
  grid_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DistortionTransform::_internal_grid_height() const {
  return grid_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DistortionTransform::grid_height() const {
  // @@protoc_insertion_point(field_get:DistortionTransform.grid_height)
  return _internal_grid_height();
}
inline void DistortionTransform::_internal_set_grid_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grid_height_ = value;
}
inline void DistortionTransform::set_grid_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grid_height(value);
  // @@protoc_insertion_point(field_set:DistortionTransform.grid_height)
}

// float magnitude = 4;
inline void DistortionTransform::clear_magnitude() {
  magnitude_ = 0;
}
inline float DistortionTransform::_internal_magnitude() const {
  return magnitude_;
}
inline float DistortionTransform::magnitude() const {
  // @@protoc_insertion_point(field_get:DistortionTransform.magnitude)
  return _internal_magnitude();
}
inline void DistortionTransform::_internal_set_magnitude(float value) {
  
  magnitude_ = value;
}
inline void DistortionTransform::set_magnitude(float value) {
  _internal_set_magnitude(value);
  // @@protoc_insertion_point(field_set:DistortionTransform.magnitude)
}

// -------------------------------------------------------------------

// FlipTransform

// float flip_prob = 1;
inline void FlipTransform::clear_flip_prob() {
  flip_prob_ = 0;
}
inline float FlipTransform::_internal_flip_prob() const {
  return flip_prob_;
}
inline float FlipTransform::flip_prob() const {
  // @@protoc_insertion_point(field_get:FlipTransform.flip_prob)
  return _internal_flip_prob();
}
inline void FlipTransform::_internal_set_flip_prob(float value) {
  
  flip_prob_ = value;
}
inline void FlipTransform::set_flip_prob(float value) {
  _internal_set_flip_prob(value);
  // @@protoc_insertion_point(field_set:FlipTransform.flip_prob)
}

// bool horizontal = 2;
inline void FlipTransform::clear_horizontal() {
  horizontal_ = false;
}
inline bool FlipTransform::_internal_horizontal() const {
  return horizontal_;
}
inline bool FlipTransform::horizontal() const {
  // @@protoc_insertion_point(field_get:FlipTransform.horizontal)
  return _internal_horizontal();
}
inline void FlipTransform::_internal_set_horizontal(bool value) {
  
  horizontal_ = value;
}
inline void FlipTransform::set_horizontal(bool value) {
  _internal_set_horizontal(value);
  // @@protoc_insertion_point(field_set:FlipTransform.horizontal)
}

// bool vertical = 3;
inline void FlipTransform::clear_vertical() {
  vertical_ = false;
}
inline bool FlipTransform::_internal_vertical() const {
  return vertical_;
}
inline bool FlipTransform::vertical() const {
  // @@protoc_insertion_point(field_get:FlipTransform.vertical)
  return _internal_vertical();
}
inline void FlipTransform::_internal_set_vertical(bool value) {
  
  vertical_ = value;
}
inline void FlipTransform::set_vertical(bool value) {
  _internal_set_vertical(value);
  // @@protoc_insertion_point(field_set:FlipTransform.vertical)
}

// -------------------------------------------------------------------

// ColorTransform

// repeated float brightness_range = 1;
inline int ColorTransform::_internal_brightness_range_size() const {
  return brightness_range_.size();
}
inline int ColorTransform::brightness_range_size() const {
  return _internal_brightness_range_size();
}
inline void ColorTransform::clear_brightness_range() {
  brightness_range_.Clear();
}
inline float ColorTransform::_internal_brightness_range(int index) const {
  return brightness_range_.Get(index);
}
inline float ColorTransform::brightness_range(int index) const {
  // @@protoc_insertion_point(field_get:ColorTransform.brightness_range)
  return _internal_brightness_range(index);
}
inline void ColorTransform::set_brightness_range(int index, float value) {
  brightness_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:ColorTransform.brightness_range)
}
inline void ColorTransform::_internal_add_brightness_range(float value) {
  brightness_range_.Add(value);
}
inline void ColorTransform::add_brightness_range(float value) {
  _internal_add_brightness_range(value);
  // @@protoc_insertion_point(field_add:ColorTransform.brightness_range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ColorTransform::_internal_brightness_range() const {
  return brightness_range_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ColorTransform::brightness_range() const {
  // @@protoc_insertion_point(field_list:ColorTransform.brightness_range)
  return _internal_brightness_range();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ColorTransform::_internal_mutable_brightness_range() {
  return &brightness_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ColorTransform::mutable_brightness_range() {
  // @@protoc_insertion_point(field_mutable_list:ColorTransform.brightness_range)
  return _internal_mutable_brightness_range();
}

// repeated float contrast_range = 2;
inline int ColorTransform::_internal_contrast_range_size() const {
  return contrast_range_.size();
}
inline int ColorTransform::contrast_range_size() const {
  return _internal_contrast_range_size();
}
inline void ColorTransform::clear_contrast_range() {
  contrast_range_.Clear();
}
inline float ColorTransform::_internal_contrast_range(int index) const {
  return contrast_range_.Get(index);
}
inline float ColorTransform::contrast_range(int index) const {
  // @@protoc_insertion_point(field_get:ColorTransform.contrast_range)
  return _internal_contrast_range(index);
}
inline void ColorTransform::set_contrast_range(int index, float value) {
  contrast_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:ColorTransform.contrast_range)
}
inline void ColorTransform::_internal_add_contrast_range(float value) {
  contrast_range_.Add(value);
}
inline void ColorTransform::add_contrast_range(float value) {
  _internal_add_contrast_range(value);
  // @@protoc_insertion_point(field_add:ColorTransform.contrast_range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ColorTransform::_internal_contrast_range() const {
  return contrast_range_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ColorTransform::contrast_range() const {
  // @@protoc_insertion_point(field_list:ColorTransform.contrast_range)
  return _internal_contrast_range();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ColorTransform::_internal_mutable_contrast_range() {
  return &contrast_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ColorTransform::mutable_contrast_range() {
  // @@protoc_insertion_point(field_mutable_list:ColorTransform.contrast_range)
  return _internal_mutable_contrast_range();
}

// repeated float color_range = 3;
inline int ColorTransform::_internal_color_range_size() const {
  return color_range_.size();
}
inline int ColorTransform::color_range_size() const {
  return _internal_color_range_size();
}
inline void ColorTransform::clear_color_range() {
  color_range_.Clear();
}
inline float ColorTransform::_internal_color_range(int index) const {
  return color_range_.Get(index);
}
inline float ColorTransform::color_range(int index) const {
  // @@protoc_insertion_point(field_get:ColorTransform.color_range)
  return _internal_color_range(index);
}
inline void ColorTransform::set_color_range(int index, float value) {
  color_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:ColorTransform.color_range)
}
inline void ColorTransform::_internal_add_color_range(float value) {
  color_range_.Add(value);
}
inline void ColorTransform::add_color_range(float value) {
  _internal_add_color_range(value);
  // @@protoc_insertion_point(field_add:ColorTransform.color_range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ColorTransform::_internal_color_range() const {
  return color_range_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ColorTransform::color_range() const {
  // @@protoc_insertion_point(field_list:ColorTransform.color_range)
  return _internal_color_range();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ColorTransform::_internal_mutable_color_range() {
  return &color_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ColorTransform::mutable_color_range() {
  // @@protoc_insertion_point(field_mutable_list:ColorTransform.color_range)
  return _internal_mutable_color_range();
}

// repeated float sharpness_range = 4;
inline int ColorTransform::_internal_sharpness_range_size() const {
  return sharpness_range_.size();
}
inline int ColorTransform::sharpness_range_size() const {
  return _internal_sharpness_range_size();
}
inline void ColorTransform::clear_sharpness_range() {
  sharpness_range_.Clear();
}
inline float ColorTransform::_internal_sharpness_range(int index) const {
  return sharpness_range_.Get(index);
}
inline float ColorTransform::sharpness_range(int index) const {
  // @@protoc_insertion_point(field_get:ColorTransform.sharpness_range)
  return _internal_sharpness_range(index);
}
inline void ColorTransform::set_sharpness_range(int index, float value) {
  sharpness_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:ColorTransform.sharpness_range)
}
inline void ColorTransform::_internal_add_sharpness_range(float value) {
  sharpness_range_.Add(value);
}
inline void ColorTransform::add_sharpness_range(float value) {
  _internal_add_sharpness_range(value);
  // @@protoc_insertion_point(field_add:ColorTransform.sharpness_range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ColorTransform::_internal_sharpness_range() const {
  return sharpness_range_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ColorTransform::sharpness_range() const {
  // @@protoc_insertion_point(field_list:ColorTransform.sharpness_range)
  return _internal_sharpness_range();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ColorTransform::_internal_mutable_sharpness_range() {
  return &sharpness_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ColorTransform::mutable_sharpness_range() {
  // @@protoc_insertion_point(field_mutable_list:ColorTransform.sharpness_range)
  return _internal_mutable_sharpness_range();
}

// float invert_prob = 5;
inline void ColorTransform::clear_invert_prob() {
  invert_prob_ = 0;
}
inline float ColorTransform::_internal_invert_prob() const {
  return invert_prob_;
}
inline float ColorTransform::invert_prob() const {
  // @@protoc_insertion_point(field_get:ColorTransform.invert_prob)
  return _internal_invert_prob();
}
inline void ColorTransform::_internal_set_invert_prob(float value) {
  
  invert_prob_ = value;
}
inline void ColorTransform::set_invert_prob(float value) {
  _internal_set_invert_prob(value);
  // @@protoc_insertion_point(field_set:ColorTransform.invert_prob)
}

// float skip_prob = 6;
inline void ColorTransform::clear_skip_prob() {
  skip_prob_ = 0;
}
inline float ColorTransform::_internal_skip_prob() const {
  return skip_prob_;
}
inline float ColorTransform::skip_prob() const {
  // @@protoc_insertion_point(field_get:ColorTransform.skip_prob)
  return _internal_skip_prob();
}
inline void ColorTransform::_internal_set_skip_prob(float value) {
  
  skip_prob_ = value;
}
inline void ColorTransform::set_skip_prob(float value) {
  _internal_set_skip_prob(value);
  // @@protoc_insertion_point(field_set:ColorTransform.skip_prob)
}

// -------------------------------------------------------------------

// LandmarkAlignTransform

// string transform_type = 1;
inline void LandmarkAlignTransform::clear_transform_type() {
  transform_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LandmarkAlignTransform::transform_type() const {
  // @@protoc_insertion_point(field_get:LandmarkAlignTransform.transform_type)
  return _internal_transform_type();
}
inline void LandmarkAlignTransform::set_transform_type(const std::string& value) {
  _internal_set_transform_type(value);
  // @@protoc_insertion_point(field_set:LandmarkAlignTransform.transform_type)
}
inline std::string* LandmarkAlignTransform::mutable_transform_type() {
  // @@protoc_insertion_point(field_mutable:LandmarkAlignTransform.transform_type)
  return _internal_mutable_transform_type();
}
inline const std::string& LandmarkAlignTransform::_internal_transform_type() const {
  return transform_type_.Get();
}
inline void LandmarkAlignTransform::_internal_set_transform_type(const std::string& value) {
  
  transform_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LandmarkAlignTransform::set_transform_type(std::string&& value) {
  
  transform_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LandmarkAlignTransform.transform_type)
}
inline void LandmarkAlignTransform::set_transform_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transform_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LandmarkAlignTransform.transform_type)
}
inline void LandmarkAlignTransform::set_transform_type(const char* value,
    size_t size) {
  
  transform_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LandmarkAlignTransform.transform_type)
}
inline std::string* LandmarkAlignTransform::_internal_mutable_transform_type() {
  
  return transform_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LandmarkAlignTransform::release_transform_type() {
  // @@protoc_insertion_point(field_release:LandmarkAlignTransform.transform_type)
  return transform_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LandmarkAlignTransform::set_allocated_transform_type(std::string* transform_type) {
  if (transform_type != nullptr) {
    
  } else {
    
  }
  transform_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transform_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LandmarkAlignTransform.transform_type)
}

// int32 output_size = 2;
inline void LandmarkAlignTransform::clear_output_size() {
  output_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LandmarkAlignTransform::_internal_output_size() const {
  return output_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LandmarkAlignTransform::output_size() const {
  // @@protoc_insertion_point(field_get:LandmarkAlignTransform.output_size)
  return _internal_output_size();
}
inline void LandmarkAlignTransform::_internal_set_output_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  output_size_ = value;
}
inline void LandmarkAlignTransform::set_output_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_output_size(value);
  // @@protoc_insertion_point(field_set:LandmarkAlignTransform.output_size)
}

// -------------------------------------------------------------------

// FilterBbox

// bool filter_bg_labels = 1;
inline void FilterBbox::clear_filter_bg_labels() {
  filter_bg_labels_ = false;
}
inline bool FilterBbox::_internal_filter_bg_labels() const {
  return filter_bg_labels_;
}
inline bool FilterBbox::filter_bg_labels() const {
  // @@protoc_insertion_point(field_get:FilterBbox.filter_bg_labels)
  return _internal_filter_bg_labels();
}
inline void FilterBbox::_internal_set_filter_bg_labels(bool value) {
  
  filter_bg_labels_ = value;
}
inline void FilterBbox::set_filter_bg_labels(bool value) {
  _internal_set_filter_bg_labels(value);
  // @@protoc_insertion_point(field_set:FilterBbox.filter_bg_labels)
}

// bool clip = 2;
inline void FilterBbox::clear_clip() {
  clip_ = false;
}
inline bool FilterBbox::_internal_clip() const {
  return clip_;
}
inline bool FilterBbox::clip() const {
  // @@protoc_insertion_point(field_get:FilterBbox.clip)
  return _internal_clip();
}
inline void FilterBbox::_internal_set_clip(bool value) {
  
  clip_ = value;
}
inline void FilterBbox::set_clip(bool value) {
  _internal_set_clip(value);
  // @@protoc_insertion_point(field_set:FilterBbox.clip)
}

// float visible_area_threshold = 3;
inline void FilterBbox::clear_visible_area_threshold() {
  visible_area_threshold_ = 0;
}
inline float FilterBbox::_internal_visible_area_threshold() const {
  return visible_area_threshold_;
}
inline float FilterBbox::visible_area_threshold() const {
  // @@protoc_insertion_point(field_get:FilterBbox.visible_area_threshold)
  return _internal_visible_area_threshold();
}
inline void FilterBbox::_internal_set_visible_area_threshold(float value) {
  
  visible_area_threshold_ = value;
}
inline void FilterBbox::set_visible_area_threshold(float value) {
  _internal_set_visible_area_threshold(value);
  // @@protoc_insertion_point(field_set:FilterBbox.visible_area_threshold)
}

// float no_bboxes_crop_sample = 4;
inline void FilterBbox::clear_no_bboxes_crop_sample() {
  no_bboxes_crop_sample_ = 0;
}
inline float FilterBbox::_internal_no_bboxes_crop_sample() const {
  return no_bboxes_crop_sample_;
}
inline float FilterBbox::no_bboxes_crop_sample() const {
  // @@protoc_insertion_point(field_get:FilterBbox.no_bboxes_crop_sample)
  return _internal_no_bboxes_crop_sample();
}
inline void FilterBbox::_internal_set_no_bboxes_crop_sample(float value) {
  
  no_bboxes_crop_sample_ = value;
}
inline void FilterBbox::set_no_bboxes_crop_sample(float value) {
  _internal_set_no_bboxes_crop_sample(value);
  // @@protoc_insertion_point(field_set:FilterBbox.no_bboxes_crop_sample)
}

// float visible_absolute_area_threshold = 5;
inline void FilterBbox::clear_visible_absolute_area_threshold() {
  visible_absolute_area_threshold_ = 0;
}
inline float FilterBbox::_internal_visible_absolute_area_threshold() const {
  return visible_absolute_area_threshold_;
}
inline float FilterBbox::visible_absolute_area_threshold() const {
  // @@protoc_insertion_point(field_get:FilterBbox.visible_absolute_area_threshold)
  return _internal_visible_absolute_area_threshold();
}
inline void FilterBbox::_internal_set_visible_absolute_area_threshold(float value) {
  
  visible_absolute_area_threshold_ = value;
}
inline void FilterBbox::set_visible_absolute_area_threshold(float value) {
  _internal_set_visible_absolute_area_threshold(value);
  // @@protoc_insertion_point(field_set:FilterBbox.visible_absolute_area_threshold)
}

// -------------------------------------------------------------------

// JPEGRecompression

// int32 qmin = 1;
inline void JPEGRecompression::clear_qmin() {
  qmin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JPEGRecompression::_internal_qmin() const {
  return qmin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JPEGRecompression::qmin() const {
  // @@protoc_insertion_point(field_get:JPEGRecompression.qmin)
  return _internal_qmin();
}
inline void JPEGRecompression::_internal_set_qmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  qmin_ = value;
}
inline void JPEGRecompression::set_qmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_qmin(value);
  // @@protoc_insertion_point(field_set:JPEGRecompression.qmin)
}

// int32 qmax = 2;
inline void JPEGRecompression::clear_qmax() {
  qmax_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JPEGRecompression::_internal_qmax() const {
  return qmax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JPEGRecompression::qmax() const {
  // @@protoc_insertion_point(field_get:JPEGRecompression.qmax)
  return _internal_qmax();
}
inline void JPEGRecompression::_internal_set_qmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  qmax_ = value;
}
inline void JPEGRecompression::set_qmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_qmax(value);
  // @@protoc_insertion_point(field_set:JPEGRecompression.qmax)
}

// -------------------------------------------------------------------

// LogoDataParams

// string output_logos_dataset = 1;
inline void LogoDataParams::clear_output_logos_dataset() {
  output_logos_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogoDataParams::output_logos_dataset() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.output_logos_dataset)
  return _internal_output_logos_dataset();
}
inline void LogoDataParams::set_output_logos_dataset(const std::string& value) {
  _internal_set_output_logos_dataset(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.output_logos_dataset)
}
inline std::string* LogoDataParams::mutable_output_logos_dataset() {
  // @@protoc_insertion_point(field_mutable:LogoDataParams.output_logos_dataset)
  return _internal_mutable_output_logos_dataset();
}
inline const std::string& LogoDataParams::_internal_output_logos_dataset() const {
  return output_logos_dataset_.Get();
}
inline void LogoDataParams::_internal_set_output_logos_dataset(const std::string& value) {
  
  output_logos_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogoDataParams::set_output_logos_dataset(std::string&& value) {
  
  output_logos_dataset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LogoDataParams.output_logos_dataset)
}
inline void LogoDataParams::set_output_logos_dataset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_logos_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LogoDataParams.output_logos_dataset)
}
inline void LogoDataParams::set_output_logos_dataset(const char* value,
    size_t size) {
  
  output_logos_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LogoDataParams.output_logos_dataset)
}
inline std::string* LogoDataParams::_internal_mutable_output_logos_dataset() {
  
  return output_logos_dataset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogoDataParams::release_output_logos_dataset() {
  // @@protoc_insertion_point(field_release:LogoDataParams.output_logos_dataset)
  return output_logos_dataset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogoDataParams::set_allocated_output_logos_dataset(std::string* output_logos_dataset) {
  if (output_logos_dataset != nullptr) {
    
  } else {
    
  }
  output_logos_dataset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_logos_dataset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LogoDataParams.output_logos_dataset)
}

// string pos_logos_dataset = 2;
inline void LogoDataParams::clear_pos_logos_dataset() {
  pos_logos_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogoDataParams::pos_logos_dataset() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.pos_logos_dataset)
  return _internal_pos_logos_dataset();
}
inline void LogoDataParams::set_pos_logos_dataset(const std::string& value) {
  _internal_set_pos_logos_dataset(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.pos_logos_dataset)
}
inline std::string* LogoDataParams::mutable_pos_logos_dataset() {
  // @@protoc_insertion_point(field_mutable:LogoDataParams.pos_logos_dataset)
  return _internal_mutable_pos_logos_dataset();
}
inline const std::string& LogoDataParams::_internal_pos_logos_dataset() const {
  return pos_logos_dataset_.Get();
}
inline void LogoDataParams::_internal_set_pos_logos_dataset(const std::string& value) {
  
  pos_logos_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogoDataParams::set_pos_logos_dataset(std::string&& value) {
  
  pos_logos_dataset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LogoDataParams.pos_logos_dataset)
}
inline void LogoDataParams::set_pos_logos_dataset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pos_logos_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LogoDataParams.pos_logos_dataset)
}
inline void LogoDataParams::set_pos_logos_dataset(const char* value,
    size_t size) {
  
  pos_logos_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LogoDataParams.pos_logos_dataset)
}
inline std::string* LogoDataParams::_internal_mutable_pos_logos_dataset() {
  
  return pos_logos_dataset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogoDataParams::release_pos_logos_dataset() {
  // @@protoc_insertion_point(field_release:LogoDataParams.pos_logos_dataset)
  return pos_logos_dataset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogoDataParams::set_allocated_pos_logos_dataset(std::string* pos_logos_dataset) {
  if (pos_logos_dataset != nullptr) {
    
  } else {
    
  }
  pos_logos_dataset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pos_logos_dataset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LogoDataParams.pos_logos_dataset)
}

// string neg_logos_dataset = 3;
inline void LogoDataParams::clear_neg_logos_dataset() {
  neg_logos_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogoDataParams::neg_logos_dataset() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.neg_logos_dataset)
  return _internal_neg_logos_dataset();
}
inline void LogoDataParams::set_neg_logos_dataset(const std::string& value) {
  _internal_set_neg_logos_dataset(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.neg_logos_dataset)
}
inline std::string* LogoDataParams::mutable_neg_logos_dataset() {
  // @@protoc_insertion_point(field_mutable:LogoDataParams.neg_logos_dataset)
  return _internal_mutable_neg_logos_dataset();
}
inline const std::string& LogoDataParams::_internal_neg_logos_dataset() const {
  return neg_logos_dataset_.Get();
}
inline void LogoDataParams::_internal_set_neg_logos_dataset(const std::string& value) {
  
  neg_logos_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogoDataParams::set_neg_logos_dataset(std::string&& value) {
  
  neg_logos_dataset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LogoDataParams.neg_logos_dataset)
}
inline void LogoDataParams::set_neg_logos_dataset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  neg_logos_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LogoDataParams.neg_logos_dataset)
}
inline void LogoDataParams::set_neg_logos_dataset(const char* value,
    size_t size) {
  
  neg_logos_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LogoDataParams.neg_logos_dataset)
}
inline std::string* LogoDataParams::_internal_mutable_neg_logos_dataset() {
  
  return neg_logos_dataset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogoDataParams::release_neg_logos_dataset() {
  // @@protoc_insertion_point(field_release:LogoDataParams.neg_logos_dataset)
  return neg_logos_dataset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogoDataParams::set_allocated_neg_logos_dataset(std::string* neg_logos_dataset) {
  if (neg_logos_dataset != nullptr) {
    
  } else {
    
  }
  neg_logos_dataset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), neg_logos_dataset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LogoDataParams.neg_logos_dataset)
}

// bool pos_logos_pregenerated = 4;
inline void LogoDataParams::clear_pos_logos_pregenerated() {
  pos_logos_pregenerated_ = false;
}
inline bool LogoDataParams::_internal_pos_logos_pregenerated() const {
  return pos_logos_pregenerated_;
}
inline bool LogoDataParams::pos_logos_pregenerated() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.pos_logos_pregenerated)
  return _internal_pos_logos_pregenerated();
}
inline void LogoDataParams::_internal_set_pos_logos_pregenerated(bool value) {
  
  pos_logos_pregenerated_ = value;
}
inline void LogoDataParams::set_pos_logos_pregenerated(bool value) {
  _internal_set_pos_logos_pregenerated(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.pos_logos_pregenerated)
}

// bool neg_logos_pregenerated = 5;
inline void LogoDataParams::clear_neg_logos_pregenerated() {
  neg_logos_pregenerated_ = false;
}
inline bool LogoDataParams::_internal_neg_logos_pregenerated() const {
  return neg_logos_pregenerated_;
}
inline bool LogoDataParams::neg_logos_pregenerated() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.neg_logos_pregenerated)
  return _internal_neg_logos_pregenerated();
}
inline void LogoDataParams::_internal_set_neg_logos_pregenerated(bool value) {
  
  neg_logos_pregenerated_ = value;
}
inline void LogoDataParams::set_neg_logos_pregenerated(bool value) {
  _internal_set_neg_logos_pregenerated(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.neg_logos_pregenerated)
}

// string background_dataset = 6;
inline void LogoDataParams::clear_background_dataset() {
  background_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogoDataParams::background_dataset() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.background_dataset)
  return _internal_background_dataset();
}
inline void LogoDataParams::set_background_dataset(const std::string& value) {
  _internal_set_background_dataset(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.background_dataset)
}
inline std::string* LogoDataParams::mutable_background_dataset() {
  // @@protoc_insertion_point(field_mutable:LogoDataParams.background_dataset)
  return _internal_mutable_background_dataset();
}
inline const std::string& LogoDataParams::_internal_background_dataset() const {
  return background_dataset_.Get();
}
inline void LogoDataParams::_internal_set_background_dataset(const std::string& value) {
  
  background_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogoDataParams::set_background_dataset(std::string&& value) {
  
  background_dataset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LogoDataParams.background_dataset)
}
inline void LogoDataParams::set_background_dataset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  background_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LogoDataParams.background_dataset)
}
inline void LogoDataParams::set_background_dataset(const char* value,
    size_t size) {
  
  background_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LogoDataParams.background_dataset)
}
inline std::string* LogoDataParams::_internal_mutable_background_dataset() {
  
  return background_dataset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogoDataParams::release_background_dataset() {
  // @@protoc_insertion_point(field_release:LogoDataParams.background_dataset)
  return background_dataset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogoDataParams::set_allocated_background_dataset(std::string* background_dataset) {
  if (background_dataset != nullptr) {
    
  } else {
    
  }
  background_dataset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), background_dataset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LogoDataParams.background_dataset)
}

// float pos_logos_ratio = 7;
inline void LogoDataParams::clear_pos_logos_ratio() {
  pos_logos_ratio_ = 0;
}
inline float LogoDataParams::_internal_pos_logos_ratio() const {
  return pos_logos_ratio_;
}
inline float LogoDataParams::pos_logos_ratio() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.pos_logos_ratio)
  return _internal_pos_logos_ratio();
}
inline void LogoDataParams::_internal_set_pos_logos_ratio(float value) {
  
  pos_logos_ratio_ = value;
}
inline void LogoDataParams::set_pos_logos_ratio(float value) {
  _internal_set_pos_logos_ratio(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.pos_logos_ratio)
}

// float neg_logos_ratio = 8;
inline void LogoDataParams::clear_neg_logos_ratio() {
  neg_logos_ratio_ = 0;
}
inline float LogoDataParams::_internal_neg_logos_ratio() const {
  return neg_logos_ratio_;
}
inline float LogoDataParams::neg_logos_ratio() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.neg_logos_ratio)
  return _internal_neg_logos_ratio();
}
inline void LogoDataParams::_internal_set_neg_logos_ratio(float value) {
  
  neg_logos_ratio_ = value;
}
inline void LogoDataParams::set_neg_logos_ratio(float value) {
  _internal_set_neg_logos_ratio(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.neg_logos_ratio)
}

// int32 output_size = 9;
inline void LogoDataParams::clear_output_size() {
  output_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::_internal_output_size() const {
  return output_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::output_size() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.output_size)
  return _internal_output_size();
}
inline void LogoDataParams::_internal_set_output_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  output_size_ = value;
}
inline void LogoDataParams::set_output_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_output_size(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.output_size)
}

// int32 logo_working_res = 10;
inline void LogoDataParams::clear_logo_working_res() {
  logo_working_res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::_internal_logo_working_res() const {
  return logo_working_res_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::logo_working_res() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.logo_working_res)
  return _internal_logo_working_res();
}
inline void LogoDataParams::_internal_set_logo_working_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  logo_working_res_ = value;
}
inline void LogoDataParams::set_logo_working_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_logo_working_res(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.logo_working_res)
}

// float alpha_crop_threshold = 11;
inline void LogoDataParams::clear_alpha_crop_threshold() {
  alpha_crop_threshold_ = 0;
}
inline float LogoDataParams::_internal_alpha_crop_threshold() const {
  return alpha_crop_threshold_;
}
inline float LogoDataParams::alpha_crop_threshold() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.alpha_crop_threshold)
  return _internal_alpha_crop_threshold();
}
inline void LogoDataParams::_internal_set_alpha_crop_threshold(float value) {
  
  alpha_crop_threshold_ = value;
}
inline void LogoDataParams::set_alpha_crop_threshold(float value) {
  _internal_set_alpha_crop_threshold(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.alpha_crop_threshold)
}

// repeated int32 background_crop_size_range = 12;
inline int LogoDataParams::_internal_background_crop_size_range_size() const {
  return background_crop_size_range_.size();
}
inline int LogoDataParams::background_crop_size_range_size() const {
  return _internal_background_crop_size_range_size();
}
inline void LogoDataParams::clear_background_crop_size_range() {
  background_crop_size_range_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::_internal_background_crop_size_range(int index) const {
  return background_crop_size_range_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::background_crop_size_range(int index) const {
  // @@protoc_insertion_point(field_get:LogoDataParams.background_crop_size_range)
  return _internal_background_crop_size_range(index);
}
inline void LogoDataParams::set_background_crop_size_range(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  background_crop_size_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogoDataParams.background_crop_size_range)
}
inline void LogoDataParams::_internal_add_background_crop_size_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  background_crop_size_range_.Add(value);
}
inline void LogoDataParams::add_background_crop_size_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_background_crop_size_range(value);
  // @@protoc_insertion_point(field_add:LogoDataParams.background_crop_size_range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LogoDataParams::_internal_background_crop_size_range() const {
  return background_crop_size_range_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LogoDataParams::background_crop_size_range() const {
  // @@protoc_insertion_point(field_list:LogoDataParams.background_crop_size_range)
  return _internal_background_crop_size_range();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LogoDataParams::_internal_mutable_background_crop_size_range() {
  return &background_crop_size_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LogoDataParams::mutable_background_crop_size_range() {
  // @@protoc_insertion_point(field_mutable_list:LogoDataParams.background_crop_size_range)
  return _internal_mutable_background_crop_size_range();
}

// float min_logo_size_of_image = 13;
inline void LogoDataParams::clear_min_logo_size_of_image() {
  min_logo_size_of_image_ = 0;
}
inline float LogoDataParams::_internal_min_logo_size_of_image() const {
  return min_logo_size_of_image_;
}
inline float LogoDataParams::min_logo_size_of_image() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.min_logo_size_of_image)
  return _internal_min_logo_size_of_image();
}
inline void LogoDataParams::_internal_set_min_logo_size_of_image(float value) {
  
  min_logo_size_of_image_ = value;
}
inline void LogoDataParams::set_min_logo_size_of_image(float value) {
  _internal_set_min_logo_size_of_image(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.min_logo_size_of_image)
}

// float max_logo_size_of_image = 14;
inline void LogoDataParams::clear_max_logo_size_of_image() {
  max_logo_size_of_image_ = 0;
}
inline float LogoDataParams::_internal_max_logo_size_of_image() const {
  return max_logo_size_of_image_;
}
inline float LogoDataParams::max_logo_size_of_image() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.max_logo_size_of_image)
  return _internal_max_logo_size_of_image();
}
inline void LogoDataParams::_internal_set_max_logo_size_of_image(float value) {
  
  max_logo_size_of_image_ = value;
}
inline void LogoDataParams::set_max_logo_size_of_image(float value) {
  _internal_set_max_logo_size_of_image(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.max_logo_size_of_image)
}

// int32 min_logo_size = 15;
inline void LogoDataParams::clear_min_logo_size() {
  min_logo_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::_internal_min_logo_size() const {
  return min_logo_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::min_logo_size() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.min_logo_size)
  return _internal_min_logo_size();
}
inline void LogoDataParams::_internal_set_min_logo_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_logo_size_ = value;
}
inline void LogoDataParams::set_min_logo_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_logo_size(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.min_logo_size)
}

// float max_blur = 16;
inline void LogoDataParams::clear_max_blur() {
  max_blur_ = 0;
}
inline float LogoDataParams::_internal_max_blur() const {
  return max_blur_;
}
inline float LogoDataParams::max_blur() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.max_blur)
  return _internal_max_blur();
}
inline void LogoDataParams::_internal_set_max_blur(float value) {
  
  max_blur_ = value;
}
inline void LogoDataParams::set_max_blur(float value) {
  _internal_set_max_blur(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.max_blur)
}

// float color_swap_prob = 17;
inline void LogoDataParams::clear_color_swap_prob() {
  color_swap_prob_ = 0;
}
inline float LogoDataParams::_internal_color_swap_prob() const {
  return color_swap_prob_;
}
inline float LogoDataParams::color_swap_prob() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.color_swap_prob)
  return _internal_color_swap_prob();
}
inline void LogoDataParams::_internal_set_color_swap_prob(float value) {
  
  color_swap_prob_ = value;
}
inline void LogoDataParams::set_color_swap_prob(float value) {
  _internal_set_color_swap_prob(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.color_swap_prob)
}

// repeated string combination_modes = 18;
inline int LogoDataParams::_internal_combination_modes_size() const {
  return combination_modes_.size();
}
inline int LogoDataParams::combination_modes_size() const {
  return _internal_combination_modes_size();
}
inline void LogoDataParams::clear_combination_modes() {
  combination_modes_.Clear();
}
inline std::string* LogoDataParams::add_combination_modes() {
  // @@protoc_insertion_point(field_add_mutable:LogoDataParams.combination_modes)
  return _internal_add_combination_modes();
}
inline const std::string& LogoDataParams::_internal_combination_modes(int index) const {
  return combination_modes_.Get(index);
}
inline const std::string& LogoDataParams::combination_modes(int index) const {
  // @@protoc_insertion_point(field_get:LogoDataParams.combination_modes)
  return _internal_combination_modes(index);
}
inline std::string* LogoDataParams::mutable_combination_modes(int index) {
  // @@protoc_insertion_point(field_mutable:LogoDataParams.combination_modes)
  return combination_modes_.Mutable(index);
}
inline void LogoDataParams::set_combination_modes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:LogoDataParams.combination_modes)
  combination_modes_.Mutable(index)->assign(value);
}
inline void LogoDataParams::set_combination_modes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:LogoDataParams.combination_modes)
  combination_modes_.Mutable(index)->assign(std::move(value));
}
inline void LogoDataParams::set_combination_modes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  combination_modes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LogoDataParams.combination_modes)
}
inline void LogoDataParams::set_combination_modes(int index, const char* value, size_t size) {
  combination_modes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogoDataParams.combination_modes)
}
inline std::string* LogoDataParams::_internal_add_combination_modes() {
  return combination_modes_.Add();
}
inline void LogoDataParams::add_combination_modes(const std::string& value) {
  combination_modes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LogoDataParams.combination_modes)
}
inline void LogoDataParams::add_combination_modes(std::string&& value) {
  combination_modes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:LogoDataParams.combination_modes)
}
inline void LogoDataParams::add_combination_modes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  combination_modes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LogoDataParams.combination_modes)
}
inline void LogoDataParams::add_combination_modes(const char* value, size_t size) {
  combination_modes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LogoDataParams.combination_modes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogoDataParams::combination_modes() const {
  // @@protoc_insertion_point(field_list:LogoDataParams.combination_modes)
  return combination_modes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogoDataParams::mutable_combination_modes() {
  // @@protoc_insertion_point(field_mutable_list:LogoDataParams.combination_modes)
  return &combination_modes_;
}

// repeated float alpha_range = 19;
inline int LogoDataParams::_internal_alpha_range_size() const {
  return alpha_range_.size();
}
inline int LogoDataParams::alpha_range_size() const {
  return _internal_alpha_range_size();
}
inline void LogoDataParams::clear_alpha_range() {
  alpha_range_.Clear();
}
inline float LogoDataParams::_internal_alpha_range(int index) const {
  return alpha_range_.Get(index);
}
inline float LogoDataParams::alpha_range(int index) const {
  // @@protoc_insertion_point(field_get:LogoDataParams.alpha_range)
  return _internal_alpha_range(index);
}
inline void LogoDataParams::set_alpha_range(int index, float value) {
  alpha_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogoDataParams.alpha_range)
}
inline void LogoDataParams::_internal_add_alpha_range(float value) {
  alpha_range_.Add(value);
}
inline void LogoDataParams::add_alpha_range(float value) {
  _internal_add_alpha_range(value);
  // @@protoc_insertion_point(field_add:LogoDataParams.alpha_range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LogoDataParams::_internal_alpha_range() const {
  return alpha_range_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LogoDataParams::alpha_range() const {
  // @@protoc_insertion_point(field_list:LogoDataParams.alpha_range)
  return _internal_alpha_range();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LogoDataParams::_internal_mutable_alpha_range() {
  return &alpha_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LogoDataParams::mutable_alpha_range() {
  // @@protoc_insertion_point(field_mutable_list:LogoDataParams.alpha_range)
  return _internal_mutable_alpha_range();
}

// repeated int32 jpeg_recompress_range = 20;
inline int LogoDataParams::_internal_jpeg_recompress_range_size() const {
  return jpeg_recompress_range_.size();
}
inline int LogoDataParams::jpeg_recompress_range_size() const {
  return _internal_jpeg_recompress_range_size();
}
inline void LogoDataParams::clear_jpeg_recompress_range() {
  jpeg_recompress_range_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::_internal_jpeg_recompress_range(int index) const {
  return jpeg_recompress_range_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::jpeg_recompress_range(int index) const {
  // @@protoc_insertion_point(field_get:LogoDataParams.jpeg_recompress_range)
  return _internal_jpeg_recompress_range(index);
}
inline void LogoDataParams::set_jpeg_recompress_range(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  jpeg_recompress_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogoDataParams.jpeg_recompress_range)
}
inline void LogoDataParams::_internal_add_jpeg_recompress_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  jpeg_recompress_range_.Add(value);
}
inline void LogoDataParams::add_jpeg_recompress_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_jpeg_recompress_range(value);
  // @@protoc_insertion_point(field_add:LogoDataParams.jpeg_recompress_range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LogoDataParams::_internal_jpeg_recompress_range() const {
  return jpeg_recompress_range_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LogoDataParams::jpeg_recompress_range() const {
  // @@protoc_insertion_point(field_list:LogoDataParams.jpeg_recompress_range)
  return _internal_jpeg_recompress_range();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LogoDataParams::_internal_mutable_jpeg_recompress_range() {
  return &jpeg_recompress_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LogoDataParams::mutable_jpeg_recompress_range() {
  // @@protoc_insertion_point(field_mutable_list:LogoDataParams.jpeg_recompress_range)
  return _internal_mutable_jpeg_recompress_range();
}

// float rotate = 21;
inline void LogoDataParams::clear_rotate() {
  rotate_ = 0;
}
inline float LogoDataParams::_internal_rotate() const {
  return rotate_;
}
inline float LogoDataParams::rotate() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.rotate)
  return _internal_rotate();
}
inline void LogoDataParams::_internal_set_rotate(float value) {
  
  rotate_ = value;
}
inline void LogoDataParams::set_rotate(float value) {
  _internal_set_rotate(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.rotate)
}

// float rot90 = 22;
inline void LogoDataParams::clear_rot90() {
  rot90_ = 0;
}
inline float LogoDataParams::_internal_rot90() const {
  return rot90_;
}
inline float LogoDataParams::rot90() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.rot90)
  return _internal_rot90();
}
inline void LogoDataParams::_internal_set_rot90(float value) {
  
  rot90_ = value;
}
inline void LogoDataParams::set_rot90(float value) {
  _internal_set_rot90(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.rot90)
}

// bool horizontal_flips = 23;
inline void LogoDataParams::clear_horizontal_flips() {
  horizontal_flips_ = false;
}
inline bool LogoDataParams::_internal_horizontal_flips() const {
  return horizontal_flips_;
}
inline bool LogoDataParams::horizontal_flips() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.horizontal_flips)
  return _internal_horizontal_flips();
}
inline void LogoDataParams::_internal_set_horizontal_flips(bool value) {
  
  horizontal_flips_ = value;
}
inline void LogoDataParams::set_horizontal_flips(bool value) {
  _internal_set_horizontal_flips(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.horizontal_flips)
}

// bool grayscale = 24;
inline void LogoDataParams::clear_grayscale() {
  grayscale_ = false;
}
inline bool LogoDataParams::_internal_grayscale() const {
  return grayscale_;
}
inline bool LogoDataParams::grayscale() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.grayscale)
  return _internal_grayscale();
}
inline void LogoDataParams::_internal_set_grayscale(bool value) {
  
  grayscale_ = value;
}
inline void LogoDataParams::set_grayscale(bool value) {
  _internal_set_grayscale(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.grayscale)
}

// repeated float contrast = 25;
inline int LogoDataParams::_internal_contrast_size() const {
  return contrast_.size();
}
inline int LogoDataParams::contrast_size() const {
  return _internal_contrast_size();
}
inline void LogoDataParams::clear_contrast() {
  contrast_.Clear();
}
inline float LogoDataParams::_internal_contrast(int index) const {
  return contrast_.Get(index);
}
inline float LogoDataParams::contrast(int index) const {
  // @@protoc_insertion_point(field_get:LogoDataParams.contrast)
  return _internal_contrast(index);
}
inline void LogoDataParams::set_contrast(int index, float value) {
  contrast_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogoDataParams.contrast)
}
inline void LogoDataParams::_internal_add_contrast(float value) {
  contrast_.Add(value);
}
inline void LogoDataParams::add_contrast(float value) {
  _internal_add_contrast(value);
  // @@protoc_insertion_point(field_add:LogoDataParams.contrast)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LogoDataParams::_internal_contrast() const {
  return contrast_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LogoDataParams::contrast() const {
  // @@protoc_insertion_point(field_list:LogoDataParams.contrast)
  return _internal_contrast();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LogoDataParams::_internal_mutable_contrast() {
  return &contrast_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LogoDataParams::mutable_contrast() {
  // @@protoc_insertion_point(field_mutable_list:LogoDataParams.contrast)
  return _internal_mutable_contrast();
}

// repeated float color_tint = 26;
inline int LogoDataParams::_internal_color_tint_size() const {
  return color_tint_.size();
}
inline int LogoDataParams::color_tint_size() const {
  return _internal_color_tint_size();
}
inline void LogoDataParams::clear_color_tint() {
  color_tint_.Clear();
}
inline float LogoDataParams::_internal_color_tint(int index) const {
  return color_tint_.Get(index);
}
inline float LogoDataParams::color_tint(int index) const {
  // @@protoc_insertion_point(field_get:LogoDataParams.color_tint)
  return _internal_color_tint(index);
}
inline void LogoDataParams::set_color_tint(int index, float value) {
  color_tint_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogoDataParams.color_tint)
}
inline void LogoDataParams::_internal_add_color_tint(float value) {
  color_tint_.Add(value);
}
inline void LogoDataParams::add_color_tint(float value) {
  _internal_add_color_tint(value);
  // @@protoc_insertion_point(field_add:LogoDataParams.color_tint)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LogoDataParams::_internal_color_tint() const {
  return color_tint_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LogoDataParams::color_tint() const {
  // @@protoc_insertion_point(field_list:LogoDataParams.color_tint)
  return _internal_color_tint();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LogoDataParams::_internal_mutable_color_tint() {
  return &color_tint_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LogoDataParams::mutable_color_tint() {
  // @@protoc_insertion_point(field_mutable_list:LogoDataParams.color_tint)
  return _internal_mutable_color_tint();
}

// bool use_neg_logo_label_index = 27;
inline void LogoDataParams::clear_use_neg_logo_label_index() {
  use_neg_logo_label_index_ = false;
}
inline bool LogoDataParams::_internal_use_neg_logo_label_index() const {
  return use_neg_logo_label_index_;
}
inline bool LogoDataParams::use_neg_logo_label_index() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.use_neg_logo_label_index)
  return _internal_use_neg_logo_label_index();
}
inline void LogoDataParams::_internal_set_use_neg_logo_label_index(bool value) {
  
  use_neg_logo_label_index_ = value;
}
inline void LogoDataParams::set_use_neg_logo_label_index(bool value) {
  _internal_set_use_neg_logo_label_index(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.use_neg_logo_label_index)
}

// int32 nologo_label_ind = 28;
inline void LogoDataParams::clear_nologo_label_ind() {
  nologo_label_ind_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::_internal_nologo_label_ind() const {
  return nologo_label_ind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::nologo_label_ind() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.nologo_label_ind)
  return _internal_nologo_label_ind();
}
inline void LogoDataParams::_internal_set_nologo_label_ind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nologo_label_ind_ = value;
}
inline void LogoDataParams::set_nologo_label_ind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nologo_label_ind(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.nologo_label_ind)
}

// float max_logo_out_of_image = 29;
inline void LogoDataParams::clear_max_logo_out_of_image() {
  max_logo_out_of_image_ = 0;
}
inline float LogoDataParams::_internal_max_logo_out_of_image() const {
  return max_logo_out_of_image_;
}
inline float LogoDataParams::max_logo_out_of_image() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.max_logo_out_of_image)
  return _internal_max_logo_out_of_image();
}
inline void LogoDataParams::_internal_set_max_logo_out_of_image(float value) {
  
  max_logo_out_of_image_ = value;
}
inline void LogoDataParams::set_max_logo_out_of_image(float value) {
  _internal_set_max_logo_out_of_image(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.max_logo_out_of_image)
}

// bool remove_nologo_bboxes = 30;
inline void LogoDataParams::clear_remove_nologo_bboxes() {
  remove_nologo_bboxes_ = false;
}
inline bool LogoDataParams::_internal_remove_nologo_bboxes() const {
  return remove_nologo_bboxes_;
}
inline bool LogoDataParams::remove_nologo_bboxes() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.remove_nologo_bboxes)
  return _internal_remove_nologo_bboxes();
}
inline void LogoDataParams::_internal_set_remove_nologo_bboxes(bool value) {
  
  remove_nologo_bboxes_ = value;
}
inline void LogoDataParams::set_remove_nologo_bboxes(bool value) {
  _internal_set_remove_nologo_bboxes(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.remove_nologo_bboxes)
}

// int32 full_image_crop = 31;
inline void LogoDataParams::clear_full_image_crop() {
  full_image_crop_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::_internal_full_image_crop() const {
  return full_image_crop_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::full_image_crop() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.full_image_crop)
  return _internal_full_image_crop();
}
inline void LogoDataParams::_internal_set_full_image_crop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  full_image_crop_ = value;
}
inline void LogoDataParams::set_full_image_crop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_full_image_crop(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.full_image_crop)
}

// float working_res_scale = 32;
inline void LogoDataParams::clear_working_res_scale() {
  working_res_scale_ = 0;
}
inline float LogoDataParams::_internal_working_res_scale() const {
  return working_res_scale_;
}
inline float LogoDataParams::working_res_scale() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.working_res_scale)
  return _internal_working_res_scale();
}
inline void LogoDataParams::_internal_set_working_res_scale(float value) {
  
  working_res_scale_ = value;
}
inline void LogoDataParams::set_working_res_scale(float value) {
  _internal_set_working_res_scale(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.working_res_scale)
}

// float pos_min_overlap_of_window_threshold = 33;
inline void LogoDataParams::clear_pos_min_overlap_of_window_threshold() {
  pos_min_overlap_of_window_threshold_ = 0;
}
inline float LogoDataParams::_internal_pos_min_overlap_of_window_threshold() const {
  return pos_min_overlap_of_window_threshold_;
}
inline float LogoDataParams::pos_min_overlap_of_window_threshold() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.pos_min_overlap_of_window_threshold)
  return _internal_pos_min_overlap_of_window_threshold();
}
inline void LogoDataParams::_internal_set_pos_min_overlap_of_window_threshold(float value) {
  
  pos_min_overlap_of_window_threshold_ = value;
}
inline void LogoDataParams::set_pos_min_overlap_of_window_threshold(float value) {
  _internal_set_pos_min_overlap_of_window_threshold(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.pos_min_overlap_of_window_threshold)
}

// float pos_max_overlap_of_window_threshold = 34;
inline void LogoDataParams::clear_pos_max_overlap_of_window_threshold() {
  pos_max_overlap_of_window_threshold_ = 0;
}
inline float LogoDataParams::_internal_pos_max_overlap_of_window_threshold() const {
  return pos_max_overlap_of_window_threshold_;
}
inline float LogoDataParams::pos_max_overlap_of_window_threshold() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.pos_max_overlap_of_window_threshold)
  return _internal_pos_max_overlap_of_window_threshold();
}
inline void LogoDataParams::_internal_set_pos_max_overlap_of_window_threshold(float value) {
  
  pos_max_overlap_of_window_threshold_ = value;
}
inline void LogoDataParams::set_pos_max_overlap_of_window_threshold(float value) {
  _internal_set_pos_max_overlap_of_window_threshold(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.pos_max_overlap_of_window_threshold)
}

// float neg_overlap_of_logo_threshold = 35;
inline void LogoDataParams::clear_neg_overlap_of_logo_threshold() {
  neg_overlap_of_logo_threshold_ = 0;
}
inline float LogoDataParams::_internal_neg_overlap_of_logo_threshold() const {
  return neg_overlap_of_logo_threshold_;
}
inline float LogoDataParams::neg_overlap_of_logo_threshold() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.neg_overlap_of_logo_threshold)
  return _internal_neg_overlap_of_logo_threshold();
}
inline void LogoDataParams::_internal_set_neg_overlap_of_logo_threshold(float value) {
  
  neg_overlap_of_logo_threshold_ = value;
}
inline void LogoDataParams::set_neg_overlap_of_logo_threshold(float value) {
  _internal_set_neg_overlap_of_logo_threshold(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.neg_overlap_of_logo_threshold)
}

// float pos_overlap_of_logo_threshold = 36;
inline void LogoDataParams::clear_pos_overlap_of_logo_threshold() {
  pos_overlap_of_logo_threshold_ = 0;
}
inline float LogoDataParams::_internal_pos_overlap_of_logo_threshold() const {
  return pos_overlap_of_logo_threshold_;
}
inline float LogoDataParams::pos_overlap_of_logo_threshold() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.pos_overlap_of_logo_threshold)
  return _internal_pos_overlap_of_logo_threshold();
}
inline void LogoDataParams::_internal_set_pos_overlap_of_logo_threshold(float value) {
  
  pos_overlap_of_logo_threshold_ = value;
}
inline void LogoDataParams::set_pos_overlap_of_logo_threshold(float value) {
  _internal_set_pos_overlap_of_logo_threshold(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.pos_overlap_of_logo_threshold)
}

// float overlap_max_logo_aspect = 37;
inline void LogoDataParams::clear_overlap_max_logo_aspect() {
  overlap_max_logo_aspect_ = 0;
}
inline float LogoDataParams::_internal_overlap_max_logo_aspect() const {
  return overlap_max_logo_aspect_;
}
inline float LogoDataParams::overlap_max_logo_aspect() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.overlap_max_logo_aspect)
  return _internal_overlap_max_logo_aspect();
}
inline void LogoDataParams::_internal_set_overlap_max_logo_aspect(float value) {
  
  overlap_max_logo_aspect_ = value;
}
inline void LogoDataParams::set_overlap_max_logo_aspect(float value) {
  _internal_set_overlap_max_logo_aspect(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.overlap_max_logo_aspect)
}

// int32 num_views = 38;
inline void LogoDataParams::clear_num_views() {
  num_views_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::_internal_num_views() const {
  return num_views_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataParams::num_views() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.num_views)
  return _internal_num_views();
}
inline void LogoDataParams::_internal_set_num_views(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_views_ = value;
}
inline void LogoDataParams::set_num_views(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_views(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.num_views)
}

// float white_bg_prob = 39;
inline void LogoDataParams::clear_white_bg_prob() {
  white_bg_prob_ = 0;
}
inline float LogoDataParams::_internal_white_bg_prob() const {
  return white_bg_prob_;
}
inline float LogoDataParams::white_bg_prob() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.white_bg_prob)
  return _internal_white_bg_prob();
}
inline void LogoDataParams::_internal_set_white_bg_prob(float value) {
  
  white_bg_prob_ = value;
}
inline void LogoDataParams::set_white_bg_prob(float value) {
  _internal_set_white_bg_prob(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.white_bg_prob)
}

// repeated .MultiDataset multi_dataset = 40;
inline int LogoDataParams::_internal_multi_dataset_size() const {
  return multi_dataset_.size();
}
inline int LogoDataParams::multi_dataset_size() const {
  return _internal_multi_dataset_size();
}
inline void LogoDataParams::clear_multi_dataset() {
  multi_dataset_.Clear();
}
inline ::MultiDataset* LogoDataParams::mutable_multi_dataset(int index) {
  // @@protoc_insertion_point(field_mutable:LogoDataParams.multi_dataset)
  return multi_dataset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MultiDataset >*
LogoDataParams::mutable_multi_dataset() {
  // @@protoc_insertion_point(field_mutable_list:LogoDataParams.multi_dataset)
  return &multi_dataset_;
}
inline const ::MultiDataset& LogoDataParams::_internal_multi_dataset(int index) const {
  return multi_dataset_.Get(index);
}
inline const ::MultiDataset& LogoDataParams::multi_dataset(int index) const {
  // @@protoc_insertion_point(field_get:LogoDataParams.multi_dataset)
  return _internal_multi_dataset(index);
}
inline ::MultiDataset* LogoDataParams::_internal_add_multi_dataset() {
  return multi_dataset_.Add();
}
inline ::MultiDataset* LogoDataParams::add_multi_dataset() {
  // @@protoc_insertion_point(field_add:LogoDataParams.multi_dataset)
  return _internal_add_multi_dataset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MultiDataset >&
LogoDataParams::multi_dataset() const {
  // @@protoc_insertion_point(field_list:LogoDataParams.multi_dataset)
  return multi_dataset_;
}

// string mode = 41;
inline void LogoDataParams::clear_mode() {
  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogoDataParams::mode() const {
  // @@protoc_insertion_point(field_get:LogoDataParams.mode)
  return _internal_mode();
}
inline void LogoDataParams::set_mode(const std::string& value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:LogoDataParams.mode)
}
inline std::string* LogoDataParams::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:LogoDataParams.mode)
  return _internal_mutable_mode();
}
inline const std::string& LogoDataParams::_internal_mode() const {
  return mode_.Get();
}
inline void LogoDataParams::_internal_set_mode(const std::string& value) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogoDataParams::set_mode(std::string&& value) {
  
  mode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LogoDataParams.mode)
}
inline void LogoDataParams::set_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LogoDataParams.mode)
}
inline void LogoDataParams::set_mode(const char* value,
    size_t size) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LogoDataParams.mode)
}
inline std::string* LogoDataParams::_internal_mutable_mode() {
  
  return mode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogoDataParams::release_mode() {
  // @@protoc_insertion_point(field_release:LogoDataParams.mode)
  return mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogoDataParams::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LogoDataParams.mode)
}

// -------------------------------------------------------------------

// WhitespaceTokenizer

// string pad_token = 1;
inline void WhitespaceTokenizer::clear_pad_token() {
  pad_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WhitespaceTokenizer::pad_token() const {
  // @@protoc_insertion_point(field_get:WhitespaceTokenizer.pad_token)
  return _internal_pad_token();
}
inline void WhitespaceTokenizer::set_pad_token(const std::string& value) {
  _internal_set_pad_token(value);
  // @@protoc_insertion_point(field_set:WhitespaceTokenizer.pad_token)
}
inline std::string* WhitespaceTokenizer::mutable_pad_token() {
  // @@protoc_insertion_point(field_mutable:WhitespaceTokenizer.pad_token)
  return _internal_mutable_pad_token();
}
inline const std::string& WhitespaceTokenizer::_internal_pad_token() const {
  return pad_token_.Get();
}
inline void WhitespaceTokenizer::_internal_set_pad_token(const std::string& value) {
  
  pad_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WhitespaceTokenizer::set_pad_token(std::string&& value) {
  
  pad_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WhitespaceTokenizer.pad_token)
}
inline void WhitespaceTokenizer::set_pad_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pad_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WhitespaceTokenizer.pad_token)
}
inline void WhitespaceTokenizer::set_pad_token(const char* value,
    size_t size) {
  
  pad_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WhitespaceTokenizer.pad_token)
}
inline std::string* WhitespaceTokenizer::_internal_mutable_pad_token() {
  
  return pad_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WhitespaceTokenizer::release_pad_token() {
  // @@protoc_insertion_point(field_release:WhitespaceTokenizer.pad_token)
  return pad_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WhitespaceTokenizer::set_allocated_pad_token(std::string* pad_token) {
  if (pad_token != nullptr) {
    
  } else {
    
  }
  pad_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pad_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WhitespaceTokenizer.pad_token)
}

// int32 max_length = 2;
inline void WhitespaceTokenizer::clear_max_length() {
  max_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WhitespaceTokenizer::_internal_max_length() const {
  return max_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WhitespaceTokenizer::max_length() const {
  // @@protoc_insertion_point(field_get:WhitespaceTokenizer.max_length)
  return _internal_max_length();
}
inline void WhitespaceTokenizer::_internal_set_max_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_length_ = value;
}
inline void WhitespaceTokenizer::set_max_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_length(value);
  // @@protoc_insertion_point(field_set:WhitespaceTokenizer.max_length)
}

// bool no_strip_special = 3;
inline void WhitespaceTokenizer::clear_no_strip_special() {
  no_strip_special_ = false;
}
inline bool WhitespaceTokenizer::_internal_no_strip_special() const {
  return no_strip_special_;
}
inline bool WhitespaceTokenizer::no_strip_special() const {
  // @@protoc_insertion_point(field_get:WhitespaceTokenizer.no_strip_special)
  return _internal_no_strip_special();
}
inline void WhitespaceTokenizer::_internal_set_no_strip_special(bool value) {
  
  no_strip_special_ = value;
}
inline void WhitespaceTokenizer::set_no_strip_special(bool value) {
  _internal_set_no_strip_special(value);
  // @@protoc_insertion_point(field_set:WhitespaceTokenizer.no_strip_special)
}

// bool preserve_case = 4;
inline void WhitespaceTokenizer::clear_preserve_case() {
  preserve_case_ = false;
}
inline bool WhitespaceTokenizer::_internal_preserve_case() const {
  return preserve_case_;
}
inline bool WhitespaceTokenizer::preserve_case() const {
  // @@protoc_insertion_point(field_get:WhitespaceTokenizer.preserve_case)
  return _internal_preserve_case();
}
inline void WhitespaceTokenizer::_internal_set_preserve_case(bool value) {
  
  preserve_case_ = value;
}
inline void WhitespaceTokenizer::set_preserve_case(bool value) {
  _internal_set_preserve_case(value);
  // @@protoc_insertion_point(field_set:WhitespaceTokenizer.preserve_case)
}

// -------------------------------------------------------------------

// TokenIndexer

// string vocab_path = 1;
inline void TokenIndexer::clear_vocab_path() {
  vocab_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TokenIndexer::vocab_path() const {
  // @@protoc_insertion_point(field_get:TokenIndexer.vocab_path)
  return _internal_vocab_path();
}
inline void TokenIndexer::set_vocab_path(const std::string& value) {
  _internal_set_vocab_path(value);
  // @@protoc_insertion_point(field_set:TokenIndexer.vocab_path)
}
inline std::string* TokenIndexer::mutable_vocab_path() {
  // @@protoc_insertion_point(field_mutable:TokenIndexer.vocab_path)
  return _internal_mutable_vocab_path();
}
inline const std::string& TokenIndexer::_internal_vocab_path() const {
  return vocab_path_.Get();
}
inline void TokenIndexer::_internal_set_vocab_path(const std::string& value) {
  
  vocab_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TokenIndexer::set_vocab_path(std::string&& value) {
  
  vocab_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TokenIndexer.vocab_path)
}
inline void TokenIndexer::set_vocab_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vocab_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TokenIndexer.vocab_path)
}
inline void TokenIndexer::set_vocab_path(const char* value,
    size_t size) {
  
  vocab_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TokenIndexer.vocab_path)
}
inline std::string* TokenIndexer::_internal_mutable_vocab_path() {
  
  return vocab_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TokenIndexer::release_vocab_path() {
  // @@protoc_insertion_point(field_release:TokenIndexer.vocab_path)
  return vocab_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenIndexer::set_allocated_vocab_path(std::string* vocab_path) {
  if (vocab_path != nullptr) {
    
  } else {
    
  }
  vocab_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vocab_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TokenIndexer.vocab_path)
}

// int32 num_oov_buckets = 2;
inline void TokenIndexer::clear_num_oov_buckets() {
  num_oov_buckets_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TokenIndexer::_internal_num_oov_buckets() const {
  return num_oov_buckets_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TokenIndexer::num_oov_buckets() const {
  // @@protoc_insertion_point(field_get:TokenIndexer.num_oov_buckets)
  return _internal_num_oov_buckets();
}
inline void TokenIndexer::_internal_set_num_oov_buckets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_oov_buckets_ = value;
}
inline void TokenIndexer::set_num_oov_buckets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_oov_buckets(value);
  // @@protoc_insertion_point(field_set:TokenIndexer.num_oov_buckets)
}

// -------------------------------------------------------------------

// AudioMFCCTransform

// int32 numcep = 1;
inline void AudioMFCCTransform::clear_numcep() {
  numcep_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioMFCCTransform::_internal_numcep() const {
  return numcep_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioMFCCTransform::numcep() const {
  // @@protoc_insertion_point(field_get:AudioMFCCTransform.numcep)
  return _internal_numcep();
}
inline void AudioMFCCTransform::_internal_set_numcep(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numcep_ = value;
}
inline void AudioMFCCTransform::set_numcep(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numcep(value);
  // @@protoc_insertion_point(field_set:AudioMFCCTransform.numcep)
}

// int32 numcontext = 2;
inline void AudioMFCCTransform::clear_numcontext() {
  numcontext_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioMFCCTransform::_internal_numcontext() const {
  return numcontext_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioMFCCTransform::numcontext() const {
  // @@protoc_insertion_point(field_get:AudioMFCCTransform.numcontext)
  return _internal_numcontext();
}
inline void AudioMFCCTransform::_internal_set_numcontext(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numcontext_ = value;
}
inline void AudioMFCCTransform::set_numcontext(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numcontext(value);
  // @@protoc_insertion_point(field_set:AudioMFCCTransform.numcontext)
}

// -------------------------------------------------------------------

// FilterInvalidItems

// bool require_images = 1;
inline void FilterInvalidItems::clear_require_images() {
  require_images_ = false;
}
inline bool FilterInvalidItems::_internal_require_images() const {
  return require_images_;
}
inline bool FilterInvalidItems::require_images() const {
  // @@protoc_insertion_point(field_get:FilterInvalidItems.require_images)
  return _internal_require_images();
}
inline void FilterInvalidItems::_internal_set_require_images(bool value) {
  
  require_images_ = value;
}
inline void FilterInvalidItems::set_require_images(bool value) {
  _internal_set_require_images(value);
  // @@protoc_insertion_point(field_set:FilterInvalidItems.require_images)
}

// bool require_bboxes = 2;
inline void FilterInvalidItems::clear_require_bboxes() {
  require_bboxes_ = false;
}
inline bool FilterInvalidItems::_internal_require_bboxes() const {
  return require_bboxes_;
}
inline bool FilterInvalidItems::require_bboxes() const {
  // @@protoc_insertion_point(field_get:FilterInvalidItems.require_bboxes)
  return _internal_require_bboxes();
}
inline void FilterInvalidItems::_internal_set_require_bboxes(bool value) {
  
  require_bboxes_ = value;
}
inline void FilterInvalidItems::set_require_bboxes(bool value) {
  _internal_set_require_bboxes(value);
  // @@protoc_insertion_point(field_set:FilterInvalidItems.require_bboxes)
}

// bool require_labels = 3;
inline void FilterInvalidItems::clear_require_labels() {
  require_labels_ = false;
}
inline bool FilterInvalidItems::_internal_require_labels() const {
  return require_labels_;
}
inline bool FilterInvalidItems::require_labels() const {
  // @@protoc_insertion_point(field_get:FilterInvalidItems.require_labels)
  return _internal_require_labels();
}
inline void FilterInvalidItems::_internal_set_require_labels(bool value) {
  
  require_labels_ = value;
}
inline void FilterInvalidItems::set_require_labels(bool value) {
  _internal_set_require_labels(value);
  // @@protoc_insertion_point(field_set:FilterInvalidItems.require_labels)
}

// -------------------------------------------------------------------

// MiniBatchItemStage

// .ImageCropTransform image_crop_transform = 1;
inline bool MiniBatchItemStage::_internal_has_image_crop_transform() const {
  return stage_case() == kImageCropTransform;
}
inline bool MiniBatchItemStage::has_image_crop_transform() const {
  return _internal_has_image_crop_transform();
}
inline void MiniBatchItemStage::set_has_image_crop_transform() {
  _oneof_case_[0] = kImageCropTransform;
}
inline void MiniBatchItemStage::clear_image_crop_transform() {
  if (_internal_has_image_crop_transform()) {
    if (GetArena() == nullptr) {
      delete stage_.image_crop_transform_;
    }
    clear_has_stage();
  }
}
inline ::ImageCropTransform* MiniBatchItemStage::release_image_crop_transform() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.image_crop_transform)
  if (_internal_has_image_crop_transform()) {
    clear_has_stage();
      ::ImageCropTransform* temp = stage_.image_crop_transform_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.image_crop_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ImageCropTransform& MiniBatchItemStage::_internal_image_crop_transform() const {
  return _internal_has_image_crop_transform()
      ? *stage_.image_crop_transform_
      : *reinterpret_cast< ::ImageCropTransform*>(&::_ImageCropTransform_default_instance_);
}
inline const ::ImageCropTransform& MiniBatchItemStage::image_crop_transform() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.image_crop_transform)
  return _internal_image_crop_transform();
}
inline ::ImageCropTransform* MiniBatchItemStage::unsafe_arena_release_image_crop_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.image_crop_transform)
  if (_internal_has_image_crop_transform()) {
    clear_has_stage();
    ::ImageCropTransform* temp = stage_.image_crop_transform_;
    stage_.image_crop_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_image_crop_transform(::ImageCropTransform* image_crop_transform) {
  clear_stage();
  if (image_crop_transform) {
    set_has_image_crop_transform();
    stage_.image_crop_transform_ = image_crop_transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.image_crop_transform)
}
inline ::ImageCropTransform* MiniBatchItemStage::_internal_mutable_image_crop_transform() {
  if (!_internal_has_image_crop_transform()) {
    clear_stage();
    set_has_image_crop_transform();
    stage_.image_crop_transform_ = CreateMaybeMessage< ::ImageCropTransform >(GetArena());
  }
  return stage_.image_crop_transform_;
}
inline ::ImageCropTransform* MiniBatchItemStage::mutable_image_crop_transform() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.image_crop_transform)
  return _internal_mutable_image_crop_transform();
}

// .LabelSmoother label_smoother = 2;
inline bool MiniBatchItemStage::_internal_has_label_smoother() const {
  return stage_case() == kLabelSmoother;
}
inline bool MiniBatchItemStage::has_label_smoother() const {
  return _internal_has_label_smoother();
}
inline void MiniBatchItemStage::set_has_label_smoother() {
  _oneof_case_[0] = kLabelSmoother;
}
inline void MiniBatchItemStage::clear_label_smoother() {
  if (_internal_has_label_smoother()) {
    if (GetArena() == nullptr) {
      delete stage_.label_smoother_;
    }
    clear_has_stage();
  }
}
inline ::LabelSmoother* MiniBatchItemStage::release_label_smoother() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.label_smoother)
  if (_internal_has_label_smoother()) {
    clear_has_stage();
      ::LabelSmoother* temp = stage_.label_smoother_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.label_smoother_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LabelSmoother& MiniBatchItemStage::_internal_label_smoother() const {
  return _internal_has_label_smoother()
      ? *stage_.label_smoother_
      : *reinterpret_cast< ::LabelSmoother*>(&::_LabelSmoother_default_instance_);
}
inline const ::LabelSmoother& MiniBatchItemStage::label_smoother() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.label_smoother)
  return _internal_label_smoother();
}
inline ::LabelSmoother* MiniBatchItemStage::unsafe_arena_release_label_smoother() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.label_smoother)
  if (_internal_has_label_smoother()) {
    clear_has_stage();
    ::LabelSmoother* temp = stage_.label_smoother_;
    stage_.label_smoother_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_label_smoother(::LabelSmoother* label_smoother) {
  clear_stage();
  if (label_smoother) {
    set_has_label_smoother();
    stage_.label_smoother_ = label_smoother;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.label_smoother)
}
inline ::LabelSmoother* MiniBatchItemStage::_internal_mutable_label_smoother() {
  if (!_internal_has_label_smoother()) {
    clear_stage();
    set_has_label_smoother();
    stage_.label_smoother_ = CreateMaybeMessage< ::LabelSmoother >(GetArena());
  }
  return stage_.label_smoother_;
}
inline ::LabelSmoother* MiniBatchItemStage::mutable_label_smoother() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.label_smoother)
  return _internal_mutable_label_smoother();
}

// .LabelDropper label_dropper = 3;
inline bool MiniBatchItemStage::_internal_has_label_dropper() const {
  return stage_case() == kLabelDropper;
}
inline bool MiniBatchItemStage::has_label_dropper() const {
  return _internal_has_label_dropper();
}
inline void MiniBatchItemStage::set_has_label_dropper() {
  _oneof_case_[0] = kLabelDropper;
}
inline void MiniBatchItemStage::clear_label_dropper() {
  if (_internal_has_label_dropper()) {
    if (GetArena() == nullptr) {
      delete stage_.label_dropper_;
    }
    clear_has_stage();
  }
}
inline ::LabelDropper* MiniBatchItemStage::release_label_dropper() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.label_dropper)
  if (_internal_has_label_dropper()) {
    clear_has_stage();
      ::LabelDropper* temp = stage_.label_dropper_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.label_dropper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LabelDropper& MiniBatchItemStage::_internal_label_dropper() const {
  return _internal_has_label_dropper()
      ? *stage_.label_dropper_
      : *reinterpret_cast< ::LabelDropper*>(&::_LabelDropper_default_instance_);
}
inline const ::LabelDropper& MiniBatchItemStage::label_dropper() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.label_dropper)
  return _internal_label_dropper();
}
inline ::LabelDropper* MiniBatchItemStage::unsafe_arena_release_label_dropper() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.label_dropper)
  if (_internal_has_label_dropper()) {
    clear_has_stage();
    ::LabelDropper* temp = stage_.label_dropper_;
    stage_.label_dropper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_label_dropper(::LabelDropper* label_dropper) {
  clear_stage();
  if (label_dropper) {
    set_has_label_dropper();
    stage_.label_dropper_ = label_dropper;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.label_dropper)
}
inline ::LabelDropper* MiniBatchItemStage::_internal_mutable_label_dropper() {
  if (!_internal_has_label_dropper()) {
    clear_stage();
    set_has_label_dropper();
    stage_.label_dropper_ = CreateMaybeMessage< ::LabelDropper >(GetArena());
  }
  return stage_.label_dropper_;
}
inline ::LabelDropper* MiniBatchItemStage::mutable_label_dropper() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.label_dropper)
  return _internal_mutable_label_dropper();
}

// .MaxNumLabelDropper max_num_label_dropper = 4;
inline bool MiniBatchItemStage::_internal_has_max_num_label_dropper() const {
  return stage_case() == kMaxNumLabelDropper;
}
inline bool MiniBatchItemStage::has_max_num_label_dropper() const {
  return _internal_has_max_num_label_dropper();
}
inline void MiniBatchItemStage::set_has_max_num_label_dropper() {
  _oneof_case_[0] = kMaxNumLabelDropper;
}
inline void MiniBatchItemStage::clear_max_num_label_dropper() {
  if (_internal_has_max_num_label_dropper()) {
    if (GetArena() == nullptr) {
      delete stage_.max_num_label_dropper_;
    }
    clear_has_stage();
  }
}
inline ::MaxNumLabelDropper* MiniBatchItemStage::release_max_num_label_dropper() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.max_num_label_dropper)
  if (_internal_has_max_num_label_dropper()) {
    clear_has_stage();
      ::MaxNumLabelDropper* temp = stage_.max_num_label_dropper_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.max_num_label_dropper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MaxNumLabelDropper& MiniBatchItemStage::_internal_max_num_label_dropper() const {
  return _internal_has_max_num_label_dropper()
      ? *stage_.max_num_label_dropper_
      : *reinterpret_cast< ::MaxNumLabelDropper*>(&::_MaxNumLabelDropper_default_instance_);
}
inline const ::MaxNumLabelDropper& MiniBatchItemStage::max_num_label_dropper() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.max_num_label_dropper)
  return _internal_max_num_label_dropper();
}
inline ::MaxNumLabelDropper* MiniBatchItemStage::unsafe_arena_release_max_num_label_dropper() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.max_num_label_dropper)
  if (_internal_has_max_num_label_dropper()) {
    clear_has_stage();
    ::MaxNumLabelDropper* temp = stage_.max_num_label_dropper_;
    stage_.max_num_label_dropper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_max_num_label_dropper(::MaxNumLabelDropper* max_num_label_dropper) {
  clear_stage();
  if (max_num_label_dropper) {
    set_has_max_num_label_dropper();
    stage_.max_num_label_dropper_ = max_num_label_dropper;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.max_num_label_dropper)
}
inline ::MaxNumLabelDropper* MiniBatchItemStage::_internal_mutable_max_num_label_dropper() {
  if (!_internal_has_max_num_label_dropper()) {
    clear_stage();
    set_has_max_num_label_dropper();
    stage_.max_num_label_dropper_ = CreateMaybeMessage< ::MaxNumLabelDropper >(GetArena());
  }
  return stage_.max_num_label_dropper_;
}
inline ::MaxNumLabelDropper* MiniBatchItemStage::mutable_max_num_label_dropper() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.max_num_label_dropper)
  return _internal_mutable_max_num_label_dropper();
}

// .LabelWeight label_weight = 5;
inline bool MiniBatchItemStage::_internal_has_label_weight() const {
  return stage_case() == kLabelWeight;
}
inline bool MiniBatchItemStage::has_label_weight() const {
  return _internal_has_label_weight();
}
inline void MiniBatchItemStage::set_has_label_weight() {
  _oneof_case_[0] = kLabelWeight;
}
inline void MiniBatchItemStage::clear_label_weight() {
  if (_internal_has_label_weight()) {
    if (GetArena() == nullptr) {
      delete stage_.label_weight_;
    }
    clear_has_stage();
  }
}
inline ::LabelWeight* MiniBatchItemStage::release_label_weight() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.label_weight)
  if (_internal_has_label_weight()) {
    clear_has_stage();
      ::LabelWeight* temp = stage_.label_weight_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.label_weight_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LabelWeight& MiniBatchItemStage::_internal_label_weight() const {
  return _internal_has_label_weight()
      ? *stage_.label_weight_
      : *reinterpret_cast< ::LabelWeight*>(&::_LabelWeight_default_instance_);
}
inline const ::LabelWeight& MiniBatchItemStage::label_weight() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.label_weight)
  return _internal_label_weight();
}
inline ::LabelWeight* MiniBatchItemStage::unsafe_arena_release_label_weight() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.label_weight)
  if (_internal_has_label_weight()) {
    clear_has_stage();
    ::LabelWeight* temp = stage_.label_weight_;
    stage_.label_weight_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_label_weight(::LabelWeight* label_weight) {
  clear_stage();
  if (label_weight) {
    set_has_label_weight();
    stage_.label_weight_ = label_weight;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.label_weight)
}
inline ::LabelWeight* MiniBatchItemStage::_internal_mutable_label_weight() {
  if (!_internal_has_label_weight()) {
    clear_stage();
    set_has_label_weight();
    stage_.label_weight_ = CreateMaybeMessage< ::LabelWeight >(GetArena());
  }
  return stage_.label_weight_;
}
inline ::LabelWeight* MiniBatchItemStage::mutable_label_weight() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.label_weight)
  return _internal_mutable_label_weight();
}

// .SSDRandomCropOperation ssd_random_crop = 6;
inline bool MiniBatchItemStage::_internal_has_ssd_random_crop() const {
  return stage_case() == kSsdRandomCrop;
}
inline bool MiniBatchItemStage::has_ssd_random_crop() const {
  return _internal_has_ssd_random_crop();
}
inline void MiniBatchItemStage::set_has_ssd_random_crop() {
  _oneof_case_[0] = kSsdRandomCrop;
}
inline void MiniBatchItemStage::clear_ssd_random_crop() {
  if (_internal_has_ssd_random_crop()) {
    if (GetArena() == nullptr) {
      delete stage_.ssd_random_crop_;
    }
    clear_has_stage();
  }
}
inline ::SSDRandomCropOperation* MiniBatchItemStage::release_ssd_random_crop() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.ssd_random_crop)
  if (_internal_has_ssd_random_crop()) {
    clear_has_stage();
      ::SSDRandomCropOperation* temp = stage_.ssd_random_crop_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.ssd_random_crop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSDRandomCropOperation& MiniBatchItemStage::_internal_ssd_random_crop() const {
  return _internal_has_ssd_random_crop()
      ? *stage_.ssd_random_crop_
      : *reinterpret_cast< ::SSDRandomCropOperation*>(&::_SSDRandomCropOperation_default_instance_);
}
inline const ::SSDRandomCropOperation& MiniBatchItemStage::ssd_random_crop() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.ssd_random_crop)
  return _internal_ssd_random_crop();
}
inline ::SSDRandomCropOperation* MiniBatchItemStage::unsafe_arena_release_ssd_random_crop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.ssd_random_crop)
  if (_internal_has_ssd_random_crop()) {
    clear_has_stage();
    ::SSDRandomCropOperation* temp = stage_.ssd_random_crop_;
    stage_.ssd_random_crop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_ssd_random_crop(::SSDRandomCropOperation* ssd_random_crop) {
  clear_stage();
  if (ssd_random_crop) {
    set_has_ssd_random_crop();
    stage_.ssd_random_crop_ = ssd_random_crop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.ssd_random_crop)
}
inline ::SSDRandomCropOperation* MiniBatchItemStage::_internal_mutable_ssd_random_crop() {
  if (!_internal_has_ssd_random_crop()) {
    clear_stage();
    set_has_ssd_random_crop();
    stage_.ssd_random_crop_ = CreateMaybeMessage< ::SSDRandomCropOperation >(GetArena());
  }
  return stage_.ssd_random_crop_;
}
inline ::SSDRandomCropOperation* MiniBatchItemStage::mutable_ssd_random_crop() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.ssd_random_crop)
  return _internal_mutable_ssd_random_crop();
}

// .RelativeCropTransform relative_crop_transform = 7;
inline bool MiniBatchItemStage::_internal_has_relative_crop_transform() const {
  return stage_case() == kRelativeCropTransform;
}
inline bool MiniBatchItemStage::has_relative_crop_transform() const {
  return _internal_has_relative_crop_transform();
}
inline void MiniBatchItemStage::set_has_relative_crop_transform() {
  _oneof_case_[0] = kRelativeCropTransform;
}
inline void MiniBatchItemStage::clear_relative_crop_transform() {
  if (_internal_has_relative_crop_transform()) {
    if (GetArena() == nullptr) {
      delete stage_.relative_crop_transform_;
    }
    clear_has_stage();
  }
}
inline ::RelativeCropTransform* MiniBatchItemStage::release_relative_crop_transform() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.relative_crop_transform)
  if (_internal_has_relative_crop_transform()) {
    clear_has_stage();
      ::RelativeCropTransform* temp = stage_.relative_crop_transform_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.relative_crop_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RelativeCropTransform& MiniBatchItemStage::_internal_relative_crop_transform() const {
  return _internal_has_relative_crop_transform()
      ? *stage_.relative_crop_transform_
      : *reinterpret_cast< ::RelativeCropTransform*>(&::_RelativeCropTransform_default_instance_);
}
inline const ::RelativeCropTransform& MiniBatchItemStage::relative_crop_transform() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.relative_crop_transform)
  return _internal_relative_crop_transform();
}
inline ::RelativeCropTransform* MiniBatchItemStage::unsafe_arena_release_relative_crop_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.relative_crop_transform)
  if (_internal_has_relative_crop_transform()) {
    clear_has_stage();
    ::RelativeCropTransform* temp = stage_.relative_crop_transform_;
    stage_.relative_crop_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_relative_crop_transform(::RelativeCropTransform* relative_crop_transform) {
  clear_stage();
  if (relative_crop_transform) {
    set_has_relative_crop_transform();
    stage_.relative_crop_transform_ = relative_crop_transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.relative_crop_transform)
}
inline ::RelativeCropTransform* MiniBatchItemStage::_internal_mutable_relative_crop_transform() {
  if (!_internal_has_relative_crop_transform()) {
    clear_stage();
    set_has_relative_crop_transform();
    stage_.relative_crop_transform_ = CreateMaybeMessage< ::RelativeCropTransform >(GetArena());
  }
  return stage_.relative_crop_transform_;
}
inline ::RelativeCropTransform* MiniBatchItemStage::mutable_relative_crop_transform() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.relative_crop_transform)
  return _internal_mutable_relative_crop_transform();
}

// .AspectRatioTransform aspect_ratio_transform = 8;
inline bool MiniBatchItemStage::_internal_has_aspect_ratio_transform() const {
  return stage_case() == kAspectRatioTransform;
}
inline bool MiniBatchItemStage::has_aspect_ratio_transform() const {
  return _internal_has_aspect_ratio_transform();
}
inline void MiniBatchItemStage::set_has_aspect_ratio_transform() {
  _oneof_case_[0] = kAspectRatioTransform;
}
inline void MiniBatchItemStage::clear_aspect_ratio_transform() {
  if (_internal_has_aspect_ratio_transform()) {
    if (GetArena() == nullptr) {
      delete stage_.aspect_ratio_transform_;
    }
    clear_has_stage();
  }
}
inline ::AspectRatioTransform* MiniBatchItemStage::release_aspect_ratio_transform() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.aspect_ratio_transform)
  if (_internal_has_aspect_ratio_transform()) {
    clear_has_stage();
      ::AspectRatioTransform* temp = stage_.aspect_ratio_transform_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.aspect_ratio_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AspectRatioTransform& MiniBatchItemStage::_internal_aspect_ratio_transform() const {
  return _internal_has_aspect_ratio_transform()
      ? *stage_.aspect_ratio_transform_
      : *reinterpret_cast< ::AspectRatioTransform*>(&::_AspectRatioTransform_default_instance_);
}
inline const ::AspectRatioTransform& MiniBatchItemStage::aspect_ratio_transform() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.aspect_ratio_transform)
  return _internal_aspect_ratio_transform();
}
inline ::AspectRatioTransform* MiniBatchItemStage::unsafe_arena_release_aspect_ratio_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.aspect_ratio_transform)
  if (_internal_has_aspect_ratio_transform()) {
    clear_has_stage();
    ::AspectRatioTransform* temp = stage_.aspect_ratio_transform_;
    stage_.aspect_ratio_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_aspect_ratio_transform(::AspectRatioTransform* aspect_ratio_transform) {
  clear_stage();
  if (aspect_ratio_transform) {
    set_has_aspect_ratio_transform();
    stage_.aspect_ratio_transform_ = aspect_ratio_transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.aspect_ratio_transform)
}
inline ::AspectRatioTransform* MiniBatchItemStage::_internal_mutable_aspect_ratio_transform() {
  if (!_internal_has_aspect_ratio_transform()) {
    clear_stage();
    set_has_aspect_ratio_transform();
    stage_.aspect_ratio_transform_ = CreateMaybeMessage< ::AspectRatioTransform >(GetArena());
  }
  return stage_.aspect_ratio_transform_;
}
inline ::AspectRatioTransform* MiniBatchItemStage::mutable_aspect_ratio_transform() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.aspect_ratio_transform)
  return _internal_mutable_aspect_ratio_transform();
}

// .AffineTransform affine_transform = 9;
inline bool MiniBatchItemStage::_internal_has_affine_transform() const {
  return stage_case() == kAffineTransform;
}
inline bool MiniBatchItemStage::has_affine_transform() const {
  return _internal_has_affine_transform();
}
inline void MiniBatchItemStage::set_has_affine_transform() {
  _oneof_case_[0] = kAffineTransform;
}
inline void MiniBatchItemStage::clear_affine_transform() {
  if (_internal_has_affine_transform()) {
    if (GetArena() == nullptr) {
      delete stage_.affine_transform_;
    }
    clear_has_stage();
  }
}
inline ::AffineTransform* MiniBatchItemStage::release_affine_transform() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.affine_transform)
  if (_internal_has_affine_transform()) {
    clear_has_stage();
      ::AffineTransform* temp = stage_.affine_transform_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.affine_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AffineTransform& MiniBatchItemStage::_internal_affine_transform() const {
  return _internal_has_affine_transform()
      ? *stage_.affine_transform_
      : *reinterpret_cast< ::AffineTransform*>(&::_AffineTransform_default_instance_);
}
inline const ::AffineTransform& MiniBatchItemStage::affine_transform() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.affine_transform)
  return _internal_affine_transform();
}
inline ::AffineTransform* MiniBatchItemStage::unsafe_arena_release_affine_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.affine_transform)
  if (_internal_has_affine_transform()) {
    clear_has_stage();
    ::AffineTransform* temp = stage_.affine_transform_;
    stage_.affine_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_affine_transform(::AffineTransform* affine_transform) {
  clear_stage();
  if (affine_transform) {
    set_has_affine_transform();
    stage_.affine_transform_ = affine_transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.affine_transform)
}
inline ::AffineTransform* MiniBatchItemStage::_internal_mutable_affine_transform() {
  if (!_internal_has_affine_transform()) {
    clear_stage();
    set_has_affine_transform();
    stage_.affine_transform_ = CreateMaybeMessage< ::AffineTransform >(GetArena());
  }
  return stage_.affine_transform_;
}
inline ::AffineTransform* MiniBatchItemStage::mutable_affine_transform() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.affine_transform)
  return _internal_mutable_affine_transform();
}

// .FlipTransform flip_transform = 10;
inline bool MiniBatchItemStage::_internal_has_flip_transform() const {
  return stage_case() == kFlipTransform;
}
inline bool MiniBatchItemStage::has_flip_transform() const {
  return _internal_has_flip_transform();
}
inline void MiniBatchItemStage::set_has_flip_transform() {
  _oneof_case_[0] = kFlipTransform;
}
inline void MiniBatchItemStage::clear_flip_transform() {
  if (_internal_has_flip_transform()) {
    if (GetArena() == nullptr) {
      delete stage_.flip_transform_;
    }
    clear_has_stage();
  }
}
inline ::FlipTransform* MiniBatchItemStage::release_flip_transform() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.flip_transform)
  if (_internal_has_flip_transform()) {
    clear_has_stage();
      ::FlipTransform* temp = stage_.flip_transform_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.flip_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FlipTransform& MiniBatchItemStage::_internal_flip_transform() const {
  return _internal_has_flip_transform()
      ? *stage_.flip_transform_
      : *reinterpret_cast< ::FlipTransform*>(&::_FlipTransform_default_instance_);
}
inline const ::FlipTransform& MiniBatchItemStage::flip_transform() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.flip_transform)
  return _internal_flip_transform();
}
inline ::FlipTransform* MiniBatchItemStage::unsafe_arena_release_flip_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.flip_transform)
  if (_internal_has_flip_transform()) {
    clear_has_stage();
    ::FlipTransform* temp = stage_.flip_transform_;
    stage_.flip_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_flip_transform(::FlipTransform* flip_transform) {
  clear_stage();
  if (flip_transform) {
    set_has_flip_transform();
    stage_.flip_transform_ = flip_transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.flip_transform)
}
inline ::FlipTransform* MiniBatchItemStage::_internal_mutable_flip_transform() {
  if (!_internal_has_flip_transform()) {
    clear_stage();
    set_has_flip_transform();
    stage_.flip_transform_ = CreateMaybeMessage< ::FlipTransform >(GetArena());
  }
  return stage_.flip_transform_;
}
inline ::FlipTransform* MiniBatchItemStage::mutable_flip_transform() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.flip_transform)
  return _internal_mutable_flip_transform();
}

// .JPEGRecompression jpeg_recompression = 11;
inline bool MiniBatchItemStage::_internal_has_jpeg_recompression() const {
  return stage_case() == kJpegRecompression;
}
inline bool MiniBatchItemStage::has_jpeg_recompression() const {
  return _internal_has_jpeg_recompression();
}
inline void MiniBatchItemStage::set_has_jpeg_recompression() {
  _oneof_case_[0] = kJpegRecompression;
}
inline void MiniBatchItemStage::clear_jpeg_recompression() {
  if (_internal_has_jpeg_recompression()) {
    if (GetArena() == nullptr) {
      delete stage_.jpeg_recompression_;
    }
    clear_has_stage();
  }
}
inline ::JPEGRecompression* MiniBatchItemStage::release_jpeg_recompression() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.jpeg_recompression)
  if (_internal_has_jpeg_recompression()) {
    clear_has_stage();
      ::JPEGRecompression* temp = stage_.jpeg_recompression_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.jpeg_recompression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::JPEGRecompression& MiniBatchItemStage::_internal_jpeg_recompression() const {
  return _internal_has_jpeg_recompression()
      ? *stage_.jpeg_recompression_
      : *reinterpret_cast< ::JPEGRecompression*>(&::_JPEGRecompression_default_instance_);
}
inline const ::JPEGRecompression& MiniBatchItemStage::jpeg_recompression() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.jpeg_recompression)
  return _internal_jpeg_recompression();
}
inline ::JPEGRecompression* MiniBatchItemStage::unsafe_arena_release_jpeg_recompression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.jpeg_recompression)
  if (_internal_has_jpeg_recompression()) {
    clear_has_stage();
    ::JPEGRecompression* temp = stage_.jpeg_recompression_;
    stage_.jpeg_recompression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_jpeg_recompression(::JPEGRecompression* jpeg_recompression) {
  clear_stage();
  if (jpeg_recompression) {
    set_has_jpeg_recompression();
    stage_.jpeg_recompression_ = jpeg_recompression;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.jpeg_recompression)
}
inline ::JPEGRecompression* MiniBatchItemStage::_internal_mutable_jpeg_recompression() {
  if (!_internal_has_jpeg_recompression()) {
    clear_stage();
    set_has_jpeg_recompression();
    stage_.jpeg_recompression_ = CreateMaybeMessage< ::JPEGRecompression >(GetArena());
  }
  return stage_.jpeg_recompression_;
}
inline ::JPEGRecompression* MiniBatchItemStage::mutable_jpeg_recompression() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.jpeg_recompression)
  return _internal_mutable_jpeg_recompression();
}

// .FilterBbox filter_bbox = 12;
inline bool MiniBatchItemStage::_internal_has_filter_bbox() const {
  return stage_case() == kFilterBbox;
}
inline bool MiniBatchItemStage::has_filter_bbox() const {
  return _internal_has_filter_bbox();
}
inline void MiniBatchItemStage::set_has_filter_bbox() {
  _oneof_case_[0] = kFilterBbox;
}
inline void MiniBatchItemStage::clear_filter_bbox() {
  if (_internal_has_filter_bbox()) {
    if (GetArena() == nullptr) {
      delete stage_.filter_bbox_;
    }
    clear_has_stage();
  }
}
inline ::FilterBbox* MiniBatchItemStage::release_filter_bbox() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.filter_bbox)
  if (_internal_has_filter_bbox()) {
    clear_has_stage();
      ::FilterBbox* temp = stage_.filter_bbox_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.filter_bbox_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FilterBbox& MiniBatchItemStage::_internal_filter_bbox() const {
  return _internal_has_filter_bbox()
      ? *stage_.filter_bbox_
      : *reinterpret_cast< ::FilterBbox*>(&::_FilterBbox_default_instance_);
}
inline const ::FilterBbox& MiniBatchItemStage::filter_bbox() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.filter_bbox)
  return _internal_filter_bbox();
}
inline ::FilterBbox* MiniBatchItemStage::unsafe_arena_release_filter_bbox() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.filter_bbox)
  if (_internal_has_filter_bbox()) {
    clear_has_stage();
    ::FilterBbox* temp = stage_.filter_bbox_;
    stage_.filter_bbox_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_filter_bbox(::FilterBbox* filter_bbox) {
  clear_stage();
  if (filter_bbox) {
    set_has_filter_bbox();
    stage_.filter_bbox_ = filter_bbox;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.filter_bbox)
}
inline ::FilterBbox* MiniBatchItemStage::_internal_mutable_filter_bbox() {
  if (!_internal_has_filter_bbox()) {
    clear_stage();
    set_has_filter_bbox();
    stage_.filter_bbox_ = CreateMaybeMessage< ::FilterBbox >(GetArena());
  }
  return stage_.filter_bbox_;
}
inline ::FilterBbox* MiniBatchItemStage::mutable_filter_bbox() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.filter_bbox)
  return _internal_mutable_filter_bbox();
}

// .ColorTransform color_transform = 13;
inline bool MiniBatchItemStage::_internal_has_color_transform() const {
  return stage_case() == kColorTransform;
}
inline bool MiniBatchItemStage::has_color_transform() const {
  return _internal_has_color_transform();
}
inline void MiniBatchItemStage::set_has_color_transform() {
  _oneof_case_[0] = kColorTransform;
}
inline void MiniBatchItemStage::clear_color_transform() {
  if (_internal_has_color_transform()) {
    if (GetArena() == nullptr) {
      delete stage_.color_transform_;
    }
    clear_has_stage();
  }
}
inline ::ColorTransform* MiniBatchItemStage::release_color_transform() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.color_transform)
  if (_internal_has_color_transform()) {
    clear_has_stage();
      ::ColorTransform* temp = stage_.color_transform_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.color_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ColorTransform& MiniBatchItemStage::_internal_color_transform() const {
  return _internal_has_color_transform()
      ? *stage_.color_transform_
      : *reinterpret_cast< ::ColorTransform*>(&::_ColorTransform_default_instance_);
}
inline const ::ColorTransform& MiniBatchItemStage::color_transform() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.color_transform)
  return _internal_color_transform();
}
inline ::ColorTransform* MiniBatchItemStage::unsafe_arena_release_color_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.color_transform)
  if (_internal_has_color_transform()) {
    clear_has_stage();
    ::ColorTransform* temp = stage_.color_transform_;
    stage_.color_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_color_transform(::ColorTransform* color_transform) {
  clear_stage();
  if (color_transform) {
    set_has_color_transform();
    stage_.color_transform_ = color_transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.color_transform)
}
inline ::ColorTransform* MiniBatchItemStage::_internal_mutable_color_transform() {
  if (!_internal_has_color_transform()) {
    clear_stage();
    set_has_color_transform();
    stage_.color_transform_ = CreateMaybeMessage< ::ColorTransform >(GetArena());
  }
  return stage_.color_transform_;
}
inline ::ColorTransform* MiniBatchItemStage::mutable_color_transform() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.color_transform)
  return _internal_mutable_color_transform();
}

// .ScaleTransform scale_transform = 14;
inline bool MiniBatchItemStage::_internal_has_scale_transform() const {
  return stage_case() == kScaleTransform;
}
inline bool MiniBatchItemStage::has_scale_transform() const {
  return _internal_has_scale_transform();
}
inline void MiniBatchItemStage::set_has_scale_transform() {
  _oneof_case_[0] = kScaleTransform;
}
inline void MiniBatchItemStage::clear_scale_transform() {
  if (_internal_has_scale_transform()) {
    if (GetArena() == nullptr) {
      delete stage_.scale_transform_;
    }
    clear_has_stage();
  }
}
inline ::ScaleTransform* MiniBatchItemStage::release_scale_transform() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.scale_transform)
  if (_internal_has_scale_transform()) {
    clear_has_stage();
      ::ScaleTransform* temp = stage_.scale_transform_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.scale_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ScaleTransform& MiniBatchItemStage::_internal_scale_transform() const {
  return _internal_has_scale_transform()
      ? *stage_.scale_transform_
      : *reinterpret_cast< ::ScaleTransform*>(&::_ScaleTransform_default_instance_);
}
inline const ::ScaleTransform& MiniBatchItemStage::scale_transform() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.scale_transform)
  return _internal_scale_transform();
}
inline ::ScaleTransform* MiniBatchItemStage::unsafe_arena_release_scale_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.scale_transform)
  if (_internal_has_scale_transform()) {
    clear_has_stage();
    ::ScaleTransform* temp = stage_.scale_transform_;
    stage_.scale_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_scale_transform(::ScaleTransform* scale_transform) {
  clear_stage();
  if (scale_transform) {
    set_has_scale_transform();
    stage_.scale_transform_ = scale_transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.scale_transform)
}
inline ::ScaleTransform* MiniBatchItemStage::_internal_mutable_scale_transform() {
  if (!_internal_has_scale_transform()) {
    clear_stage();
    set_has_scale_transform();
    stage_.scale_transform_ = CreateMaybeMessage< ::ScaleTransform >(GetArena());
  }
  return stage_.scale_transform_;
}
inline ::ScaleTransform* MiniBatchItemStage::mutable_scale_transform() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.scale_transform)
  return _internal_mutable_scale_transform();
}

// .LabelsFromBboxes labels_from_bboxes = 15;
inline bool MiniBatchItemStage::_internal_has_labels_from_bboxes() const {
  return stage_case() == kLabelsFromBboxes;
}
inline bool MiniBatchItemStage::has_labels_from_bboxes() const {
  return _internal_has_labels_from_bboxes();
}
inline void MiniBatchItemStage::set_has_labels_from_bboxes() {
  _oneof_case_[0] = kLabelsFromBboxes;
}
inline void MiniBatchItemStage::clear_labels_from_bboxes() {
  if (_internal_has_labels_from_bboxes()) {
    if (GetArena() == nullptr) {
      delete stage_.labels_from_bboxes_;
    }
    clear_has_stage();
  }
}
inline ::LabelsFromBboxes* MiniBatchItemStage::release_labels_from_bboxes() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.labels_from_bboxes)
  if (_internal_has_labels_from_bboxes()) {
    clear_has_stage();
      ::LabelsFromBboxes* temp = stage_.labels_from_bboxes_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.labels_from_bboxes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LabelsFromBboxes& MiniBatchItemStage::_internal_labels_from_bboxes() const {
  return _internal_has_labels_from_bboxes()
      ? *stage_.labels_from_bboxes_
      : *reinterpret_cast< ::LabelsFromBboxes*>(&::_LabelsFromBboxes_default_instance_);
}
inline const ::LabelsFromBboxes& MiniBatchItemStage::labels_from_bboxes() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.labels_from_bboxes)
  return _internal_labels_from_bboxes();
}
inline ::LabelsFromBboxes* MiniBatchItemStage::unsafe_arena_release_labels_from_bboxes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.labels_from_bboxes)
  if (_internal_has_labels_from_bboxes()) {
    clear_has_stage();
    ::LabelsFromBboxes* temp = stage_.labels_from_bboxes_;
    stage_.labels_from_bboxes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_labels_from_bboxes(::LabelsFromBboxes* labels_from_bboxes) {
  clear_stage();
  if (labels_from_bboxes) {
    set_has_labels_from_bboxes();
    stage_.labels_from_bboxes_ = labels_from_bboxes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.labels_from_bboxes)
}
inline ::LabelsFromBboxes* MiniBatchItemStage::_internal_mutable_labels_from_bboxes() {
  if (!_internal_has_labels_from_bboxes()) {
    clear_stage();
    set_has_labels_from_bboxes();
    stage_.labels_from_bboxes_ = CreateMaybeMessage< ::LabelsFromBboxes >(GetArena());
  }
  return stage_.labels_from_bboxes_;
}
inline ::LabelsFromBboxes* MiniBatchItemStage::mutable_labels_from_bboxes() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.labels_from_bboxes)
  return _internal_mutable_labels_from_bboxes();
}

// .DistortionTransform distortion_transform = 16;
inline bool MiniBatchItemStage::_internal_has_distortion_transform() const {
  return stage_case() == kDistortionTransform;
}
inline bool MiniBatchItemStage::has_distortion_transform() const {
  return _internal_has_distortion_transform();
}
inline void MiniBatchItemStage::set_has_distortion_transform() {
  _oneof_case_[0] = kDistortionTransform;
}
inline void MiniBatchItemStage::clear_distortion_transform() {
  if (_internal_has_distortion_transform()) {
    if (GetArena() == nullptr) {
      delete stage_.distortion_transform_;
    }
    clear_has_stage();
  }
}
inline ::DistortionTransform* MiniBatchItemStage::release_distortion_transform() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.distortion_transform)
  if (_internal_has_distortion_transform()) {
    clear_has_stage();
      ::DistortionTransform* temp = stage_.distortion_transform_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.distortion_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DistortionTransform& MiniBatchItemStage::_internal_distortion_transform() const {
  return _internal_has_distortion_transform()
      ? *stage_.distortion_transform_
      : *reinterpret_cast< ::DistortionTransform*>(&::_DistortionTransform_default_instance_);
}
inline const ::DistortionTransform& MiniBatchItemStage::distortion_transform() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.distortion_transform)
  return _internal_distortion_transform();
}
inline ::DistortionTransform* MiniBatchItemStage::unsafe_arena_release_distortion_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.distortion_transform)
  if (_internal_has_distortion_transform()) {
    clear_has_stage();
    ::DistortionTransform* temp = stage_.distortion_transform_;
    stage_.distortion_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_distortion_transform(::DistortionTransform* distortion_transform) {
  clear_stage();
  if (distortion_transform) {
    set_has_distortion_transform();
    stage_.distortion_transform_ = distortion_transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.distortion_transform)
}
inline ::DistortionTransform* MiniBatchItemStage::_internal_mutable_distortion_transform() {
  if (!_internal_has_distortion_transform()) {
    clear_stage();
    set_has_distortion_transform();
    stage_.distortion_transform_ = CreateMaybeMessage< ::DistortionTransform >(GetArena());
  }
  return stage_.distortion_transform_;
}
inline ::DistortionTransform* MiniBatchItemStage::mutable_distortion_transform() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.distortion_transform)
  return _internal_mutable_distortion_transform();
}

// .WhitespaceTokenizer whitespace_tokenizer = 17;
inline bool MiniBatchItemStage::_internal_has_whitespace_tokenizer() const {
  return stage_case() == kWhitespaceTokenizer;
}
inline bool MiniBatchItemStage::has_whitespace_tokenizer() const {
  return _internal_has_whitespace_tokenizer();
}
inline void MiniBatchItemStage::set_has_whitespace_tokenizer() {
  _oneof_case_[0] = kWhitespaceTokenizer;
}
inline void MiniBatchItemStage::clear_whitespace_tokenizer() {
  if (_internal_has_whitespace_tokenizer()) {
    if (GetArena() == nullptr) {
      delete stage_.whitespace_tokenizer_;
    }
    clear_has_stage();
  }
}
inline ::WhitespaceTokenizer* MiniBatchItemStage::release_whitespace_tokenizer() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.whitespace_tokenizer)
  if (_internal_has_whitespace_tokenizer()) {
    clear_has_stage();
      ::WhitespaceTokenizer* temp = stage_.whitespace_tokenizer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.whitespace_tokenizer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::WhitespaceTokenizer& MiniBatchItemStage::_internal_whitespace_tokenizer() const {
  return _internal_has_whitespace_tokenizer()
      ? *stage_.whitespace_tokenizer_
      : *reinterpret_cast< ::WhitespaceTokenizer*>(&::_WhitespaceTokenizer_default_instance_);
}
inline const ::WhitespaceTokenizer& MiniBatchItemStage::whitespace_tokenizer() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.whitespace_tokenizer)
  return _internal_whitespace_tokenizer();
}
inline ::WhitespaceTokenizer* MiniBatchItemStage::unsafe_arena_release_whitespace_tokenizer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.whitespace_tokenizer)
  if (_internal_has_whitespace_tokenizer()) {
    clear_has_stage();
    ::WhitespaceTokenizer* temp = stage_.whitespace_tokenizer_;
    stage_.whitespace_tokenizer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_whitespace_tokenizer(::WhitespaceTokenizer* whitespace_tokenizer) {
  clear_stage();
  if (whitespace_tokenizer) {
    set_has_whitespace_tokenizer();
    stage_.whitespace_tokenizer_ = whitespace_tokenizer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.whitespace_tokenizer)
}
inline ::WhitespaceTokenizer* MiniBatchItemStage::_internal_mutable_whitespace_tokenizer() {
  if (!_internal_has_whitespace_tokenizer()) {
    clear_stage();
    set_has_whitespace_tokenizer();
    stage_.whitespace_tokenizer_ = CreateMaybeMessage< ::WhitespaceTokenizer >(GetArena());
  }
  return stage_.whitespace_tokenizer_;
}
inline ::WhitespaceTokenizer* MiniBatchItemStage::mutable_whitespace_tokenizer() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.whitespace_tokenizer)
  return _internal_mutable_whitespace_tokenizer();
}

// .TokenIndexer token_indexer = 18;
inline bool MiniBatchItemStage::_internal_has_token_indexer() const {
  return stage_case() == kTokenIndexer;
}
inline bool MiniBatchItemStage::has_token_indexer() const {
  return _internal_has_token_indexer();
}
inline void MiniBatchItemStage::set_has_token_indexer() {
  _oneof_case_[0] = kTokenIndexer;
}
inline void MiniBatchItemStage::clear_token_indexer() {
  if (_internal_has_token_indexer()) {
    if (GetArena() == nullptr) {
      delete stage_.token_indexer_;
    }
    clear_has_stage();
  }
}
inline ::TokenIndexer* MiniBatchItemStage::release_token_indexer() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.token_indexer)
  if (_internal_has_token_indexer()) {
    clear_has_stage();
      ::TokenIndexer* temp = stage_.token_indexer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.token_indexer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TokenIndexer& MiniBatchItemStage::_internal_token_indexer() const {
  return _internal_has_token_indexer()
      ? *stage_.token_indexer_
      : *reinterpret_cast< ::TokenIndexer*>(&::_TokenIndexer_default_instance_);
}
inline const ::TokenIndexer& MiniBatchItemStage::token_indexer() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.token_indexer)
  return _internal_token_indexer();
}
inline ::TokenIndexer* MiniBatchItemStage::unsafe_arena_release_token_indexer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.token_indexer)
  if (_internal_has_token_indexer()) {
    clear_has_stage();
    ::TokenIndexer* temp = stage_.token_indexer_;
    stage_.token_indexer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_token_indexer(::TokenIndexer* token_indexer) {
  clear_stage();
  if (token_indexer) {
    set_has_token_indexer();
    stage_.token_indexer_ = token_indexer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.token_indexer)
}
inline ::TokenIndexer* MiniBatchItemStage::_internal_mutable_token_indexer() {
  if (!_internal_has_token_indexer()) {
    clear_stage();
    set_has_token_indexer();
    stage_.token_indexer_ = CreateMaybeMessage< ::TokenIndexer >(GetArena());
  }
  return stage_.token_indexer_;
}
inline ::TokenIndexer* MiniBatchItemStage::mutable_token_indexer() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.token_indexer)
  return _internal_mutable_token_indexer();
}

// .AudioMFCCTransform audio_mfcc_transform = 19;
inline bool MiniBatchItemStage::_internal_has_audio_mfcc_transform() const {
  return stage_case() == kAudioMfccTransform;
}
inline bool MiniBatchItemStage::has_audio_mfcc_transform() const {
  return _internal_has_audio_mfcc_transform();
}
inline void MiniBatchItemStage::set_has_audio_mfcc_transform() {
  _oneof_case_[0] = kAudioMfccTransform;
}
inline void MiniBatchItemStage::clear_audio_mfcc_transform() {
  if (_internal_has_audio_mfcc_transform()) {
    if (GetArena() == nullptr) {
      delete stage_.audio_mfcc_transform_;
    }
    clear_has_stage();
  }
}
inline ::AudioMFCCTransform* MiniBatchItemStage::release_audio_mfcc_transform() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.audio_mfcc_transform)
  if (_internal_has_audio_mfcc_transform()) {
    clear_has_stage();
      ::AudioMFCCTransform* temp = stage_.audio_mfcc_transform_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.audio_mfcc_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AudioMFCCTransform& MiniBatchItemStage::_internal_audio_mfcc_transform() const {
  return _internal_has_audio_mfcc_transform()
      ? *stage_.audio_mfcc_transform_
      : *reinterpret_cast< ::AudioMFCCTransform*>(&::_AudioMFCCTransform_default_instance_);
}
inline const ::AudioMFCCTransform& MiniBatchItemStage::audio_mfcc_transform() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.audio_mfcc_transform)
  return _internal_audio_mfcc_transform();
}
inline ::AudioMFCCTransform* MiniBatchItemStage::unsafe_arena_release_audio_mfcc_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.audio_mfcc_transform)
  if (_internal_has_audio_mfcc_transform()) {
    clear_has_stage();
    ::AudioMFCCTransform* temp = stage_.audio_mfcc_transform_;
    stage_.audio_mfcc_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_audio_mfcc_transform(::AudioMFCCTransform* audio_mfcc_transform) {
  clear_stage();
  if (audio_mfcc_transform) {
    set_has_audio_mfcc_transform();
    stage_.audio_mfcc_transform_ = audio_mfcc_transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.audio_mfcc_transform)
}
inline ::AudioMFCCTransform* MiniBatchItemStage::_internal_mutable_audio_mfcc_transform() {
  if (!_internal_has_audio_mfcc_transform()) {
    clear_stage();
    set_has_audio_mfcc_transform();
    stage_.audio_mfcc_transform_ = CreateMaybeMessage< ::AudioMFCCTransform >(GetArena());
  }
  return stage_.audio_mfcc_transform_;
}
inline ::AudioMFCCTransform* MiniBatchItemStage::mutable_audio_mfcc_transform() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.audio_mfcc_transform)
  return _internal_mutable_audio_mfcc_transform();
}

// .OCRCropTransform ocr_crop_transform = 20;
inline bool MiniBatchItemStage::_internal_has_ocr_crop_transform() const {
  return stage_case() == kOcrCropTransform;
}
inline bool MiniBatchItemStage::has_ocr_crop_transform() const {
  return _internal_has_ocr_crop_transform();
}
inline void MiniBatchItemStage::set_has_ocr_crop_transform() {
  _oneof_case_[0] = kOcrCropTransform;
}
inline void MiniBatchItemStage::clear_ocr_crop_transform() {
  if (_internal_has_ocr_crop_transform()) {
    if (GetArena() == nullptr) {
      delete stage_.ocr_crop_transform_;
    }
    clear_has_stage();
  }
}
inline ::OCRCropTransform* MiniBatchItemStage::release_ocr_crop_transform() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.ocr_crop_transform)
  if (_internal_has_ocr_crop_transform()) {
    clear_has_stage();
      ::OCRCropTransform* temp = stage_.ocr_crop_transform_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.ocr_crop_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::OCRCropTransform& MiniBatchItemStage::_internal_ocr_crop_transform() const {
  return _internal_has_ocr_crop_transform()
      ? *stage_.ocr_crop_transform_
      : *reinterpret_cast< ::OCRCropTransform*>(&::_OCRCropTransform_default_instance_);
}
inline const ::OCRCropTransform& MiniBatchItemStage::ocr_crop_transform() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.ocr_crop_transform)
  return _internal_ocr_crop_transform();
}
inline ::OCRCropTransform* MiniBatchItemStage::unsafe_arena_release_ocr_crop_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.ocr_crop_transform)
  if (_internal_has_ocr_crop_transform()) {
    clear_has_stage();
    ::OCRCropTransform* temp = stage_.ocr_crop_transform_;
    stage_.ocr_crop_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_ocr_crop_transform(::OCRCropTransform* ocr_crop_transform) {
  clear_stage();
  if (ocr_crop_transform) {
    set_has_ocr_crop_transform();
    stage_.ocr_crop_transform_ = ocr_crop_transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.ocr_crop_transform)
}
inline ::OCRCropTransform* MiniBatchItemStage::_internal_mutable_ocr_crop_transform() {
  if (!_internal_has_ocr_crop_transform()) {
    clear_stage();
    set_has_ocr_crop_transform();
    stage_.ocr_crop_transform_ = CreateMaybeMessage< ::OCRCropTransform >(GetArena());
  }
  return stage_.ocr_crop_transform_;
}
inline ::OCRCropTransform* MiniBatchItemStage::mutable_ocr_crop_transform() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.ocr_crop_transform)
  return _internal_mutable_ocr_crop_transform();
}

// .FilterInvalidItems filter_invalid_items = 21;
inline bool MiniBatchItemStage::_internal_has_filter_invalid_items() const {
  return stage_case() == kFilterInvalidItems;
}
inline bool MiniBatchItemStage::has_filter_invalid_items() const {
  return _internal_has_filter_invalid_items();
}
inline void MiniBatchItemStage::set_has_filter_invalid_items() {
  _oneof_case_[0] = kFilterInvalidItems;
}
inline void MiniBatchItemStage::clear_filter_invalid_items() {
  if (_internal_has_filter_invalid_items()) {
    if (GetArena() == nullptr) {
      delete stage_.filter_invalid_items_;
    }
    clear_has_stage();
  }
}
inline ::FilterInvalidItems* MiniBatchItemStage::release_filter_invalid_items() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.filter_invalid_items)
  if (_internal_has_filter_invalid_items()) {
    clear_has_stage();
      ::FilterInvalidItems* temp = stage_.filter_invalid_items_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.filter_invalid_items_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FilterInvalidItems& MiniBatchItemStage::_internal_filter_invalid_items() const {
  return _internal_has_filter_invalid_items()
      ? *stage_.filter_invalid_items_
      : *reinterpret_cast< ::FilterInvalidItems*>(&::_FilterInvalidItems_default_instance_);
}
inline const ::FilterInvalidItems& MiniBatchItemStage::filter_invalid_items() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.filter_invalid_items)
  return _internal_filter_invalid_items();
}
inline ::FilterInvalidItems* MiniBatchItemStage::unsafe_arena_release_filter_invalid_items() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.filter_invalid_items)
  if (_internal_has_filter_invalid_items()) {
    clear_has_stage();
    ::FilterInvalidItems* temp = stage_.filter_invalid_items_;
    stage_.filter_invalid_items_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_filter_invalid_items(::FilterInvalidItems* filter_invalid_items) {
  clear_stage();
  if (filter_invalid_items) {
    set_has_filter_invalid_items();
    stage_.filter_invalid_items_ = filter_invalid_items;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.filter_invalid_items)
}
inline ::FilterInvalidItems* MiniBatchItemStage::_internal_mutable_filter_invalid_items() {
  if (!_internal_has_filter_invalid_items()) {
    clear_stage();
    set_has_filter_invalid_items();
    stage_.filter_invalid_items_ = CreateMaybeMessage< ::FilterInvalidItems >(GetArena());
  }
  return stage_.filter_invalid_items_;
}
inline ::FilterInvalidItems* MiniBatchItemStage::mutable_filter_invalid_items() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.filter_invalid_items)
  return _internal_mutable_filter_invalid_items();
}

// .LandmarkAlignTransform landmark_align_transform = 22;
inline bool MiniBatchItemStage::_internal_has_landmark_align_transform() const {
  return stage_case() == kLandmarkAlignTransform;
}
inline bool MiniBatchItemStage::has_landmark_align_transform() const {
  return _internal_has_landmark_align_transform();
}
inline void MiniBatchItemStage::set_has_landmark_align_transform() {
  _oneof_case_[0] = kLandmarkAlignTransform;
}
inline void MiniBatchItemStage::clear_landmark_align_transform() {
  if (_internal_has_landmark_align_transform()) {
    if (GetArena() == nullptr) {
      delete stage_.landmark_align_transform_;
    }
    clear_has_stage();
  }
}
inline ::LandmarkAlignTransform* MiniBatchItemStage::release_landmark_align_transform() {
  // @@protoc_insertion_point(field_release:MiniBatchItemStage.landmark_align_transform)
  if (_internal_has_landmark_align_transform()) {
    clear_has_stage();
      ::LandmarkAlignTransform* temp = stage_.landmark_align_transform_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.landmark_align_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LandmarkAlignTransform& MiniBatchItemStage::_internal_landmark_align_transform() const {
  return _internal_has_landmark_align_transform()
      ? *stage_.landmark_align_transform_
      : *reinterpret_cast< ::LandmarkAlignTransform*>(&::_LandmarkAlignTransform_default_instance_);
}
inline const ::LandmarkAlignTransform& MiniBatchItemStage::landmark_align_transform() const {
  // @@protoc_insertion_point(field_get:MiniBatchItemStage.landmark_align_transform)
  return _internal_landmark_align_transform();
}
inline ::LandmarkAlignTransform* MiniBatchItemStage::unsafe_arena_release_landmark_align_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MiniBatchItemStage.landmark_align_transform)
  if (_internal_has_landmark_align_transform()) {
    clear_has_stage();
    ::LandmarkAlignTransform* temp = stage_.landmark_align_transform_;
    stage_.landmark_align_transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MiniBatchItemStage::unsafe_arena_set_allocated_landmark_align_transform(::LandmarkAlignTransform* landmark_align_transform) {
  clear_stage();
  if (landmark_align_transform) {
    set_has_landmark_align_transform();
    stage_.landmark_align_transform_ = landmark_align_transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MiniBatchItemStage.landmark_align_transform)
}
inline ::LandmarkAlignTransform* MiniBatchItemStage::_internal_mutable_landmark_align_transform() {
  if (!_internal_has_landmark_align_transform()) {
    clear_stage();
    set_has_landmark_align_transform();
    stage_.landmark_align_transform_ = CreateMaybeMessage< ::LandmarkAlignTransform >(GetArena());
  }
  return stage_.landmark_align_transform_;
}
inline ::LandmarkAlignTransform* MiniBatchItemStage::mutable_landmark_align_transform() {
  // @@protoc_insertion_point(field_mutable:MiniBatchItemStage.landmark_align_transform)
  return _internal_mutable_landmark_align_transform();
}

inline bool MiniBatchItemStage::has_stage() const {
  return stage_case() != STAGE_NOT_SET;
}
inline void MiniBatchItemStage::clear_has_stage() {
  _oneof_case_[0] = STAGE_NOT_SET;
}
inline MiniBatchItemStage::StageCase MiniBatchItemStage::stage_case() const {
  return MiniBatchItemStage::StageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// gRPCReaderParams

// string generator_class_name = 1;
inline void gRPCReaderParams::clear_generator_class_name() {
  generator_class_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& gRPCReaderParams::generator_class_name() const {
  // @@protoc_insertion_point(field_get:gRPCReaderParams.generator_class_name)
  return _internal_generator_class_name();
}
inline void gRPCReaderParams::set_generator_class_name(const std::string& value) {
  _internal_set_generator_class_name(value);
  // @@protoc_insertion_point(field_set:gRPCReaderParams.generator_class_name)
}
inline std::string* gRPCReaderParams::mutable_generator_class_name() {
  // @@protoc_insertion_point(field_mutable:gRPCReaderParams.generator_class_name)
  return _internal_mutable_generator_class_name();
}
inline const std::string& gRPCReaderParams::_internal_generator_class_name() const {
  return generator_class_name_.Get();
}
inline void gRPCReaderParams::_internal_set_generator_class_name(const std::string& value) {
  
  generator_class_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void gRPCReaderParams::set_generator_class_name(std::string&& value) {
  
  generator_class_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gRPCReaderParams.generator_class_name)
}
inline void gRPCReaderParams::set_generator_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  generator_class_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gRPCReaderParams.generator_class_name)
}
inline void gRPCReaderParams::set_generator_class_name(const char* value,
    size_t size) {
  
  generator_class_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gRPCReaderParams.generator_class_name)
}
inline std::string* gRPCReaderParams::_internal_mutable_generator_class_name() {
  
  return generator_class_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* gRPCReaderParams::release_generator_class_name() {
  // @@protoc_insertion_point(field_release:gRPCReaderParams.generator_class_name)
  return generator_class_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void gRPCReaderParams::set_allocated_generator_class_name(std::string* generator_class_name) {
  if (generator_class_name != nullptr) {
    
  } else {
    
  }
  generator_class_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), generator_class_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gRPCReaderParams.generator_class_name)
}

// .DataProviderParams data_provider_params = 2;
inline bool gRPCReaderParams::_internal_has_data_provider_params() const {
  return params_case() == kDataProviderParams;
}
inline bool gRPCReaderParams::has_data_provider_params() const {
  return _internal_has_data_provider_params();
}
inline void gRPCReaderParams::set_has_data_provider_params() {
  _oneof_case_[0] = kDataProviderParams;
}
inline void gRPCReaderParams::clear_data_provider_params() {
  if (_internal_has_data_provider_params()) {
    if (GetArena() == nullptr) {
      delete params_.data_provider_params_;
    }
    clear_has_params();
  }
}
inline ::DataProviderParams* gRPCReaderParams::release_data_provider_params() {
  // @@protoc_insertion_point(field_release:gRPCReaderParams.data_provider_params)
  if (_internal_has_data_provider_params()) {
    clear_has_params();
      ::DataProviderParams* temp = params_.data_provider_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.data_provider_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DataProviderParams& gRPCReaderParams::_internal_data_provider_params() const {
  return _internal_has_data_provider_params()
      ? *params_.data_provider_params_
      : *reinterpret_cast< ::DataProviderParams*>(&::_DataProviderParams_default_instance_);
}
inline const ::DataProviderParams& gRPCReaderParams::data_provider_params() const {
  // @@protoc_insertion_point(field_get:gRPCReaderParams.data_provider_params)
  return _internal_data_provider_params();
}
inline ::DataProviderParams* gRPCReaderParams::unsafe_arena_release_data_provider_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gRPCReaderParams.data_provider_params)
  if (_internal_has_data_provider_params()) {
    clear_has_params();
    ::DataProviderParams* temp = params_.data_provider_params_;
    params_.data_provider_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void gRPCReaderParams::unsafe_arena_set_allocated_data_provider_params(::DataProviderParams* data_provider_params) {
  clear_params();
  if (data_provider_params) {
    set_has_data_provider_params();
    params_.data_provider_params_ = data_provider_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCReaderParams.data_provider_params)
}
inline ::DataProviderParams* gRPCReaderParams::_internal_mutable_data_provider_params() {
  if (!_internal_has_data_provider_params()) {
    clear_params();
    set_has_data_provider_params();
    params_.data_provider_params_ = CreateMaybeMessage< ::DataProviderParams >(GetArena());
  }
  return params_.data_provider_params_;
}
inline ::DataProviderParams* gRPCReaderParams::mutable_data_provider_params() {
  // @@protoc_insertion_point(field_mutable:gRPCReaderParams.data_provider_params)
  return _internal_mutable_data_provider_params();
}

// bytes serialized_params = 3;
inline bool gRPCReaderParams::_internal_has_serialized_params() const {
  return params_case() == kSerializedParams;
}
inline void gRPCReaderParams::set_has_serialized_params() {
  _oneof_case_[0] = kSerializedParams;
}
inline void gRPCReaderParams::clear_serialized_params() {
  if (_internal_has_serialized_params()) {
    params_.serialized_params_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_params();
  }
}
inline const std::string& gRPCReaderParams::serialized_params() const {
  // @@protoc_insertion_point(field_get:gRPCReaderParams.serialized_params)
  return _internal_serialized_params();
}
inline void gRPCReaderParams::set_serialized_params(const std::string& value) {
  _internal_set_serialized_params(value);
  // @@protoc_insertion_point(field_set:gRPCReaderParams.serialized_params)
}
inline std::string* gRPCReaderParams::mutable_serialized_params() {
  // @@protoc_insertion_point(field_mutable:gRPCReaderParams.serialized_params)
  return _internal_mutable_serialized_params();
}
inline const std::string& gRPCReaderParams::_internal_serialized_params() const {
  if (_internal_has_serialized_params()) {
    return params_.serialized_params_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void gRPCReaderParams::_internal_set_serialized_params(const std::string& value) {
  if (!_internal_has_serialized_params()) {
    clear_params();
    set_has_serialized_params();
    params_.serialized_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  params_.serialized_params_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void gRPCReaderParams::set_serialized_params(std::string&& value) {
  // @@protoc_insertion_point(field_set:gRPCReaderParams.serialized_params)
  if (!_internal_has_serialized_params()) {
    clear_params();
    set_has_serialized_params();
    params_.serialized_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  params_.serialized_params_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gRPCReaderParams.serialized_params)
}
inline void gRPCReaderParams::set_serialized_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_serialized_params()) {
    clear_params();
    set_has_serialized_params();
    params_.serialized_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  params_.serialized_params_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:gRPCReaderParams.serialized_params)
}
inline void gRPCReaderParams::set_serialized_params(const void* value,
                             size_t size) {
  if (!_internal_has_serialized_params()) {
    clear_params();
    set_has_serialized_params();
    params_.serialized_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  params_.serialized_params_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:gRPCReaderParams.serialized_params)
}
inline std::string* gRPCReaderParams::_internal_mutable_serialized_params() {
  if (!_internal_has_serialized_params()) {
    clear_params();
    set_has_serialized_params();
    params_.serialized_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return params_.serialized_params_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* gRPCReaderParams::release_serialized_params() {
  // @@protoc_insertion_point(field_release:gRPCReaderParams.serialized_params)
  if (_internal_has_serialized_params()) {
    clear_has_params();
    return params_.serialized_params_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void gRPCReaderParams::set_allocated_serialized_params(std::string* serialized_params) {
  if (has_params()) {
    clear_params();
  }
  if (serialized_params != nullptr) {
    set_has_serialized_params();
    params_.serialized_params_.UnsafeSetDefault(serialized_params);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(serialized_params);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:gRPCReaderParams.serialized_params)
}

// int32 batch_size = 4;
inline void gRPCReaderParams::clear_batch_size() {
  batch_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 gRPCReaderParams::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 gRPCReaderParams::batch_size() const {
  // @@protoc_insertion_point(field_get:gRPCReaderParams.batch_size)
  return _internal_batch_size();
}
inline void gRPCReaderParams::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  batch_size_ = value;
}
inline void gRPCReaderParams::set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:gRPCReaderParams.batch_size)
}

inline bool gRPCReaderParams::has_params() const {
  return params_case() != PARAMS_NOT_SET;
}
inline void gRPCReaderParams::clear_has_params() {
  _oneof_case_[0] = PARAMS_NOT_SET;
}
inline gRPCReaderParams::ParamsCase gRPCReaderParams::params_case() const {
  return gRPCReaderParams::ParamsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FakeBoxes

// repeated float relative_scale_range = 1;
inline int FakeBoxes::_internal_relative_scale_range_size() const {
  return relative_scale_range_.size();
}
inline int FakeBoxes::relative_scale_range_size() const {
  return _internal_relative_scale_range_size();
}
inline void FakeBoxes::clear_relative_scale_range() {
  relative_scale_range_.Clear();
}
inline float FakeBoxes::_internal_relative_scale_range(int index) const {
  return relative_scale_range_.Get(index);
}
inline float FakeBoxes::relative_scale_range(int index) const {
  // @@protoc_insertion_point(field_get:FakeBoxes.relative_scale_range)
  return _internal_relative_scale_range(index);
}
inline void FakeBoxes::set_relative_scale_range(int index, float value) {
  relative_scale_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:FakeBoxes.relative_scale_range)
}
inline void FakeBoxes::_internal_add_relative_scale_range(float value) {
  relative_scale_range_.Add(value);
}
inline void FakeBoxes::add_relative_scale_range(float value) {
  _internal_add_relative_scale_range(value);
  // @@protoc_insertion_point(field_add:FakeBoxes.relative_scale_range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FakeBoxes::_internal_relative_scale_range() const {
  return relative_scale_range_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FakeBoxes::relative_scale_range() const {
  // @@protoc_insertion_point(field_list:FakeBoxes.relative_scale_range)
  return _internal_relative_scale_range();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FakeBoxes::_internal_mutable_relative_scale_range() {
  return &relative_scale_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FakeBoxes::mutable_relative_scale_range() {
  // @@protoc_insertion_point(field_mutable_list:FakeBoxes.relative_scale_range)
  return _internal_mutable_relative_scale_range();
}

// repeated float relative_aspect_range = 2;
inline int FakeBoxes::_internal_relative_aspect_range_size() const {
  return relative_aspect_range_.size();
}
inline int FakeBoxes::relative_aspect_range_size() const {
  return _internal_relative_aspect_range_size();
}
inline void FakeBoxes::clear_relative_aspect_range() {
  relative_aspect_range_.Clear();
}
inline float FakeBoxes::_internal_relative_aspect_range(int index) const {
  return relative_aspect_range_.Get(index);
}
inline float FakeBoxes::relative_aspect_range(int index) const {
  // @@protoc_insertion_point(field_get:FakeBoxes.relative_aspect_range)
  return _internal_relative_aspect_range(index);
}
inline void FakeBoxes::set_relative_aspect_range(int index, float value) {
  relative_aspect_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:FakeBoxes.relative_aspect_range)
}
inline void FakeBoxes::_internal_add_relative_aspect_range(float value) {
  relative_aspect_range_.Add(value);
}
inline void FakeBoxes::add_relative_aspect_range(float value) {
  _internal_add_relative_aspect_range(value);
  // @@protoc_insertion_point(field_add:FakeBoxes.relative_aspect_range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FakeBoxes::_internal_relative_aspect_range() const {
  return relative_aspect_range_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FakeBoxes::relative_aspect_range() const {
  // @@protoc_insertion_point(field_list:FakeBoxes.relative_aspect_range)
  return _internal_relative_aspect_range();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FakeBoxes::_internal_mutable_relative_aspect_range() {
  return &relative_aspect_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FakeBoxes::mutable_relative_aspect_range() {
  // @@protoc_insertion_point(field_mutable_list:FakeBoxes.relative_aspect_range)
  return _internal_mutable_relative_aspect_range();
}

// uint32 fill_color = 3;
inline void FakeBoxes::clear_fill_color() {
  fill_color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FakeBoxes::_internal_fill_color() const {
  return fill_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FakeBoxes::fill_color() const {
  // @@protoc_insertion_point(field_get:FakeBoxes.fill_color)
  return _internal_fill_color();
}
inline void FakeBoxes::_internal_set_fill_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fill_color_ = value;
}
inline void FakeBoxes::set_fill_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fill_color(value);
  // @@protoc_insertion_point(field_set:FakeBoxes.fill_color)
}

// uint32 background_color = 4;
inline void FakeBoxes::clear_background_color() {
  background_color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FakeBoxes::_internal_background_color() const {
  return background_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FakeBoxes::background_color() const {
  // @@protoc_insertion_point(field_get:FakeBoxes.background_color)
  return _internal_background_color();
}
inline void FakeBoxes::_internal_set_background_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  background_color_ = value;
}
inline void FakeBoxes::set_background_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_background_color(value);
  // @@protoc_insertion_point(field_set:FakeBoxes.background_color)
}

// repeated uint32 imsize = 5;
inline int FakeBoxes::_internal_imsize_size() const {
  return imsize_.size();
}
inline int FakeBoxes::imsize_size() const {
  return _internal_imsize_size();
}
inline void FakeBoxes::clear_imsize() {
  imsize_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FakeBoxes::_internal_imsize(int index) const {
  return imsize_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FakeBoxes::imsize(int index) const {
  // @@protoc_insertion_point(field_get:FakeBoxes.imsize)
  return _internal_imsize(index);
}
inline void FakeBoxes::set_imsize(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  imsize_.Set(index, value);
  // @@protoc_insertion_point(field_set:FakeBoxes.imsize)
}
inline void FakeBoxes::_internal_add_imsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  imsize_.Add(value);
}
inline void FakeBoxes::add_imsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_imsize(value);
  // @@protoc_insertion_point(field_add:FakeBoxes.imsize)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FakeBoxes::_internal_imsize() const {
  return imsize_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FakeBoxes::imsize() const {
  // @@protoc_insertion_point(field_list:FakeBoxes.imsize)
  return _internal_imsize();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FakeBoxes::_internal_mutable_imsize() {
  return &imsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FakeBoxes::mutable_imsize() {
  // @@protoc_insertion_point(field_mutable_list:FakeBoxes.imsize)
  return _internal_mutable_imsize();
}

// uint32 min_dim = 6;
inline void FakeBoxes::clear_min_dim() {
  min_dim_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FakeBoxes::_internal_min_dim() const {
  return min_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FakeBoxes::min_dim() const {
  // @@protoc_insertion_point(field_get:FakeBoxes.min_dim)
  return _internal_min_dim();
}
inline void FakeBoxes::_internal_set_min_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  min_dim_ = value;
}
inline void FakeBoxes::set_min_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_dim(value);
  // @@protoc_insertion_point(field_set:FakeBoxes.min_dim)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RelativeCropTransform_FallbackMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RelativeCropTransform_FallbackMode>() {
  return ::RelativeCropTransform_FallbackMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fdata_5fprovider_2eproto
