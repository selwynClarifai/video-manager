// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/data_provider.proto

#include "proto/utils/data_provider.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AffineTransform_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AspectRatioTransform_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioMFCCTransform_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorTransform_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistortionTransform_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FakeBoxes_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterBbox_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterInvalidItems_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlipTransform_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageCropTransform_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JPEGRecompression_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelDropper_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelMapper_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelMapper_CatidMapEntry_DoNotUse_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelSetter_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelSmoother_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelWeight_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelWeight_CatidConstWeightsEntry_DoNotUse_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelsFromBboxes_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LandmarkAlignTransform_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogoDataParams_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaxNumLabelDropper_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_MiniBatchItemStage_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiDataset_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OCRCropTransform_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessingParams_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelativeCropTransform_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSDRandomCropOperation_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SavedOutputParams_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScaleTransform_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenIndexer_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WhitespaceTokenizer_proto_2futils_2fdata_5fprovider_2eproto;
class DataProviderParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataProviderParams> _instance;
} _DataProviderParams_default_instance_;
class ProcessingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessingParams> _instance;
} _ProcessingParams_default_instance_;
class ImageCropTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageCropTransform> _instance;
} _ImageCropTransform_default_instance_;
class SavedOutputParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SavedOutputParams> _instance;
} _SavedOutputParams_default_instance_;
class MultiDatasetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiDataset> _instance;
} _MultiDataset_default_instance_;
class LabelSetterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelSetter> _instance;
} _LabelSetter_default_instance_;
class LabelMapper_CatidMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelMapper_CatidMapEntry_DoNotUse> _instance;
} _LabelMapper_CatidMapEntry_DoNotUse_default_instance_;
class LabelMapperDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelMapper> _instance;
} _LabelMapper_default_instance_;
class LabelSmootherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelSmoother> _instance;
} _LabelSmoother_default_instance_;
class LabelDropperDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelDropper> _instance;
} _LabelDropper_default_instance_;
class OCRCropTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OCRCropTransform> _instance;
} _OCRCropTransform_default_instance_;
class MaxNumLabelDropperDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MaxNumLabelDropper> _instance;
} _MaxNumLabelDropper_default_instance_;
class LabelWeight_CatidConstWeightsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelWeight_CatidConstWeightsEntry_DoNotUse> _instance;
} _LabelWeight_CatidConstWeightsEntry_DoNotUse_default_instance_;
class LabelWeightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelWeight> _instance;
} _LabelWeight_default_instance_;
class LabelsFromBboxesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelsFromBboxes> _instance;
} _LabelsFromBboxes_default_instance_;
class SSDRandomCropOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSDRandomCropOperation> _instance;
} _SSDRandomCropOperation_default_instance_;
class RelativeCropTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelativeCropTransform> _instance;
} _RelativeCropTransform_default_instance_;
class AspectRatioTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AspectRatioTransform> _instance;
} _AspectRatioTransform_default_instance_;
class AffineTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AffineTransform> _instance;
} _AffineTransform_default_instance_;
class ScaleTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScaleTransform> _instance;
} _ScaleTransform_default_instance_;
class DistortionTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DistortionTransform> _instance;
} _DistortionTransform_default_instance_;
class FlipTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlipTransform> _instance;
} _FlipTransform_default_instance_;
class ColorTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorTransform> _instance;
} _ColorTransform_default_instance_;
class LandmarkAlignTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LandmarkAlignTransform> _instance;
} _LandmarkAlignTransform_default_instance_;
class FilterBboxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterBbox> _instance;
} _FilterBbox_default_instance_;
class JPEGRecompressionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JPEGRecompression> _instance;
} _JPEGRecompression_default_instance_;
class LogoDataParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogoDataParams> _instance;
} _LogoDataParams_default_instance_;
class WhitespaceTokenizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WhitespaceTokenizer> _instance;
} _WhitespaceTokenizer_default_instance_;
class TokenIndexerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenIndexer> _instance;
} _TokenIndexer_default_instance_;
class AudioMFCCTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioMFCCTransform> _instance;
} _AudioMFCCTransform_default_instance_;
class FilterInvalidItemsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterInvalidItems> _instance;
} _FilterInvalidItems_default_instance_;
class MiniBatchItemStageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MiniBatchItemStage> _instance;
  const ::ImageCropTransform* image_crop_transform_;
  const ::LabelSmoother* label_smoother_;
  const ::LabelDropper* label_dropper_;
  const ::MaxNumLabelDropper* max_num_label_dropper_;
  const ::LabelWeight* label_weight_;
  const ::SSDRandomCropOperation* ssd_random_crop_;
  const ::RelativeCropTransform* relative_crop_transform_;
  const ::AspectRatioTransform* aspect_ratio_transform_;
  const ::AffineTransform* affine_transform_;
  const ::FlipTransform* flip_transform_;
  const ::JPEGRecompression* jpeg_recompression_;
  const ::FilterBbox* filter_bbox_;
  const ::ColorTransform* color_transform_;
  const ::ScaleTransform* scale_transform_;
  const ::LabelsFromBboxes* labels_from_bboxes_;
  const ::DistortionTransform* distortion_transform_;
  const ::WhitespaceTokenizer* whitespace_tokenizer_;
  const ::TokenIndexer* token_indexer_;
  const ::AudioMFCCTransform* audio_mfcc_transform_;
  const ::OCRCropTransform* ocr_crop_transform_;
  const ::FilterInvalidItems* filter_invalid_items_;
  const ::LandmarkAlignTransform* landmark_align_transform_;
} _MiniBatchItemStage_default_instance_;
class gRPCReaderParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<gRPCReaderParams> _instance;
  const ::DataProviderParams* data_provider_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_params_;
} _gRPCReaderParams_default_instance_;
class FakeBoxesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FakeBoxes> _instance;
} _FakeBoxes_default_instance_;
static void InitDefaultsscc_info_AffineTransform_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AffineTransform_default_instance_;
    new (ptr) ::AffineTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AffineTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AffineTransform_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AffineTransform_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_AspectRatioTransform_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AspectRatioTransform_default_instance_;
    new (ptr) ::AspectRatioTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AspectRatioTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AspectRatioTransform_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AspectRatioTransform_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_AudioMFCCTransform_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AudioMFCCTransform_default_instance_;
    new (ptr) ::AudioMFCCTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AudioMFCCTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioMFCCTransform_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioMFCCTransform_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_ColorTransform_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ColorTransform_default_instance_;
    new (ptr) ::ColorTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ColorTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorTransform_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ColorTransform_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DataProviderParams_default_instance_;
    new (ptr) ::DataProviderParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_gRPCReaderParams_default_instance_;
    new (ptr) ::gRPCReaderParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DataProviderParams::InitAsDefaultInstance();
  ::gRPCReaderParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 22, 0, InitDefaultsscc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto}, {
      &scc_info_ProcessingParams_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_ImageCropTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_SavedOutputParams_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_MultiDataset_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_LabelSetter_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_LabelMapper_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_LabelSmoother_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_LabelDropper_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_MaxNumLabelDropper_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_LabelWeight_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_SSDRandomCropOperation_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_RelativeCropTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_AffineTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_ColorTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_FilterBbox_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_LogoDataParams_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_AspectRatioTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_FlipTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_JPEGRecompression_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_MiniBatchItemStage_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_FakeBoxes_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_FilterInvalidItems_proto_2futils_2fdata_5fprovider_2eproto.base,}};

static void InitDefaultsscc_info_DistortionTransform_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DistortionTransform_default_instance_;
    new (ptr) ::DistortionTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DistortionTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistortionTransform_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DistortionTransform_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_FakeBoxes_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FakeBoxes_default_instance_;
    new (ptr) ::FakeBoxes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FakeBoxes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FakeBoxes_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FakeBoxes_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_FilterBbox_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FilterBbox_default_instance_;
    new (ptr) ::FilterBbox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FilterBbox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterBbox_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FilterBbox_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_FilterInvalidItems_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FilterInvalidItems_default_instance_;
    new (ptr) ::FilterInvalidItems();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FilterInvalidItems::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterInvalidItems_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FilterInvalidItems_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_FlipTransform_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FlipTransform_default_instance_;
    new (ptr) ::FlipTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FlipTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlipTransform_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlipTransform_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_ImageCropTransform_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ImageCropTransform_default_instance_;
    new (ptr) ::ImageCropTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageCropTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageCropTransform_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageCropTransform_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_JPEGRecompression_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JPEGRecompression_default_instance_;
    new (ptr) ::JPEGRecompression();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JPEGRecompression::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JPEGRecompression_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JPEGRecompression_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_LabelDropper_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LabelDropper_default_instance_;
    new (ptr) ::LabelDropper();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabelDropper::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelDropper_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelDropper_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_LabelMapper_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LabelMapper_default_instance_;
    new (ptr) ::LabelMapper();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabelMapper::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelMapper_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LabelMapper_proto_2futils_2fdata_5fprovider_2eproto}, {
      &scc_info_LabelMapper_CatidMapEntry_DoNotUse_proto_2futils_2fdata_5fprovider_2eproto.base,}};

static void InitDefaultsscc_info_LabelMapper_CatidMapEntry_DoNotUse_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LabelMapper_CatidMapEntry_DoNotUse_default_instance_;
    new (ptr) ::LabelMapper_CatidMapEntry_DoNotUse();
  }
  ::LabelMapper_CatidMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelMapper_CatidMapEntry_DoNotUse_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelMapper_CatidMapEntry_DoNotUse_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_LabelSetter_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LabelSetter_default_instance_;
    new (ptr) ::LabelSetter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabelSetter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelSetter_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelSetter_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_LabelSmoother_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LabelSmoother_default_instance_;
    new (ptr) ::LabelSmoother();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabelSmoother::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelSmoother_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelSmoother_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_LabelWeight_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LabelWeight_default_instance_;
    new (ptr) ::LabelWeight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabelWeight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelWeight_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LabelWeight_proto_2futils_2fdata_5fprovider_2eproto}, {
      &scc_info_LabelWeight_CatidConstWeightsEntry_DoNotUse_proto_2futils_2fdata_5fprovider_2eproto.base,}};

static void InitDefaultsscc_info_LabelWeight_CatidConstWeightsEntry_DoNotUse_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LabelWeight_CatidConstWeightsEntry_DoNotUse_default_instance_;
    new (ptr) ::LabelWeight_CatidConstWeightsEntry_DoNotUse();
  }
  ::LabelWeight_CatidConstWeightsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelWeight_CatidConstWeightsEntry_DoNotUse_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelWeight_CatidConstWeightsEntry_DoNotUse_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_LabelsFromBboxes_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LabelsFromBboxes_default_instance_;
    new (ptr) ::LabelsFromBboxes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabelsFromBboxes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelsFromBboxes_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelsFromBboxes_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_LandmarkAlignTransform_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LandmarkAlignTransform_default_instance_;
    new (ptr) ::LandmarkAlignTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LandmarkAlignTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LandmarkAlignTransform_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LandmarkAlignTransform_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_LogoDataParams_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LogoDataParams_default_instance_;
    new (ptr) ::LogoDataParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogoDataParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogoDataParams_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogoDataParams_proto_2futils_2fdata_5fprovider_2eproto}, {
      &scc_info_MultiDataset_proto_2futils_2fdata_5fprovider_2eproto.base,}};

static void InitDefaultsscc_info_MaxNumLabelDropper_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MaxNumLabelDropper_default_instance_;
    new (ptr) ::MaxNumLabelDropper();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MaxNumLabelDropper::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaxNumLabelDropper_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MaxNumLabelDropper_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_MiniBatchItemStage_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MiniBatchItemStage_default_instance_;
    new (ptr) ::MiniBatchItemStage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MiniBatchItemStage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_MiniBatchItemStage_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 22, 0, InitDefaultsscc_info_MiniBatchItemStage_proto_2futils_2fdata_5fprovider_2eproto}, {
      &scc_info_ImageCropTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_LabelSmoother_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_LabelDropper_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_MaxNumLabelDropper_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_LabelWeight_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_SSDRandomCropOperation_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_RelativeCropTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_AspectRatioTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_AffineTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_FlipTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_JPEGRecompression_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_FilterBbox_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_ColorTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_ScaleTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_LabelsFromBboxes_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_DistortionTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_WhitespaceTokenizer_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_TokenIndexer_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_AudioMFCCTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_OCRCropTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_FilterInvalidItems_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_LandmarkAlignTransform_proto_2futils_2fdata_5fprovider_2eproto.base,}};

static void InitDefaultsscc_info_MultiDataset_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MultiDataset_default_instance_;
    new (ptr) ::MultiDataset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MultiDataset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiDataset_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MultiDataset_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_OCRCropTransform_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OCRCropTransform_default_instance_;
    new (ptr) ::OCRCropTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OCRCropTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OCRCropTransform_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OCRCropTransform_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_ProcessingParams_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProcessingParams_default_instance_;
    new (ptr) ::ProcessingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProcessingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessingParams_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessingParams_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_RelativeCropTransform_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RelativeCropTransform_default_instance_;
    new (ptr) ::RelativeCropTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RelativeCropTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelativeCropTransform_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RelativeCropTransform_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_SSDRandomCropOperation_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSDRandomCropOperation_default_instance_;
    new (ptr) ::SSDRandomCropOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSDRandomCropOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSDRandomCropOperation_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSDRandomCropOperation_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_SavedOutputParams_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SavedOutputParams_default_instance_;
    new (ptr) ::SavedOutputParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SavedOutputParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SavedOutputParams_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SavedOutputParams_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_ScaleTransform_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ScaleTransform_default_instance_;
    new (ptr) ::ScaleTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ScaleTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScaleTransform_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScaleTransform_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_TokenIndexer_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TokenIndexer_default_instance_;
    new (ptr) ::TokenIndexer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TokenIndexer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenIndexer_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TokenIndexer_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static void InitDefaultsscc_info_WhitespaceTokenizer_proto_2futils_2fdata_5fprovider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WhitespaceTokenizer_default_instance_;
    new (ptr) ::WhitespaceTokenizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WhitespaceTokenizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WhitespaceTokenizer_proto_2futils_2fdata_5fprovider_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WhitespaceTokenizer_proto_2futils_2fdata_5fprovider_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2futils_2fdata_5fprovider_2eproto[34];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2futils_2fdata_5fprovider_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2futils_2fdata_5fprovider_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2futils_2fdata_5fprovider_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, processing_params_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, image_crop_transform_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, saved_output_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, multi_dataset_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, label_setter_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, label_mapper_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, label_smoother_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, label_dropper_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, max_num_label_dropper_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, label_weight_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, ssd_random_crop_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, relative_crop_transform_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, affine_transform_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, color_transform_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, filter_bbox_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, logo_data_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, aspect_ratio_transform_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, flip_transform_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, jpeg_recompression_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, mbitem_stage_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, num_grpc_readers_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, grpc_reader_params_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, serving_mbitem_stage_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, fake_boxes_),
  PROTOBUF_FIELD_OFFSET(::DataProviderParams, filter_invalid_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcessingParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProcessingParams, readers_keep_empty_),
  PROTOBUF_FIELD_OFFSET(::ProcessingParams, reader_threads_),
  PROTOBUF_FIELD_OFFSET(::ProcessingParams, worker_threads_),
  PROTOBUF_FIELD_OFFSET(::ProcessingParams, minibatch_size_),
  PROTOBUF_FIELD_OFFSET(::ProcessingParams, continuous_),
  PROTOBUF_FIELD_OFFSET(::ProcessingParams, shuffle_),
  PROTOBUF_FIELD_OFFSET(::ProcessingParams, num_items_per_epoch_),
  PROTOBUF_FIELD_OFFSET(::ProcessingParams, required_output_fields_),
  PROTOBUF_FIELD_OFFSET(::ProcessingParams, queue_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ImageCropTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImageCropTransform, crop_type_),
  PROTOBUF_FIELD_OFFSET(::ImageCropTransform, test_crop_type_),
  PROTOBUF_FIELD_OFFSET(::ImageCropTransform, crop_size_),
  PROTOBUF_FIELD_OFFSET(::ImageCropTransform, downsample_size_),
  PROTOBUF_FIELD_OFFSET(::ImageCropTransform, crop_size_pixel_stride_),
  PROTOBUF_FIELD_OFFSET(::ImageCropTransform, skip_convert_rgb_),
  PROTOBUF_FIELD_OFFSET(::ImageCropTransform, skip_resize_),
  PROTOBUF_FIELD_OFFSET(::ImageCropTransform, skip_crop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SavedOutputParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SavedOutputParams, saved_output_load_databatch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MultiDataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MultiDataset, dataset_name_),
  PROTOBUF_FIELD_OFFSET(::MultiDataset, sample_rate_),
  PROTOBUF_FIELD_OFFSET(::MultiDataset, saved_output_eid_),
  PROTOBUF_FIELD_OFFSET(::MultiDataset, saved_output_layer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabelSetter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabelSetter, hardcoded_labels_),
  PROTOBUF_FIELD_OFFSET(::LabelMapper_CatidMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LabelMapper_CatidMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabelMapper_CatidMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::LabelMapper_CatidMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabelMapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabelMapper, dataset_name_),
  PROTOBUF_FIELD_OFFSET(::LabelMapper, type_),
  PROTOBUF_FIELD_OFFSET(::LabelMapper, not_in_output_aiid_),
  PROTOBUF_FIELD_OFFSET(::LabelMapper, aiid_),
  PROTOBUF_FIELD_OFFSET(::LabelMapper, src_dataset_),
  PROTOBUF_FIELD_OFFSET(::LabelMapper, dst_dataset_),
  PROTOBUF_FIELD_OFFSET(::LabelMapper, catid_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabelSmoother, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabelSmoother, mode_),
  PROTOBUF_FIELD_OFFSET(::LabelSmoother, constant_range_),
  PROTOBUF_FIELD_OFFSET(::LabelSmoother, linear_scale_),
  PROTOBUF_FIELD_OFFSET(::LabelSmoother, log_scale_),
  PROTOBUF_FIELD_OFFSET(::LabelSmoother, num_labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabelDropper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabelDropper, drop_labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OCRCropTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OCRCropTransform, height_),
  PROTOBUF_FIELD_OFFSET(::OCRCropTransform, width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MaxNumLabelDropper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MaxNumLabelDropper, max_num_labels_),
  PROTOBUF_FIELD_OFFSET(::MaxNumLabelDropper, min_num_labels_),
  PROTOBUF_FIELD_OFFSET(::LabelWeight_CatidConstWeightsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LabelWeight_CatidConstWeightsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabelWeight_CatidConstWeightsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::LabelWeight_CatidConstWeightsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabelWeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabelWeight, catid_frequencies_file_),
  PROTOBUF_FIELD_OFFSET(::LabelWeight, target_frequency_),
  PROTOBUF_FIELD_OFFSET(::LabelWeight, min_count_),
  PROTOBUF_FIELD_OFFSET(::LabelWeight, sqrt_),
  PROTOBUF_FIELD_OFFSET(::LabelWeight, catid_const_weights_),
  PROTOBUF_FIELD_OFFSET(::LabelWeight, default_weight_),
  PROTOBUF_FIELD_OFFSET(::LabelWeight, dataset_name_),
  PROTOBUF_FIELD_OFFSET(::LabelWeight, split_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabelsFromBboxes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabelsFromBboxes, set_background_label_zero_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSDRandomCropOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSDRandomCropOperation, min_object_covered_),
  PROTOBUF_FIELD_OFFSET(::SSDRandomCropOperation, min_aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::SSDRandomCropOperation, max_aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::SSDRandomCropOperation, min_area_),
  PROTOBUF_FIELD_OFFSET(::SSDRandomCropOperation, max_area_),
  PROTOBUF_FIELD_OFFSET(::SSDRandomCropOperation, overlap_thresh_),
  PROTOBUF_FIELD_OFFSET(::SSDRandomCropOperation, random_coef_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RelativeCropTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RelativeCropTransform, relative_scale_range_),
  PROTOBUF_FIELD_OFFSET(::RelativeCropTransform, relative_aspect_range_),
  PROTOBUF_FIELD_OFFSET(::RelativeCropTransform, horizontal_flip_),
  PROTOBUF_FIELD_OFFSET(::RelativeCropTransform, min_bbox_overlap_),
  PROTOBUF_FIELD_OFFSET(::RelativeCropTransform, attempts_),
  PROTOBUF_FIELD_OFFSET(::RelativeCropTransform, max_attempts_fallback_),
  PROTOBUF_FIELD_OFFSET(::RelativeCropTransform, images_with_no_bboxes_fallback_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AspectRatioTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AspectRatioTransform, relative_aspect_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AffineTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AffineTransform, skip_prob_),
  PROTOBUF_FIELD_OFFSET(::AffineTransform, rotate_min_),
  PROTOBUF_FIELD_OFFSET(::AffineTransform, rotate_max_),
  PROTOBUF_FIELD_OFFSET(::AffineTransform, crop_original_size_),
  PROTOBUF_FIELD_OFFSET(::AffineTransform, use_transparent_corners_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ScaleTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ScaleTransform, scale_based_on_),
  PROTOBUF_FIELD_OFFSET(::ScaleTransform, size_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DistortionTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DistortionTransform, skip_prob_),
  PROTOBUF_FIELD_OFFSET(::DistortionTransform, grid_width_),
  PROTOBUF_FIELD_OFFSET(::DistortionTransform, grid_height_),
  PROTOBUF_FIELD_OFFSET(::DistortionTransform, magnitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FlipTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FlipTransform, flip_prob_),
  PROTOBUF_FIELD_OFFSET(::FlipTransform, horizontal_),
  PROTOBUF_FIELD_OFFSET(::FlipTransform, vertical_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ColorTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ColorTransform, brightness_range_),
  PROTOBUF_FIELD_OFFSET(::ColorTransform, contrast_range_),
  PROTOBUF_FIELD_OFFSET(::ColorTransform, color_range_),
  PROTOBUF_FIELD_OFFSET(::ColorTransform, sharpness_range_),
  PROTOBUF_FIELD_OFFSET(::ColorTransform, invert_prob_),
  PROTOBUF_FIELD_OFFSET(::ColorTransform, skip_prob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LandmarkAlignTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LandmarkAlignTransform, transform_type_),
  PROTOBUF_FIELD_OFFSET(::LandmarkAlignTransform, output_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FilterBbox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FilterBbox, filter_bg_labels_),
  PROTOBUF_FIELD_OFFSET(::FilterBbox, clip_),
  PROTOBUF_FIELD_OFFSET(::FilterBbox, visible_area_threshold_),
  PROTOBUF_FIELD_OFFSET(::FilterBbox, no_bboxes_crop_sample_),
  PROTOBUF_FIELD_OFFSET(::FilterBbox, visible_absolute_area_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JPEGRecompression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JPEGRecompression, qmin_),
  PROTOBUF_FIELD_OFFSET(::JPEGRecompression, qmax_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, output_logos_dataset_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, pos_logos_dataset_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, neg_logos_dataset_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, pos_logos_pregenerated_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, neg_logos_pregenerated_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, background_dataset_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, pos_logos_ratio_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, neg_logos_ratio_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, output_size_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, logo_working_res_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, alpha_crop_threshold_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, background_crop_size_range_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, min_logo_size_of_image_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, max_logo_size_of_image_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, min_logo_size_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, max_blur_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, color_swap_prob_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, combination_modes_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, alpha_range_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, jpeg_recompress_range_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, rotate_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, rot90_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, horizontal_flips_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, grayscale_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, contrast_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, color_tint_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, use_neg_logo_label_index_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, nologo_label_ind_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, max_logo_out_of_image_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, remove_nologo_bboxes_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, full_image_crop_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, working_res_scale_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, pos_min_overlap_of_window_threshold_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, pos_max_overlap_of_window_threshold_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, neg_overlap_of_logo_threshold_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, pos_overlap_of_logo_threshold_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, overlap_max_logo_aspect_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, num_views_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, white_bg_prob_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, multi_dataset_),
  PROTOBUF_FIELD_OFFSET(::LogoDataParams, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WhitespaceTokenizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WhitespaceTokenizer, pad_token_),
  PROTOBUF_FIELD_OFFSET(::WhitespaceTokenizer, max_length_),
  PROTOBUF_FIELD_OFFSET(::WhitespaceTokenizer, no_strip_special_),
  PROTOBUF_FIELD_OFFSET(::WhitespaceTokenizer, preserve_case_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TokenIndexer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TokenIndexer, vocab_path_),
  PROTOBUF_FIELD_OFFSET(::TokenIndexer, num_oov_buckets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AudioMFCCTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AudioMFCCTransform, numcep_),
  PROTOBUF_FIELD_OFFSET(::AudioMFCCTransform, numcontext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FilterInvalidItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FilterInvalidItems, require_images_),
  PROTOBUF_FIELD_OFFSET(::FilterInvalidItems, require_bboxes_),
  PROTOBUF_FIELD_OFFSET(::FilterInvalidItems, require_labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MiniBatchItemStage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::MiniBatchItemStage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::MiniBatchItemStageDefaultTypeInternal, image_crop_transform_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, label_smoother_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, label_dropper_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, max_num_label_dropper_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, label_weight_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, ssd_random_crop_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, relative_crop_transform_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, aspect_ratio_transform_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, affine_transform_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, flip_transform_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, jpeg_recompression_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, filter_bbox_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, color_transform_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, scale_transform_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, labels_from_bboxes_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, distortion_transform_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, whitespace_tokenizer_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, token_indexer_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, audio_mfcc_transform_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, ocr_crop_transform_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, filter_invalid_items_),
  offsetof(::MiniBatchItemStageDefaultTypeInternal, landmark_align_transform_),
  PROTOBUF_FIELD_OFFSET(::MiniBatchItemStage, stage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gRPCReaderParams, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gRPCReaderParams, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gRPCReaderParams, generator_class_name_),
  offsetof(::gRPCReaderParamsDefaultTypeInternal, data_provider_params_),
  offsetof(::gRPCReaderParamsDefaultTypeInternal, serialized_params_),
  PROTOBUF_FIELD_OFFSET(::gRPCReaderParams, batch_size_),
  PROTOBUF_FIELD_OFFSET(::gRPCReaderParams, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FakeBoxes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FakeBoxes, relative_scale_range_),
  PROTOBUF_FIELD_OFFSET(::FakeBoxes, relative_aspect_range_),
  PROTOBUF_FIELD_OFFSET(::FakeBoxes, fill_color_),
  PROTOBUF_FIELD_OFFSET(::FakeBoxes, background_color_),
  PROTOBUF_FIELD_OFFSET(::FakeBoxes, imsize_),
  PROTOBUF_FIELD_OFFSET(::FakeBoxes, min_dim_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DataProviderParams)},
  { 30, -1, sizeof(::ProcessingParams)},
  { 44, -1, sizeof(::ImageCropTransform)},
  { 57, -1, sizeof(::SavedOutputParams)},
  { 63, -1, sizeof(::MultiDataset)},
  { 72, -1, sizeof(::LabelSetter)},
  { 78, 85, sizeof(::LabelMapper_CatidMapEntry_DoNotUse)},
  { 87, -1, sizeof(::LabelMapper)},
  { 99, -1, sizeof(::LabelSmoother)},
  { 109, -1, sizeof(::LabelDropper)},
  { 115, -1, sizeof(::OCRCropTransform)},
  { 122, -1, sizeof(::MaxNumLabelDropper)},
  { 129, 136, sizeof(::LabelWeight_CatidConstWeightsEntry_DoNotUse)},
  { 138, -1, sizeof(::LabelWeight)},
  { 151, -1, sizeof(::LabelsFromBboxes)},
  { 157, -1, sizeof(::SSDRandomCropOperation)},
  { 169, -1, sizeof(::RelativeCropTransform)},
  { 181, -1, sizeof(::AspectRatioTransform)},
  { 187, -1, sizeof(::AffineTransform)},
  { 197, -1, sizeof(::ScaleTransform)},
  { 204, -1, sizeof(::DistortionTransform)},
  { 213, -1, sizeof(::FlipTransform)},
  { 221, -1, sizeof(::ColorTransform)},
  { 232, -1, sizeof(::LandmarkAlignTransform)},
  { 239, -1, sizeof(::FilterBbox)},
  { 249, -1, sizeof(::JPEGRecompression)},
  { 256, -1, sizeof(::LogoDataParams)},
  { 302, -1, sizeof(::WhitespaceTokenizer)},
  { 311, -1, sizeof(::TokenIndexer)},
  { 318, -1, sizeof(::AudioMFCCTransform)},
  { 325, -1, sizeof(::FilterInvalidItems)},
  { 333, -1, sizeof(::MiniBatchItemStage)},
  { 361, -1, sizeof(::gRPCReaderParams)},
  { 371, -1, sizeof(::FakeBoxes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DataProviderParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProcessingParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ImageCropTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SavedOutputParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MultiDataset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LabelSetter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LabelMapper_CatidMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LabelMapper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LabelSmoother_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LabelDropper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OCRCropTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MaxNumLabelDropper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LabelWeight_CatidConstWeightsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LabelWeight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LabelsFromBboxes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDRandomCropOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RelativeCropTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AspectRatioTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AffineTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ScaleTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DistortionTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FlipTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ColorTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LandmarkAlignTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FilterBbox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JPEGRecompression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LogoDataParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WhitespaceTokenizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TokenIndexer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AudioMFCCTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FilterInvalidItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MiniBatchItemStage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_gRPCReaderParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FakeBoxes_default_instance_),
};

const char descriptor_table_protodef_proto_2futils_2fdata_5fprovider_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037proto/utils/data_provider.proto\"\217\t\n\022Da"
  "taProviderParams\022,\n\021processing_params\030\001 "
  "\001(\0132\021.ProcessingParams\0225\n\024image_crop_tra"
  "nsform\030\002 \001(\0132\023.ImageCropTransformB\002\030\001\022,\n"
  "\014saved_output\030\003 \001(\0132\022.SavedOutputParamsB"
  "\002\030\001\022(\n\rmulti_dataset\030\004 \003(\0132\r.MultiDatase"
  "tB\002\030\001\022&\n\014label_setter\030\005 \003(\0132\014.LabelSette"
  "rB\002\030\001\022&\n\014label_mapper\030\006 \003(\0132\014.LabelMappe"
  "rB\002\030\001\022*\n\016label_smoother\030\007 \001(\0132\016.LabelSmo"
  "otherB\002\030\001\022(\n\rlabel_dropper\030\010 \001(\0132\r.Label"
  "DropperB\002\030\001\0226\n\025max_num_label_dropper\030\t \001"
  "(\0132\023.MaxNumLabelDropperB\002\030\001\022&\n\014label_wei"
  "ght\030\n \001(\0132\014.LabelWeightB\002\030\001\0224\n\017ssd_rando"
  "m_crop\030\013 \001(\0132\027.SSDRandomCropOperationB\002\030"
  "\001\022;\n\027relative_crop_transform\030\014 \001(\0132\026.Rel"
  "ativeCropTransformB\002\030\001\022.\n\020affine_transfo"
  "rm\030\r \001(\0132\020.AffineTransformB\002\030\001\022,\n\017color_"
  "transform\030\016 \001(\0132\017.ColorTransformB\002\030\001\022$\n\013"
  "filter_bbox\030\017 \001(\0132\013.FilterBboxB\002\030\001\022\"\n\tlo"
  "go_data\030\020 \001(\0132\017.LogoDataParams\0229\n\026aspect"
  "_ratio_transform\030\021 \001(\0132\025.AspectRatioTran"
  "sformB\002\030\001\022*\n\016flip_transform\030\022 \001(\0132\016.Flip"
  "TransformB\002\030\001\0222\n\022jpeg_recompression\030\023 \001("
  "\0132\022.JPEGRecompressionB\002\030\001\022)\n\014mbitem_stag"
  "e\030\024 \003(\0132\023.MiniBatchItemStage\022\034\n\020num_grpc"
  "_readers\030\025 \001(\005B\002\030\001\0221\n\022grpc_reader_params"
  "\030\026 \001(\0132\021.gRPCReaderParamsB\002\030\001\0221\n\024serving"
  "_mbitem_stage\030\027 \003(\0132\023.MiniBatchItemStage"
  "\022\036\n\nfake_boxes\030\030 \001(\0132\n.FakeBoxes\0221\n\024filt"
  "er_invalid_items\030\031 \001(\0132\023.FilterInvalidIt"
  "ems\"\370\001\n\020ProcessingParams\022\036\n\022readers_keep"
  "_empty\030\001 \001(\010B\002\030\001\022\032\n\016reader_threads\030\002 \001(\005"
  "B\002\030\001\022\026\n\016worker_threads\030\003 \001(\005\022\026\n\016minibatc"
  "h_size\030\004 \001(\005\022\026\n\ncontinuous\030\005 \001(\010B\002\030\001\022\017\n\007"
  "shuffle\030\006 \001(\010\022\033\n\023num_items_per_epoch\030\007 \001"
  "(\003\022\036\n\026required_output_fields\030\010 \003(\t\022\022\n\nqu"
  "eue_size\030\t \001(\005\"\321\001\n\022ImageCropTransform\022\021\n"
  "\tcrop_type\030\001 \001(\t\022\032\n\016test_crop_type\030\002 \001(\t"
  "B\002\030\001\022\021\n\tcrop_size\030\003 \003(\005\022\027\n\017downsample_si"
  "ze\030\004 \003(\005\022\036\n\026crop_size_pixel_stride\030\005 \001(\005"
  "\022\030\n\020skip_convert_rgb\030\007 \001(\010\022\023\n\013skip_resiz"
  "e\030\010 \001(\010\022\021\n\tskip_crop\030\t \001(\010\"8\n\021SavedOutpu"
  "tParams\022#\n\033saved_output_load_databatch\030\001"
  " \001(\010\"o\n\014MultiDataset\022\024\n\014dataset_name\030\001 \001"
  "(\t\022\023\n\013sample_rate\030\002 \001(\002\022\030\n\020saved_output_"
  "eid\030\003 \001(\005\022\032\n\022saved_output_layer\030\004 \001(\t\"\'\n"
  "\013LabelSetter\022\030\n\020hardcoded_labels\030\001 \003(\003\"\351"
  "\001\n\013LabelMapper\022\030\n\014dataset_name\030\001 \001(\tB\002\030\001"
  "\022\014\n\004type\030\002 \001(\t\022\032\n\022not_in_output_aiid\030\003 \001"
  "(\t\022\014\n\004aiid\030\004 \001(\t\022\023\n\013src_dataset\030\005 \001(\t\022\023\n"
  "\013dst_dataset\030\006 \001(\t\022-\n\tcatid_map\030\007 \003(\0132\032."
  "LabelMapper.CatidMapEntry\032/\n\rCatidMapEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"r\n\rLa"
  "belSmoother\022\014\n\004mode\030\001 \001(\t\022\026\n\016constant_ra"
  "nge\030\002 \003(\002\022\024\n\014linear_scale\030\003 \003(\002\022\021\n\tlog_s"
  "cale\030\004 \003(\002\022\022\n\nnum_labels\030\005 \001(\003\"#\n\014LabelD"
  "ropper\022\023\n\013drop_labels\030\001 \003(\003\"1\n\020OCRCropTr"
  "ansform\022\016\n\006height\030\001 \001(\003\022\r\n\005width\030\002 \001(\003\"D"
  "\n\022MaxNumLabelDropper\022\026\n\016max_num_labels\030\001"
  " \001(\003\022\026\n\016min_num_labels\030\002 \001(\003\"\241\002\n\013LabelWe"
  "ight\022\036\n\026catid_frequencies_file\030\001 \001(\t\022\030\n\020"
  "target_frequency\030\002 \001(\002\022\021\n\tmin_count\030\003 \001("
  "\003\022\014\n\004sqrt\030\004 \001(\010\022@\n\023catid_const_weights\030\005"
  " \003(\0132#.LabelWeight.CatidConstWeightsEntr"
  "y\022\026\n\016default_weight\030\006 \001(\002\022\024\n\014dataset_nam"
  "e\030\007 \001(\t\022\r\n\005split\030\010 \001(\t\0328\n\026CatidConstWeig"
  "htsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001"
  "\"5\n\020LabelsFromBboxes\022!\n\031set_background_l"
  "abel_zero\030\001 \001(\010\"\271\001\n\026SSDRandomCropOperati"
  "on\022\032\n\022min_object_covered\030\001 \001(\002\022\030\n\020min_as"
  "pect_ratio\030\002 \001(\002\022\030\n\020max_aspect_ratio\030\003 \001"
  "(\002\022\020\n\010min_area\030\004 \001(\002\022\020\n\010max_area\030\005 \001(\002\022\026"
  "\n\016overlap_thresh\030\006 \001(\002\022\023\n\013random_coef\030\007 "
  "\001(\002\"\341\002\n\025RelativeCropTransform\022\034\n\024relativ"
  "e_scale_range\030\001 \003(\002\022\035\n\025relative_aspect_r"
  "ange\030\002 \003(\002\022\027\n\017horizontal_flip\030\003 \001(\010\022\030\n\020m"
  "in_bbox_overlap\030\004 \001(\002\022\020\n\010attempts\030\005 \001(\005\022"
  "B\n\025max_attempts_fallback\030\006 \001(\0162#.Relativ"
  "eCropTransform.FallbackMode\022K\n\036images_wi"
  "th_no_bboxes_fallback\030\007 \001(\0162#.RelativeCr"
  "opTransform.FallbackMode\"5\n\014FallbackMode"
  "\022\016\n\nORIG_IMAGE\020\000\022\010\n\004CROP\020\001\022\013\n\007DISCARD\020\002\""
  "5\n\024AspectRatioTransform\022\035\n\025relative_aspe"
  "ct_range\030\001 \003(\002\"\211\001\n\017AffineTransform\022\021\n\tsk"
  "ip_prob\030\001 \001(\002\022\022\n\nrotate_min\030\002 \001(\002\022\022\n\nrot"
  "ate_max\030\003 \001(\002\022\032\n\022crop_original_size\030\004 \001("
  "\010\022\037\n\027use_transparent_corners\030\005 \001(\010\"<\n\016Sc"
  "aleTransform\022\026\n\016scale_based_on\030\001 \001(\t\022\022\n\n"
  "size_range\030\002 \003(\002\"d\n\023DistortionTransform\022"
  "\021\n\tskip_prob\030\001 \001(\002\022\022\n\ngrid_width\030\002 \001(\005\022\023"
  "\n\013grid_height\030\003 \001(\005\022\021\n\tmagnitude\030\004 \001(\002\"H"
  "\n\rFlipTransform\022\021\n\tflip_prob\030\001 \001(\002\022\022\n\nho"
  "rizontal\030\002 \001(\010\022\020\n\010vertical\030\003 \001(\010\"\230\001\n\016Col"
  "orTransform\022\030\n\020brightness_range\030\001 \003(\002\022\026\n"
  "\016contrast_range\030\002 \003(\002\022\023\n\013color_range\030\003 \003"
  "(\002\022\027\n\017sharpness_range\030\004 \003(\002\022\023\n\013invert_pr"
  "ob\030\005 \001(\002\022\021\n\tskip_prob\030\006 \001(\002\"E\n\026LandmarkA"
  "lignTransform\022\026\n\016transform_type\030\001 \001(\t\022\023\n"
  "\013output_size\030\002 \001(\005\"\234\001\n\nFilterBbox\022\030\n\020fil"
  "ter_bg_labels\030\001 \001(\010\022\014\n\004clip\030\002 \001(\010\022\036\n\026vis"
  "ible_area_threshold\030\003 \001(\002\022\035\n\025no_bboxes_c"
  "rop_sample\030\004 \001(\002\022\'\n\037visible_absolute_are"
  "a_threshold\030\005 \001(\002\"/\n\021JPEGRecompression\022\014"
  "\n\004qmin\030\001 \001(\005\022\014\n\004qmax\030\002 \001(\005\"\372\010\n\016LogoDataP"
  "arams\022\034\n\024output_logos_dataset\030\001 \001(\t\022\031\n\021p"
  "os_logos_dataset\030\002 \001(\t\022\031\n\021neg_logos_data"
  "set\030\003 \001(\t\022\036\n\026pos_logos_pregenerated\030\004 \001("
  "\010\022\036\n\026neg_logos_pregenerated\030\005 \001(\010\022\032\n\022bac"
  "kground_dataset\030\006 \001(\t\022\027\n\017pos_logos_ratio"
  "\030\007 \001(\002\022\027\n\017neg_logos_ratio\030\010 \001(\002\022\023\n\013outpu"
  "t_size\030\t \001(\005\022\030\n\020logo_working_res\030\n \001(\005\022\034"
  "\n\024alpha_crop_threshold\030\013 \001(\002\022\"\n\032backgrou"
  "nd_crop_size_range\030\014 \003(\005\022\036\n\026min_logo_siz"
  "e_of_image\030\r \001(\002\022\036\n\026max_logo_size_of_ima"
  "ge\030\016 \001(\002\022\025\n\rmin_logo_size\030\017 \001(\005\022\020\n\010max_b"
  "lur\030\020 \001(\002\022\027\n\017color_swap_prob\030\021 \001(\002\022\031\n\021co"
  "mbination_modes\030\022 \003(\t\022\023\n\013alpha_range\030\023 \003"
  "(\002\022\035\n\025jpeg_recompress_range\030\024 \003(\005\022\016\n\006rot"
  "ate\030\025 \001(\002\022\r\n\005rot90\030\026 \001(\002\022\030\n\020horizontal_f"
  "lips\030\027 \001(\010\022\021\n\tgrayscale\030\030 \001(\010\022\020\n\010contras"
  "t\030\031 \003(\002\022\022\n\ncolor_tint\030\032 \003(\002\022 \n\030use_neg_l"
  "ogo_label_index\030\033 \001(\010\022\030\n\020nologo_label_in"
  "d\030\034 \001(\005\022\035\n\025max_logo_out_of_image\030\035 \001(\002\022\034"
  "\n\024remove_nologo_bboxes\030\036 \001(\010\022\027\n\017full_ima"
  "ge_crop\030\037 \001(\005\022\031\n\021working_res_scale\030  \001(\002"
  "\022+\n#pos_min_overlap_of_window_threshold\030"
  "! \001(\002\022+\n#pos_max_overlap_of_window_thres"
  "hold\030\" \001(\002\022%\n\035neg_overlap_of_logo_thresh"
  "old\030# \001(\002\022%\n\035pos_overlap_of_logo_thresho"
  "ld\030$ \001(\002\022\037\n\027overlap_max_logo_aspect\030% \001("
  "\002\022\021\n\tnum_views\030& \001(\005\022\025\n\rwhite_bg_prob\030\' "
  "\001(\002\022$\n\rmulti_dataset\030( \003(\0132\r.MultiDatase"
  "t\022\014\n\004mode\030) \001(\t\"m\n\023WhitespaceTokenizer\022\021"
  "\n\tpad_token\030\001 \001(\t\022\022\n\nmax_length\030\002 \001(\005\022\030\n"
  "\020no_strip_special\030\003 \001(\010\022\025\n\rpreserve_case"
  "\030\004 \001(\010\";\n\014TokenIndexer\022\022\n\nvocab_path\030\001 \001"
  "(\t\022\027\n\017num_oov_buckets\030\002 \001(\005\"8\n\022AudioMFCC"
  "Transform\022\016\n\006numcep\030\001 \001(\005\022\022\n\nnumcontext\030"
  "\002 \001(\005\"\\\n\022FilterInvalidItems\022\026\n\016require_i"
  "mages\030\001 \001(\010\022\026\n\016require_bboxes\030\002 \001(\010\022\026\n\016r"
  "equire_labels\030\003 \001(\010\"\313\010\n\022MiniBatchItemSta"
  "ge\0223\n\024image_crop_transform\030\001 \001(\0132\023.Image"
  "CropTransformH\000\022(\n\016label_smoother\030\002 \001(\0132"
  "\016.LabelSmootherH\000\022&\n\rlabel_dropper\030\003 \001(\013"
  "2\r.LabelDropperH\000\0224\n\025max_num_label_dropp"
  "er\030\004 \001(\0132\023.MaxNumLabelDropperH\000\022$\n\014label"
  "_weight\030\005 \001(\0132\014.LabelWeightH\000\0222\n\017ssd_ran"
  "dom_crop\030\006 \001(\0132\027.SSDRandomCropOperationH"
  "\000\0229\n\027relative_crop_transform\030\007 \001(\0132\026.Rel"
  "ativeCropTransformH\000\0227\n\026aspect_ratio_tra"
  "nsform\030\010 \001(\0132\025.AspectRatioTransformH\000\022,\n"
  "\020affine_transform\030\t \001(\0132\020.AffineTransfor"
  "mH\000\022(\n\016flip_transform\030\n \001(\0132\016.FlipTransf"
  "ormH\000\0220\n\022jpeg_recompression\030\013 \001(\0132\022.JPEG"
  "RecompressionH\000\022\"\n\013filter_bbox\030\014 \001(\0132\013.F"
  "ilterBboxH\000\022*\n\017color_transform\030\r \001(\0132\017.C"
  "olorTransformH\000\022*\n\017scale_transform\030\016 \001(\013"
  "2\017.ScaleTransformH\000\022/\n\022labels_from_bboxe"
  "s\030\017 \001(\0132\021.LabelsFromBboxesH\000\0224\n\024distorti"
  "on_transform\030\020 \001(\0132\024.DistortionTransform"
  "H\000\0224\n\024whitespace_tokenizer\030\021 \001(\0132\024.White"
  "spaceTokenizerH\000\022&\n\rtoken_indexer\030\022 \001(\0132"
  "\r.TokenIndexerH\000\0223\n\024audio_mfcc_transform"
  "\030\023 \001(\0132\023.AudioMFCCTransformH\000\022/\n\022ocr_cro"
  "p_transform\030\024 \001(\0132\021.OCRCropTransformH\000\0223"
  "\n\024filter_invalid_items\030\025 \001(\0132\023.FilterInv"
  "alidItemsH\000\022;\n\030landmark_align_transform\030"
  "\026 \001(\0132\027.LandmarkAlignTransformH\000B\007\n\005stag"
  "e\"\240\001\n\020gRPCReaderParams\022\034\n\024generator_clas"
  "s_name\030\001 \001(\t\0223\n\024data_provider_params\030\002 \001"
  "(\0132\023.DataProviderParamsH\000\022\033\n\021serialized_"
  "params\030\003 \001(\014H\000\022\022\n\nbatch_size\030\004 \001(\005B\010\n\006pa"
  "rams\"\227\001\n\tFakeBoxes\022\034\n\024relative_scale_ran"
  "ge\030\001 \003(\002\022\035\n\025relative_aspect_range\030\002 \003(\002\022"
  "\022\n\nfill_color\030\003 \001(\r\022\030\n\020background_color\030"
  "\004 \001(\r\022\016\n\006imsize\030\005 \003(\r\022\017\n\007min_dim\030\006 \001(\rB\016"
  "\n\005utilsZ\005utilsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2futils_2fdata_5fprovider_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2futils_2fdata_5fprovider_2eproto_sccs[33] = {
  &scc_info_AffineTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_AspectRatioTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_AudioMFCCTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_ColorTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_DistortionTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_FakeBoxes_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_FilterBbox_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_FilterInvalidItems_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_FlipTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_ImageCropTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_JPEGRecompression_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_LabelDropper_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_LabelMapper_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_LabelMapper_CatidMapEntry_DoNotUse_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_LabelSetter_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_LabelSmoother_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_LabelWeight_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_LabelWeight_CatidConstWeightsEntry_DoNotUse_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_LabelsFromBboxes_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_LandmarkAlignTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_LogoDataParams_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_MaxNumLabelDropper_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_MiniBatchItemStage_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_MultiDataset_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_OCRCropTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_ProcessingParams_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_RelativeCropTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_SSDRandomCropOperation_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_SavedOutputParams_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_ScaleTransform_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_TokenIndexer_proto_2futils_2fdata_5fprovider_2eproto.base,
  &scc_info_WhitespaceTokenizer_proto_2futils_2fdata_5fprovider_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2futils_2fdata_5fprovider_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fdata_5fprovider_2eproto = {
  false, false, descriptor_table_protodef_proto_2futils_2fdata_5fprovider_2eproto, "proto/utils/data_provider.proto", 7062,
  &descriptor_table_proto_2futils_2fdata_5fprovider_2eproto_once, descriptor_table_proto_2futils_2fdata_5fprovider_2eproto_sccs, descriptor_table_proto_2futils_2fdata_5fprovider_2eproto_deps, 33, 0,
  schemas, file_default_instances, TableStruct_proto_2futils_2fdata_5fprovider_2eproto::offsets,
  file_level_metadata_proto_2futils_2fdata_5fprovider_2eproto, 34, file_level_enum_descriptors_proto_2futils_2fdata_5fprovider_2eproto, file_level_service_descriptors_proto_2futils_2fdata_5fprovider_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2futils_2fdata_5fprovider_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2futils_2fdata_5fprovider_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelativeCropTransform_FallbackMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2futils_2fdata_5fprovider_2eproto);
  return file_level_enum_descriptors_proto_2futils_2fdata_5fprovider_2eproto[0];
}
bool RelativeCropTransform_FallbackMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RelativeCropTransform_FallbackMode RelativeCropTransform::ORIG_IMAGE;
constexpr RelativeCropTransform_FallbackMode RelativeCropTransform::CROP;
constexpr RelativeCropTransform_FallbackMode RelativeCropTransform::DISCARD;
constexpr RelativeCropTransform_FallbackMode RelativeCropTransform::FallbackMode_MIN;
constexpr RelativeCropTransform_FallbackMode RelativeCropTransform::FallbackMode_MAX;
constexpr int RelativeCropTransform::FallbackMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void DataProviderParams::InitAsDefaultInstance() {
  ::_DataProviderParams_default_instance_._instance.get_mutable()->processing_params_ = const_cast< ::ProcessingParams*>(
      ::ProcessingParams::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->image_crop_transform_ = const_cast< ::ImageCropTransform*>(
      ::ImageCropTransform::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->saved_output_ = const_cast< ::SavedOutputParams*>(
      ::SavedOutputParams::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->label_smoother_ = const_cast< ::LabelSmoother*>(
      ::LabelSmoother::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->label_dropper_ = const_cast< ::LabelDropper*>(
      ::LabelDropper::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->max_num_label_dropper_ = const_cast< ::MaxNumLabelDropper*>(
      ::MaxNumLabelDropper::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->label_weight_ = const_cast< ::LabelWeight*>(
      ::LabelWeight::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->ssd_random_crop_ = const_cast< ::SSDRandomCropOperation*>(
      ::SSDRandomCropOperation::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->relative_crop_transform_ = const_cast< ::RelativeCropTransform*>(
      ::RelativeCropTransform::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->affine_transform_ = const_cast< ::AffineTransform*>(
      ::AffineTransform::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->color_transform_ = const_cast< ::ColorTransform*>(
      ::ColorTransform::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->filter_bbox_ = const_cast< ::FilterBbox*>(
      ::FilterBbox::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->logo_data_ = const_cast< ::LogoDataParams*>(
      ::LogoDataParams::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->aspect_ratio_transform_ = const_cast< ::AspectRatioTransform*>(
      ::AspectRatioTransform::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->flip_transform_ = const_cast< ::FlipTransform*>(
      ::FlipTransform::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->jpeg_recompression_ = const_cast< ::JPEGRecompression*>(
      ::JPEGRecompression::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->grpc_reader_params_ = const_cast< ::gRPCReaderParams*>(
      ::gRPCReaderParams::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->fake_boxes_ = const_cast< ::FakeBoxes*>(
      ::FakeBoxes::internal_default_instance());
  ::_DataProviderParams_default_instance_._instance.get_mutable()->filter_invalid_items_ = const_cast< ::FilterInvalidItems*>(
      ::FilterInvalidItems::internal_default_instance());
}
class DataProviderParams::_Internal {
 public:
  static const ::ProcessingParams& processing_params(const DataProviderParams* msg);
  static const ::ImageCropTransform& image_crop_transform(const DataProviderParams* msg);
  static const ::SavedOutputParams& saved_output(const DataProviderParams* msg);
  static const ::LabelSmoother& label_smoother(const DataProviderParams* msg);
  static const ::LabelDropper& label_dropper(const DataProviderParams* msg);
  static const ::MaxNumLabelDropper& max_num_label_dropper(const DataProviderParams* msg);
  static const ::LabelWeight& label_weight(const DataProviderParams* msg);
  static const ::SSDRandomCropOperation& ssd_random_crop(const DataProviderParams* msg);
  static const ::RelativeCropTransform& relative_crop_transform(const DataProviderParams* msg);
  static const ::AffineTransform& affine_transform(const DataProviderParams* msg);
  static const ::ColorTransform& color_transform(const DataProviderParams* msg);
  static const ::FilterBbox& filter_bbox(const DataProviderParams* msg);
  static const ::LogoDataParams& logo_data(const DataProviderParams* msg);
  static const ::AspectRatioTransform& aspect_ratio_transform(const DataProviderParams* msg);
  static const ::FlipTransform& flip_transform(const DataProviderParams* msg);
  static const ::JPEGRecompression& jpeg_recompression(const DataProviderParams* msg);
  static const ::gRPCReaderParams& grpc_reader_params(const DataProviderParams* msg);
  static const ::FakeBoxes& fake_boxes(const DataProviderParams* msg);
  static const ::FilterInvalidItems& filter_invalid_items(const DataProviderParams* msg);
};

const ::ProcessingParams&
DataProviderParams::_Internal::processing_params(const DataProviderParams* msg) {
  return *msg->processing_params_;
}
const ::ImageCropTransform&
DataProviderParams::_Internal::image_crop_transform(const DataProviderParams* msg) {
  return *msg->image_crop_transform_;
}
const ::SavedOutputParams&
DataProviderParams::_Internal::saved_output(const DataProviderParams* msg) {
  return *msg->saved_output_;
}
const ::LabelSmoother&
DataProviderParams::_Internal::label_smoother(const DataProviderParams* msg) {
  return *msg->label_smoother_;
}
const ::LabelDropper&
DataProviderParams::_Internal::label_dropper(const DataProviderParams* msg) {
  return *msg->label_dropper_;
}
const ::MaxNumLabelDropper&
DataProviderParams::_Internal::max_num_label_dropper(const DataProviderParams* msg) {
  return *msg->max_num_label_dropper_;
}
const ::LabelWeight&
DataProviderParams::_Internal::label_weight(const DataProviderParams* msg) {
  return *msg->label_weight_;
}
const ::SSDRandomCropOperation&
DataProviderParams::_Internal::ssd_random_crop(const DataProviderParams* msg) {
  return *msg->ssd_random_crop_;
}
const ::RelativeCropTransform&
DataProviderParams::_Internal::relative_crop_transform(const DataProviderParams* msg) {
  return *msg->relative_crop_transform_;
}
const ::AffineTransform&
DataProviderParams::_Internal::affine_transform(const DataProviderParams* msg) {
  return *msg->affine_transform_;
}
const ::ColorTransform&
DataProviderParams::_Internal::color_transform(const DataProviderParams* msg) {
  return *msg->color_transform_;
}
const ::FilterBbox&
DataProviderParams::_Internal::filter_bbox(const DataProviderParams* msg) {
  return *msg->filter_bbox_;
}
const ::LogoDataParams&
DataProviderParams::_Internal::logo_data(const DataProviderParams* msg) {
  return *msg->logo_data_;
}
const ::AspectRatioTransform&
DataProviderParams::_Internal::aspect_ratio_transform(const DataProviderParams* msg) {
  return *msg->aspect_ratio_transform_;
}
const ::FlipTransform&
DataProviderParams::_Internal::flip_transform(const DataProviderParams* msg) {
  return *msg->flip_transform_;
}
const ::JPEGRecompression&
DataProviderParams::_Internal::jpeg_recompression(const DataProviderParams* msg) {
  return *msg->jpeg_recompression_;
}
const ::gRPCReaderParams&
DataProviderParams::_Internal::grpc_reader_params(const DataProviderParams* msg) {
  return *msg->grpc_reader_params_;
}
const ::FakeBoxes&
DataProviderParams::_Internal::fake_boxes(const DataProviderParams* msg) {
  return *msg->fake_boxes_;
}
const ::FilterInvalidItems&
DataProviderParams::_Internal::filter_invalid_items(const DataProviderParams* msg) {
  return *msg->filter_invalid_items_;
}
DataProviderParams::DataProviderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multi_dataset_(arena),
  label_setter_(arena),
  label_mapper_(arena),
  mbitem_stage_(arena),
  serving_mbitem_stage_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DataProviderParams)
}
DataProviderParams::DataProviderParams(const DataProviderParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      multi_dataset_(from.multi_dataset_),
      label_setter_(from.label_setter_),
      label_mapper_(from.label_mapper_),
      mbitem_stage_(from.mbitem_stage_),
      serving_mbitem_stage_(from.serving_mbitem_stage_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_processing_params()) {
    processing_params_ = new ::ProcessingParams(*from.processing_params_);
  } else {
    processing_params_ = nullptr;
  }
  if (from._internal_has_image_crop_transform()) {
    image_crop_transform_ = new ::ImageCropTransform(*from.image_crop_transform_);
  } else {
    image_crop_transform_ = nullptr;
  }
  if (from._internal_has_saved_output()) {
    saved_output_ = new ::SavedOutputParams(*from.saved_output_);
  } else {
    saved_output_ = nullptr;
  }
  if (from._internal_has_label_smoother()) {
    label_smoother_ = new ::LabelSmoother(*from.label_smoother_);
  } else {
    label_smoother_ = nullptr;
  }
  if (from._internal_has_label_dropper()) {
    label_dropper_ = new ::LabelDropper(*from.label_dropper_);
  } else {
    label_dropper_ = nullptr;
  }
  if (from._internal_has_max_num_label_dropper()) {
    max_num_label_dropper_ = new ::MaxNumLabelDropper(*from.max_num_label_dropper_);
  } else {
    max_num_label_dropper_ = nullptr;
  }
  if (from._internal_has_label_weight()) {
    label_weight_ = new ::LabelWeight(*from.label_weight_);
  } else {
    label_weight_ = nullptr;
  }
  if (from._internal_has_ssd_random_crop()) {
    ssd_random_crop_ = new ::SSDRandomCropOperation(*from.ssd_random_crop_);
  } else {
    ssd_random_crop_ = nullptr;
  }
  if (from._internal_has_relative_crop_transform()) {
    relative_crop_transform_ = new ::RelativeCropTransform(*from.relative_crop_transform_);
  } else {
    relative_crop_transform_ = nullptr;
  }
  if (from._internal_has_affine_transform()) {
    affine_transform_ = new ::AffineTransform(*from.affine_transform_);
  } else {
    affine_transform_ = nullptr;
  }
  if (from._internal_has_color_transform()) {
    color_transform_ = new ::ColorTransform(*from.color_transform_);
  } else {
    color_transform_ = nullptr;
  }
  if (from._internal_has_filter_bbox()) {
    filter_bbox_ = new ::FilterBbox(*from.filter_bbox_);
  } else {
    filter_bbox_ = nullptr;
  }
  if (from._internal_has_logo_data()) {
    logo_data_ = new ::LogoDataParams(*from.logo_data_);
  } else {
    logo_data_ = nullptr;
  }
  if (from._internal_has_aspect_ratio_transform()) {
    aspect_ratio_transform_ = new ::AspectRatioTransform(*from.aspect_ratio_transform_);
  } else {
    aspect_ratio_transform_ = nullptr;
  }
  if (from._internal_has_flip_transform()) {
    flip_transform_ = new ::FlipTransform(*from.flip_transform_);
  } else {
    flip_transform_ = nullptr;
  }
  if (from._internal_has_jpeg_recompression()) {
    jpeg_recompression_ = new ::JPEGRecompression(*from.jpeg_recompression_);
  } else {
    jpeg_recompression_ = nullptr;
  }
  if (from._internal_has_grpc_reader_params()) {
    grpc_reader_params_ = new ::gRPCReaderParams(*from.grpc_reader_params_);
  } else {
    grpc_reader_params_ = nullptr;
  }
  if (from._internal_has_fake_boxes()) {
    fake_boxes_ = new ::FakeBoxes(*from.fake_boxes_);
  } else {
    fake_boxes_ = nullptr;
  }
  if (from._internal_has_filter_invalid_items()) {
    filter_invalid_items_ = new ::FilterInvalidItems(*from.filter_invalid_items_);
  } else {
    filter_invalid_items_ = nullptr;
  }
  num_grpc_readers_ = from.num_grpc_readers_;
  // @@protoc_insertion_point(copy_constructor:DataProviderParams)
}

void DataProviderParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto.base);
  ::memset(&processing_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_grpc_readers_) -
      reinterpret_cast<char*>(&processing_params_)) + sizeof(num_grpc_readers_));
}

DataProviderParams::~DataProviderParams() {
  // @@protoc_insertion_point(destructor:DataProviderParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataProviderParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete processing_params_;
  if (this != internal_default_instance()) delete image_crop_transform_;
  if (this != internal_default_instance()) delete saved_output_;
  if (this != internal_default_instance()) delete label_smoother_;
  if (this != internal_default_instance()) delete label_dropper_;
  if (this != internal_default_instance()) delete max_num_label_dropper_;
  if (this != internal_default_instance()) delete label_weight_;
  if (this != internal_default_instance()) delete ssd_random_crop_;
  if (this != internal_default_instance()) delete relative_crop_transform_;
  if (this != internal_default_instance()) delete affine_transform_;
  if (this != internal_default_instance()) delete color_transform_;
  if (this != internal_default_instance()) delete filter_bbox_;
  if (this != internal_default_instance()) delete logo_data_;
  if (this != internal_default_instance()) delete aspect_ratio_transform_;
  if (this != internal_default_instance()) delete flip_transform_;
  if (this != internal_default_instance()) delete jpeg_recompression_;
  if (this != internal_default_instance()) delete grpc_reader_params_;
  if (this != internal_default_instance()) delete fake_boxes_;
  if (this != internal_default_instance()) delete filter_invalid_items_;
}

void DataProviderParams::ArenaDtor(void* object) {
  DataProviderParams* _this = reinterpret_cast< DataProviderParams* >(object);
  (void)_this;
}
void DataProviderParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataProviderParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataProviderParams& DataProviderParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void DataProviderParams::Clear() {
// @@protoc_insertion_point(message_clear_start:DataProviderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multi_dataset_.Clear();
  label_setter_.Clear();
  label_mapper_.Clear();
  mbitem_stage_.Clear();
  serving_mbitem_stage_.Clear();
  if (GetArena() == nullptr && processing_params_ != nullptr) {
    delete processing_params_;
  }
  processing_params_ = nullptr;
  if (GetArena() == nullptr && image_crop_transform_ != nullptr) {
    delete image_crop_transform_;
  }
  image_crop_transform_ = nullptr;
  if (GetArena() == nullptr && saved_output_ != nullptr) {
    delete saved_output_;
  }
  saved_output_ = nullptr;
  if (GetArena() == nullptr && label_smoother_ != nullptr) {
    delete label_smoother_;
  }
  label_smoother_ = nullptr;
  if (GetArena() == nullptr && label_dropper_ != nullptr) {
    delete label_dropper_;
  }
  label_dropper_ = nullptr;
  if (GetArena() == nullptr && max_num_label_dropper_ != nullptr) {
    delete max_num_label_dropper_;
  }
  max_num_label_dropper_ = nullptr;
  if (GetArena() == nullptr && label_weight_ != nullptr) {
    delete label_weight_;
  }
  label_weight_ = nullptr;
  if (GetArena() == nullptr && ssd_random_crop_ != nullptr) {
    delete ssd_random_crop_;
  }
  ssd_random_crop_ = nullptr;
  if (GetArena() == nullptr && relative_crop_transform_ != nullptr) {
    delete relative_crop_transform_;
  }
  relative_crop_transform_ = nullptr;
  if (GetArena() == nullptr && affine_transform_ != nullptr) {
    delete affine_transform_;
  }
  affine_transform_ = nullptr;
  if (GetArena() == nullptr && color_transform_ != nullptr) {
    delete color_transform_;
  }
  color_transform_ = nullptr;
  if (GetArena() == nullptr && filter_bbox_ != nullptr) {
    delete filter_bbox_;
  }
  filter_bbox_ = nullptr;
  if (GetArena() == nullptr && logo_data_ != nullptr) {
    delete logo_data_;
  }
  logo_data_ = nullptr;
  if (GetArena() == nullptr && aspect_ratio_transform_ != nullptr) {
    delete aspect_ratio_transform_;
  }
  aspect_ratio_transform_ = nullptr;
  if (GetArena() == nullptr && flip_transform_ != nullptr) {
    delete flip_transform_;
  }
  flip_transform_ = nullptr;
  if (GetArena() == nullptr && jpeg_recompression_ != nullptr) {
    delete jpeg_recompression_;
  }
  jpeg_recompression_ = nullptr;
  if (GetArena() == nullptr && grpc_reader_params_ != nullptr) {
    delete grpc_reader_params_;
  }
  grpc_reader_params_ = nullptr;
  if (GetArena() == nullptr && fake_boxes_ != nullptr) {
    delete fake_boxes_;
  }
  fake_boxes_ = nullptr;
  if (GetArena() == nullptr && filter_invalid_items_ != nullptr) {
    delete filter_invalid_items_;
  }
  filter_invalid_items_ = nullptr;
  num_grpc_readers_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataProviderParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ProcessingParams processing_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ImageCropTransform image_crop_transform = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_crop_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SavedOutputParams saved_output = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_saved_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MultiDataset multi_dataset = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_dataset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .LabelSetter label_setter = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_label_setter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .LabelMapper label_mapper = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_label_mapper(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .LabelSmoother label_smoother = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_smoother(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LabelDropper label_dropper = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_dropper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MaxNumLabelDropper max_num_label_dropper = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_num_label_dropper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LabelWeight label_weight = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_weight(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SSDRandomCropOperation ssd_random_crop = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssd_random_crop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RelativeCropTransform relative_crop_transform = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_crop_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AffineTransform affine_transform = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_affine_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ColorTransform color_transform = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FilterBbox filter_bbox = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_bbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LogoDataParams logo_data = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_logo_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AspectRatioTransform aspect_ratio_transform = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_aspect_ratio_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FlipTransform flip_transform = 18 [deprecated = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_flip_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JPEGRecompression jpeg_recompression = 19 [deprecated = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_jpeg_recompression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MiniBatchItemStage mbitem_stage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_mbitem_stage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 num_grpc_readers = 21 [deprecated = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          num_grpc_readers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gRPCReaderParams grpc_reader_params = 22 [deprecated = true];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_grpc_reader_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MiniBatchItemStage serving_mbitem_stage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_serving_mbitem_stage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // .FakeBoxes fake_boxes = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_fake_boxes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FilterInvalidItems filter_invalid_items = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_invalid_items(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataProviderParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataProviderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProcessingParams processing_params = 1;
  if (this->has_processing_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::processing_params(this), target, stream);
  }

  // .ImageCropTransform image_crop_transform = 2 [deprecated = true];
  if (this->has_image_crop_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::image_crop_transform(this), target, stream);
  }

  // .SavedOutputParams saved_output = 3 [deprecated = true];
  if (this->has_saved_output()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::saved_output(this), target, stream);
  }

  // repeated .MultiDataset multi_dataset = 4 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_dataset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_multi_dataset(i), target, stream);
  }

  // repeated .LabelSetter label_setter = 5 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_label_setter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_label_setter(i), target, stream);
  }

  // repeated .LabelMapper label_mapper = 6 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_label_mapper_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_label_mapper(i), target, stream);
  }

  // .LabelSmoother label_smoother = 7 [deprecated = true];
  if (this->has_label_smoother()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::label_smoother(this), target, stream);
  }

  // .LabelDropper label_dropper = 8 [deprecated = true];
  if (this->has_label_dropper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::label_dropper(this), target, stream);
  }

  // .MaxNumLabelDropper max_num_label_dropper = 9 [deprecated = true];
  if (this->has_max_num_label_dropper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::max_num_label_dropper(this), target, stream);
  }

  // .LabelWeight label_weight = 10 [deprecated = true];
  if (this->has_label_weight()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::label_weight(this), target, stream);
  }

  // .SSDRandomCropOperation ssd_random_crop = 11 [deprecated = true];
  if (this->has_ssd_random_crop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::ssd_random_crop(this), target, stream);
  }

  // .RelativeCropTransform relative_crop_transform = 12 [deprecated = true];
  if (this->has_relative_crop_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::relative_crop_transform(this), target, stream);
  }

  // .AffineTransform affine_transform = 13 [deprecated = true];
  if (this->has_affine_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::affine_transform(this), target, stream);
  }

  // .ColorTransform color_transform = 14 [deprecated = true];
  if (this->has_color_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::color_transform(this), target, stream);
  }

  // .FilterBbox filter_bbox = 15 [deprecated = true];
  if (this->has_filter_bbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::filter_bbox(this), target, stream);
  }

  // .LogoDataParams logo_data = 16;
  if (this->has_logo_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::logo_data(this), target, stream);
  }

  // .AspectRatioTransform aspect_ratio_transform = 17 [deprecated = true];
  if (this->has_aspect_ratio_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::aspect_ratio_transform(this), target, stream);
  }

  // .FlipTransform flip_transform = 18 [deprecated = true];
  if (this->has_flip_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::flip_transform(this), target, stream);
  }

  // .JPEGRecompression jpeg_recompression = 19 [deprecated = true];
  if (this->has_jpeg_recompression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::jpeg_recompression(this), target, stream);
  }

  // repeated .MiniBatchItemStage mbitem_stage = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mbitem_stage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_mbitem_stage(i), target, stream);
  }

  // int32 num_grpc_readers = 21 [deprecated = true];
  if (this->num_grpc_readers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_num_grpc_readers(), target);
  }

  // .gRPCReaderParams grpc_reader_params = 22 [deprecated = true];
  if (this->has_grpc_reader_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::grpc_reader_params(this), target, stream);
  }

  // repeated .MiniBatchItemStage serving_mbitem_stage = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_serving_mbitem_stage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_serving_mbitem_stage(i), target, stream);
  }

  // .FakeBoxes fake_boxes = 24;
  if (this->has_fake_boxes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::fake_boxes(this), target, stream);
  }

  // .FilterInvalidItems filter_invalid_items = 25;
  if (this->has_filter_invalid_items()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::filter_invalid_items(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataProviderParams)
  return target;
}

size_t DataProviderParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataProviderParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MultiDataset multi_dataset = 4 [deprecated = true];
  total_size += 1UL * this->_internal_multi_dataset_size();
  for (const auto& msg : this->multi_dataset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LabelSetter label_setter = 5 [deprecated = true];
  total_size += 1UL * this->_internal_label_setter_size();
  for (const auto& msg : this->label_setter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LabelMapper label_mapper = 6 [deprecated = true];
  total_size += 1UL * this->_internal_label_mapper_size();
  for (const auto& msg : this->label_mapper_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MiniBatchItemStage mbitem_stage = 20;
  total_size += 2UL * this->_internal_mbitem_stage_size();
  for (const auto& msg : this->mbitem_stage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MiniBatchItemStage serving_mbitem_stage = 23;
  total_size += 2UL * this->_internal_serving_mbitem_stage_size();
  for (const auto& msg : this->serving_mbitem_stage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ProcessingParams processing_params = 1;
  if (this->has_processing_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *processing_params_);
  }

  // .ImageCropTransform image_crop_transform = 2 [deprecated = true];
  if (this->has_image_crop_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_crop_transform_);
  }

  // .SavedOutputParams saved_output = 3 [deprecated = true];
  if (this->has_saved_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *saved_output_);
  }

  // .LabelSmoother label_smoother = 7 [deprecated = true];
  if (this->has_label_smoother()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_smoother_);
  }

  // .LabelDropper label_dropper = 8 [deprecated = true];
  if (this->has_label_dropper()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_dropper_);
  }

  // .MaxNumLabelDropper max_num_label_dropper = 9 [deprecated = true];
  if (this->has_max_num_label_dropper()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_num_label_dropper_);
  }

  // .LabelWeight label_weight = 10 [deprecated = true];
  if (this->has_label_weight()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_weight_);
  }

  // .SSDRandomCropOperation ssd_random_crop = 11 [deprecated = true];
  if (this->has_ssd_random_crop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ssd_random_crop_);
  }

  // .RelativeCropTransform relative_crop_transform = 12 [deprecated = true];
  if (this->has_relative_crop_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relative_crop_transform_);
  }

  // .AffineTransform affine_transform = 13 [deprecated = true];
  if (this->has_affine_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affine_transform_);
  }

  // .ColorTransform color_transform = 14 [deprecated = true];
  if (this->has_color_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_transform_);
  }

  // .FilterBbox filter_bbox = 15 [deprecated = true];
  if (this->has_filter_bbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_bbox_);
  }

  // .LogoDataParams logo_data = 16;
  if (this->has_logo_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logo_data_);
  }

  // .AspectRatioTransform aspect_ratio_transform = 17 [deprecated = true];
  if (this->has_aspect_ratio_transform()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aspect_ratio_transform_);
  }

  // .FlipTransform flip_transform = 18 [deprecated = true];
  if (this->has_flip_transform()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flip_transform_);
  }

  // .JPEGRecompression jpeg_recompression = 19 [deprecated = true];
  if (this->has_jpeg_recompression()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *jpeg_recompression_);
  }

  // .gRPCReaderParams grpc_reader_params = 22 [deprecated = true];
  if (this->has_grpc_reader_params()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grpc_reader_params_);
  }

  // .FakeBoxes fake_boxes = 24;
  if (this->has_fake_boxes()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fake_boxes_);
  }

  // .FilterInvalidItems filter_invalid_items = 25;
  if (this->has_filter_invalid_items()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_invalid_items_);
  }

  // int32 num_grpc_readers = 21 [deprecated = true];
  if (this->num_grpc_readers() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_grpc_readers());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataProviderParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataProviderParams)
  GOOGLE_DCHECK_NE(&from, this);
  const DataProviderParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataProviderParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataProviderParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataProviderParams)
    MergeFrom(*source);
  }
}

void DataProviderParams::MergeFrom(const DataProviderParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataProviderParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multi_dataset_.MergeFrom(from.multi_dataset_);
  label_setter_.MergeFrom(from.label_setter_);
  label_mapper_.MergeFrom(from.label_mapper_);
  mbitem_stage_.MergeFrom(from.mbitem_stage_);
  serving_mbitem_stage_.MergeFrom(from.serving_mbitem_stage_);
  if (from.has_processing_params()) {
    _internal_mutable_processing_params()->::ProcessingParams::MergeFrom(from._internal_processing_params());
  }
  if (from.has_image_crop_transform()) {
    _internal_mutable_image_crop_transform()->::ImageCropTransform::MergeFrom(from._internal_image_crop_transform());
  }
  if (from.has_saved_output()) {
    _internal_mutable_saved_output()->::SavedOutputParams::MergeFrom(from._internal_saved_output());
  }
  if (from.has_label_smoother()) {
    _internal_mutable_label_smoother()->::LabelSmoother::MergeFrom(from._internal_label_smoother());
  }
  if (from.has_label_dropper()) {
    _internal_mutable_label_dropper()->::LabelDropper::MergeFrom(from._internal_label_dropper());
  }
  if (from.has_max_num_label_dropper()) {
    _internal_mutable_max_num_label_dropper()->::MaxNumLabelDropper::MergeFrom(from._internal_max_num_label_dropper());
  }
  if (from.has_label_weight()) {
    _internal_mutable_label_weight()->::LabelWeight::MergeFrom(from._internal_label_weight());
  }
  if (from.has_ssd_random_crop()) {
    _internal_mutable_ssd_random_crop()->::SSDRandomCropOperation::MergeFrom(from._internal_ssd_random_crop());
  }
  if (from.has_relative_crop_transform()) {
    _internal_mutable_relative_crop_transform()->::RelativeCropTransform::MergeFrom(from._internal_relative_crop_transform());
  }
  if (from.has_affine_transform()) {
    _internal_mutable_affine_transform()->::AffineTransform::MergeFrom(from._internal_affine_transform());
  }
  if (from.has_color_transform()) {
    _internal_mutable_color_transform()->::ColorTransform::MergeFrom(from._internal_color_transform());
  }
  if (from.has_filter_bbox()) {
    _internal_mutable_filter_bbox()->::FilterBbox::MergeFrom(from._internal_filter_bbox());
  }
  if (from.has_logo_data()) {
    _internal_mutable_logo_data()->::LogoDataParams::MergeFrom(from._internal_logo_data());
  }
  if (from.has_aspect_ratio_transform()) {
    _internal_mutable_aspect_ratio_transform()->::AspectRatioTransform::MergeFrom(from._internal_aspect_ratio_transform());
  }
  if (from.has_flip_transform()) {
    _internal_mutable_flip_transform()->::FlipTransform::MergeFrom(from._internal_flip_transform());
  }
  if (from.has_jpeg_recompression()) {
    _internal_mutable_jpeg_recompression()->::JPEGRecompression::MergeFrom(from._internal_jpeg_recompression());
  }
  if (from.has_grpc_reader_params()) {
    _internal_mutable_grpc_reader_params()->::gRPCReaderParams::MergeFrom(from._internal_grpc_reader_params());
  }
  if (from.has_fake_boxes()) {
    _internal_mutable_fake_boxes()->::FakeBoxes::MergeFrom(from._internal_fake_boxes());
  }
  if (from.has_filter_invalid_items()) {
    _internal_mutable_filter_invalid_items()->::FilterInvalidItems::MergeFrom(from._internal_filter_invalid_items());
  }
  if (from.num_grpc_readers() != 0) {
    _internal_set_num_grpc_readers(from._internal_num_grpc_readers());
  }
}

void DataProviderParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataProviderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataProviderParams::CopyFrom(const DataProviderParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataProviderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataProviderParams::IsInitialized() const {
  return true;
}

void DataProviderParams::InternalSwap(DataProviderParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multi_dataset_.InternalSwap(&other->multi_dataset_);
  label_setter_.InternalSwap(&other->label_setter_);
  label_mapper_.InternalSwap(&other->label_mapper_);
  mbitem_stage_.InternalSwap(&other->mbitem_stage_);
  serving_mbitem_stage_.InternalSwap(&other->serving_mbitem_stage_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataProviderParams, num_grpc_readers_)
      + sizeof(DataProviderParams::num_grpc_readers_)
      - PROTOBUF_FIELD_OFFSET(DataProviderParams, processing_params_)>(
          reinterpret_cast<char*>(&processing_params_),
          reinterpret_cast<char*>(&other->processing_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataProviderParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessingParams::InitAsDefaultInstance() {
}
class ProcessingParams::_Internal {
 public:
};

ProcessingParams::ProcessingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  required_output_fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProcessingParams)
}
ProcessingParams::ProcessingParams(const ProcessingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      required_output_fields_(from.required_output_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reader_threads_, &from.reader_threads_,
    static_cast<size_t>(reinterpret_cast<char*>(&queue_size_) -
    reinterpret_cast<char*>(&reader_threads_)) + sizeof(queue_size_));
  // @@protoc_insertion_point(copy_constructor:ProcessingParams)
}

void ProcessingParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessingParams_proto_2futils_2fdata_5fprovider_2eproto.base);
  ::memset(&reader_threads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_size_) -
      reinterpret_cast<char*>(&reader_threads_)) + sizeof(queue_size_));
}

ProcessingParams::~ProcessingParams() {
  // @@protoc_insertion_point(destructor:ProcessingParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProcessingParams::ArenaDtor(void* object) {
  ProcessingParams* _this = reinterpret_cast< ProcessingParams* >(object);
  (void)_this;
}
void ProcessingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessingParams& ProcessingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessingParams_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void ProcessingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  required_output_fields_.Clear();
  ::memset(&reader_threads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_size_) -
      reinterpret_cast<char*>(&reader_threads_)) + sizeof(queue_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool readers_keep_empty = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          readers_keep_empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reader_threads = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reader_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 worker_threads = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          worker_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minibatch_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          minibatch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool continuous = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          continuous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shuffle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          shuffle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_items_per_epoch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          num_items_per_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string required_output_fields = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_required_output_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessingParams.required_output_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 queue_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcessingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool readers_keep_empty = 1 [deprecated = true];
  if (this->readers_keep_empty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_readers_keep_empty(), target);
  }

  // int32 reader_threads = 2 [deprecated = true];
  if (this->reader_threads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reader_threads(), target);
  }

  // int32 worker_threads = 3;
  if (this->worker_threads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_worker_threads(), target);
  }

  // int32 minibatch_size = 4;
  if (this->minibatch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_minibatch_size(), target);
  }

  // bool continuous = 5 [deprecated = true];
  if (this->continuous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_continuous(), target);
  }

  // bool shuffle = 6;
  if (this->shuffle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_shuffle(), target);
  }

  // int64 num_items_per_epoch = 7;
  if (this->num_items_per_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_num_items_per_epoch(), target);
  }

  // repeated string required_output_fields = 8;
  for (int i = 0, n = this->_internal_required_output_fields_size(); i < n; i++) {
    const auto& s = this->_internal_required_output_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessingParams.required_output_fields");
    target = stream->WriteString(8, s, target);
  }

  // int32 queue_size = 9;
  if (this->queue_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_queue_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcessingParams)
  return target;
}

size_t ProcessingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string required_output_fields = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(required_output_fields_.size());
  for (int i = 0, n = required_output_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      required_output_fields_.Get(i));
  }

  // int32 reader_threads = 2 [deprecated = true];
  if (this->reader_threads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reader_threads());
  }

  // int32 worker_threads = 3;
  if (this->worker_threads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_worker_threads());
  }

  // int32 minibatch_size = 4;
  if (this->minibatch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minibatch_size());
  }

  // bool readers_keep_empty = 1 [deprecated = true];
  if (this->readers_keep_empty() != 0) {
    total_size += 1 + 1;
  }

  // bool continuous = 5 [deprecated = true];
  if (this->continuous() != 0) {
    total_size += 1 + 1;
  }

  // bool shuffle = 6;
  if (this->shuffle() != 0) {
    total_size += 1 + 1;
  }

  // int64 num_items_per_epoch = 7;
  if (this->num_items_per_epoch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_items_per_epoch());
  }

  // int32 queue_size = 9;
  if (this->queue_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_queue_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessingParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProcessingParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessingParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessingParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProcessingParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProcessingParams)
    MergeFrom(*source);
  }
}

void ProcessingParams::MergeFrom(const ProcessingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcessingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  required_output_fields_.MergeFrom(from.required_output_fields_);
  if (from.reader_threads() != 0) {
    _internal_set_reader_threads(from._internal_reader_threads());
  }
  if (from.worker_threads() != 0) {
    _internal_set_worker_threads(from._internal_worker_threads());
  }
  if (from.minibatch_size() != 0) {
    _internal_set_minibatch_size(from._internal_minibatch_size());
  }
  if (from.readers_keep_empty() != 0) {
    _internal_set_readers_keep_empty(from._internal_readers_keep_empty());
  }
  if (from.continuous() != 0) {
    _internal_set_continuous(from._internal_continuous());
  }
  if (from.shuffle() != 0) {
    _internal_set_shuffle(from._internal_shuffle());
  }
  if (from.num_items_per_epoch() != 0) {
    _internal_set_num_items_per_epoch(from._internal_num_items_per_epoch());
  }
  if (from.queue_size() != 0) {
    _internal_set_queue_size(from._internal_queue_size());
  }
}

void ProcessingParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProcessingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessingParams::CopyFrom(const ProcessingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessingParams::IsInitialized() const {
  return true;
}

void ProcessingParams::InternalSwap(ProcessingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  required_output_fields_.InternalSwap(&other->required_output_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessingParams, queue_size_)
      + sizeof(ProcessingParams::queue_size_)
      - PROTOBUF_FIELD_OFFSET(ProcessingParams, reader_threads_)>(
          reinterpret_cast<char*>(&reader_threads_),
          reinterpret_cast<char*>(&other->reader_threads_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessingParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageCropTransform::InitAsDefaultInstance() {
}
class ImageCropTransform::_Internal {
 public:
};

ImageCropTransform::ImageCropTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  crop_size_(arena),
  downsample_size_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ImageCropTransform)
}
ImageCropTransform::ImageCropTransform(const ImageCropTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      crop_size_(from.crop_size_),
      downsample_size_(from.downsample_size_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  crop_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_crop_type().empty()) {
    crop_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_crop_type(),
      GetArena());
  }
  test_crop_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_test_crop_type().empty()) {
    test_crop_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test_crop_type(),
      GetArena());
  }
  ::memcpy(&crop_size_pixel_stride_, &from.crop_size_pixel_stride_,
    static_cast<size_t>(reinterpret_cast<char*>(&skip_crop_) -
    reinterpret_cast<char*>(&crop_size_pixel_stride_)) + sizeof(skip_crop_));
  // @@protoc_insertion_point(copy_constructor:ImageCropTransform)
}

void ImageCropTransform::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageCropTransform_proto_2futils_2fdata_5fprovider_2eproto.base);
  crop_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_crop_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&crop_size_pixel_stride_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_crop_) -
      reinterpret_cast<char*>(&crop_size_pixel_stride_)) + sizeof(skip_crop_));
}

ImageCropTransform::~ImageCropTransform() {
  // @@protoc_insertion_point(destructor:ImageCropTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageCropTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  crop_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_crop_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageCropTransform::ArenaDtor(void* object) {
  ImageCropTransform* _this = reinterpret_cast< ImageCropTransform* >(object);
  (void)_this;
}
void ImageCropTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageCropTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageCropTransform& ImageCropTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageCropTransform_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void ImageCropTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageCropTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crop_size_.Clear();
  downsample_size_.Clear();
  crop_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  test_crop_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&crop_size_pixel_stride_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_crop_) -
      reinterpret_cast<char*>(&crop_size_pixel_stride_)) + sizeof(skip_crop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageCropTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string crop_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_crop_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ImageCropTransform.crop_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string test_crop_type = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_test_crop_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ImageCropTransform.test_crop_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 crop_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_crop_size(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_crop_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 downsample_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_downsample_size(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_downsample_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 crop_size_pixel_stride = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          crop_size_pixel_stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skip_convert_rgb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          skip_convert_rgb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skip_resize = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          skip_resize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skip_crop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          skip_crop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageCropTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageCropTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string crop_type = 1;
  if (this->crop_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_crop_type().data(), static_cast<int>(this->_internal_crop_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ImageCropTransform.crop_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_crop_type(), target);
  }

  // string test_crop_type = 2 [deprecated = true];
  if (this->test_crop_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_test_crop_type().data(), static_cast<int>(this->_internal_test_crop_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ImageCropTransform.test_crop_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_test_crop_type(), target);
  }

  // repeated int32 crop_size = 3;
  {
    int byte_size = _crop_size_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_crop_size(), byte_size, target);
    }
  }

  // repeated int32 downsample_size = 4;
  {
    int byte_size = _downsample_size_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_downsample_size(), byte_size, target);
    }
  }

  // int32 crop_size_pixel_stride = 5;
  if (this->crop_size_pixel_stride() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_crop_size_pixel_stride(), target);
  }

  // bool skip_convert_rgb = 7;
  if (this->skip_convert_rgb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_skip_convert_rgb(), target);
  }

  // bool skip_resize = 8;
  if (this->skip_resize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_skip_resize(), target);
  }

  // bool skip_crop = 9;
  if (this->skip_crop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_skip_crop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageCropTransform)
  return target;
}

size_t ImageCropTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageCropTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 crop_size = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->crop_size_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _crop_size_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 downsample_size = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->downsample_size_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _downsample_size_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string crop_type = 1;
  if (this->crop_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_crop_type());
  }

  // string test_crop_type = 2 [deprecated = true];
  if (this->test_crop_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test_crop_type());
  }

  // int32 crop_size_pixel_stride = 5;
  if (this->crop_size_pixel_stride() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_crop_size_pixel_stride());
  }

  // bool skip_convert_rgb = 7;
  if (this->skip_convert_rgb() != 0) {
    total_size += 1 + 1;
  }

  // bool skip_resize = 8;
  if (this->skip_resize() != 0) {
    total_size += 1 + 1;
  }

  // bool skip_crop = 9;
  if (this->skip_crop() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageCropTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageCropTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageCropTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageCropTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageCropTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageCropTransform)
    MergeFrom(*source);
  }
}

void ImageCropTransform::MergeFrom(const ImageCropTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageCropTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crop_size_.MergeFrom(from.crop_size_);
  downsample_size_.MergeFrom(from.downsample_size_);
  if (from.crop_type().size() > 0) {
    _internal_set_crop_type(from._internal_crop_type());
  }
  if (from.test_crop_type().size() > 0) {
    _internal_set_test_crop_type(from._internal_test_crop_type());
  }
  if (from.crop_size_pixel_stride() != 0) {
    _internal_set_crop_size_pixel_stride(from._internal_crop_size_pixel_stride());
  }
  if (from.skip_convert_rgb() != 0) {
    _internal_set_skip_convert_rgb(from._internal_skip_convert_rgb());
  }
  if (from.skip_resize() != 0) {
    _internal_set_skip_resize(from._internal_skip_resize());
  }
  if (from.skip_crop() != 0) {
    _internal_set_skip_crop(from._internal_skip_crop());
  }
}

void ImageCropTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageCropTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageCropTransform::CopyFrom(const ImageCropTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageCropTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageCropTransform::IsInitialized() const {
  return true;
}

void ImageCropTransform::InternalSwap(ImageCropTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  crop_size_.InternalSwap(&other->crop_size_);
  downsample_size_.InternalSwap(&other->downsample_size_);
  crop_type_.Swap(&other->crop_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  test_crop_type_.Swap(&other->test_crop_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageCropTransform, skip_crop_)
      + sizeof(ImageCropTransform::skip_crop_)
      - PROTOBUF_FIELD_OFFSET(ImageCropTransform, crop_size_pixel_stride_)>(
          reinterpret_cast<char*>(&crop_size_pixel_stride_),
          reinterpret_cast<char*>(&other->crop_size_pixel_stride_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageCropTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SavedOutputParams::InitAsDefaultInstance() {
}
class SavedOutputParams::_Internal {
 public:
};

SavedOutputParams::SavedOutputParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SavedOutputParams)
}
SavedOutputParams::SavedOutputParams(const SavedOutputParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  saved_output_load_databatch_ = from.saved_output_load_databatch_;
  // @@protoc_insertion_point(copy_constructor:SavedOutputParams)
}

void SavedOutputParams::SharedCtor() {
  saved_output_load_databatch_ = false;
}

SavedOutputParams::~SavedOutputParams() {
  // @@protoc_insertion_point(destructor:SavedOutputParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SavedOutputParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SavedOutputParams::ArenaDtor(void* object) {
  SavedOutputParams* _this = reinterpret_cast< SavedOutputParams* >(object);
  (void)_this;
}
void SavedOutputParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavedOutputParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SavedOutputParams& SavedOutputParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SavedOutputParams_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void SavedOutputParams::Clear() {
// @@protoc_insertion_point(message_clear_start:SavedOutputParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  saved_output_load_databatch_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavedOutputParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool saved_output_load_databatch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          saved_output_load_databatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SavedOutputParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SavedOutputParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool saved_output_load_databatch = 1;
  if (this->saved_output_load_databatch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_saved_output_load_databatch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SavedOutputParams)
  return target;
}

size_t SavedOutputParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SavedOutputParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool saved_output_load_databatch = 1;
  if (this->saved_output_load_databatch() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavedOutputParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SavedOutputParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SavedOutputParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SavedOutputParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SavedOutputParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SavedOutputParams)
    MergeFrom(*source);
  }
}

void SavedOutputParams::MergeFrom(const SavedOutputParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SavedOutputParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.saved_output_load_databatch() != 0) {
    _internal_set_saved_output_load_databatch(from._internal_saved_output_load_databatch());
  }
}

void SavedOutputParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SavedOutputParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedOutputParams::CopyFrom(const SavedOutputParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SavedOutputParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedOutputParams::IsInitialized() const {
  return true;
}

void SavedOutputParams::InternalSwap(SavedOutputParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(saved_output_load_databatch_, other->saved_output_load_databatch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedOutputParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiDataset::InitAsDefaultInstance() {
}
class MultiDataset::_Internal {
 public:
};

MultiDataset::MultiDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MultiDataset)
}
MultiDataset::MultiDataset(const MultiDataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dataset_name().empty()) {
    dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dataset_name(),
      GetArena());
  }
  saved_output_layer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_saved_output_layer().empty()) {
    saved_output_layer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_saved_output_layer(),
      GetArena());
  }
  ::memcpy(&sample_rate_, &from.sample_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&saved_output_eid_) -
    reinterpret_cast<char*>(&sample_rate_)) + sizeof(saved_output_eid_));
  // @@protoc_insertion_point(copy_constructor:MultiDataset)
}

void MultiDataset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiDataset_proto_2futils_2fdata_5fprovider_2eproto.base);
  dataset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  saved_output_layer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sample_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&saved_output_eid_) -
      reinterpret_cast<char*>(&sample_rate_)) + sizeof(saved_output_eid_));
}

MultiDataset::~MultiDataset() {
  // @@protoc_insertion_point(destructor:MultiDataset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiDataset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dataset_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  saved_output_layer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MultiDataset::ArenaDtor(void* object) {
  MultiDataset* _this = reinterpret_cast< MultiDataset* >(object);
  (void)_this;
}
void MultiDataset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiDataset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiDataset& MultiDataset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiDataset_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void MultiDataset::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiDataset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  saved_output_layer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&sample_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&saved_output_eid_) -
      reinterpret_cast<char*>(&sample_rate_)) + sizeof(saved_output_eid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiDataset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dataset_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dataset_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MultiDataset.dataset_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float sample_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 saved_output_eid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          saved_output_eid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string saved_output_layer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_saved_output_layer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MultiDataset.saved_output_layer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiDataset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MultiDataset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataset_name = 1;
  if (this->dataset_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_name().data(), static_cast<int>(this->_internal_dataset_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MultiDataset.dataset_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dataset_name(), target);
  }

  // float sample_rate = 2;
  if (!(this->sample_rate() <= 0 && this->sample_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_sample_rate(), target);
  }

  // int32 saved_output_eid = 3;
  if (this->saved_output_eid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_saved_output_eid(), target);
  }

  // string saved_output_layer = 4;
  if (this->saved_output_layer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_saved_output_layer().data(), static_cast<int>(this->_internal_saved_output_layer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MultiDataset.saved_output_layer");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_saved_output_layer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MultiDataset)
  return target;
}

size_t MultiDataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiDataset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_name = 1;
  if (this->dataset_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_name());
  }

  // string saved_output_layer = 4;
  if (this->saved_output_layer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_saved_output_layer());
  }

  // float sample_rate = 2;
  if (!(this->sample_rate() <= 0 && this->sample_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 saved_output_eid = 3;
  if (this->saved_output_eid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_saved_output_eid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiDataset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiDataset)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiDataset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiDataset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiDataset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiDataset)
    MergeFrom(*source);
  }
}

void MultiDataset::MergeFrom(const MultiDataset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiDataset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dataset_name().size() > 0) {
    _internal_set_dataset_name(from._internal_dataset_name());
  }
  if (from.saved_output_layer().size() > 0) {
    _internal_set_saved_output_layer(from._internal_saved_output_layer());
  }
  if (!(from.sample_rate() <= 0 && from.sample_rate() >= 0)) {
    _internal_set_sample_rate(from._internal_sample_rate());
  }
  if (from.saved_output_eid() != 0) {
    _internal_set_saved_output_eid(from._internal_saved_output_eid());
  }
}

void MultiDataset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiDataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiDataset::CopyFrom(const MultiDataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiDataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiDataset::IsInitialized() const {
  return true;
}

void MultiDataset::InternalSwap(MultiDataset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dataset_name_.Swap(&other->dataset_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  saved_output_layer_.Swap(&other->saved_output_layer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiDataset, saved_output_eid_)
      + sizeof(MultiDataset::saved_output_eid_)
      - PROTOBUF_FIELD_OFFSET(MultiDataset, sample_rate_)>(
          reinterpret_cast<char*>(&sample_rate_),
          reinterpret_cast<char*>(&other->sample_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiDataset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelSetter::InitAsDefaultInstance() {
}
class LabelSetter::_Internal {
 public:
};

LabelSetter::LabelSetter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hardcoded_labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabelSetter)
}
LabelSetter::LabelSetter(const LabelSetter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hardcoded_labels_(from.hardcoded_labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabelSetter)
}

void LabelSetter::SharedCtor() {
}

LabelSetter::~LabelSetter() {
  // @@protoc_insertion_point(destructor:LabelSetter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelSetter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LabelSetter::ArenaDtor(void* object) {
  LabelSetter* _this = reinterpret_cast< LabelSetter* >(object);
  (void)_this;
}
void LabelSetter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelSetter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelSetter& LabelSetter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelSetter_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void LabelSetter::Clear() {
// @@protoc_insertion_point(message_clear_start:LabelSetter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hardcoded_labels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelSetter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 hardcoded_labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_hardcoded_labels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_hardcoded_labels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelSetter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabelSetter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 hardcoded_labels = 1;
  {
    int byte_size = _hardcoded_labels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_hardcoded_labels(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabelSetter)
  return target;
}

size_t LabelSetter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabelSetter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 hardcoded_labels = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->hardcoded_labels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hardcoded_labels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelSetter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabelSetter)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelSetter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelSetter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabelSetter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabelSetter)
    MergeFrom(*source);
  }
}

void LabelSetter::MergeFrom(const LabelSetter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabelSetter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hardcoded_labels_.MergeFrom(from.hardcoded_labels_);
}

void LabelSetter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabelSetter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelSetter::CopyFrom(const LabelSetter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabelSetter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSetter::IsInitialized() const {
  return true;
}

void LabelSetter::InternalSwap(LabelSetter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hardcoded_labels_.InternalSwap(&other->hardcoded_labels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelSetter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

LabelMapper_CatidMapEntry_DoNotUse::LabelMapper_CatidMapEntry_DoNotUse() {}
LabelMapper_CatidMapEntry_DoNotUse::LabelMapper_CatidMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LabelMapper_CatidMapEntry_DoNotUse::MergeFrom(const LabelMapper_CatidMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LabelMapper_CatidMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void LabelMapper_CatidMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void LabelMapper::InitAsDefaultInstance() {
}
class LabelMapper::_Internal {
 public:
};

LabelMapper::LabelMapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  catid_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabelMapper)
}
LabelMapper::LabelMapper(const LabelMapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  catid_map_.MergeFrom(from.catid_map_);
  dataset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dataset_name().empty()) {
    dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dataset_name(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  not_in_output_aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_not_in_output_aiid().empty()) {
    not_in_output_aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_not_in_output_aiid(),
      GetArena());
  }
  aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aiid().empty()) {
    aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_aiid(),
      GetArena());
  }
  src_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_src_dataset().empty()) {
    src_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_src_dataset(),
      GetArena());
  }
  dst_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dst_dataset().empty()) {
    dst_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dst_dataset(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:LabelMapper)
}

void LabelMapper::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelMapper_proto_2futils_2fdata_5fprovider_2eproto.base);
  dataset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_in_output_aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LabelMapper::~LabelMapper() {
  // @@protoc_insertion_point(destructor:LabelMapper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelMapper::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dataset_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_in_output_aiid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aiid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_dataset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_dataset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabelMapper::ArenaDtor(void* object) {
  LabelMapper* _this = reinterpret_cast< LabelMapper* >(object);
  (void)_this;
}
void LabelMapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelMapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelMapper& LabelMapper::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelMapper_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void LabelMapper::Clear() {
// @@protoc_insertion_point(message_clear_start:LabelMapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  catid_map_.Clear();
  dataset_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  not_in_output_aiid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aiid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  src_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelMapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dataset_name = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dataset_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabelMapper.dataset_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabelMapper.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string not_in_output_aiid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_not_in_output_aiid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabelMapper.not_in_output_aiid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string aiid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_aiid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabelMapper.aiid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string src_dataset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_src_dataset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabelMapper.src_dataset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dst_dataset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_dst_dataset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabelMapper.dst_dataset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> catid_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&catid_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelMapper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabelMapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataset_name = 1 [deprecated = true];
  if (this->dataset_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_name().data(), static_cast<int>(this->_internal_dataset_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabelMapper.dataset_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dataset_name(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabelMapper.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string not_in_output_aiid = 3;
  if (this->not_in_output_aiid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_not_in_output_aiid().data(), static_cast<int>(this->_internal_not_in_output_aiid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabelMapper.not_in_output_aiid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_not_in_output_aiid(), target);
  }

  // string aiid = 4;
  if (this->aiid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aiid().data(), static_cast<int>(this->_internal_aiid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabelMapper.aiid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_aiid(), target);
  }

  // string src_dataset = 5;
  if (this->src_dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_dataset().data(), static_cast<int>(this->_internal_src_dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabelMapper.src_dataset");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_src_dataset(), target);
  }

  // string dst_dataset = 6;
  if (this->dst_dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dst_dataset().data(), static_cast<int>(this->_internal_dst_dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabelMapper.dst_dataset");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_dst_dataset(), target);
  }

  // map<string, string> catid_map = 7;
  if (!this->_internal_catid_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "LabelMapper.CatidMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "LabelMapper.CatidMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_catid_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_catid_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_catid_map().begin();
          it != this->_internal_catid_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LabelMapper_CatidMapEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_catid_map().begin();
          it != this->_internal_catid_map().end(); ++it) {
        target = LabelMapper_CatidMapEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabelMapper)
  return target;
}

size_t LabelMapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabelMapper)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> catid_map = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_catid_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_catid_map().begin();
      it != this->_internal_catid_map().end(); ++it) {
    total_size += LabelMapper_CatidMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string dataset_name = 1 [deprecated = true];
  if (this->dataset_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_name());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string not_in_output_aiid = 3;
  if (this->not_in_output_aiid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_not_in_output_aiid());
  }

  // string aiid = 4;
  if (this->aiid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aiid());
  }

  // string src_dataset = 5;
  if (this->src_dataset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_dataset());
  }

  // string dst_dataset = 6;
  if (this->dst_dataset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dst_dataset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelMapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabelMapper)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelMapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelMapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabelMapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabelMapper)
    MergeFrom(*source);
  }
}

void LabelMapper::MergeFrom(const LabelMapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabelMapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  catid_map_.MergeFrom(from.catid_map_);
  if (from.dataset_name().size() > 0) {
    _internal_set_dataset_name(from._internal_dataset_name());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.not_in_output_aiid().size() > 0) {
    _internal_set_not_in_output_aiid(from._internal_not_in_output_aiid());
  }
  if (from.aiid().size() > 0) {
    _internal_set_aiid(from._internal_aiid());
  }
  if (from.src_dataset().size() > 0) {
    _internal_set_src_dataset(from._internal_src_dataset());
  }
  if (from.dst_dataset().size() > 0) {
    _internal_set_dst_dataset(from._internal_dst_dataset());
  }
}

void LabelMapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabelMapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelMapper::CopyFrom(const LabelMapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabelMapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelMapper::IsInitialized() const {
  return true;
}

void LabelMapper::InternalSwap(LabelMapper* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  catid_map_.Swap(&other->catid_map_);
  dataset_name_.Swap(&other->dataset_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  not_in_output_aiid_.Swap(&other->not_in_output_aiid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aiid_.Swap(&other->aiid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  src_dataset_.Swap(&other->src_dataset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_dataset_.Swap(&other->dst_dataset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelMapper::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelSmoother::InitAsDefaultInstance() {
}
class LabelSmoother::_Internal {
 public:
};

LabelSmoother::LabelSmoother(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  constant_range_(arena),
  linear_scale_(arena),
  log_scale_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabelSmoother)
}
LabelSmoother::LabelSmoother(const LabelSmoother& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      constant_range_(from.constant_range_),
      linear_scale_(from.linear_scale_),
      log_scale_(from.log_scale_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mode().empty()) {
    mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mode(),
      GetArena());
  }
  num_labels_ = from.num_labels_;
  // @@protoc_insertion_point(copy_constructor:LabelSmoother)
}

void LabelSmoother::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelSmoother_proto_2futils_2fdata_5fprovider_2eproto.base);
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_labels_ = PROTOBUF_LONGLONG(0);
}

LabelSmoother::~LabelSmoother() {
  // @@protoc_insertion_point(destructor:LabelSmoother)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelSmoother::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabelSmoother::ArenaDtor(void* object) {
  LabelSmoother* _this = reinterpret_cast< LabelSmoother* >(object);
  (void)_this;
}
void LabelSmoother::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelSmoother::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelSmoother& LabelSmoother::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelSmoother_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void LabelSmoother::Clear() {
// @@protoc_insertion_point(message_clear_start:LabelSmoother)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constant_range_.Clear();
  linear_scale_.Clear();
  log_scale_.Clear();
  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  num_labels_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelSmoother::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabelSmoother.mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float constant_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_constant_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_constant_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float linear_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_linear_scale(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_linear_scale(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float log_scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_log_scale(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_log_scale(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 num_labels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_labels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelSmoother::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabelSmoother)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mode = 1;
  if (this->mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabelSmoother.mode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mode(), target);
  }

  // repeated float constant_range = 2;
  if (this->_internal_constant_range_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_constant_range(), target);
  }

  // repeated float linear_scale = 3;
  if (this->_internal_linear_scale_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_linear_scale(), target);
  }

  // repeated float log_scale = 4;
  if (this->_internal_log_scale_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_log_scale(), target);
  }

  // int64 num_labels = 5;
  if (this->num_labels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_num_labels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabelSmoother)
  return target;
}

size_t LabelSmoother::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabelSmoother)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float constant_range = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_constant_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _constant_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float linear_scale = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_linear_scale_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _linear_scale_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float log_scale = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_log_scale_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _log_scale_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string mode = 1;
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // int64 num_labels = 5;
  if (this->num_labels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_labels());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelSmoother::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabelSmoother)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelSmoother* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelSmoother>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabelSmoother)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabelSmoother)
    MergeFrom(*source);
  }
}

void LabelSmoother::MergeFrom(const LabelSmoother& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabelSmoother)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constant_range_.MergeFrom(from.constant_range_);
  linear_scale_.MergeFrom(from.linear_scale_);
  log_scale_.MergeFrom(from.log_scale_);
  if (from.mode().size() > 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.num_labels() != 0) {
    _internal_set_num_labels(from._internal_num_labels());
  }
}

void LabelSmoother::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabelSmoother)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelSmoother::CopyFrom(const LabelSmoother& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabelSmoother)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSmoother::IsInitialized() const {
  return true;
}

void LabelSmoother::InternalSwap(LabelSmoother* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  constant_range_.InternalSwap(&other->constant_range_);
  linear_scale_.InternalSwap(&other->linear_scale_);
  log_scale_.InternalSwap(&other->log_scale_);
  mode_.Swap(&other->mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(num_labels_, other->num_labels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelSmoother::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelDropper::InitAsDefaultInstance() {
}
class LabelDropper::_Internal {
 public:
};

LabelDropper::LabelDropper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drop_labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabelDropper)
}
LabelDropper::LabelDropper(const LabelDropper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      drop_labels_(from.drop_labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabelDropper)
}

void LabelDropper::SharedCtor() {
}

LabelDropper::~LabelDropper() {
  // @@protoc_insertion_point(destructor:LabelDropper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelDropper::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LabelDropper::ArenaDtor(void* object) {
  LabelDropper* _this = reinterpret_cast< LabelDropper* >(object);
  (void)_this;
}
void LabelDropper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelDropper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelDropper& LabelDropper::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelDropper_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void LabelDropper::Clear() {
// @@protoc_insertion_point(message_clear_start:LabelDropper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drop_labels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelDropper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 drop_labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_drop_labels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_drop_labels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelDropper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabelDropper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 drop_labels = 1;
  {
    int byte_size = _drop_labels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_drop_labels(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabelDropper)
  return target;
}

size_t LabelDropper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabelDropper)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 drop_labels = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->drop_labels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _drop_labels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelDropper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabelDropper)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelDropper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelDropper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabelDropper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabelDropper)
    MergeFrom(*source);
  }
}

void LabelDropper::MergeFrom(const LabelDropper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabelDropper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drop_labels_.MergeFrom(from.drop_labels_);
}

void LabelDropper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabelDropper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelDropper::CopyFrom(const LabelDropper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabelDropper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelDropper::IsInitialized() const {
  return true;
}

void LabelDropper::InternalSwap(LabelDropper* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  drop_labels_.InternalSwap(&other->drop_labels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelDropper::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OCRCropTransform::InitAsDefaultInstance() {
}
class OCRCropTransform::_Internal {
 public:
};

OCRCropTransform::OCRCropTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OCRCropTransform)
}
OCRCropTransform::OCRCropTransform(const OCRCropTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&height_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:OCRCropTransform)
}

void OCRCropTransform::SharedCtor() {
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&height_)) + sizeof(width_));
}

OCRCropTransform::~OCRCropTransform() {
  // @@protoc_insertion_point(destructor:OCRCropTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OCRCropTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OCRCropTransform::ArenaDtor(void* object) {
  OCRCropTransform* _this = reinterpret_cast< OCRCropTransform* >(object);
  (void)_this;
}
void OCRCropTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OCRCropTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OCRCropTransform& OCRCropTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OCRCropTransform_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void OCRCropTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:OCRCropTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&height_)) + sizeof(width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OCRCropTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OCRCropTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OCRCropTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  // int64 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OCRCropTransform)
  return target;
}

size_t OCRCropTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OCRCropTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_height());
  }

  // int64 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_width());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OCRCropTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OCRCropTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const OCRCropTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OCRCropTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OCRCropTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OCRCropTransform)
    MergeFrom(*source);
  }
}

void OCRCropTransform::MergeFrom(const OCRCropTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OCRCropTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
}

void OCRCropTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OCRCropTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OCRCropTransform::CopyFrom(const OCRCropTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OCRCropTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OCRCropTransform::IsInitialized() const {
  return true;
}

void OCRCropTransform::InternalSwap(OCRCropTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OCRCropTransform, width_)
      + sizeof(OCRCropTransform::width_)
      - PROTOBUF_FIELD_OFFSET(OCRCropTransform, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OCRCropTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MaxNumLabelDropper::InitAsDefaultInstance() {
}
class MaxNumLabelDropper::_Internal {
 public:
};

MaxNumLabelDropper::MaxNumLabelDropper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MaxNumLabelDropper)
}
MaxNumLabelDropper::MaxNumLabelDropper(const MaxNumLabelDropper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_num_labels_, &from.max_num_labels_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_num_labels_) -
    reinterpret_cast<char*>(&max_num_labels_)) + sizeof(min_num_labels_));
  // @@protoc_insertion_point(copy_constructor:MaxNumLabelDropper)
}

void MaxNumLabelDropper::SharedCtor() {
  ::memset(&max_num_labels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_num_labels_) -
      reinterpret_cast<char*>(&max_num_labels_)) + sizeof(min_num_labels_));
}

MaxNumLabelDropper::~MaxNumLabelDropper() {
  // @@protoc_insertion_point(destructor:MaxNumLabelDropper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaxNumLabelDropper::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MaxNumLabelDropper::ArenaDtor(void* object) {
  MaxNumLabelDropper* _this = reinterpret_cast< MaxNumLabelDropper* >(object);
  (void)_this;
}
void MaxNumLabelDropper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaxNumLabelDropper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MaxNumLabelDropper& MaxNumLabelDropper::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MaxNumLabelDropper_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void MaxNumLabelDropper::Clear() {
// @@protoc_insertion_point(message_clear_start:MaxNumLabelDropper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_num_labels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_num_labels_) -
      reinterpret_cast<char*>(&max_num_labels_)) + sizeof(min_num_labels_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaxNumLabelDropper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 max_num_labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_num_labels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_num_labels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          min_num_labels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaxNumLabelDropper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxNumLabelDropper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_num_labels = 1;
  if (this->max_num_labels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_num_labels(), target);
  }

  // int64 min_num_labels = 2;
  if (this->min_num_labels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_min_num_labels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxNumLabelDropper)
  return target;
}

size_t MaxNumLabelDropper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MaxNumLabelDropper)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_num_labels = 1;
  if (this->max_num_labels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_num_labels());
  }

  // int64 min_num_labels = 2;
  if (this->min_num_labels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_num_labels());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaxNumLabelDropper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MaxNumLabelDropper)
  GOOGLE_DCHECK_NE(&from, this);
  const MaxNumLabelDropper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaxNumLabelDropper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MaxNumLabelDropper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MaxNumLabelDropper)
    MergeFrom(*source);
  }
}

void MaxNumLabelDropper::MergeFrom(const MaxNumLabelDropper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MaxNumLabelDropper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_num_labels() != 0) {
    _internal_set_max_num_labels(from._internal_max_num_labels());
  }
  if (from.min_num_labels() != 0) {
    _internal_set_min_num_labels(from._internal_min_num_labels());
  }
}

void MaxNumLabelDropper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MaxNumLabelDropper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxNumLabelDropper::CopyFrom(const MaxNumLabelDropper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MaxNumLabelDropper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxNumLabelDropper::IsInitialized() const {
  return true;
}

void MaxNumLabelDropper::InternalSwap(MaxNumLabelDropper* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaxNumLabelDropper, min_num_labels_)
      + sizeof(MaxNumLabelDropper::min_num_labels_)
      - PROTOBUF_FIELD_OFFSET(MaxNumLabelDropper, max_num_labels_)>(
          reinterpret_cast<char*>(&max_num_labels_),
          reinterpret_cast<char*>(&other->max_num_labels_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaxNumLabelDropper::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

LabelWeight_CatidConstWeightsEntry_DoNotUse::LabelWeight_CatidConstWeightsEntry_DoNotUse() {}
LabelWeight_CatidConstWeightsEntry_DoNotUse::LabelWeight_CatidConstWeightsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LabelWeight_CatidConstWeightsEntry_DoNotUse::MergeFrom(const LabelWeight_CatidConstWeightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LabelWeight_CatidConstWeightsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void LabelWeight_CatidConstWeightsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void LabelWeight::InitAsDefaultInstance() {
}
class LabelWeight::_Internal {
 public:
};

LabelWeight::LabelWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  catid_const_weights_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabelWeight)
}
LabelWeight::LabelWeight(const LabelWeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  catid_const_weights_.MergeFrom(from.catid_const_weights_);
  catid_frequencies_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_catid_frequencies_file().empty()) {
    catid_frequencies_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_catid_frequencies_file(),
      GetArena());
  }
  dataset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dataset_name().empty()) {
    dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dataset_name(),
      GetArena());
  }
  split_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_split().empty()) {
    split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_split(),
      GetArena());
  }
  ::memcpy(&min_count_, &from.min_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_weight_) -
    reinterpret_cast<char*>(&min_count_)) + sizeof(default_weight_));
  // @@protoc_insertion_point(copy_constructor:LabelWeight)
}

void LabelWeight::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelWeight_proto_2futils_2fdata_5fprovider_2eproto.base);
  catid_frequencies_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  split_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_weight_) -
      reinterpret_cast<char*>(&min_count_)) + sizeof(default_weight_));
}

LabelWeight::~LabelWeight() {
  // @@protoc_insertion_point(destructor:LabelWeight)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelWeight::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  catid_frequencies_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  split_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabelWeight::ArenaDtor(void* object) {
  LabelWeight* _this = reinterpret_cast< LabelWeight* >(object);
  (void)_this;
}
void LabelWeight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelWeight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelWeight& LabelWeight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelWeight_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void LabelWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:LabelWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  catid_const_weights_.Clear();
  catid_frequencies_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dataset_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  split_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&min_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_weight_) -
      reinterpret_cast<char*>(&min_count_)) + sizeof(default_weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelWeight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string catid_frequencies_file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_catid_frequencies_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabelWeight.catid_frequencies_file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float target_frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          target_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 min_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          min_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sqrt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sqrt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, float> catid_const_weights = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&catid_const_weights_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // float default_weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          default_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string dataset_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_dataset_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabelWeight.dataset_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string split = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_split();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabelWeight.split"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelWeight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabelWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string catid_frequencies_file = 1;
  if (this->catid_frequencies_file().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_catid_frequencies_file().data(), static_cast<int>(this->_internal_catid_frequencies_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabelWeight.catid_frequencies_file");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_catid_frequencies_file(), target);
  }

  // float target_frequency = 2;
  if (!(this->target_frequency() <= 0 && this->target_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_target_frequency(), target);
  }

  // int64 min_count = 3;
  if (this->min_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_min_count(), target);
  }

  // bool sqrt = 4;
  if (this->sqrt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_sqrt(), target);
  }

  // map<string, float> catid_const_weights = 5;
  if (!this->_internal_catid_const_weights().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "LabelWeight.CatidConstWeightsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_catid_const_weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_catid_const_weights().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_catid_const_weights().begin();
          it != this->_internal_catid_const_weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LabelWeight_CatidConstWeightsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_catid_const_weights().begin();
          it != this->_internal_catid_const_weights().end(); ++it) {
        target = LabelWeight_CatidConstWeightsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // float default_weight = 6;
  if (!(this->default_weight() <= 0 && this->default_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_default_weight(), target);
  }

  // string dataset_name = 7;
  if (this->dataset_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_name().data(), static_cast<int>(this->_internal_dataset_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabelWeight.dataset_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_dataset_name(), target);
  }

  // string split = 8;
  if (this->split().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_split().data(), static_cast<int>(this->_internal_split().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabelWeight.split");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_split(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabelWeight)
  return target;
}

size_t LabelWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabelWeight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> catid_const_weights = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_catid_const_weights_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_catid_const_weights().begin();
      it != this->_internal_catid_const_weights().end(); ++it) {
    total_size += LabelWeight_CatidConstWeightsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string catid_frequencies_file = 1;
  if (this->catid_frequencies_file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_catid_frequencies_file());
  }

  // string dataset_name = 7;
  if (this->dataset_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_name());
  }

  // string split = 8;
  if (this->split().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_split());
  }

  // int64 min_count = 3;
  if (this->min_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_count());
  }

  // float target_frequency = 2;
  if (!(this->target_frequency() <= 0 && this->target_frequency() >= 0)) {
    total_size += 1 + 4;
  }

  // bool sqrt = 4;
  if (this->sqrt() != 0) {
    total_size += 1 + 1;
  }

  // float default_weight = 6;
  if (!(this->default_weight() <= 0 && this->default_weight() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelWeight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabelWeight)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelWeight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelWeight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabelWeight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabelWeight)
    MergeFrom(*source);
  }
}

void LabelWeight::MergeFrom(const LabelWeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabelWeight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  catid_const_weights_.MergeFrom(from.catid_const_weights_);
  if (from.catid_frequencies_file().size() > 0) {
    _internal_set_catid_frequencies_file(from._internal_catid_frequencies_file());
  }
  if (from.dataset_name().size() > 0) {
    _internal_set_dataset_name(from._internal_dataset_name());
  }
  if (from.split().size() > 0) {
    _internal_set_split(from._internal_split());
  }
  if (from.min_count() != 0) {
    _internal_set_min_count(from._internal_min_count());
  }
  if (!(from.target_frequency() <= 0 && from.target_frequency() >= 0)) {
    _internal_set_target_frequency(from._internal_target_frequency());
  }
  if (from.sqrt() != 0) {
    _internal_set_sqrt(from._internal_sqrt());
  }
  if (!(from.default_weight() <= 0 && from.default_weight() >= 0)) {
    _internal_set_default_weight(from._internal_default_weight());
  }
}

void LabelWeight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabelWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelWeight::CopyFrom(const LabelWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabelWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelWeight::IsInitialized() const {
  return true;
}

void LabelWeight::InternalSwap(LabelWeight* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  catid_const_weights_.Swap(&other->catid_const_weights_);
  catid_frequencies_file_.Swap(&other->catid_frequencies_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dataset_name_.Swap(&other->dataset_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  split_.Swap(&other->split_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LabelWeight, default_weight_)
      + sizeof(LabelWeight::default_weight_)
      - PROTOBUF_FIELD_OFFSET(LabelWeight, min_count_)>(
          reinterpret_cast<char*>(&min_count_),
          reinterpret_cast<char*>(&other->min_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelWeight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelsFromBboxes::InitAsDefaultInstance() {
}
class LabelsFromBboxes::_Internal {
 public:
};

LabelsFromBboxes::LabelsFromBboxes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabelsFromBboxes)
}
LabelsFromBboxes::LabelsFromBboxes(const LabelsFromBboxes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  set_background_label_zero_ = from.set_background_label_zero_;
  // @@protoc_insertion_point(copy_constructor:LabelsFromBboxes)
}

void LabelsFromBboxes::SharedCtor() {
  set_background_label_zero_ = false;
}

LabelsFromBboxes::~LabelsFromBboxes() {
  // @@protoc_insertion_point(destructor:LabelsFromBboxes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelsFromBboxes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LabelsFromBboxes::ArenaDtor(void* object) {
  LabelsFromBboxes* _this = reinterpret_cast< LabelsFromBboxes* >(object);
  (void)_this;
}
void LabelsFromBboxes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelsFromBboxes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelsFromBboxes& LabelsFromBboxes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelsFromBboxes_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void LabelsFromBboxes::Clear() {
// @@protoc_insertion_point(message_clear_start:LabelsFromBboxes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_background_label_zero_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelsFromBboxes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool set_background_label_zero = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          set_background_label_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelsFromBboxes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabelsFromBboxes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool set_background_label_zero = 1;
  if (this->set_background_label_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_set_background_label_zero(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabelsFromBboxes)
  return target;
}

size_t LabelsFromBboxes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabelsFromBboxes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool set_background_label_zero = 1;
  if (this->set_background_label_zero() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelsFromBboxes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabelsFromBboxes)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelsFromBboxes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelsFromBboxes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabelsFromBboxes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabelsFromBboxes)
    MergeFrom(*source);
  }
}

void LabelsFromBboxes::MergeFrom(const LabelsFromBboxes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabelsFromBboxes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.set_background_label_zero() != 0) {
    _internal_set_set_background_label_zero(from._internal_set_background_label_zero());
  }
}

void LabelsFromBboxes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabelsFromBboxes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelsFromBboxes::CopyFrom(const LabelsFromBboxes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabelsFromBboxes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelsFromBboxes::IsInitialized() const {
  return true;
}

void LabelsFromBboxes::InternalSwap(LabelsFromBboxes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(set_background_label_zero_, other->set_background_label_zero_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelsFromBboxes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSDRandomCropOperation::InitAsDefaultInstance() {
}
class SSDRandomCropOperation::_Internal {
 public:
};

SSDRandomCropOperation::SSDRandomCropOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSDRandomCropOperation)
}
SSDRandomCropOperation::SSDRandomCropOperation(const SSDRandomCropOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_object_covered_, &from.min_object_covered_,
    static_cast<size_t>(reinterpret_cast<char*>(&random_coef_) -
    reinterpret_cast<char*>(&min_object_covered_)) + sizeof(random_coef_));
  // @@protoc_insertion_point(copy_constructor:SSDRandomCropOperation)
}

void SSDRandomCropOperation::SharedCtor() {
  ::memset(&min_object_covered_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_coef_) -
      reinterpret_cast<char*>(&min_object_covered_)) + sizeof(random_coef_));
}

SSDRandomCropOperation::~SSDRandomCropOperation() {
  // @@protoc_insertion_point(destructor:SSDRandomCropOperation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSDRandomCropOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SSDRandomCropOperation::ArenaDtor(void* object) {
  SSDRandomCropOperation* _this = reinterpret_cast< SSDRandomCropOperation* >(object);
  (void)_this;
}
void SSDRandomCropOperation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDRandomCropOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSDRandomCropOperation& SSDRandomCropOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSDRandomCropOperation_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void SSDRandomCropOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:SSDRandomCropOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_object_covered_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_coef_) -
      reinterpret_cast<char*>(&min_object_covered_)) + sizeof(random_coef_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDRandomCropOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float min_object_covered = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          min_object_covered_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_aspect_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          min_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_aspect_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          max_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          min_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_area = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          max_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float overlap_thresh = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          overlap_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float random_coef = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          random_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSDRandomCropOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSDRandomCropOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_object_covered = 1;
  if (!(this->min_object_covered() <= 0 && this->min_object_covered() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_object_covered(), target);
  }

  // float min_aspect_ratio = 2;
  if (!(this->min_aspect_ratio() <= 0 && this->min_aspect_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_min_aspect_ratio(), target);
  }

  // float max_aspect_ratio = 3;
  if (!(this->max_aspect_ratio() <= 0 && this->max_aspect_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_max_aspect_ratio(), target);
  }

  // float min_area = 4;
  if (!(this->min_area() <= 0 && this->min_area() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_min_area(), target);
  }

  // float max_area = 5;
  if (!(this->max_area() <= 0 && this->max_area() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_area(), target);
  }

  // float overlap_thresh = 6;
  if (!(this->overlap_thresh() <= 0 && this->overlap_thresh() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_overlap_thresh(), target);
  }

  // float random_coef = 7;
  if (!(this->random_coef() <= 0 && this->random_coef() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_random_coef(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSDRandomCropOperation)
  return target;
}

size_t SSDRandomCropOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSDRandomCropOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float min_object_covered = 1;
  if (!(this->min_object_covered() <= 0 && this->min_object_covered() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_aspect_ratio = 2;
  if (!(this->min_aspect_ratio() <= 0 && this->min_aspect_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_aspect_ratio = 3;
  if (!(this->max_aspect_ratio() <= 0 && this->max_aspect_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_area = 4;
  if (!(this->min_area() <= 0 && this->min_area() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_area = 5;
  if (!(this->max_area() <= 0 && this->max_area() >= 0)) {
    total_size += 1 + 4;
  }

  // float overlap_thresh = 6;
  if (!(this->overlap_thresh() <= 0 && this->overlap_thresh() >= 0)) {
    total_size += 1 + 4;
  }

  // float random_coef = 7;
  if (!(this->random_coef() <= 0 && this->random_coef() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSDRandomCropOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSDRandomCropOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCropOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSDRandomCropOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSDRandomCropOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSDRandomCropOperation)
    MergeFrom(*source);
  }
}

void SSDRandomCropOperation::MergeFrom(const SSDRandomCropOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSDRandomCropOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.min_object_covered() <= 0 && from.min_object_covered() >= 0)) {
    _internal_set_min_object_covered(from._internal_min_object_covered());
  }
  if (!(from.min_aspect_ratio() <= 0 && from.min_aspect_ratio() >= 0)) {
    _internal_set_min_aspect_ratio(from._internal_min_aspect_ratio());
  }
  if (!(from.max_aspect_ratio() <= 0 && from.max_aspect_ratio() >= 0)) {
    _internal_set_max_aspect_ratio(from._internal_max_aspect_ratio());
  }
  if (!(from.min_area() <= 0 && from.min_area() >= 0)) {
    _internal_set_min_area(from._internal_min_area());
  }
  if (!(from.max_area() <= 0 && from.max_area() >= 0)) {
    _internal_set_max_area(from._internal_max_area());
  }
  if (!(from.overlap_thresh() <= 0 && from.overlap_thresh() >= 0)) {
    _internal_set_overlap_thresh(from._internal_overlap_thresh());
  }
  if (!(from.random_coef() <= 0 && from.random_coef() >= 0)) {
    _internal_set_random_coef(from._internal_random_coef());
  }
}

void SSDRandomCropOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSDRandomCropOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCropOperation::CopyFrom(const SSDRandomCropOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSDRandomCropOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCropOperation::IsInitialized() const {
  return true;
}

void SSDRandomCropOperation::InternalSwap(SSDRandomCropOperation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSDRandomCropOperation, random_coef_)
      + sizeof(SSDRandomCropOperation::random_coef_)
      - PROTOBUF_FIELD_OFFSET(SSDRandomCropOperation, min_object_covered_)>(
          reinterpret_cast<char*>(&min_object_covered_),
          reinterpret_cast<char*>(&other->min_object_covered_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDRandomCropOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelativeCropTransform::InitAsDefaultInstance() {
}
class RelativeCropTransform::_Internal {
 public:
};

RelativeCropTransform::RelativeCropTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  relative_scale_range_(arena),
  relative_aspect_range_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RelativeCropTransform)
}
RelativeCropTransform::RelativeCropTransform(const RelativeCropTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      relative_scale_range_(from.relative_scale_range_),
      relative_aspect_range_(from.relative_aspect_range_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&horizontal_flip_, &from.horizontal_flip_,
    static_cast<size_t>(reinterpret_cast<char*>(&images_with_no_bboxes_fallback_) -
    reinterpret_cast<char*>(&horizontal_flip_)) + sizeof(images_with_no_bboxes_fallback_));
  // @@protoc_insertion_point(copy_constructor:RelativeCropTransform)
}

void RelativeCropTransform::SharedCtor() {
  ::memset(&horizontal_flip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&images_with_no_bboxes_fallback_) -
      reinterpret_cast<char*>(&horizontal_flip_)) + sizeof(images_with_no_bboxes_fallback_));
}

RelativeCropTransform::~RelativeCropTransform() {
  // @@protoc_insertion_point(destructor:RelativeCropTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelativeCropTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RelativeCropTransform::ArenaDtor(void* object) {
  RelativeCropTransform* _this = reinterpret_cast< RelativeCropTransform* >(object);
  (void)_this;
}
void RelativeCropTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelativeCropTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelativeCropTransform& RelativeCropTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelativeCropTransform_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void RelativeCropTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:RelativeCropTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relative_scale_range_.Clear();
  relative_aspect_range_.Clear();
  ::memset(&horizontal_flip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&images_with_no_bboxes_fallback_) -
      reinterpret_cast<char*>(&horizontal_flip_)) + sizeof(images_with_no_bboxes_fallback_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelativeCropTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float relative_scale_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_relative_scale_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_relative_scale_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float relative_aspect_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_relative_aspect_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_relative_aspect_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool horizontal_flip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          horizontal_flip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_bbox_overlap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          min_bbox_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 attempts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RelativeCropTransform.FallbackMode max_attempts_fallback = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_max_attempts_fallback(static_cast<::RelativeCropTransform_FallbackMode>(val));
        } else goto handle_unusual;
        continue;
      // .RelativeCropTransform.FallbackMode images_with_no_bboxes_fallback = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_images_with_no_bboxes_fallback(static_cast<::RelativeCropTransform_FallbackMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelativeCropTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RelativeCropTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float relative_scale_range = 1;
  if (this->_internal_relative_scale_range_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_relative_scale_range(), target);
  }

  // repeated float relative_aspect_range = 2;
  if (this->_internal_relative_aspect_range_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_relative_aspect_range(), target);
  }

  // bool horizontal_flip = 3;
  if (this->horizontal_flip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_horizontal_flip(), target);
  }

  // float min_bbox_overlap = 4;
  if (!(this->min_bbox_overlap() <= 0 && this->min_bbox_overlap() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_min_bbox_overlap(), target);
  }

  // int32 attempts = 5;
  if (this->attempts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_attempts(), target);
  }

  // .RelativeCropTransform.FallbackMode max_attempts_fallback = 6;
  if (this->max_attempts_fallback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_max_attempts_fallback(), target);
  }

  // .RelativeCropTransform.FallbackMode images_with_no_bboxes_fallback = 7;
  if (this->images_with_no_bboxes_fallback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_images_with_no_bboxes_fallback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RelativeCropTransform)
  return target;
}

size_t RelativeCropTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RelativeCropTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float relative_scale_range = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_relative_scale_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _relative_scale_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float relative_aspect_range = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_relative_aspect_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _relative_aspect_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool horizontal_flip = 3;
  if (this->horizontal_flip() != 0) {
    total_size += 1 + 1;
  }

  // float min_bbox_overlap = 4;
  if (!(this->min_bbox_overlap() <= 0 && this->min_bbox_overlap() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 attempts = 5;
  if (this->attempts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attempts());
  }

  // .RelativeCropTransform.FallbackMode max_attempts_fallback = 6;
  if (this->max_attempts_fallback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_max_attempts_fallback());
  }

  // .RelativeCropTransform.FallbackMode images_with_no_bboxes_fallback = 7;
  if (this->images_with_no_bboxes_fallback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_images_with_no_bboxes_fallback());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelativeCropTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RelativeCropTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const RelativeCropTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelativeCropTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RelativeCropTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RelativeCropTransform)
    MergeFrom(*source);
  }
}

void RelativeCropTransform::MergeFrom(const RelativeCropTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RelativeCropTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relative_scale_range_.MergeFrom(from.relative_scale_range_);
  relative_aspect_range_.MergeFrom(from.relative_aspect_range_);
  if (from.horizontal_flip() != 0) {
    _internal_set_horizontal_flip(from._internal_horizontal_flip());
  }
  if (!(from.min_bbox_overlap() <= 0 && from.min_bbox_overlap() >= 0)) {
    _internal_set_min_bbox_overlap(from._internal_min_bbox_overlap());
  }
  if (from.attempts() != 0) {
    _internal_set_attempts(from._internal_attempts());
  }
  if (from.max_attempts_fallback() != 0) {
    _internal_set_max_attempts_fallback(from._internal_max_attempts_fallback());
  }
  if (from.images_with_no_bboxes_fallback() != 0) {
    _internal_set_images_with_no_bboxes_fallback(from._internal_images_with_no_bboxes_fallback());
  }
}

void RelativeCropTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RelativeCropTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelativeCropTransform::CopyFrom(const RelativeCropTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RelativeCropTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativeCropTransform::IsInitialized() const {
  return true;
}

void RelativeCropTransform::InternalSwap(RelativeCropTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  relative_scale_range_.InternalSwap(&other->relative_scale_range_);
  relative_aspect_range_.InternalSwap(&other->relative_aspect_range_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelativeCropTransform, images_with_no_bboxes_fallback_)
      + sizeof(RelativeCropTransform::images_with_no_bboxes_fallback_)
      - PROTOBUF_FIELD_OFFSET(RelativeCropTransform, horizontal_flip_)>(
          reinterpret_cast<char*>(&horizontal_flip_),
          reinterpret_cast<char*>(&other->horizontal_flip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelativeCropTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AspectRatioTransform::InitAsDefaultInstance() {
}
class AspectRatioTransform::_Internal {
 public:
};

AspectRatioTransform::AspectRatioTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  relative_aspect_range_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AspectRatioTransform)
}
AspectRatioTransform::AspectRatioTransform(const AspectRatioTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      relative_aspect_range_(from.relative_aspect_range_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AspectRatioTransform)
}

void AspectRatioTransform::SharedCtor() {
}

AspectRatioTransform::~AspectRatioTransform() {
  // @@protoc_insertion_point(destructor:AspectRatioTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AspectRatioTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AspectRatioTransform::ArenaDtor(void* object) {
  AspectRatioTransform* _this = reinterpret_cast< AspectRatioTransform* >(object);
  (void)_this;
}
void AspectRatioTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AspectRatioTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AspectRatioTransform& AspectRatioTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AspectRatioTransform_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void AspectRatioTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:AspectRatioTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relative_aspect_range_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AspectRatioTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float relative_aspect_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_relative_aspect_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_relative_aspect_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AspectRatioTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AspectRatioTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float relative_aspect_range = 1;
  if (this->_internal_relative_aspect_range_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_relative_aspect_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AspectRatioTransform)
  return target;
}

size_t AspectRatioTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AspectRatioTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float relative_aspect_range = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_relative_aspect_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _relative_aspect_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AspectRatioTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AspectRatioTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const AspectRatioTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AspectRatioTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AspectRatioTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AspectRatioTransform)
    MergeFrom(*source);
  }
}

void AspectRatioTransform::MergeFrom(const AspectRatioTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AspectRatioTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relative_aspect_range_.MergeFrom(from.relative_aspect_range_);
}

void AspectRatioTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AspectRatioTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AspectRatioTransform::CopyFrom(const AspectRatioTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AspectRatioTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AspectRatioTransform::IsInitialized() const {
  return true;
}

void AspectRatioTransform::InternalSwap(AspectRatioTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  relative_aspect_range_.InternalSwap(&other->relative_aspect_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AspectRatioTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AffineTransform::InitAsDefaultInstance() {
}
class AffineTransform::_Internal {
 public:
};

AffineTransform::AffineTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AffineTransform)
}
AffineTransform::AffineTransform(const AffineTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&skip_prob_, &from.skip_prob_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_transparent_corners_) -
    reinterpret_cast<char*>(&skip_prob_)) + sizeof(use_transparent_corners_));
  // @@protoc_insertion_point(copy_constructor:AffineTransform)
}

void AffineTransform::SharedCtor() {
  ::memset(&skip_prob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_transparent_corners_) -
      reinterpret_cast<char*>(&skip_prob_)) + sizeof(use_transparent_corners_));
}

AffineTransform::~AffineTransform() {
  // @@protoc_insertion_point(destructor:AffineTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AffineTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AffineTransform::ArenaDtor(void* object) {
  AffineTransform* _this = reinterpret_cast< AffineTransform* >(object);
  (void)_this;
}
void AffineTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AffineTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AffineTransform& AffineTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AffineTransform_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void AffineTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:AffineTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&skip_prob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_transparent_corners_) -
      reinterpret_cast<char*>(&skip_prob_)) + sizeof(use_transparent_corners_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AffineTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float skip_prob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          skip_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotate_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          rotate_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotate_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          rotate_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool crop_original_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          crop_original_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_transparent_corners = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          use_transparent_corners_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AffineTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AffineTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float skip_prob = 1;
  if (!(this->skip_prob() <= 0 && this->skip_prob() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_skip_prob(), target);
  }

  // float rotate_min = 2;
  if (!(this->rotate_min() <= 0 && this->rotate_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_rotate_min(), target);
  }

  // float rotate_max = 3;
  if (!(this->rotate_max() <= 0 && this->rotate_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_rotate_max(), target);
  }

  // bool crop_original_size = 4;
  if (this->crop_original_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_crop_original_size(), target);
  }

  // bool use_transparent_corners = 5;
  if (this->use_transparent_corners() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_use_transparent_corners(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AffineTransform)
  return target;
}

size_t AffineTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AffineTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float skip_prob = 1;
  if (!(this->skip_prob() <= 0 && this->skip_prob() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotate_min = 2;
  if (!(this->rotate_min() <= 0 && this->rotate_min() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotate_max = 3;
  if (!(this->rotate_max() <= 0 && this->rotate_max() >= 0)) {
    total_size += 1 + 4;
  }

  // bool crop_original_size = 4;
  if (this->crop_original_size() != 0) {
    total_size += 1 + 1;
  }

  // bool use_transparent_corners = 5;
  if (this->use_transparent_corners() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AffineTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AffineTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const AffineTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AffineTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AffineTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AffineTransform)
    MergeFrom(*source);
  }
}

void AffineTransform::MergeFrom(const AffineTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AffineTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.skip_prob() <= 0 && from.skip_prob() >= 0)) {
    _internal_set_skip_prob(from._internal_skip_prob());
  }
  if (!(from.rotate_min() <= 0 && from.rotate_min() >= 0)) {
    _internal_set_rotate_min(from._internal_rotate_min());
  }
  if (!(from.rotate_max() <= 0 && from.rotate_max() >= 0)) {
    _internal_set_rotate_max(from._internal_rotate_max());
  }
  if (from.crop_original_size() != 0) {
    _internal_set_crop_original_size(from._internal_crop_original_size());
  }
  if (from.use_transparent_corners() != 0) {
    _internal_set_use_transparent_corners(from._internal_use_transparent_corners());
  }
}

void AffineTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AffineTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AffineTransform::CopyFrom(const AffineTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AffineTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AffineTransform::IsInitialized() const {
  return true;
}

void AffineTransform::InternalSwap(AffineTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AffineTransform, use_transparent_corners_)
      + sizeof(AffineTransform::use_transparent_corners_)
      - PROTOBUF_FIELD_OFFSET(AffineTransform, skip_prob_)>(
          reinterpret_cast<char*>(&skip_prob_),
          reinterpret_cast<char*>(&other->skip_prob_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AffineTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScaleTransform::InitAsDefaultInstance() {
}
class ScaleTransform::_Internal {
 public:
};

ScaleTransform::ScaleTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  size_range_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ScaleTransform)
}
ScaleTransform::ScaleTransform(const ScaleTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      size_range_(from.size_range_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scale_based_on_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scale_based_on().empty()) {
    scale_based_on_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scale_based_on(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ScaleTransform)
}

void ScaleTransform::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScaleTransform_proto_2futils_2fdata_5fprovider_2eproto.base);
  scale_based_on_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ScaleTransform::~ScaleTransform() {
  // @@protoc_insertion_point(destructor:ScaleTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScaleTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scale_based_on_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScaleTransform::ArenaDtor(void* object) {
  ScaleTransform* _this = reinterpret_cast< ScaleTransform* >(object);
  (void)_this;
}
void ScaleTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScaleTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScaleTransform& ScaleTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScaleTransform_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void ScaleTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:ScaleTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_range_.Clear();
  scale_based_on_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScaleTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string scale_based_on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_scale_based_on();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ScaleTransform.scale_based_on"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float size_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_size_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_size_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScaleTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScaleTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scale_based_on = 1;
  if (this->scale_based_on().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scale_based_on().data(), static_cast<int>(this->_internal_scale_based_on().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ScaleTransform.scale_based_on");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scale_based_on(), target);
  }

  // repeated float size_range = 2;
  if (this->_internal_size_range_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_size_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScaleTransform)
  return target;
}

size_t ScaleTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScaleTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float size_range = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_size_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _size_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string scale_based_on = 1;
  if (this->scale_based_on().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scale_based_on());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScaleTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ScaleTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const ScaleTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScaleTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ScaleTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ScaleTransform)
    MergeFrom(*source);
  }
}

void ScaleTransform::MergeFrom(const ScaleTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ScaleTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  size_range_.MergeFrom(from.size_range_);
  if (from.scale_based_on().size() > 0) {
    _internal_set_scale_based_on(from._internal_scale_based_on());
  }
}

void ScaleTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ScaleTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaleTransform::CopyFrom(const ScaleTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScaleTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaleTransform::IsInitialized() const {
  return true;
}

void ScaleTransform::InternalSwap(ScaleTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  size_range_.InternalSwap(&other->size_range_);
  scale_based_on_.Swap(&other->scale_based_on_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ScaleTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DistortionTransform::InitAsDefaultInstance() {
}
class DistortionTransform::_Internal {
 public:
};

DistortionTransform::DistortionTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DistortionTransform)
}
DistortionTransform::DistortionTransform(const DistortionTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&skip_prob_, &from.skip_prob_,
    static_cast<size_t>(reinterpret_cast<char*>(&magnitude_) -
    reinterpret_cast<char*>(&skip_prob_)) + sizeof(magnitude_));
  // @@protoc_insertion_point(copy_constructor:DistortionTransform)
}

void DistortionTransform::SharedCtor() {
  ::memset(&skip_prob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&magnitude_) -
      reinterpret_cast<char*>(&skip_prob_)) + sizeof(magnitude_));
}

DistortionTransform::~DistortionTransform() {
  // @@protoc_insertion_point(destructor:DistortionTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DistortionTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DistortionTransform::ArenaDtor(void* object) {
  DistortionTransform* _this = reinterpret_cast< DistortionTransform* >(object);
  (void)_this;
}
void DistortionTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistortionTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistortionTransform& DistortionTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DistortionTransform_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void DistortionTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:DistortionTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&skip_prob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&magnitude_) -
      reinterpret_cast<char*>(&skip_prob_)) + sizeof(magnitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistortionTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float skip_prob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          skip_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 grid_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grid_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 grid_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grid_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float magnitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          magnitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistortionTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DistortionTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float skip_prob = 1;
  if (!(this->skip_prob() <= 0 && this->skip_prob() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_skip_prob(), target);
  }

  // int32 grid_width = 2;
  if (this->grid_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_grid_width(), target);
  }

  // int32 grid_height = 3;
  if (this->grid_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_grid_height(), target);
  }

  // float magnitude = 4;
  if (!(this->magnitude() <= 0 && this->magnitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_magnitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DistortionTransform)
  return target;
}

size_t DistortionTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DistortionTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float skip_prob = 1;
  if (!(this->skip_prob() <= 0 && this->skip_prob() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 grid_width = 2;
  if (this->grid_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grid_width());
  }

  // int32 grid_height = 3;
  if (this->grid_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grid_height());
  }

  // float magnitude = 4;
  if (!(this->magnitude() <= 0 && this->magnitude() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistortionTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DistortionTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const DistortionTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DistortionTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DistortionTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DistortionTransform)
    MergeFrom(*source);
  }
}

void DistortionTransform::MergeFrom(const DistortionTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DistortionTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.skip_prob() <= 0 && from.skip_prob() >= 0)) {
    _internal_set_skip_prob(from._internal_skip_prob());
  }
  if (from.grid_width() != 0) {
    _internal_set_grid_width(from._internal_grid_width());
  }
  if (from.grid_height() != 0) {
    _internal_set_grid_height(from._internal_grid_height());
  }
  if (!(from.magnitude() <= 0 && from.magnitude() >= 0)) {
    _internal_set_magnitude(from._internal_magnitude());
  }
}

void DistortionTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DistortionTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistortionTransform::CopyFrom(const DistortionTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DistortionTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistortionTransform::IsInitialized() const {
  return true;
}

void DistortionTransform::InternalSwap(DistortionTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DistortionTransform, magnitude_)
      + sizeof(DistortionTransform::magnitude_)
      - PROTOBUF_FIELD_OFFSET(DistortionTransform, skip_prob_)>(
          reinterpret_cast<char*>(&skip_prob_),
          reinterpret_cast<char*>(&other->skip_prob_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DistortionTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlipTransform::InitAsDefaultInstance() {
}
class FlipTransform::_Internal {
 public:
};

FlipTransform::FlipTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FlipTransform)
}
FlipTransform::FlipTransform(const FlipTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flip_prob_, &from.flip_prob_,
    static_cast<size_t>(reinterpret_cast<char*>(&vertical_) -
    reinterpret_cast<char*>(&flip_prob_)) + sizeof(vertical_));
  // @@protoc_insertion_point(copy_constructor:FlipTransform)
}

void FlipTransform::SharedCtor() {
  ::memset(&flip_prob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_) -
      reinterpret_cast<char*>(&flip_prob_)) + sizeof(vertical_));
}

FlipTransform::~FlipTransform() {
  // @@protoc_insertion_point(destructor:FlipTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlipTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlipTransform::ArenaDtor(void* object) {
  FlipTransform* _this = reinterpret_cast< FlipTransform* >(object);
  (void)_this;
}
void FlipTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlipTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlipTransform& FlipTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlipTransform_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void FlipTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:FlipTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&flip_prob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_) -
      reinterpret_cast<char*>(&flip_prob_)) + sizeof(vertical_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlipTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float flip_prob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          flip_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool horizontal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool vertical = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlipTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FlipTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float flip_prob = 1;
  if (!(this->flip_prob() <= 0 && this->flip_prob() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_flip_prob(), target);
  }

  // bool horizontal = 2;
  if (this->horizontal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_horizontal(), target);
  }

  // bool vertical = 3;
  if (this->vertical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_vertical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FlipTransform)
  return target;
}

size_t FlipTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FlipTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float flip_prob = 1;
  if (!(this->flip_prob() <= 0 && this->flip_prob() >= 0)) {
    total_size += 1 + 4;
  }

  // bool horizontal = 2;
  if (this->horizontal() != 0) {
    total_size += 1 + 1;
  }

  // bool vertical = 3;
  if (this->vertical() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlipTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FlipTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const FlipTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlipTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FlipTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FlipTransform)
    MergeFrom(*source);
  }
}

void FlipTransform::MergeFrom(const FlipTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FlipTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.flip_prob() <= 0 && from.flip_prob() >= 0)) {
    _internal_set_flip_prob(from._internal_flip_prob());
  }
  if (from.horizontal() != 0) {
    _internal_set_horizontal(from._internal_horizontal());
  }
  if (from.vertical() != 0) {
    _internal_set_vertical(from._internal_vertical());
  }
}

void FlipTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FlipTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlipTransform::CopyFrom(const FlipTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FlipTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlipTransform::IsInitialized() const {
  return true;
}

void FlipTransform::InternalSwap(FlipTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlipTransform, vertical_)
      + sizeof(FlipTransform::vertical_)
      - PROTOBUF_FIELD_OFFSET(FlipTransform, flip_prob_)>(
          reinterpret_cast<char*>(&flip_prob_),
          reinterpret_cast<char*>(&other->flip_prob_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlipTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColorTransform::InitAsDefaultInstance() {
}
class ColorTransform::_Internal {
 public:
};

ColorTransform::ColorTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  brightness_range_(arena),
  contrast_range_(arena),
  color_range_(arena),
  sharpness_range_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ColorTransform)
}
ColorTransform::ColorTransform(const ColorTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      brightness_range_(from.brightness_range_),
      contrast_range_(from.contrast_range_),
      color_range_(from.color_range_),
      sharpness_range_(from.sharpness_range_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&invert_prob_, &from.invert_prob_,
    static_cast<size_t>(reinterpret_cast<char*>(&skip_prob_) -
    reinterpret_cast<char*>(&invert_prob_)) + sizeof(skip_prob_));
  // @@protoc_insertion_point(copy_constructor:ColorTransform)
}

void ColorTransform::SharedCtor() {
  ::memset(&invert_prob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_prob_) -
      reinterpret_cast<char*>(&invert_prob_)) + sizeof(skip_prob_));
}

ColorTransform::~ColorTransform() {
  // @@protoc_insertion_point(destructor:ColorTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ColorTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ColorTransform::ArenaDtor(void* object) {
  ColorTransform* _this = reinterpret_cast< ColorTransform* >(object);
  (void)_this;
}
void ColorTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorTransform& ColorTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorTransform_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void ColorTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:ColorTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brightness_range_.Clear();
  contrast_range_.Clear();
  color_range_.Clear();
  sharpness_range_.Clear();
  ::memset(&invert_prob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_prob_) -
      reinterpret_cast<char*>(&invert_prob_)) + sizeof(skip_prob_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float brightness_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_brightness_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_brightness_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float contrast_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_contrast_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_contrast_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float color_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_color_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_color_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float sharpness_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sharpness_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_sharpness_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float invert_prob = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          invert_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float skip_prob = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          skip_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColorTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float brightness_range = 1;
  if (this->_internal_brightness_range_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_brightness_range(), target);
  }

  // repeated float contrast_range = 2;
  if (this->_internal_contrast_range_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_contrast_range(), target);
  }

  // repeated float color_range = 3;
  if (this->_internal_color_range_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_color_range(), target);
  }

  // repeated float sharpness_range = 4;
  if (this->_internal_sharpness_range_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_sharpness_range(), target);
  }

  // float invert_prob = 5;
  if (!(this->invert_prob() <= 0 && this->invert_prob() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_invert_prob(), target);
  }

  // float skip_prob = 6;
  if (!(this->skip_prob() <= 0 && this->skip_prob() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_skip_prob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColorTransform)
  return target;
}

size_t ColorTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColorTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float brightness_range = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_brightness_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _brightness_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float contrast_range = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_contrast_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contrast_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float color_range = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_color_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _color_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float sharpness_range = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sharpness_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sharpness_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float invert_prob = 5;
  if (!(this->invert_prob() <= 0 && this->invert_prob() >= 0)) {
    total_size += 1 + 4;
  }

  // float skip_prob = 6;
  if (!(this->skip_prob() <= 0 && this->skip_prob() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ColorTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const ColorTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColorTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ColorTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ColorTransform)
    MergeFrom(*source);
  }
}

void ColorTransform::MergeFrom(const ColorTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColorTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  brightness_range_.MergeFrom(from.brightness_range_);
  contrast_range_.MergeFrom(from.contrast_range_);
  color_range_.MergeFrom(from.color_range_);
  sharpness_range_.MergeFrom(from.sharpness_range_);
  if (!(from.invert_prob() <= 0 && from.invert_prob() >= 0)) {
    _internal_set_invert_prob(from._internal_invert_prob());
  }
  if (!(from.skip_prob() <= 0 && from.skip_prob() >= 0)) {
    _internal_set_skip_prob(from._internal_skip_prob());
  }
}

void ColorTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ColorTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorTransform::CopyFrom(const ColorTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColorTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorTransform::IsInitialized() const {
  return true;
}

void ColorTransform::InternalSwap(ColorTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  brightness_range_.InternalSwap(&other->brightness_range_);
  contrast_range_.InternalSwap(&other->contrast_range_);
  color_range_.InternalSwap(&other->color_range_);
  sharpness_range_.InternalSwap(&other->sharpness_range_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorTransform, skip_prob_)
      + sizeof(ColorTransform::skip_prob_)
      - PROTOBUF_FIELD_OFFSET(ColorTransform, invert_prob_)>(
          reinterpret_cast<char*>(&invert_prob_),
          reinterpret_cast<char*>(&other->invert_prob_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LandmarkAlignTransform::InitAsDefaultInstance() {
}
class LandmarkAlignTransform::_Internal {
 public:
};

LandmarkAlignTransform::LandmarkAlignTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LandmarkAlignTransform)
}
LandmarkAlignTransform::LandmarkAlignTransform(const LandmarkAlignTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transform_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transform_type().empty()) {
    transform_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transform_type(),
      GetArena());
  }
  output_size_ = from.output_size_;
  // @@protoc_insertion_point(copy_constructor:LandmarkAlignTransform)
}

void LandmarkAlignTransform::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LandmarkAlignTransform_proto_2futils_2fdata_5fprovider_2eproto.base);
  transform_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_size_ = 0;
}

LandmarkAlignTransform::~LandmarkAlignTransform() {
  // @@protoc_insertion_point(destructor:LandmarkAlignTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LandmarkAlignTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  transform_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LandmarkAlignTransform::ArenaDtor(void* object) {
  LandmarkAlignTransform* _this = reinterpret_cast< LandmarkAlignTransform* >(object);
  (void)_this;
}
void LandmarkAlignTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LandmarkAlignTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LandmarkAlignTransform& LandmarkAlignTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LandmarkAlignTransform_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void LandmarkAlignTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:LandmarkAlignTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transform_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LandmarkAlignTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transform_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transform_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LandmarkAlignTransform.transform_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 output_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          output_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LandmarkAlignTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LandmarkAlignTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transform_type = 1;
  if (this->transform_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transform_type().data(), static_cast<int>(this->_internal_transform_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LandmarkAlignTransform.transform_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transform_type(), target);
  }

  // int32 output_size = 2;
  if (this->output_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_output_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LandmarkAlignTransform)
  return target;
}

size_t LandmarkAlignTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LandmarkAlignTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transform_type = 1;
  if (this->transform_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transform_type());
  }

  // int32 output_size = 2;
  if (this->output_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_output_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandmarkAlignTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LandmarkAlignTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkAlignTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LandmarkAlignTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LandmarkAlignTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LandmarkAlignTransform)
    MergeFrom(*source);
  }
}

void LandmarkAlignTransform::MergeFrom(const LandmarkAlignTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LandmarkAlignTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transform_type().size() > 0) {
    _internal_set_transform_type(from._internal_transform_type());
  }
  if (from.output_size() != 0) {
    _internal_set_output_size(from._internal_output_size());
  }
}

void LandmarkAlignTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LandmarkAlignTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkAlignTransform::CopyFrom(const LandmarkAlignTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LandmarkAlignTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkAlignTransform::IsInitialized() const {
  return true;
}

void LandmarkAlignTransform::InternalSwap(LandmarkAlignTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transform_type_.Swap(&other->transform_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(output_size_, other->output_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LandmarkAlignTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FilterBbox::InitAsDefaultInstance() {
}
class FilterBbox::_Internal {
 public:
};

FilterBbox::FilterBbox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FilterBbox)
}
FilterBbox::FilterBbox(const FilterBbox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&filter_bg_labels_, &from.filter_bg_labels_,
    static_cast<size_t>(reinterpret_cast<char*>(&visible_absolute_area_threshold_) -
    reinterpret_cast<char*>(&filter_bg_labels_)) + sizeof(visible_absolute_area_threshold_));
  // @@protoc_insertion_point(copy_constructor:FilterBbox)
}

void FilterBbox::SharedCtor() {
  ::memset(&filter_bg_labels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visible_absolute_area_threshold_) -
      reinterpret_cast<char*>(&filter_bg_labels_)) + sizeof(visible_absolute_area_threshold_));
}

FilterBbox::~FilterBbox() {
  // @@protoc_insertion_point(destructor:FilterBbox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilterBbox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FilterBbox::ArenaDtor(void* object) {
  FilterBbox* _this = reinterpret_cast< FilterBbox* >(object);
  (void)_this;
}
void FilterBbox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterBbox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterBbox& FilterBbox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterBbox_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void FilterBbox::Clear() {
// @@protoc_insertion_point(message_clear_start:FilterBbox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&filter_bg_labels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visible_absolute_area_threshold_) -
      reinterpret_cast<char*>(&filter_bg_labels_)) + sizeof(visible_absolute_area_threshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterBbox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool filter_bg_labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          filter_bg_labels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool clip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          clip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float visible_area_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          visible_area_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float no_bboxes_crop_sample = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          no_bboxes_crop_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float visible_absolute_area_threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          visible_absolute_area_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterBbox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FilterBbox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool filter_bg_labels = 1;
  if (this->filter_bg_labels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_filter_bg_labels(), target);
  }

  // bool clip = 2;
  if (this->clip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_clip(), target);
  }

  // float visible_area_threshold = 3;
  if (!(this->visible_area_threshold() <= 0 && this->visible_area_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_visible_area_threshold(), target);
  }

  // float no_bboxes_crop_sample = 4;
  if (!(this->no_bboxes_crop_sample() <= 0 && this->no_bboxes_crop_sample() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_no_bboxes_crop_sample(), target);
  }

  // float visible_absolute_area_threshold = 5;
  if (!(this->visible_absolute_area_threshold() <= 0 && this->visible_absolute_area_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_visible_absolute_area_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FilterBbox)
  return target;
}

size_t FilterBbox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FilterBbox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool filter_bg_labels = 1;
  if (this->filter_bg_labels() != 0) {
    total_size += 1 + 1;
  }

  // bool clip = 2;
  if (this->clip() != 0) {
    total_size += 1 + 1;
  }

  // float visible_area_threshold = 3;
  if (!(this->visible_area_threshold() <= 0 && this->visible_area_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // float no_bboxes_crop_sample = 4;
  if (!(this->no_bboxes_crop_sample() <= 0 && this->no_bboxes_crop_sample() >= 0)) {
    total_size += 1 + 4;
  }

  // float visible_absolute_area_threshold = 5;
  if (!(this->visible_absolute_area_threshold() <= 0 && this->visible_absolute_area_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterBbox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FilterBbox)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterBbox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterBbox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FilterBbox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FilterBbox)
    MergeFrom(*source);
  }
}

void FilterBbox::MergeFrom(const FilterBbox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FilterBbox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filter_bg_labels() != 0) {
    _internal_set_filter_bg_labels(from._internal_filter_bg_labels());
  }
  if (from.clip() != 0) {
    _internal_set_clip(from._internal_clip());
  }
  if (!(from.visible_area_threshold() <= 0 && from.visible_area_threshold() >= 0)) {
    _internal_set_visible_area_threshold(from._internal_visible_area_threshold());
  }
  if (!(from.no_bboxes_crop_sample() <= 0 && from.no_bboxes_crop_sample() >= 0)) {
    _internal_set_no_bboxes_crop_sample(from._internal_no_bboxes_crop_sample());
  }
  if (!(from.visible_absolute_area_threshold() <= 0 && from.visible_absolute_area_threshold() >= 0)) {
    _internal_set_visible_absolute_area_threshold(from._internal_visible_absolute_area_threshold());
  }
}

void FilterBbox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FilterBbox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterBbox::CopyFrom(const FilterBbox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FilterBbox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterBbox::IsInitialized() const {
  return true;
}

void FilterBbox::InternalSwap(FilterBbox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterBbox, visible_absolute_area_threshold_)
      + sizeof(FilterBbox::visible_absolute_area_threshold_)
      - PROTOBUF_FIELD_OFFSET(FilterBbox, filter_bg_labels_)>(
          reinterpret_cast<char*>(&filter_bg_labels_),
          reinterpret_cast<char*>(&other->filter_bg_labels_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterBbox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JPEGRecompression::InitAsDefaultInstance() {
}
class JPEGRecompression::_Internal {
 public:
};

JPEGRecompression::JPEGRecompression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:JPEGRecompression)
}
JPEGRecompression::JPEGRecompression(const JPEGRecompression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&qmin_, &from.qmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&qmax_) -
    reinterpret_cast<char*>(&qmin_)) + sizeof(qmax_));
  // @@protoc_insertion_point(copy_constructor:JPEGRecompression)
}

void JPEGRecompression::SharedCtor() {
  ::memset(&qmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qmax_) -
      reinterpret_cast<char*>(&qmin_)) + sizeof(qmax_));
}

JPEGRecompression::~JPEGRecompression() {
  // @@protoc_insertion_point(destructor:JPEGRecompression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JPEGRecompression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JPEGRecompression::ArenaDtor(void* object) {
  JPEGRecompression* _this = reinterpret_cast< JPEGRecompression* >(object);
  (void)_this;
}
void JPEGRecompression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JPEGRecompression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JPEGRecompression& JPEGRecompression::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JPEGRecompression_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void JPEGRecompression::Clear() {
// @@protoc_insertion_point(message_clear_start:JPEGRecompression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qmax_) -
      reinterpret_cast<char*>(&qmin_)) + sizeof(qmax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JPEGRecompression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 qmin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          qmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 qmax = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          qmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JPEGRecompression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JPEGRecompression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 qmin = 1;
  if (this->qmin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_qmin(), target);
  }

  // int32 qmax = 2;
  if (this->qmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_qmax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JPEGRecompression)
  return target;
}

size_t JPEGRecompression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JPEGRecompression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 qmin = 1;
  if (this->qmin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_qmin());
  }

  // int32 qmax = 2;
  if (this->qmax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_qmax());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JPEGRecompression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JPEGRecompression)
  GOOGLE_DCHECK_NE(&from, this);
  const JPEGRecompression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JPEGRecompression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JPEGRecompression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JPEGRecompression)
    MergeFrom(*source);
  }
}

void JPEGRecompression::MergeFrom(const JPEGRecompression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JPEGRecompression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qmin() != 0) {
    _internal_set_qmin(from._internal_qmin());
  }
  if (from.qmax() != 0) {
    _internal_set_qmax(from._internal_qmax());
  }
}

void JPEGRecompression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JPEGRecompression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JPEGRecompression::CopyFrom(const JPEGRecompression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JPEGRecompression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JPEGRecompression::IsInitialized() const {
  return true;
}

void JPEGRecompression::InternalSwap(JPEGRecompression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JPEGRecompression, qmax_)
      + sizeof(JPEGRecompression::qmax_)
      - PROTOBUF_FIELD_OFFSET(JPEGRecompression, qmin_)>(
          reinterpret_cast<char*>(&qmin_),
          reinterpret_cast<char*>(&other->qmin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JPEGRecompression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogoDataParams::InitAsDefaultInstance() {
}
class LogoDataParams::_Internal {
 public:
};

LogoDataParams::LogoDataParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  background_crop_size_range_(arena),
  combination_modes_(arena),
  alpha_range_(arena),
  jpeg_recompress_range_(arena),
  contrast_(arena),
  color_tint_(arena),
  multi_dataset_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogoDataParams)
}
LogoDataParams::LogoDataParams(const LogoDataParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      background_crop_size_range_(from.background_crop_size_range_),
      combination_modes_(from.combination_modes_),
      alpha_range_(from.alpha_range_),
      jpeg_recompress_range_(from.jpeg_recompress_range_),
      contrast_(from.contrast_),
      color_tint_(from.color_tint_),
      multi_dataset_(from.multi_dataset_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  output_logos_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output_logos_dataset().empty()) {
    output_logos_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_output_logos_dataset(),
      GetArena());
  }
  pos_logos_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pos_logos_dataset().empty()) {
    pos_logos_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pos_logos_dataset(),
      GetArena());
  }
  neg_logos_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_neg_logos_dataset().empty()) {
    neg_logos_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_neg_logos_dataset(),
      GetArena());
  }
  background_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_background_dataset().empty()) {
    background_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_background_dataset(),
      GetArena());
  }
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mode().empty()) {
    mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mode(),
      GetArena());
  }
  ::memcpy(&pos_logos_ratio_, &from.pos_logos_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&white_bg_prob_) -
    reinterpret_cast<char*>(&pos_logos_ratio_)) + sizeof(white_bg_prob_));
  // @@protoc_insertion_point(copy_constructor:LogoDataParams)
}

void LogoDataParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogoDataParams_proto_2futils_2fdata_5fprovider_2eproto.base);
  output_logos_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pos_logos_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neg_logos_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  background_dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_logos_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&white_bg_prob_) -
      reinterpret_cast<char*>(&pos_logos_ratio_)) + sizeof(white_bg_prob_));
}

LogoDataParams::~LogoDataParams() {
  // @@protoc_insertion_point(destructor:LogoDataParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogoDataParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  output_logos_dataset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pos_logos_dataset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neg_logos_dataset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  background_dataset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogoDataParams::ArenaDtor(void* object) {
  LogoDataParams* _this = reinterpret_cast< LogoDataParams* >(object);
  (void)_this;
}
void LogoDataParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogoDataParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogoDataParams& LogoDataParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogoDataParams_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void LogoDataParams::Clear() {
// @@protoc_insertion_point(message_clear_start:LogoDataParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  background_crop_size_range_.Clear();
  combination_modes_.Clear();
  alpha_range_.Clear();
  jpeg_recompress_range_.Clear();
  contrast_.Clear();
  color_tint_.Clear();
  multi_dataset_.Clear();
  output_logos_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pos_logos_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  neg_logos_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  background_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&pos_logos_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&white_bg_prob_) -
      reinterpret_cast<char*>(&pos_logos_ratio_)) + sizeof(white_bg_prob_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoDataParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string output_logos_dataset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_output_logos_dataset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LogoDataParams.output_logos_dataset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pos_logos_dataset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pos_logos_dataset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LogoDataParams.pos_logos_dataset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string neg_logos_dataset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_neg_logos_dataset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LogoDataParams.neg_logos_dataset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pos_logos_pregenerated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pos_logos_pregenerated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool neg_logos_pregenerated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          neg_logos_pregenerated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string background_dataset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_background_dataset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LogoDataParams.background_dataset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pos_logos_ratio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          pos_logos_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float neg_logos_ratio = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          neg_logos_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 output_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          output_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 logo_working_res = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          logo_working_res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float alpha_crop_threshold = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          alpha_crop_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 background_crop_size_range = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_background_crop_size_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_background_crop_size_range(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_logo_size_of_image = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          min_logo_size_of_image_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_logo_size_of_image = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          max_logo_size_of_image_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 min_logo_size = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          min_logo_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float max_blur = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          max_blur_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float color_swap_prob = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          color_swap_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string combination_modes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_combination_modes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LogoDataParams.combination_modes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float alpha_range = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_alpha_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157) {
          _internal_add_alpha_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 jpeg_recompress_range = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_jpeg_recompress_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160) {
          _internal_add_jpeg_recompress_range(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float rotate = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          rotate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rot90 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          rot90_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool horizontal_flips = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          horizontal_flips_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grayscale = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          grayscale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float contrast = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_contrast(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205) {
          _internal_add_contrast(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float color_tint = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_color_tint(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213) {
          _internal_add_color_tint(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool use_neg_logo_label_index = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          use_neg_logo_label_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nologo_label_ind = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          nologo_label_ind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float max_logo_out_of_image = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          max_logo_out_of_image_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool remove_nologo_bboxes = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          remove_nologo_bboxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 full_image_crop = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          full_image_crop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float working_res_scale = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          working_res_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_min_overlap_of_window_threshold = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          pos_min_overlap_of_window_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_max_overlap_of_window_threshold = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pos_max_overlap_of_window_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float neg_overlap_of_logo_threshold = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          neg_overlap_of_logo_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_overlap_of_logo_threshold = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          pos_overlap_of_logo_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float overlap_max_logo_aspect = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          overlap_max_logo_aspect_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 num_views = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          num_views_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float white_bg_prob = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          white_bg_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .MultiDataset multi_dataset = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_multi_dataset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      // string mode = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LogoDataParams.mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogoDataParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogoDataParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string output_logos_dataset = 1;
  if (this->output_logos_dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output_logos_dataset().data(), static_cast<int>(this->_internal_output_logos_dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogoDataParams.output_logos_dataset");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output_logos_dataset(), target);
  }

  // string pos_logos_dataset = 2;
  if (this->pos_logos_dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pos_logos_dataset().data(), static_cast<int>(this->_internal_pos_logos_dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogoDataParams.pos_logos_dataset");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pos_logos_dataset(), target);
  }

  // string neg_logos_dataset = 3;
  if (this->neg_logos_dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_neg_logos_dataset().data(), static_cast<int>(this->_internal_neg_logos_dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogoDataParams.neg_logos_dataset");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_neg_logos_dataset(), target);
  }

  // bool pos_logos_pregenerated = 4;
  if (this->pos_logos_pregenerated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_pos_logos_pregenerated(), target);
  }

  // bool neg_logos_pregenerated = 5;
  if (this->neg_logos_pregenerated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_neg_logos_pregenerated(), target);
  }

  // string background_dataset = 6;
  if (this->background_dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_background_dataset().data(), static_cast<int>(this->_internal_background_dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogoDataParams.background_dataset");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_background_dataset(), target);
  }

  // float pos_logos_ratio = 7;
  if (!(this->pos_logos_ratio() <= 0 && this->pos_logos_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_pos_logos_ratio(), target);
  }

  // float neg_logos_ratio = 8;
  if (!(this->neg_logos_ratio() <= 0 && this->neg_logos_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_neg_logos_ratio(), target);
  }

  // int32 output_size = 9;
  if (this->output_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_output_size(), target);
  }

  // int32 logo_working_res = 10;
  if (this->logo_working_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_logo_working_res(), target);
  }

  // float alpha_crop_threshold = 11;
  if (!(this->alpha_crop_threshold() <= 0 && this->alpha_crop_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_alpha_crop_threshold(), target);
  }

  // repeated int32 background_crop_size_range = 12;
  {
    int byte_size = _background_crop_size_range_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          12, _internal_background_crop_size_range(), byte_size, target);
    }
  }

  // float min_logo_size_of_image = 13;
  if (!(this->min_logo_size_of_image() <= 0 && this->min_logo_size_of_image() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_min_logo_size_of_image(), target);
  }

  // float max_logo_size_of_image = 14;
  if (!(this->max_logo_size_of_image() <= 0 && this->max_logo_size_of_image() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_max_logo_size_of_image(), target);
  }

  // int32 min_logo_size = 15;
  if (this->min_logo_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_min_logo_size(), target);
  }

  // float max_blur = 16;
  if (!(this->max_blur() <= 0 && this->max_blur() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_max_blur(), target);
  }

  // float color_swap_prob = 17;
  if (!(this->color_swap_prob() <= 0 && this->color_swap_prob() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_color_swap_prob(), target);
  }

  // repeated string combination_modes = 18;
  for (int i = 0, n = this->_internal_combination_modes_size(); i < n; i++) {
    const auto& s = this->_internal_combination_modes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogoDataParams.combination_modes");
    target = stream->WriteString(18, s, target);
  }

  // repeated float alpha_range = 19;
  if (this->_internal_alpha_range_size() > 0) {
    target = stream->WriteFixedPacked(19, _internal_alpha_range(), target);
  }

  // repeated int32 jpeg_recompress_range = 20;
  {
    int byte_size = _jpeg_recompress_range_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          20, _internal_jpeg_recompress_range(), byte_size, target);
    }
  }

  // float rotate = 21;
  if (!(this->rotate() <= 0 && this->rotate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_rotate(), target);
  }

  // float rot90 = 22;
  if (!(this->rot90() <= 0 && this->rot90() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_rot90(), target);
  }

  // bool horizontal_flips = 23;
  if (this->horizontal_flips() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_horizontal_flips(), target);
  }

  // bool grayscale = 24;
  if (this->grayscale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_grayscale(), target);
  }

  // repeated float contrast = 25;
  if (this->_internal_contrast_size() > 0) {
    target = stream->WriteFixedPacked(25, _internal_contrast(), target);
  }

  // repeated float color_tint = 26;
  if (this->_internal_color_tint_size() > 0) {
    target = stream->WriteFixedPacked(26, _internal_color_tint(), target);
  }

  // bool use_neg_logo_label_index = 27;
  if (this->use_neg_logo_label_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_use_neg_logo_label_index(), target);
  }

  // int32 nologo_label_ind = 28;
  if (this->nologo_label_ind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_nologo_label_ind(), target);
  }

  // float max_logo_out_of_image = 29;
  if (!(this->max_logo_out_of_image() <= 0 && this->max_logo_out_of_image() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(29, this->_internal_max_logo_out_of_image(), target);
  }

  // bool remove_nologo_bboxes = 30;
  if (this->remove_nologo_bboxes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_remove_nologo_bboxes(), target);
  }

  // int32 full_image_crop = 31;
  if (this->full_image_crop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_full_image_crop(), target);
  }

  // float working_res_scale = 32;
  if (!(this->working_res_scale() <= 0 && this->working_res_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_working_res_scale(), target);
  }

  // float pos_min_overlap_of_window_threshold = 33;
  if (!(this->pos_min_overlap_of_window_threshold() <= 0 && this->pos_min_overlap_of_window_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_pos_min_overlap_of_window_threshold(), target);
  }

  // float pos_max_overlap_of_window_threshold = 34;
  if (!(this->pos_max_overlap_of_window_threshold() <= 0 && this->pos_max_overlap_of_window_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(34, this->_internal_pos_max_overlap_of_window_threshold(), target);
  }

  // float neg_overlap_of_logo_threshold = 35;
  if (!(this->neg_overlap_of_logo_threshold() <= 0 && this->neg_overlap_of_logo_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->_internal_neg_overlap_of_logo_threshold(), target);
  }

  // float pos_overlap_of_logo_threshold = 36;
  if (!(this->pos_overlap_of_logo_threshold() <= 0 && this->pos_overlap_of_logo_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_pos_overlap_of_logo_threshold(), target);
  }

  // float overlap_max_logo_aspect = 37;
  if (!(this->overlap_max_logo_aspect() <= 0 && this->overlap_max_logo_aspect() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(37, this->_internal_overlap_max_logo_aspect(), target);
  }

  // int32 num_views = 38;
  if (this->num_views() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_num_views(), target);
  }

  // float white_bg_prob = 39;
  if (!(this->white_bg_prob() <= 0 && this->white_bg_prob() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(39, this->_internal_white_bg_prob(), target);
  }

  // repeated .MultiDataset multi_dataset = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_dataset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_multi_dataset(i), target, stream);
  }

  // string mode = 41;
  if (this->mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogoDataParams.mode");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogoDataParams)
  return target;
}

size_t LogoDataParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogoDataParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 background_crop_size_range = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->background_crop_size_range_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _background_crop_size_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string combination_modes = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(combination_modes_.size());
  for (int i = 0, n = combination_modes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      combination_modes_.Get(i));
  }

  // repeated float alpha_range = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_alpha_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _alpha_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 jpeg_recompress_range = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->jpeg_recompress_range_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _jpeg_recompress_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float contrast = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_contrast_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contrast_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float color_tint = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_color_tint_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _color_tint_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .MultiDataset multi_dataset = 40;
  total_size += 2UL * this->_internal_multi_dataset_size();
  for (const auto& msg : this->multi_dataset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string output_logos_dataset = 1;
  if (this->output_logos_dataset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_logos_dataset());
  }

  // string pos_logos_dataset = 2;
  if (this->pos_logos_dataset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pos_logos_dataset());
  }

  // string neg_logos_dataset = 3;
  if (this->neg_logos_dataset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_neg_logos_dataset());
  }

  // string background_dataset = 6;
  if (this->background_dataset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_background_dataset());
  }

  // string mode = 41;
  if (this->mode().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // float pos_logos_ratio = 7;
  if (!(this->pos_logos_ratio() <= 0 && this->pos_logos_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float neg_logos_ratio = 8;
  if (!(this->neg_logos_ratio() <= 0 && this->neg_logos_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 output_size = 9;
  if (this->output_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_output_size());
  }

  // int32 logo_working_res = 10;
  if (this->logo_working_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_logo_working_res());
  }

  // float alpha_crop_threshold = 11;
  if (!(this->alpha_crop_threshold() <= 0 && this->alpha_crop_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_logo_size_of_image = 13;
  if (!(this->min_logo_size_of_image() <= 0 && this->min_logo_size_of_image() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_logo_size_of_image = 14;
  if (!(this->max_logo_size_of_image() <= 0 && this->max_logo_size_of_image() >= 0)) {
    total_size += 1 + 4;
  }

  // bool pos_logos_pregenerated = 4;
  if (this->pos_logos_pregenerated() != 0) {
    total_size += 1 + 1;
  }

  // bool neg_logos_pregenerated = 5;
  if (this->neg_logos_pregenerated() != 0) {
    total_size += 1 + 1;
  }

  // bool horizontal_flips = 23;
  if (this->horizontal_flips() != 0) {
    total_size += 2 + 1;
  }

  // bool grayscale = 24;
  if (this->grayscale() != 0) {
    total_size += 2 + 1;
  }

  // int32 min_logo_size = 15;
  if (this->min_logo_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_logo_size());
  }

  // float max_blur = 16;
  if (!(this->max_blur() <= 0 && this->max_blur() >= 0)) {
    total_size += 2 + 4;
  }

  // float color_swap_prob = 17;
  if (!(this->color_swap_prob() <= 0 && this->color_swap_prob() >= 0)) {
    total_size += 2 + 4;
  }

  // float rotate = 21;
  if (!(this->rotate() <= 0 && this->rotate() >= 0)) {
    total_size += 2 + 4;
  }

  // float rot90 = 22;
  if (!(this->rot90() <= 0 && this->rot90() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 nologo_label_ind = 28;
  if (this->nologo_label_ind() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nologo_label_ind());
  }

  // bool use_neg_logo_label_index = 27;
  if (this->use_neg_logo_label_index() != 0) {
    total_size += 2 + 1;
  }

  // bool remove_nologo_bboxes = 30;
  if (this->remove_nologo_bboxes() != 0) {
    total_size += 2 + 1;
  }

  // float max_logo_out_of_image = 29;
  if (!(this->max_logo_out_of_image() <= 0 && this->max_logo_out_of_image() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 full_image_crop = 31;
  if (this->full_image_crop() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_full_image_crop());
  }

  // float working_res_scale = 32;
  if (!(this->working_res_scale() <= 0 && this->working_res_scale() >= 0)) {
    total_size += 2 + 4;
  }

  // float pos_min_overlap_of_window_threshold = 33;
  if (!(this->pos_min_overlap_of_window_threshold() <= 0 && this->pos_min_overlap_of_window_threshold() >= 0)) {
    total_size += 2 + 4;
  }

  // float pos_max_overlap_of_window_threshold = 34;
  if (!(this->pos_max_overlap_of_window_threshold() <= 0 && this->pos_max_overlap_of_window_threshold() >= 0)) {
    total_size += 2 + 4;
  }

  // float neg_overlap_of_logo_threshold = 35;
  if (!(this->neg_overlap_of_logo_threshold() <= 0 && this->neg_overlap_of_logo_threshold() >= 0)) {
    total_size += 2 + 4;
  }

  // float pos_overlap_of_logo_threshold = 36;
  if (!(this->pos_overlap_of_logo_threshold() <= 0 && this->pos_overlap_of_logo_threshold() >= 0)) {
    total_size += 2 + 4;
  }

  // float overlap_max_logo_aspect = 37;
  if (!(this->overlap_max_logo_aspect() <= 0 && this->overlap_max_logo_aspect() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 num_views = 38;
  if (this->num_views() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_views());
  }

  // float white_bg_prob = 39;
  if (!(this->white_bg_prob() <= 0 && this->white_bg_prob() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoDataParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogoDataParams)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoDataParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogoDataParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogoDataParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogoDataParams)
    MergeFrom(*source);
  }
}

void LogoDataParams::MergeFrom(const LogoDataParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogoDataParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  background_crop_size_range_.MergeFrom(from.background_crop_size_range_);
  combination_modes_.MergeFrom(from.combination_modes_);
  alpha_range_.MergeFrom(from.alpha_range_);
  jpeg_recompress_range_.MergeFrom(from.jpeg_recompress_range_);
  contrast_.MergeFrom(from.contrast_);
  color_tint_.MergeFrom(from.color_tint_);
  multi_dataset_.MergeFrom(from.multi_dataset_);
  if (from.output_logos_dataset().size() > 0) {
    _internal_set_output_logos_dataset(from._internal_output_logos_dataset());
  }
  if (from.pos_logos_dataset().size() > 0) {
    _internal_set_pos_logos_dataset(from._internal_pos_logos_dataset());
  }
  if (from.neg_logos_dataset().size() > 0) {
    _internal_set_neg_logos_dataset(from._internal_neg_logos_dataset());
  }
  if (from.background_dataset().size() > 0) {
    _internal_set_background_dataset(from._internal_background_dataset());
  }
  if (from.mode().size() > 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (!(from.pos_logos_ratio() <= 0 && from.pos_logos_ratio() >= 0)) {
    _internal_set_pos_logos_ratio(from._internal_pos_logos_ratio());
  }
  if (!(from.neg_logos_ratio() <= 0 && from.neg_logos_ratio() >= 0)) {
    _internal_set_neg_logos_ratio(from._internal_neg_logos_ratio());
  }
  if (from.output_size() != 0) {
    _internal_set_output_size(from._internal_output_size());
  }
  if (from.logo_working_res() != 0) {
    _internal_set_logo_working_res(from._internal_logo_working_res());
  }
  if (!(from.alpha_crop_threshold() <= 0 && from.alpha_crop_threshold() >= 0)) {
    _internal_set_alpha_crop_threshold(from._internal_alpha_crop_threshold());
  }
  if (!(from.min_logo_size_of_image() <= 0 && from.min_logo_size_of_image() >= 0)) {
    _internal_set_min_logo_size_of_image(from._internal_min_logo_size_of_image());
  }
  if (!(from.max_logo_size_of_image() <= 0 && from.max_logo_size_of_image() >= 0)) {
    _internal_set_max_logo_size_of_image(from._internal_max_logo_size_of_image());
  }
  if (from.pos_logos_pregenerated() != 0) {
    _internal_set_pos_logos_pregenerated(from._internal_pos_logos_pregenerated());
  }
  if (from.neg_logos_pregenerated() != 0) {
    _internal_set_neg_logos_pregenerated(from._internal_neg_logos_pregenerated());
  }
  if (from.horizontal_flips() != 0) {
    _internal_set_horizontal_flips(from._internal_horizontal_flips());
  }
  if (from.grayscale() != 0) {
    _internal_set_grayscale(from._internal_grayscale());
  }
  if (from.min_logo_size() != 0) {
    _internal_set_min_logo_size(from._internal_min_logo_size());
  }
  if (!(from.max_blur() <= 0 && from.max_blur() >= 0)) {
    _internal_set_max_blur(from._internal_max_blur());
  }
  if (!(from.color_swap_prob() <= 0 && from.color_swap_prob() >= 0)) {
    _internal_set_color_swap_prob(from._internal_color_swap_prob());
  }
  if (!(from.rotate() <= 0 && from.rotate() >= 0)) {
    _internal_set_rotate(from._internal_rotate());
  }
  if (!(from.rot90() <= 0 && from.rot90() >= 0)) {
    _internal_set_rot90(from._internal_rot90());
  }
  if (from.nologo_label_ind() != 0) {
    _internal_set_nologo_label_ind(from._internal_nologo_label_ind());
  }
  if (from.use_neg_logo_label_index() != 0) {
    _internal_set_use_neg_logo_label_index(from._internal_use_neg_logo_label_index());
  }
  if (from.remove_nologo_bboxes() != 0) {
    _internal_set_remove_nologo_bboxes(from._internal_remove_nologo_bboxes());
  }
  if (!(from.max_logo_out_of_image() <= 0 && from.max_logo_out_of_image() >= 0)) {
    _internal_set_max_logo_out_of_image(from._internal_max_logo_out_of_image());
  }
  if (from.full_image_crop() != 0) {
    _internal_set_full_image_crop(from._internal_full_image_crop());
  }
  if (!(from.working_res_scale() <= 0 && from.working_res_scale() >= 0)) {
    _internal_set_working_res_scale(from._internal_working_res_scale());
  }
  if (!(from.pos_min_overlap_of_window_threshold() <= 0 && from.pos_min_overlap_of_window_threshold() >= 0)) {
    _internal_set_pos_min_overlap_of_window_threshold(from._internal_pos_min_overlap_of_window_threshold());
  }
  if (!(from.pos_max_overlap_of_window_threshold() <= 0 && from.pos_max_overlap_of_window_threshold() >= 0)) {
    _internal_set_pos_max_overlap_of_window_threshold(from._internal_pos_max_overlap_of_window_threshold());
  }
  if (!(from.neg_overlap_of_logo_threshold() <= 0 && from.neg_overlap_of_logo_threshold() >= 0)) {
    _internal_set_neg_overlap_of_logo_threshold(from._internal_neg_overlap_of_logo_threshold());
  }
  if (!(from.pos_overlap_of_logo_threshold() <= 0 && from.pos_overlap_of_logo_threshold() >= 0)) {
    _internal_set_pos_overlap_of_logo_threshold(from._internal_pos_overlap_of_logo_threshold());
  }
  if (!(from.overlap_max_logo_aspect() <= 0 && from.overlap_max_logo_aspect() >= 0)) {
    _internal_set_overlap_max_logo_aspect(from._internal_overlap_max_logo_aspect());
  }
  if (from.num_views() != 0) {
    _internal_set_num_views(from._internal_num_views());
  }
  if (!(from.white_bg_prob() <= 0 && from.white_bg_prob() >= 0)) {
    _internal_set_white_bg_prob(from._internal_white_bg_prob());
  }
}

void LogoDataParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogoDataParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoDataParams::CopyFrom(const LogoDataParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogoDataParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoDataParams::IsInitialized() const {
  return true;
}

void LogoDataParams::InternalSwap(LogoDataParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  background_crop_size_range_.InternalSwap(&other->background_crop_size_range_);
  combination_modes_.InternalSwap(&other->combination_modes_);
  alpha_range_.InternalSwap(&other->alpha_range_);
  jpeg_recompress_range_.InternalSwap(&other->jpeg_recompress_range_);
  contrast_.InternalSwap(&other->contrast_);
  color_tint_.InternalSwap(&other->color_tint_);
  multi_dataset_.InternalSwap(&other->multi_dataset_);
  output_logos_dataset_.Swap(&other->output_logos_dataset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pos_logos_dataset_.Swap(&other->pos_logos_dataset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  neg_logos_dataset_.Swap(&other->neg_logos_dataset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  background_dataset_.Swap(&other->background_dataset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_.Swap(&other->mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogoDataParams, white_bg_prob_)
      + sizeof(LogoDataParams::white_bg_prob_)
      - PROTOBUF_FIELD_OFFSET(LogoDataParams, pos_logos_ratio_)>(
          reinterpret_cast<char*>(&pos_logos_ratio_),
          reinterpret_cast<char*>(&other->pos_logos_ratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoDataParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WhitespaceTokenizer::InitAsDefaultInstance() {
}
class WhitespaceTokenizer::_Internal {
 public:
};

WhitespaceTokenizer::WhitespaceTokenizer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WhitespaceTokenizer)
}
WhitespaceTokenizer::WhitespaceTokenizer(const WhitespaceTokenizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pad_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pad_token().empty()) {
    pad_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pad_token(),
      GetArena());
  }
  ::memcpy(&max_length_, &from.max_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_case_) -
    reinterpret_cast<char*>(&max_length_)) + sizeof(preserve_case_));
  // @@protoc_insertion_point(copy_constructor:WhitespaceTokenizer)
}

void WhitespaceTokenizer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WhitespaceTokenizer_proto_2futils_2fdata_5fprovider_2eproto.base);
  pad_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preserve_case_) -
      reinterpret_cast<char*>(&max_length_)) + sizeof(preserve_case_));
}

WhitespaceTokenizer::~WhitespaceTokenizer() {
  // @@protoc_insertion_point(destructor:WhitespaceTokenizer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WhitespaceTokenizer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pad_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WhitespaceTokenizer::ArenaDtor(void* object) {
  WhitespaceTokenizer* _this = reinterpret_cast< WhitespaceTokenizer* >(object);
  (void)_this;
}
void WhitespaceTokenizer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WhitespaceTokenizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WhitespaceTokenizer& WhitespaceTokenizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WhitespaceTokenizer_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void WhitespaceTokenizer::Clear() {
// @@protoc_insertion_point(message_clear_start:WhitespaceTokenizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pad_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&max_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preserve_case_) -
      reinterpret_cast<char*>(&max_length_)) + sizeof(preserve_case_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WhitespaceTokenizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pad_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pad_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WhitespaceTokenizer.pad_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_strip_special = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          no_strip_special_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool preserve_case = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          preserve_case_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WhitespaceTokenizer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WhitespaceTokenizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pad_token = 1;
  if (this->pad_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pad_token().data(), static_cast<int>(this->_internal_pad_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WhitespaceTokenizer.pad_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pad_token(), target);
  }

  // int32 max_length = 2;
  if (this->max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_length(), target);
  }

  // bool no_strip_special = 3;
  if (this->no_strip_special() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_no_strip_special(), target);
  }

  // bool preserve_case = 4;
  if (this->preserve_case() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_preserve_case(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WhitespaceTokenizer)
  return target;
}

size_t WhitespaceTokenizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WhitespaceTokenizer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pad_token = 1;
  if (this->pad_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pad_token());
  }

  // int32 max_length = 2;
  if (this->max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_length());
  }

  // bool no_strip_special = 3;
  if (this->no_strip_special() != 0) {
    total_size += 1 + 1;
  }

  // bool preserve_case = 4;
  if (this->preserve_case() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WhitespaceTokenizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WhitespaceTokenizer)
  GOOGLE_DCHECK_NE(&from, this);
  const WhitespaceTokenizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WhitespaceTokenizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WhitespaceTokenizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WhitespaceTokenizer)
    MergeFrom(*source);
  }
}

void WhitespaceTokenizer::MergeFrom(const WhitespaceTokenizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WhitespaceTokenizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pad_token().size() > 0) {
    _internal_set_pad_token(from._internal_pad_token());
  }
  if (from.max_length() != 0) {
    _internal_set_max_length(from._internal_max_length());
  }
  if (from.no_strip_special() != 0) {
    _internal_set_no_strip_special(from._internal_no_strip_special());
  }
  if (from.preserve_case() != 0) {
    _internal_set_preserve_case(from._internal_preserve_case());
  }
}

void WhitespaceTokenizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WhitespaceTokenizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhitespaceTokenizer::CopyFrom(const WhitespaceTokenizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WhitespaceTokenizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhitespaceTokenizer::IsInitialized() const {
  return true;
}

void WhitespaceTokenizer::InternalSwap(WhitespaceTokenizer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pad_token_.Swap(&other->pad_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WhitespaceTokenizer, preserve_case_)
      + sizeof(WhitespaceTokenizer::preserve_case_)
      - PROTOBUF_FIELD_OFFSET(WhitespaceTokenizer, max_length_)>(
          reinterpret_cast<char*>(&max_length_),
          reinterpret_cast<char*>(&other->max_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WhitespaceTokenizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TokenIndexer::InitAsDefaultInstance() {
}
class TokenIndexer::_Internal {
 public:
};

TokenIndexer::TokenIndexer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TokenIndexer)
}
TokenIndexer::TokenIndexer(const TokenIndexer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vocab_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vocab_path().empty()) {
    vocab_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vocab_path(),
      GetArena());
  }
  num_oov_buckets_ = from.num_oov_buckets_;
  // @@protoc_insertion_point(copy_constructor:TokenIndexer)
}

void TokenIndexer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenIndexer_proto_2futils_2fdata_5fprovider_2eproto.base);
  vocab_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_oov_buckets_ = 0;
}

TokenIndexer::~TokenIndexer() {
  // @@protoc_insertion_point(destructor:TokenIndexer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TokenIndexer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vocab_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenIndexer::ArenaDtor(void* object) {
  TokenIndexer* _this = reinterpret_cast< TokenIndexer* >(object);
  (void)_this;
}
void TokenIndexer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenIndexer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenIndexer& TokenIndexer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenIndexer_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void TokenIndexer::Clear() {
// @@protoc_insertion_point(message_clear_start:TokenIndexer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vocab_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  num_oov_buckets_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenIndexer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vocab_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vocab_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TokenIndexer.vocab_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_oov_buckets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_oov_buckets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenIndexer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TokenIndexer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vocab_path = 1;
  if (this->vocab_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vocab_path().data(), static_cast<int>(this->_internal_vocab_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TokenIndexer.vocab_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vocab_path(), target);
  }

  // int32 num_oov_buckets = 2;
  if (this->num_oov_buckets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_oov_buckets(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TokenIndexer)
  return target;
}

size_t TokenIndexer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TokenIndexer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vocab_path = 1;
  if (this->vocab_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vocab_path());
  }

  // int32 num_oov_buckets = 2;
  if (this->num_oov_buckets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_oov_buckets());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenIndexer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TokenIndexer)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenIndexer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenIndexer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TokenIndexer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TokenIndexer)
    MergeFrom(*source);
  }
}

void TokenIndexer::MergeFrom(const TokenIndexer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TokenIndexer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vocab_path().size() > 0) {
    _internal_set_vocab_path(from._internal_vocab_path());
  }
  if (from.num_oov_buckets() != 0) {
    _internal_set_num_oov_buckets(from._internal_num_oov_buckets());
  }
}

void TokenIndexer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TokenIndexer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenIndexer::CopyFrom(const TokenIndexer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TokenIndexer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenIndexer::IsInitialized() const {
  return true;
}

void TokenIndexer::InternalSwap(TokenIndexer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vocab_path_.Swap(&other->vocab_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(num_oov_buckets_, other->num_oov_buckets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenIndexer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioMFCCTransform::InitAsDefaultInstance() {
}
class AudioMFCCTransform::_Internal {
 public:
};

AudioMFCCTransform::AudioMFCCTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AudioMFCCTransform)
}
AudioMFCCTransform::AudioMFCCTransform(const AudioMFCCTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&numcep_, &from.numcep_,
    static_cast<size_t>(reinterpret_cast<char*>(&numcontext_) -
    reinterpret_cast<char*>(&numcep_)) + sizeof(numcontext_));
  // @@protoc_insertion_point(copy_constructor:AudioMFCCTransform)
}

void AudioMFCCTransform::SharedCtor() {
  ::memset(&numcep_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numcontext_) -
      reinterpret_cast<char*>(&numcep_)) + sizeof(numcontext_));
}

AudioMFCCTransform::~AudioMFCCTransform() {
  // @@protoc_insertion_point(destructor:AudioMFCCTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioMFCCTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AudioMFCCTransform::ArenaDtor(void* object) {
  AudioMFCCTransform* _this = reinterpret_cast< AudioMFCCTransform* >(object);
  (void)_this;
}
void AudioMFCCTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioMFCCTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioMFCCTransform& AudioMFCCTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioMFCCTransform_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void AudioMFCCTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:AudioMFCCTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&numcep_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numcontext_) -
      reinterpret_cast<char*>(&numcep_)) + sizeof(numcontext_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioMFCCTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 numcep = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          numcep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 numcontext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          numcontext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioMFCCTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AudioMFCCTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 numcep = 1;
  if (this->numcep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_numcep(), target);
  }

  // int32 numcontext = 2;
  if (this->numcontext() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_numcontext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AudioMFCCTransform)
  return target;
}

size_t AudioMFCCTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AudioMFCCTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 numcep = 1;
  if (this->numcep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numcep());
  }

  // int32 numcontext = 2;
  if (this->numcontext() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numcontext());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioMFCCTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AudioMFCCTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioMFCCTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioMFCCTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AudioMFCCTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AudioMFCCTransform)
    MergeFrom(*source);
  }
}

void AudioMFCCTransform::MergeFrom(const AudioMFCCTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AudioMFCCTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.numcep() != 0) {
    _internal_set_numcep(from._internal_numcep());
  }
  if (from.numcontext() != 0) {
    _internal_set_numcontext(from._internal_numcontext());
  }
}

void AudioMFCCTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AudioMFCCTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioMFCCTransform::CopyFrom(const AudioMFCCTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AudioMFCCTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioMFCCTransform::IsInitialized() const {
  return true;
}

void AudioMFCCTransform::InternalSwap(AudioMFCCTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioMFCCTransform, numcontext_)
      + sizeof(AudioMFCCTransform::numcontext_)
      - PROTOBUF_FIELD_OFFSET(AudioMFCCTransform, numcep_)>(
          reinterpret_cast<char*>(&numcep_),
          reinterpret_cast<char*>(&other->numcep_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioMFCCTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FilterInvalidItems::InitAsDefaultInstance() {
}
class FilterInvalidItems::_Internal {
 public:
};

FilterInvalidItems::FilterInvalidItems(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FilterInvalidItems)
}
FilterInvalidItems::FilterInvalidItems(const FilterInvalidItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&require_images_, &from.require_images_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_labels_) -
    reinterpret_cast<char*>(&require_images_)) + sizeof(require_labels_));
  // @@protoc_insertion_point(copy_constructor:FilterInvalidItems)
}

void FilterInvalidItems::SharedCtor() {
  ::memset(&require_images_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_labels_) -
      reinterpret_cast<char*>(&require_images_)) + sizeof(require_labels_));
}

FilterInvalidItems::~FilterInvalidItems() {
  // @@protoc_insertion_point(destructor:FilterInvalidItems)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilterInvalidItems::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FilterInvalidItems::ArenaDtor(void* object) {
  FilterInvalidItems* _this = reinterpret_cast< FilterInvalidItems* >(object);
  (void)_this;
}
void FilterInvalidItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterInvalidItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterInvalidItems& FilterInvalidItems::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterInvalidItems_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void FilterInvalidItems::Clear() {
// @@protoc_insertion_point(message_clear_start:FilterInvalidItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&require_images_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_labels_) -
      reinterpret_cast<char*>(&require_images_)) + sizeof(require_labels_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterInvalidItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool require_images = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          require_images_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool require_bboxes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          require_bboxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool require_labels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          require_labels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterInvalidItems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FilterInvalidItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool require_images = 1;
  if (this->require_images() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_require_images(), target);
  }

  // bool require_bboxes = 2;
  if (this->require_bboxes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_require_bboxes(), target);
  }

  // bool require_labels = 3;
  if (this->require_labels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_require_labels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FilterInvalidItems)
  return target;
}

size_t FilterInvalidItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FilterInvalidItems)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool require_images = 1;
  if (this->require_images() != 0) {
    total_size += 1 + 1;
  }

  // bool require_bboxes = 2;
  if (this->require_bboxes() != 0) {
    total_size += 1 + 1;
  }

  // bool require_labels = 3;
  if (this->require_labels() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterInvalidItems::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FilterInvalidItems)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterInvalidItems* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterInvalidItems>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FilterInvalidItems)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FilterInvalidItems)
    MergeFrom(*source);
  }
}

void FilterInvalidItems::MergeFrom(const FilterInvalidItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FilterInvalidItems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.require_images() != 0) {
    _internal_set_require_images(from._internal_require_images());
  }
  if (from.require_bboxes() != 0) {
    _internal_set_require_bboxes(from._internal_require_bboxes());
  }
  if (from.require_labels() != 0) {
    _internal_set_require_labels(from._internal_require_labels());
  }
}

void FilterInvalidItems::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FilterInvalidItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterInvalidItems::CopyFrom(const FilterInvalidItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FilterInvalidItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterInvalidItems::IsInitialized() const {
  return true;
}

void FilterInvalidItems::InternalSwap(FilterInvalidItems* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterInvalidItems, require_labels_)
      + sizeof(FilterInvalidItems::require_labels_)
      - PROTOBUF_FIELD_OFFSET(FilterInvalidItems, require_images_)>(
          reinterpret_cast<char*>(&require_images_),
          reinterpret_cast<char*>(&other->require_images_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterInvalidItems::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MiniBatchItemStage::InitAsDefaultInstance() {
  ::_MiniBatchItemStage_default_instance_.image_crop_transform_ = const_cast< ::ImageCropTransform*>(
      ::ImageCropTransform::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.label_smoother_ = const_cast< ::LabelSmoother*>(
      ::LabelSmoother::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.label_dropper_ = const_cast< ::LabelDropper*>(
      ::LabelDropper::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.max_num_label_dropper_ = const_cast< ::MaxNumLabelDropper*>(
      ::MaxNumLabelDropper::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.label_weight_ = const_cast< ::LabelWeight*>(
      ::LabelWeight::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.ssd_random_crop_ = const_cast< ::SSDRandomCropOperation*>(
      ::SSDRandomCropOperation::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.relative_crop_transform_ = const_cast< ::RelativeCropTransform*>(
      ::RelativeCropTransform::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.aspect_ratio_transform_ = const_cast< ::AspectRatioTransform*>(
      ::AspectRatioTransform::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.affine_transform_ = const_cast< ::AffineTransform*>(
      ::AffineTransform::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.flip_transform_ = const_cast< ::FlipTransform*>(
      ::FlipTransform::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.jpeg_recompression_ = const_cast< ::JPEGRecompression*>(
      ::JPEGRecompression::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.filter_bbox_ = const_cast< ::FilterBbox*>(
      ::FilterBbox::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.color_transform_ = const_cast< ::ColorTransform*>(
      ::ColorTransform::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.scale_transform_ = const_cast< ::ScaleTransform*>(
      ::ScaleTransform::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.labels_from_bboxes_ = const_cast< ::LabelsFromBboxes*>(
      ::LabelsFromBboxes::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.distortion_transform_ = const_cast< ::DistortionTransform*>(
      ::DistortionTransform::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.whitespace_tokenizer_ = const_cast< ::WhitespaceTokenizer*>(
      ::WhitespaceTokenizer::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.token_indexer_ = const_cast< ::TokenIndexer*>(
      ::TokenIndexer::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.audio_mfcc_transform_ = const_cast< ::AudioMFCCTransform*>(
      ::AudioMFCCTransform::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.ocr_crop_transform_ = const_cast< ::OCRCropTransform*>(
      ::OCRCropTransform::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.filter_invalid_items_ = const_cast< ::FilterInvalidItems*>(
      ::FilterInvalidItems::internal_default_instance());
  ::_MiniBatchItemStage_default_instance_.landmark_align_transform_ = const_cast< ::LandmarkAlignTransform*>(
      ::LandmarkAlignTransform::internal_default_instance());
}
class MiniBatchItemStage::_Internal {
 public:
  static const ::ImageCropTransform& image_crop_transform(const MiniBatchItemStage* msg);
  static const ::LabelSmoother& label_smoother(const MiniBatchItemStage* msg);
  static const ::LabelDropper& label_dropper(const MiniBatchItemStage* msg);
  static const ::MaxNumLabelDropper& max_num_label_dropper(const MiniBatchItemStage* msg);
  static const ::LabelWeight& label_weight(const MiniBatchItemStage* msg);
  static const ::SSDRandomCropOperation& ssd_random_crop(const MiniBatchItemStage* msg);
  static const ::RelativeCropTransform& relative_crop_transform(const MiniBatchItemStage* msg);
  static const ::AspectRatioTransform& aspect_ratio_transform(const MiniBatchItemStage* msg);
  static const ::AffineTransform& affine_transform(const MiniBatchItemStage* msg);
  static const ::FlipTransform& flip_transform(const MiniBatchItemStage* msg);
  static const ::JPEGRecompression& jpeg_recompression(const MiniBatchItemStage* msg);
  static const ::FilterBbox& filter_bbox(const MiniBatchItemStage* msg);
  static const ::ColorTransform& color_transform(const MiniBatchItemStage* msg);
  static const ::ScaleTransform& scale_transform(const MiniBatchItemStage* msg);
  static const ::LabelsFromBboxes& labels_from_bboxes(const MiniBatchItemStage* msg);
  static const ::DistortionTransform& distortion_transform(const MiniBatchItemStage* msg);
  static const ::WhitespaceTokenizer& whitespace_tokenizer(const MiniBatchItemStage* msg);
  static const ::TokenIndexer& token_indexer(const MiniBatchItemStage* msg);
  static const ::AudioMFCCTransform& audio_mfcc_transform(const MiniBatchItemStage* msg);
  static const ::OCRCropTransform& ocr_crop_transform(const MiniBatchItemStage* msg);
  static const ::FilterInvalidItems& filter_invalid_items(const MiniBatchItemStage* msg);
  static const ::LandmarkAlignTransform& landmark_align_transform(const MiniBatchItemStage* msg);
};

const ::ImageCropTransform&
MiniBatchItemStage::_Internal::image_crop_transform(const MiniBatchItemStage* msg) {
  return *msg->stage_.image_crop_transform_;
}
const ::LabelSmoother&
MiniBatchItemStage::_Internal::label_smoother(const MiniBatchItemStage* msg) {
  return *msg->stage_.label_smoother_;
}
const ::LabelDropper&
MiniBatchItemStage::_Internal::label_dropper(const MiniBatchItemStage* msg) {
  return *msg->stage_.label_dropper_;
}
const ::MaxNumLabelDropper&
MiniBatchItemStage::_Internal::max_num_label_dropper(const MiniBatchItemStage* msg) {
  return *msg->stage_.max_num_label_dropper_;
}
const ::LabelWeight&
MiniBatchItemStage::_Internal::label_weight(const MiniBatchItemStage* msg) {
  return *msg->stage_.label_weight_;
}
const ::SSDRandomCropOperation&
MiniBatchItemStage::_Internal::ssd_random_crop(const MiniBatchItemStage* msg) {
  return *msg->stage_.ssd_random_crop_;
}
const ::RelativeCropTransform&
MiniBatchItemStage::_Internal::relative_crop_transform(const MiniBatchItemStage* msg) {
  return *msg->stage_.relative_crop_transform_;
}
const ::AspectRatioTransform&
MiniBatchItemStage::_Internal::aspect_ratio_transform(const MiniBatchItemStage* msg) {
  return *msg->stage_.aspect_ratio_transform_;
}
const ::AffineTransform&
MiniBatchItemStage::_Internal::affine_transform(const MiniBatchItemStage* msg) {
  return *msg->stage_.affine_transform_;
}
const ::FlipTransform&
MiniBatchItemStage::_Internal::flip_transform(const MiniBatchItemStage* msg) {
  return *msg->stage_.flip_transform_;
}
const ::JPEGRecompression&
MiniBatchItemStage::_Internal::jpeg_recompression(const MiniBatchItemStage* msg) {
  return *msg->stage_.jpeg_recompression_;
}
const ::FilterBbox&
MiniBatchItemStage::_Internal::filter_bbox(const MiniBatchItemStage* msg) {
  return *msg->stage_.filter_bbox_;
}
const ::ColorTransform&
MiniBatchItemStage::_Internal::color_transform(const MiniBatchItemStage* msg) {
  return *msg->stage_.color_transform_;
}
const ::ScaleTransform&
MiniBatchItemStage::_Internal::scale_transform(const MiniBatchItemStage* msg) {
  return *msg->stage_.scale_transform_;
}
const ::LabelsFromBboxes&
MiniBatchItemStage::_Internal::labels_from_bboxes(const MiniBatchItemStage* msg) {
  return *msg->stage_.labels_from_bboxes_;
}
const ::DistortionTransform&
MiniBatchItemStage::_Internal::distortion_transform(const MiniBatchItemStage* msg) {
  return *msg->stage_.distortion_transform_;
}
const ::WhitespaceTokenizer&
MiniBatchItemStage::_Internal::whitespace_tokenizer(const MiniBatchItemStage* msg) {
  return *msg->stage_.whitespace_tokenizer_;
}
const ::TokenIndexer&
MiniBatchItemStage::_Internal::token_indexer(const MiniBatchItemStage* msg) {
  return *msg->stage_.token_indexer_;
}
const ::AudioMFCCTransform&
MiniBatchItemStage::_Internal::audio_mfcc_transform(const MiniBatchItemStage* msg) {
  return *msg->stage_.audio_mfcc_transform_;
}
const ::OCRCropTransform&
MiniBatchItemStage::_Internal::ocr_crop_transform(const MiniBatchItemStage* msg) {
  return *msg->stage_.ocr_crop_transform_;
}
const ::FilterInvalidItems&
MiniBatchItemStage::_Internal::filter_invalid_items(const MiniBatchItemStage* msg) {
  return *msg->stage_.filter_invalid_items_;
}
const ::LandmarkAlignTransform&
MiniBatchItemStage::_Internal::landmark_align_transform(const MiniBatchItemStage* msg) {
  return *msg->stage_.landmark_align_transform_;
}
void MiniBatchItemStage::set_allocated_image_crop_transform(::ImageCropTransform* image_crop_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (image_crop_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_crop_transform);
    if (message_arena != submessage_arena) {
      image_crop_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_crop_transform, submessage_arena);
    }
    set_has_image_crop_transform();
    stage_.image_crop_transform_ = image_crop_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.image_crop_transform)
}
void MiniBatchItemStage::set_allocated_label_smoother(::LabelSmoother* label_smoother) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (label_smoother) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(label_smoother);
    if (message_arena != submessage_arena) {
      label_smoother = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_smoother, submessage_arena);
    }
    set_has_label_smoother();
    stage_.label_smoother_ = label_smoother;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.label_smoother)
}
void MiniBatchItemStage::set_allocated_label_dropper(::LabelDropper* label_dropper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (label_dropper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(label_dropper);
    if (message_arena != submessage_arena) {
      label_dropper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_dropper, submessage_arena);
    }
    set_has_label_dropper();
    stage_.label_dropper_ = label_dropper;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.label_dropper)
}
void MiniBatchItemStage::set_allocated_max_num_label_dropper(::MaxNumLabelDropper* max_num_label_dropper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (max_num_label_dropper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(max_num_label_dropper);
    if (message_arena != submessage_arena) {
      max_num_label_dropper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_num_label_dropper, submessage_arena);
    }
    set_has_max_num_label_dropper();
    stage_.max_num_label_dropper_ = max_num_label_dropper;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.max_num_label_dropper)
}
void MiniBatchItemStage::set_allocated_label_weight(::LabelWeight* label_weight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (label_weight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(label_weight);
    if (message_arena != submessage_arena) {
      label_weight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_weight, submessage_arena);
    }
    set_has_label_weight();
    stage_.label_weight_ = label_weight;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.label_weight)
}
void MiniBatchItemStage::set_allocated_ssd_random_crop(::SSDRandomCropOperation* ssd_random_crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (ssd_random_crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ssd_random_crop);
    if (message_arena != submessage_arena) {
      ssd_random_crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssd_random_crop, submessage_arena);
    }
    set_has_ssd_random_crop();
    stage_.ssd_random_crop_ = ssd_random_crop;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.ssd_random_crop)
}
void MiniBatchItemStage::set_allocated_relative_crop_transform(::RelativeCropTransform* relative_crop_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (relative_crop_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(relative_crop_transform);
    if (message_arena != submessage_arena) {
      relative_crop_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_crop_transform, submessage_arena);
    }
    set_has_relative_crop_transform();
    stage_.relative_crop_transform_ = relative_crop_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.relative_crop_transform)
}
void MiniBatchItemStage::set_allocated_aspect_ratio_transform(::AspectRatioTransform* aspect_ratio_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (aspect_ratio_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(aspect_ratio_transform);
    if (message_arena != submessage_arena) {
      aspect_ratio_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aspect_ratio_transform, submessage_arena);
    }
    set_has_aspect_ratio_transform();
    stage_.aspect_ratio_transform_ = aspect_ratio_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.aspect_ratio_transform)
}
void MiniBatchItemStage::set_allocated_affine_transform(::AffineTransform* affine_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (affine_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(affine_transform);
    if (message_arena != submessage_arena) {
      affine_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affine_transform, submessage_arena);
    }
    set_has_affine_transform();
    stage_.affine_transform_ = affine_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.affine_transform)
}
void MiniBatchItemStage::set_allocated_flip_transform(::FlipTransform* flip_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (flip_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flip_transform);
    if (message_arena != submessage_arena) {
      flip_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flip_transform, submessage_arena);
    }
    set_has_flip_transform();
    stage_.flip_transform_ = flip_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.flip_transform)
}
void MiniBatchItemStage::set_allocated_jpeg_recompression(::JPEGRecompression* jpeg_recompression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (jpeg_recompression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(jpeg_recompression);
    if (message_arena != submessage_arena) {
      jpeg_recompression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jpeg_recompression, submessage_arena);
    }
    set_has_jpeg_recompression();
    stage_.jpeg_recompression_ = jpeg_recompression;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.jpeg_recompression)
}
void MiniBatchItemStage::set_allocated_filter_bbox(::FilterBbox* filter_bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (filter_bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter_bbox);
    if (message_arena != submessage_arena) {
      filter_bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_bbox, submessage_arena);
    }
    set_has_filter_bbox();
    stage_.filter_bbox_ = filter_bbox;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.filter_bbox)
}
void MiniBatchItemStage::set_allocated_color_transform(::ColorTransform* color_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (color_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color_transform);
    if (message_arena != submessage_arena) {
      color_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_transform, submessage_arena);
    }
    set_has_color_transform();
    stage_.color_transform_ = color_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.color_transform)
}
void MiniBatchItemStage::set_allocated_scale_transform(::ScaleTransform* scale_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (scale_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scale_transform);
    if (message_arena != submessage_arena) {
      scale_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_transform, submessage_arena);
    }
    set_has_scale_transform();
    stage_.scale_transform_ = scale_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.scale_transform)
}
void MiniBatchItemStage::set_allocated_labels_from_bboxes(::LabelsFromBboxes* labels_from_bboxes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (labels_from_bboxes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(labels_from_bboxes);
    if (message_arena != submessage_arena) {
      labels_from_bboxes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, labels_from_bboxes, submessage_arena);
    }
    set_has_labels_from_bboxes();
    stage_.labels_from_bboxes_ = labels_from_bboxes;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.labels_from_bboxes)
}
void MiniBatchItemStage::set_allocated_distortion_transform(::DistortionTransform* distortion_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (distortion_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(distortion_transform);
    if (message_arena != submessage_arena) {
      distortion_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distortion_transform, submessage_arena);
    }
    set_has_distortion_transform();
    stage_.distortion_transform_ = distortion_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.distortion_transform)
}
void MiniBatchItemStage::set_allocated_whitespace_tokenizer(::WhitespaceTokenizer* whitespace_tokenizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (whitespace_tokenizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(whitespace_tokenizer);
    if (message_arena != submessage_arena) {
      whitespace_tokenizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, whitespace_tokenizer, submessage_arena);
    }
    set_has_whitespace_tokenizer();
    stage_.whitespace_tokenizer_ = whitespace_tokenizer;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.whitespace_tokenizer)
}
void MiniBatchItemStage::set_allocated_token_indexer(::TokenIndexer* token_indexer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (token_indexer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(token_indexer);
    if (message_arena != submessage_arena) {
      token_indexer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_indexer, submessage_arena);
    }
    set_has_token_indexer();
    stage_.token_indexer_ = token_indexer;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.token_indexer)
}
void MiniBatchItemStage::set_allocated_audio_mfcc_transform(::AudioMFCCTransform* audio_mfcc_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (audio_mfcc_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio_mfcc_transform);
    if (message_arena != submessage_arena) {
      audio_mfcc_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_mfcc_transform, submessage_arena);
    }
    set_has_audio_mfcc_transform();
    stage_.audio_mfcc_transform_ = audio_mfcc_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.audio_mfcc_transform)
}
void MiniBatchItemStage::set_allocated_ocr_crop_transform(::OCRCropTransform* ocr_crop_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (ocr_crop_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ocr_crop_transform);
    if (message_arena != submessage_arena) {
      ocr_crop_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ocr_crop_transform, submessage_arena);
    }
    set_has_ocr_crop_transform();
    stage_.ocr_crop_transform_ = ocr_crop_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.ocr_crop_transform)
}
void MiniBatchItemStage::set_allocated_filter_invalid_items(::FilterInvalidItems* filter_invalid_items) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (filter_invalid_items) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter_invalid_items);
    if (message_arena != submessage_arena) {
      filter_invalid_items = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_invalid_items, submessage_arena);
    }
    set_has_filter_invalid_items();
    stage_.filter_invalid_items_ = filter_invalid_items;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.filter_invalid_items)
}
void MiniBatchItemStage::set_allocated_landmark_align_transform(::LandmarkAlignTransform* landmark_align_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stage();
  if (landmark_align_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(landmark_align_transform);
    if (message_arena != submessage_arena) {
      landmark_align_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landmark_align_transform, submessage_arena);
    }
    set_has_landmark_align_transform();
    stage_.landmark_align_transform_ = landmark_align_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:MiniBatchItemStage.landmark_align_transform)
}
MiniBatchItemStage::MiniBatchItemStage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MiniBatchItemStage)
}
MiniBatchItemStage::MiniBatchItemStage(const MiniBatchItemStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_stage();
  switch (from.stage_case()) {
    case kImageCropTransform: {
      _internal_mutable_image_crop_transform()->::ImageCropTransform::MergeFrom(from._internal_image_crop_transform());
      break;
    }
    case kLabelSmoother: {
      _internal_mutable_label_smoother()->::LabelSmoother::MergeFrom(from._internal_label_smoother());
      break;
    }
    case kLabelDropper: {
      _internal_mutable_label_dropper()->::LabelDropper::MergeFrom(from._internal_label_dropper());
      break;
    }
    case kMaxNumLabelDropper: {
      _internal_mutable_max_num_label_dropper()->::MaxNumLabelDropper::MergeFrom(from._internal_max_num_label_dropper());
      break;
    }
    case kLabelWeight: {
      _internal_mutable_label_weight()->::LabelWeight::MergeFrom(from._internal_label_weight());
      break;
    }
    case kSsdRandomCrop: {
      _internal_mutable_ssd_random_crop()->::SSDRandomCropOperation::MergeFrom(from._internal_ssd_random_crop());
      break;
    }
    case kRelativeCropTransform: {
      _internal_mutable_relative_crop_transform()->::RelativeCropTransform::MergeFrom(from._internal_relative_crop_transform());
      break;
    }
    case kAspectRatioTransform: {
      _internal_mutable_aspect_ratio_transform()->::AspectRatioTransform::MergeFrom(from._internal_aspect_ratio_transform());
      break;
    }
    case kAffineTransform: {
      _internal_mutable_affine_transform()->::AffineTransform::MergeFrom(from._internal_affine_transform());
      break;
    }
    case kFlipTransform: {
      _internal_mutable_flip_transform()->::FlipTransform::MergeFrom(from._internal_flip_transform());
      break;
    }
    case kJpegRecompression: {
      _internal_mutable_jpeg_recompression()->::JPEGRecompression::MergeFrom(from._internal_jpeg_recompression());
      break;
    }
    case kFilterBbox: {
      _internal_mutable_filter_bbox()->::FilterBbox::MergeFrom(from._internal_filter_bbox());
      break;
    }
    case kColorTransform: {
      _internal_mutable_color_transform()->::ColorTransform::MergeFrom(from._internal_color_transform());
      break;
    }
    case kScaleTransform: {
      _internal_mutable_scale_transform()->::ScaleTransform::MergeFrom(from._internal_scale_transform());
      break;
    }
    case kLabelsFromBboxes: {
      _internal_mutable_labels_from_bboxes()->::LabelsFromBboxes::MergeFrom(from._internal_labels_from_bboxes());
      break;
    }
    case kDistortionTransform: {
      _internal_mutable_distortion_transform()->::DistortionTransform::MergeFrom(from._internal_distortion_transform());
      break;
    }
    case kWhitespaceTokenizer: {
      _internal_mutable_whitespace_tokenizer()->::WhitespaceTokenizer::MergeFrom(from._internal_whitespace_tokenizer());
      break;
    }
    case kTokenIndexer: {
      _internal_mutable_token_indexer()->::TokenIndexer::MergeFrom(from._internal_token_indexer());
      break;
    }
    case kAudioMfccTransform: {
      _internal_mutable_audio_mfcc_transform()->::AudioMFCCTransform::MergeFrom(from._internal_audio_mfcc_transform());
      break;
    }
    case kOcrCropTransform: {
      _internal_mutable_ocr_crop_transform()->::OCRCropTransform::MergeFrom(from._internal_ocr_crop_transform());
      break;
    }
    case kFilterInvalidItems: {
      _internal_mutable_filter_invalid_items()->::FilterInvalidItems::MergeFrom(from._internal_filter_invalid_items());
      break;
    }
    case kLandmarkAlignTransform: {
      _internal_mutable_landmark_align_transform()->::LandmarkAlignTransform::MergeFrom(from._internal_landmark_align_transform());
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:MiniBatchItemStage)
}

void MiniBatchItemStage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MiniBatchItemStage_proto_2futils_2fdata_5fprovider_2eproto.base);
  clear_has_stage();
}

MiniBatchItemStage::~MiniBatchItemStage() {
  // @@protoc_insertion_point(destructor:MiniBatchItemStage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MiniBatchItemStage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_stage()) {
    clear_stage();
  }
}

void MiniBatchItemStage::ArenaDtor(void* object) {
  MiniBatchItemStage* _this = reinterpret_cast< MiniBatchItemStage* >(object);
  (void)_this;
}
void MiniBatchItemStage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MiniBatchItemStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MiniBatchItemStage& MiniBatchItemStage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MiniBatchItemStage_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void MiniBatchItemStage::clear_stage() {
// @@protoc_insertion_point(one_of_clear_start:MiniBatchItemStage)
  switch (stage_case()) {
    case kImageCropTransform: {
      if (GetArena() == nullptr) {
        delete stage_.image_crop_transform_;
      }
      break;
    }
    case kLabelSmoother: {
      if (GetArena() == nullptr) {
        delete stage_.label_smoother_;
      }
      break;
    }
    case kLabelDropper: {
      if (GetArena() == nullptr) {
        delete stage_.label_dropper_;
      }
      break;
    }
    case kMaxNumLabelDropper: {
      if (GetArena() == nullptr) {
        delete stage_.max_num_label_dropper_;
      }
      break;
    }
    case kLabelWeight: {
      if (GetArena() == nullptr) {
        delete stage_.label_weight_;
      }
      break;
    }
    case kSsdRandomCrop: {
      if (GetArena() == nullptr) {
        delete stage_.ssd_random_crop_;
      }
      break;
    }
    case kRelativeCropTransform: {
      if (GetArena() == nullptr) {
        delete stage_.relative_crop_transform_;
      }
      break;
    }
    case kAspectRatioTransform: {
      if (GetArena() == nullptr) {
        delete stage_.aspect_ratio_transform_;
      }
      break;
    }
    case kAffineTransform: {
      if (GetArena() == nullptr) {
        delete stage_.affine_transform_;
      }
      break;
    }
    case kFlipTransform: {
      if (GetArena() == nullptr) {
        delete stage_.flip_transform_;
      }
      break;
    }
    case kJpegRecompression: {
      if (GetArena() == nullptr) {
        delete stage_.jpeg_recompression_;
      }
      break;
    }
    case kFilterBbox: {
      if (GetArena() == nullptr) {
        delete stage_.filter_bbox_;
      }
      break;
    }
    case kColorTransform: {
      if (GetArena() == nullptr) {
        delete stage_.color_transform_;
      }
      break;
    }
    case kScaleTransform: {
      if (GetArena() == nullptr) {
        delete stage_.scale_transform_;
      }
      break;
    }
    case kLabelsFromBboxes: {
      if (GetArena() == nullptr) {
        delete stage_.labels_from_bboxes_;
      }
      break;
    }
    case kDistortionTransform: {
      if (GetArena() == nullptr) {
        delete stage_.distortion_transform_;
      }
      break;
    }
    case kWhitespaceTokenizer: {
      if (GetArena() == nullptr) {
        delete stage_.whitespace_tokenizer_;
      }
      break;
    }
    case kTokenIndexer: {
      if (GetArena() == nullptr) {
        delete stage_.token_indexer_;
      }
      break;
    }
    case kAudioMfccTransform: {
      if (GetArena() == nullptr) {
        delete stage_.audio_mfcc_transform_;
      }
      break;
    }
    case kOcrCropTransform: {
      if (GetArena() == nullptr) {
        delete stage_.ocr_crop_transform_;
      }
      break;
    }
    case kFilterInvalidItems: {
      if (GetArena() == nullptr) {
        delete stage_.filter_invalid_items_;
      }
      break;
    }
    case kLandmarkAlignTransform: {
      if (GetArena() == nullptr) {
        delete stage_.landmark_align_transform_;
      }
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STAGE_NOT_SET;
}


void MiniBatchItemStage::Clear() {
// @@protoc_insertion_point(message_clear_start:MiniBatchItemStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_stage();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MiniBatchItemStage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ImageCropTransform image_crop_transform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_crop_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LabelSmoother label_smoother = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_smoother(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LabelDropper label_dropper = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_dropper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MaxNumLabelDropper max_num_label_dropper = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_num_label_dropper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LabelWeight label_weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_weight(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SSDRandomCropOperation ssd_random_crop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssd_random_crop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RelativeCropTransform relative_crop_transform = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_crop_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AspectRatioTransform aspect_ratio_transform = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_aspect_ratio_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AffineTransform affine_transform = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_affine_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FlipTransform flip_transform = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_flip_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JPEGRecompression jpeg_recompression = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_jpeg_recompression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FilterBbox filter_bbox = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_bbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ColorTransform color_transform = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ScaleTransform scale_transform = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LabelsFromBboxes labels_from_bboxes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_labels_from_bboxes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DistortionTransform distortion_transform = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_distortion_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .WhitespaceTokenizer whitespace_tokenizer = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_whitespace_tokenizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TokenIndexer token_indexer = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_indexer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AudioMFCCTransform audio_mfcc_transform = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_mfcc_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OCRCropTransform ocr_crop_transform = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_ocr_crop_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FilterInvalidItems filter_invalid_items = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_invalid_items(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LandmarkAlignTransform landmark_align_transform = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_landmark_align_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MiniBatchItemStage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MiniBatchItemStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ImageCropTransform image_crop_transform = 1;
  if (_internal_has_image_crop_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image_crop_transform(this), target, stream);
  }

  // .LabelSmoother label_smoother = 2;
  if (_internal_has_label_smoother()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::label_smoother(this), target, stream);
  }

  // .LabelDropper label_dropper = 3;
  if (_internal_has_label_dropper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::label_dropper(this), target, stream);
  }

  // .MaxNumLabelDropper max_num_label_dropper = 4;
  if (_internal_has_max_num_label_dropper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::max_num_label_dropper(this), target, stream);
  }

  // .LabelWeight label_weight = 5;
  if (_internal_has_label_weight()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::label_weight(this), target, stream);
  }

  // .SSDRandomCropOperation ssd_random_crop = 6;
  if (_internal_has_ssd_random_crop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ssd_random_crop(this), target, stream);
  }

  // .RelativeCropTransform relative_crop_transform = 7;
  if (_internal_has_relative_crop_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::relative_crop_transform(this), target, stream);
  }

  // .AspectRatioTransform aspect_ratio_transform = 8;
  if (_internal_has_aspect_ratio_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::aspect_ratio_transform(this), target, stream);
  }

  // .AffineTransform affine_transform = 9;
  if (_internal_has_affine_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::affine_transform(this), target, stream);
  }

  // .FlipTransform flip_transform = 10;
  if (_internal_has_flip_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::flip_transform(this), target, stream);
  }

  // .JPEGRecompression jpeg_recompression = 11;
  if (_internal_has_jpeg_recompression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::jpeg_recompression(this), target, stream);
  }

  // .FilterBbox filter_bbox = 12;
  if (_internal_has_filter_bbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::filter_bbox(this), target, stream);
  }

  // .ColorTransform color_transform = 13;
  if (_internal_has_color_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::color_transform(this), target, stream);
  }

  // .ScaleTransform scale_transform = 14;
  if (_internal_has_scale_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::scale_transform(this), target, stream);
  }

  // .LabelsFromBboxes labels_from_bboxes = 15;
  if (_internal_has_labels_from_bboxes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::labels_from_bboxes(this), target, stream);
  }

  // .DistortionTransform distortion_transform = 16;
  if (_internal_has_distortion_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::distortion_transform(this), target, stream);
  }

  // .WhitespaceTokenizer whitespace_tokenizer = 17;
  if (_internal_has_whitespace_tokenizer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::whitespace_tokenizer(this), target, stream);
  }

  // .TokenIndexer token_indexer = 18;
  if (_internal_has_token_indexer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::token_indexer(this), target, stream);
  }

  // .AudioMFCCTransform audio_mfcc_transform = 19;
  if (_internal_has_audio_mfcc_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::audio_mfcc_transform(this), target, stream);
  }

  // .OCRCropTransform ocr_crop_transform = 20;
  if (_internal_has_ocr_crop_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::ocr_crop_transform(this), target, stream);
  }

  // .FilterInvalidItems filter_invalid_items = 21;
  if (_internal_has_filter_invalid_items()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::filter_invalid_items(this), target, stream);
  }

  // .LandmarkAlignTransform landmark_align_transform = 22;
  if (_internal_has_landmark_align_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::landmark_align_transform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MiniBatchItemStage)
  return target;
}

size_t MiniBatchItemStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MiniBatchItemStage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (stage_case()) {
    // .ImageCropTransform image_crop_transform = 1;
    case kImageCropTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.image_crop_transform_);
      break;
    }
    // .LabelSmoother label_smoother = 2;
    case kLabelSmoother: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.label_smoother_);
      break;
    }
    // .LabelDropper label_dropper = 3;
    case kLabelDropper: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.label_dropper_);
      break;
    }
    // .MaxNumLabelDropper max_num_label_dropper = 4;
    case kMaxNumLabelDropper: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.max_num_label_dropper_);
      break;
    }
    // .LabelWeight label_weight = 5;
    case kLabelWeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.label_weight_);
      break;
    }
    // .SSDRandomCropOperation ssd_random_crop = 6;
    case kSsdRandomCrop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.ssd_random_crop_);
      break;
    }
    // .RelativeCropTransform relative_crop_transform = 7;
    case kRelativeCropTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.relative_crop_transform_);
      break;
    }
    // .AspectRatioTransform aspect_ratio_transform = 8;
    case kAspectRatioTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.aspect_ratio_transform_);
      break;
    }
    // .AffineTransform affine_transform = 9;
    case kAffineTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.affine_transform_);
      break;
    }
    // .FlipTransform flip_transform = 10;
    case kFlipTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.flip_transform_);
      break;
    }
    // .JPEGRecompression jpeg_recompression = 11;
    case kJpegRecompression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.jpeg_recompression_);
      break;
    }
    // .FilterBbox filter_bbox = 12;
    case kFilterBbox: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.filter_bbox_);
      break;
    }
    // .ColorTransform color_transform = 13;
    case kColorTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.color_transform_);
      break;
    }
    // .ScaleTransform scale_transform = 14;
    case kScaleTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.scale_transform_);
      break;
    }
    // .LabelsFromBboxes labels_from_bboxes = 15;
    case kLabelsFromBboxes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.labels_from_bboxes_);
      break;
    }
    // .DistortionTransform distortion_transform = 16;
    case kDistortionTransform: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.distortion_transform_);
      break;
    }
    // .WhitespaceTokenizer whitespace_tokenizer = 17;
    case kWhitespaceTokenizer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.whitespace_tokenizer_);
      break;
    }
    // .TokenIndexer token_indexer = 18;
    case kTokenIndexer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.token_indexer_);
      break;
    }
    // .AudioMFCCTransform audio_mfcc_transform = 19;
    case kAudioMfccTransform: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.audio_mfcc_transform_);
      break;
    }
    // .OCRCropTransform ocr_crop_transform = 20;
    case kOcrCropTransform: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.ocr_crop_transform_);
      break;
    }
    // .FilterInvalidItems filter_invalid_items = 21;
    case kFilterInvalidItems: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.filter_invalid_items_);
      break;
    }
    // .LandmarkAlignTransform landmark_align_transform = 22;
    case kLandmarkAlignTransform: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.landmark_align_transform_);
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MiniBatchItemStage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MiniBatchItemStage)
  GOOGLE_DCHECK_NE(&from, this);
  const MiniBatchItemStage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MiniBatchItemStage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MiniBatchItemStage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MiniBatchItemStage)
    MergeFrom(*source);
  }
}

void MiniBatchItemStage::MergeFrom(const MiniBatchItemStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MiniBatchItemStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.stage_case()) {
    case kImageCropTransform: {
      _internal_mutable_image_crop_transform()->::ImageCropTransform::MergeFrom(from._internal_image_crop_transform());
      break;
    }
    case kLabelSmoother: {
      _internal_mutable_label_smoother()->::LabelSmoother::MergeFrom(from._internal_label_smoother());
      break;
    }
    case kLabelDropper: {
      _internal_mutable_label_dropper()->::LabelDropper::MergeFrom(from._internal_label_dropper());
      break;
    }
    case kMaxNumLabelDropper: {
      _internal_mutable_max_num_label_dropper()->::MaxNumLabelDropper::MergeFrom(from._internal_max_num_label_dropper());
      break;
    }
    case kLabelWeight: {
      _internal_mutable_label_weight()->::LabelWeight::MergeFrom(from._internal_label_weight());
      break;
    }
    case kSsdRandomCrop: {
      _internal_mutable_ssd_random_crop()->::SSDRandomCropOperation::MergeFrom(from._internal_ssd_random_crop());
      break;
    }
    case kRelativeCropTransform: {
      _internal_mutable_relative_crop_transform()->::RelativeCropTransform::MergeFrom(from._internal_relative_crop_transform());
      break;
    }
    case kAspectRatioTransform: {
      _internal_mutable_aspect_ratio_transform()->::AspectRatioTransform::MergeFrom(from._internal_aspect_ratio_transform());
      break;
    }
    case kAffineTransform: {
      _internal_mutable_affine_transform()->::AffineTransform::MergeFrom(from._internal_affine_transform());
      break;
    }
    case kFlipTransform: {
      _internal_mutable_flip_transform()->::FlipTransform::MergeFrom(from._internal_flip_transform());
      break;
    }
    case kJpegRecompression: {
      _internal_mutable_jpeg_recompression()->::JPEGRecompression::MergeFrom(from._internal_jpeg_recompression());
      break;
    }
    case kFilterBbox: {
      _internal_mutable_filter_bbox()->::FilterBbox::MergeFrom(from._internal_filter_bbox());
      break;
    }
    case kColorTransform: {
      _internal_mutable_color_transform()->::ColorTransform::MergeFrom(from._internal_color_transform());
      break;
    }
    case kScaleTransform: {
      _internal_mutable_scale_transform()->::ScaleTransform::MergeFrom(from._internal_scale_transform());
      break;
    }
    case kLabelsFromBboxes: {
      _internal_mutable_labels_from_bboxes()->::LabelsFromBboxes::MergeFrom(from._internal_labels_from_bboxes());
      break;
    }
    case kDistortionTransform: {
      _internal_mutable_distortion_transform()->::DistortionTransform::MergeFrom(from._internal_distortion_transform());
      break;
    }
    case kWhitespaceTokenizer: {
      _internal_mutable_whitespace_tokenizer()->::WhitespaceTokenizer::MergeFrom(from._internal_whitespace_tokenizer());
      break;
    }
    case kTokenIndexer: {
      _internal_mutable_token_indexer()->::TokenIndexer::MergeFrom(from._internal_token_indexer());
      break;
    }
    case kAudioMfccTransform: {
      _internal_mutable_audio_mfcc_transform()->::AudioMFCCTransform::MergeFrom(from._internal_audio_mfcc_transform());
      break;
    }
    case kOcrCropTransform: {
      _internal_mutable_ocr_crop_transform()->::OCRCropTransform::MergeFrom(from._internal_ocr_crop_transform());
      break;
    }
    case kFilterInvalidItems: {
      _internal_mutable_filter_invalid_items()->::FilterInvalidItems::MergeFrom(from._internal_filter_invalid_items());
      break;
    }
    case kLandmarkAlignTransform: {
      _internal_mutable_landmark_align_transform()->::LandmarkAlignTransform::MergeFrom(from._internal_landmark_align_transform());
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
}

void MiniBatchItemStage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MiniBatchItemStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiniBatchItemStage::CopyFrom(const MiniBatchItemStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MiniBatchItemStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiniBatchItemStage::IsInitialized() const {
  return true;
}

void MiniBatchItemStage::InternalSwap(MiniBatchItemStage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stage_, other->stage_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MiniBatchItemStage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void gRPCReaderParams::InitAsDefaultInstance() {
  ::_gRPCReaderParams_default_instance_.data_provider_params_ = const_cast< ::DataProviderParams*>(
      ::DataProviderParams::internal_default_instance());
  ::_gRPCReaderParams_default_instance_.serialized_params_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class gRPCReaderParams::_Internal {
 public:
  static const ::DataProviderParams& data_provider_params(const gRPCReaderParams* msg);
};

const ::DataProviderParams&
gRPCReaderParams::_Internal::data_provider_params(const gRPCReaderParams* msg) {
  return *msg->params_.data_provider_params_;
}
void gRPCReaderParams::set_allocated_data_provider_params(::DataProviderParams* data_provider_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (data_provider_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data_provider_params);
    if (message_arena != submessage_arena) {
      data_provider_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_provider_params, submessage_arena);
    }
    set_has_data_provider_params();
    params_.data_provider_params_ = data_provider_params;
  }
  // @@protoc_insertion_point(field_set_allocated:gRPCReaderParams.data_provider_params)
}
gRPCReaderParams::gRPCReaderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gRPCReaderParams)
}
gRPCReaderParams::gRPCReaderParams(const gRPCReaderParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  generator_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_generator_class_name().empty()) {
    generator_class_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_generator_class_name(),
      GetArena());
  }
  batch_size_ = from.batch_size_;
  clear_has_params();
  switch (from.params_case()) {
    case kDataProviderParams: {
      _internal_mutable_data_provider_params()->::DataProviderParams::MergeFrom(from._internal_data_provider_params());
      break;
    }
    case kSerializedParams: {
      _internal_set_serialized_params(from._internal_serialized_params());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gRPCReaderParams)
}

void gRPCReaderParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto.base);
  generator_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_size_ = 0;
  clear_has_params();
}

gRPCReaderParams::~gRPCReaderParams() {
  // @@protoc_insertion_point(destructor:gRPCReaderParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void gRPCReaderParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  generator_class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_params()) {
    clear_params();
  }
}

void gRPCReaderParams::ArenaDtor(void* object) {
  gRPCReaderParams* _this = reinterpret_cast< gRPCReaderParams* >(object);
  (void)_this;
}
void gRPCReaderParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void gRPCReaderParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const gRPCReaderParams& gRPCReaderParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void gRPCReaderParams::clear_params() {
// @@protoc_insertion_point(one_of_clear_start:gRPCReaderParams)
  switch (params_case()) {
    case kDataProviderParams: {
      if (GetArena() == nullptr) {
        delete params_.data_provider_params_;
      }
      break;
    }
    case kSerializedParams: {
      params_.serialized_params_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMS_NOT_SET;
}


void gRPCReaderParams::Clear() {
// @@protoc_insertion_point(message_clear_start:gRPCReaderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  generator_class_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_size_ = 0;
  clear_params();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* gRPCReaderParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string generator_class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_generator_class_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gRPCReaderParams.generator_class_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataProviderParams data_provider_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_provider_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes serialized_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_serialized_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 batch_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* gRPCReaderParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gRPCReaderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string generator_class_name = 1;
  if (this->generator_class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_generator_class_name().data(), static_cast<int>(this->_internal_generator_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gRPCReaderParams.generator_class_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_generator_class_name(), target);
  }

  // .DataProviderParams data_provider_params = 2;
  if (_internal_has_data_provider_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data_provider_params(this), target, stream);
  }

  // bytes serialized_params = 3;
  if (_internal_has_serialized_params()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_serialized_params(), target);
  }

  // int32 batch_size = 4;
  if (this->batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_batch_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gRPCReaderParams)
  return target;
}

size_t gRPCReaderParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gRPCReaderParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string generator_class_name = 1;
  if (this->generator_class_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_generator_class_name());
  }

  // int32 batch_size = 4;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch_size());
  }

  switch (params_case()) {
    // .DataProviderParams data_provider_params = 2;
    case kDataProviderParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.data_provider_params_);
      break;
    }
    // bytes serialized_params = 3;
    case kSerializedParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_params());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gRPCReaderParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gRPCReaderParams)
  GOOGLE_DCHECK_NE(&from, this);
  const gRPCReaderParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<gRPCReaderParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gRPCReaderParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gRPCReaderParams)
    MergeFrom(*source);
  }
}

void gRPCReaderParams::MergeFrom(const gRPCReaderParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gRPCReaderParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.generator_class_name().size() > 0) {
    _internal_set_generator_class_name(from._internal_generator_class_name());
  }
  if (from.batch_size() != 0) {
    _internal_set_batch_size(from._internal_batch_size());
  }
  switch (from.params_case()) {
    case kDataProviderParams: {
      _internal_mutable_data_provider_params()->::DataProviderParams::MergeFrom(from._internal_data_provider_params());
      break;
    }
    case kSerializedParams: {
      _internal_set_serialized_params(from._internal_serialized_params());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
}

void gRPCReaderParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gRPCReaderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gRPCReaderParams::CopyFrom(const gRPCReaderParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gRPCReaderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gRPCReaderParams::IsInitialized() const {
  return true;
}

void gRPCReaderParams::InternalSwap(gRPCReaderParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  generator_class_name_.Swap(&other->generator_class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(batch_size_, other->batch_size_);
  swap(params_, other->params_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata gRPCReaderParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FakeBoxes::InitAsDefaultInstance() {
}
class FakeBoxes::_Internal {
 public:
};

FakeBoxes::FakeBoxes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  relative_scale_range_(arena),
  relative_aspect_range_(arena),
  imsize_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FakeBoxes)
}
FakeBoxes::FakeBoxes(const FakeBoxes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      relative_scale_range_(from.relative_scale_range_),
      relative_aspect_range_(from.relative_aspect_range_),
      imsize_(from.imsize_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fill_color_, &from.fill_color_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_dim_) -
    reinterpret_cast<char*>(&fill_color_)) + sizeof(min_dim_));
  // @@protoc_insertion_point(copy_constructor:FakeBoxes)
}

void FakeBoxes::SharedCtor() {
  ::memset(&fill_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_dim_) -
      reinterpret_cast<char*>(&fill_color_)) + sizeof(min_dim_));
}

FakeBoxes::~FakeBoxes() {
  // @@protoc_insertion_point(destructor:FakeBoxes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FakeBoxes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FakeBoxes::ArenaDtor(void* object) {
  FakeBoxes* _this = reinterpret_cast< FakeBoxes* >(object);
  (void)_this;
}
void FakeBoxes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FakeBoxes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FakeBoxes& FakeBoxes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FakeBoxes_proto_2futils_2fdata_5fprovider_2eproto.base);
  return *internal_default_instance();
}


void FakeBoxes::Clear() {
// @@protoc_insertion_point(message_clear_start:FakeBoxes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relative_scale_range_.Clear();
  relative_aspect_range_.Clear();
  imsize_.Clear();
  ::memset(&fill_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_dim_) -
      reinterpret_cast<char*>(&fill_color_)) + sizeof(min_dim_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FakeBoxes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float relative_scale_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_relative_scale_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_relative_scale_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float relative_aspect_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_relative_aspect_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_relative_aspect_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 fill_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fill_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 background_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          background_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 imsize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_imsize(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_imsize(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 min_dim = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          min_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FakeBoxes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FakeBoxes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float relative_scale_range = 1;
  if (this->_internal_relative_scale_range_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_relative_scale_range(), target);
  }

  // repeated float relative_aspect_range = 2;
  if (this->_internal_relative_aspect_range_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_relative_aspect_range(), target);
  }

  // uint32 fill_color = 3;
  if (this->fill_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fill_color(), target);
  }

  // uint32 background_color = 4;
  if (this->background_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_background_color(), target);
  }

  // repeated uint32 imsize = 5;
  {
    int byte_size = _imsize_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_imsize(), byte_size, target);
    }
  }

  // uint32 min_dim = 6;
  if (this->min_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_min_dim(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FakeBoxes)
  return target;
}

size_t FakeBoxes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FakeBoxes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float relative_scale_range = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_relative_scale_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _relative_scale_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float relative_aspect_range = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_relative_aspect_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _relative_aspect_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 imsize = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->imsize_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _imsize_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 fill_color = 3;
  if (this->fill_color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fill_color());
  }

  // uint32 background_color = 4;
  if (this->background_color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_background_color());
  }

  // uint32 min_dim = 6;
  if (this->min_dim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_dim());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FakeBoxes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FakeBoxes)
  GOOGLE_DCHECK_NE(&from, this);
  const FakeBoxes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FakeBoxes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FakeBoxes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FakeBoxes)
    MergeFrom(*source);
  }
}

void FakeBoxes::MergeFrom(const FakeBoxes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FakeBoxes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relative_scale_range_.MergeFrom(from.relative_scale_range_);
  relative_aspect_range_.MergeFrom(from.relative_aspect_range_);
  imsize_.MergeFrom(from.imsize_);
  if (from.fill_color() != 0) {
    _internal_set_fill_color(from._internal_fill_color());
  }
  if (from.background_color() != 0) {
    _internal_set_background_color(from._internal_background_color());
  }
  if (from.min_dim() != 0) {
    _internal_set_min_dim(from._internal_min_dim());
  }
}

void FakeBoxes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FakeBoxes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FakeBoxes::CopyFrom(const FakeBoxes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FakeBoxes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FakeBoxes::IsInitialized() const {
  return true;
}

void FakeBoxes::InternalSwap(FakeBoxes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  relative_scale_range_.InternalSwap(&other->relative_scale_range_);
  relative_aspect_range_.InternalSwap(&other->relative_aspect_range_);
  imsize_.InternalSwap(&other->imsize_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FakeBoxes, min_dim_)
      + sizeof(FakeBoxes::min_dim_)
      - PROTOBUF_FIELD_OFFSET(FakeBoxes, fill_color_)>(
          reinterpret_cast<char*>(&fill_color_),
          reinterpret_cast<char*>(&other->fill_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FakeBoxes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DataProviderParams* Arena::CreateMaybeMessage< ::DataProviderParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataProviderParams >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcessingParams* Arena::CreateMaybeMessage< ::ProcessingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProcessingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::ImageCropTransform* Arena::CreateMaybeMessage< ::ImageCropTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ImageCropTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::SavedOutputParams* Arena::CreateMaybeMessage< ::SavedOutputParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SavedOutputParams >(arena);
}
template<> PROTOBUF_NOINLINE ::MultiDataset* Arena::CreateMaybeMessage< ::MultiDataset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MultiDataset >(arena);
}
template<> PROTOBUF_NOINLINE ::LabelSetter* Arena::CreateMaybeMessage< ::LabelSetter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabelSetter >(arena);
}
template<> PROTOBUF_NOINLINE ::LabelMapper_CatidMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::LabelMapper_CatidMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabelMapper_CatidMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::LabelMapper* Arena::CreateMaybeMessage< ::LabelMapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabelMapper >(arena);
}
template<> PROTOBUF_NOINLINE ::LabelSmoother* Arena::CreateMaybeMessage< ::LabelSmoother >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabelSmoother >(arena);
}
template<> PROTOBUF_NOINLINE ::LabelDropper* Arena::CreateMaybeMessage< ::LabelDropper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabelDropper >(arena);
}
template<> PROTOBUF_NOINLINE ::OCRCropTransform* Arena::CreateMaybeMessage< ::OCRCropTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OCRCropTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::MaxNumLabelDropper* Arena::CreateMaybeMessage< ::MaxNumLabelDropper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MaxNumLabelDropper >(arena);
}
template<> PROTOBUF_NOINLINE ::LabelWeight_CatidConstWeightsEntry_DoNotUse* Arena::CreateMaybeMessage< ::LabelWeight_CatidConstWeightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabelWeight_CatidConstWeightsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::LabelWeight* Arena::CreateMaybeMessage< ::LabelWeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabelWeight >(arena);
}
template<> PROTOBUF_NOINLINE ::LabelsFromBboxes* Arena::CreateMaybeMessage< ::LabelsFromBboxes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabelsFromBboxes >(arena);
}
template<> PROTOBUF_NOINLINE ::SSDRandomCropOperation* Arena::CreateMaybeMessage< ::SSDRandomCropOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDRandomCropOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::RelativeCropTransform* Arena::CreateMaybeMessage< ::RelativeCropTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RelativeCropTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::AspectRatioTransform* Arena::CreateMaybeMessage< ::AspectRatioTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AspectRatioTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::AffineTransform* Arena::CreateMaybeMessage< ::AffineTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AffineTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::ScaleTransform* Arena::CreateMaybeMessage< ::ScaleTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ScaleTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::DistortionTransform* Arena::CreateMaybeMessage< ::DistortionTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DistortionTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::FlipTransform* Arena::CreateMaybeMessage< ::FlipTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FlipTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::ColorTransform* Arena::CreateMaybeMessage< ::ColorTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ColorTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::LandmarkAlignTransform* Arena::CreateMaybeMessage< ::LandmarkAlignTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LandmarkAlignTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::FilterBbox* Arena::CreateMaybeMessage< ::FilterBbox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FilterBbox >(arena);
}
template<> PROTOBUF_NOINLINE ::JPEGRecompression* Arena::CreateMaybeMessage< ::JPEGRecompression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JPEGRecompression >(arena);
}
template<> PROTOBUF_NOINLINE ::LogoDataParams* Arena::CreateMaybeMessage< ::LogoDataParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogoDataParams >(arena);
}
template<> PROTOBUF_NOINLINE ::WhitespaceTokenizer* Arena::CreateMaybeMessage< ::WhitespaceTokenizer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WhitespaceTokenizer >(arena);
}
template<> PROTOBUF_NOINLINE ::TokenIndexer* Arena::CreateMaybeMessage< ::TokenIndexer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TokenIndexer >(arena);
}
template<> PROTOBUF_NOINLINE ::AudioMFCCTransform* Arena::CreateMaybeMessage< ::AudioMFCCTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AudioMFCCTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::FilterInvalidItems* Arena::CreateMaybeMessage< ::FilterInvalidItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FilterInvalidItems >(arena);
}
template<> PROTOBUF_NOINLINE ::MiniBatchItemStage* Arena::CreateMaybeMessage< ::MiniBatchItemStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MiniBatchItemStage >(arena);
}
template<> PROTOBUF_NOINLINE ::gRPCReaderParams* Arena::CreateMaybeMessage< ::gRPCReaderParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gRPCReaderParams >(arena);
}
template<> PROTOBUF_NOINLINE ::FakeBoxes* Arena::CreateMaybeMessage< ::FakeBoxes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FakeBoxes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
