// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/pasting_data_provider.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fpasting_5fdata_5fprovider_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fpasting_5fdata_5fprovider_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/data_provider.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fpasting_5fdata_5fprovider_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2fpasting_5fdata_5fprovider_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fpasting_5fdata_5fprovider_2eproto;
class PastingDataProviderParams;
class PastingDataProviderParamsDefaultTypeInternal;
extern PastingDataProviderParamsDefaultTypeInternal _PastingDataProviderParams_default_instance_;
class PastingLevelParams;
class PastingLevelParamsDefaultTypeInternal;
extern PastingLevelParamsDefaultTypeInternal _PastingLevelParams_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PastingDataProviderParams* Arena::CreateMaybeMessage<::PastingDataProviderParams>(Arena*);
template<> ::PastingLevelParams* Arena::CreateMaybeMessage<::PastingLevelParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PastingDataProviderParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PastingDataProviderParams) */ {
 public:
  inline PastingDataProviderParams() : PastingDataProviderParams(nullptr) {}
  virtual ~PastingDataProviderParams();

  PastingDataProviderParams(const PastingDataProviderParams& from);
  PastingDataProviderParams(PastingDataProviderParams&& from) noexcept
    : PastingDataProviderParams() {
    *this = ::std::move(from);
  }

  inline PastingDataProviderParams& operator=(const PastingDataProviderParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PastingDataProviderParams& operator=(PastingDataProviderParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PastingDataProviderParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PastingDataProviderParams* internal_default_instance() {
    return reinterpret_cast<const PastingDataProviderParams*>(
               &_PastingDataProviderParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PastingDataProviderParams& a, PastingDataProviderParams& b) {
    a.Swap(&b);
  }
  inline void Swap(PastingDataProviderParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PastingDataProviderParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PastingDataProviderParams* New() const final {
    return CreateMaybeMessage<PastingDataProviderParams>(nullptr);
  }

  PastingDataProviderParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PastingDataProviderParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PastingDataProviderParams& from);
  void MergeFrom(const PastingDataProviderParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PastingDataProviderParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PastingDataProviderParams";
  }
  protected:
  explicit PastingDataProviderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fpasting_5fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fpasting_5fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelDppFieldNumber = 3,
    kMbitemStageFieldNumber = 5,
    kBackgroundDatasetFieldNumber = 1,
    kOutputDatasetFieldNumber = 4,
    kBackgroundDatasetSplitFieldNumber = 7,
    kBackgroundDppFieldNumber = 2,
    kProcessingParamsFieldNumber = 6,
    kRandomLayerOrderFieldNumber = 8,
    kConstrainBoxesToVisibleFieldNumber = 9,
  };
  // repeated .PastingLevelParams level_dpp = 3;
  int level_dpp_size() const;
  private:
  int _internal_level_dpp_size() const;
  public:
  void clear_level_dpp();
  ::PastingLevelParams* mutable_level_dpp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PastingLevelParams >*
      mutable_level_dpp();
  private:
  const ::PastingLevelParams& _internal_level_dpp(int index) const;
  ::PastingLevelParams* _internal_add_level_dpp();
  public:
  const ::PastingLevelParams& level_dpp(int index) const;
  ::PastingLevelParams* add_level_dpp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PastingLevelParams >&
      level_dpp() const;

  // repeated .MiniBatchItemStage mbitem_stage = 5;
  int mbitem_stage_size() const;
  private:
  int _internal_mbitem_stage_size() const;
  public:
  void clear_mbitem_stage();
  ::MiniBatchItemStage* mutable_mbitem_stage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MiniBatchItemStage >*
      mutable_mbitem_stage();
  private:
  const ::MiniBatchItemStage& _internal_mbitem_stage(int index) const;
  ::MiniBatchItemStage* _internal_add_mbitem_stage();
  public:
  const ::MiniBatchItemStage& mbitem_stage(int index) const;
  ::MiniBatchItemStage* add_mbitem_stage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MiniBatchItemStage >&
      mbitem_stage() const;

  // string background_dataset = 1;
  void clear_background_dataset();
  const std::string& background_dataset() const;
  void set_background_dataset(const std::string& value);
  void set_background_dataset(std::string&& value);
  void set_background_dataset(const char* value);
  void set_background_dataset(const char* value, size_t size);
  std::string* mutable_background_dataset();
  std::string* release_background_dataset();
  void set_allocated_background_dataset(std::string* background_dataset);
  private:
  const std::string& _internal_background_dataset() const;
  void _internal_set_background_dataset(const std::string& value);
  std::string* _internal_mutable_background_dataset();
  public:

  // string output_dataset = 4;
  void clear_output_dataset();
  const std::string& output_dataset() const;
  void set_output_dataset(const std::string& value);
  void set_output_dataset(std::string&& value);
  void set_output_dataset(const char* value);
  void set_output_dataset(const char* value, size_t size);
  std::string* mutable_output_dataset();
  std::string* release_output_dataset();
  void set_allocated_output_dataset(std::string* output_dataset);
  private:
  const std::string& _internal_output_dataset() const;
  void _internal_set_output_dataset(const std::string& value);
  std::string* _internal_mutable_output_dataset();
  public:

  // string background_dataset_split = 7;
  void clear_background_dataset_split();
  const std::string& background_dataset_split() const;
  void set_background_dataset_split(const std::string& value);
  void set_background_dataset_split(std::string&& value);
  void set_background_dataset_split(const char* value);
  void set_background_dataset_split(const char* value, size_t size);
  std::string* mutable_background_dataset_split();
  std::string* release_background_dataset_split();
  void set_allocated_background_dataset_split(std::string* background_dataset_split);
  private:
  const std::string& _internal_background_dataset_split() const;
  void _internal_set_background_dataset_split(const std::string& value);
  std::string* _internal_mutable_background_dataset_split();
  public:

  // .DataProviderParams background_dpp = 2;
  bool has_background_dpp() const;
  private:
  bool _internal_has_background_dpp() const;
  public:
  void clear_background_dpp();
  const ::DataProviderParams& background_dpp() const;
  ::DataProviderParams* release_background_dpp();
  ::DataProviderParams* mutable_background_dpp();
  void set_allocated_background_dpp(::DataProviderParams* background_dpp);
  private:
  const ::DataProviderParams& _internal_background_dpp() const;
  ::DataProviderParams* _internal_mutable_background_dpp();
  public:
  void unsafe_arena_set_allocated_background_dpp(
      ::DataProviderParams* background_dpp);
  ::DataProviderParams* unsafe_arena_release_background_dpp();

  // .ProcessingParams processing_params = 6;
  bool has_processing_params() const;
  private:
  bool _internal_has_processing_params() const;
  public:
  void clear_processing_params();
  const ::ProcessingParams& processing_params() const;
  ::ProcessingParams* release_processing_params();
  ::ProcessingParams* mutable_processing_params();
  void set_allocated_processing_params(::ProcessingParams* processing_params);
  private:
  const ::ProcessingParams& _internal_processing_params() const;
  ::ProcessingParams* _internal_mutable_processing_params();
  public:
  void unsafe_arena_set_allocated_processing_params(
      ::ProcessingParams* processing_params);
  ::ProcessingParams* unsafe_arena_release_processing_params();

  // bool random_layer_order = 8;
  void clear_random_layer_order();
  bool random_layer_order() const;
  void set_random_layer_order(bool value);
  private:
  bool _internal_random_layer_order() const;
  void _internal_set_random_layer_order(bool value);
  public:

  // bool constrain_boxes_to_visible = 9;
  void clear_constrain_boxes_to_visible();
  bool constrain_boxes_to_visible() const;
  void set_constrain_boxes_to_visible(bool value);
  private:
  bool _internal_constrain_boxes_to_visible() const;
  void _internal_set_constrain_boxes_to_visible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PastingDataProviderParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PastingLevelParams > level_dpp_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MiniBatchItemStage > mbitem_stage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr background_dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr background_dataset_split_;
  ::DataProviderParams* background_dpp_;
  ::ProcessingParams* processing_params_;
  bool random_layer_order_;
  bool constrain_boxes_to_visible_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fpasting_5fdata_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class PastingLevelParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PastingLevelParams) */ {
 public:
  inline PastingLevelParams() : PastingLevelParams(nullptr) {}
  virtual ~PastingLevelParams();

  PastingLevelParams(const PastingLevelParams& from);
  PastingLevelParams(PastingLevelParams&& from) noexcept
    : PastingLevelParams() {
    *this = ::std::move(from);
  }

  inline PastingLevelParams& operator=(const PastingLevelParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PastingLevelParams& operator=(PastingLevelParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PastingLevelParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PastingLevelParams* internal_default_instance() {
    return reinterpret_cast<const PastingLevelParams*>(
               &_PastingLevelParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PastingLevelParams& a, PastingLevelParams& b) {
    a.Swap(&b);
  }
  inline void Swap(PastingLevelParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PastingLevelParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PastingLevelParams* New() const final {
    return CreateMaybeMessage<PastingLevelParams>(nullptr);
  }

  PastingLevelParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PastingLevelParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PastingLevelParams& from);
  void MergeFrom(const PastingLevelParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PastingLevelParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PastingLevelParams";
  }
  protected:
  explicit PastingLevelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fpasting_5fdata_5fprovider_2eproto);
    return ::descriptor_table_proto_2futils_2fpasting_5fdata_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetNameFieldNumber = 2,
    kDatasetSplitFieldNumber = 12,
    kPastingMethodFieldNumber = 13,
    kCommonDppFieldNumber = 1,
    kMinXFieldNumber = 3,
    kMaxXFieldNumber = 4,
    kMinYFieldNumber = 5,
    kMaxYFieldNumber = 6,
    kPasteProbFieldNumber = 7,
    kWriteBboxFieldNumber = 8,
    kMinVisibleFieldNumber = 9,
    kMaxVisibleFieldNumber = 10,
    kRepetitionsFieldNumber = 11,
    kSkipProbFieldNumber = 14,
  };
  // string dataset_name = 2;
  void clear_dataset_name();
  const std::string& dataset_name() const;
  void set_dataset_name(const std::string& value);
  void set_dataset_name(std::string&& value);
  void set_dataset_name(const char* value);
  void set_dataset_name(const char* value, size_t size);
  std::string* mutable_dataset_name();
  std::string* release_dataset_name();
  void set_allocated_dataset_name(std::string* dataset_name);
  private:
  const std::string& _internal_dataset_name() const;
  void _internal_set_dataset_name(const std::string& value);
  std::string* _internal_mutable_dataset_name();
  public:

  // string dataset_split = 12;
  void clear_dataset_split();
  const std::string& dataset_split() const;
  void set_dataset_split(const std::string& value);
  void set_dataset_split(std::string&& value);
  void set_dataset_split(const char* value);
  void set_dataset_split(const char* value, size_t size);
  std::string* mutable_dataset_split();
  std::string* release_dataset_split();
  void set_allocated_dataset_split(std::string* dataset_split);
  private:
  const std::string& _internal_dataset_split() const;
  void _internal_set_dataset_split(const std::string& value);
  std::string* _internal_mutable_dataset_split();
  public:

  // string pasting_method = 13;
  void clear_pasting_method();
  const std::string& pasting_method() const;
  void set_pasting_method(const std::string& value);
  void set_pasting_method(std::string&& value);
  void set_pasting_method(const char* value);
  void set_pasting_method(const char* value, size_t size);
  std::string* mutable_pasting_method();
  std::string* release_pasting_method();
  void set_allocated_pasting_method(std::string* pasting_method);
  private:
  const std::string& _internal_pasting_method() const;
  void _internal_set_pasting_method(const std::string& value);
  std::string* _internal_mutable_pasting_method();
  public:

  // .DataProviderParams common_dpp = 1;
  bool has_common_dpp() const;
  private:
  bool _internal_has_common_dpp() const;
  public:
  void clear_common_dpp();
  const ::DataProviderParams& common_dpp() const;
  ::DataProviderParams* release_common_dpp();
  ::DataProviderParams* mutable_common_dpp();
  void set_allocated_common_dpp(::DataProviderParams* common_dpp);
  private:
  const ::DataProviderParams& _internal_common_dpp() const;
  ::DataProviderParams* _internal_mutable_common_dpp();
  public:
  void unsafe_arena_set_allocated_common_dpp(
      ::DataProviderParams* common_dpp);
  ::DataProviderParams* unsafe_arena_release_common_dpp();

  // float min_x = 3;
  void clear_min_x();
  float min_x() const;
  void set_min_x(float value);
  private:
  float _internal_min_x() const;
  void _internal_set_min_x(float value);
  public:

  // float max_x = 4;
  void clear_max_x();
  float max_x() const;
  void set_max_x(float value);
  private:
  float _internal_max_x() const;
  void _internal_set_max_x(float value);
  public:

  // float min_y = 5;
  void clear_min_y();
  float min_y() const;
  void set_min_y(float value);
  private:
  float _internal_min_y() const;
  void _internal_set_min_y(float value);
  public:

  // float max_y = 6;
  void clear_max_y();
  float max_y() const;
  void set_max_y(float value);
  private:
  float _internal_max_y() const;
  void _internal_set_max_y(float value);
  public:

  // float paste_prob = 7;
  void clear_paste_prob();
  float paste_prob() const;
  void set_paste_prob(float value);
  private:
  float _internal_paste_prob() const;
  void _internal_set_paste_prob(float value);
  public:

  // bool write_bbox = 8;
  void clear_write_bbox();
  bool write_bbox() const;
  void set_write_bbox(bool value);
  private:
  bool _internal_write_bbox() const;
  void _internal_set_write_bbox(bool value);
  public:

  // float min_visible = 9;
  void clear_min_visible();
  float min_visible() const;
  void set_min_visible(float value);
  private:
  float _internal_min_visible() const;
  void _internal_set_min_visible(float value);
  public:

  // float max_visible = 10;
  void clear_max_visible();
  float max_visible() const;
  void set_max_visible(float value);
  private:
  float _internal_max_visible() const;
  void _internal_set_max_visible(float value);
  public:

  // int32 repetitions = 11;
  void clear_repetitions();
  ::PROTOBUF_NAMESPACE_ID::int32 repetitions() const;
  void set_repetitions(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_repetitions() const;
  void _internal_set_repetitions(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float skip_prob = 14;
  void clear_skip_prob();
  float skip_prob() const;
  void set_skip_prob(float value);
  private:
  float _internal_skip_prob() const;
  void _internal_set_skip_prob(float value);
  public:

  // @@protoc_insertion_point(class_scope:PastingLevelParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_split_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pasting_method_;
  ::DataProviderParams* common_dpp_;
  float min_x_;
  float max_x_;
  float min_y_;
  float max_y_;
  float paste_prob_;
  bool write_bbox_;
  float min_visible_;
  float max_visible_;
  ::PROTOBUF_NAMESPACE_ID::int32 repetitions_;
  float skip_prob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fpasting_5fdata_5fprovider_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PastingDataProviderParams

// string background_dataset = 1;
inline void PastingDataProviderParams::clear_background_dataset() {
  background_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PastingDataProviderParams::background_dataset() const {
  // @@protoc_insertion_point(field_get:PastingDataProviderParams.background_dataset)
  return _internal_background_dataset();
}
inline void PastingDataProviderParams::set_background_dataset(const std::string& value) {
  _internal_set_background_dataset(value);
  // @@protoc_insertion_point(field_set:PastingDataProviderParams.background_dataset)
}
inline std::string* PastingDataProviderParams::mutable_background_dataset() {
  // @@protoc_insertion_point(field_mutable:PastingDataProviderParams.background_dataset)
  return _internal_mutable_background_dataset();
}
inline const std::string& PastingDataProviderParams::_internal_background_dataset() const {
  return background_dataset_.Get();
}
inline void PastingDataProviderParams::_internal_set_background_dataset(const std::string& value) {
  
  background_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PastingDataProviderParams::set_background_dataset(std::string&& value) {
  
  background_dataset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PastingDataProviderParams.background_dataset)
}
inline void PastingDataProviderParams::set_background_dataset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  background_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PastingDataProviderParams.background_dataset)
}
inline void PastingDataProviderParams::set_background_dataset(const char* value,
    size_t size) {
  
  background_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PastingDataProviderParams.background_dataset)
}
inline std::string* PastingDataProviderParams::_internal_mutable_background_dataset() {
  
  return background_dataset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PastingDataProviderParams::release_background_dataset() {
  // @@protoc_insertion_point(field_release:PastingDataProviderParams.background_dataset)
  return background_dataset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PastingDataProviderParams::set_allocated_background_dataset(std::string* background_dataset) {
  if (background_dataset != nullptr) {
    
  } else {
    
  }
  background_dataset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), background_dataset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PastingDataProviderParams.background_dataset)
}

// .DataProviderParams background_dpp = 2;
inline bool PastingDataProviderParams::_internal_has_background_dpp() const {
  return this != internal_default_instance() && background_dpp_ != nullptr;
}
inline bool PastingDataProviderParams::has_background_dpp() const {
  return _internal_has_background_dpp();
}
inline const ::DataProviderParams& PastingDataProviderParams::_internal_background_dpp() const {
  const ::DataProviderParams* p = background_dpp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataProviderParams*>(
      &::_DataProviderParams_default_instance_);
}
inline const ::DataProviderParams& PastingDataProviderParams::background_dpp() const {
  // @@protoc_insertion_point(field_get:PastingDataProviderParams.background_dpp)
  return _internal_background_dpp();
}
inline void PastingDataProviderParams::unsafe_arena_set_allocated_background_dpp(
    ::DataProviderParams* background_dpp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_dpp_);
  }
  background_dpp_ = background_dpp;
  if (background_dpp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PastingDataProviderParams.background_dpp)
}
inline ::DataProviderParams* PastingDataProviderParams::release_background_dpp() {
  
  ::DataProviderParams* temp = background_dpp_;
  background_dpp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataProviderParams* PastingDataProviderParams::unsafe_arena_release_background_dpp() {
  // @@protoc_insertion_point(field_release:PastingDataProviderParams.background_dpp)
  
  ::DataProviderParams* temp = background_dpp_;
  background_dpp_ = nullptr;
  return temp;
}
inline ::DataProviderParams* PastingDataProviderParams::_internal_mutable_background_dpp() {
  
  if (background_dpp_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataProviderParams>(GetArena());
    background_dpp_ = p;
  }
  return background_dpp_;
}
inline ::DataProviderParams* PastingDataProviderParams::mutable_background_dpp() {
  // @@protoc_insertion_point(field_mutable:PastingDataProviderParams.background_dpp)
  return _internal_mutable_background_dpp();
}
inline void PastingDataProviderParams::set_allocated_background_dpp(::DataProviderParams* background_dpp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_dpp_);
  }
  if (background_dpp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_dpp)->GetArena();
    if (message_arena != submessage_arena) {
      background_dpp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_dpp, submessage_arena);
    }
    
  } else {
    
  }
  background_dpp_ = background_dpp;
  // @@protoc_insertion_point(field_set_allocated:PastingDataProviderParams.background_dpp)
}

// repeated .PastingLevelParams level_dpp = 3;
inline int PastingDataProviderParams::_internal_level_dpp_size() const {
  return level_dpp_.size();
}
inline int PastingDataProviderParams::level_dpp_size() const {
  return _internal_level_dpp_size();
}
inline void PastingDataProviderParams::clear_level_dpp() {
  level_dpp_.Clear();
}
inline ::PastingLevelParams* PastingDataProviderParams::mutable_level_dpp(int index) {
  // @@protoc_insertion_point(field_mutable:PastingDataProviderParams.level_dpp)
  return level_dpp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PastingLevelParams >*
PastingDataProviderParams::mutable_level_dpp() {
  // @@protoc_insertion_point(field_mutable_list:PastingDataProviderParams.level_dpp)
  return &level_dpp_;
}
inline const ::PastingLevelParams& PastingDataProviderParams::_internal_level_dpp(int index) const {
  return level_dpp_.Get(index);
}
inline const ::PastingLevelParams& PastingDataProviderParams::level_dpp(int index) const {
  // @@protoc_insertion_point(field_get:PastingDataProviderParams.level_dpp)
  return _internal_level_dpp(index);
}
inline ::PastingLevelParams* PastingDataProviderParams::_internal_add_level_dpp() {
  return level_dpp_.Add();
}
inline ::PastingLevelParams* PastingDataProviderParams::add_level_dpp() {
  // @@protoc_insertion_point(field_add:PastingDataProviderParams.level_dpp)
  return _internal_add_level_dpp();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PastingLevelParams >&
PastingDataProviderParams::level_dpp() const {
  // @@protoc_insertion_point(field_list:PastingDataProviderParams.level_dpp)
  return level_dpp_;
}

// string output_dataset = 4;
inline void PastingDataProviderParams::clear_output_dataset() {
  output_dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PastingDataProviderParams::output_dataset() const {
  // @@protoc_insertion_point(field_get:PastingDataProviderParams.output_dataset)
  return _internal_output_dataset();
}
inline void PastingDataProviderParams::set_output_dataset(const std::string& value) {
  _internal_set_output_dataset(value);
  // @@protoc_insertion_point(field_set:PastingDataProviderParams.output_dataset)
}
inline std::string* PastingDataProviderParams::mutable_output_dataset() {
  // @@protoc_insertion_point(field_mutable:PastingDataProviderParams.output_dataset)
  return _internal_mutable_output_dataset();
}
inline const std::string& PastingDataProviderParams::_internal_output_dataset() const {
  return output_dataset_.Get();
}
inline void PastingDataProviderParams::_internal_set_output_dataset(const std::string& value) {
  
  output_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PastingDataProviderParams::set_output_dataset(std::string&& value) {
  
  output_dataset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PastingDataProviderParams.output_dataset)
}
inline void PastingDataProviderParams::set_output_dataset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PastingDataProviderParams.output_dataset)
}
inline void PastingDataProviderParams::set_output_dataset(const char* value,
    size_t size) {
  
  output_dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PastingDataProviderParams.output_dataset)
}
inline std::string* PastingDataProviderParams::_internal_mutable_output_dataset() {
  
  return output_dataset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PastingDataProviderParams::release_output_dataset() {
  // @@protoc_insertion_point(field_release:PastingDataProviderParams.output_dataset)
  return output_dataset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PastingDataProviderParams::set_allocated_output_dataset(std::string* output_dataset) {
  if (output_dataset != nullptr) {
    
  } else {
    
  }
  output_dataset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_dataset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PastingDataProviderParams.output_dataset)
}

// repeated .MiniBatchItemStage mbitem_stage = 5;
inline int PastingDataProviderParams::_internal_mbitem_stage_size() const {
  return mbitem_stage_.size();
}
inline int PastingDataProviderParams::mbitem_stage_size() const {
  return _internal_mbitem_stage_size();
}
inline ::MiniBatchItemStage* PastingDataProviderParams::mutable_mbitem_stage(int index) {
  // @@protoc_insertion_point(field_mutable:PastingDataProviderParams.mbitem_stage)
  return mbitem_stage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MiniBatchItemStage >*
PastingDataProviderParams::mutable_mbitem_stage() {
  // @@protoc_insertion_point(field_mutable_list:PastingDataProviderParams.mbitem_stage)
  return &mbitem_stage_;
}
inline const ::MiniBatchItemStage& PastingDataProviderParams::_internal_mbitem_stage(int index) const {
  return mbitem_stage_.Get(index);
}
inline const ::MiniBatchItemStage& PastingDataProviderParams::mbitem_stage(int index) const {
  // @@protoc_insertion_point(field_get:PastingDataProviderParams.mbitem_stage)
  return _internal_mbitem_stage(index);
}
inline ::MiniBatchItemStage* PastingDataProviderParams::_internal_add_mbitem_stage() {
  return mbitem_stage_.Add();
}
inline ::MiniBatchItemStage* PastingDataProviderParams::add_mbitem_stage() {
  // @@protoc_insertion_point(field_add:PastingDataProviderParams.mbitem_stage)
  return _internal_add_mbitem_stage();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MiniBatchItemStage >&
PastingDataProviderParams::mbitem_stage() const {
  // @@protoc_insertion_point(field_list:PastingDataProviderParams.mbitem_stage)
  return mbitem_stage_;
}

// .ProcessingParams processing_params = 6;
inline bool PastingDataProviderParams::_internal_has_processing_params() const {
  return this != internal_default_instance() && processing_params_ != nullptr;
}
inline bool PastingDataProviderParams::has_processing_params() const {
  return _internal_has_processing_params();
}
inline const ::ProcessingParams& PastingDataProviderParams::_internal_processing_params() const {
  const ::ProcessingParams* p = processing_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ProcessingParams*>(
      &::_ProcessingParams_default_instance_);
}
inline const ::ProcessingParams& PastingDataProviderParams::processing_params() const {
  // @@protoc_insertion_point(field_get:PastingDataProviderParams.processing_params)
  return _internal_processing_params();
}
inline void PastingDataProviderParams::unsafe_arena_set_allocated_processing_params(
    ::ProcessingParams* processing_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(processing_params_);
  }
  processing_params_ = processing_params;
  if (processing_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PastingDataProviderParams.processing_params)
}
inline ::ProcessingParams* PastingDataProviderParams::release_processing_params() {
  
  ::ProcessingParams* temp = processing_params_;
  processing_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProcessingParams* PastingDataProviderParams::unsafe_arena_release_processing_params() {
  // @@protoc_insertion_point(field_release:PastingDataProviderParams.processing_params)
  
  ::ProcessingParams* temp = processing_params_;
  processing_params_ = nullptr;
  return temp;
}
inline ::ProcessingParams* PastingDataProviderParams::_internal_mutable_processing_params() {
  
  if (processing_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProcessingParams>(GetArena());
    processing_params_ = p;
  }
  return processing_params_;
}
inline ::ProcessingParams* PastingDataProviderParams::mutable_processing_params() {
  // @@protoc_insertion_point(field_mutable:PastingDataProviderParams.processing_params)
  return _internal_mutable_processing_params();
}
inline void PastingDataProviderParams::set_allocated_processing_params(::ProcessingParams* processing_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(processing_params_);
  }
  if (processing_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(processing_params)->GetArena();
    if (message_arena != submessage_arena) {
      processing_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processing_params, submessage_arena);
    }
    
  } else {
    
  }
  processing_params_ = processing_params;
  // @@protoc_insertion_point(field_set_allocated:PastingDataProviderParams.processing_params)
}

// string background_dataset_split = 7;
inline void PastingDataProviderParams::clear_background_dataset_split() {
  background_dataset_split_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PastingDataProviderParams::background_dataset_split() const {
  // @@protoc_insertion_point(field_get:PastingDataProviderParams.background_dataset_split)
  return _internal_background_dataset_split();
}
inline void PastingDataProviderParams::set_background_dataset_split(const std::string& value) {
  _internal_set_background_dataset_split(value);
  // @@protoc_insertion_point(field_set:PastingDataProviderParams.background_dataset_split)
}
inline std::string* PastingDataProviderParams::mutable_background_dataset_split() {
  // @@protoc_insertion_point(field_mutable:PastingDataProviderParams.background_dataset_split)
  return _internal_mutable_background_dataset_split();
}
inline const std::string& PastingDataProviderParams::_internal_background_dataset_split() const {
  return background_dataset_split_.Get();
}
inline void PastingDataProviderParams::_internal_set_background_dataset_split(const std::string& value) {
  
  background_dataset_split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PastingDataProviderParams::set_background_dataset_split(std::string&& value) {
  
  background_dataset_split_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PastingDataProviderParams.background_dataset_split)
}
inline void PastingDataProviderParams::set_background_dataset_split(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  background_dataset_split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PastingDataProviderParams.background_dataset_split)
}
inline void PastingDataProviderParams::set_background_dataset_split(const char* value,
    size_t size) {
  
  background_dataset_split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PastingDataProviderParams.background_dataset_split)
}
inline std::string* PastingDataProviderParams::_internal_mutable_background_dataset_split() {
  
  return background_dataset_split_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PastingDataProviderParams::release_background_dataset_split() {
  // @@protoc_insertion_point(field_release:PastingDataProviderParams.background_dataset_split)
  return background_dataset_split_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PastingDataProviderParams::set_allocated_background_dataset_split(std::string* background_dataset_split) {
  if (background_dataset_split != nullptr) {
    
  } else {
    
  }
  background_dataset_split_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), background_dataset_split,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PastingDataProviderParams.background_dataset_split)
}

// bool random_layer_order = 8;
inline void PastingDataProviderParams::clear_random_layer_order() {
  random_layer_order_ = false;
}
inline bool PastingDataProviderParams::_internal_random_layer_order() const {
  return random_layer_order_;
}
inline bool PastingDataProviderParams::random_layer_order() const {
  // @@protoc_insertion_point(field_get:PastingDataProviderParams.random_layer_order)
  return _internal_random_layer_order();
}
inline void PastingDataProviderParams::_internal_set_random_layer_order(bool value) {
  
  random_layer_order_ = value;
}
inline void PastingDataProviderParams::set_random_layer_order(bool value) {
  _internal_set_random_layer_order(value);
  // @@protoc_insertion_point(field_set:PastingDataProviderParams.random_layer_order)
}

// bool constrain_boxes_to_visible = 9;
inline void PastingDataProviderParams::clear_constrain_boxes_to_visible() {
  constrain_boxes_to_visible_ = false;
}
inline bool PastingDataProviderParams::_internal_constrain_boxes_to_visible() const {
  return constrain_boxes_to_visible_;
}
inline bool PastingDataProviderParams::constrain_boxes_to_visible() const {
  // @@protoc_insertion_point(field_get:PastingDataProviderParams.constrain_boxes_to_visible)
  return _internal_constrain_boxes_to_visible();
}
inline void PastingDataProviderParams::_internal_set_constrain_boxes_to_visible(bool value) {
  
  constrain_boxes_to_visible_ = value;
}
inline void PastingDataProviderParams::set_constrain_boxes_to_visible(bool value) {
  _internal_set_constrain_boxes_to_visible(value);
  // @@protoc_insertion_point(field_set:PastingDataProviderParams.constrain_boxes_to_visible)
}

// -------------------------------------------------------------------

// PastingLevelParams

// .DataProviderParams common_dpp = 1;
inline bool PastingLevelParams::_internal_has_common_dpp() const {
  return this != internal_default_instance() && common_dpp_ != nullptr;
}
inline bool PastingLevelParams::has_common_dpp() const {
  return _internal_has_common_dpp();
}
inline const ::DataProviderParams& PastingLevelParams::_internal_common_dpp() const {
  const ::DataProviderParams* p = common_dpp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataProviderParams*>(
      &::_DataProviderParams_default_instance_);
}
inline const ::DataProviderParams& PastingLevelParams::common_dpp() const {
  // @@protoc_insertion_point(field_get:PastingLevelParams.common_dpp)
  return _internal_common_dpp();
}
inline void PastingLevelParams::unsafe_arena_set_allocated_common_dpp(
    ::DataProviderParams* common_dpp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_dpp_);
  }
  common_dpp_ = common_dpp;
  if (common_dpp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PastingLevelParams.common_dpp)
}
inline ::DataProviderParams* PastingLevelParams::release_common_dpp() {
  
  ::DataProviderParams* temp = common_dpp_;
  common_dpp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataProviderParams* PastingLevelParams::unsafe_arena_release_common_dpp() {
  // @@protoc_insertion_point(field_release:PastingLevelParams.common_dpp)
  
  ::DataProviderParams* temp = common_dpp_;
  common_dpp_ = nullptr;
  return temp;
}
inline ::DataProviderParams* PastingLevelParams::_internal_mutable_common_dpp() {
  
  if (common_dpp_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataProviderParams>(GetArena());
    common_dpp_ = p;
  }
  return common_dpp_;
}
inline ::DataProviderParams* PastingLevelParams::mutable_common_dpp() {
  // @@protoc_insertion_point(field_mutable:PastingLevelParams.common_dpp)
  return _internal_mutable_common_dpp();
}
inline void PastingLevelParams::set_allocated_common_dpp(::DataProviderParams* common_dpp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_dpp_);
  }
  if (common_dpp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_dpp)->GetArena();
    if (message_arena != submessage_arena) {
      common_dpp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_dpp, submessage_arena);
    }
    
  } else {
    
  }
  common_dpp_ = common_dpp;
  // @@protoc_insertion_point(field_set_allocated:PastingLevelParams.common_dpp)
}

// string dataset_name = 2;
inline void PastingLevelParams::clear_dataset_name() {
  dataset_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PastingLevelParams::dataset_name() const {
  // @@protoc_insertion_point(field_get:PastingLevelParams.dataset_name)
  return _internal_dataset_name();
}
inline void PastingLevelParams::set_dataset_name(const std::string& value) {
  _internal_set_dataset_name(value);
  // @@protoc_insertion_point(field_set:PastingLevelParams.dataset_name)
}
inline std::string* PastingLevelParams::mutable_dataset_name() {
  // @@protoc_insertion_point(field_mutable:PastingLevelParams.dataset_name)
  return _internal_mutable_dataset_name();
}
inline const std::string& PastingLevelParams::_internal_dataset_name() const {
  return dataset_name_.Get();
}
inline void PastingLevelParams::_internal_set_dataset_name(const std::string& value) {
  
  dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PastingLevelParams::set_dataset_name(std::string&& value) {
  
  dataset_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PastingLevelParams.dataset_name)
}
inline void PastingLevelParams::set_dataset_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PastingLevelParams.dataset_name)
}
inline void PastingLevelParams::set_dataset_name(const char* value,
    size_t size) {
  
  dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PastingLevelParams.dataset_name)
}
inline std::string* PastingLevelParams::_internal_mutable_dataset_name() {
  
  return dataset_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PastingLevelParams::release_dataset_name() {
  // @@protoc_insertion_point(field_release:PastingLevelParams.dataset_name)
  return dataset_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PastingLevelParams::set_allocated_dataset_name(std::string* dataset_name) {
  if (dataset_name != nullptr) {
    
  } else {
    
  }
  dataset_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PastingLevelParams.dataset_name)
}

// float min_x = 3;
inline void PastingLevelParams::clear_min_x() {
  min_x_ = 0;
}
inline float PastingLevelParams::_internal_min_x() const {
  return min_x_;
}
inline float PastingLevelParams::min_x() const {
  // @@protoc_insertion_point(field_get:PastingLevelParams.min_x)
  return _internal_min_x();
}
inline void PastingLevelParams::_internal_set_min_x(float value) {
  
  min_x_ = value;
}
inline void PastingLevelParams::set_min_x(float value) {
  _internal_set_min_x(value);
  // @@protoc_insertion_point(field_set:PastingLevelParams.min_x)
}

// float max_x = 4;
inline void PastingLevelParams::clear_max_x() {
  max_x_ = 0;
}
inline float PastingLevelParams::_internal_max_x() const {
  return max_x_;
}
inline float PastingLevelParams::max_x() const {
  // @@protoc_insertion_point(field_get:PastingLevelParams.max_x)
  return _internal_max_x();
}
inline void PastingLevelParams::_internal_set_max_x(float value) {
  
  max_x_ = value;
}
inline void PastingLevelParams::set_max_x(float value) {
  _internal_set_max_x(value);
  // @@protoc_insertion_point(field_set:PastingLevelParams.max_x)
}

// float min_y = 5;
inline void PastingLevelParams::clear_min_y() {
  min_y_ = 0;
}
inline float PastingLevelParams::_internal_min_y() const {
  return min_y_;
}
inline float PastingLevelParams::min_y() const {
  // @@protoc_insertion_point(field_get:PastingLevelParams.min_y)
  return _internal_min_y();
}
inline void PastingLevelParams::_internal_set_min_y(float value) {
  
  min_y_ = value;
}
inline void PastingLevelParams::set_min_y(float value) {
  _internal_set_min_y(value);
  // @@protoc_insertion_point(field_set:PastingLevelParams.min_y)
}

// float max_y = 6;
inline void PastingLevelParams::clear_max_y() {
  max_y_ = 0;
}
inline float PastingLevelParams::_internal_max_y() const {
  return max_y_;
}
inline float PastingLevelParams::max_y() const {
  // @@protoc_insertion_point(field_get:PastingLevelParams.max_y)
  return _internal_max_y();
}
inline void PastingLevelParams::_internal_set_max_y(float value) {
  
  max_y_ = value;
}
inline void PastingLevelParams::set_max_y(float value) {
  _internal_set_max_y(value);
  // @@protoc_insertion_point(field_set:PastingLevelParams.max_y)
}

// float paste_prob = 7;
inline void PastingLevelParams::clear_paste_prob() {
  paste_prob_ = 0;
}
inline float PastingLevelParams::_internal_paste_prob() const {
  return paste_prob_;
}
inline float PastingLevelParams::paste_prob() const {
  // @@protoc_insertion_point(field_get:PastingLevelParams.paste_prob)
  return _internal_paste_prob();
}
inline void PastingLevelParams::_internal_set_paste_prob(float value) {
  
  paste_prob_ = value;
}
inline void PastingLevelParams::set_paste_prob(float value) {
  _internal_set_paste_prob(value);
  // @@protoc_insertion_point(field_set:PastingLevelParams.paste_prob)
}

// bool write_bbox = 8;
inline void PastingLevelParams::clear_write_bbox() {
  write_bbox_ = false;
}
inline bool PastingLevelParams::_internal_write_bbox() const {
  return write_bbox_;
}
inline bool PastingLevelParams::write_bbox() const {
  // @@protoc_insertion_point(field_get:PastingLevelParams.write_bbox)
  return _internal_write_bbox();
}
inline void PastingLevelParams::_internal_set_write_bbox(bool value) {
  
  write_bbox_ = value;
}
inline void PastingLevelParams::set_write_bbox(bool value) {
  _internal_set_write_bbox(value);
  // @@protoc_insertion_point(field_set:PastingLevelParams.write_bbox)
}

// float min_visible = 9;
inline void PastingLevelParams::clear_min_visible() {
  min_visible_ = 0;
}
inline float PastingLevelParams::_internal_min_visible() const {
  return min_visible_;
}
inline float PastingLevelParams::min_visible() const {
  // @@protoc_insertion_point(field_get:PastingLevelParams.min_visible)
  return _internal_min_visible();
}
inline void PastingLevelParams::_internal_set_min_visible(float value) {
  
  min_visible_ = value;
}
inline void PastingLevelParams::set_min_visible(float value) {
  _internal_set_min_visible(value);
  // @@protoc_insertion_point(field_set:PastingLevelParams.min_visible)
}

// float max_visible = 10;
inline void PastingLevelParams::clear_max_visible() {
  max_visible_ = 0;
}
inline float PastingLevelParams::_internal_max_visible() const {
  return max_visible_;
}
inline float PastingLevelParams::max_visible() const {
  // @@protoc_insertion_point(field_get:PastingLevelParams.max_visible)
  return _internal_max_visible();
}
inline void PastingLevelParams::_internal_set_max_visible(float value) {
  
  max_visible_ = value;
}
inline void PastingLevelParams::set_max_visible(float value) {
  _internal_set_max_visible(value);
  // @@protoc_insertion_point(field_set:PastingLevelParams.max_visible)
}

// int32 repetitions = 11;
inline void PastingLevelParams::clear_repetitions() {
  repetitions_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastingLevelParams::_internal_repetitions() const {
  return repetitions_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastingLevelParams::repetitions() const {
  // @@protoc_insertion_point(field_get:PastingLevelParams.repetitions)
  return _internal_repetitions();
}
inline void PastingLevelParams::_internal_set_repetitions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  repetitions_ = value;
}
inline void PastingLevelParams::set_repetitions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_repetitions(value);
  // @@protoc_insertion_point(field_set:PastingLevelParams.repetitions)
}

// string dataset_split = 12;
inline void PastingLevelParams::clear_dataset_split() {
  dataset_split_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PastingLevelParams::dataset_split() const {
  // @@protoc_insertion_point(field_get:PastingLevelParams.dataset_split)
  return _internal_dataset_split();
}
inline void PastingLevelParams::set_dataset_split(const std::string& value) {
  _internal_set_dataset_split(value);
  // @@protoc_insertion_point(field_set:PastingLevelParams.dataset_split)
}
inline std::string* PastingLevelParams::mutable_dataset_split() {
  // @@protoc_insertion_point(field_mutable:PastingLevelParams.dataset_split)
  return _internal_mutable_dataset_split();
}
inline const std::string& PastingLevelParams::_internal_dataset_split() const {
  return dataset_split_.Get();
}
inline void PastingLevelParams::_internal_set_dataset_split(const std::string& value) {
  
  dataset_split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PastingLevelParams::set_dataset_split(std::string&& value) {
  
  dataset_split_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PastingLevelParams.dataset_split)
}
inline void PastingLevelParams::set_dataset_split(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataset_split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PastingLevelParams.dataset_split)
}
inline void PastingLevelParams::set_dataset_split(const char* value,
    size_t size) {
  
  dataset_split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PastingLevelParams.dataset_split)
}
inline std::string* PastingLevelParams::_internal_mutable_dataset_split() {
  
  return dataset_split_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PastingLevelParams::release_dataset_split() {
  // @@protoc_insertion_point(field_release:PastingLevelParams.dataset_split)
  return dataset_split_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PastingLevelParams::set_allocated_dataset_split(std::string* dataset_split) {
  if (dataset_split != nullptr) {
    
  } else {
    
  }
  dataset_split_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_split,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PastingLevelParams.dataset_split)
}

// string pasting_method = 13;
inline void PastingLevelParams::clear_pasting_method() {
  pasting_method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PastingLevelParams::pasting_method() const {
  // @@protoc_insertion_point(field_get:PastingLevelParams.pasting_method)
  return _internal_pasting_method();
}
inline void PastingLevelParams::set_pasting_method(const std::string& value) {
  _internal_set_pasting_method(value);
  // @@protoc_insertion_point(field_set:PastingLevelParams.pasting_method)
}
inline std::string* PastingLevelParams::mutable_pasting_method() {
  // @@protoc_insertion_point(field_mutable:PastingLevelParams.pasting_method)
  return _internal_mutable_pasting_method();
}
inline const std::string& PastingLevelParams::_internal_pasting_method() const {
  return pasting_method_.Get();
}
inline void PastingLevelParams::_internal_set_pasting_method(const std::string& value) {
  
  pasting_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PastingLevelParams::set_pasting_method(std::string&& value) {
  
  pasting_method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PastingLevelParams.pasting_method)
}
inline void PastingLevelParams::set_pasting_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pasting_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PastingLevelParams.pasting_method)
}
inline void PastingLevelParams::set_pasting_method(const char* value,
    size_t size) {
  
  pasting_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PastingLevelParams.pasting_method)
}
inline std::string* PastingLevelParams::_internal_mutable_pasting_method() {
  
  return pasting_method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PastingLevelParams::release_pasting_method() {
  // @@protoc_insertion_point(field_release:PastingLevelParams.pasting_method)
  return pasting_method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PastingLevelParams::set_allocated_pasting_method(std::string* pasting_method) {
  if (pasting_method != nullptr) {
    
  } else {
    
  }
  pasting_method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pasting_method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PastingLevelParams.pasting_method)
}

// float skip_prob = 14;
inline void PastingLevelParams::clear_skip_prob() {
  skip_prob_ = 0;
}
inline float PastingLevelParams::_internal_skip_prob() const {
  return skip_prob_;
}
inline float PastingLevelParams::skip_prob() const {
  // @@protoc_insertion_point(field_get:PastingLevelParams.skip_prob)
  return _internal_skip_prob();
}
inline void PastingLevelParams::_internal_set_skip_prob(float value) {
  
  skip_prob_ = value;
}
inline void PastingLevelParams::set_skip_prob(float value) {
  _internal_set_skip_prob(value);
  // @@protoc_insertion_point(field_set:PastingLevelParams.skip_prob)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fpasting_5fdata_5fprovider_2eproto
