// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/train_config.proto

#include "proto/utils/train_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdatabatch_5fgenerator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DataBatchGeneratorParams_proto_2futils_2fdatabatch_5fgenerator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2ftrain_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DataParams_proto_2futils_2ftrain_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2ftrain_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EvalConfig_proto_2futils_2ftrain_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2ftrain_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExpInfo_proto_2futils_2ftrain_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2ftrain_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Freqs_proto_2futils_2ftrain_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fcheckpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadCheckpointScope_proto_2futils_2fcheckpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2ftrain_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Lrate_proto_2futils_2ftrain_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2ftrain_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LratePair_proto_2futils_2ftrain_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2ftrain_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LratePolynomialDecayConfig_proto_2futils_2ftrain_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2ftrain_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelProfileResults_TimesPerExampleEntry_DoNotUse_proto_2futils_2ftrain_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2ftrain_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelProfileResults_TimesTotalEntry_DoNotUse_proto_2futils_2ftrain_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
class TrainConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainConfig> _instance;
} _TrainConfig_default_instance_;
class ExpInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExpInfo> _instance;
} _ExpInfo_default_instance_;
class EvalConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EvalConfig> _instance;
} _EvalConfig_default_instance_;
class DataParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataParams> _instance;
} _DataParams_default_instance_;
class FreqsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Freqs> _instance;
} _Freqs_default_instance_;
class LratePairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LratePair> _instance;
} _LratePair_default_instance_;
class LrateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lrate> _instance;
} _Lrate_default_instance_;
class LratePolynomialDecayConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LratePolynomialDecayConfig> _instance;
} _LratePolynomialDecayConfig_default_instance_;
class ModelProfileResults_TimesTotalEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelProfileResults_TimesTotalEntry_DoNotUse> _instance;
} _ModelProfileResults_TimesTotalEntry_DoNotUse_default_instance_;
class ModelProfileResults_TimesPerExampleEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelProfileResults_TimesPerExampleEntry_DoNotUse> _instance;
} _ModelProfileResults_TimesPerExampleEntry_DoNotUse_default_instance_;
class ModelProfileResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelProfileResults> _instance;
} _ModelProfileResults_default_instance_;
static void InitDefaultsscc_info_DataParams_proto_2futils_2ftrain_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DataParams_default_instance_;
    new (ptr) ::DataParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DataParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DataParams_proto_2futils_2ftrain_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DataParams_proto_2futils_2ftrain_5fconfig_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_DataBatchGeneratorParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base,}};

static void InitDefaultsscc_info_EvalConfig_proto_2futils_2ftrain_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EvalConfig_default_instance_;
    new (ptr) ::EvalConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EvalConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EvalConfig_proto_2futils_2ftrain_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EvalConfig_proto_2futils_2ftrain_5fconfig_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_ExpInfo_proto_2futils_2ftrain_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ExpInfo_default_instance_;
    new (ptr) ::ExpInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ExpInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExpInfo_proto_2futils_2ftrain_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ExpInfo_proto_2futils_2ftrain_5fconfig_2eproto}, {
      &scc_info_LoadCheckpointScope_proto_2futils_2fcheckpoint_2eproto.base,
      &scc_info_EvalConfig_proto_2futils_2ftrain_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_Freqs_proto_2futils_2ftrain_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Freqs_default_instance_;
    new (ptr) ::Freqs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Freqs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Freqs_proto_2futils_2ftrain_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Freqs_proto_2futils_2ftrain_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_Lrate_proto_2futils_2ftrain_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Lrate_default_instance_;
    new (ptr) ::Lrate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lrate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Lrate_proto_2futils_2ftrain_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Lrate_proto_2futils_2ftrain_5fconfig_2eproto}, {
      &scc_info_LratePair_proto_2futils_2ftrain_5fconfig_2eproto.base,
      &scc_info_LratePolynomialDecayConfig_proto_2futils_2ftrain_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_LratePair_proto_2futils_2ftrain_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LratePair_default_instance_;
    new (ptr) ::LratePair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LratePair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LratePair_proto_2futils_2ftrain_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LratePair_proto_2futils_2ftrain_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_LratePolynomialDecayConfig_proto_2futils_2ftrain_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LratePolynomialDecayConfig_default_instance_;
    new (ptr) ::LratePolynomialDecayConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LratePolynomialDecayConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LratePolynomialDecayConfig_proto_2futils_2ftrain_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LratePolynomialDecayConfig_proto_2futils_2ftrain_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelProfileResults_proto_2futils_2ftrain_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ModelProfileResults_default_instance_;
    new (ptr) ::ModelProfileResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ModelProfileResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModelProfileResults_proto_2futils_2ftrain_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ModelProfileResults_proto_2futils_2ftrain_5fconfig_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ModelProfileResults_TimesTotalEntry_DoNotUse_proto_2futils_2ftrain_5fconfig_2eproto.base,
      &scc_info_ModelProfileResults_TimesPerExampleEntry_DoNotUse_proto_2futils_2ftrain_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelProfileResults_TimesPerExampleEntry_DoNotUse_proto_2futils_2ftrain_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ModelProfileResults_TimesPerExampleEntry_DoNotUse_default_instance_;
    new (ptr) ::ModelProfileResults_TimesPerExampleEntry_DoNotUse();
  }
  ::ModelProfileResults_TimesPerExampleEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelProfileResults_TimesPerExampleEntry_DoNotUse_proto_2futils_2ftrain_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelProfileResults_TimesPerExampleEntry_DoNotUse_proto_2futils_2ftrain_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelProfileResults_TimesTotalEntry_DoNotUse_proto_2futils_2ftrain_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ModelProfileResults_TimesTotalEntry_DoNotUse_default_instance_;
    new (ptr) ::ModelProfileResults_TimesTotalEntry_DoNotUse();
  }
  ::ModelProfileResults_TimesTotalEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelProfileResults_TimesTotalEntry_DoNotUse_proto_2futils_2ftrain_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelProfileResults_TimesTotalEntry_DoNotUse_proto_2futils_2ftrain_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TrainConfig_proto_2futils_2ftrain_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TrainConfig_default_instance_;
    new (ptr) ::TrainConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TrainConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TrainConfig_proto_2futils_2ftrain_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_TrainConfig_proto_2futils_2ftrain_5fconfig_2eproto}, {
      &scc_info_ExpInfo_proto_2futils_2ftrain_5fconfig_2eproto.base,
      &scc_info_Freqs_proto_2futils_2ftrain_5fconfig_2eproto.base,
      &scc_info_Lrate_proto_2futils_2ftrain_5fconfig_2eproto.base,
      &scc_info_DataParams_proto_2futils_2ftrain_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2futils_2ftrain_5fconfig_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2futils_2ftrain_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2futils_2ftrain_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2futils_2ftrain_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TrainConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TrainConfig, exp_info_),
  PROTOBUF_FIELD_OFFSET(::TrainConfig, freqs_),
  PROTOBUF_FIELD_OFFSET(::TrainConfig, lrate_),
  PROTOBUF_FIELD_OFFSET(::TrainConfig, data_params_),
  PROTOBUF_FIELD_OFFSET(::TrainConfig, job_name_),
  PROTOBUF_FIELD_OFFSET(::TrainConfig, clip_gradient_),
  PROTOBUF_FIELD_OFFSET(::TrainConfig, gradient_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ExpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ExpInfo, eid_),
  PROTOBUF_FIELD_OFFSET(::ExpInfo, load_checkpoint_scopes_),
  PROTOBUF_FIELD_OFFSET(::ExpInfo, exp_type_),
  PROTOBUF_FIELD_OFFSET(::ExpInfo, trainer_type_),
  PROTOBUF_FIELD_OFFSET(::ExpInfo, evaluation_),
  PROTOBUF_FIELD_OFFSET(::ExpInfo, device_type_),
  PROTOBUF_FIELD_OFFSET(::ExpInfo, num_devices_),
  PROTOBUF_FIELD_OFFSET(::ExpInfo, seed_),
  PROTOBUF_FIELD_OFFSET(::ExpInfo, note_),
  PROTOBUF_FIELD_OFFSET(::ExpInfo, email_),
  PROTOBUF_FIELD_OFFSET(::ExpInfo, num_epoch_),
  PROTOBUF_FIELD_OFFSET(::ExpInfo, num_minibatch_),
  PROTOBUF_FIELD_OFFSET(::ExpInfo, git_hash_),
  PROTOBUF_FIELD_OFFSET(::ExpInfo, is_celery_),
  PROTOBUF_FIELD_OFFSET(::ExpInfo, run_evals_inline_),
  PROTOBUF_FIELD_OFFSET(::ExpInfo, run_final_evals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EvalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EvalConfig, config_runner_class_),
  PROTOBUF_FIELD_OFFSET(::EvalConfig, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DataParams, cfg_),
  PROTOBUF_FIELD_OFFSET(::DataParams, cfg_args_),
  PROTOBUF_FIELD_OFFSET(::DataParams, input_args_),
  PROTOBUF_FIELD_OFFSET(::DataParams, optimizer_args_),
  PROTOBUF_FIELD_OFFSET(::DataParams, dataset_),
  PROTOBUF_FIELD_OFFSET(::DataParams, saved_output_eid_),
  PROTOBUF_FIELD_OFFSET(::DataParams, data_layername_),
  PROTOBUF_FIELD_OFFSET(::DataParams, test_data_layername_),
  PROTOBUF_FIELD_OFFSET(::DataParams, data_provider_params_),
  PROTOBUF_FIELD_OFFSET(::DataParams, databatch_generator_params_),
  PROTOBUF_FIELD_OFFSET(::DataParams, predict_split_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Freqs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Freqs, test_freq_),
  PROTOBUF_FIELD_OFFSET(::Freqs, save_freq_),
  PROTOBUF_FIELD_OFFSET(::Freqs, stats_freq_),
  PROTOBUF_FIELD_OFFSET(::Freqs, summary_freq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LratePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LratePair, epoch_),
  PROTOBUF_FIELD_OFFSET(::LratePair, lrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lrate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lrate, lrate_schedule_),
  PROTOBUF_FIELD_OFFSET(::Lrate, polynomial_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LratePolynomialDecayConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LratePolynomialDecayConfig, init_learning_rate_),
  PROTOBUF_FIELD_OFFSET(::LratePolynomialDecayConfig, decay_steps_),
  PROTOBUF_FIELD_OFFSET(::LratePolynomialDecayConfig, ending_learning_rate_),
  PROTOBUF_FIELD_OFFSET(::LratePolynomialDecayConfig, power_),
  PROTOBUF_FIELD_OFFSET(::LratePolynomialDecayConfig, cycle_),
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults_TimesTotalEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults_TimesTotalEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults_TimesTotalEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults_TimesTotalEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults_TimesPerExampleEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults_TimesPerExampleEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults_TimesPerExampleEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults_TimesPerExampleEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults, hostname_),
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults, created_at_),
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults, device_descriptions_json_),
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults, host_load_averages_),
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults, times_total_),
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults, times_per_example_),
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults, tf_profile_timing_),
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults, tf_profile_flops_),
  PROTOBUF_FIELD_OFFSET(::ModelProfileResults, tf_timeline_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TrainConfig)},
  { 12, -1, sizeof(::ExpInfo)},
  { 33, -1, sizeof(::EvalConfig)},
  { 40, -1, sizeof(::DataParams)},
  { 56, -1, sizeof(::Freqs)},
  { 65, -1, sizeof(::LratePair)},
  { 72, -1, sizeof(::Lrate)},
  { 79, -1, sizeof(::LratePolynomialDecayConfig)},
  { 89, 96, sizeof(::ModelProfileResults_TimesTotalEntry_DoNotUse)},
  { 98, 105, sizeof(::ModelProfileResults_TimesPerExampleEntry_DoNotUse)},
  { 107, -1, sizeof(::ModelProfileResults)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TrainConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ExpInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EvalConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DataParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Freqs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LratePair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Lrate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LratePolynomialDecayConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ModelProfileResults_TimesTotalEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ModelProfileResults_TimesPerExampleEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ModelProfileResults_default_instance_),
};

const char descriptor_table_protodef_proto_2futils_2ftrain_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036proto/utils/train_config.proto\032%proto/"
  "utils/databatch_generator.proto\032\037proto/u"
  "tils/data_provider.proto\032\034proto/utils/ch"
  "eckpoint.proto\032\034google/protobuf/struct.p"
  "roto\032\037google/protobuf/timestamp.proto\"\270\001"
  "\n\013TrainConfig\022\032\n\010exp_info\030\001 \001(\0132\010.ExpInf"
  "o\022\025\n\005freqs\030\002 \001(\0132\006.Freqs\022\025\n\005lrate\030\003 \001(\0132"
  "\006.Lrate\022 \n\013data_params\030\004 \001(\0132\013.DataParam"
  "s\022\020\n\010job_name\030\005 \001(\t\022\025\n\rclip_gradient\030\006 \001"
  "(\010\022\024\n\014gradient_max\030\007 \001(\002\"\354\002\n\007ExpInfo\022\013\n\003"
  "eid\030\001 \001(\003\0224\n\026load_checkpoint_scopes\030\002 \003("
  "\0132\024.LoadCheckpointScope\022\020\n\010exp_type\030\003 \001("
  "\t\022\024\n\014trainer_type\030\004 \001(\t\022\037\n\nevaluation\030\005 "
  "\003(\0132\013.EvalConfig\022\023\n\013device_type\030\006 \001(\t\022\023\n"
  "\013num_devices\030\007 \001(\005\022\014\n\004seed\030\010 \001(\003\022\014\n\004note"
  "\030\t \001(\t\022\r\n\005email\030\n \001(\t\022\021\n\tnum_epoch\030\013 \001(\003"
  "\022\025\n\rnum_minibatch\030\014 \001(\003\022\020\n\010git_hash\030\r \001("
  "\t\022\021\n\tis_celery\030\016 \001(\010\022\030\n\020run_evals_inline"
  "\030\017 \001(\010\022\027\n\017run_final_evals\030\020 \001(\010\"R\n\nEvalC"
  "onfig\022\033\n\023config_runner_class\030\001 \001(\t\022\'\n\006co"
  "nfig\030\002 \001(\0132\027.google.protobuf.Struct\"\233\003\n\n"
  "DataParams\022\013\n\003cfg\030\001 \001(\t\022)\n\010cfg_args\030\002 \001("
  "\0132\027.google.protobuf.Struct\022+\n\ninput_args"
  "\030\003 \001(\0132\027.google.protobuf.Struct\022/\n\016optim"
  "izer_args\030\004 \001(\0132\027.google.protobuf.Struct"
  "\022\017\n\007dataset\030\005 \001(\t\022\034\n\020saved_output_eid\030\006 "
  "\001(\003B\002\030\001\022\032\n\016data_layername\030\007 \001(\tB\002\030\001\022\037\n\023t"
  "est_data_layername\030\010 \001(\tB\002\030\001\0221\n\024data_pro"
  "vider_params\030\t \001(\0132\023.DataProviderParams\022"
  "=\n\032databatch_generator_params\030\n \001(\0132\031.Da"
  "taBatchGeneratorParams\022\031\n\rpredict_split\030"
  "d \001(\tB\002\030\001\"W\n\005Freqs\022\021\n\ttest_freq\030\001 \001(\003\022\021\n"
  "\tsave_freq\030\002 \001(\003\022\022\n\nstats_freq\030\003 \001(\003\022\024\n\014"
  "summary_freq\030\004 \001(\003\")\n\tLratePair\022\r\n\005epoch"
  "\030\001 \001(\002\022\r\n\005lrate\030\002 \001(\002\"c\n\005Lrate\022\"\n\016lrate_"
  "schedule\030\001 \003(\0132\n.LratePair\0226\n\021polynomial"
  "_config\030\002 \001(\0132\033.LratePolynomialDecayConf"
  "ig\"\211\001\n\032LratePolynomialDecayConfig\022\032\n\022ini"
  "t_learning_rate\030\001 \001(\002\022\023\n\013decay_steps\030\002 \001"
  "(\003\022\034\n\024ending_learning_rate\030\003 \001(\002\022\r\n\005powe"
  "r\030\004 \001(\002\022\r\n\005cycle\030\005 \001(\010\"\313\003\n\023ModelProfileR"
  "esults\022\020\n\010hostname\030\001 \001(\t\022.\n\ncreated_at\030\002"
  " \001(\0132\032.google.protobuf.Timestamp\022 \n\030devi"
  "ce_descriptions_json\030\003 \001(\t\022\032\n\022host_load_"
  "averages\030\004 \003(\002\0229\n\013times_total\030\n \003(\0132$.Mo"
  "delProfileResults.TimesTotalEntry\022D\n\021tim"
  "es_per_example\030\013 \003(\0132).ModelProfileResul"
  "ts.TimesPerExampleEntry\022\031\n\021tf_profile_ti"
  "ming\030\024 \001(\t\022\030\n\020tf_profile_flops\030\025 \001(\t\022\023\n\013"
  "tf_timeline\030\026 \001(\t\0321\n\017TimesTotalEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\0326\n\024TimesPer"
  "ExampleEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001"
  ":\0028\001B\016\n\005utilsZ\005utilsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto_deps[5] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_proto_2futils_2fcheckpoint_2eproto,
  &::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto,
  &::descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto_sccs[11] = {
  &scc_info_DataParams_proto_2futils_2ftrain_5fconfig_2eproto.base,
  &scc_info_EvalConfig_proto_2futils_2ftrain_5fconfig_2eproto.base,
  &scc_info_ExpInfo_proto_2futils_2ftrain_5fconfig_2eproto.base,
  &scc_info_Freqs_proto_2futils_2ftrain_5fconfig_2eproto.base,
  &scc_info_Lrate_proto_2futils_2ftrain_5fconfig_2eproto.base,
  &scc_info_LratePair_proto_2futils_2ftrain_5fconfig_2eproto.base,
  &scc_info_LratePolynomialDecayConfig_proto_2futils_2ftrain_5fconfig_2eproto.base,
  &scc_info_ModelProfileResults_proto_2futils_2ftrain_5fconfig_2eproto.base,
  &scc_info_ModelProfileResults_TimesPerExampleEntry_DoNotUse_proto_2futils_2ftrain_5fconfig_2eproto.base,
  &scc_info_ModelProfileResults_TimesTotalEntry_DoNotUse_proto_2futils_2ftrain_5fconfig_2eproto.base,
  &scc_info_TrainConfig_proto_2futils_2ftrain_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_proto_2futils_2ftrain_5fconfig_2eproto, "proto/utils/train_config.proto", 2108,
  &descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto_once, descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto_sccs, descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto_deps, 11, 5,
  schemas, file_default_instances, TableStruct_proto_2futils_2ftrain_5fconfig_2eproto::offsets,
  file_level_metadata_proto_2futils_2ftrain_5fconfig_2eproto, 11, file_level_enum_descriptors_proto_2futils_2ftrain_5fconfig_2eproto, file_level_service_descriptors_proto_2futils_2ftrain_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2futils_2ftrain_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2futils_2ftrain_5fconfig_2eproto)), true);

// ===================================================================

void TrainConfig::InitAsDefaultInstance() {
  ::_TrainConfig_default_instance_._instance.get_mutable()->exp_info_ = const_cast< ::ExpInfo*>(
      ::ExpInfo::internal_default_instance());
  ::_TrainConfig_default_instance_._instance.get_mutable()->freqs_ = const_cast< ::Freqs*>(
      ::Freqs::internal_default_instance());
  ::_TrainConfig_default_instance_._instance.get_mutable()->lrate_ = const_cast< ::Lrate*>(
      ::Lrate::internal_default_instance());
  ::_TrainConfig_default_instance_._instance.get_mutable()->data_params_ = const_cast< ::DataParams*>(
      ::DataParams::internal_default_instance());
}
class TrainConfig::_Internal {
 public:
  static const ::ExpInfo& exp_info(const TrainConfig* msg);
  static const ::Freqs& freqs(const TrainConfig* msg);
  static const ::Lrate& lrate(const TrainConfig* msg);
  static const ::DataParams& data_params(const TrainConfig* msg);
};

const ::ExpInfo&
TrainConfig::_Internal::exp_info(const TrainConfig* msg) {
  return *msg->exp_info_;
}
const ::Freqs&
TrainConfig::_Internal::freqs(const TrainConfig* msg) {
  return *msg->freqs_;
}
const ::Lrate&
TrainConfig::_Internal::lrate(const TrainConfig* msg) {
  return *msg->lrate_;
}
const ::DataParams&
TrainConfig::_Internal::data_params(const TrainConfig* msg) {
  return *msg->data_params_;
}
TrainConfig::TrainConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TrainConfig)
}
TrainConfig::TrainConfig(const TrainConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  job_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_name().empty()) {
    job_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_job_name(),
      GetArena());
  }
  if (from._internal_has_exp_info()) {
    exp_info_ = new ::ExpInfo(*from.exp_info_);
  } else {
    exp_info_ = nullptr;
  }
  if (from._internal_has_freqs()) {
    freqs_ = new ::Freqs(*from.freqs_);
  } else {
    freqs_ = nullptr;
  }
  if (from._internal_has_lrate()) {
    lrate_ = new ::Lrate(*from.lrate_);
  } else {
    lrate_ = nullptr;
  }
  if (from._internal_has_data_params()) {
    data_params_ = new ::DataParams(*from.data_params_);
  } else {
    data_params_ = nullptr;
  }
  ::memcpy(&clip_gradient_, &from.clip_gradient_,
    static_cast<size_t>(reinterpret_cast<char*>(&gradient_max_) -
    reinterpret_cast<char*>(&clip_gradient_)) + sizeof(gradient_max_));
  // @@protoc_insertion_point(copy_constructor:TrainConfig)
}

void TrainConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainConfig_proto_2futils_2ftrain_5fconfig_2eproto.base);
  job_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&exp_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gradient_max_) -
      reinterpret_cast<char*>(&exp_info_)) + sizeof(gradient_max_));
}

TrainConfig::~TrainConfig() {
  // @@protoc_insertion_point(destructor:TrainConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  job_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete exp_info_;
  if (this != internal_default_instance()) delete freqs_;
  if (this != internal_default_instance()) delete lrate_;
  if (this != internal_default_instance()) delete data_params_;
}

void TrainConfig::ArenaDtor(void* object) {
  TrainConfig* _this = reinterpret_cast< TrainConfig* >(object);
  (void)_this;
}
void TrainConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainConfig& TrainConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainConfig_proto_2futils_2ftrain_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TrainConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:TrainConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  job_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && exp_info_ != nullptr) {
    delete exp_info_;
  }
  exp_info_ = nullptr;
  if (GetArena() == nullptr && freqs_ != nullptr) {
    delete freqs_;
  }
  freqs_ = nullptr;
  if (GetArena() == nullptr && lrate_ != nullptr) {
    delete lrate_;
  }
  lrate_ = nullptr;
  if (GetArena() == nullptr && data_params_ != nullptr) {
    delete data_params_;
  }
  data_params_ = nullptr;
  ::memset(&clip_gradient_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gradient_max_) -
      reinterpret_cast<char*>(&clip_gradient_)) + sizeof(gradient_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ExpInfo exp_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_exp_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Freqs freqs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_freqs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Lrate lrate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataParams data_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string job_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_job_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TrainConfig.job_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool clip_gradient = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          clip_gradient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float gradient_max = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          gradient_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrainConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ExpInfo exp_info = 1;
  if (this->has_exp_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::exp_info(this), target, stream);
  }

  // .Freqs freqs = 2;
  if (this->has_freqs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::freqs(this), target, stream);
  }

  // .Lrate lrate = 3;
  if (this->has_lrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lrate(this), target, stream);
  }

  // .DataParams data_params = 4;
  if (this->has_data_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::data_params(this), target, stream);
  }

  // string job_name = 5;
  if (this->job_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_name().data(), static_cast<int>(this->_internal_job_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TrainConfig.job_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_job_name(), target);
  }

  // bool clip_gradient = 6;
  if (this->clip_gradient() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_clip_gradient(), target);
  }

  // float gradient_max = 7;
  if (!(this->gradient_max() <= 0 && this->gradient_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_gradient_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrainConfig)
  return target;
}

size_t TrainConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrainConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_name = 5;
  if (this->job_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_name());
  }

  // .ExpInfo exp_info = 1;
  if (this->has_exp_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exp_info_);
  }

  // .Freqs freqs = 2;
  if (this->has_freqs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freqs_);
  }

  // .Lrate lrate = 3;
  if (this->has_lrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lrate_);
  }

  // .DataParams data_params = 4;
  if (this->has_data_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_params_);
  }

  // bool clip_gradient = 6;
  if (this->clip_gradient() != 0) {
    total_size += 1 + 1;
  }

  // float gradient_max = 7;
  if (!(this->gradient_max() <= 0 && this->gradient_max() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrainConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrainConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrainConfig)
    MergeFrom(*source);
  }
}

void TrainConfig::MergeFrom(const TrainConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrainConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.job_name().size() > 0) {
    _internal_set_job_name(from._internal_job_name());
  }
  if (from.has_exp_info()) {
    _internal_mutable_exp_info()->::ExpInfo::MergeFrom(from._internal_exp_info());
  }
  if (from.has_freqs()) {
    _internal_mutable_freqs()->::Freqs::MergeFrom(from._internal_freqs());
  }
  if (from.has_lrate()) {
    _internal_mutable_lrate()->::Lrate::MergeFrom(from._internal_lrate());
  }
  if (from.has_data_params()) {
    _internal_mutable_data_params()->::DataParams::MergeFrom(from._internal_data_params());
  }
  if (from.clip_gradient() != 0) {
    _internal_set_clip_gradient(from._internal_clip_gradient());
  }
  if (!(from.gradient_max() <= 0 && from.gradient_max() >= 0)) {
    _internal_set_gradient_max(from._internal_gradient_max());
  }
}

void TrainConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrainConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainConfig::CopyFrom(const TrainConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrainConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainConfig::IsInitialized() const {
  return true;
}

void TrainConfig::InternalSwap(TrainConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  job_name_.Swap(&other->job_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainConfig, gradient_max_)
      + sizeof(TrainConfig::gradient_max_)
      - PROTOBUF_FIELD_OFFSET(TrainConfig, exp_info_)>(
          reinterpret_cast<char*>(&exp_info_),
          reinterpret_cast<char*>(&other->exp_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExpInfo::InitAsDefaultInstance() {
}
class ExpInfo::_Internal {
 public:
};

void ExpInfo::clear_load_checkpoint_scopes() {
  load_checkpoint_scopes_.Clear();
}
ExpInfo::ExpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  load_checkpoint_scopes_(arena),
  evaluation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ExpInfo)
}
ExpInfo::ExpInfo(const ExpInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      load_checkpoint_scopes_(from.load_checkpoint_scopes_),
      evaluation_(from.evaluation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exp_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exp_type().empty()) {
    exp_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exp_type(),
      GetArena());
  }
  trainer_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trainer_type().empty()) {
    trainer_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trainer_type(),
      GetArena());
  }
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_type().empty()) {
    device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_type(),
      GetArena());
  }
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_note().empty()) {
    note_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_note(),
      GetArena());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_email(),
      GetArena());
  }
  git_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_git_hash().empty()) {
    git_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_git_hash(),
      GetArena());
  }
  ::memcpy(&eid_, &from.eid_,
    static_cast<size_t>(reinterpret_cast<char*>(&run_final_evals_) -
    reinterpret_cast<char*>(&eid_)) + sizeof(run_final_evals_));
  // @@protoc_insertion_point(copy_constructor:ExpInfo)
}

void ExpInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExpInfo_proto_2futils_2ftrain_5fconfig_2eproto.base);
  exp_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trainer_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  git_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&eid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&run_final_evals_) -
      reinterpret_cast<char*>(&eid_)) + sizeof(run_final_evals_));
}

ExpInfo::~ExpInfo() {
  // @@protoc_insertion_point(destructor:ExpInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExpInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  exp_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trainer_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  git_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExpInfo::ArenaDtor(void* object) {
  ExpInfo* _this = reinterpret_cast< ExpInfo* >(object);
  (void)_this;
}
void ExpInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExpInfo& ExpInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExpInfo_proto_2futils_2ftrain_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ExpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ExpInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  load_checkpoint_scopes_.Clear();
  evaluation_.Clear();
  exp_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trainer_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  note_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  git_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&eid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&run_final_evals_) -
      reinterpret_cast<char*>(&eid_)) + sizeof(run_final_evals_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 eid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          eid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LoadCheckpointScope load_checkpoint_scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_load_checkpoint_scopes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string exp_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_exp_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ExpInfo.exp_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trainer_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_trainer_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ExpInfo.trainer_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EvalConfig evaluation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_evaluation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string device_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_device_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ExpInfo.device_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_devices = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          num_devices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 seed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string note = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ExpInfo.note"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ExpInfo.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_epoch = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          num_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_minibatch = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          num_minibatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string git_hash = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_git_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ExpInfo.git_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_celery = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          is_celery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool run_evals_inline = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          run_evals_inline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool run_final_evals = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          run_final_evals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExpInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 eid = 1;
  if (this->eid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_eid(), target);
  }

  // repeated .LoadCheckpointScope load_checkpoint_scopes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_load_checkpoint_scopes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_load_checkpoint_scopes(i), target, stream);
  }

  // string exp_type = 3;
  if (this->exp_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exp_type().data(), static_cast<int>(this->_internal_exp_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExpInfo.exp_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exp_type(), target);
  }

  // string trainer_type = 4;
  if (this->trainer_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trainer_type().data(), static_cast<int>(this->_internal_trainer_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExpInfo.trainer_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_trainer_type(), target);
  }

  // repeated .EvalConfig evaluation = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_evaluation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_evaluation(i), target, stream);
  }

  // string device_type = 6;
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_type().data(), static_cast<int>(this->_internal_device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExpInfo.device_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device_type(), target);
  }

  // int32 num_devices = 7;
  if (this->num_devices() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_num_devices(), target);
  }

  // int64 seed = 8;
  if (this->seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_seed(), target);
  }

  // string note = 9;
  if (this->note().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExpInfo.note");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_note(), target);
  }

  // string email = 10;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExpInfo.email");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_email(), target);
  }

  // int64 num_epoch = 11;
  if (this->num_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_num_epoch(), target);
  }

  // int64 num_minibatch = 12;
  if (this->num_minibatch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_num_minibatch(), target);
  }

  // string git_hash = 13;
  if (this->git_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_git_hash().data(), static_cast<int>(this->_internal_git_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExpInfo.git_hash");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_git_hash(), target);
  }

  // bool is_celery = 14;
  if (this->is_celery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_celery(), target);
  }

  // bool run_evals_inline = 15;
  if (this->run_evals_inline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_run_evals_inline(), target);
  }

  // bool run_final_evals = 16;
  if (this->run_final_evals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_run_final_evals(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExpInfo)
  return target;
}

size_t ExpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExpInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LoadCheckpointScope load_checkpoint_scopes = 2;
  total_size += 1UL * this->_internal_load_checkpoint_scopes_size();
  for (const auto& msg : this->load_checkpoint_scopes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .EvalConfig evaluation = 5;
  total_size += 1UL * this->_internal_evaluation_size();
  for (const auto& msg : this->evaluation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string exp_type = 3;
  if (this->exp_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exp_type());
  }

  // string trainer_type = 4;
  if (this->trainer_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trainer_type());
  }

  // string device_type = 6;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_type());
  }

  // string note = 9;
  if (this->note().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note());
  }

  // string email = 10;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string git_hash = 13;
  if (this->git_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_git_hash());
  }

  // int64 eid = 1;
  if (this->eid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_eid());
  }

  // int64 seed = 8;
  if (this->seed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seed());
  }

  // int64 num_epoch = 11;
  if (this->num_epoch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_epoch());
  }

  // int64 num_minibatch = 12;
  if (this->num_minibatch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_minibatch());
  }

  // int32 num_devices = 7;
  if (this->num_devices() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_devices());
  }

  // bool is_celery = 14;
  if (this->is_celery() != 0) {
    total_size += 1 + 1;
  }

  // bool run_evals_inline = 15;
  if (this->run_evals_inline() != 0) {
    total_size += 1 + 1;
  }

  // bool run_final_evals = 16;
  if (this->run_final_evals() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ExpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ExpInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ExpInfo)
    MergeFrom(*source);
  }
}

void ExpInfo::MergeFrom(const ExpInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  load_checkpoint_scopes_.MergeFrom(from.load_checkpoint_scopes_);
  evaluation_.MergeFrom(from.evaluation_);
  if (from.exp_type().size() > 0) {
    _internal_set_exp_type(from._internal_exp_type());
  }
  if (from.trainer_type().size() > 0) {
    _internal_set_trainer_type(from._internal_trainer_type());
  }
  if (from.device_type().size() > 0) {
    _internal_set_device_type(from._internal_device_type());
  }
  if (from.note().size() > 0) {
    _internal_set_note(from._internal_note());
  }
  if (from.email().size() > 0) {
    _internal_set_email(from._internal_email());
  }
  if (from.git_hash().size() > 0) {
    _internal_set_git_hash(from._internal_git_hash());
  }
  if (from.eid() != 0) {
    _internal_set_eid(from._internal_eid());
  }
  if (from.seed() != 0) {
    _internal_set_seed(from._internal_seed());
  }
  if (from.num_epoch() != 0) {
    _internal_set_num_epoch(from._internal_num_epoch());
  }
  if (from.num_minibatch() != 0) {
    _internal_set_num_minibatch(from._internal_num_minibatch());
  }
  if (from.num_devices() != 0) {
    _internal_set_num_devices(from._internal_num_devices());
  }
  if (from.is_celery() != 0) {
    _internal_set_is_celery(from._internal_is_celery());
  }
  if (from.run_evals_inline() != 0) {
    _internal_set_run_evals_inline(from._internal_run_evals_inline());
  }
  if (from.run_final_evals() != 0) {
    _internal_set_run_final_evals(from._internal_run_final_evals());
  }
}

void ExpInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ExpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpInfo::CopyFrom(const ExpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpInfo::IsInitialized() const {
  return true;
}

void ExpInfo::InternalSwap(ExpInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  load_checkpoint_scopes_.InternalSwap(&other->load_checkpoint_scopes_);
  evaluation_.InternalSwap(&other->evaluation_);
  exp_type_.Swap(&other->exp_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trainer_type_.Swap(&other->trainer_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_type_.Swap(&other->device_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  note_.Swap(&other->note_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  git_hash_.Swap(&other->git_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpInfo, run_final_evals_)
      + sizeof(ExpInfo::run_final_evals_)
      - PROTOBUF_FIELD_OFFSET(ExpInfo, eid_)>(
          reinterpret_cast<char*>(&eid_),
          reinterpret_cast<char*>(&other->eid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EvalConfig::InitAsDefaultInstance() {
  ::_EvalConfig_default_instance_._instance.get_mutable()->config_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class EvalConfig::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& config(const EvalConfig* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
EvalConfig::_Internal::config(const EvalConfig* msg) {
  return *msg->config_;
}
void EvalConfig::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
EvalConfig::EvalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EvalConfig)
}
EvalConfig::EvalConfig(const EvalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_runner_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_runner_class().empty()) {
    config_runner_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_config_runner_class(),
      GetArena());
  }
  if (from._internal_has_config()) {
    config_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:EvalConfig)
}

void EvalConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EvalConfig_proto_2futils_2ftrain_5fconfig_2eproto.base);
  config_runner_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_ = nullptr;
}

EvalConfig::~EvalConfig() {
  // @@protoc_insertion_point(destructor:EvalConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EvalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  config_runner_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void EvalConfig::ArenaDtor(void* object) {
  EvalConfig* _this = reinterpret_cast< EvalConfig* >(object);
  (void)_this;
}
void EvalConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvalConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EvalConfig& EvalConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EvalConfig_proto_2futils_2ftrain_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void EvalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:EvalConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_runner_class_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvalConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string config_runner_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_config_runner_class();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EvalConfig.config_runner_class"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EvalConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EvalConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string config_runner_class = 1;
  if (this->config_runner_class().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config_runner_class().data(), static_cast<int>(this->_internal_config_runner_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EvalConfig.config_runner_class");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_config_runner_class(), target);
  }

  // .google.protobuf.Struct config = 2;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EvalConfig)
  return target;
}

size_t EvalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EvalConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string config_runner_class = 1;
  if (this->config_runner_class().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_runner_class());
  }

  // .google.protobuf.Struct config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvalConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EvalConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EvalConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EvalConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EvalConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EvalConfig)
    MergeFrom(*source);
  }
}

void EvalConfig::MergeFrom(const EvalConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EvalConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_runner_class().size() > 0) {
    _internal_set_config_runner_class(from._internal_config_runner_class());
  }
  if (from.has_config()) {
    _internal_mutable_config()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_config());
  }
}

void EvalConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EvalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvalConfig::CopyFrom(const EvalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EvalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalConfig::IsInitialized() const {
  return true;
}

void EvalConfig::InternalSwap(EvalConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_runner_class_.Swap(&other->config_runner_class_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(config_, other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataParams::InitAsDefaultInstance() {
  ::_DataParams_default_instance_._instance.get_mutable()->cfg_args_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::_DataParams_default_instance_._instance.get_mutable()->input_args_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::_DataParams_default_instance_._instance.get_mutable()->optimizer_args_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::_DataParams_default_instance_._instance.get_mutable()->data_provider_params_ = const_cast< ::DataProviderParams*>(
      ::DataProviderParams::internal_default_instance());
  ::_DataParams_default_instance_._instance.get_mutable()->databatch_generator_params_ = const_cast< ::DataBatchGeneratorParams*>(
      ::DataBatchGeneratorParams::internal_default_instance());
}
class DataParams::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& cfg_args(const DataParams* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& input_args(const DataParams* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& optimizer_args(const DataParams* msg);
  static const ::DataProviderParams& data_provider_params(const DataParams* msg);
  static const ::DataBatchGeneratorParams& databatch_generator_params(const DataParams* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
DataParams::_Internal::cfg_args(const DataParams* msg) {
  return *msg->cfg_args_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
DataParams::_Internal::input_args(const DataParams* msg) {
  return *msg->input_args_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
DataParams::_Internal::optimizer_args(const DataParams* msg) {
  return *msg->optimizer_args_;
}
const ::DataProviderParams&
DataParams::_Internal::data_provider_params(const DataParams* msg) {
  return *msg->data_provider_params_;
}
const ::DataBatchGeneratorParams&
DataParams::_Internal::databatch_generator_params(const DataParams* msg) {
  return *msg->databatch_generator_params_;
}
void DataParams::clear_cfg_args() {
  if (GetArena() == nullptr && cfg_args_ != nullptr) {
    delete cfg_args_;
  }
  cfg_args_ = nullptr;
}
void DataParams::clear_input_args() {
  if (GetArena() == nullptr && input_args_ != nullptr) {
    delete input_args_;
  }
  input_args_ = nullptr;
}
void DataParams::clear_optimizer_args() {
  if (GetArena() == nullptr && optimizer_args_ != nullptr) {
    delete optimizer_args_;
  }
  optimizer_args_ = nullptr;
}
void DataParams::clear_data_provider_params() {
  if (GetArena() == nullptr && data_provider_params_ != nullptr) {
    delete data_provider_params_;
  }
  data_provider_params_ = nullptr;
}
void DataParams::clear_databatch_generator_params() {
  if (GetArena() == nullptr && databatch_generator_params_ != nullptr) {
    delete databatch_generator_params_;
  }
  databatch_generator_params_ = nullptr;
}
DataParams::DataParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DataParams)
}
DataParams::DataParams(const DataParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cfg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cfg().empty()) {
    cfg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cfg(),
      GetArena());
  }
  dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dataset().empty()) {
    dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dataset(),
      GetArena());
  }
  data_layername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_layername().empty()) {
    data_layername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data_layername(),
      GetArena());
  }
  test_data_layername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_test_data_layername().empty()) {
    test_data_layername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test_data_layername(),
      GetArena());
  }
  predict_split_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_predict_split().empty()) {
    predict_split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_predict_split(),
      GetArena());
  }
  if (from._internal_has_cfg_args()) {
    cfg_args_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.cfg_args_);
  } else {
    cfg_args_ = nullptr;
  }
  if (from._internal_has_input_args()) {
    input_args_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.input_args_);
  } else {
    input_args_ = nullptr;
  }
  if (from._internal_has_optimizer_args()) {
    optimizer_args_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.optimizer_args_);
  } else {
    optimizer_args_ = nullptr;
  }
  if (from._internal_has_data_provider_params()) {
    data_provider_params_ = new ::DataProviderParams(*from.data_provider_params_);
  } else {
    data_provider_params_ = nullptr;
  }
  if (from._internal_has_databatch_generator_params()) {
    databatch_generator_params_ = new ::DataBatchGeneratorParams(*from.databatch_generator_params_);
  } else {
    databatch_generator_params_ = nullptr;
  }
  saved_output_eid_ = from.saved_output_eid_;
  // @@protoc_insertion_point(copy_constructor:DataParams)
}

void DataParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataParams_proto_2futils_2ftrain_5fconfig_2eproto.base);
  cfg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_layername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_data_layername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predict_split_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cfg_args_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&saved_output_eid_) -
      reinterpret_cast<char*>(&cfg_args_)) + sizeof(saved_output_eid_));
}

DataParams::~DataParams() {
  // @@protoc_insertion_point(destructor:DataParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cfg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_layername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_data_layername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predict_split_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cfg_args_;
  if (this != internal_default_instance()) delete input_args_;
  if (this != internal_default_instance()) delete optimizer_args_;
  if (this != internal_default_instance()) delete data_provider_params_;
  if (this != internal_default_instance()) delete databatch_generator_params_;
}

void DataParams::ArenaDtor(void* object) {
  DataParams* _this = reinterpret_cast< DataParams* >(object);
  (void)_this;
}
void DataParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataParams& DataParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataParams_proto_2futils_2ftrain_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void DataParams::Clear() {
// @@protoc_insertion_point(message_clear_start:DataParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cfg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_layername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  test_data_layername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  predict_split_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && cfg_args_ != nullptr) {
    delete cfg_args_;
  }
  cfg_args_ = nullptr;
  if (GetArena() == nullptr && input_args_ != nullptr) {
    delete input_args_;
  }
  input_args_ = nullptr;
  if (GetArena() == nullptr && optimizer_args_ != nullptr) {
    delete optimizer_args_;
  }
  optimizer_args_ = nullptr;
  if (GetArena() == nullptr && data_provider_params_ != nullptr) {
    delete data_provider_params_;
  }
  data_provider_params_ = nullptr;
  if (GetArena() == nullptr && databatch_generator_params_ != nullptr) {
    delete databatch_generator_params_;
  }
  databatch_generator_params_ = nullptr;
  saved_output_eid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cfg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cfg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DataParams.cfg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct cfg_args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cfg_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct input_args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct optimizer_args = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_optimizer_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dataset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_dataset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DataParams.dataset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 saved_output_eid = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          saved_output_eid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data_layername = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_data_layername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DataParams.data_layername"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string test_data_layername = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_test_data_layername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DataParams.test_data_layername"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataProviderParams data_provider_params = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_provider_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatchGeneratorParams databatch_generator_params = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_databatch_generator_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string predict_split = 100 [deprecated = true];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_predict_split();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DataParams.predict_split"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cfg = 1;
  if (this->cfg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cfg().data(), static_cast<int>(this->_internal_cfg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataParams.cfg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cfg(), target);
  }

  // .google.protobuf.Struct cfg_args = 2;
  if (this->has_cfg_args()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cfg_args(this), target, stream);
  }

  // .google.protobuf.Struct input_args = 3;
  if (this->has_input_args()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::input_args(this), target, stream);
  }

  // .google.protobuf.Struct optimizer_args = 4;
  if (this->has_optimizer_args()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::optimizer_args(this), target, stream);
  }

  // string dataset = 5;
  if (this->dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset().data(), static_cast<int>(this->_internal_dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataParams.dataset");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dataset(), target);
  }

  // int64 saved_output_eid = 6 [deprecated = true];
  if (this->saved_output_eid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_saved_output_eid(), target);
  }

  // string data_layername = 7 [deprecated = true];
  if (this->data_layername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_layername().data(), static_cast<int>(this->_internal_data_layername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataParams.data_layername");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_data_layername(), target);
  }

  // string test_data_layername = 8 [deprecated = true];
  if (this->test_data_layername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_test_data_layername().data(), static_cast<int>(this->_internal_test_data_layername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataParams.test_data_layername");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_test_data_layername(), target);
  }

  // .DataProviderParams data_provider_params = 9;
  if (this->has_data_provider_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::data_provider_params(this), target, stream);
  }

  // .DataBatchGeneratorParams databatch_generator_params = 10;
  if (this->has_databatch_generator_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::databatch_generator_params(this), target, stream);
  }

  // string predict_split = 100 [deprecated = true];
  if (this->predict_split().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_predict_split().data(), static_cast<int>(this->_internal_predict_split().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataParams.predict_split");
    target = stream->WriteStringMaybeAliased(
        100, this->_internal_predict_split(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataParams)
  return target;
}

size_t DataParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cfg = 1;
  if (this->cfg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cfg());
  }

  // string dataset = 5;
  if (this->dataset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset());
  }

  // string data_layername = 7 [deprecated = true];
  if (this->data_layername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_layername());
  }

  // string test_data_layername = 8 [deprecated = true];
  if (this->test_data_layername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test_data_layername());
  }

  // string predict_split = 100 [deprecated = true];
  if (this->predict_split().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_predict_split());
  }

  // .google.protobuf.Struct cfg_args = 2;
  if (this->has_cfg_args()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cfg_args_);
  }

  // .google.protobuf.Struct input_args = 3;
  if (this->has_input_args()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_args_);
  }

  // .google.protobuf.Struct optimizer_args = 4;
  if (this->has_optimizer_args()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optimizer_args_);
  }

  // .DataProviderParams data_provider_params = 9;
  if (this->has_data_provider_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_provider_params_);
  }

  // .DataBatchGeneratorParams databatch_generator_params = 10;
  if (this->has_databatch_generator_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *databatch_generator_params_);
  }

  // int64 saved_output_eid = 6 [deprecated = true];
  if (this->saved_output_eid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_saved_output_eid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataParams)
  GOOGLE_DCHECK_NE(&from, this);
  const DataParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataParams)
    MergeFrom(*source);
  }
}

void DataParams::MergeFrom(const DataParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cfg().size() > 0) {
    _internal_set_cfg(from._internal_cfg());
  }
  if (from.dataset().size() > 0) {
    _internal_set_dataset(from._internal_dataset());
  }
  if (from.data_layername().size() > 0) {
    _internal_set_data_layername(from._internal_data_layername());
  }
  if (from.test_data_layername().size() > 0) {
    _internal_set_test_data_layername(from._internal_test_data_layername());
  }
  if (from.predict_split().size() > 0) {
    _internal_set_predict_split(from._internal_predict_split());
  }
  if (from.has_cfg_args()) {
    _internal_mutable_cfg_args()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_cfg_args());
  }
  if (from.has_input_args()) {
    _internal_mutable_input_args()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_input_args());
  }
  if (from.has_optimizer_args()) {
    _internal_mutable_optimizer_args()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_optimizer_args());
  }
  if (from.has_data_provider_params()) {
    _internal_mutable_data_provider_params()->::DataProviderParams::MergeFrom(from._internal_data_provider_params());
  }
  if (from.has_databatch_generator_params()) {
    _internal_mutable_databatch_generator_params()->::DataBatchGeneratorParams::MergeFrom(from._internal_databatch_generator_params());
  }
  if (from.saved_output_eid() != 0) {
    _internal_set_saved_output_eid(from._internal_saved_output_eid());
  }
}

void DataParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataParams::CopyFrom(const DataParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataParams::IsInitialized() const {
  return true;
}

void DataParams::InternalSwap(DataParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cfg_.Swap(&other->cfg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dataset_.Swap(&other->dataset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_layername_.Swap(&other->data_layername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  test_data_layername_.Swap(&other->test_data_layername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  predict_split_.Swap(&other->predict_split_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataParams, saved_output_eid_)
      + sizeof(DataParams::saved_output_eid_)
      - PROTOBUF_FIELD_OFFSET(DataParams, cfg_args_)>(
          reinterpret_cast<char*>(&cfg_args_),
          reinterpret_cast<char*>(&other->cfg_args_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Freqs::InitAsDefaultInstance() {
}
class Freqs::_Internal {
 public:
};

Freqs::Freqs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Freqs)
}
Freqs::Freqs(const Freqs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&test_freq_, &from.test_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&summary_freq_) -
    reinterpret_cast<char*>(&test_freq_)) + sizeof(summary_freq_));
  // @@protoc_insertion_point(copy_constructor:Freqs)
}

void Freqs::SharedCtor() {
  ::memset(&test_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&summary_freq_) -
      reinterpret_cast<char*>(&test_freq_)) + sizeof(summary_freq_));
}

Freqs::~Freqs() {
  // @@protoc_insertion_point(destructor:Freqs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Freqs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Freqs::ArenaDtor(void* object) {
  Freqs* _this = reinterpret_cast< Freqs* >(object);
  (void)_this;
}
void Freqs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Freqs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Freqs& Freqs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Freqs_proto_2futils_2ftrain_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Freqs::Clear() {
// @@protoc_insertion_point(message_clear_start:Freqs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&test_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&summary_freq_) -
      reinterpret_cast<char*>(&test_freq_)) + sizeof(summary_freq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Freqs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 test_freq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          test_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 save_freq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          save_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 stats_freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stats_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 summary_freq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          summary_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Freqs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Freqs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 test_freq = 1;
  if (this->test_freq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_test_freq(), target);
  }

  // int64 save_freq = 2;
  if (this->save_freq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_save_freq(), target);
  }

  // int64 stats_freq = 3;
  if (this->stats_freq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_stats_freq(), target);
  }

  // int64 summary_freq = 4;
  if (this->summary_freq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_summary_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Freqs)
  return target;
}

size_t Freqs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Freqs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 test_freq = 1;
  if (this->test_freq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_test_freq());
  }

  // int64 save_freq = 2;
  if (this->save_freq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_save_freq());
  }

  // int64 stats_freq = 3;
  if (this->stats_freq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_stats_freq());
  }

  // int64 summary_freq = 4;
  if (this->summary_freq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_summary_freq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Freqs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Freqs)
  GOOGLE_DCHECK_NE(&from, this);
  const Freqs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Freqs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Freqs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Freqs)
    MergeFrom(*source);
  }
}

void Freqs::MergeFrom(const Freqs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Freqs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.test_freq() != 0) {
    _internal_set_test_freq(from._internal_test_freq());
  }
  if (from.save_freq() != 0) {
    _internal_set_save_freq(from._internal_save_freq());
  }
  if (from.stats_freq() != 0) {
    _internal_set_stats_freq(from._internal_stats_freq());
  }
  if (from.summary_freq() != 0) {
    _internal_set_summary_freq(from._internal_summary_freq());
  }
}

void Freqs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Freqs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Freqs::CopyFrom(const Freqs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Freqs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Freqs::IsInitialized() const {
  return true;
}

void Freqs::InternalSwap(Freqs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Freqs, summary_freq_)
      + sizeof(Freqs::summary_freq_)
      - PROTOBUF_FIELD_OFFSET(Freqs, test_freq_)>(
          reinterpret_cast<char*>(&test_freq_),
          reinterpret_cast<char*>(&other->test_freq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Freqs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LratePair::InitAsDefaultInstance() {
}
class LratePair::_Internal {
 public:
};

LratePair::LratePair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LratePair)
}
LratePair::LratePair(const LratePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&lrate_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(lrate_));
  // @@protoc_insertion_point(copy_constructor:LratePair)
}

void LratePair::SharedCtor() {
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lrate_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(lrate_));
}

LratePair::~LratePair() {
  // @@protoc_insertion_point(destructor:LratePair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LratePair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LratePair::ArenaDtor(void* object) {
  LratePair* _this = reinterpret_cast< LratePair* >(object);
  (void)_this;
}
void LratePair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LratePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LratePair& LratePair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LratePair_proto_2futils_2ftrain_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LratePair::Clear() {
// @@protoc_insertion_point(message_clear_start:LratePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lrate_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(lrate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LratePair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lrate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LratePair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LratePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float epoch = 1;
  if (!(this->epoch() <= 0 && this->epoch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_epoch(), target);
  }

  // float lrate = 2;
  if (!(this->lrate() <= 0 && this->lrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LratePair)
  return target;
}

size_t LratePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LratePair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float epoch = 1;
  if (!(this->epoch() <= 0 && this->epoch() >= 0)) {
    total_size += 1 + 4;
  }

  // float lrate = 2;
  if (!(this->lrate() <= 0 && this->lrate() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LratePair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LratePair)
  GOOGLE_DCHECK_NE(&from, this);
  const LratePair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LratePair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LratePair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LratePair)
    MergeFrom(*source);
  }
}

void LratePair::MergeFrom(const LratePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LratePair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.epoch() <= 0 && from.epoch() >= 0)) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (!(from.lrate() <= 0 && from.lrate() >= 0)) {
    _internal_set_lrate(from._internal_lrate());
  }
}

void LratePair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LratePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LratePair::CopyFrom(const LratePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LratePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LratePair::IsInitialized() const {
  return true;
}

void LratePair::InternalSwap(LratePair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LratePair, lrate_)
      + sizeof(LratePair::lrate_)
      - PROTOBUF_FIELD_OFFSET(LratePair, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LratePair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Lrate::InitAsDefaultInstance() {
  ::_Lrate_default_instance_._instance.get_mutable()->polynomial_config_ = const_cast< ::LratePolynomialDecayConfig*>(
      ::LratePolynomialDecayConfig::internal_default_instance());
}
class Lrate::_Internal {
 public:
  static const ::LratePolynomialDecayConfig& polynomial_config(const Lrate* msg);
};

const ::LratePolynomialDecayConfig&
Lrate::_Internal::polynomial_config(const Lrate* msg) {
  return *msg->polynomial_config_;
}
Lrate::Lrate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lrate_schedule_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Lrate)
}
Lrate::Lrate(const Lrate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lrate_schedule_(from.lrate_schedule_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_polynomial_config()) {
    polynomial_config_ = new ::LratePolynomialDecayConfig(*from.polynomial_config_);
  } else {
    polynomial_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Lrate)
}

void Lrate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lrate_proto_2futils_2ftrain_5fconfig_2eproto.base);
  polynomial_config_ = nullptr;
}

Lrate::~Lrate() {
  // @@protoc_insertion_point(destructor:Lrate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Lrate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete polynomial_config_;
}

void Lrate::ArenaDtor(void* object) {
  Lrate* _this = reinterpret_cast< Lrate* >(object);
  (void)_this;
}
void Lrate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lrate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lrate& Lrate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lrate_proto_2futils_2ftrain_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Lrate::Clear() {
// @@protoc_insertion_point(message_clear_start:Lrate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lrate_schedule_.Clear();
  if (GetArena() == nullptr && polynomial_config_ != nullptr) {
    delete polynomial_config_;
  }
  polynomial_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lrate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .LratePair lrate_schedule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lrate_schedule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .LratePolynomialDecayConfig polynomial_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_polynomial_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lrate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lrate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LratePair lrate_schedule = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lrate_schedule_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lrate_schedule(i), target, stream);
  }

  // .LratePolynomialDecayConfig polynomial_config = 2;
  if (this->has_polynomial_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::polynomial_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lrate)
  return target;
}

size_t Lrate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lrate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LratePair lrate_schedule = 1;
  total_size += 1UL * this->_internal_lrate_schedule_size();
  for (const auto& msg : this->lrate_schedule_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .LratePolynomialDecayConfig polynomial_config = 2;
  if (this->has_polynomial_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *polynomial_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lrate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lrate)
  GOOGLE_DCHECK_NE(&from, this);
  const Lrate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lrate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lrate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lrate)
    MergeFrom(*source);
  }
}

void Lrate::MergeFrom(const Lrate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lrate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lrate_schedule_.MergeFrom(from.lrate_schedule_);
  if (from.has_polynomial_config()) {
    _internal_mutable_polynomial_config()->::LratePolynomialDecayConfig::MergeFrom(from._internal_polynomial_config());
  }
}

void Lrate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lrate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lrate::CopyFrom(const Lrate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lrate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lrate::IsInitialized() const {
  return true;
}

void Lrate::InternalSwap(Lrate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lrate_schedule_.InternalSwap(&other->lrate_schedule_);
  swap(polynomial_config_, other->polynomial_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lrate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LratePolynomialDecayConfig::InitAsDefaultInstance() {
}
class LratePolynomialDecayConfig::_Internal {
 public:
};

LratePolynomialDecayConfig::LratePolynomialDecayConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LratePolynomialDecayConfig)
}
LratePolynomialDecayConfig::LratePolynomialDecayConfig(const LratePolynomialDecayConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&decay_steps_, &from.decay_steps_,
    static_cast<size_t>(reinterpret_cast<char*>(&cycle_) -
    reinterpret_cast<char*>(&decay_steps_)) + sizeof(cycle_));
  // @@protoc_insertion_point(copy_constructor:LratePolynomialDecayConfig)
}

void LratePolynomialDecayConfig::SharedCtor() {
  ::memset(&decay_steps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cycle_) -
      reinterpret_cast<char*>(&decay_steps_)) + sizeof(cycle_));
}

LratePolynomialDecayConfig::~LratePolynomialDecayConfig() {
  // @@protoc_insertion_point(destructor:LratePolynomialDecayConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LratePolynomialDecayConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LratePolynomialDecayConfig::ArenaDtor(void* object) {
  LratePolynomialDecayConfig* _this = reinterpret_cast< LratePolynomialDecayConfig* >(object);
  (void)_this;
}
void LratePolynomialDecayConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LratePolynomialDecayConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LratePolynomialDecayConfig& LratePolynomialDecayConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LratePolynomialDecayConfig_proto_2futils_2ftrain_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LratePolynomialDecayConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:LratePolynomialDecayConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&decay_steps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cycle_) -
      reinterpret_cast<char*>(&decay_steps_)) + sizeof(cycle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LratePolynomialDecayConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float init_learning_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          init_learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 decay_steps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          decay_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ending_learning_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ending_learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float power = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool cycle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LratePolynomialDecayConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LratePolynomialDecayConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float init_learning_rate = 1;
  if (!(this->init_learning_rate() <= 0 && this->init_learning_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_init_learning_rate(), target);
  }

  // int64 decay_steps = 2;
  if (this->decay_steps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_decay_steps(), target);
  }

  // float ending_learning_rate = 3;
  if (!(this->ending_learning_rate() <= 0 && this->ending_learning_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_ending_learning_rate(), target);
  }

  // float power = 4;
  if (!(this->power() <= 0 && this->power() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_power(), target);
  }

  // bool cycle = 5;
  if (this->cycle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_cycle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LratePolynomialDecayConfig)
  return target;
}

size_t LratePolynomialDecayConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LratePolynomialDecayConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 decay_steps = 2;
  if (this->decay_steps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_decay_steps());
  }

  // float init_learning_rate = 1;
  if (!(this->init_learning_rate() <= 0 && this->init_learning_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // float ending_learning_rate = 3;
  if (!(this->ending_learning_rate() <= 0 && this->ending_learning_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // float power = 4;
  if (!(this->power() <= 0 && this->power() >= 0)) {
    total_size += 1 + 4;
  }

  // bool cycle = 5;
  if (this->cycle() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LratePolynomialDecayConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LratePolynomialDecayConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LratePolynomialDecayConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LratePolynomialDecayConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LratePolynomialDecayConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LratePolynomialDecayConfig)
    MergeFrom(*source);
  }
}

void LratePolynomialDecayConfig::MergeFrom(const LratePolynomialDecayConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LratePolynomialDecayConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.decay_steps() != 0) {
    _internal_set_decay_steps(from._internal_decay_steps());
  }
  if (!(from.init_learning_rate() <= 0 && from.init_learning_rate() >= 0)) {
    _internal_set_init_learning_rate(from._internal_init_learning_rate());
  }
  if (!(from.ending_learning_rate() <= 0 && from.ending_learning_rate() >= 0)) {
    _internal_set_ending_learning_rate(from._internal_ending_learning_rate());
  }
  if (!(from.power() <= 0 && from.power() >= 0)) {
    _internal_set_power(from._internal_power());
  }
  if (from.cycle() != 0) {
    _internal_set_cycle(from._internal_cycle());
  }
}

void LratePolynomialDecayConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LratePolynomialDecayConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LratePolynomialDecayConfig::CopyFrom(const LratePolynomialDecayConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LratePolynomialDecayConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LratePolynomialDecayConfig::IsInitialized() const {
  return true;
}

void LratePolynomialDecayConfig::InternalSwap(LratePolynomialDecayConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LratePolynomialDecayConfig, cycle_)
      + sizeof(LratePolynomialDecayConfig::cycle_)
      - PROTOBUF_FIELD_OFFSET(LratePolynomialDecayConfig, decay_steps_)>(
          reinterpret_cast<char*>(&decay_steps_),
          reinterpret_cast<char*>(&other->decay_steps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LratePolynomialDecayConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ModelProfileResults_TimesTotalEntry_DoNotUse::ModelProfileResults_TimesTotalEntry_DoNotUse() {}
ModelProfileResults_TimesTotalEntry_DoNotUse::ModelProfileResults_TimesTotalEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelProfileResults_TimesTotalEntry_DoNotUse::MergeFrom(const ModelProfileResults_TimesTotalEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelProfileResults_TimesTotalEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelProfileResults_TimesTotalEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ModelProfileResults_TimesPerExampleEntry_DoNotUse::ModelProfileResults_TimesPerExampleEntry_DoNotUse() {}
ModelProfileResults_TimesPerExampleEntry_DoNotUse::ModelProfileResults_TimesPerExampleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelProfileResults_TimesPerExampleEntry_DoNotUse::MergeFrom(const ModelProfileResults_TimesPerExampleEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelProfileResults_TimesPerExampleEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelProfileResults_TimesPerExampleEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ModelProfileResults::InitAsDefaultInstance() {
  ::_ModelProfileResults_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class ModelProfileResults::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const ModelProfileResults* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ModelProfileResults::_Internal::created_at(const ModelProfileResults* msg) {
  return *msg->created_at_;
}
void ModelProfileResults::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
ModelProfileResults::ModelProfileResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  host_load_averages_(arena),
  times_total_(arena),
  times_per_example_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ModelProfileResults)
}
ModelProfileResults::ModelProfileResults(const ModelProfileResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      host_load_averages_(from.host_load_averages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  times_total_.MergeFrom(from.times_total_);
  times_per_example_.MergeFrom(from.times_per_example_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostname().empty()) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hostname(),
      GetArena());
  }
  device_descriptions_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_descriptions_json().empty()) {
    device_descriptions_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_descriptions_json(),
      GetArena());
  }
  tf_profile_timing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tf_profile_timing().empty()) {
    tf_profile_timing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tf_profile_timing(),
      GetArena());
  }
  tf_profile_flops_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tf_profile_flops().empty()) {
    tf_profile_flops_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tf_profile_flops(),
      GetArena());
  }
  tf_timeline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tf_timeline().empty()) {
    tf_timeline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tf_timeline(),
      GetArena());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ModelProfileResults)
}

void ModelProfileResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelProfileResults_proto_2futils_2ftrain_5fconfig_2eproto.base);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_descriptions_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tf_profile_timing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tf_profile_flops_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tf_timeline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_at_ = nullptr;
}

ModelProfileResults::~ModelProfileResults() {
  // @@protoc_insertion_point(destructor:ModelProfileResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelProfileResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_descriptions_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tf_profile_timing_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tf_profile_flops_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tf_timeline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
}

void ModelProfileResults::ArenaDtor(void* object) {
  ModelProfileResults* _this = reinterpret_cast< ModelProfileResults* >(object);
  (void)_this;
}
void ModelProfileResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelProfileResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelProfileResults& ModelProfileResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelProfileResults_proto_2futils_2ftrain_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelProfileResults::Clear() {
// @@protoc_insertion_point(message_clear_start:ModelProfileResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_load_averages_.Clear();
  times_total_.Clear();
  times_per_example_.Clear();
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_descriptions_json_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tf_profile_timing_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tf_profile_flops_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tf_timeline_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelProfileResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModelProfileResults.hostname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_descriptions_json = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_device_descriptions_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModelProfileResults.device_descriptions_json"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float host_load_averages = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_host_load_averages(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_host_load_averages(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // map<string, double> times_total = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&times_total_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, double> times_per_example = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&times_per_example_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // string tf_profile_timing = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_tf_profile_timing();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModelProfileResults.tf_profile_timing"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tf_profile_flops = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_tf_profile_flops();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModelProfileResults.tf_profile_flops"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tf_timeline = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_tf_timeline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModelProfileResults.tf_timeline"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelProfileResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ModelProfileResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelProfileResults.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // string device_descriptions_json = 3;
  if (this->device_descriptions_json().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_descriptions_json().data(), static_cast<int>(this->_internal_device_descriptions_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelProfileResults.device_descriptions_json");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_descriptions_json(), target);
  }

  // repeated float host_load_averages = 4;
  if (this->_internal_host_load_averages_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_host_load_averages(), target);
  }

  // map<string, double> times_total = 10;
  if (!this->_internal_times_total().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ModelProfileResults.TimesTotalEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_times_total().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_times_total().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_times_total().begin();
          it != this->_internal_times_total().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelProfileResults_TimesTotalEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_times_total().begin();
          it != this->_internal_times_total().end(); ++it) {
        target = ModelProfileResults_TimesTotalEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, double> times_per_example = 11;
  if (!this->_internal_times_per_example().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ModelProfileResults.TimesPerExampleEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_times_per_example().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_times_per_example().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_times_per_example().begin();
          it != this->_internal_times_per_example().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelProfileResults_TimesPerExampleEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_times_per_example().begin();
          it != this->_internal_times_per_example().end(); ++it) {
        target = ModelProfileResults_TimesPerExampleEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string tf_profile_timing = 20;
  if (this->tf_profile_timing().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tf_profile_timing().data(), static_cast<int>(this->_internal_tf_profile_timing().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelProfileResults.tf_profile_timing");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_tf_profile_timing(), target);
  }

  // string tf_profile_flops = 21;
  if (this->tf_profile_flops().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tf_profile_flops().data(), static_cast<int>(this->_internal_tf_profile_flops().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelProfileResults.tf_profile_flops");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_tf_profile_flops(), target);
  }

  // string tf_timeline = 22;
  if (this->tf_timeline().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tf_timeline().data(), static_cast<int>(this->_internal_tf_timeline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelProfileResults.tf_timeline");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_tf_timeline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ModelProfileResults)
  return target;
}

size_t ModelProfileResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ModelProfileResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float host_load_averages = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_host_load_averages_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _host_load_averages_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, double> times_total = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_times_total_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_times_total().begin();
      it != this->_internal_times_total().end(); ++it) {
    total_size += ModelProfileResults_TimesTotalEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, double> times_per_example = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_times_per_example_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_times_per_example().begin();
      it != this->_internal_times_per_example().end(); ++it) {
    total_size += ModelProfileResults_TimesPerExampleEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string device_descriptions_json = 3;
  if (this->device_descriptions_json().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_descriptions_json());
  }

  // string tf_profile_timing = 20;
  if (this->tf_profile_timing().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tf_profile_timing());
  }

  // string tf_profile_flops = 21;
  if (this->tf_profile_flops().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tf_profile_flops());
  }

  // string tf_timeline = 22;
  if (this->tf_timeline().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tf_timeline());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelProfileResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ModelProfileResults)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelProfileResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelProfileResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ModelProfileResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ModelProfileResults)
    MergeFrom(*source);
  }
}

void ModelProfileResults::MergeFrom(const ModelProfileResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ModelProfileResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  host_load_averages_.MergeFrom(from.host_load_averages_);
  times_total_.MergeFrom(from.times_total_);
  times_per_example_.MergeFrom(from.times_per_example_);
  if (from.hostname().size() > 0) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from.device_descriptions_json().size() > 0) {
    _internal_set_device_descriptions_json(from._internal_device_descriptions_json());
  }
  if (from.tf_profile_timing().size() > 0) {
    _internal_set_tf_profile_timing(from._internal_tf_profile_timing());
  }
  if (from.tf_profile_flops().size() > 0) {
    _internal_set_tf_profile_flops(from._internal_tf_profile_flops());
  }
  if (from.tf_timeline().size() > 0) {
    _internal_set_tf_timeline(from._internal_tf_timeline());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
}

void ModelProfileResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ModelProfileResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelProfileResults::CopyFrom(const ModelProfileResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ModelProfileResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelProfileResults::IsInitialized() const {
  return true;
}

void ModelProfileResults::InternalSwap(ModelProfileResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  host_load_averages_.InternalSwap(&other->host_load_averages_);
  times_total_.Swap(&other->times_total_);
  times_per_example_.Swap(&other->times_per_example_);
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_descriptions_json_.Swap(&other->device_descriptions_json_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tf_profile_timing_.Swap(&other->tf_profile_timing_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tf_profile_flops_.Swap(&other->tf_profile_flops_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tf_timeline_.Swap(&other->tf_timeline_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(created_at_, other->created_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelProfileResults::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TrainConfig* Arena::CreateMaybeMessage< ::TrainConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TrainConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ExpInfo* Arena::CreateMaybeMessage< ::ExpInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ExpInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::EvalConfig* Arena::CreateMaybeMessage< ::EvalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EvalConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::DataParams* Arena::CreateMaybeMessage< ::DataParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataParams >(arena);
}
template<> PROTOBUF_NOINLINE ::Freqs* Arena::CreateMaybeMessage< ::Freqs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Freqs >(arena);
}
template<> PROTOBUF_NOINLINE ::LratePair* Arena::CreateMaybeMessage< ::LratePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LratePair >(arena);
}
template<> PROTOBUF_NOINLINE ::Lrate* Arena::CreateMaybeMessage< ::Lrate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Lrate >(arena);
}
template<> PROTOBUF_NOINLINE ::LratePolynomialDecayConfig* Arena::CreateMaybeMessage< ::LratePolynomialDecayConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LratePolynomialDecayConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ModelProfileResults_TimesTotalEntry_DoNotUse* Arena::CreateMaybeMessage< ::ModelProfileResults_TimesTotalEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ModelProfileResults_TimesTotalEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ModelProfileResults_TimesPerExampleEntry_DoNotUse* Arena::CreateMaybeMessage< ::ModelProfileResults_TimesPerExampleEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ModelProfileResults_TimesPerExampleEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ModelProfileResults* Arena::CreateMaybeMessage< ::ModelProfileResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ModelProfileResults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
