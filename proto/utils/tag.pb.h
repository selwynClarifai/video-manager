// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/tag.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2ftag_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2ftag_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2ftag_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2ftag_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2ftag_2eproto;
class Tag;
class TagDefaultTypeInternal;
extern TagDefaultTypeInternal _Tag_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Tag* Arena::CreateMaybeMessage<::Tag>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Tag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tag) */ {
 public:
  inline Tag() : Tag(nullptr) {}
  virtual ~Tag();

  Tag(const Tag& from);
  Tag(Tag&& from) noexcept
    : Tag() {
    *this = ::std::move(from);
  }

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tag& operator=(Tag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tag* internal_default_instance() {
    return reinterpret_cast<const Tag*>(
               &_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Tag& a, Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(Tag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tag* New() const final {
    return CreateMaybeMessage<Tag>(nullptr);
  }

  Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tag";
  }
  protected:
  explicit Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2ftag_2eproto);
    return ::descriptor_table_proto_2futils_2ftag_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAiidFieldNumber = 3,
    kCnameFieldNumber = 4,
    kUserUniqueConceptIdFieldNumber = 5,
    kUserUniqueAppIdFieldNumber = 6,
    kUserUniqueUserIdFieldNumber = 7,
    kLabelNumFieldNumber = 1,
    kLabelValueFieldNumber = 2,
  };
  // string aiid = 3;
  void clear_aiid();
  const std::string& aiid() const;
  void set_aiid(const std::string& value);
  void set_aiid(std::string&& value);
  void set_aiid(const char* value);
  void set_aiid(const char* value, size_t size);
  std::string* mutable_aiid();
  std::string* release_aiid();
  void set_allocated_aiid(std::string* aiid);
  private:
  const std::string& _internal_aiid() const;
  void _internal_set_aiid(const std::string& value);
  std::string* _internal_mutable_aiid();
  public:

  // string cname = 4;
  void clear_cname();
  const std::string& cname() const;
  void set_cname(const std::string& value);
  void set_cname(std::string&& value);
  void set_cname(const char* value);
  void set_cname(const char* value, size_t size);
  std::string* mutable_cname();
  std::string* release_cname();
  void set_allocated_cname(std::string* cname);
  private:
  const std::string& _internal_cname() const;
  void _internal_set_cname(const std::string& value);
  std::string* _internal_mutable_cname();
  public:

  // string user_unique_concept_id = 5;
  void clear_user_unique_concept_id();
  const std::string& user_unique_concept_id() const;
  void set_user_unique_concept_id(const std::string& value);
  void set_user_unique_concept_id(std::string&& value);
  void set_user_unique_concept_id(const char* value);
  void set_user_unique_concept_id(const char* value, size_t size);
  std::string* mutable_user_unique_concept_id();
  std::string* release_user_unique_concept_id();
  void set_allocated_user_unique_concept_id(std::string* user_unique_concept_id);
  private:
  const std::string& _internal_user_unique_concept_id() const;
  void _internal_set_user_unique_concept_id(const std::string& value);
  std::string* _internal_mutable_user_unique_concept_id();
  public:

  // string user_unique_app_id = 6;
  void clear_user_unique_app_id();
  const std::string& user_unique_app_id() const;
  void set_user_unique_app_id(const std::string& value);
  void set_user_unique_app_id(std::string&& value);
  void set_user_unique_app_id(const char* value);
  void set_user_unique_app_id(const char* value, size_t size);
  std::string* mutable_user_unique_app_id();
  std::string* release_user_unique_app_id();
  void set_allocated_user_unique_app_id(std::string* user_unique_app_id);
  private:
  const std::string& _internal_user_unique_app_id() const;
  void _internal_set_user_unique_app_id(const std::string& value);
  std::string* _internal_mutable_user_unique_app_id();
  public:

  // string user_unique_user_id = 7;
  void clear_user_unique_user_id();
  const std::string& user_unique_user_id() const;
  void set_user_unique_user_id(const std::string& value);
  void set_user_unique_user_id(std::string&& value);
  void set_user_unique_user_id(const char* value);
  void set_user_unique_user_id(const char* value, size_t size);
  std::string* mutable_user_unique_user_id();
  std::string* release_user_unique_user_id();
  void set_allocated_user_unique_user_id(std::string* user_unique_user_id);
  private:
  const std::string& _internal_user_unique_user_id() const;
  void _internal_set_user_unique_user_id(const std::string& value);
  std::string* _internal_mutable_user_unique_user_id();
  public:

  // int32 label_num = 1;
  void clear_label_num();
  ::PROTOBUF_NAMESPACE_ID::int32 label_num() const;
  void set_label_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_label_num() const;
  void _internal_set_label_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float label_value = 2;
  void clear_label_value();
  float label_value() const;
  void set_label_value(float value);
  private:
  float _internal_label_value() const;
  void _internal_set_label_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aiid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_unique_concept_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_unique_app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_unique_user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 label_num_;
  float label_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2ftag_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tag

// int32 label_num = 1;
inline void Tag::clear_label_num() {
  label_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tag::_internal_label_num() const {
  return label_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tag::label_num() const {
  // @@protoc_insertion_point(field_get:Tag.label_num)
  return _internal_label_num();
}
inline void Tag::_internal_set_label_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  label_num_ = value;
}
inline void Tag::set_label_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_label_num(value);
  // @@protoc_insertion_point(field_set:Tag.label_num)
}

// float label_value = 2;
inline void Tag::clear_label_value() {
  label_value_ = 0;
}
inline float Tag::_internal_label_value() const {
  return label_value_;
}
inline float Tag::label_value() const {
  // @@protoc_insertion_point(field_get:Tag.label_value)
  return _internal_label_value();
}
inline void Tag::_internal_set_label_value(float value) {
  
  label_value_ = value;
}
inline void Tag::set_label_value(float value) {
  _internal_set_label_value(value);
  // @@protoc_insertion_point(field_set:Tag.label_value)
}

// string aiid = 3;
inline void Tag::clear_aiid() {
  aiid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tag::aiid() const {
  // @@protoc_insertion_point(field_get:Tag.aiid)
  return _internal_aiid();
}
inline void Tag::set_aiid(const std::string& value) {
  _internal_set_aiid(value);
  // @@protoc_insertion_point(field_set:Tag.aiid)
}
inline std::string* Tag::mutable_aiid() {
  // @@protoc_insertion_point(field_mutable:Tag.aiid)
  return _internal_mutable_aiid();
}
inline const std::string& Tag::_internal_aiid() const {
  return aiid_.Get();
}
inline void Tag::_internal_set_aiid(const std::string& value) {
  
  aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tag::set_aiid(std::string&& value) {
  
  aiid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Tag.aiid)
}
inline void Tag::set_aiid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Tag.aiid)
}
inline void Tag::set_aiid(const char* value,
    size_t size) {
  
  aiid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Tag.aiid)
}
inline std::string* Tag::_internal_mutable_aiid() {
  
  return aiid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tag::release_aiid() {
  // @@protoc_insertion_point(field_release:Tag.aiid)
  return aiid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tag::set_allocated_aiid(std::string* aiid) {
  if (aiid != nullptr) {
    
  } else {
    
  }
  aiid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aiid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Tag.aiid)
}

// string cname = 4;
inline void Tag::clear_cname() {
  cname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tag::cname() const {
  // @@protoc_insertion_point(field_get:Tag.cname)
  return _internal_cname();
}
inline void Tag::set_cname(const std::string& value) {
  _internal_set_cname(value);
  // @@protoc_insertion_point(field_set:Tag.cname)
}
inline std::string* Tag::mutable_cname() {
  // @@protoc_insertion_point(field_mutable:Tag.cname)
  return _internal_mutable_cname();
}
inline const std::string& Tag::_internal_cname() const {
  return cname_.Get();
}
inline void Tag::_internal_set_cname(const std::string& value) {
  
  cname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tag::set_cname(std::string&& value) {
  
  cname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Tag.cname)
}
inline void Tag::set_cname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Tag.cname)
}
inline void Tag::set_cname(const char* value,
    size_t size) {
  
  cname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Tag.cname)
}
inline std::string* Tag::_internal_mutable_cname() {
  
  return cname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tag::release_cname() {
  // @@protoc_insertion_point(field_release:Tag.cname)
  return cname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tag::set_allocated_cname(std::string* cname) {
  if (cname != nullptr) {
    
  } else {
    
  }
  cname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Tag.cname)
}

// string user_unique_concept_id = 5;
inline void Tag::clear_user_unique_concept_id() {
  user_unique_concept_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tag::user_unique_concept_id() const {
  // @@protoc_insertion_point(field_get:Tag.user_unique_concept_id)
  return _internal_user_unique_concept_id();
}
inline void Tag::set_user_unique_concept_id(const std::string& value) {
  _internal_set_user_unique_concept_id(value);
  // @@protoc_insertion_point(field_set:Tag.user_unique_concept_id)
}
inline std::string* Tag::mutable_user_unique_concept_id() {
  // @@protoc_insertion_point(field_mutable:Tag.user_unique_concept_id)
  return _internal_mutable_user_unique_concept_id();
}
inline const std::string& Tag::_internal_user_unique_concept_id() const {
  return user_unique_concept_id_.Get();
}
inline void Tag::_internal_set_user_unique_concept_id(const std::string& value) {
  
  user_unique_concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tag::set_user_unique_concept_id(std::string&& value) {
  
  user_unique_concept_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Tag.user_unique_concept_id)
}
inline void Tag::set_user_unique_concept_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_unique_concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Tag.user_unique_concept_id)
}
inline void Tag::set_user_unique_concept_id(const char* value,
    size_t size) {
  
  user_unique_concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Tag.user_unique_concept_id)
}
inline std::string* Tag::_internal_mutable_user_unique_concept_id() {
  
  return user_unique_concept_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tag::release_user_unique_concept_id() {
  // @@protoc_insertion_point(field_release:Tag.user_unique_concept_id)
  return user_unique_concept_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tag::set_allocated_user_unique_concept_id(std::string* user_unique_concept_id) {
  if (user_unique_concept_id != nullptr) {
    
  } else {
    
  }
  user_unique_concept_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_unique_concept_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Tag.user_unique_concept_id)
}

// string user_unique_app_id = 6;
inline void Tag::clear_user_unique_app_id() {
  user_unique_app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tag::user_unique_app_id() const {
  // @@protoc_insertion_point(field_get:Tag.user_unique_app_id)
  return _internal_user_unique_app_id();
}
inline void Tag::set_user_unique_app_id(const std::string& value) {
  _internal_set_user_unique_app_id(value);
  // @@protoc_insertion_point(field_set:Tag.user_unique_app_id)
}
inline std::string* Tag::mutable_user_unique_app_id() {
  // @@protoc_insertion_point(field_mutable:Tag.user_unique_app_id)
  return _internal_mutable_user_unique_app_id();
}
inline const std::string& Tag::_internal_user_unique_app_id() const {
  return user_unique_app_id_.Get();
}
inline void Tag::_internal_set_user_unique_app_id(const std::string& value) {
  
  user_unique_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tag::set_user_unique_app_id(std::string&& value) {
  
  user_unique_app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Tag.user_unique_app_id)
}
inline void Tag::set_user_unique_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_unique_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Tag.user_unique_app_id)
}
inline void Tag::set_user_unique_app_id(const char* value,
    size_t size) {
  
  user_unique_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Tag.user_unique_app_id)
}
inline std::string* Tag::_internal_mutable_user_unique_app_id() {
  
  return user_unique_app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tag::release_user_unique_app_id() {
  // @@protoc_insertion_point(field_release:Tag.user_unique_app_id)
  return user_unique_app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tag::set_allocated_user_unique_app_id(std::string* user_unique_app_id) {
  if (user_unique_app_id != nullptr) {
    
  } else {
    
  }
  user_unique_app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_unique_app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Tag.user_unique_app_id)
}

// string user_unique_user_id = 7;
inline void Tag::clear_user_unique_user_id() {
  user_unique_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tag::user_unique_user_id() const {
  // @@protoc_insertion_point(field_get:Tag.user_unique_user_id)
  return _internal_user_unique_user_id();
}
inline void Tag::set_user_unique_user_id(const std::string& value) {
  _internal_set_user_unique_user_id(value);
  // @@protoc_insertion_point(field_set:Tag.user_unique_user_id)
}
inline std::string* Tag::mutable_user_unique_user_id() {
  // @@protoc_insertion_point(field_mutable:Tag.user_unique_user_id)
  return _internal_mutable_user_unique_user_id();
}
inline const std::string& Tag::_internal_user_unique_user_id() const {
  return user_unique_user_id_.Get();
}
inline void Tag::_internal_set_user_unique_user_id(const std::string& value) {
  
  user_unique_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tag::set_user_unique_user_id(std::string&& value) {
  
  user_unique_user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Tag.user_unique_user_id)
}
inline void Tag::set_user_unique_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_unique_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Tag.user_unique_user_id)
}
inline void Tag::set_user_unique_user_id(const char* value,
    size_t size) {
  
  user_unique_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Tag.user_unique_user_id)
}
inline std::string* Tag::_internal_mutable_user_unique_user_id() {
  
  return user_unique_user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tag::release_user_unique_user_id() {
  // @@protoc_insertion_point(field_release:Tag.user_unique_user_id)
  return user_unique_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tag::set_allocated_user_unique_user_id(std::string* user_unique_user_id) {
  if (user_unique_user_id != nullptr) {
    
  } else {
    
  }
  user_unique_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_unique_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Tag.user_unique_user_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2ftag_2eproto
