// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/bbox.proto

#include "proto/utils/bbox.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class MaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mask> _instance;
} _Mask_default_instance_;
class BBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BBox> _instance;
} _BBox_default_instance_;
static void InitDefaultsscc_info_BBox_proto_2futils_2fbbox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BBox_default_instance_;
    new (ptr) ::BBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBox_proto_2futils_2fbbox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BBox_proto_2futils_2fbbox_2eproto}, {}};

static void InitDefaultsscc_info_Mask_proto_2futils_2fbbox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Mask_default_instance_;
    new (ptr) ::Mask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mask_proto_2futils_2fbbox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Mask_proto_2futils_2fbbox_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2futils_2fbbox_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2futils_2fbbox_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2futils_2fbbox_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2futils_2fbbox_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mask, encoded_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BBox, top_row_),
  PROTOBUF_FIELD_OFFSET(::BBox, left_col_),
  PROTOBUF_FIELD_OFFSET(::BBox, bottom_row_),
  PROTOBUF_FIELD_OFFSET(::BBox, right_col_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Mask)},
  { 6, -1, sizeof(::BBox)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Mask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BBox_default_instance_),
};

const char descriptor_table_protodef_proto_2futils_2fbbox_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026proto/utils/bbox.proto\032)proto/clarifai"
  "/api/utils/extensions.proto\"\035\n\004Mask\022\025\n\re"
  "ncoded_bytes\030\001 \001(\014\"h\n\004BBox\022\025\n\007top_row\030\003 "
  "\001(\002B\004\200\265\030\001\022\026\n\010left_col\030\004 \001(\002B\004\200\265\030\001\022\030\n\nbot"
  "tom_row\030\005 \001(\002B\004\200\265\030\001\022\027\n\tright_col\030\006 \001(\002B\004"
  "\200\265\030\001B\016\n\005utilsZ\005utilsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2futils_2fbbox_2eproto_deps[1] = {
  &::descriptor_table_proto_2fclarifai_2fapi_2futils_2fextensions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2futils_2fbbox_2eproto_sccs[2] = {
  &scc_info_BBox_proto_2futils_2fbbox_2eproto.base,
  &scc_info_Mask_proto_2futils_2fbbox_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2futils_2fbbox_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fbbox_2eproto = {
  false, false, descriptor_table_protodef_proto_2futils_2fbbox_2eproto, "proto/utils/bbox.proto", 228,
  &descriptor_table_proto_2futils_2fbbox_2eproto_once, descriptor_table_proto_2futils_2fbbox_2eproto_sccs, descriptor_table_proto_2futils_2fbbox_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_proto_2futils_2fbbox_2eproto::offsets,
  file_level_metadata_proto_2futils_2fbbox_2eproto, 2, file_level_enum_descriptors_proto_2futils_2fbbox_2eproto, file_level_service_descriptors_proto_2futils_2fbbox_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2futils_2fbbox_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2futils_2fbbox_2eproto)), true);

// ===================================================================

void Mask::InitAsDefaultInstance() {
}
class Mask::_Internal {
 public:
};

Mask::Mask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Mask)
}
Mask::Mask(const Mask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoded_bytes().empty()) {
    encoded_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encoded_bytes(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Mask)
}

void Mask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mask_proto_2futils_2fbbox_2eproto.base);
  encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Mask::~Mask() {
  // @@protoc_insertion_point(destructor:Mask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Mask::ArenaDtor(void* object) {
  Mask* _this = reinterpret_cast< Mask* >(object);
  (void)_this;
}
void Mask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mask& Mask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mask_proto_2futils_2fbbox_2eproto.base);
  return *internal_default_instance();
}


void Mask::Clear() {
// @@protoc_insertion_point(message_clear_start:Mask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes encoded_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encoded_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encoded_bytes = 1;
  if (this->encoded_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mask)
  return target;
}

size_t Mask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded_bytes = 1;
  if (this->encoded_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mask)
  GOOGLE_DCHECK_NE(&from, this);
  const Mask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mask)
    MergeFrom(*source);
  }
}

void Mask::MergeFrom(const Mask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoded_bytes().size() > 0) {
    _internal_set_encoded_bytes(from._internal_encoded_bytes());
  }
}

void Mask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mask::CopyFrom(const Mask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mask::IsInitialized() const {
  return true;
}

void Mask::InternalSwap(Mask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encoded_bytes_.Swap(&other->encoded_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Mask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BBox::InitAsDefaultInstance() {
}
class BBox::_Internal {
 public:
};

BBox::BBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BBox)
}
BBox::BBox(const BBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&top_row_, &from.top_row_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_col_) -
    reinterpret_cast<char*>(&top_row_)) + sizeof(right_col_));
  // @@protoc_insertion_point(copy_constructor:BBox)
}

void BBox::SharedCtor() {
  ::memset(&top_row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_col_) -
      reinterpret_cast<char*>(&top_row_)) + sizeof(right_col_));
}

BBox::~BBox() {
  // @@protoc_insertion_point(destructor:BBox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BBox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BBox::ArenaDtor(void* object) {
  BBox* _this = reinterpret_cast< BBox* >(object);
  (void)_this;
}
void BBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BBox& BBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BBox_proto_2futils_2fbbox_2eproto.base);
  return *internal_default_instance();
}


void BBox::Clear() {
// @@protoc_insertion_point(message_clear_start:BBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&top_row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_col_) -
      reinterpret_cast<char*>(&top_row_)) + sizeof(right_col_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float top_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          top_row_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float left_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          left_col_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bottom_row = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          bottom_row_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_col = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          right_col_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float top_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->top_row() <= 0 && this->top_row() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_top_row(), target);
  }

  // float left_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->left_col() <= 0 && this->left_col() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_left_col(), target);
  }

  // float bottom_row = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->bottom_row() <= 0 && this->bottom_row() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_bottom_row(), target);
  }

  // float right_col = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->right_col() <= 0 && this->right_col() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_right_col(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BBox)
  return target;
}

size_t BBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float top_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->top_row() <= 0 && this->top_row() >= 0)) {
    total_size += 1 + 4;
  }

  // float left_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->left_col() <= 0 && this->left_col() >= 0)) {
    total_size += 1 + 4;
  }

  // float bottom_row = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->bottom_row() <= 0 && this->bottom_row() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_col = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (!(this->right_col() <= 0 && this->right_col() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BBox)
  GOOGLE_DCHECK_NE(&from, this);
  const BBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BBox)
    MergeFrom(*source);
  }
}

void BBox::MergeFrom(const BBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.top_row() <= 0 && from.top_row() >= 0)) {
    _internal_set_top_row(from._internal_top_row());
  }
  if (!(from.left_col() <= 0 && from.left_col() >= 0)) {
    _internal_set_left_col(from._internal_left_col());
  }
  if (!(from.bottom_row() <= 0 && from.bottom_row() >= 0)) {
    _internal_set_bottom_row(from._internal_bottom_row());
  }
  if (!(from.right_col() <= 0 && from.right_col() >= 0)) {
    _internal_set_right_col(from._internal_right_col());
  }
}

void BBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBox::CopyFrom(const BBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBox::IsInitialized() const {
  return true;
}

void BBox::InternalSwap(BBox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BBox, right_col_)
      + sizeof(BBox::right_col_)
      - PROTOBUF_FIELD_OFFSET(BBox, top_row_)>(
          reinterpret_cast<char*>(&top_row_),
          reinterpret_cast<char*>(&other->top_row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BBox::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Mask* Arena::CreateMaybeMessage< ::Mask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mask >(arena);
}
template<> PROTOBUF_NOINLINE ::BBox* Arena::CreateMaybeMessage< ::BBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BBox >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
