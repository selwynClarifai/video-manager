// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/vocab.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fvocab_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fvocab_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/tag.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fvocab_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2fvocab_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fvocab_2eproto;
class Vocab;
class VocabDefaultTypeInternal;
extern VocabDefaultTypeInternal _Vocab_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Vocab* Arena::CreateMaybeMessage<::Vocab>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Vocab PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vocab) */ {
 public:
  inline Vocab() : Vocab(nullptr) {}
  virtual ~Vocab();

  Vocab(const Vocab& from);
  Vocab(Vocab&& from) noexcept
    : Vocab() {
    *this = ::std::move(from);
  }

  inline Vocab& operator=(const Vocab& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vocab& operator=(Vocab&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vocab& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vocab* internal_default_instance() {
    return reinterpret_cast<const Vocab*>(
               &_Vocab_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vocab& a, Vocab& b) {
    a.Swap(&b);
  }
  inline void Swap(Vocab* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vocab* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vocab* New() const final {
    return CreateMaybeMessage<Vocab>(nullptr);
  }

  Vocab* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vocab>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vocab& from);
  void MergeFrom(const Vocab& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vocab* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vocab";
  }
  protected:
  explicit Vocab(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fvocab_2eproto);
    return ::descriptor_table_proto_2futils_2fvocab_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 5,
    kUserUniqueVocabIdFieldNumber = 1,
    kUserUniqueAppIdFieldNumber = 2,
    kUserUniqueUserIdFieldNumber = 3,
  };
  // repeated .Tag tag = 5;
  int tag_size() const;
  private:
  int _internal_tag_size() const;
  public:
  void clear_tag();
  ::Tag* mutable_tag(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tag >*
      mutable_tag();
  private:
  const ::Tag& _internal_tag(int index) const;
  ::Tag* _internal_add_tag();
  public:
  const ::Tag& tag(int index) const;
  ::Tag* add_tag();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tag >&
      tag() const;

  // string user_unique_vocab_id = 1;
  void clear_user_unique_vocab_id();
  const std::string& user_unique_vocab_id() const;
  void set_user_unique_vocab_id(const std::string& value);
  void set_user_unique_vocab_id(std::string&& value);
  void set_user_unique_vocab_id(const char* value);
  void set_user_unique_vocab_id(const char* value, size_t size);
  std::string* mutable_user_unique_vocab_id();
  std::string* release_user_unique_vocab_id();
  void set_allocated_user_unique_vocab_id(std::string* user_unique_vocab_id);
  private:
  const std::string& _internal_user_unique_vocab_id() const;
  void _internal_set_user_unique_vocab_id(const std::string& value);
  std::string* _internal_mutable_user_unique_vocab_id();
  public:

  // string user_unique_app_id = 2;
  void clear_user_unique_app_id();
  const std::string& user_unique_app_id() const;
  void set_user_unique_app_id(const std::string& value);
  void set_user_unique_app_id(std::string&& value);
  void set_user_unique_app_id(const char* value);
  void set_user_unique_app_id(const char* value, size_t size);
  std::string* mutable_user_unique_app_id();
  std::string* release_user_unique_app_id();
  void set_allocated_user_unique_app_id(std::string* user_unique_app_id);
  private:
  const std::string& _internal_user_unique_app_id() const;
  void _internal_set_user_unique_app_id(const std::string& value);
  std::string* _internal_mutable_user_unique_app_id();
  public:

  // string user_unique_user_id = 3;
  void clear_user_unique_user_id();
  const std::string& user_unique_user_id() const;
  void set_user_unique_user_id(const std::string& value);
  void set_user_unique_user_id(std::string&& value);
  void set_user_unique_user_id(const char* value);
  void set_user_unique_user_id(const char* value, size_t size);
  std::string* mutable_user_unique_user_id();
  std::string* release_user_unique_user_id();
  void set_allocated_user_unique_user_id(std::string* user_unique_user_id);
  private:
  const std::string& _internal_user_unique_user_id() const;
  void _internal_set_user_unique_user_id(const std::string& value);
  std::string* _internal_mutable_user_unique_user_id();
  public:

  // @@protoc_insertion_point(class_scope:Vocab)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tag > tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_unique_vocab_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_unique_app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_unique_user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fvocab_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vocab

// string user_unique_vocab_id = 1;
inline void Vocab::clear_user_unique_vocab_id() {
  user_unique_vocab_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vocab::user_unique_vocab_id() const {
  // @@protoc_insertion_point(field_get:Vocab.user_unique_vocab_id)
  return _internal_user_unique_vocab_id();
}
inline void Vocab::set_user_unique_vocab_id(const std::string& value) {
  _internal_set_user_unique_vocab_id(value);
  // @@protoc_insertion_point(field_set:Vocab.user_unique_vocab_id)
}
inline std::string* Vocab::mutable_user_unique_vocab_id() {
  // @@protoc_insertion_point(field_mutable:Vocab.user_unique_vocab_id)
  return _internal_mutable_user_unique_vocab_id();
}
inline const std::string& Vocab::_internal_user_unique_vocab_id() const {
  return user_unique_vocab_id_.Get();
}
inline void Vocab::_internal_set_user_unique_vocab_id(const std::string& value) {
  
  user_unique_vocab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vocab::set_user_unique_vocab_id(std::string&& value) {
  
  user_unique_vocab_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Vocab.user_unique_vocab_id)
}
inline void Vocab::set_user_unique_vocab_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_unique_vocab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Vocab.user_unique_vocab_id)
}
inline void Vocab::set_user_unique_vocab_id(const char* value,
    size_t size) {
  
  user_unique_vocab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Vocab.user_unique_vocab_id)
}
inline std::string* Vocab::_internal_mutable_user_unique_vocab_id() {
  
  return user_unique_vocab_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vocab::release_user_unique_vocab_id() {
  // @@protoc_insertion_point(field_release:Vocab.user_unique_vocab_id)
  return user_unique_vocab_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vocab::set_allocated_user_unique_vocab_id(std::string* user_unique_vocab_id) {
  if (user_unique_vocab_id != nullptr) {
    
  } else {
    
  }
  user_unique_vocab_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_unique_vocab_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Vocab.user_unique_vocab_id)
}

// string user_unique_app_id = 2;
inline void Vocab::clear_user_unique_app_id() {
  user_unique_app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vocab::user_unique_app_id() const {
  // @@protoc_insertion_point(field_get:Vocab.user_unique_app_id)
  return _internal_user_unique_app_id();
}
inline void Vocab::set_user_unique_app_id(const std::string& value) {
  _internal_set_user_unique_app_id(value);
  // @@protoc_insertion_point(field_set:Vocab.user_unique_app_id)
}
inline std::string* Vocab::mutable_user_unique_app_id() {
  // @@protoc_insertion_point(field_mutable:Vocab.user_unique_app_id)
  return _internal_mutable_user_unique_app_id();
}
inline const std::string& Vocab::_internal_user_unique_app_id() const {
  return user_unique_app_id_.Get();
}
inline void Vocab::_internal_set_user_unique_app_id(const std::string& value) {
  
  user_unique_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vocab::set_user_unique_app_id(std::string&& value) {
  
  user_unique_app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Vocab.user_unique_app_id)
}
inline void Vocab::set_user_unique_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_unique_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Vocab.user_unique_app_id)
}
inline void Vocab::set_user_unique_app_id(const char* value,
    size_t size) {
  
  user_unique_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Vocab.user_unique_app_id)
}
inline std::string* Vocab::_internal_mutable_user_unique_app_id() {
  
  return user_unique_app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vocab::release_user_unique_app_id() {
  // @@protoc_insertion_point(field_release:Vocab.user_unique_app_id)
  return user_unique_app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vocab::set_allocated_user_unique_app_id(std::string* user_unique_app_id) {
  if (user_unique_app_id != nullptr) {
    
  } else {
    
  }
  user_unique_app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_unique_app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Vocab.user_unique_app_id)
}

// string user_unique_user_id = 3;
inline void Vocab::clear_user_unique_user_id() {
  user_unique_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vocab::user_unique_user_id() const {
  // @@protoc_insertion_point(field_get:Vocab.user_unique_user_id)
  return _internal_user_unique_user_id();
}
inline void Vocab::set_user_unique_user_id(const std::string& value) {
  _internal_set_user_unique_user_id(value);
  // @@protoc_insertion_point(field_set:Vocab.user_unique_user_id)
}
inline std::string* Vocab::mutable_user_unique_user_id() {
  // @@protoc_insertion_point(field_mutable:Vocab.user_unique_user_id)
  return _internal_mutable_user_unique_user_id();
}
inline const std::string& Vocab::_internal_user_unique_user_id() const {
  return user_unique_user_id_.Get();
}
inline void Vocab::_internal_set_user_unique_user_id(const std::string& value) {
  
  user_unique_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vocab::set_user_unique_user_id(std::string&& value) {
  
  user_unique_user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Vocab.user_unique_user_id)
}
inline void Vocab::set_user_unique_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_unique_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Vocab.user_unique_user_id)
}
inline void Vocab::set_user_unique_user_id(const char* value,
    size_t size) {
  
  user_unique_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Vocab.user_unique_user_id)
}
inline std::string* Vocab::_internal_mutable_user_unique_user_id() {
  
  return user_unique_user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vocab::release_user_unique_user_id() {
  // @@protoc_insertion_point(field_release:Vocab.user_unique_user_id)
  return user_unique_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vocab::set_allocated_user_unique_user_id(std::string* user_unique_user_id) {
  if (user_unique_user_id != nullptr) {
    
  } else {
    
  }
  user_unique_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_unique_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Vocab.user_unique_user_id)
}

// repeated .Tag tag = 5;
inline int Vocab::_internal_tag_size() const {
  return tag_.size();
}
inline int Vocab::tag_size() const {
  return _internal_tag_size();
}
inline ::Tag* Vocab::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:Vocab.tag)
  return tag_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tag >*
Vocab::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:Vocab.tag)
  return &tag_;
}
inline const ::Tag& Vocab::_internal_tag(int index) const {
  return tag_.Get(index);
}
inline const ::Tag& Vocab::tag(int index) const {
  // @@protoc_insertion_point(field_get:Vocab.tag)
  return _internal_tag(index);
}
inline ::Tag* Vocab::_internal_add_tag() {
  return tag_.Add();
}
inline ::Tag* Vocab::add_tag() {
  // @@protoc_insertion_point(field_add:Vocab.tag)
  return _internal_add_tag();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tag >&
Vocab::tag() const {
  // @@protoc_insertion_point(field_list:Vocab.tag)
  return tag_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fvocab_2eproto
