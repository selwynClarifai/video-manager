// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/proto_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fproto_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fproto_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/request_meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fproto_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2fproto_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fproto_5ftest_2eproto;
class AnotherMessage;
class AnotherMessageDefaultTypeInternal;
extern AnotherMessageDefaultTypeInternal _AnotherMessage_default_instance_;
class MyMessage;
class MyMessageDefaultTypeInternal;
extern MyMessageDefaultTypeInternal _MyMessage_default_instance_;
class ProtoTest;
class ProtoTestDefaultTypeInternal;
extern ProtoTestDefaultTypeInternal _ProtoTest_default_instance_;
class ProtoTestRequest;
class ProtoTestRequestDefaultTypeInternal;
extern ProtoTestRequestDefaultTypeInternal _ProtoTestRequest_default_instance_;
class ProtoTestResponse;
class ProtoTestResponseDefaultTypeInternal;
extern ProtoTestResponseDefaultTypeInternal _ProtoTestResponse_default_instance_;
class ProtoTest_MapMsgEntry_DoNotUse;
class ProtoTest_MapMsgEntry_DoNotUseDefaultTypeInternal;
extern ProtoTest_MapMsgEntry_DoNotUseDefaultTypeInternal _ProtoTest_MapMsgEntry_DoNotUse_default_instance_;
class ProtoTest_MapScalarEntry_DoNotUse;
class ProtoTest_MapScalarEntry_DoNotUseDefaultTypeInternal;
extern ProtoTest_MapScalarEntry_DoNotUseDefaultTypeInternal _ProtoTest_MapScalarEntry_DoNotUse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AnotherMessage* Arena::CreateMaybeMessage<::AnotherMessage>(Arena*);
template<> ::MyMessage* Arena::CreateMaybeMessage<::MyMessage>(Arena*);
template<> ::ProtoTest* Arena::CreateMaybeMessage<::ProtoTest>(Arena*);
template<> ::ProtoTestRequest* Arena::CreateMaybeMessage<::ProtoTestRequest>(Arena*);
template<> ::ProtoTestResponse* Arena::CreateMaybeMessage<::ProtoTestResponse>(Arena*);
template<> ::ProtoTest_MapMsgEntry_DoNotUse* Arena::CreateMaybeMessage<::ProtoTest_MapMsgEntry_DoNotUse>(Arena*);
template<> ::ProtoTest_MapScalarEntry_DoNotUse* Arena::CreateMaybeMessage<::ProtoTest_MapScalarEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AnotherMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AnotherMessage) */ {
 public:
  inline AnotherMessage() : AnotherMessage(nullptr) {}
  virtual ~AnotherMessage();

  AnotherMessage(const AnotherMessage& from);
  AnotherMessage(AnotherMessage&& from) noexcept
    : AnotherMessage() {
    *this = ::std::move(from);
  }

  inline AnotherMessage& operator=(const AnotherMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnotherMessage& operator=(AnotherMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnotherMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnotherMessage* internal_default_instance() {
    return reinterpret_cast<const AnotherMessage*>(
               &_AnotherMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnotherMessage& a, AnotherMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AnotherMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnotherMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnotherMessage* New() const final {
    return CreateMaybeMessage<AnotherMessage>(nullptr);
  }

  AnotherMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnotherMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnotherMessage& from);
  void MergeFrom(const AnotherMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnotherMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AnotherMessage";
  }
  protected:
  explicit AnotherMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fproto_5ftest_2eproto);
    return ::descriptor_table_proto_2futils_2fproto_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:AnotherMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fproto_5ftest_2eproto;
};
// -------------------------------------------------------------------

class MyMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyMessage) */ {
 public:
  inline MyMessage() : MyMessage(nullptr) {}
  virtual ~MyMessage();

  MyMessage(const MyMessage& from);
  MyMessage(MyMessage&& from) noexcept
    : MyMessage() {
    *this = ::std::move(from);
  }

  inline MyMessage& operator=(const MyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyMessage& operator=(MyMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyMessage* internal_default_instance() {
    return reinterpret_cast<const MyMessage*>(
               &_MyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MyMessage& a, MyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MyMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyMessage* New() const final {
    return CreateMaybeMessage<MyMessage>(nullptr);
  }

  MyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyMessage& from);
  void MergeFrom(const MyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyMessage";
  }
  protected:
  explicit MyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fproto_5ftest_2eproto);
    return ::descriptor_table_proto_2futils_2fproto_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAnotherMsgFieldNumber = 3,
    kNumFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .AnotherMessage another_msg = 3;
  bool has_another_msg() const;
  private:
  bool _internal_has_another_msg() const;
  public:
  void clear_another_msg();
  const ::AnotherMessage& another_msg() const;
  ::AnotherMessage* release_another_msg();
  ::AnotherMessage* mutable_another_msg();
  void set_allocated_another_msg(::AnotherMessage* another_msg);
  private:
  const ::AnotherMessage& _internal_another_msg() const;
  ::AnotherMessage* _internal_mutable_another_msg();
  public:
  void unsafe_arena_set_allocated_another_msg(
      ::AnotherMessage* another_msg);
  ::AnotherMessage* unsafe_arena_release_another_msg();

  // uint32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:MyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::AnotherMessage* another_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fproto_5ftest_2eproto;
};
// -------------------------------------------------------------------

class ProtoTest_MapScalarEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProtoTest_MapScalarEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProtoTest_MapScalarEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ProtoTest_MapScalarEntry_DoNotUse();
  explicit ProtoTest_MapScalarEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ProtoTest_MapScalarEntry_DoNotUse& other);
  static const ProtoTest_MapScalarEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ProtoTest_MapScalarEntry_DoNotUse*>(&_ProtoTest_MapScalarEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ProtoTest.MapScalarEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ProtoTest.MapScalarEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fproto_5ftest_2eproto);
    return ::descriptor_table_proto_2futils_2fproto_5ftest_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class ProtoTest_MapMsgEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProtoTest_MapMsgEntry_DoNotUse, 
    std::string, ::MyMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProtoTest_MapMsgEntry_DoNotUse, 
    std::string, ::MyMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ProtoTest_MapMsgEntry_DoNotUse();
  explicit ProtoTest_MapMsgEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ProtoTest_MapMsgEntry_DoNotUse& other);
  static const ProtoTest_MapMsgEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ProtoTest_MapMsgEntry_DoNotUse*>(&_ProtoTest_MapMsgEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ProtoTest.MapMsgEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fproto_5ftest_2eproto);
    return ::descriptor_table_proto_2futils_2fproto_5ftest_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class ProtoTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoTest) */ {
 public:
  inline ProtoTest() : ProtoTest(nullptr) {}
  virtual ~ProtoTest();

  ProtoTest(const ProtoTest& from);
  ProtoTest(ProtoTest&& from) noexcept
    : ProtoTest() {
    *this = ::std::move(from);
  }

  inline ProtoTest& operator=(const ProtoTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoTest& operator=(ProtoTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoTest* internal_default_instance() {
    return reinterpret_cast<const ProtoTest*>(
               &_ProtoTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProtoTest& a, ProtoTest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoTest* New() const final {
    return CreateMaybeMessage<ProtoTest>(nullptr);
  }

  ProtoTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoTest& from);
  void MergeFrom(const ProtoTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoTest";
  }
  protected:
  explicit ProtoTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fproto_5ftest_2eproto);
    return ::descriptor_table_proto_2futils_2fproto_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedScalarFieldNumber = 2,
    kRepeatedMsgFieldNumber = 4,
    kMapScalarFieldNumber = 5,
    kMapMsgFieldNumber = 6,
    kScalarFieldNumber = 1,
    kMsgFieldNumber = 3,
  };
  // repeated uint32 repeated_scalar = 2;
  int repeated_scalar_size() const;
  private:
  int _internal_repeated_scalar_size() const;
  public:
  void clear_repeated_scalar();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeated_scalar(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_repeated_scalar() const;
  void _internal_add_repeated_scalar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_repeated_scalar();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 repeated_scalar(int index) const;
  void set_repeated_scalar(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_repeated_scalar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      repeated_scalar() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_repeated_scalar();

  // repeated .MyMessage repeated_msg = 4;
  int repeated_msg_size() const;
  private:
  int _internal_repeated_msg_size() const;
  public:
  void clear_repeated_msg();
  ::MyMessage* mutable_repeated_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MyMessage >*
      mutable_repeated_msg();
  private:
  const ::MyMessage& _internal_repeated_msg(int index) const;
  ::MyMessage* _internal_add_repeated_msg();
  public:
  const ::MyMessage& repeated_msg(int index) const;
  ::MyMessage* add_repeated_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MyMessage >&
      repeated_msg() const;

  // map<string, string> map_scalar = 5;
  int map_scalar_size() const;
  private:
  int _internal_map_scalar_size() const;
  public:
  void clear_map_scalar();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_map_scalar() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_map_scalar();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      map_scalar() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_map_scalar();

  // map<string, .MyMessage> map_msg = 6;
  int map_msg_size() const;
  private:
  int _internal_map_msg_size() const;
  public:
  void clear_map_msg();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MyMessage >&
      _internal_map_msg() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MyMessage >*
      _internal_mutable_map_msg();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MyMessage >&
      map_msg() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MyMessage >*
      mutable_map_msg();

  // string scalar = 1;
  void clear_scalar();
  const std::string& scalar() const;
  void set_scalar(const std::string& value);
  void set_scalar(std::string&& value);
  void set_scalar(const char* value);
  void set_scalar(const char* value, size_t size);
  std::string* mutable_scalar();
  std::string* release_scalar();
  void set_allocated_scalar(std::string* scalar);
  private:
  const std::string& _internal_scalar() const;
  void _internal_set_scalar(const std::string& value);
  std::string* _internal_mutable_scalar();
  public:

  // .MyMessage msg = 3;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::MyMessage& msg() const;
  ::MyMessage* release_msg();
  ::MyMessage* mutable_msg();
  void set_allocated_msg(::MyMessage* msg);
  private:
  const ::MyMessage& _internal_msg() const;
  ::MyMessage* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::MyMessage* msg);
  ::MyMessage* unsafe_arena_release_msg();

  // @@protoc_insertion_point(class_scope:ProtoTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > repeated_scalar_;
  mutable std::atomic<int> _repeated_scalar_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MyMessage > repeated_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ProtoTest_MapScalarEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > map_scalar_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ProtoTest_MapMsgEntry_DoNotUse,
      std::string, ::MyMessage,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scalar_;
  ::MyMessage* msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fproto_5ftest_2eproto;
};
// -------------------------------------------------------------------

class ProtoTestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoTestRequest) */ {
 public:
  inline ProtoTestRequest() : ProtoTestRequest(nullptr) {}
  virtual ~ProtoTestRequest();

  ProtoTestRequest(const ProtoTestRequest& from);
  ProtoTestRequest(ProtoTestRequest&& from) noexcept
    : ProtoTestRequest() {
    *this = ::std::move(from);
  }

  inline ProtoTestRequest& operator=(const ProtoTestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoTestRequest& operator=(ProtoTestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoTestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoTestRequest* internal_default_instance() {
    return reinterpret_cast<const ProtoTestRequest*>(
               &_ProtoTestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProtoTestRequest& a, ProtoTestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoTestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoTestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoTestRequest* New() const final {
    return CreateMaybeMessage<ProtoTestRequest>(nullptr);
  }

  ProtoTestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoTestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoTestRequest& from);
  void MergeFrom(const ProtoTestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoTestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoTestRequest";
  }
  protected:
  explicit ProtoTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fproto_5ftest_2eproto);
    return ::descriptor_table_proto_2futils_2fproto_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kMetaFieldNumber = 1,
    kSleepTimeFieldNumber = 3,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // uint32 sleep_time = 3;
  void clear_sleep_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 sleep_time() const;
  void set_sleep_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sleep_time() const;
  void _internal_set_sleep_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoTestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::RequestMeta* meta_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sleep_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fproto_5ftest_2eproto;
};
// -------------------------------------------------------------------

class ProtoTestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoTestResponse) */ {
 public:
  inline ProtoTestResponse() : ProtoTestResponse(nullptr) {}
  virtual ~ProtoTestResponse();

  ProtoTestResponse(const ProtoTestResponse& from);
  ProtoTestResponse(ProtoTestResponse&& from) noexcept
    : ProtoTestResponse() {
    *this = ::std::move(from);
  }

  inline ProtoTestResponse& operator=(const ProtoTestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoTestResponse& operator=(ProtoTestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoTestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoTestResponse* internal_default_instance() {
    return reinterpret_cast<const ProtoTestResponse*>(
               &_ProtoTestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProtoTestResponse& a, ProtoTestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoTestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoTestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoTestResponse* New() const final {
    return CreateMaybeMessage<ProtoTestResponse>(nullptr);
  }

  ProtoTestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoTestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoTestResponse& from);
  void MergeFrom(const ProtoTestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoTestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoTestResponse";
  }
  protected:
  explicit ProtoTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fproto_5ftest_2eproto);
    return ::descriptor_table_proto_2futils_2fproto_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kStatusFieldNumber = 1,
    kSleepTimeFieldNumber = 3,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // uint32 sleep_time = 3;
  void clear_sleep_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 sleep_time() const;
  void set_sleep_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sleep_time() const;
  void _internal_set_sleep_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoTestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::ResponseStatus* status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sleep_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fproto_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnotherMessage

// string id = 1;
inline void AnotherMessage::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnotherMessage::id() const {
  // @@protoc_insertion_point(field_get:AnotherMessage.id)
  return _internal_id();
}
inline void AnotherMessage::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:AnotherMessage.id)
}
inline std::string* AnotherMessage::mutable_id() {
  // @@protoc_insertion_point(field_mutable:AnotherMessage.id)
  return _internal_mutable_id();
}
inline const std::string& AnotherMessage::_internal_id() const {
  return id_.Get();
}
inline void AnotherMessage::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnotherMessage::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AnotherMessage.id)
}
inline void AnotherMessage::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AnotherMessage.id)
}
inline void AnotherMessage::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AnotherMessage.id)
}
inline std::string* AnotherMessage::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnotherMessage::release_id() {
  // @@protoc_insertion_point(field_release:AnotherMessage.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnotherMessage::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AnotherMessage.id)
}

// -------------------------------------------------------------------

// MyMessage

// string name = 1;
inline void MyMessage::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MyMessage::name() const {
  // @@protoc_insertion_point(field_get:MyMessage.name)
  return _internal_name();
}
inline void MyMessage::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MyMessage.name)
}
inline std::string* MyMessage::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MyMessage.name)
  return _internal_mutable_name();
}
inline const std::string& MyMessage::_internal_name() const {
  return name_.Get();
}
inline void MyMessage::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MyMessage::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyMessage.name)
}
inline void MyMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyMessage.name)
}
inline void MyMessage::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyMessage.name)
}
inline std::string* MyMessage::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MyMessage::release_name() {
  // @@protoc_insertion_point(field_release:MyMessage.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MyMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyMessage.name)
}

// uint32 num = 2;
inline void MyMessage::clear_num() {
  num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MyMessage::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MyMessage::num() const {
  // @@protoc_insertion_point(field_get:MyMessage.num)
  return _internal_num();
}
inline void MyMessage::_internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ = value;
}
inline void MyMessage::set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:MyMessage.num)
}

// .AnotherMessage another_msg = 3;
inline bool MyMessage::_internal_has_another_msg() const {
  return this != internal_default_instance() && another_msg_ != nullptr;
}
inline bool MyMessage::has_another_msg() const {
  return _internal_has_another_msg();
}
inline void MyMessage::clear_another_msg() {
  if (GetArena() == nullptr && another_msg_ != nullptr) {
    delete another_msg_;
  }
  another_msg_ = nullptr;
}
inline const ::AnotherMessage& MyMessage::_internal_another_msg() const {
  const ::AnotherMessage* p = another_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::AnotherMessage*>(
      &::_AnotherMessage_default_instance_);
}
inline const ::AnotherMessage& MyMessage::another_msg() const {
  // @@protoc_insertion_point(field_get:MyMessage.another_msg)
  return _internal_another_msg();
}
inline void MyMessage::unsafe_arena_set_allocated_another_msg(
    ::AnotherMessage* another_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(another_msg_);
  }
  another_msg_ = another_msg;
  if (another_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MyMessage.another_msg)
}
inline ::AnotherMessage* MyMessage::release_another_msg() {
  
  ::AnotherMessage* temp = another_msg_;
  another_msg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AnotherMessage* MyMessage::unsafe_arena_release_another_msg() {
  // @@protoc_insertion_point(field_release:MyMessage.another_msg)
  
  ::AnotherMessage* temp = another_msg_;
  another_msg_ = nullptr;
  return temp;
}
inline ::AnotherMessage* MyMessage::_internal_mutable_another_msg() {
  
  if (another_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::AnotherMessage>(GetArena());
    another_msg_ = p;
  }
  return another_msg_;
}
inline ::AnotherMessage* MyMessage::mutable_another_msg() {
  // @@protoc_insertion_point(field_mutable:MyMessage.another_msg)
  return _internal_mutable_another_msg();
}
inline void MyMessage::set_allocated_another_msg(::AnotherMessage* another_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete another_msg_;
  }
  if (another_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(another_msg);
    if (message_arena != submessage_arena) {
      another_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, another_msg, submessage_arena);
    }
    
  } else {
    
  }
  another_msg_ = another_msg;
  // @@protoc_insertion_point(field_set_allocated:MyMessage.another_msg)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ProtoTest

// string scalar = 1;
inline void ProtoTest::clear_scalar() {
  scalar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoTest::scalar() const {
  // @@protoc_insertion_point(field_get:ProtoTest.scalar)
  return _internal_scalar();
}
inline void ProtoTest::set_scalar(const std::string& value) {
  _internal_set_scalar(value);
  // @@protoc_insertion_point(field_set:ProtoTest.scalar)
}
inline std::string* ProtoTest::mutable_scalar() {
  // @@protoc_insertion_point(field_mutable:ProtoTest.scalar)
  return _internal_mutable_scalar();
}
inline const std::string& ProtoTest::_internal_scalar() const {
  return scalar_.Get();
}
inline void ProtoTest::_internal_set_scalar(const std::string& value) {
  
  scalar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoTest::set_scalar(std::string&& value) {
  
  scalar_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoTest.scalar)
}
inline void ProtoTest::set_scalar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scalar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoTest.scalar)
}
inline void ProtoTest::set_scalar(const char* value,
    size_t size) {
  
  scalar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoTest.scalar)
}
inline std::string* ProtoTest::_internal_mutable_scalar() {
  
  return scalar_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoTest::release_scalar() {
  // @@protoc_insertion_point(field_release:ProtoTest.scalar)
  return scalar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoTest::set_allocated_scalar(std::string* scalar) {
  if (scalar != nullptr) {
    
  } else {
    
  }
  scalar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scalar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoTest.scalar)
}

// repeated uint32 repeated_scalar = 2;
inline int ProtoTest::_internal_repeated_scalar_size() const {
  return repeated_scalar_.size();
}
inline int ProtoTest::repeated_scalar_size() const {
  return _internal_repeated_scalar_size();
}
inline void ProtoTest::clear_repeated_scalar() {
  repeated_scalar_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtoTest::_internal_repeated_scalar(int index) const {
  return repeated_scalar_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtoTest::repeated_scalar(int index) const {
  // @@protoc_insertion_point(field_get:ProtoTest.repeated_scalar)
  return _internal_repeated_scalar(index);
}
inline void ProtoTest::set_repeated_scalar(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  repeated_scalar_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoTest.repeated_scalar)
}
inline void ProtoTest::_internal_add_repeated_scalar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  repeated_scalar_.Add(value);
}
inline void ProtoTest::add_repeated_scalar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_repeated_scalar(value);
  // @@protoc_insertion_point(field_add:ProtoTest.repeated_scalar)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProtoTest::_internal_repeated_scalar() const {
  return repeated_scalar_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProtoTest::repeated_scalar() const {
  // @@protoc_insertion_point(field_list:ProtoTest.repeated_scalar)
  return _internal_repeated_scalar();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProtoTest::_internal_mutable_repeated_scalar() {
  return &repeated_scalar_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProtoTest::mutable_repeated_scalar() {
  // @@protoc_insertion_point(field_mutable_list:ProtoTest.repeated_scalar)
  return _internal_mutable_repeated_scalar();
}

// .MyMessage msg = 3;
inline bool ProtoTest::_internal_has_msg() const {
  return this != internal_default_instance() && msg_ != nullptr;
}
inline bool ProtoTest::has_msg() const {
  return _internal_has_msg();
}
inline void ProtoTest::clear_msg() {
  if (GetArena() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
}
inline const ::MyMessage& ProtoTest::_internal_msg() const {
  const ::MyMessage* p = msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MyMessage*>(
      &::_MyMessage_default_instance_);
}
inline const ::MyMessage& ProtoTest::msg() const {
  // @@protoc_insertion_point(field_get:ProtoTest.msg)
  return _internal_msg();
}
inline void ProtoTest::unsafe_arena_set_allocated_msg(
    ::MyMessage* msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_);
  }
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoTest.msg)
}
inline ::MyMessage* ProtoTest::release_msg() {
  
  ::MyMessage* temp = msg_;
  msg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MyMessage* ProtoTest::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_release:ProtoTest.msg)
  
  ::MyMessage* temp = msg_;
  msg_ = nullptr;
  return temp;
}
inline ::MyMessage* ProtoTest::_internal_mutable_msg() {
  
  if (msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::MyMessage>(GetArena());
    msg_ = p;
  }
  return msg_;
}
inline ::MyMessage* ProtoTest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:ProtoTest.msg)
  return _internal_mutable_msg();
}
inline void ProtoTest::set_allocated_msg(::MyMessage* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete msg_;
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(msg);
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    
  } else {
    
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:ProtoTest.msg)
}

// repeated .MyMessage repeated_msg = 4;
inline int ProtoTest::_internal_repeated_msg_size() const {
  return repeated_msg_.size();
}
inline int ProtoTest::repeated_msg_size() const {
  return _internal_repeated_msg_size();
}
inline void ProtoTest::clear_repeated_msg() {
  repeated_msg_.Clear();
}
inline ::MyMessage* ProtoTest::mutable_repeated_msg(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoTest.repeated_msg)
  return repeated_msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MyMessage >*
ProtoTest::mutable_repeated_msg() {
  // @@protoc_insertion_point(field_mutable_list:ProtoTest.repeated_msg)
  return &repeated_msg_;
}
inline const ::MyMessage& ProtoTest::_internal_repeated_msg(int index) const {
  return repeated_msg_.Get(index);
}
inline const ::MyMessage& ProtoTest::repeated_msg(int index) const {
  // @@protoc_insertion_point(field_get:ProtoTest.repeated_msg)
  return _internal_repeated_msg(index);
}
inline ::MyMessage* ProtoTest::_internal_add_repeated_msg() {
  return repeated_msg_.Add();
}
inline ::MyMessage* ProtoTest::add_repeated_msg() {
  // @@protoc_insertion_point(field_add:ProtoTest.repeated_msg)
  return _internal_add_repeated_msg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MyMessage >&
ProtoTest::repeated_msg() const {
  // @@protoc_insertion_point(field_list:ProtoTest.repeated_msg)
  return repeated_msg_;
}

// map<string, string> map_scalar = 5;
inline int ProtoTest::_internal_map_scalar_size() const {
  return map_scalar_.size();
}
inline int ProtoTest::map_scalar_size() const {
  return _internal_map_scalar_size();
}
inline void ProtoTest::clear_map_scalar() {
  map_scalar_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ProtoTest::_internal_map_scalar() const {
  return map_scalar_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ProtoTest::map_scalar() const {
  // @@protoc_insertion_point(field_map:ProtoTest.map_scalar)
  return _internal_map_scalar();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ProtoTest::_internal_mutable_map_scalar() {
  return map_scalar_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ProtoTest::mutable_map_scalar() {
  // @@protoc_insertion_point(field_mutable_map:ProtoTest.map_scalar)
  return _internal_mutable_map_scalar();
}

// map<string, .MyMessage> map_msg = 6;
inline int ProtoTest::_internal_map_msg_size() const {
  return map_msg_.size();
}
inline int ProtoTest::map_msg_size() const {
  return _internal_map_msg_size();
}
inline void ProtoTest::clear_map_msg() {
  map_msg_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MyMessage >&
ProtoTest::_internal_map_msg() const {
  return map_msg_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MyMessage >&
ProtoTest::map_msg() const {
  // @@protoc_insertion_point(field_map:ProtoTest.map_msg)
  return _internal_map_msg();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MyMessage >*
ProtoTest::_internal_mutable_map_msg() {
  return map_msg_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MyMessage >*
ProtoTest::mutable_map_msg() {
  // @@protoc_insertion_point(field_mutable_map:ProtoTest.map_msg)
  return _internal_mutable_map_msg();
}

// -------------------------------------------------------------------

// ProtoTestRequest

// .RequestMeta meta = 1;
inline bool ProtoTestRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool ProtoTestRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& ProtoTestRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& ProtoTestRequest::meta() const {
  // @@protoc_insertion_point(field_get:ProtoTestRequest.meta)
  return _internal_meta();
}
inline void ProtoTestRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoTestRequest.meta)
}
inline ::RequestMeta* ProtoTestRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* ProtoTestRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:ProtoTestRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* ProtoTestRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* ProtoTestRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:ProtoTestRequest.meta)
  return _internal_mutable_meta();
}
inline void ProtoTestRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:ProtoTestRequest.meta)
}

// string value = 2;
inline void ProtoTestRequest::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoTestRequest::value() const {
  // @@protoc_insertion_point(field_get:ProtoTestRequest.value)
  return _internal_value();
}
inline void ProtoTestRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ProtoTestRequest.value)
}
inline std::string* ProtoTestRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:ProtoTestRequest.value)
  return _internal_mutable_value();
}
inline const std::string& ProtoTestRequest::_internal_value() const {
  return value_.Get();
}
inline void ProtoTestRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoTestRequest::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoTestRequest.value)
}
inline void ProtoTestRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoTestRequest.value)
}
inline void ProtoTestRequest::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoTestRequest.value)
}
inline std::string* ProtoTestRequest::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoTestRequest::release_value() {
  // @@protoc_insertion_point(field_release:ProtoTestRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoTestRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoTestRequest.value)
}

// uint32 sleep_time = 3;
inline void ProtoTestRequest::clear_sleep_time() {
  sleep_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtoTestRequest::_internal_sleep_time() const {
  return sleep_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtoTestRequest::sleep_time() const {
  // @@protoc_insertion_point(field_get:ProtoTestRequest.sleep_time)
  return _internal_sleep_time();
}
inline void ProtoTestRequest::_internal_set_sleep_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sleep_time_ = value;
}
inline void ProtoTestRequest::set_sleep_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sleep_time(value);
  // @@protoc_insertion_point(field_set:ProtoTestRequest.sleep_time)
}

// -------------------------------------------------------------------

// ProtoTestResponse

// .ResponseStatus status = 1;
inline bool ProtoTestResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ProtoTestResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& ProtoTestResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& ProtoTestResponse::status() const {
  // @@protoc_insertion_point(field_get:ProtoTestResponse.status)
  return _internal_status();
}
inline void ProtoTestResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoTestResponse.status)
}
inline ::ResponseStatus* ProtoTestResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* ProtoTestResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:ProtoTestResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* ProtoTestResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* ProtoTestResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:ProtoTestResponse.status)
  return _internal_mutable_status();
}
inline void ProtoTestResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:ProtoTestResponse.status)
}

// string value = 2;
inline void ProtoTestResponse::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoTestResponse::value() const {
  // @@protoc_insertion_point(field_get:ProtoTestResponse.value)
  return _internal_value();
}
inline void ProtoTestResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ProtoTestResponse.value)
}
inline std::string* ProtoTestResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:ProtoTestResponse.value)
  return _internal_mutable_value();
}
inline const std::string& ProtoTestResponse::_internal_value() const {
  return value_.Get();
}
inline void ProtoTestResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoTestResponse::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoTestResponse.value)
}
inline void ProtoTestResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoTestResponse.value)
}
inline void ProtoTestResponse::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoTestResponse.value)
}
inline std::string* ProtoTestResponse::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoTestResponse::release_value() {
  // @@protoc_insertion_point(field_release:ProtoTestResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoTestResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoTestResponse.value)
}

// uint32 sleep_time = 3;
inline void ProtoTestResponse::clear_sleep_time() {
  sleep_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtoTestResponse::_internal_sleep_time() const {
  return sleep_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtoTestResponse::sleep_time() const {
  // @@protoc_insertion_point(field_get:ProtoTestResponse.sleep_time)
  return _internal_sleep_time();
}
inline void ProtoTestResponse::_internal_set_sleep_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sleep_time_ = value;
}
inline void ProtoTestResponse::set_sleep_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sleep_time(value);
  // @@protoc_insertion_point(field_set:ProtoTestResponse.sleep_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fproto_5ftest_2eproto
