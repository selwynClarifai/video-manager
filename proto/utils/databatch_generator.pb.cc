// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/databatch_generator.proto

#include "proto/utils/databatch_generator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdatabatch_5fgenerator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DataBatchGeneratorParams_proto_2futils_2fdatabatch_5fgenerator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdatabatch_5fgenerator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdatabatch_5fgenerator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageDatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelMapper_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fpasting_5fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PastingDataProviderParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdatabatch_5fgenerator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SavedOutputReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto;
class DataBatchGeneratorParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataBatchGeneratorParams> _instance;
  const ::ImageDatasetReaderParams* image_dataset_reader_params_;
  const ::SavedOutputReaderParams* saved_output_reader_params_;
  const ::DataBatchSamplerParams* databatch_sampler_params_;
  const ::gRPCDataBatchReaderParams* grpc_databatch_reader_params_;
  const ::PastingDataProviderParams* pasting_data_provider_params_;
} _DataBatchGeneratorParams_default_instance_;
class DatasetReaderParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatasetReaderParams> _instance;
} _DatasetReaderParams_default_instance_;
class ImageDatasetReaderParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageDatasetReaderParams> _instance;
} _ImageDatasetReaderParams_default_instance_;
class SavedOutputReaderParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SavedOutputReaderParams> _instance;
} _SavedOutputReaderParams_default_instance_;
class DataBatchSamplerParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataBatchSamplerParams> _instance;
} _DataBatchSamplerParams_default_instance_;
class gRPCDataBatchReaderParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<gRPCDataBatchReaderParams> _instance;
} _gRPCDataBatchReaderParams_default_instance_;
static void InitDefaultsscc_info_DataBatchGeneratorParams_proto_2futils_2fdatabatch_5fgenerator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DataBatchGeneratorParams_default_instance_;
    new (ptr) ::DataBatchGeneratorParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_DataBatchSamplerParams_default_instance_;
    new (ptr) ::DataBatchSamplerParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_gRPCDataBatchReaderParams_default_instance_;
    new (ptr) ::gRPCDataBatchReaderParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DataBatchGeneratorParams::InitAsDefaultInstance();
  ::DataBatchSamplerParams::InitAsDefaultInstance();
  ::gRPCDataBatchReaderParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DataBatchGeneratorParams_proto_2futils_2fdatabatch_5fgenerator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_DataBatchGeneratorParams_proto_2futils_2fdatabatch_5fgenerator_2eproto}, {
      &scc_info_ImageDatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base,
      &scc_info_SavedOutputReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base,
      &scc_info_PastingDataProviderParams_proto_2futils_2fpasting_5fdata_5fprovider_2eproto.base,
      &scc_info_LabelMapper_proto_2futils_2fdata_5fprovider_2eproto.base,}};

static void InitDefaultsscc_info_DatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DatasetReaderParams_default_instance_;
    new (ptr) ::DatasetReaderParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DatasetReaderParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto}, {}};

static void InitDefaultsscc_info_ImageDatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ImageDatasetReaderParams_default_instance_;
    new (ptr) ::ImageDatasetReaderParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageDatasetReaderParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageDatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageDatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto}, {
      &scc_info_DatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base,}};

static void InitDefaultsscc_info_SavedOutputReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SavedOutputReaderParams_default_instance_;
    new (ptr) ::SavedOutputReaderParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SavedOutputReaderParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SavedOutputReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SavedOutputReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto}, {
      &scc_info_DatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2futils_2fdatabatch_5fgenerator_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2futils_2fdatabatch_5fgenerator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2futils_2fdatabatch_5fgenerator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2futils_2fdatabatch_5fgenerator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataBatchGeneratorParams, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::DataBatchGeneratorParams, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::DataBatchGeneratorParamsDefaultTypeInternal, image_dataset_reader_params_),
  offsetof(::DataBatchGeneratorParamsDefaultTypeInternal, saved_output_reader_params_),
  offsetof(::DataBatchGeneratorParamsDefaultTypeInternal, databatch_sampler_params_),
  offsetof(::DataBatchGeneratorParamsDefaultTypeInternal, grpc_databatch_reader_params_),
  offsetof(::DataBatchGeneratorParamsDefaultTypeInternal, pasting_data_provider_params_),
  PROTOBUF_FIELD_OFFSET(::DataBatchGeneratorParams, databatch_size_),
  PROTOBUF_FIELD_OFFSET(::DataBatchGeneratorParams, num_threads_),
  PROTOBUF_FIELD_OFFSET(::DataBatchGeneratorParams, generator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatasetReaderParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DatasetReaderParams, dataset_),
  PROTOBUF_FIELD_OFFSET(::DatasetReaderParams, split_),
  PROTOBUF_FIELD_OFFSET(::DatasetReaderParams, shuffle_),
  PROTOBUF_FIELD_OFFSET(::DatasetReaderParams, continuous_),
  PROTOBUF_FIELD_OFFSET(::DatasetReaderParams, strip_empty_),
  PROTOBUF_FIELD_OFFSET(::DatasetReaderParams, set_dataset_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ImageDatasetReaderParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImageDatasetReaderParams, dataset_reader_params_),
  PROTOBUF_FIELD_OFFSET(::ImageDatasetReaderParams, fetch_from_urls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SavedOutputReaderParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SavedOutputReaderParams, dataset_reader_params_),
  PROTOBUF_FIELD_OFFSET(::SavedOutputReaderParams, saved_output_eid_),
  PROTOBUF_FIELD_OFFSET(::SavedOutputReaderParams, layer_name_),
  PROTOBUF_FIELD_OFFSET(::SavedOutputReaderParams, load_orig_databatch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataBatchSamplerParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DataBatchSamplerParams, databatch_generator_params_),
  PROTOBUF_FIELD_OFFSET(::DataBatchSamplerParams, deterministic_),
  PROTOBUF_FIELD_OFFSET(::DataBatchSamplerParams, sample_rate_),
  PROTOBUF_FIELD_OFFSET(::DataBatchSamplerParams, label_mapper_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gRPCDataBatchReaderParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gRPCDataBatchReaderParams, databatch_generator_params_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DataBatchGeneratorParams)},
  { 13, -1, sizeof(::DatasetReaderParams)},
  { 24, -1, sizeof(::ImageDatasetReaderParams)},
  { 31, -1, sizeof(::SavedOutputReaderParams)},
  { 40, -1, sizeof(::DataBatchSamplerParams)},
  { 49, -1, sizeof(::gRPCDataBatchReaderParams)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DataBatchGeneratorParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DatasetReaderParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ImageDatasetReaderParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SavedOutputReaderParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DataBatchSamplerParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_gRPCDataBatchReaderParams_default_instance_),
};

const char descriptor_table_protodef_proto_2futils_2fdatabatch_5fgenerator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%proto/utils/databatch_generator.proto\032"
  "\037proto/utils/data_provider.proto\032\'proto/"
  "utils/pasting_data_provider.proto\"\233\003\n\030Da"
  "taBatchGeneratorParams\022@\n\033image_dataset_"
  "reader_params\030\001 \001(\0132\031.ImageDatasetReader"
  "ParamsH\000\022>\n\032saved_output_reader_params\030\002"
  " \001(\0132\030.SavedOutputReaderParamsH\000\022;\n\030data"
  "batch_sampler_params\030\003 \001(\0132\027.DataBatchSa"
  "mplerParamsH\000\022B\n\034grpc_databatch_reader_p"
  "arams\030\004 \001(\0132\032.gRPCDataBatchReaderParamsH"
  "\000\022B\n\034pasting_data_provider_params\030\005 \001(\0132"
  "\032.PastingDataProviderParamsH\000\022\026\n\016databat"
  "ch_size\030d \001(\005\022\023\n\013num_threads\030e \001(\005B\013\n\tge"
  "nerator\"\211\001\n\023DatasetReaderParams\022\017\n\007datas"
  "et\030\001 \001(\t\022\r\n\005split\030\002 \001(\t\022\017\n\007shuffle\030\003 \001(\010"
  "\022\022\n\ncontinuous\030\004 \001(\010\022\023\n\013strip_empty\030\005 \001("
  "\010\022\030\n\020set_dataset_name\030\006 \001(\010\"h\n\030ImageData"
  "setReaderParams\0223\n\025dataset_reader_params"
  "\030\001 \001(\0132\024.DatasetReaderParams\022\027\n\017fetch_fr"
  "om_urls\030\002 \001(\010\"\231\001\n\027SavedOutputReaderParam"
  "s\0223\n\025dataset_reader_params\030\001 \001(\0132\024.Datas"
  "etReaderParams\022\030\n\020saved_output_eid\030\002 \001(\005"
  "\022\022\n\nlayer_name\030\003 \001(\t\022\033\n\023load_orig_databa"
  "tch\030\004 \001(\010\"\247\001\n\026DataBatchSamplerParams\022=\n\032"
  "databatch_generator_params\030\001 \003(\0132\031.DataB"
  "atchGeneratorParams\022\025\n\rdeterministic\030\002 \001"
  "(\010\022\023\n\013sample_rate\030\003 \003(\002\022\"\n\014label_mapper\030"
  "\004 \003(\0132\014.LabelMapper\"Z\n\031gRPCDataBatchRead"
  "erParams\022=\n\032databatch_generator_params\030\001"
  " \001(\0132\031.DataBatchGeneratorParamsB\007\n\005utils"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto_deps[2] = {
  &::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto,
  &::descriptor_table_proto_2futils_2fpasting_5fdata_5fprovider_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto_sccs[4] = {
  &scc_info_DataBatchGeneratorParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base,
  &scc_info_DatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base,
  &scc_info_ImageDatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base,
  &scc_info_SavedOutputReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto = {
  false, false, descriptor_table_protodef_proto_2futils_2fdatabatch_5fgenerator_2eproto, "proto/utils/databatch_generator.proto", 1208,
  &descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto_once, descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto_sccs, descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_proto_2futils_2fdatabatch_5fgenerator_2eproto::offsets,
  file_level_metadata_proto_2futils_2fdatabatch_5fgenerator_2eproto, 6, file_level_enum_descriptors_proto_2futils_2fdatabatch_5fgenerator_2eproto, file_level_service_descriptors_proto_2futils_2fdatabatch_5fgenerator_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2futils_2fdatabatch_5fgenerator_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2futils_2fdatabatch_5fgenerator_2eproto)), true);

// ===================================================================

void DataBatchGeneratorParams::InitAsDefaultInstance() {
  ::_DataBatchGeneratorParams_default_instance_.image_dataset_reader_params_ = const_cast< ::ImageDatasetReaderParams*>(
      ::ImageDatasetReaderParams::internal_default_instance());
  ::_DataBatchGeneratorParams_default_instance_.saved_output_reader_params_ = const_cast< ::SavedOutputReaderParams*>(
      ::SavedOutputReaderParams::internal_default_instance());
  ::_DataBatchGeneratorParams_default_instance_.databatch_sampler_params_ = const_cast< ::DataBatchSamplerParams*>(
      ::DataBatchSamplerParams::internal_default_instance());
  ::_DataBatchGeneratorParams_default_instance_.grpc_databatch_reader_params_ = const_cast< ::gRPCDataBatchReaderParams*>(
      ::gRPCDataBatchReaderParams::internal_default_instance());
  ::_DataBatchGeneratorParams_default_instance_.pasting_data_provider_params_ = const_cast< ::PastingDataProviderParams*>(
      ::PastingDataProviderParams::internal_default_instance());
}
class DataBatchGeneratorParams::_Internal {
 public:
  static const ::ImageDatasetReaderParams& image_dataset_reader_params(const DataBatchGeneratorParams* msg);
  static const ::SavedOutputReaderParams& saved_output_reader_params(const DataBatchGeneratorParams* msg);
  static const ::DataBatchSamplerParams& databatch_sampler_params(const DataBatchGeneratorParams* msg);
  static const ::gRPCDataBatchReaderParams& grpc_databatch_reader_params(const DataBatchGeneratorParams* msg);
  static const ::PastingDataProviderParams& pasting_data_provider_params(const DataBatchGeneratorParams* msg);
};

const ::ImageDatasetReaderParams&
DataBatchGeneratorParams::_Internal::image_dataset_reader_params(const DataBatchGeneratorParams* msg) {
  return *msg->generator_.image_dataset_reader_params_;
}
const ::SavedOutputReaderParams&
DataBatchGeneratorParams::_Internal::saved_output_reader_params(const DataBatchGeneratorParams* msg) {
  return *msg->generator_.saved_output_reader_params_;
}
const ::DataBatchSamplerParams&
DataBatchGeneratorParams::_Internal::databatch_sampler_params(const DataBatchGeneratorParams* msg) {
  return *msg->generator_.databatch_sampler_params_;
}
const ::gRPCDataBatchReaderParams&
DataBatchGeneratorParams::_Internal::grpc_databatch_reader_params(const DataBatchGeneratorParams* msg) {
  return *msg->generator_.grpc_databatch_reader_params_;
}
const ::PastingDataProviderParams&
DataBatchGeneratorParams::_Internal::pasting_data_provider_params(const DataBatchGeneratorParams* msg) {
  return *msg->generator_.pasting_data_provider_params_;
}
void DataBatchGeneratorParams::set_allocated_image_dataset_reader_params(::ImageDatasetReaderParams* image_dataset_reader_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_generator();
  if (image_dataset_reader_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_dataset_reader_params);
    if (message_arena != submessage_arena) {
      image_dataset_reader_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_dataset_reader_params, submessage_arena);
    }
    set_has_image_dataset_reader_params();
    generator_.image_dataset_reader_params_ = image_dataset_reader_params;
  }
  // @@protoc_insertion_point(field_set_allocated:DataBatchGeneratorParams.image_dataset_reader_params)
}
void DataBatchGeneratorParams::set_allocated_saved_output_reader_params(::SavedOutputReaderParams* saved_output_reader_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_generator();
  if (saved_output_reader_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(saved_output_reader_params);
    if (message_arena != submessage_arena) {
      saved_output_reader_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saved_output_reader_params, submessage_arena);
    }
    set_has_saved_output_reader_params();
    generator_.saved_output_reader_params_ = saved_output_reader_params;
  }
  // @@protoc_insertion_point(field_set_allocated:DataBatchGeneratorParams.saved_output_reader_params)
}
void DataBatchGeneratorParams::set_allocated_databatch_sampler_params(::DataBatchSamplerParams* databatch_sampler_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_generator();
  if (databatch_sampler_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(databatch_sampler_params);
    if (message_arena != submessage_arena) {
      databatch_sampler_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, databatch_sampler_params, submessage_arena);
    }
    set_has_databatch_sampler_params();
    generator_.databatch_sampler_params_ = databatch_sampler_params;
  }
  // @@protoc_insertion_point(field_set_allocated:DataBatchGeneratorParams.databatch_sampler_params)
}
void DataBatchGeneratorParams::set_allocated_grpc_databatch_reader_params(::gRPCDataBatchReaderParams* grpc_databatch_reader_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_generator();
  if (grpc_databatch_reader_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(grpc_databatch_reader_params);
    if (message_arena != submessage_arena) {
      grpc_databatch_reader_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grpc_databatch_reader_params, submessage_arena);
    }
    set_has_grpc_databatch_reader_params();
    generator_.grpc_databatch_reader_params_ = grpc_databatch_reader_params;
  }
  // @@protoc_insertion_point(field_set_allocated:DataBatchGeneratorParams.grpc_databatch_reader_params)
}
void DataBatchGeneratorParams::set_allocated_pasting_data_provider_params(::PastingDataProviderParams* pasting_data_provider_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_generator();
  if (pasting_data_provider_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pasting_data_provider_params)->GetArena();
    if (message_arena != submessage_arena) {
      pasting_data_provider_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pasting_data_provider_params, submessage_arena);
    }
    set_has_pasting_data_provider_params();
    generator_.pasting_data_provider_params_ = pasting_data_provider_params;
  }
  // @@protoc_insertion_point(field_set_allocated:DataBatchGeneratorParams.pasting_data_provider_params)
}
void DataBatchGeneratorParams::clear_pasting_data_provider_params() {
  if (_internal_has_pasting_data_provider_params()) {
    if (GetArena() == nullptr) {
      delete generator_.pasting_data_provider_params_;
    }
    clear_has_generator();
  }
}
DataBatchGeneratorParams::DataBatchGeneratorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DataBatchGeneratorParams)
}
DataBatchGeneratorParams::DataBatchGeneratorParams(const DataBatchGeneratorParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&databatch_size_, &from.databatch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_threads_) -
    reinterpret_cast<char*>(&databatch_size_)) + sizeof(num_threads_));
  clear_has_generator();
  switch (from.generator_case()) {
    case kImageDatasetReaderParams: {
      _internal_mutable_image_dataset_reader_params()->::ImageDatasetReaderParams::MergeFrom(from._internal_image_dataset_reader_params());
      break;
    }
    case kSavedOutputReaderParams: {
      _internal_mutable_saved_output_reader_params()->::SavedOutputReaderParams::MergeFrom(from._internal_saved_output_reader_params());
      break;
    }
    case kDatabatchSamplerParams: {
      _internal_mutable_databatch_sampler_params()->::DataBatchSamplerParams::MergeFrom(from._internal_databatch_sampler_params());
      break;
    }
    case kGrpcDatabatchReaderParams: {
      _internal_mutable_grpc_databatch_reader_params()->::gRPCDataBatchReaderParams::MergeFrom(from._internal_grpc_databatch_reader_params());
      break;
    }
    case kPastingDataProviderParams: {
      _internal_mutable_pasting_data_provider_params()->::PastingDataProviderParams::MergeFrom(from._internal_pasting_data_provider_params());
      break;
    }
    case GENERATOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:DataBatchGeneratorParams)
}

void DataBatchGeneratorParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataBatchGeneratorParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base);
  ::memset(&databatch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_threads_) -
      reinterpret_cast<char*>(&databatch_size_)) + sizeof(num_threads_));
  clear_has_generator();
}

DataBatchGeneratorParams::~DataBatchGeneratorParams() {
  // @@protoc_insertion_point(destructor:DataBatchGeneratorParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataBatchGeneratorParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_generator()) {
    clear_generator();
  }
}

void DataBatchGeneratorParams::ArenaDtor(void* object) {
  DataBatchGeneratorParams* _this = reinterpret_cast< DataBatchGeneratorParams* >(object);
  (void)_this;
}
void DataBatchGeneratorParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataBatchGeneratorParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataBatchGeneratorParams& DataBatchGeneratorParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataBatchGeneratorParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base);
  return *internal_default_instance();
}


void DataBatchGeneratorParams::clear_generator() {
// @@protoc_insertion_point(one_of_clear_start:DataBatchGeneratorParams)
  switch (generator_case()) {
    case kImageDatasetReaderParams: {
      if (GetArena() == nullptr) {
        delete generator_.image_dataset_reader_params_;
      }
      break;
    }
    case kSavedOutputReaderParams: {
      if (GetArena() == nullptr) {
        delete generator_.saved_output_reader_params_;
      }
      break;
    }
    case kDatabatchSamplerParams: {
      if (GetArena() == nullptr) {
        delete generator_.databatch_sampler_params_;
      }
      break;
    }
    case kGrpcDatabatchReaderParams: {
      if (GetArena() == nullptr) {
        delete generator_.grpc_databatch_reader_params_;
      }
      break;
    }
    case kPastingDataProviderParams: {
      if (GetArena() == nullptr) {
        delete generator_.pasting_data_provider_params_;
      }
      break;
    }
    case GENERATOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GENERATOR_NOT_SET;
}


void DataBatchGeneratorParams::Clear() {
// @@protoc_insertion_point(message_clear_start:DataBatchGeneratorParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&databatch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_threads_) -
      reinterpret_cast<char*>(&databatch_size_)) + sizeof(num_threads_));
  clear_generator();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataBatchGeneratorParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ImageDatasetReaderParams image_dataset_reader_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_dataset_reader_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SavedOutputReaderParams saved_output_reader_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_saved_output_reader_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatchSamplerParams databatch_sampler_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_databatch_sampler_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gRPCDataBatchReaderParams grpc_databatch_reader_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_grpc_databatch_reader_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PastingDataProviderParams pasting_data_provider_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pasting_data_provider_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 databatch_size = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          databatch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_threads = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataBatchGeneratorParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataBatchGeneratorParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ImageDatasetReaderParams image_dataset_reader_params = 1;
  if (_internal_has_image_dataset_reader_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image_dataset_reader_params(this), target, stream);
  }

  // .SavedOutputReaderParams saved_output_reader_params = 2;
  if (_internal_has_saved_output_reader_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::saved_output_reader_params(this), target, stream);
  }

  // .DataBatchSamplerParams databatch_sampler_params = 3;
  if (_internal_has_databatch_sampler_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::databatch_sampler_params(this), target, stream);
  }

  // .gRPCDataBatchReaderParams grpc_databatch_reader_params = 4;
  if (_internal_has_grpc_databatch_reader_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::grpc_databatch_reader_params(this), target, stream);
  }

  // .PastingDataProviderParams pasting_data_provider_params = 5;
  if (_internal_has_pasting_data_provider_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pasting_data_provider_params(this), target, stream);
  }

  // int32 databatch_size = 100;
  if (this->databatch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(100, this->_internal_databatch_size(), target);
  }

  // int32 num_threads = 101;
  if (this->num_threads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(101, this->_internal_num_threads(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataBatchGeneratorParams)
  return target;
}

size_t DataBatchGeneratorParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataBatchGeneratorParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 databatch_size = 100;
  if (this->databatch_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_databatch_size());
  }

  // int32 num_threads = 101;
  if (this->num_threads() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_threads());
  }

  switch (generator_case()) {
    // .ImageDatasetReaderParams image_dataset_reader_params = 1;
    case kImageDatasetReaderParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *generator_.image_dataset_reader_params_);
      break;
    }
    // .SavedOutputReaderParams saved_output_reader_params = 2;
    case kSavedOutputReaderParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *generator_.saved_output_reader_params_);
      break;
    }
    // .DataBatchSamplerParams databatch_sampler_params = 3;
    case kDatabatchSamplerParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *generator_.databatch_sampler_params_);
      break;
    }
    // .gRPCDataBatchReaderParams grpc_databatch_reader_params = 4;
    case kGrpcDatabatchReaderParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *generator_.grpc_databatch_reader_params_);
      break;
    }
    // .PastingDataProviderParams pasting_data_provider_params = 5;
    case kPastingDataProviderParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *generator_.pasting_data_provider_params_);
      break;
    }
    case GENERATOR_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataBatchGeneratorParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataBatchGeneratorParams)
  GOOGLE_DCHECK_NE(&from, this);
  const DataBatchGeneratorParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataBatchGeneratorParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataBatchGeneratorParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataBatchGeneratorParams)
    MergeFrom(*source);
  }
}

void DataBatchGeneratorParams::MergeFrom(const DataBatchGeneratorParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataBatchGeneratorParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.databatch_size() != 0) {
    _internal_set_databatch_size(from._internal_databatch_size());
  }
  if (from.num_threads() != 0) {
    _internal_set_num_threads(from._internal_num_threads());
  }
  switch (from.generator_case()) {
    case kImageDatasetReaderParams: {
      _internal_mutable_image_dataset_reader_params()->::ImageDatasetReaderParams::MergeFrom(from._internal_image_dataset_reader_params());
      break;
    }
    case kSavedOutputReaderParams: {
      _internal_mutable_saved_output_reader_params()->::SavedOutputReaderParams::MergeFrom(from._internal_saved_output_reader_params());
      break;
    }
    case kDatabatchSamplerParams: {
      _internal_mutable_databatch_sampler_params()->::DataBatchSamplerParams::MergeFrom(from._internal_databatch_sampler_params());
      break;
    }
    case kGrpcDatabatchReaderParams: {
      _internal_mutable_grpc_databatch_reader_params()->::gRPCDataBatchReaderParams::MergeFrom(from._internal_grpc_databatch_reader_params());
      break;
    }
    case kPastingDataProviderParams: {
      _internal_mutable_pasting_data_provider_params()->::PastingDataProviderParams::MergeFrom(from._internal_pasting_data_provider_params());
      break;
    }
    case GENERATOR_NOT_SET: {
      break;
    }
  }
}

void DataBatchGeneratorParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataBatchGeneratorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataBatchGeneratorParams::CopyFrom(const DataBatchGeneratorParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataBatchGeneratorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataBatchGeneratorParams::IsInitialized() const {
  return true;
}

void DataBatchGeneratorParams::InternalSwap(DataBatchGeneratorParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataBatchGeneratorParams, num_threads_)
      + sizeof(DataBatchGeneratorParams::num_threads_)
      - PROTOBUF_FIELD_OFFSET(DataBatchGeneratorParams, databatch_size_)>(
          reinterpret_cast<char*>(&databatch_size_),
          reinterpret_cast<char*>(&other->databatch_size_));
  swap(generator_, other->generator_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataBatchGeneratorParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DatasetReaderParams::InitAsDefaultInstance() {
}
class DatasetReaderParams::_Internal {
 public:
};

DatasetReaderParams::DatasetReaderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DatasetReaderParams)
}
DatasetReaderParams::DatasetReaderParams(const DatasetReaderParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dataset().empty()) {
    dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dataset(),
      GetArena());
  }
  split_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_split().empty()) {
    split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_split(),
      GetArena());
  }
  ::memcpy(&shuffle_, &from.shuffle_,
    static_cast<size_t>(reinterpret_cast<char*>(&set_dataset_name_) -
    reinterpret_cast<char*>(&shuffle_)) + sizeof(set_dataset_name_));
  // @@protoc_insertion_point(copy_constructor:DatasetReaderParams)
}

void DatasetReaderParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base);
  dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  split_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shuffle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_dataset_name_) -
      reinterpret_cast<char*>(&shuffle_)) + sizeof(set_dataset_name_));
}

DatasetReaderParams::~DatasetReaderParams() {
  // @@protoc_insertion_point(destructor:DatasetReaderParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DatasetReaderParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dataset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  split_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DatasetReaderParams::ArenaDtor(void* object) {
  DatasetReaderParams* _this = reinterpret_cast< DatasetReaderParams* >(object);
  (void)_this;
}
void DatasetReaderParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DatasetReaderParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatasetReaderParams& DatasetReaderParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base);
  return *internal_default_instance();
}


void DatasetReaderParams::Clear() {
// @@protoc_insertion_point(message_clear_start:DatasetReaderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  split_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&shuffle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_dataset_name_) -
      reinterpret_cast<char*>(&shuffle_)) + sizeof(set_dataset_name_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetReaderParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dataset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dataset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DatasetReaderParams.dataset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string split = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_split();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DatasetReaderParams.split"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shuffle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shuffle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool continuous = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          continuous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool strip_empty = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          strip_empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool set_dataset_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          set_dataset_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DatasetReaderParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatasetReaderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataset = 1;
  if (this->dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset().data(), static_cast<int>(this->_internal_dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DatasetReaderParams.dataset");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dataset(), target);
  }

  // string split = 2;
  if (this->split().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_split().data(), static_cast<int>(this->_internal_split().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DatasetReaderParams.split");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_split(), target);
  }

  // bool shuffle = 3;
  if (this->shuffle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_shuffle(), target);
  }

  // bool continuous = 4;
  if (this->continuous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_continuous(), target);
  }

  // bool strip_empty = 5;
  if (this->strip_empty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_strip_empty(), target);
  }

  // bool set_dataset_name = 6;
  if (this->set_dataset_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_set_dataset_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatasetReaderParams)
  return target;
}

size_t DatasetReaderParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatasetReaderParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset = 1;
  if (this->dataset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset());
  }

  // string split = 2;
  if (this->split().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_split());
  }

  // bool shuffle = 3;
  if (this->shuffle() != 0) {
    total_size += 1 + 1;
  }

  // bool continuous = 4;
  if (this->continuous() != 0) {
    total_size += 1 + 1;
  }

  // bool strip_empty = 5;
  if (this->strip_empty() != 0) {
    total_size += 1 + 1;
  }

  // bool set_dataset_name = 6;
  if (this->set_dataset_name() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatasetReaderParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DatasetReaderParams)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetReaderParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DatasetReaderParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DatasetReaderParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DatasetReaderParams)
    MergeFrom(*source);
  }
}

void DatasetReaderParams::MergeFrom(const DatasetReaderParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DatasetReaderParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dataset().size() > 0) {
    _internal_set_dataset(from._internal_dataset());
  }
  if (from.split().size() > 0) {
    _internal_set_split(from._internal_split());
  }
  if (from.shuffle() != 0) {
    _internal_set_shuffle(from._internal_shuffle());
  }
  if (from.continuous() != 0) {
    _internal_set_continuous(from._internal_continuous());
  }
  if (from.strip_empty() != 0) {
    _internal_set_strip_empty(from._internal_strip_empty());
  }
  if (from.set_dataset_name() != 0) {
    _internal_set_set_dataset_name(from._internal_set_dataset_name());
  }
}

void DatasetReaderParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DatasetReaderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetReaderParams::CopyFrom(const DatasetReaderParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatasetReaderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetReaderParams::IsInitialized() const {
  return true;
}

void DatasetReaderParams::InternalSwap(DatasetReaderParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dataset_.Swap(&other->dataset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  split_.Swap(&other->split_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetReaderParams, set_dataset_name_)
      + sizeof(DatasetReaderParams::set_dataset_name_)
      - PROTOBUF_FIELD_OFFSET(DatasetReaderParams, shuffle_)>(
          reinterpret_cast<char*>(&shuffle_),
          reinterpret_cast<char*>(&other->shuffle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetReaderParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageDatasetReaderParams::InitAsDefaultInstance() {
  ::_ImageDatasetReaderParams_default_instance_._instance.get_mutable()->dataset_reader_params_ = const_cast< ::DatasetReaderParams*>(
      ::DatasetReaderParams::internal_default_instance());
}
class ImageDatasetReaderParams::_Internal {
 public:
  static const ::DatasetReaderParams& dataset_reader_params(const ImageDatasetReaderParams* msg);
};

const ::DatasetReaderParams&
ImageDatasetReaderParams::_Internal::dataset_reader_params(const ImageDatasetReaderParams* msg) {
  return *msg->dataset_reader_params_;
}
ImageDatasetReaderParams::ImageDatasetReaderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ImageDatasetReaderParams)
}
ImageDatasetReaderParams::ImageDatasetReaderParams(const ImageDatasetReaderParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dataset_reader_params()) {
    dataset_reader_params_ = new ::DatasetReaderParams(*from.dataset_reader_params_);
  } else {
    dataset_reader_params_ = nullptr;
  }
  fetch_from_urls_ = from.fetch_from_urls_;
  // @@protoc_insertion_point(copy_constructor:ImageDatasetReaderParams)
}

void ImageDatasetReaderParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageDatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base);
  ::memset(&dataset_reader_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fetch_from_urls_) -
      reinterpret_cast<char*>(&dataset_reader_params_)) + sizeof(fetch_from_urls_));
}

ImageDatasetReaderParams::~ImageDatasetReaderParams() {
  // @@protoc_insertion_point(destructor:ImageDatasetReaderParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageDatasetReaderParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dataset_reader_params_;
}

void ImageDatasetReaderParams::ArenaDtor(void* object) {
  ImageDatasetReaderParams* _this = reinterpret_cast< ImageDatasetReaderParams* >(object);
  (void)_this;
}
void ImageDatasetReaderParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageDatasetReaderParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageDatasetReaderParams& ImageDatasetReaderParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageDatasetReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base);
  return *internal_default_instance();
}


void ImageDatasetReaderParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageDatasetReaderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && dataset_reader_params_ != nullptr) {
    delete dataset_reader_params_;
  }
  dataset_reader_params_ = nullptr;
  fetch_from_urls_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageDatasetReaderParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DatasetReaderParams dataset_reader_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset_reader_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fetch_from_urls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fetch_from_urls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageDatasetReaderParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageDatasetReaderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DatasetReaderParams dataset_reader_params = 1;
  if (this->has_dataset_reader_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dataset_reader_params(this), target, stream);
  }

  // bool fetch_from_urls = 2;
  if (this->fetch_from_urls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_fetch_from_urls(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageDatasetReaderParams)
  return target;
}

size_t ImageDatasetReaderParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageDatasetReaderParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DatasetReaderParams dataset_reader_params = 1;
  if (this->has_dataset_reader_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dataset_reader_params_);
  }

  // bool fetch_from_urls = 2;
  if (this->fetch_from_urls() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageDatasetReaderParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageDatasetReaderParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageDatasetReaderParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageDatasetReaderParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageDatasetReaderParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageDatasetReaderParams)
    MergeFrom(*source);
  }
}

void ImageDatasetReaderParams::MergeFrom(const ImageDatasetReaderParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageDatasetReaderParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dataset_reader_params()) {
    _internal_mutable_dataset_reader_params()->::DatasetReaderParams::MergeFrom(from._internal_dataset_reader_params());
  }
  if (from.fetch_from_urls() != 0) {
    _internal_set_fetch_from_urls(from._internal_fetch_from_urls());
  }
}

void ImageDatasetReaderParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageDatasetReaderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDatasetReaderParams::CopyFrom(const ImageDatasetReaderParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageDatasetReaderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDatasetReaderParams::IsInitialized() const {
  return true;
}

void ImageDatasetReaderParams::InternalSwap(ImageDatasetReaderParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageDatasetReaderParams, fetch_from_urls_)
      + sizeof(ImageDatasetReaderParams::fetch_from_urls_)
      - PROTOBUF_FIELD_OFFSET(ImageDatasetReaderParams, dataset_reader_params_)>(
          reinterpret_cast<char*>(&dataset_reader_params_),
          reinterpret_cast<char*>(&other->dataset_reader_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageDatasetReaderParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SavedOutputReaderParams::InitAsDefaultInstance() {
  ::_SavedOutputReaderParams_default_instance_._instance.get_mutable()->dataset_reader_params_ = const_cast< ::DatasetReaderParams*>(
      ::DatasetReaderParams::internal_default_instance());
}
class SavedOutputReaderParams::_Internal {
 public:
  static const ::DatasetReaderParams& dataset_reader_params(const SavedOutputReaderParams* msg);
};

const ::DatasetReaderParams&
SavedOutputReaderParams::_Internal::dataset_reader_params(const SavedOutputReaderParams* msg) {
  return *msg->dataset_reader_params_;
}
SavedOutputReaderParams::SavedOutputReaderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SavedOutputReaderParams)
}
SavedOutputReaderParams::SavedOutputReaderParams(const SavedOutputReaderParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_layer_name().empty()) {
    layer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_layer_name(),
      GetArena());
  }
  if (from._internal_has_dataset_reader_params()) {
    dataset_reader_params_ = new ::DatasetReaderParams(*from.dataset_reader_params_);
  } else {
    dataset_reader_params_ = nullptr;
  }
  ::memcpy(&saved_output_eid_, &from.saved_output_eid_,
    static_cast<size_t>(reinterpret_cast<char*>(&load_orig_databatch_) -
    reinterpret_cast<char*>(&saved_output_eid_)) + sizeof(load_orig_databatch_));
  // @@protoc_insertion_point(copy_constructor:SavedOutputReaderParams)
}

void SavedOutputReaderParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SavedOutputReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dataset_reader_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&load_orig_databatch_) -
      reinterpret_cast<char*>(&dataset_reader_params_)) + sizeof(load_orig_databatch_));
}

SavedOutputReaderParams::~SavedOutputReaderParams() {
  // @@protoc_insertion_point(destructor:SavedOutputReaderParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SavedOutputReaderParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  layer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dataset_reader_params_;
}

void SavedOutputReaderParams::ArenaDtor(void* object) {
  SavedOutputReaderParams* _this = reinterpret_cast< SavedOutputReaderParams* >(object);
  (void)_this;
}
void SavedOutputReaderParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavedOutputReaderParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SavedOutputReaderParams& SavedOutputReaderParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SavedOutputReaderParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base);
  return *internal_default_instance();
}


void SavedOutputReaderParams::Clear() {
// @@protoc_insertion_point(message_clear_start:SavedOutputReaderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && dataset_reader_params_ != nullptr) {
    delete dataset_reader_params_;
  }
  dataset_reader_params_ = nullptr;
  ::memset(&saved_output_eid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&load_orig_databatch_) -
      reinterpret_cast<char*>(&saved_output_eid_)) + sizeof(load_orig_databatch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavedOutputReaderParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DatasetReaderParams dataset_reader_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset_reader_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 saved_output_eid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          saved_output_eid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string layer_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_layer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SavedOutputReaderParams.layer_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool load_orig_databatch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          load_orig_databatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SavedOutputReaderParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SavedOutputReaderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DatasetReaderParams dataset_reader_params = 1;
  if (this->has_dataset_reader_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dataset_reader_params(this), target, stream);
  }

  // int32 saved_output_eid = 2;
  if (this->saved_output_eid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_saved_output_eid(), target);
  }

  // string layer_name = 3;
  if (this->layer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_layer_name().data(), static_cast<int>(this->_internal_layer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SavedOutputReaderParams.layer_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_layer_name(), target);
  }

  // bool load_orig_databatch = 4;
  if (this->load_orig_databatch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_load_orig_databatch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SavedOutputReaderParams)
  return target;
}

size_t SavedOutputReaderParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SavedOutputReaderParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string layer_name = 3;
  if (this->layer_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_layer_name());
  }

  // .DatasetReaderParams dataset_reader_params = 1;
  if (this->has_dataset_reader_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dataset_reader_params_);
  }

  // int32 saved_output_eid = 2;
  if (this->saved_output_eid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_saved_output_eid());
  }

  // bool load_orig_databatch = 4;
  if (this->load_orig_databatch() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavedOutputReaderParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SavedOutputReaderParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SavedOutputReaderParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SavedOutputReaderParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SavedOutputReaderParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SavedOutputReaderParams)
    MergeFrom(*source);
  }
}

void SavedOutputReaderParams::MergeFrom(const SavedOutputReaderParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SavedOutputReaderParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.layer_name().size() > 0) {
    _internal_set_layer_name(from._internal_layer_name());
  }
  if (from.has_dataset_reader_params()) {
    _internal_mutable_dataset_reader_params()->::DatasetReaderParams::MergeFrom(from._internal_dataset_reader_params());
  }
  if (from.saved_output_eid() != 0) {
    _internal_set_saved_output_eid(from._internal_saved_output_eid());
  }
  if (from.load_orig_databatch() != 0) {
    _internal_set_load_orig_databatch(from._internal_load_orig_databatch());
  }
}

void SavedOutputReaderParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SavedOutputReaderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedOutputReaderParams::CopyFrom(const SavedOutputReaderParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SavedOutputReaderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedOutputReaderParams::IsInitialized() const {
  return true;
}

void SavedOutputReaderParams::InternalSwap(SavedOutputReaderParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  layer_name_.Swap(&other->layer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SavedOutputReaderParams, load_orig_databatch_)
      + sizeof(SavedOutputReaderParams::load_orig_databatch_)
      - PROTOBUF_FIELD_OFFSET(SavedOutputReaderParams, dataset_reader_params_)>(
          reinterpret_cast<char*>(&dataset_reader_params_),
          reinterpret_cast<char*>(&other->dataset_reader_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedOutputReaderParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataBatchSamplerParams::InitAsDefaultInstance() {
}
class DataBatchSamplerParams::_Internal {
 public:
};

void DataBatchSamplerParams::clear_label_mapper() {
  label_mapper_.Clear();
}
DataBatchSamplerParams::DataBatchSamplerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  databatch_generator_params_(arena),
  sample_rate_(arena),
  label_mapper_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DataBatchSamplerParams)
}
DataBatchSamplerParams::DataBatchSamplerParams(const DataBatchSamplerParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      databatch_generator_params_(from.databatch_generator_params_),
      sample_rate_(from.sample_rate_),
      label_mapper_(from.label_mapper_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deterministic_ = from.deterministic_;
  // @@protoc_insertion_point(copy_constructor:DataBatchSamplerParams)
}

void DataBatchSamplerParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataBatchGeneratorParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base);
  deterministic_ = false;
}

DataBatchSamplerParams::~DataBatchSamplerParams() {
  // @@protoc_insertion_point(destructor:DataBatchSamplerParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataBatchSamplerParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataBatchSamplerParams::ArenaDtor(void* object) {
  DataBatchSamplerParams* _this = reinterpret_cast< DataBatchSamplerParams* >(object);
  (void)_this;
}
void DataBatchSamplerParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataBatchSamplerParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataBatchSamplerParams& DataBatchSamplerParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataBatchGeneratorParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base);
  return *internal_default_instance();
}


void DataBatchSamplerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:DataBatchSamplerParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  databatch_generator_params_.Clear();
  sample_rate_.Clear();
  label_mapper_.Clear();
  deterministic_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataBatchSamplerParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DataBatchGeneratorParams databatch_generator_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_databatch_generator_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool deterministic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          deterministic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float sample_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sample_rate(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_sample_rate(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .LabelMapper label_mapper = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_label_mapper(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataBatchSamplerParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataBatchSamplerParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DataBatchGeneratorParams databatch_generator_params = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_databatch_generator_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_databatch_generator_params(i), target, stream);
  }

  // bool deterministic = 2;
  if (this->deterministic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_deterministic(), target);
  }

  // repeated float sample_rate = 3;
  if (this->_internal_sample_rate_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_sample_rate(), target);
  }

  // repeated .LabelMapper label_mapper = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_label_mapper_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_label_mapper(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataBatchSamplerParams)
  return target;
}

size_t DataBatchSamplerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataBatchSamplerParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DataBatchGeneratorParams databatch_generator_params = 1;
  total_size += 1UL * this->_internal_databatch_generator_params_size();
  for (const auto& msg : this->databatch_generator_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float sample_rate = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sample_rate_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sample_rate_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .LabelMapper label_mapper = 4;
  total_size += 1UL * this->_internal_label_mapper_size();
  for (const auto& msg : this->label_mapper_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool deterministic = 2;
  if (this->deterministic() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataBatchSamplerParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataBatchSamplerParams)
  GOOGLE_DCHECK_NE(&from, this);
  const DataBatchSamplerParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataBatchSamplerParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataBatchSamplerParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataBatchSamplerParams)
    MergeFrom(*source);
  }
}

void DataBatchSamplerParams::MergeFrom(const DataBatchSamplerParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataBatchSamplerParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  databatch_generator_params_.MergeFrom(from.databatch_generator_params_);
  sample_rate_.MergeFrom(from.sample_rate_);
  label_mapper_.MergeFrom(from.label_mapper_);
  if (from.deterministic() != 0) {
    _internal_set_deterministic(from._internal_deterministic());
  }
}

void DataBatchSamplerParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataBatchSamplerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataBatchSamplerParams::CopyFrom(const DataBatchSamplerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataBatchSamplerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataBatchSamplerParams::IsInitialized() const {
  return true;
}

void DataBatchSamplerParams::InternalSwap(DataBatchSamplerParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  databatch_generator_params_.InternalSwap(&other->databatch_generator_params_);
  sample_rate_.InternalSwap(&other->sample_rate_);
  label_mapper_.InternalSwap(&other->label_mapper_);
  swap(deterministic_, other->deterministic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataBatchSamplerParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void gRPCDataBatchReaderParams::InitAsDefaultInstance() {
  ::_gRPCDataBatchReaderParams_default_instance_._instance.get_mutable()->databatch_generator_params_ = const_cast< ::DataBatchGeneratorParams*>(
      ::DataBatchGeneratorParams::internal_default_instance());
}
class gRPCDataBatchReaderParams::_Internal {
 public:
  static const ::DataBatchGeneratorParams& databatch_generator_params(const gRPCDataBatchReaderParams* msg);
};

const ::DataBatchGeneratorParams&
gRPCDataBatchReaderParams::_Internal::databatch_generator_params(const gRPCDataBatchReaderParams* msg) {
  return *msg->databatch_generator_params_;
}
gRPCDataBatchReaderParams::gRPCDataBatchReaderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gRPCDataBatchReaderParams)
}
gRPCDataBatchReaderParams::gRPCDataBatchReaderParams(const gRPCDataBatchReaderParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_databatch_generator_params()) {
    databatch_generator_params_ = new ::DataBatchGeneratorParams(*from.databatch_generator_params_);
  } else {
    databatch_generator_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gRPCDataBatchReaderParams)
}

void gRPCDataBatchReaderParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataBatchGeneratorParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base);
  databatch_generator_params_ = nullptr;
}

gRPCDataBatchReaderParams::~gRPCDataBatchReaderParams() {
  // @@protoc_insertion_point(destructor:gRPCDataBatchReaderParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void gRPCDataBatchReaderParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete databatch_generator_params_;
}

void gRPCDataBatchReaderParams::ArenaDtor(void* object) {
  gRPCDataBatchReaderParams* _this = reinterpret_cast< gRPCDataBatchReaderParams* >(object);
  (void)_this;
}
void gRPCDataBatchReaderParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void gRPCDataBatchReaderParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const gRPCDataBatchReaderParams& gRPCDataBatchReaderParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataBatchGeneratorParams_proto_2futils_2fdatabatch_5fgenerator_2eproto.base);
  return *internal_default_instance();
}


void gRPCDataBatchReaderParams::Clear() {
// @@protoc_insertion_point(message_clear_start:gRPCDataBatchReaderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && databatch_generator_params_ != nullptr) {
    delete databatch_generator_params_;
  }
  databatch_generator_params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* gRPCDataBatchReaderParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DataBatchGeneratorParams databatch_generator_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_databatch_generator_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* gRPCDataBatchReaderParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gRPCDataBatchReaderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DataBatchGeneratorParams databatch_generator_params = 1;
  if (this->has_databatch_generator_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::databatch_generator_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gRPCDataBatchReaderParams)
  return target;
}

size_t gRPCDataBatchReaderParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gRPCDataBatchReaderParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DataBatchGeneratorParams databatch_generator_params = 1;
  if (this->has_databatch_generator_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *databatch_generator_params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gRPCDataBatchReaderParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gRPCDataBatchReaderParams)
  GOOGLE_DCHECK_NE(&from, this);
  const gRPCDataBatchReaderParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<gRPCDataBatchReaderParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gRPCDataBatchReaderParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gRPCDataBatchReaderParams)
    MergeFrom(*source);
  }
}

void gRPCDataBatchReaderParams::MergeFrom(const gRPCDataBatchReaderParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gRPCDataBatchReaderParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_databatch_generator_params()) {
    _internal_mutable_databatch_generator_params()->::DataBatchGeneratorParams::MergeFrom(from._internal_databatch_generator_params());
  }
}

void gRPCDataBatchReaderParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gRPCDataBatchReaderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gRPCDataBatchReaderParams::CopyFrom(const gRPCDataBatchReaderParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gRPCDataBatchReaderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gRPCDataBatchReaderParams::IsInitialized() const {
  return true;
}

void gRPCDataBatchReaderParams::InternalSwap(gRPCDataBatchReaderParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(databatch_generator_params_, other->databatch_generator_params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata gRPCDataBatchReaderParams::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DataBatchGeneratorParams* Arena::CreateMaybeMessage< ::DataBatchGeneratorParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataBatchGeneratorParams >(arena);
}
template<> PROTOBUF_NOINLINE ::DatasetReaderParams* Arena::CreateMaybeMessage< ::DatasetReaderParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatasetReaderParams >(arena);
}
template<> PROTOBUF_NOINLINE ::ImageDatasetReaderParams* Arena::CreateMaybeMessage< ::ImageDatasetReaderParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ImageDatasetReaderParams >(arena);
}
template<> PROTOBUF_NOINLINE ::SavedOutputReaderParams* Arena::CreateMaybeMessage< ::SavedOutputReaderParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SavedOutputReaderParams >(arena);
}
template<> PROTOBUF_NOINLINE ::DataBatchSamplerParams* Arena::CreateMaybeMessage< ::DataBatchSamplerParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataBatchSamplerParams >(arena);
}
template<> PROTOBUF_NOINLINE ::gRPCDataBatchReaderParams* Arena::CreateMaybeMessage< ::gRPCDataBatchReaderParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gRPCDataBatchReaderParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
