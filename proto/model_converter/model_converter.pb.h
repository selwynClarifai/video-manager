// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/model_converter/model_converter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fmodel_5fconverter_2fmodel_5fconverter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fmodel_5fconverter_2fmodel_5fconverter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/clarifai/model_fetching/resources.pb.h"
#include "proto/utils/request_meta.pb.h"
#include "proto/spire/spire.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fmodel_5fconverter_2fmodel_5fconverter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fmodel_5fconverter_2fmodel_5fconverter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fmodel_5fconverter_2fmodel_5fconverter_2eproto;
class ModelConverterConvertModelRequest;
class ModelConverterConvertModelRequestDefaultTypeInternal;
extern ModelConverterConvertModelRequestDefaultTypeInternal _ModelConverterConvertModelRequest_default_instance_;
class ModelConverterConvertModelResponse;
class ModelConverterConvertModelResponseDefaultTypeInternal;
extern ModelConverterConvertModelResponseDefaultTypeInternal _ModelConverterConvertModelResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ModelConverterConvertModelRequest* Arena::CreateMaybeMessage<::ModelConverterConvertModelRequest>(Arena*);
template<> ::ModelConverterConvertModelResponse* Arena::CreateMaybeMessage<::ModelConverterConvertModelResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ModelConverterConvertModelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ModelConverterConvertModelRequest) */ {
 public:
  inline ModelConverterConvertModelRequest() : ModelConverterConvertModelRequest(nullptr) {}
  virtual ~ModelConverterConvertModelRequest();

  ModelConverterConvertModelRequest(const ModelConverterConvertModelRequest& from);
  ModelConverterConvertModelRequest(ModelConverterConvertModelRequest&& from) noexcept
    : ModelConverterConvertModelRequest() {
    *this = ::std::move(from);
  }

  inline ModelConverterConvertModelRequest& operator=(const ModelConverterConvertModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelConverterConvertModelRequest& operator=(ModelConverterConvertModelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelConverterConvertModelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelConverterConvertModelRequest* internal_default_instance() {
    return reinterpret_cast<const ModelConverterConvertModelRequest*>(
               &_ModelConverterConvertModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelConverterConvertModelRequest& a, ModelConverterConvertModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelConverterConvertModelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelConverterConvertModelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelConverterConvertModelRequest* New() const final {
    return CreateMaybeMessage<ModelConverterConvertModelRequest>(nullptr);
  }

  ModelConverterConvertModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelConverterConvertModelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelConverterConvertModelRequest& from);
  void MergeFrom(const ModelConverterConvertModelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelConverterConvertModelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ModelConverterConvertModelRequest";
  }
  protected:
  explicit ModelConverterConvertModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmodel_5fconverter_2fmodel_5fconverter_2eproto);
    return ::descriptor_table_proto_2fmodel_5fconverter_2fmodel_5fconverter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
    kModelInfoFieldNumber = 2,
  };
  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .clarifai.model_fetching.ModelInfo model_info = 2;
  bool has_model_info() const;
  private:
  bool _internal_has_model_info() const;
  public:
  void clear_model_info();
  const ::clarifai::model_fetching::ModelInfo& model_info() const;
  ::clarifai::model_fetching::ModelInfo* release_model_info();
  ::clarifai::model_fetching::ModelInfo* mutable_model_info();
  void set_allocated_model_info(::clarifai::model_fetching::ModelInfo* model_info);
  private:
  const ::clarifai::model_fetching::ModelInfo& _internal_model_info() const;
  ::clarifai::model_fetching::ModelInfo* _internal_mutable_model_info();
  public:
  void unsafe_arena_set_allocated_model_info(
      ::clarifai::model_fetching::ModelInfo* model_info);
  ::clarifai::model_fetching::ModelInfo* unsafe_arena_release_model_info();

  // @@protoc_insertion_point(class_scope:ModelConverterConvertModelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::RequestMeta* meta_;
  ::clarifai::model_fetching::ModelInfo* model_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmodel_5fconverter_2fmodel_5fconverter_2eproto;
};
// -------------------------------------------------------------------

class ModelConverterConvertModelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ModelConverterConvertModelResponse) */ {
 public:
  inline ModelConverterConvertModelResponse() : ModelConverterConvertModelResponse(nullptr) {}
  virtual ~ModelConverterConvertModelResponse();

  ModelConverterConvertModelResponse(const ModelConverterConvertModelResponse& from);
  ModelConverterConvertModelResponse(ModelConverterConvertModelResponse&& from) noexcept
    : ModelConverterConvertModelResponse() {
    *this = ::std::move(from);
  }

  inline ModelConverterConvertModelResponse& operator=(const ModelConverterConvertModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelConverterConvertModelResponse& operator=(ModelConverterConvertModelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelConverterConvertModelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelConverterConvertModelResponse* internal_default_instance() {
    return reinterpret_cast<const ModelConverterConvertModelResponse*>(
               &_ModelConverterConvertModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelConverterConvertModelResponse& a, ModelConverterConvertModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelConverterConvertModelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelConverterConvertModelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelConverterConvertModelResponse* New() const final {
    return CreateMaybeMessage<ModelConverterConvertModelResponse>(nullptr);
  }

  ModelConverterConvertModelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelConverterConvertModelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelConverterConvertModelResponse& from);
  void MergeFrom(const ModelConverterConvertModelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelConverterConvertModelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ModelConverterConvertModelResponse";
  }
  protected:
  explicit ModelConverterConvertModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmodel_5fconverter_2fmodel_5fconverter_2eproto);
    return ::descriptor_table_proto_2fmodel_5fconverter_2fmodel_5fconverter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kConfigFieldNumber = 2,
  };
  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // .SpireConfig config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::SpireConfig& config() const;
  ::SpireConfig* release_config();
  ::SpireConfig* mutable_config();
  void set_allocated_config(::SpireConfig* config);
  private:
  const ::SpireConfig& _internal_config() const;
  ::SpireConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::SpireConfig* config);
  ::SpireConfig* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:ModelConverterConvertModelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ResponseStatus* status_;
  ::SpireConfig* config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmodel_5fconverter_2fmodel_5fconverter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelConverterConvertModelRequest

// .RequestMeta meta = 1;
inline bool ModelConverterConvertModelRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool ModelConverterConvertModelRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& ModelConverterConvertModelRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& ModelConverterConvertModelRequest::meta() const {
  // @@protoc_insertion_point(field_get:ModelConverterConvertModelRequest.meta)
  return _internal_meta();
}
inline void ModelConverterConvertModelRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ModelConverterConvertModelRequest.meta)
}
inline ::RequestMeta* ModelConverterConvertModelRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* ModelConverterConvertModelRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:ModelConverterConvertModelRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* ModelConverterConvertModelRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* ModelConverterConvertModelRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:ModelConverterConvertModelRequest.meta)
  return _internal_mutable_meta();
}
inline void ModelConverterConvertModelRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:ModelConverterConvertModelRequest.meta)
}

// .clarifai.model_fetching.ModelInfo model_info = 2;
inline bool ModelConverterConvertModelRequest::_internal_has_model_info() const {
  return this != internal_default_instance() && model_info_ != nullptr;
}
inline bool ModelConverterConvertModelRequest::has_model_info() const {
  return _internal_has_model_info();
}
inline const ::clarifai::model_fetching::ModelInfo& ModelConverterConvertModelRequest::_internal_model_info() const {
  const ::clarifai::model_fetching::ModelInfo* p = model_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::model_fetching::ModelInfo*>(
      &::clarifai::model_fetching::_ModelInfo_default_instance_);
}
inline const ::clarifai::model_fetching::ModelInfo& ModelConverterConvertModelRequest::model_info() const {
  // @@protoc_insertion_point(field_get:ModelConverterConvertModelRequest.model_info)
  return _internal_model_info();
}
inline void ModelConverterConvertModelRequest::unsafe_arena_set_allocated_model_info(
    ::clarifai::model_fetching::ModelInfo* model_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_info_);
  }
  model_info_ = model_info;
  if (model_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ModelConverterConvertModelRequest.model_info)
}
inline ::clarifai::model_fetching::ModelInfo* ModelConverterConvertModelRequest::release_model_info() {
  
  ::clarifai::model_fetching::ModelInfo* temp = model_info_;
  model_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::model_fetching::ModelInfo* ModelConverterConvertModelRequest::unsafe_arena_release_model_info() {
  // @@protoc_insertion_point(field_release:ModelConverterConvertModelRequest.model_info)
  
  ::clarifai::model_fetching::ModelInfo* temp = model_info_;
  model_info_ = nullptr;
  return temp;
}
inline ::clarifai::model_fetching::ModelInfo* ModelConverterConvertModelRequest::_internal_mutable_model_info() {
  
  if (model_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::model_fetching::ModelInfo>(GetArena());
    model_info_ = p;
  }
  return model_info_;
}
inline ::clarifai::model_fetching::ModelInfo* ModelConverterConvertModelRequest::mutable_model_info() {
  // @@protoc_insertion_point(field_mutable:ModelConverterConvertModelRequest.model_info)
  return _internal_mutable_model_info();
}
inline void ModelConverterConvertModelRequest::set_allocated_model_info(::clarifai::model_fetching::ModelInfo* model_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_info_);
  }
  if (model_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_info)->GetArena();
    if (message_arena != submessage_arena) {
      model_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_info, submessage_arena);
    }
    
  } else {
    
  }
  model_info_ = model_info;
  // @@protoc_insertion_point(field_set_allocated:ModelConverterConvertModelRequest.model_info)
}

// -------------------------------------------------------------------

// ModelConverterConvertModelResponse

// .ResponseStatus status = 1;
inline bool ModelConverterConvertModelResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ModelConverterConvertModelResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& ModelConverterConvertModelResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& ModelConverterConvertModelResponse::status() const {
  // @@protoc_insertion_point(field_get:ModelConverterConvertModelResponse.status)
  return _internal_status();
}
inline void ModelConverterConvertModelResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ModelConverterConvertModelResponse.status)
}
inline ::ResponseStatus* ModelConverterConvertModelResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* ModelConverterConvertModelResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:ModelConverterConvertModelResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* ModelConverterConvertModelResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* ModelConverterConvertModelResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:ModelConverterConvertModelResponse.status)
  return _internal_mutable_status();
}
inline void ModelConverterConvertModelResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:ModelConverterConvertModelResponse.status)
}

// .SpireConfig config = 2;
inline bool ModelConverterConvertModelResponse::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool ModelConverterConvertModelResponse::has_config() const {
  return _internal_has_config();
}
inline const ::SpireConfig& ModelConverterConvertModelResponse::_internal_config() const {
  const ::SpireConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SpireConfig*>(
      &::_SpireConfig_default_instance_);
}
inline const ::SpireConfig& ModelConverterConvertModelResponse::config() const {
  // @@protoc_insertion_point(field_get:ModelConverterConvertModelResponse.config)
  return _internal_config();
}
inline void ModelConverterConvertModelResponse::unsafe_arena_set_allocated_config(
    ::SpireConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ModelConverterConvertModelResponse.config)
}
inline ::SpireConfig* ModelConverterConvertModelResponse::release_config() {
  
  ::SpireConfig* temp = config_;
  config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SpireConfig* ModelConverterConvertModelResponse::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:ModelConverterConvertModelResponse.config)
  
  ::SpireConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::SpireConfig* ModelConverterConvertModelResponse::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::SpireConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::SpireConfig* ModelConverterConvertModelResponse::mutable_config() {
  // @@protoc_insertion_point(field_mutable:ModelConverterConvertModelResponse.config)
  return _internal_mutable_config();
}
inline void ModelConverterConvertModelResponse::set_allocated_config(::SpireConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config)->GetArena();
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:ModelConverterConvertModelResponse.config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fmodel_5fconverter_2fmodel_5fconverter_2eproto
