// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/spire/spire.proto

#include "proto/spire/spire.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPUResources_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdatabatch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fexample_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<18> scc_info_DataExample_proto_2futils_2fdata_5fexample_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fcheckpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadCheckpointScope_proto_2futils_2fcheckpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Replicas_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SpireConfig_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireConfig_CpuResourcesEntry_DoNotUse_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireConfig_HeadsEntry_DoNotUse_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireConfig_ReplicasEntry_DoNotUse_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpireMeta_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2ftag_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tag_proto_2futils_2ftag_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fvocab_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vocab_proto_2futils_2fvocab_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
class FaceDetectConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceDetectConfig> _instance;
} _FaceDetectConfig_default_instance_;
class BBoxCropConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BBoxCropConfig> _instance;
} _BBoxCropConfig_default_instance_;
class MultiHeadConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiHeadConfig> _instance;
} _MultiHeadConfig_default_instance_;
class SpireConfig_HeadsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireConfig_HeadsEntry_DoNotUse> _instance;
} _SpireConfig_HeadsEntry_DoNotUse_default_instance_;
class SpireConfig_CpuResourcesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireConfig_CpuResourcesEntry_DoNotUse> _instance;
} _SpireConfig_CpuResourcesEntry_DoNotUse_default_instance_;
class SpireConfig_ReplicasEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireConfig_ReplicasEntry_DoNotUse> _instance;
} _SpireConfig_ReplicasEntry_DoNotUse_default_instance_;
class SpireConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireConfig> _instance;
} _SpireConfig_default_instance_;
class ReplicasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Replicas> _instance;
} _Replicas_default_instance_;
class CPUResourcesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPUResources> _instance;
} _CPUResources_default_instance_;
class SpireMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireMeta> _instance;
} _SpireMeta_default_instance_;
class SpireGetConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireGetConfigRequest> _instance;
} _SpireGetConfigRequest_default_instance_;
class SpireGetConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireGetConfigResponse> _instance;
} _SpireGetConfigResponse_default_instance_;
class SpireSetConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireSetConfigRequest> _instance;
} _SpireSetConfigRequest_default_instance_;
class SpireSetConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireSetConfigResponse> _instance;
} _SpireSetConfigResponse_default_instance_;
class SpireGetStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireGetStateRequest> _instance;
} _SpireGetStateRequest_default_instance_;
class SpireGetStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireGetStateResponse> _instance;
} _SpireGetStateResponse_default_instance_;
class SpireMaybeJITRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireMaybeJITRequest> _instance;
} _SpireMaybeJITRequest_default_instance_;
class SpireMaybeJITResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireMaybeJITResponse> _instance;
} _SpireMaybeJITResponse_default_instance_;
class SpireStopServingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireStopServingRequest> _instance;
} _SpireStopServingRequest_default_instance_;
class SpireStopServingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireStopServingResponse> _instance;
} _SpireStopServingResponse_default_instance_;
class SpireEmbedTagRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireEmbedTagRequest> _instance;
} _SpireEmbedTagRequest_default_instance_;
class SpireEmbedTagResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireEmbedTagResponse> _instance;
} _SpireEmbedTagResponse_default_instance_;
class SpireSavedOutputRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireSavedOutputRequest> _instance;
} _SpireSavedOutputRequest_default_instance_;
class SpireSavedOutputResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireSavedOutputResponse> _instance;
} _SpireSavedOutputResponse_default_instance_;
class SpireFaceDetectEmbedTagRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireFaceDetectEmbedTagRequest> _instance;
} _SpireFaceDetectEmbedTagRequest_default_instance_;
class SpireFaceDetectEmbedTagResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireFaceDetectEmbedTagResponse> _instance;
} _SpireFaceDetectEmbedTagResponse_default_instance_;
class SpireInstanceSegmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireInstanceSegmentRequest> _instance;
} _SpireInstanceSegmentRequest_default_instance_;
class SpireInstanceSegmentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireInstanceSegmentResponse> _instance;
} _SpireInstanceSegmentResponse_default_instance_;
class SpireDetectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireDetectRequest> _instance;
} _SpireDetectRequest_default_instance_;
class SpireTrackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireTrackRequest> _instance;
} _SpireTrackRequest_default_instance_;
class SpireDetectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireDetectResponse> _instance;
} _SpireDetectResponse_default_instance_;
class SpireTrackResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireTrackResponse> _instance;
} _SpireTrackResponse_default_instance_;
class SpireDetectEmbedTagRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireDetectEmbedTagRequest> _instance;
} _SpireDetectEmbedTagRequest_default_instance_;
class SpireDetectEmbedTagResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireDetectEmbedTagResponse> _instance;
} _SpireDetectEmbedTagResponse_default_instance_;
static void InitDefaultsscc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BBoxCropConfig_default_instance_;
    new (ptr) ::BBoxCropConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BBoxCropConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto}, {}};

static void InitDefaultsscc_info_CPUResources_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CPUResources_default_instance_;
    new (ptr) ::CPUResources();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPUResources::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPUResources_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPUResources_proto_2fspire_2fspire_2eproto}, {}};

static void InitDefaultsscc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FaceDetectConfig_default_instance_;
    new (ptr) ::FaceDetectConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FaceDetectConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto}, {
      &scc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto.base,}};

static void InitDefaultsscc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MultiHeadConfig_default_instance_;
    new (ptr) ::MultiHeadConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MultiHeadConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto}, {
      &scc_info_Vocab_proto_2futils_2fvocab_2eproto.base,}};

static void InitDefaultsscc_info_Replicas_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Replicas_default_instance_;
    new (ptr) ::Replicas();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Replicas::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Replicas_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Replicas_proto_2fspire_2fspire_2eproto}, {}};

static void InitDefaultsscc_info_SpireConfig_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireConfig_default_instance_;
    new (ptr) ::SpireConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SpireConfig_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_SpireConfig_proto_2fspire_2fspire_2eproto}, {
      &scc_info_SpireConfig_HeadsEntry_DoNotUse_proto_2fspire_2fspire_2eproto.base,
      &scc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto.base,
      &scc_info_SpireMeta_proto_2fspire_2fspire_2eproto.base,
      &scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_LoadCheckpointScope_proto_2futils_2fcheckpoint_2eproto.base,
      &scc_info_SpireConfig_CpuResourcesEntry_DoNotUse_proto_2fspire_2fspire_2eproto.base,
      &scc_info_SpireConfig_ReplicasEntry_DoNotUse_proto_2fspire_2fspire_2eproto.base,}};

static void InitDefaultsscc_info_SpireConfig_CpuResourcesEntry_DoNotUse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireConfig_CpuResourcesEntry_DoNotUse_default_instance_;
    new (ptr) ::SpireConfig_CpuResourcesEntry_DoNotUse();
  }
  ::SpireConfig_CpuResourcesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireConfig_CpuResourcesEntry_DoNotUse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpireConfig_CpuResourcesEntry_DoNotUse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_CPUResources_proto_2fspire_2fspire_2eproto.base,}};

static void InitDefaultsscc_info_SpireConfig_HeadsEntry_DoNotUse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireConfig_HeadsEntry_DoNotUse_default_instance_;
    new (ptr) ::SpireConfig_HeadsEntry_DoNotUse();
  }
  ::SpireConfig_HeadsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireConfig_HeadsEntry_DoNotUse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpireConfig_HeadsEntry_DoNotUse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto.base,}};

static void InitDefaultsscc_info_SpireConfig_ReplicasEntry_DoNotUse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireConfig_ReplicasEntry_DoNotUse_default_instance_;
    new (ptr) ::SpireConfig_ReplicasEntry_DoNotUse();
  }
  ::SpireConfig_ReplicasEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireConfig_ReplicasEntry_DoNotUse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpireConfig_ReplicasEntry_DoNotUse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_Replicas_proto_2fspire_2fspire_2eproto.base,}};

static void InitDefaultsscc_info_SpireDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireDetectEmbedTagRequest_default_instance_;
    new (ptr) ::SpireDetectEmbedTagRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireDetectEmbedTagRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpireDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SpireDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,
      &scc_info_Tag_proto_2futils_2ftag_2eproto.base,}};

static void InitDefaultsscc_info_SpireDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireDetectEmbedTagResponse_default_instance_;
    new (ptr) ::SpireDetectEmbedTagResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireDetectEmbedTagResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SpireDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_SpireDetectRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireDetectRequest_default_instance_;
    new (ptr) ::SpireDetectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireDetectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpireDetectRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SpireDetectRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,
      &scc_info_Tag_proto_2futils_2ftag_2eproto.base,}};

static void InitDefaultsscc_info_SpireDetectResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireDetectResponse_default_instance_;
    new (ptr) ::SpireDetectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireDetectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireDetectResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SpireDetectResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_SpireEmbedTagRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireEmbedTagRequest_default_instance_;
    new (ptr) ::SpireEmbedTagRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireEmbedTagRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpireEmbedTagRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SpireEmbedTagRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,
      &scc_info_Tag_proto_2futils_2ftag_2eproto.base,}};

static void InitDefaultsscc_info_SpireEmbedTagResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireEmbedTagResponse_default_instance_;
    new (ptr) ::SpireEmbedTagResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireEmbedTagResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireEmbedTagResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SpireEmbedTagResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_SpireFaceDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireFaceDetectEmbedTagRequest_default_instance_;
    new (ptr) ::SpireFaceDetectEmbedTagRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireFaceDetectEmbedTagRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpireFaceDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SpireFaceDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,
      &scc_info_Tag_proto_2futils_2ftag_2eproto.base,}};

static void InitDefaultsscc_info_SpireFaceDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireFaceDetectEmbedTagResponse_default_instance_;
    new (ptr) ::SpireFaceDetectEmbedTagResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireFaceDetectEmbedTagResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireFaceDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SpireFaceDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_SpireGetConfigRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireGetConfigRequest_default_instance_;
    new (ptr) ::SpireGetConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireGetConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireGetConfigRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpireGetConfigRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_SpireGetConfigResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireGetConfigResponse_default_instance_;
    new (ptr) ::SpireGetConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireGetConfigResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireGetConfigResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SpireGetConfigResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_SpireConfig_proto_2fspire_2fspire_2eproto.base,}};

static void InitDefaultsscc_info_SpireGetStateRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireGetStateRequest_default_instance_;
    new (ptr) ::SpireGetStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireGetStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireGetStateRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpireGetStateRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_SpireGetStateResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireGetStateResponse_default_instance_;
    new (ptr) ::SpireGetStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireGetStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireGetStateResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SpireGetStateResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_SpireInstanceSegmentRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireInstanceSegmentRequest_default_instance_;
    new (ptr) ::SpireInstanceSegmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireInstanceSegmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpireInstanceSegmentRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SpireInstanceSegmentRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,
      &scc_info_Tag_proto_2futils_2ftag_2eproto.base,}};

static void InitDefaultsscc_info_SpireInstanceSegmentResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireInstanceSegmentResponse_default_instance_;
    new (ptr) ::SpireInstanceSegmentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireInstanceSegmentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireInstanceSegmentResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SpireInstanceSegmentResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_SpireMaybeJITRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireMaybeJITRequest_default_instance_;
    new (ptr) ::SpireMaybeJITRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireMaybeJITRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireMaybeJITRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpireMaybeJITRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_SpireMaybeJITResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireMaybeJITResponse_default_instance_;
    new (ptr) ::SpireMaybeJITResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireMaybeJITResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireMaybeJITResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpireMaybeJITResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_SpireMeta_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireMeta_default_instance_;
    new (ptr) ::SpireMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpireMeta_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpireMeta_proto_2fspire_2fspire_2eproto}, {}};

static void InitDefaultsscc_info_SpireSavedOutputRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireSavedOutputRequest_default_instance_;
    new (ptr) ::SpireSavedOutputRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireSavedOutputRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireSavedOutputRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SpireSavedOutputRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_SpireSavedOutputResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireSavedOutputResponse_default_instance_;
    new (ptr) ::SpireSavedOutputResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireSavedOutputResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireSavedOutputResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SpireSavedOutputResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_SpireSetConfigRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireSetConfigRequest_default_instance_;
    new (ptr) ::SpireSetConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireSetConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireSetConfigRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SpireSetConfigRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_SpireConfig_proto_2fspire_2fspire_2eproto.base,}};

static void InitDefaultsscc_info_SpireSetConfigResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireSetConfigResponse_default_instance_;
    new (ptr) ::SpireSetConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireSetConfigResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireSetConfigResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpireSetConfigResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_SpireStopServingRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireStopServingRequest_default_instance_;
    new (ptr) ::SpireStopServingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireStopServingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireStopServingRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpireStopServingRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_SpireStopServingResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireStopServingResponse_default_instance_;
    new (ptr) ::SpireStopServingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireStopServingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireStopServingResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpireStopServingResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_SpireTrackRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireTrackRequest_default_instance_;
    new (ptr) ::SpireTrackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireTrackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireTrackRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpireTrackRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_DataExample_proto_2futils_2fdata_5fexample_2eproto.base,}};

static void InitDefaultsscc_info_SpireTrackResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireTrackResponse_default_instance_;
    new (ptr) ::SpireTrackResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireTrackResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireTrackResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SpireTrackResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fspire_2fspire_2eproto[34];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fspire_2fspire_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fspire_2fspire_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fspire_2fspire_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FaceDetectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FaceDetectConfig, type_),
  PROTOBUF_FIELD_OFFSET(::FaceDetectConfig, spire_config_),
  PROTOBUF_FIELD_OFFSET(::FaceDetectConfig, detect_threshold_),
  PROTOBUF_FIELD_OFFSET(::FaceDetectConfig, cascade_path_),
  PROTOBUF_FIELD_OFFSET(::FaceDetectConfig, min_size_),
  PROTOBUF_FIELD_OFFSET(::FaceDetectConfig, bbox_crop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BBoxCropConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BBoxCropConfig, type_),
  PROTOBUF_FIELD_OFFSET(::BBoxCropConfig, margin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MultiHeadConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MultiHeadConfig, dataset_),
  PROTOBUF_FIELD_OFFSET(::MultiHeadConfig, face_key_),
  PROTOBUF_FIELD_OFFSET(::MultiHeadConfig, vocab_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig_HeadsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig_HeadsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireConfig_HeadsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig_HeadsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SpireConfig_CpuResourcesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig_CpuResourcesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireConfig_CpuResourcesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig_CpuResourcesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SpireConfig_ReplicasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig_ReplicasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireConfig_ReplicasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig_ReplicasEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireConfig, name_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, eid_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, exp_type_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, dataset_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, gpu_memory_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, gpu_batch_size_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, device_type_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, num_devices_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, detection_layer_name_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, detection_score_threshold_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, detection_max_bboxes_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, embedding_layer_names_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, is_multiheaded_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, heads_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, face_detect_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, data_provider_params_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, load_checkpoint_scopes_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, timestamp_ms_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, model_type_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, compatibility_version_id_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, uuid_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, spatial_reduce_type_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, cpu_resources_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, replicas_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, embeddings_spire_conf_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, landmarks_spire_conf_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, model_framework_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Replicas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Replicas, minimum_),
  PROTOBUF_FIELD_OFFSET(::Replicas, maximum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPUResources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPUResources, cpu_core_request_),
  PROTOBUF_FIELD_OFFSET(::CPUResources, cpu_core_limit_),
  PROTOBUF_FIELD_OFFSET(::CPUResources, cpu_mem_request_),
  PROTOBUF_FIELD_OFFSET(::CPUResources, cpu_mem_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireMeta, models_),
  PROTOBUF_FIELD_OFFSET(::SpireMeta, lopq_model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireGetConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireGetConfigRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireGetConfigRequest, use_lock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireGetConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireGetConfigResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireGetConfigResponse, config_json_),
  PROTOBUF_FIELD_OFFSET(::SpireGetConfigResponse, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireSetConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireSetConfigRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireSetConfigRequest, config_json_),
  PROTOBUF_FIELD_OFFSET(::SpireSetConfigRequest, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireSetConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireSetConfigResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireGetStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireGetStateRequest, meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireGetStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireGetStateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireGetStateResponse, state_),
  PROTOBUF_FIELD_OFFSET(::SpireGetStateResponse, last_inference_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireMaybeJITRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireMaybeJITRequest, meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireMaybeJITResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireMaybeJITResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireMaybeJITResponse, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireStopServingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireStopServingRequest, meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireStopServingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireStopServingResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireStopServingResponse, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, data_),
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, ops_),
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, topk_),
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, fps_),
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, tags_to_watch_),
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, data_),
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, store_layers_),
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, reduce_num_views_),
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, reduce_output_space_),
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, fps_),
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, topk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireFaceDetectEmbedTagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireFaceDetectEmbedTagRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireFaceDetectEmbedTagRequest, data_),
  PROTOBUF_FIELD_OFFSET(::SpireFaceDetectEmbedTagRequest, ops_),
  PROTOBUF_FIELD_OFFSET(::SpireFaceDetectEmbedTagRequest, topk_),
  PROTOBUF_FIELD_OFFSET(::SpireFaceDetectEmbedTagRequest, fps_),
  PROTOBUF_FIELD_OFFSET(::SpireFaceDetectEmbedTagRequest, tags_to_watch_),
  PROTOBUF_FIELD_OFFSET(::SpireFaceDetectEmbedTagRequest, language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireFaceDetectEmbedTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireFaceDetectEmbedTagResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireFaceDetectEmbedTagResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentRequest, data_),
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentRequest, ops_),
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentRequest, topk_),
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentRequest, fps_),
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentRequest, tags_to_watch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireDetectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireDetectRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectRequest, data_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectRequest, ops_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectRequest, topk_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectRequest, fps_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectRequest, tags_to_watch_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectRequest, detection_score_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireTrackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireTrackRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireDetectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireDetectResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireTrackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireTrackResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireTrackResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, data_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, ops_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, topk_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, fps_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, tags_to_watch_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, detection_score_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagResponse, results_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::FaceDetectConfig)},
  { 11, -1, sizeof(::BBoxCropConfig)},
  { 18, -1, sizeof(::MultiHeadConfig)},
  { 26, 33, sizeof(::SpireConfig_HeadsEntry_DoNotUse)},
  { 35, 42, sizeof(::SpireConfig_CpuResourcesEntry_DoNotUse)},
  { 44, 51, sizeof(::SpireConfig_ReplicasEntry_DoNotUse)},
  { 53, -1, sizeof(::SpireConfig)},
  { 86, -1, sizeof(::Replicas)},
  { 93, -1, sizeof(::CPUResources)},
  { 102, -1, sizeof(::SpireMeta)},
  { 109, -1, sizeof(::SpireGetConfigRequest)},
  { 116, -1, sizeof(::SpireGetConfigResponse)},
  { 124, -1, sizeof(::SpireSetConfigRequest)},
  { 132, -1, sizeof(::SpireSetConfigResponse)},
  { 138, -1, sizeof(::SpireGetStateRequest)},
  { 144, -1, sizeof(::SpireGetStateResponse)},
  { 152, -1, sizeof(::SpireMaybeJITRequest)},
  { 158, -1, sizeof(::SpireMaybeJITResponse)},
  { 165, -1, sizeof(::SpireStopServingRequest)},
  { 171, -1, sizeof(::SpireStopServingResponse)},
  { 178, -1, sizeof(::SpireEmbedTagRequest)},
  { 190, -1, sizeof(::SpireEmbedTagResponse)},
  { 197, -1, sizeof(::SpireSavedOutputRequest)},
  { 209, -1, sizeof(::SpireSavedOutputResponse)},
  { 216, -1, sizeof(::SpireFaceDetectEmbedTagRequest)},
  { 228, -1, sizeof(::SpireFaceDetectEmbedTagResponse)},
  { 235, -1, sizeof(::SpireInstanceSegmentRequest)},
  { 246, -1, sizeof(::SpireInstanceSegmentResponse)},
  { 253, -1, sizeof(::SpireDetectRequest)},
  { 265, -1, sizeof(::SpireTrackRequest)},
  { 271, -1, sizeof(::SpireDetectResponse)},
  { 278, -1, sizeof(::SpireTrackResponse)},
  { 285, -1, sizeof(::SpireDetectEmbedTagRequest)},
  { 297, -1, sizeof(::SpireDetectEmbedTagResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FaceDetectConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BBoxCropConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MultiHeadConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireConfig_HeadsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireConfig_CpuResourcesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireConfig_ReplicasEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Replicas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPUResources_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireGetConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireGetConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireSetConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireSetConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireGetStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireGetStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireMaybeJITRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireMaybeJITResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireStopServingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireStopServingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireEmbedTagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireEmbedTagResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireSavedOutputRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireSavedOutputResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireFaceDetectEmbedTagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireFaceDetectEmbedTagResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireInstanceSegmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireInstanceSegmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireDetectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireTrackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireDetectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireTrackResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireDetectEmbedTagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireDetectEmbedTagResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2fspire_2fspire_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027proto/spire/spire.proto\032\037google/protob"
  "uf/timestamp.proto\032\034proto/utils/checkpoi"
  "nt.proto\032\036proto/utils/data_example.proto"
  "\032\037proto/utils/data_provider.proto\032\033proto"
  "/utils/databatch.proto\032\036proto/utils/requ"
  "est_meta.proto\032\025proto/utils/tag.proto\032\027p"
  "roto/utils/vocab.proto\"\234\001\n\020FaceDetectCon"
  "fig\022\014\n\004type\030\001 \001(\t\022\024\n\014spire_config\030\002 \001(\t\022"
  "\030\n\020detect_threshold\030\003 \001(\002\022\024\n\014cascade_pat"
  "h\030\004 \001(\t\022\020\n\010min_size\030\005 \001(\002\022\"\n\tbbox_crop\030\006"
  " \001(\0132\017.BBoxCropConfig\".\n\016BBoxCropConfig\022"
  "\014\n\004type\030\001 \001(\t\022\016\n\006margin\030\002 \001(\002\"O\n\017MultiHe"
  "adConfig\022\023\n\007dataset\030\001 \001(\tB\002\030\001\022\020\n\010face_ke"
  "y\030\002 \001(\t\022\025\n\005vocab\030\003 \001(\0132\006.Vocab\"\360\010\n\013Spire"
  "Config\022\014\n\004name\030\001 \001(\t\022\013\n\003eid\030\002 \001(\003\022\024\n\010exp"
  "_type\030\003 \001(\tB\002\030\001\022\023\n\007dataset\030\004 \001(\tB\002\030\001\022\022\n\n"
  "gpu_memory\030\005 \001(\003\022\026\n\016gpu_batch_size\030\006 \001(\005"
  "\022\023\n\013device_type\030\007 \001(\t\022\023\n\013num_devices\030\010 \001"
  "(\005\022\034\n\024detection_layer_name\030\t \001(\t\022!\n\031dete"
  "ction_score_threshold\030\n \001(\002\022\034\n\024detection"
  "_max_bboxes\030\032 \001(\005\022\035\n\025embedding_layer_nam"
  "es\030\013 \003(\t\022\026\n\016is_multiheaded\030\014 \001(\010\022&\n\005head"
  "s\030\r \003(\0132\027.SpireConfig.HeadsEntry\022&\n\013face"
  "_detect\030\016 \001(\0132\021.FaceDetectConfig\022\030\n\004meta"
  "\030\017 \001(\0132\n.SpireMeta\0221\n\024data_provider_para"
  "ms\030\020 \001(\0132\023.DataProviderParams\0224\n\026load_ch"
  "eckpoint_scopes\030\021 \003(\0132\024.LoadCheckpointSc"
  "ope\022\024\n\014timestamp_ms\030\022 \001(\002\022#\n\nmodel_type\030"
  "\023 \001(\0162\017.SpireModelType\022 \n\030compatibility_"
  "version_id\030\024 \001(\003\022\014\n\004uuid\030\025 \001(\t\0224\n\023spatia"
  "l_reduce_type\030\026 \001(\0162\027.SpireSpatialReduce"
  "Type\0225\n\rcpu_resources\030\027 \003(\0132\036.SpireConfi"
  "g.CpuResourcesEntry\022,\n\010replicas\030\030 \003(\0132\032."
  "SpireConfig.ReplicasEntry\022\035\n\025embeddings_"
  "spire_conf\030\031 \001(\t\022\034\n\024landmarks_spire_conf"
  "\030\034 \001(\t\022/\n\017model_framework\030\033 \001(\0162\026.SpireC"
  "onfig.Framework\032>\n\nHeadsEntry\022\013\n\003key\030\001 \001"
  "(\t\022\037\n\005value\030\002 \001(\0132\020.MultiHeadConfig:\0028\001\032"
  "B\n\021CpuResourcesEntry\022\013\n\003key\030\001 \001(\t\022\034\n\005val"
  "ue\030\002 \001(\0132\r.CPUResources:\0028\001\032:\n\rReplicasE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\030\n\005value\030\002 \001(\0132\t.Repli"
  "cas:\0028\001\"(\n\tFramework\022\016\n\nTENSORFLOW\020\000\022\013\n\007"
  "PYTORCH\020\001\",\n\010Replicas\022\017\n\007minimum\030\001 \001(\005\022\017"
  "\n\007maximum\030\002 \001(\005\"p\n\014CPUResources\022\030\n\020cpu_c"
  "ore_request\030\001 \001(\t\022\026\n\016cpu_core_limit\030\002 \001("
  "\t\022\027\n\017cpu_mem_request\030\003 \001(\t\022\025\n\rcpu_mem_li"
  "mit\030\004 \001(\t\"/\n\tSpireMeta\022\016\n\006models\030\001 \003(\t\022\022"
  "\n\nlopq_model\030\002 \001(\t\"E\n\025SpireGetConfigRequ"
  "est\022\032\n\004meta\030\001 \001(\0132\014.RequestMeta\022\020\n\010use_l"
  "ock\030\002 \001(\010\"l\n\026SpireGetConfigResponse\022\037\n\006s"
  "tatus\030\001 \001(\0132\017.ResponseStatus\022\023\n\013config_j"
  "son\030\002 \001(\t\022\034\n\006config\030\003 \001(\0132\014.SpireConfig\""
  "f\n\025SpireSetConfigRequest\022\032\n\004meta\030\001 \001(\0132\014"
  ".RequestMeta\022\023\n\013config_json\030\002 \001(\t\022\034\n\006con"
  "fig\030\003 \001(\0132\014.SpireConfig\"9\n\026SpireSetConfi"
  "gResponse\022\037\n\006status\030\001 \001(\0132\017.ResponseStat"
  "us\"2\n\024SpireGetStateRequest\022\032\n\004meta\030\001 \001(\013"
  "2\014.RequestMeta\"\215\001\n\025SpireGetStateResponse"
  "\022\037\n\006status\030\001 \001(\0132\017.ResponseStatus\022\032\n\005sta"
  "te\030\002 \001(\0162\013.SpireState\0227\n\023last_inference_"
  "time\030\003 \001(\0132\032.google.protobuf.Timestamp\"2"
  "\n\024SpireMaybeJITRequest\022\032\n\004meta\030\001 \001(\0132\014.R"
  "equestMeta\"T\n\025SpireMaybeJITResponse\022\037\n\006s"
  "tatus\030\001 \001(\0132\017.ResponseStatus\022\032\n\005state\030\002 "
  "\001(\0162\013.SpireState\"5\n\027SpireStopServingRequ"
  "est\022\032\n\004meta\030\001 \001(\0132\014.RequestMeta\"W\n\030Spire"
  "StopServingResponse\022\037\n\006status\030\001 \001(\0132\017.Re"
  "sponseStatus\022\032\n\005state\030\002 \001(\0162\013.SpireState"
  "\"\262\001\n\024SpireEmbedTagRequest\022\032\n\004meta\030\001 \001(\0132"
  "\014.RequestMeta\022\030\n\004data\030\002 \001(\0132\n.DataBatch\022"
  "\026\n\003ops\030\003 \003(\0162\t.SpireOps\022\014\n\004topk\030\004 \001(\005\022\013\n"
  "\003fps\030\005 \001(\002\022\033\n\rtags_to_watch\030\006 \003(\0132\004.Tag\022"
  "\024\n\010language\030\007 \001(\tB\002\030\001\"U\n\025SpireEmbedTagRe"
  "sponse\022\037\n\006status\030\001 \001(\0132\017.ResponseStatus\022"
  "\033\n\007results\030\002 \001(\0132\n.DataBatch\"\267\001\n\027SpireSa"
  "vedOutputRequest\022\032\n\004meta\030\001 \001(\0132\014.Request"
  "Meta\022\030\n\004data\030\002 \001(\0132\n.DataBatch\022\024\n\014store_"
  "layers\030\003 \003(\t\022\030\n\020reduce_num_views\030\004 \001(\010\022\033"
  "\n\023reduce_output_space\030\005 \001(\010\022\013\n\003fps\030\006 \001(\002"
  "\022\014\n\004topk\030\007 \001(\005\"X\n\030SpireSavedOutputRespon"
  "se\022\037\n\006status\030\001 \001(\0132\017.ResponseStatus\022\033\n\007r"
  "esults\030\002 \001(\0132\n.DataBatch\"\274\001\n\036SpireFaceDe"
  "tectEmbedTagRequest\022\032\n\004meta\030\001 \001(\0132\014.Requ"
  "estMeta\022\030\n\004data\030\002 \001(\0132\n.DataBatch\022\026\n\003ops"
  "\030\003 \003(\0162\t.SpireOps\022\014\n\004topk\030\004 \001(\005\022\013\n\003fps\030\005"
  " \001(\002\022\033\n\rtags_to_watch\030\006 \003(\0132\004.Tag\022\024\n\010lan"
  "guage\030\007 \001(\tB\002\030\001\"_\n\037SpireFaceDetectEmbedT"
  "agResponse\022\037\n\006status\030\001 \001(\0132\017.ResponseSta"
  "tus\022\033\n\007results\030\002 \001(\0132\n.DataBatch\"\243\001\n\033Spi"
  "reInstanceSegmentRequest\022\032\n\004meta\030\001 \001(\0132\014"
  ".RequestMeta\022\030\n\004data\030\002 \001(\0132\n.DataBatch\022\026"
  "\n\003ops\030\003 \003(\0162\t.SpireOps\022\014\n\004topk\030\004 \001(\005\022\013\n\003"
  "fps\030\005 \001(\002\022\033\n\rtags_to_watch\030\006 \003(\0132\004.Tag\"\\"
  "\n\034SpireInstanceSegmentResponse\022\037\n\006status"
  "\030\001 \001(\0132\017.ResponseStatus\022\033\n\007results\030\002 \001(\013"
  "2\n.DataBatch\"\275\001\n\022SpireDetectRequest\022\032\n\004m"
  "eta\030\001 \001(\0132\014.RequestMeta\022\030\n\004data\030\002 \001(\0132\n."
  "DataBatch\022\026\n\003ops\030\003 \003(\0162\t.SpireOps\022\014\n\004top"
  "k\030\004 \001(\005\022\013\n\003fps\030\005 \001(\002\022\033\n\rtags_to_watch\030\006 "
  "\003(\0132\004.Tag\022!\n\031detection_score_threshold\030\007"
  " \001(\002\"/\n\021SpireTrackRequest\022\032\n\004data\030\001 \001(\0132"
  "\014.DataExample\"S\n\023SpireDetectResponse\022\037\n\006"
  "status\030\001 \001(\0132\017.ResponseStatus\022\033\n\007results"
  "\030\002 \001(\0132\n.DataBatch\"R\n\022SpireTrackResponse"
  "\022\037\n\006status\030\001 \001(\0132\017.ResponseStatus\022\033\n\007res"
  "ults\030\002 \001(\0132\n.DataBatch\"\305\001\n\032SpireDetectEm"
  "bedTagRequest\022\032\n\004meta\030\001 \001(\0132\014.RequestMet"
  "a\022\030\n\004data\030\002 \001(\0132\n.DataBatch\022\026\n\003ops\030\003 \003(\016"
  "2\t.SpireOps\022\014\n\004topk\030\004 \001(\005\022\013\n\003fps\030\005 \001(\002\022\033"
  "\n\rtags_to_watch\030\006 \003(\0132\004.Tag\022!\n\031detection"
  "_score_threshold\030\007 \001(\002\"[\n\033SpireDetectEmb"
  "edTagResponse\022\037\n\006status\030\001 \001(\0132\017.Response"
  "Status\022\033\n\007results\030\002 \001(\0132\n.DataBatch*_\n\016S"
  "pireModelType\022\013\n\007NOT_SET\020\000\022\022\n\016CLASSIFICA"
  "TION\020\001\022\r\n\tDETECTION\020\002\022\035\n\031EMBEDDINGS_CLAS"
  "SIFICATION\020\003*+\n\026SpireSpatialReduceType\022\010"
  "\n\004MEAN\020\000\022\007\n\003MAX\020\001*;\n\nSpireState\022\r\n\tNO_CO"
  "NFIG\020\000\022\016\n\nNET_EXISTS\020\001\022\016\n\nNET_JITTED\020\002*G"
  "\n\010SpireOps\022\007\n\003TAG\020\000\022\t\n\005EMBED\020\001\022\017\n\013FACE_D"
  "ETECT\020\002\022\007\n\003OCR\020\003\022\r\n\tLANDMARKS\020\004B\007Z\005spire"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fspire_2fspire_2eproto_deps[8] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_proto_2futils_2fcheckpoint_2eproto,
  &::descriptor_table_proto_2futils_2fdata_5fexample_2eproto,
  &::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto,
  &::descriptor_table_proto_2futils_2fdatabatch_2eproto,
  &::descriptor_table_proto_2futils_2frequest_5fmeta_2eproto,
  &::descriptor_table_proto_2futils_2ftag_2eproto,
  &::descriptor_table_proto_2futils_2fvocab_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fspire_2fspire_2eproto_sccs[34] = {
  &scc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto.base,
  &scc_info_CPUResources_proto_2fspire_2fspire_2eproto.base,
  &scc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto.base,
  &scc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto.base,
  &scc_info_Replicas_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireConfig_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireConfig_CpuResourcesEntry_DoNotUse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireConfig_HeadsEntry_DoNotUse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireConfig_ReplicasEntry_DoNotUse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireDetectRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireDetectResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireEmbedTagRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireEmbedTagResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireFaceDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireFaceDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireGetConfigRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireGetConfigResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireGetStateRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireGetStateResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireInstanceSegmentRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireInstanceSegmentResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireMaybeJITRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireMaybeJITResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireMeta_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireSavedOutputRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireSavedOutputResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireSetConfigRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireSetConfigResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireStopServingRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireStopServingResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireTrackRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireTrackResponse_proto_2fspire_2fspire_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fspire_2fspire_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fspire_2fspire_2eproto = {
  false, false, descriptor_table_protodef_proto_2fspire_2fspire_2eproto, "proto/spire/spire.proto", 4808,
  &descriptor_table_proto_2fspire_2fspire_2eproto_once, descriptor_table_proto_2fspire_2fspire_2eproto_sccs, descriptor_table_proto_2fspire_2fspire_2eproto_deps, 34, 8,
  schemas, file_default_instances, TableStruct_proto_2fspire_2fspire_2eproto::offsets,
  file_level_metadata_proto_2fspire_2fspire_2eproto, 34, file_level_enum_descriptors_proto_2fspire_2fspire_2eproto, file_level_service_descriptors_proto_2fspire_2fspire_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fspire_2fspire_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fspire_2fspire_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpireConfig_Framework_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fspire_2fspire_2eproto);
  return file_level_enum_descriptors_proto_2fspire_2fspire_2eproto[0];
}
bool SpireConfig_Framework_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SpireConfig_Framework SpireConfig::TENSORFLOW;
constexpr SpireConfig_Framework SpireConfig::PYTORCH;
constexpr SpireConfig_Framework SpireConfig::Framework_MIN;
constexpr SpireConfig_Framework SpireConfig::Framework_MAX;
constexpr int SpireConfig::Framework_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpireModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fspire_2fspire_2eproto);
  return file_level_enum_descriptors_proto_2fspire_2fspire_2eproto[1];
}
bool SpireModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpireSpatialReduceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fspire_2fspire_2eproto);
  return file_level_enum_descriptors_proto_2fspire_2fspire_2eproto[2];
}
bool SpireSpatialReduceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpireState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fspire_2fspire_2eproto);
  return file_level_enum_descriptors_proto_2fspire_2fspire_2eproto[3];
}
bool SpireState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpireOps_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fspire_2fspire_2eproto);
  return file_level_enum_descriptors_proto_2fspire_2fspire_2eproto[4];
}
bool SpireOps_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FaceDetectConfig::InitAsDefaultInstance() {
  ::_FaceDetectConfig_default_instance_._instance.get_mutable()->bbox_crop_ = const_cast< ::BBoxCropConfig*>(
      ::BBoxCropConfig::internal_default_instance());
}
class FaceDetectConfig::_Internal {
 public:
  static const ::BBoxCropConfig& bbox_crop(const FaceDetectConfig* msg);
};

const ::BBoxCropConfig&
FaceDetectConfig::_Internal::bbox_crop(const FaceDetectConfig* msg) {
  return *msg->bbox_crop_;
}
FaceDetectConfig::FaceDetectConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FaceDetectConfig)
}
FaceDetectConfig::FaceDetectConfig(const FaceDetectConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  spire_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spire_config().empty()) {
    spire_config_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_spire_config(),
      GetArena());
  }
  cascade_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cascade_path().empty()) {
    cascade_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cascade_path(),
      GetArena());
  }
  if (from._internal_has_bbox_crop()) {
    bbox_crop_ = new ::BBoxCropConfig(*from.bbox_crop_);
  } else {
    bbox_crop_ = nullptr;
  }
  ::memcpy(&detect_threshold_, &from.detect_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_size_) -
    reinterpret_cast<char*>(&detect_threshold_)) + sizeof(min_size_));
  // @@protoc_insertion_point(copy_constructor:FaceDetectConfig)
}

void FaceDetectConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spire_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cascade_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bbox_crop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_size_) -
      reinterpret_cast<char*>(&bbox_crop_)) + sizeof(min_size_));
}

FaceDetectConfig::~FaceDetectConfig() {
  // @@protoc_insertion_point(destructor:FaceDetectConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FaceDetectConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spire_config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cascade_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bbox_crop_;
}

void FaceDetectConfig::ArenaDtor(void* object) {
  FaceDetectConfig* _this = reinterpret_cast< FaceDetectConfig* >(object);
  (void)_this;
}
void FaceDetectConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FaceDetectConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceDetectConfig& FaceDetectConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void FaceDetectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:FaceDetectConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  spire_config_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cascade_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && bbox_crop_ != nullptr) {
    delete bbox_crop_;
  }
  bbox_crop_ = nullptr;
  ::memset(&detect_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_size_) -
      reinterpret_cast<char*>(&detect_threshold_)) + sizeof(min_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceDetectConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FaceDetectConfig.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spire_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_spire_config();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FaceDetectConfig.spire_config"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float detect_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          detect_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string cascade_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cascade_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FaceDetectConfig.cascade_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          min_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .BBoxCropConfig bbox_crop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox_crop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceDetectConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FaceDetectConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceDetectConfig.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string spire_config = 2;
  if (this->spire_config().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spire_config().data(), static_cast<int>(this->_internal_spire_config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceDetectConfig.spire_config");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_spire_config(), target);
  }

  // float detect_threshold = 3;
  if (!(this->detect_threshold() <= 0 && this->detect_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_detect_threshold(), target);
  }

  // string cascade_path = 4;
  if (this->cascade_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cascade_path().data(), static_cast<int>(this->_internal_cascade_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceDetectConfig.cascade_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cascade_path(), target);
  }

  // float min_size = 5;
  if (!(this->min_size() <= 0 && this->min_size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_min_size(), target);
  }

  // .BBoxCropConfig bbox_crop = 6;
  if (this->has_bbox_crop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bbox_crop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FaceDetectConfig)
  return target;
}

size_t FaceDetectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FaceDetectConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string spire_config = 2;
  if (this->spire_config().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spire_config());
  }

  // string cascade_path = 4;
  if (this->cascade_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cascade_path());
  }

  // .BBoxCropConfig bbox_crop = 6;
  if (this->has_bbox_crop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bbox_crop_);
  }

  // float detect_threshold = 3;
  if (!(this->detect_threshold() <= 0 && this->detect_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_size = 5;
  if (!(this->min_size() <= 0 && this->min_size() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceDetectConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FaceDetectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceDetectConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceDetectConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FaceDetectConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FaceDetectConfig)
    MergeFrom(*source);
  }
}

void FaceDetectConfig::MergeFrom(const FaceDetectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FaceDetectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.spire_config().size() > 0) {
    _internal_set_spire_config(from._internal_spire_config());
  }
  if (from.cascade_path().size() > 0) {
    _internal_set_cascade_path(from._internal_cascade_path());
  }
  if (from.has_bbox_crop()) {
    _internal_mutable_bbox_crop()->::BBoxCropConfig::MergeFrom(from._internal_bbox_crop());
  }
  if (!(from.detect_threshold() <= 0 && from.detect_threshold() >= 0)) {
    _internal_set_detect_threshold(from._internal_detect_threshold());
  }
  if (!(from.min_size() <= 0 && from.min_size() >= 0)) {
    _internal_set_min_size(from._internal_min_size());
  }
}

void FaceDetectConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FaceDetectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceDetectConfig::CopyFrom(const FaceDetectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FaceDetectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceDetectConfig::IsInitialized() const {
  return true;
}

void FaceDetectConfig::InternalSwap(FaceDetectConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  spire_config_.Swap(&other->spire_config_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cascade_path_.Swap(&other->cascade_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaceDetectConfig, min_size_)
      + sizeof(FaceDetectConfig::min_size_)
      - PROTOBUF_FIELD_OFFSET(FaceDetectConfig, bbox_crop_)>(
          reinterpret_cast<char*>(&bbox_crop_),
          reinterpret_cast<char*>(&other->bbox_crop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceDetectConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BBoxCropConfig::InitAsDefaultInstance() {
}
class BBoxCropConfig::_Internal {
 public:
};

BBoxCropConfig::BBoxCropConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BBoxCropConfig)
}
BBoxCropConfig::BBoxCropConfig(const BBoxCropConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  margin_ = from.margin_;
  // @@protoc_insertion_point(copy_constructor:BBoxCropConfig)
}

void BBoxCropConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  margin_ = 0;
}

BBoxCropConfig::~BBoxCropConfig() {
  // @@protoc_insertion_point(destructor:BBoxCropConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BBoxCropConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BBoxCropConfig::ArenaDtor(void* object) {
  BBoxCropConfig* _this = reinterpret_cast< BBoxCropConfig* >(object);
  (void)_this;
}
void BBoxCropConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BBoxCropConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BBoxCropConfig& BBoxCropConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void BBoxCropConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:BBoxCropConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  margin_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BBoxCropConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BBoxCropConfig.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float margin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BBoxCropConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BBoxCropConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BBoxCropConfig.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // float margin = 2;
  if (!(this->margin() <= 0 && this->margin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_margin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BBoxCropConfig)
  return target;
}

size_t BBoxCropConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BBoxCropConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // float margin = 2;
  if (!(this->margin() <= 0 && this->margin() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BBoxCropConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BBoxCropConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BBoxCropConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BBoxCropConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BBoxCropConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BBoxCropConfig)
    MergeFrom(*source);
  }
}

void BBoxCropConfig::MergeFrom(const BBoxCropConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BBoxCropConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.margin() <= 0 && from.margin() >= 0)) {
    _internal_set_margin(from._internal_margin());
  }
}

void BBoxCropConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BBoxCropConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBoxCropConfig::CopyFrom(const BBoxCropConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BBoxCropConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBoxCropConfig::IsInitialized() const {
  return true;
}

void BBoxCropConfig::InternalSwap(BBoxCropConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(margin_, other->margin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BBoxCropConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiHeadConfig::InitAsDefaultInstance() {
  ::_MultiHeadConfig_default_instance_._instance.get_mutable()->vocab_ = const_cast< ::Vocab*>(
      ::Vocab::internal_default_instance());
}
class MultiHeadConfig::_Internal {
 public:
  static const ::Vocab& vocab(const MultiHeadConfig* msg);
};

const ::Vocab&
MultiHeadConfig::_Internal::vocab(const MultiHeadConfig* msg) {
  return *msg->vocab_;
}
void MultiHeadConfig::clear_vocab() {
  if (GetArena() == nullptr && vocab_ != nullptr) {
    delete vocab_;
  }
  vocab_ = nullptr;
}
MultiHeadConfig::MultiHeadConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MultiHeadConfig)
}
MultiHeadConfig::MultiHeadConfig(const MultiHeadConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dataset().empty()) {
    dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dataset(),
      GetArena());
  }
  face_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_face_key().empty()) {
    face_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_face_key(),
      GetArena());
  }
  if (from._internal_has_vocab()) {
    vocab_ = new ::Vocab(*from.vocab_);
  } else {
    vocab_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MultiHeadConfig)
}

void MultiHeadConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto.base);
  dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vocab_ = nullptr;
}

MultiHeadConfig::~MultiHeadConfig() {
  // @@protoc_insertion_point(destructor:MultiHeadConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiHeadConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dataset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vocab_;
}

void MultiHeadConfig::ArenaDtor(void* object) {
  MultiHeadConfig* _this = reinterpret_cast< MultiHeadConfig* >(object);
  (void)_this;
}
void MultiHeadConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiHeadConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiHeadConfig& MultiHeadConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void MultiHeadConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiHeadConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  face_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && vocab_ != nullptr) {
    delete vocab_;
  }
  vocab_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiHeadConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dataset = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dataset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MultiHeadConfig.dataset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string face_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_face_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MultiHeadConfig.face_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Vocab vocab = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vocab(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiHeadConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MultiHeadConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataset = 1 [deprecated = true];
  if (this->dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset().data(), static_cast<int>(this->_internal_dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MultiHeadConfig.dataset");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dataset(), target);
  }

  // string face_key = 2;
  if (this->face_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_face_key().data(), static_cast<int>(this->_internal_face_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MultiHeadConfig.face_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_face_key(), target);
  }

  // .Vocab vocab = 3;
  if (this->has_vocab()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vocab(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MultiHeadConfig)
  return target;
}

size_t MultiHeadConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiHeadConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset = 1 [deprecated = true];
  if (this->dataset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset());
  }

  // string face_key = 2;
  if (this->face_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_face_key());
  }

  // .Vocab vocab = 3;
  if (this->has_vocab()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vocab_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiHeadConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiHeadConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiHeadConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiHeadConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiHeadConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiHeadConfig)
    MergeFrom(*source);
  }
}

void MultiHeadConfig::MergeFrom(const MultiHeadConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiHeadConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dataset().size() > 0) {
    _internal_set_dataset(from._internal_dataset());
  }
  if (from.face_key().size() > 0) {
    _internal_set_face_key(from._internal_face_key());
  }
  if (from.has_vocab()) {
    _internal_mutable_vocab()->::Vocab::MergeFrom(from._internal_vocab());
  }
}

void MultiHeadConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiHeadConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiHeadConfig::CopyFrom(const MultiHeadConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiHeadConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiHeadConfig::IsInitialized() const {
  return true;
}

void MultiHeadConfig::InternalSwap(MultiHeadConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dataset_.Swap(&other->dataset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  face_key_.Swap(&other->face_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(vocab_, other->vocab_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiHeadConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SpireConfig_HeadsEntry_DoNotUse::SpireConfig_HeadsEntry_DoNotUse() {}
SpireConfig_HeadsEntry_DoNotUse::SpireConfig_HeadsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpireConfig_HeadsEntry_DoNotUse::MergeFrom(const SpireConfig_HeadsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpireConfig_HeadsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SpireConfig_HeadsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

SpireConfig_CpuResourcesEntry_DoNotUse::SpireConfig_CpuResourcesEntry_DoNotUse() {}
SpireConfig_CpuResourcesEntry_DoNotUse::SpireConfig_CpuResourcesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpireConfig_CpuResourcesEntry_DoNotUse::MergeFrom(const SpireConfig_CpuResourcesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpireConfig_CpuResourcesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SpireConfig_CpuResourcesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

SpireConfig_ReplicasEntry_DoNotUse::SpireConfig_ReplicasEntry_DoNotUse() {}
SpireConfig_ReplicasEntry_DoNotUse::SpireConfig_ReplicasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpireConfig_ReplicasEntry_DoNotUse::MergeFrom(const SpireConfig_ReplicasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpireConfig_ReplicasEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SpireConfig_ReplicasEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SpireConfig::InitAsDefaultInstance() {
  ::_SpireConfig_default_instance_._instance.get_mutable()->face_detect_ = const_cast< ::FaceDetectConfig*>(
      ::FaceDetectConfig::internal_default_instance());
  ::_SpireConfig_default_instance_._instance.get_mutable()->meta_ = const_cast< ::SpireMeta*>(
      ::SpireMeta::internal_default_instance());
  ::_SpireConfig_default_instance_._instance.get_mutable()->data_provider_params_ = const_cast< ::DataProviderParams*>(
      ::DataProviderParams::internal_default_instance());
}
class SpireConfig::_Internal {
 public:
  static const ::FaceDetectConfig& face_detect(const SpireConfig* msg);
  static const ::SpireMeta& meta(const SpireConfig* msg);
  static const ::DataProviderParams& data_provider_params(const SpireConfig* msg);
};

const ::FaceDetectConfig&
SpireConfig::_Internal::face_detect(const SpireConfig* msg) {
  return *msg->face_detect_;
}
const ::SpireMeta&
SpireConfig::_Internal::meta(const SpireConfig* msg) {
  return *msg->meta_;
}
const ::DataProviderParams&
SpireConfig::_Internal::data_provider_params(const SpireConfig* msg) {
  return *msg->data_provider_params_;
}
void SpireConfig::clear_data_provider_params() {
  if (GetArena() == nullptr && data_provider_params_ != nullptr) {
    delete data_provider_params_;
  }
  data_provider_params_ = nullptr;
}
void SpireConfig::clear_load_checkpoint_scopes() {
  load_checkpoint_scopes_.Clear();
}
SpireConfig::SpireConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  embedding_layer_names_(arena),
  heads_(arena),
  load_checkpoint_scopes_(arena),
  cpu_resources_(arena),
  replicas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireConfig)
}
SpireConfig::SpireConfig(const SpireConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      embedding_layer_names_(from.embedding_layer_names_),
      load_checkpoint_scopes_(from.load_checkpoint_scopes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  heads_.MergeFrom(from.heads_);
  cpu_resources_.MergeFrom(from.cpu_resources_);
  replicas_.MergeFrom(from.replicas_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  exp_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exp_type().empty()) {
    exp_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exp_type(),
      GetArena());
  }
  dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dataset().empty()) {
    dataset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dataset(),
      GetArena());
  }
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_type().empty()) {
    device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_type(),
      GetArena());
  }
  detection_layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_detection_layer_name().empty()) {
    detection_layer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_detection_layer_name(),
      GetArena());
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  embeddings_spire_conf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_embeddings_spire_conf().empty()) {
    embeddings_spire_conf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_embeddings_spire_conf(),
      GetArena());
  }
  landmarks_spire_conf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_landmarks_spire_conf().empty()) {
    landmarks_spire_conf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_landmarks_spire_conf(),
      GetArena());
  }
  if (from._internal_has_face_detect()) {
    face_detect_ = new ::FaceDetectConfig(*from.face_detect_);
  } else {
    face_detect_ = nullptr;
  }
  if (from._internal_has_meta()) {
    meta_ = new ::SpireMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_data_provider_params()) {
    data_provider_params_ = new ::DataProviderParams(*from.data_provider_params_);
  } else {
    data_provider_params_ = nullptr;
  }
  ::memcpy(&eid_, &from.eid_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_framework_) -
    reinterpret_cast<char*>(&eid_)) + sizeof(model_framework_));
  // @@protoc_insertion_point(copy_constructor:SpireConfig)
}

void SpireConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireConfig_proto_2fspire_2fspire_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exp_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detection_layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embeddings_spire_conf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  landmarks_spire_conf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&face_detect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_framework_) -
      reinterpret_cast<char*>(&face_detect_)) + sizeof(model_framework_));
}

SpireConfig::~SpireConfig() {
  // @@protoc_insertion_point(destructor:SpireConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exp_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detection_layer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embeddings_spire_conf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  landmarks_spire_conf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete face_detect_;
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_provider_params_;
}

void SpireConfig::ArenaDtor(void* object) {
  SpireConfig* _this = reinterpret_cast< SpireConfig* >(object);
  (void)_this;
}
void SpireConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireConfig& SpireConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireConfig_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  embedding_layer_names_.Clear();
  heads_.Clear();
  load_checkpoint_scopes_.Clear();
  cpu_resources_.Clear();
  replicas_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exp_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dataset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  detection_layer_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  embeddings_spire_conf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  landmarks_spire_conf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && face_detect_ != nullptr) {
    delete face_detect_;
  }
  face_detect_ = nullptr;
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArena() == nullptr && data_provider_params_ != nullptr) {
    delete data_provider_params_;
  }
  data_provider_params_ = nullptr;
  ::memset(&eid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_framework_) -
      reinterpret_cast<char*>(&eid_)) + sizeof(model_framework_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireConfig.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 eid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          eid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exp_type = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_exp_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireConfig.exp_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dataset = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_dataset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireConfig.dataset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gpu_memory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gpu_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gpu_batch_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gpu_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_device_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireConfig.device_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_devices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_devices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string detection_layer_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_detection_layer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireConfig.detection_layer_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float detection_score_threshold = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          detection_score_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string embedding_layer_names = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_embedding_layer_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireConfig.embedding_layer_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_multiheaded = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          is_multiheaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .MultiHeadConfig> heads = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&heads_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // .FaceDetectConfig face_detect = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_face_detect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireMeta meta = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataProviderParams data_provider_params = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_provider_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LoadCheckpointScope load_checkpoint_scopes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_load_checkpoint_scopes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // float timestamp_ms = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .SpireModelType model_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_model_type(static_cast<::SpireModelType>(val));
        } else goto handle_unusual;
        continue;
      // int64 compatibility_version_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          compatibility_version_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uuid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireConfig.uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireSpatialReduceType spatial_reduce_type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_spatial_reduce_type(static_cast<::SpireSpatialReduceType>(val));
        } else goto handle_unusual;
        continue;
      // map<string, .CPUResources> cpu_resources = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&cpu_resources_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .Replicas> replicas = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&replicas_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // string embeddings_spire_conf = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_embeddings_spire_conf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireConfig.embeddings_spire_conf"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 detection_max_bboxes = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          detection_max_bboxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireConfig.Framework model_framework = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_model_framework(static_cast<::SpireConfig_Framework>(val));
        } else goto handle_unusual;
        continue;
      // string landmarks_spire_conf = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_landmarks_spire_conf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireConfig.landmarks_spire_conf"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 eid = 2;
  if (this->eid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_eid(), target);
  }

  // string exp_type = 3 [deprecated = true];
  if (this->exp_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exp_type().data(), static_cast<int>(this->_internal_exp_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.exp_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exp_type(), target);
  }

  // string dataset = 4 [deprecated = true];
  if (this->dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset().data(), static_cast<int>(this->_internal_dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.dataset");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dataset(), target);
  }

  // int64 gpu_memory = 5;
  if (this->gpu_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_gpu_memory(), target);
  }

  // int32 gpu_batch_size = 6;
  if (this->gpu_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_gpu_batch_size(), target);
  }

  // string device_type = 7;
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_type().data(), static_cast<int>(this->_internal_device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.device_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_device_type(), target);
  }

  // int32 num_devices = 8;
  if (this->num_devices() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_num_devices(), target);
  }

  // string detection_layer_name = 9;
  if (this->detection_layer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detection_layer_name().data(), static_cast<int>(this->_internal_detection_layer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.detection_layer_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_detection_layer_name(), target);
  }

  // float detection_score_threshold = 10;
  if (!(this->detection_score_threshold() <= 0 && this->detection_score_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_detection_score_threshold(), target);
  }

  // repeated string embedding_layer_names = 11;
  for (int i = 0, n = this->_internal_embedding_layer_names_size(); i < n; i++) {
    const auto& s = this->_internal_embedding_layer_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.embedding_layer_names");
    target = stream->WriteString(11, s, target);
  }

  // bool is_multiheaded = 12;
  if (this->is_multiheaded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_multiheaded(), target);
  }

  // map<string, .MultiHeadConfig> heads = 13;
  if (!this->_internal_heads().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultiHeadConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpireConfig.HeadsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_heads().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_heads().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultiHeadConfig >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultiHeadConfig >::const_iterator
          it = this->_internal_heads().begin();
          it != this->_internal_heads().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SpireConfig_HeadsEntry_DoNotUse::Funcs::InternalSerialize(13, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultiHeadConfig >::const_iterator
          it = this->_internal_heads().begin();
          it != this->_internal_heads().end(); ++it) {
        target = SpireConfig_HeadsEntry_DoNotUse::Funcs::InternalSerialize(13, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .FaceDetectConfig face_detect = 14;
  if (this->has_face_detect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::face_detect(this), target, stream);
  }

  // .SpireMeta meta = 15;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::meta(this), target, stream);
  }

  // .DataProviderParams data_provider_params = 16;
  if (this->has_data_provider_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::data_provider_params(this), target, stream);
  }

  // repeated .LoadCheckpointScope load_checkpoint_scopes = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_load_checkpoint_scopes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_load_checkpoint_scopes(i), target, stream);
  }

  // float timestamp_ms = 18;
  if (!(this->timestamp_ms() <= 0 && this->timestamp_ms() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_timestamp_ms(), target);
  }

  // .SpireModelType model_type = 19;
  if (this->model_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_model_type(), target);
  }

  // int64 compatibility_version_id = 20;
  if (this->compatibility_version_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_compatibility_version_id(), target);
  }

  // string uuid = 21;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.uuid");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_uuid(), target);
  }

  // .SpireSpatialReduceType spatial_reduce_type = 22;
  if (this->spatial_reduce_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_spatial_reduce_type(), target);
  }

  // map<string, .CPUResources> cpu_resources = 23;
  if (!this->_internal_cpu_resources().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CPUResources >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpireConfig.CpuResourcesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cpu_resources().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cpu_resources().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CPUResources >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CPUResources >::const_iterator
          it = this->_internal_cpu_resources().begin();
          it != this->_internal_cpu_resources().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SpireConfig_CpuResourcesEntry_DoNotUse::Funcs::InternalSerialize(23, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CPUResources >::const_iterator
          it = this->_internal_cpu_resources().begin();
          it != this->_internal_cpu_resources().end(); ++it) {
        target = SpireConfig_CpuResourcesEntry_DoNotUse::Funcs::InternalSerialize(23, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .Replicas> replicas = 24;
  if (!this->_internal_replicas().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Replicas >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpireConfig.ReplicasEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_replicas().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_replicas().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Replicas >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Replicas >::const_iterator
          it = this->_internal_replicas().begin();
          it != this->_internal_replicas().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SpireConfig_ReplicasEntry_DoNotUse::Funcs::InternalSerialize(24, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Replicas >::const_iterator
          it = this->_internal_replicas().begin();
          it != this->_internal_replicas().end(); ++it) {
        target = SpireConfig_ReplicasEntry_DoNotUse::Funcs::InternalSerialize(24, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string embeddings_spire_conf = 25;
  if (this->embeddings_spire_conf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_embeddings_spire_conf().data(), static_cast<int>(this->_internal_embeddings_spire_conf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.embeddings_spire_conf");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_embeddings_spire_conf(), target);
  }

  // int32 detection_max_bboxes = 26;
  if (this->detection_max_bboxes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_detection_max_bboxes(), target);
  }

  // .SpireConfig.Framework model_framework = 27;
  if (this->model_framework() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->_internal_model_framework(), target);
  }

  // string landmarks_spire_conf = 28;
  if (this->landmarks_spire_conf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_landmarks_spire_conf().data(), static_cast<int>(this->_internal_landmarks_spire_conf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.landmarks_spire_conf");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_landmarks_spire_conf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireConfig)
  return target;
}

size_t SpireConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string embedding_layer_names = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(embedding_layer_names_.size());
  for (int i = 0, n = embedding_layer_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      embedding_layer_names_.Get(i));
  }

  // map<string, .MultiHeadConfig> heads = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_heads_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultiHeadConfig >::const_iterator
      it = this->_internal_heads().begin();
      it != this->_internal_heads().end(); ++it) {
    total_size += SpireConfig_HeadsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .LoadCheckpointScope load_checkpoint_scopes = 17;
  total_size += 2UL * this->_internal_load_checkpoint_scopes_size();
  for (const auto& msg : this->load_checkpoint_scopes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .CPUResources> cpu_resources = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cpu_resources_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CPUResources >::const_iterator
      it = this->_internal_cpu_resources().begin();
      it != this->_internal_cpu_resources().end(); ++it) {
    total_size += SpireConfig_CpuResourcesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .Replicas> replicas = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_replicas_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Replicas >::const_iterator
      it = this->_internal_replicas().begin();
      it != this->_internal_replicas().end(); ++it) {
    total_size += SpireConfig_ReplicasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string exp_type = 3 [deprecated = true];
  if (this->exp_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exp_type());
  }

  // string dataset = 4 [deprecated = true];
  if (this->dataset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset());
  }

  // string device_type = 7;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_type());
  }

  // string detection_layer_name = 9;
  if (this->detection_layer_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detection_layer_name());
  }

  // string uuid = 21;
  if (this->uuid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string embeddings_spire_conf = 25;
  if (this->embeddings_spire_conf().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_embeddings_spire_conf());
  }

  // string landmarks_spire_conf = 28;
  if (this->landmarks_spire_conf().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_landmarks_spire_conf());
  }

  // .FaceDetectConfig face_detect = 14;
  if (this->has_face_detect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_detect_);
  }

  // .SpireMeta meta = 15;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataProviderParams data_provider_params = 16;
  if (this->has_data_provider_params()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_provider_params_);
  }

  // int64 eid = 2;
  if (this->eid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_eid());
  }

  // int64 gpu_memory = 5;
  if (this->gpu_memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gpu_memory());
  }

  // int32 gpu_batch_size = 6;
  if (this->gpu_batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gpu_batch_size());
  }

  // int32 num_devices = 8;
  if (this->num_devices() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_devices());
  }

  // float detection_score_threshold = 10;
  if (!(this->detection_score_threshold() <= 0 && this->detection_score_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_multiheaded = 12;
  if (this->is_multiheaded() != 0) {
    total_size += 1 + 1;
  }

  // float timestamp_ms = 18;
  if (!(this->timestamp_ms() <= 0 && this->timestamp_ms() >= 0)) {
    total_size += 2 + 4;
  }

  // .SpireModelType model_type = 19;
  if (this->model_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_model_type());
  }

  // int64 compatibility_version_id = 20;
  if (this->compatibility_version_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_compatibility_version_id());
  }

  // .SpireSpatialReduceType spatial_reduce_type = 22;
  if (this->spatial_reduce_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_spatial_reduce_type());
  }

  // int32 detection_max_bboxes = 26;
  if (this->detection_max_bboxes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_detection_max_bboxes());
  }

  // .SpireConfig.Framework model_framework = 27;
  if (this->model_framework() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_model_framework());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireConfig)
    MergeFrom(*source);
  }
}

void SpireConfig::MergeFrom(const SpireConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  embedding_layer_names_.MergeFrom(from.embedding_layer_names_);
  heads_.MergeFrom(from.heads_);
  load_checkpoint_scopes_.MergeFrom(from.load_checkpoint_scopes_);
  cpu_resources_.MergeFrom(from.cpu_resources_);
  replicas_.MergeFrom(from.replicas_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.exp_type().size() > 0) {
    _internal_set_exp_type(from._internal_exp_type());
  }
  if (from.dataset().size() > 0) {
    _internal_set_dataset(from._internal_dataset());
  }
  if (from.device_type().size() > 0) {
    _internal_set_device_type(from._internal_device_type());
  }
  if (from.detection_layer_name().size() > 0) {
    _internal_set_detection_layer_name(from._internal_detection_layer_name());
  }
  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.embeddings_spire_conf().size() > 0) {
    _internal_set_embeddings_spire_conf(from._internal_embeddings_spire_conf());
  }
  if (from.landmarks_spire_conf().size() > 0) {
    _internal_set_landmarks_spire_conf(from._internal_landmarks_spire_conf());
  }
  if (from.has_face_detect()) {
    _internal_mutable_face_detect()->::FaceDetectConfig::MergeFrom(from._internal_face_detect());
  }
  if (from.has_meta()) {
    _internal_mutable_meta()->::SpireMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_data_provider_params()) {
    _internal_mutable_data_provider_params()->::DataProviderParams::MergeFrom(from._internal_data_provider_params());
  }
  if (from.eid() != 0) {
    _internal_set_eid(from._internal_eid());
  }
  if (from.gpu_memory() != 0) {
    _internal_set_gpu_memory(from._internal_gpu_memory());
  }
  if (from.gpu_batch_size() != 0) {
    _internal_set_gpu_batch_size(from._internal_gpu_batch_size());
  }
  if (from.num_devices() != 0) {
    _internal_set_num_devices(from._internal_num_devices());
  }
  if (!(from.detection_score_threshold() <= 0 && from.detection_score_threshold() >= 0)) {
    _internal_set_detection_score_threshold(from._internal_detection_score_threshold());
  }
  if (from.is_multiheaded() != 0) {
    _internal_set_is_multiheaded(from._internal_is_multiheaded());
  }
  if (!(from.timestamp_ms() <= 0 && from.timestamp_ms() >= 0)) {
    _internal_set_timestamp_ms(from._internal_timestamp_ms());
  }
  if (from.model_type() != 0) {
    _internal_set_model_type(from._internal_model_type());
  }
  if (from.compatibility_version_id() != 0) {
    _internal_set_compatibility_version_id(from._internal_compatibility_version_id());
  }
  if (from.spatial_reduce_type() != 0) {
    _internal_set_spatial_reduce_type(from._internal_spatial_reduce_type());
  }
  if (from.detection_max_bboxes() != 0) {
    _internal_set_detection_max_bboxes(from._internal_detection_max_bboxes());
  }
  if (from.model_framework() != 0) {
    _internal_set_model_framework(from._internal_model_framework());
  }
}

void SpireConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireConfig::CopyFrom(const SpireConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireConfig::IsInitialized() const {
  return true;
}

void SpireConfig::InternalSwap(SpireConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  embedding_layer_names_.InternalSwap(&other->embedding_layer_names_);
  heads_.Swap(&other->heads_);
  load_checkpoint_scopes_.InternalSwap(&other->load_checkpoint_scopes_);
  cpu_resources_.Swap(&other->cpu_resources_);
  replicas_.Swap(&other->replicas_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exp_type_.Swap(&other->exp_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dataset_.Swap(&other->dataset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_type_.Swap(&other->device_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  detection_layer_name_.Swap(&other->detection_layer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  embeddings_spire_conf_.Swap(&other->embeddings_spire_conf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  landmarks_spire_conf_.Swap(&other->landmarks_spire_conf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireConfig, model_framework_)
      + sizeof(SpireConfig::model_framework_)
      - PROTOBUF_FIELD_OFFSET(SpireConfig, face_detect_)>(
          reinterpret_cast<char*>(&face_detect_),
          reinterpret_cast<char*>(&other->face_detect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Replicas::InitAsDefaultInstance() {
}
class Replicas::_Internal {
 public:
};

Replicas::Replicas(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Replicas)
}
Replicas::Replicas(const Replicas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&minimum_, &from.minimum_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_) -
    reinterpret_cast<char*>(&minimum_)) + sizeof(maximum_));
  // @@protoc_insertion_point(copy_constructor:Replicas)
}

void Replicas::SharedCtor() {
  ::memset(&minimum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_) -
      reinterpret_cast<char*>(&minimum_)) + sizeof(maximum_));
}

Replicas::~Replicas() {
  // @@protoc_insertion_point(destructor:Replicas)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Replicas::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Replicas::ArenaDtor(void* object) {
  Replicas* _this = reinterpret_cast< Replicas* >(object);
  (void)_this;
}
void Replicas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Replicas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Replicas& Replicas::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Replicas_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void Replicas::Clear() {
// @@protoc_insertion_point(message_clear_start:Replicas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&minimum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_) -
      reinterpret_cast<char*>(&minimum_)) + sizeof(maximum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Replicas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 minimum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maximum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Replicas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Replicas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 minimum = 1;
  if (this->minimum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_minimum(), target);
  }

  // int32 maximum = 2;
  if (this->maximum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maximum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Replicas)
  return target;
}

size_t Replicas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Replicas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 minimum = 1;
  if (this->minimum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minimum());
  }

  // int32 maximum = 2;
  if (this->maximum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maximum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Replicas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Replicas)
  GOOGLE_DCHECK_NE(&from, this);
  const Replicas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Replicas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Replicas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Replicas)
    MergeFrom(*source);
  }
}

void Replicas::MergeFrom(const Replicas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Replicas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.minimum() != 0) {
    _internal_set_minimum(from._internal_minimum());
  }
  if (from.maximum() != 0) {
    _internal_set_maximum(from._internal_maximum());
  }
}

void Replicas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Replicas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Replicas::CopyFrom(const Replicas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Replicas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Replicas::IsInitialized() const {
  return true;
}

void Replicas::InternalSwap(Replicas* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Replicas, maximum_)
      + sizeof(Replicas::maximum_)
      - PROTOBUF_FIELD_OFFSET(Replicas, minimum_)>(
          reinterpret_cast<char*>(&minimum_),
          reinterpret_cast<char*>(&other->minimum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Replicas::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CPUResources::InitAsDefaultInstance() {
}
class CPUResources::_Internal {
 public:
};

CPUResources::CPUResources(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPUResources)
}
CPUResources::CPUResources(const CPUResources& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cpu_core_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpu_core_request().empty()) {
    cpu_core_request_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cpu_core_request(),
      GetArena());
  }
  cpu_core_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpu_core_limit().empty()) {
    cpu_core_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cpu_core_limit(),
      GetArena());
  }
  cpu_mem_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpu_mem_request().empty()) {
    cpu_mem_request_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cpu_mem_request(),
      GetArena());
  }
  cpu_mem_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpu_mem_limit().empty()) {
    cpu_mem_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cpu_mem_limit(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CPUResources)
}

void CPUResources::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPUResources_proto_2fspire_2fspire_2eproto.base);
  cpu_core_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_core_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_mem_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_mem_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CPUResources::~CPUResources() {
  // @@protoc_insertion_point(destructor:CPUResources)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPUResources::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cpu_core_request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_core_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_mem_request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_mem_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPUResources::ArenaDtor(void* object) {
  CPUResources* _this = reinterpret_cast< CPUResources* >(object);
  (void)_this;
}
void CPUResources::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPUResources::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPUResources& CPUResources::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPUResources_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void CPUResources::Clear() {
// @@protoc_insertion_point(message_clear_start:CPUResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpu_core_request_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cpu_core_limit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cpu_mem_request_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cpu_mem_limit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPUResources::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cpu_core_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cpu_core_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPUResources.cpu_core_request"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cpu_core_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cpu_core_limit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPUResources.cpu_core_limit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cpu_mem_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cpu_mem_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPUResources.cpu_mem_request"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cpu_mem_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cpu_mem_limit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPUResources.cpu_mem_limit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPUResources::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPUResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cpu_core_request = 1;
  if (this->cpu_core_request().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu_core_request().data(), static_cast<int>(this->_internal_cpu_core_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CPUResources.cpu_core_request");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cpu_core_request(), target);
  }

  // string cpu_core_limit = 2;
  if (this->cpu_core_limit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu_core_limit().data(), static_cast<int>(this->_internal_cpu_core_limit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CPUResources.cpu_core_limit");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cpu_core_limit(), target);
  }

  // string cpu_mem_request = 3;
  if (this->cpu_mem_request().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu_mem_request().data(), static_cast<int>(this->_internal_cpu_mem_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CPUResources.cpu_mem_request");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cpu_mem_request(), target);
  }

  // string cpu_mem_limit = 4;
  if (this->cpu_mem_limit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu_mem_limit().data(), static_cast<int>(this->_internal_cpu_mem_limit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CPUResources.cpu_mem_limit");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cpu_mem_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPUResources)
  return target;
}

size_t CPUResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPUResources)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cpu_core_request = 1;
  if (this->cpu_core_request().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu_core_request());
  }

  // string cpu_core_limit = 2;
  if (this->cpu_core_limit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu_core_limit());
  }

  // string cpu_mem_request = 3;
  if (this->cpu_mem_request().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu_mem_request());
  }

  // string cpu_mem_limit = 4;
  if (this->cpu_mem_limit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu_mem_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPUResources::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPUResources)
  GOOGLE_DCHECK_NE(&from, this);
  const CPUResources* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPUResources>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPUResources)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPUResources)
    MergeFrom(*source);
  }
}

void CPUResources::MergeFrom(const CPUResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPUResources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cpu_core_request().size() > 0) {
    _internal_set_cpu_core_request(from._internal_cpu_core_request());
  }
  if (from.cpu_core_limit().size() > 0) {
    _internal_set_cpu_core_limit(from._internal_cpu_core_limit());
  }
  if (from.cpu_mem_request().size() > 0) {
    _internal_set_cpu_mem_request(from._internal_cpu_mem_request());
  }
  if (from.cpu_mem_limit().size() > 0) {
    _internal_set_cpu_mem_limit(from._internal_cpu_mem_limit());
  }
}

void CPUResources::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPUResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPUResources::CopyFrom(const CPUResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPUResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPUResources::IsInitialized() const {
  return true;
}

void CPUResources::InternalSwap(CPUResources* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cpu_core_request_.Swap(&other->cpu_core_request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cpu_core_limit_.Swap(&other->cpu_core_limit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cpu_mem_request_.Swap(&other->cpu_mem_request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cpu_mem_limit_.Swap(&other->cpu_mem_limit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CPUResources::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireMeta::InitAsDefaultInstance() {
}
class SpireMeta::_Internal {
 public:
};

SpireMeta::SpireMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  models_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireMeta)
}
SpireMeta::SpireMeta(const SpireMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      models_(from.models_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lopq_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lopq_model().empty()) {
    lopq_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lopq_model(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:SpireMeta)
}

void SpireMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireMeta_proto_2fspire_2fspire_2eproto.base);
  lopq_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SpireMeta::~SpireMeta() {
  // @@protoc_insertion_point(destructor:SpireMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lopq_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpireMeta::ArenaDtor(void* object) {
  SpireMeta* _this = reinterpret_cast< SpireMeta* >(object);
  (void)_this;
}
void SpireMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireMeta& SpireMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireMeta_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  lopq_model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string models = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_models();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireMeta.models"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string lopq_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lopq_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireMeta.lopq_model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string models = 1;
  for (int i = 0, n = this->_internal_models_size(); i < n; i++) {
    const auto& s = this->_internal_models(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireMeta.models");
    target = stream->WriteString(1, s, target);
  }

  // string lopq_model = 2;
  if (this->lopq_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lopq_model().data(), static_cast<int>(this->_internal_lopq_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireMeta.lopq_model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lopq_model(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireMeta)
  return target;
}

size_t SpireMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string models = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(models_.size());
  for (int i = 0, n = models_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      models_.Get(i));
  }

  // string lopq_model = 2;
  if (this->lopq_model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lopq_model());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireMeta)
    MergeFrom(*source);
  }
}

void SpireMeta::MergeFrom(const SpireMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  if (from.lopq_model().size() > 0) {
    _internal_set_lopq_model(from._internal_lopq_model());
  }
}

void SpireMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireMeta::CopyFrom(const SpireMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireMeta::IsInitialized() const {
  return true;
}

void SpireMeta::InternalSwap(SpireMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  models_.InternalSwap(&other->models_);
  lopq_model_.Swap(&other->lopq_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireGetConfigRequest::InitAsDefaultInstance() {
  ::_SpireGetConfigRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
}
class SpireGetConfigRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireGetConfigRequest* msg);
};

const ::RequestMeta&
SpireGetConfigRequest::_Internal::meta(const SpireGetConfigRequest* msg) {
  return *msg->meta_;
}
void SpireGetConfigRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
SpireGetConfigRequest::SpireGetConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireGetConfigRequest)
}
SpireGetConfigRequest::SpireGetConfigRequest(const SpireGetConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  use_lock_ = from.use_lock_;
  // @@protoc_insertion_point(copy_constructor:SpireGetConfigRequest)
}

void SpireGetConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireGetConfigRequest_proto_2fspire_2fspire_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_lock_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(use_lock_));
}

SpireGetConfigRequest::~SpireGetConfigRequest() {
  // @@protoc_insertion_point(destructor:SpireGetConfigRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireGetConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meta_;
}

void SpireGetConfigRequest::ArenaDtor(void* object) {
  SpireGetConfigRequest* _this = reinterpret_cast< SpireGetConfigRequest* >(object);
  (void)_this;
}
void SpireGetConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireGetConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireGetConfigRequest& SpireGetConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireGetConfigRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireGetConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireGetConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  use_lock_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireGetConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_lock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          use_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireGetConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireGetConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // bool use_lock = 2;
  if (this->use_lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_lock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireGetConfigRequest)
  return target;
}

size_t SpireGetConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireGetConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // bool use_lock = 2;
  if (this->use_lock() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireGetConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireGetConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireGetConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireGetConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireGetConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireGetConfigRequest)
    MergeFrom(*source);
  }
}

void SpireGetConfigRequest::MergeFrom(const SpireGetConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireGetConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.use_lock() != 0) {
    _internal_set_use_lock(from._internal_use_lock());
  }
}

void SpireGetConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireGetConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireGetConfigRequest::CopyFrom(const SpireGetConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireGetConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireGetConfigRequest::IsInitialized() const {
  return true;
}

void SpireGetConfigRequest::InternalSwap(SpireGetConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireGetConfigRequest, use_lock_)
      + sizeof(SpireGetConfigRequest::use_lock_)
      - PROTOBUF_FIELD_OFFSET(SpireGetConfigRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireGetConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireGetConfigResponse::InitAsDefaultInstance() {
  ::_SpireGetConfigResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_SpireGetConfigResponse_default_instance_._instance.get_mutable()->config_ = const_cast< ::SpireConfig*>(
      ::SpireConfig::internal_default_instance());
}
class SpireGetConfigResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireGetConfigResponse* msg);
  static const ::SpireConfig& config(const SpireGetConfigResponse* msg);
};

const ::ResponseStatus&
SpireGetConfigResponse::_Internal::status(const SpireGetConfigResponse* msg) {
  return *msg->status_;
}
const ::SpireConfig&
SpireGetConfigResponse::_Internal::config(const SpireGetConfigResponse* msg) {
  return *msg->config_;
}
void SpireGetConfigResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SpireGetConfigResponse::SpireGetConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireGetConfigResponse)
}
SpireGetConfigResponse::SpireGetConfigResponse(const SpireGetConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_json().empty()) {
    config_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_config_json(),
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::SpireConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireGetConfigResponse)
}

void SpireGetConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireGetConfigResponse_proto_2fspire_2fspire_2eproto.base);
  config_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&status_)) + sizeof(config_));
}

SpireGetConfigResponse::~SpireGetConfigResponse() {
  // @@protoc_insertion_point(destructor:SpireGetConfigResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireGetConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  config_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete config_;
}

void SpireGetConfigResponse::ArenaDtor(void* object) {
  SpireGetConfigResponse* _this = reinterpret_cast< SpireGetConfigResponse* >(object);
  (void)_this;
}
void SpireGetConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireGetConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireGetConfigResponse& SpireGetConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireGetConfigResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireGetConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireGetConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_json_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireGetConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string config_json = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_config_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireGetConfigResponse.config_json"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireConfig config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireGetConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireGetConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string config_json = 2;
  if (this->config_json().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config_json().data(), static_cast<int>(this->_internal_config_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireGetConfigResponse.config_json");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_config_json(), target);
  }

  // .SpireConfig config = 3;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireGetConfigResponse)
  return target;
}

size_t SpireGetConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireGetConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string config_json = 2;
  if (this->config_json().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_json());
  }

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .SpireConfig config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireGetConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireGetConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireGetConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireGetConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireGetConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireGetConfigResponse)
    MergeFrom(*source);
  }
}

void SpireGetConfigResponse::MergeFrom(const SpireGetConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireGetConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_json().size() > 0) {
    _internal_set_config_json(from._internal_config_json());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
  if (from.has_config()) {
    _internal_mutable_config()->::SpireConfig::MergeFrom(from._internal_config());
  }
}

void SpireGetConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireGetConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireGetConfigResponse::CopyFrom(const SpireGetConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireGetConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireGetConfigResponse::IsInitialized() const {
  return true;
}

void SpireGetConfigResponse::InternalSwap(SpireGetConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_json_.Swap(&other->config_json_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireGetConfigResponse, config_)
      + sizeof(SpireGetConfigResponse::config_)
      - PROTOBUF_FIELD_OFFSET(SpireGetConfigResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireGetConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireSetConfigRequest::InitAsDefaultInstance() {
  ::_SpireSetConfigRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_SpireSetConfigRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::SpireConfig*>(
      ::SpireConfig::internal_default_instance());
}
class SpireSetConfigRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireSetConfigRequest* msg);
  static const ::SpireConfig& config(const SpireSetConfigRequest* msg);
};

const ::RequestMeta&
SpireSetConfigRequest::_Internal::meta(const SpireSetConfigRequest* msg) {
  return *msg->meta_;
}
const ::SpireConfig&
SpireSetConfigRequest::_Internal::config(const SpireSetConfigRequest* msg) {
  return *msg->config_;
}
void SpireSetConfigRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
SpireSetConfigRequest::SpireSetConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireSetConfigRequest)
}
SpireSetConfigRequest::SpireSetConfigRequest(const SpireSetConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_json().empty()) {
    config_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_config_json(),
      GetArena());
  }
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::SpireConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireSetConfigRequest)
}

void SpireSetConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireSetConfigRequest_proto_2fspire_2fspire_2eproto.base);
  config_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(config_));
}

SpireSetConfigRequest::~SpireSetConfigRequest() {
  // @@protoc_insertion_point(destructor:SpireSetConfigRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireSetConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  config_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete config_;
}

void SpireSetConfigRequest::ArenaDtor(void* object) {
  SpireSetConfigRequest* _this = reinterpret_cast< SpireSetConfigRequest* >(object);
  (void)_this;
}
void SpireSetConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireSetConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireSetConfigRequest& SpireSetConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireSetConfigRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireSetConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireSetConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_json_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireSetConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string config_json = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_config_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireSetConfigRequest.config_json"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireConfig config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireSetConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireSetConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // string config_json = 2;
  if (this->config_json().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config_json().data(), static_cast<int>(this->_internal_config_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireSetConfigRequest.config_json");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_config_json(), target);
  }

  // .SpireConfig config = 3;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireSetConfigRequest)
  return target;
}

size_t SpireSetConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireSetConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string config_json = 2;
  if (this->config_json().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_json());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .SpireConfig config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireSetConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireSetConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireSetConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireSetConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireSetConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireSetConfigRequest)
    MergeFrom(*source);
  }
}

void SpireSetConfigRequest::MergeFrom(const SpireSetConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireSetConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_json().size() > 0) {
    _internal_set_config_json(from._internal_config_json());
  }
  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_config()) {
    _internal_mutable_config()->::SpireConfig::MergeFrom(from._internal_config());
  }
}

void SpireSetConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireSetConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireSetConfigRequest::CopyFrom(const SpireSetConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireSetConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireSetConfigRequest::IsInitialized() const {
  return true;
}

void SpireSetConfigRequest::InternalSwap(SpireSetConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_json_.Swap(&other->config_json_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireSetConfigRequest, config_)
      + sizeof(SpireSetConfigRequest::config_)
      - PROTOBUF_FIELD_OFFSET(SpireSetConfigRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireSetConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireSetConfigResponse::InitAsDefaultInstance() {
  ::_SpireSetConfigResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
}
class SpireSetConfigResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireSetConfigResponse* msg);
};

const ::ResponseStatus&
SpireSetConfigResponse::_Internal::status(const SpireSetConfigResponse* msg) {
  return *msg->status_;
}
void SpireSetConfigResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SpireSetConfigResponse::SpireSetConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireSetConfigResponse)
}
SpireSetConfigResponse::SpireSetConfigResponse(const SpireSetConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireSetConfigResponse)
}

void SpireSetConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireSetConfigResponse_proto_2fspire_2fspire_2eproto.base);
  status_ = nullptr;
}

SpireSetConfigResponse::~SpireSetConfigResponse() {
  // @@protoc_insertion_point(destructor:SpireSetConfigResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireSetConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void SpireSetConfigResponse::ArenaDtor(void* object) {
  SpireSetConfigResponse* _this = reinterpret_cast< SpireSetConfigResponse* >(object);
  (void)_this;
}
void SpireSetConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireSetConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireSetConfigResponse& SpireSetConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireSetConfigResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireSetConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireSetConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireSetConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireSetConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireSetConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireSetConfigResponse)
  return target;
}

size_t SpireSetConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireSetConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireSetConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireSetConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireSetConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireSetConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireSetConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireSetConfigResponse)
    MergeFrom(*source);
  }
}

void SpireSetConfigResponse::MergeFrom(const SpireSetConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireSetConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
}

void SpireSetConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireSetConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireSetConfigResponse::CopyFrom(const SpireSetConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireSetConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireSetConfigResponse::IsInitialized() const {
  return true;
}

void SpireSetConfigResponse::InternalSwap(SpireSetConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireSetConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireGetStateRequest::InitAsDefaultInstance() {
  ::_SpireGetStateRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
}
class SpireGetStateRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireGetStateRequest* msg);
};

const ::RequestMeta&
SpireGetStateRequest::_Internal::meta(const SpireGetStateRequest* msg) {
  return *msg->meta_;
}
void SpireGetStateRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
SpireGetStateRequest::SpireGetStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireGetStateRequest)
}
SpireGetStateRequest::SpireGetStateRequest(const SpireGetStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireGetStateRequest)
}

void SpireGetStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireGetStateRequest_proto_2fspire_2fspire_2eproto.base);
  meta_ = nullptr;
}

SpireGetStateRequest::~SpireGetStateRequest() {
  // @@protoc_insertion_point(destructor:SpireGetStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireGetStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meta_;
}

void SpireGetStateRequest::ArenaDtor(void* object) {
  SpireGetStateRequest* _this = reinterpret_cast< SpireGetStateRequest* >(object);
  (void)_this;
}
void SpireGetStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireGetStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireGetStateRequest& SpireGetStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireGetStateRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireGetStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireGetStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireGetStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireGetStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireGetStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireGetStateRequest)
  return target;
}

size_t SpireGetStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireGetStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireGetStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireGetStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireGetStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireGetStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireGetStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireGetStateRequest)
    MergeFrom(*source);
  }
}

void SpireGetStateRequest::MergeFrom(const SpireGetStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireGetStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
}

void SpireGetStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireGetStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireGetStateRequest::CopyFrom(const SpireGetStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireGetStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireGetStateRequest::IsInitialized() const {
  return true;
}

void SpireGetStateRequest::InternalSwap(SpireGetStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(meta_, other->meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireGetStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireGetStateResponse::InitAsDefaultInstance() {
  ::_SpireGetStateResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_SpireGetStateResponse_default_instance_._instance.get_mutable()->last_inference_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class SpireGetStateResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireGetStateResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_inference_time(const SpireGetStateResponse* msg);
};

const ::ResponseStatus&
SpireGetStateResponse::_Internal::status(const SpireGetStateResponse* msg) {
  return *msg->status_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
SpireGetStateResponse::_Internal::last_inference_time(const SpireGetStateResponse* msg) {
  return *msg->last_inference_time_;
}
void SpireGetStateResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SpireGetStateResponse::clear_last_inference_time() {
  if (GetArena() == nullptr && last_inference_time_ != nullptr) {
    delete last_inference_time_;
  }
  last_inference_time_ = nullptr;
}
SpireGetStateResponse::SpireGetStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireGetStateResponse)
}
SpireGetStateResponse::SpireGetStateResponse(const SpireGetStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_last_inference_time()) {
    last_inference_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_inference_time_);
  } else {
    last_inference_time_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SpireGetStateResponse)
}

void SpireGetStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireGetStateResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

SpireGetStateResponse::~SpireGetStateResponse() {
  // @@protoc_insertion_point(destructor:SpireGetStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireGetStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete last_inference_time_;
}

void SpireGetStateResponse::ArenaDtor(void* object) {
  SpireGetStateResponse* _this = reinterpret_cast< SpireGetStateResponse* >(object);
  (void)_this;
}
void SpireGetStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireGetStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireGetStateResponse& SpireGetStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireGetStateResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireGetStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireGetStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && last_inference_time_ != nullptr) {
    delete last_inference_time_;
  }
  last_inference_time_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireGetStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::SpireState>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_inference_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_inference_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireGetStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireGetStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .SpireState state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .google.protobuf.Timestamp last_inference_time = 3;
  if (this->has_last_inference_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::last_inference_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireGetStateResponse)
  return target;
}

size_t SpireGetStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireGetStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Timestamp last_inference_time = 3;
  if (this->has_last_inference_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_inference_time_);
  }

  // .SpireState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireGetStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireGetStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireGetStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireGetStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireGetStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireGetStateResponse)
    MergeFrom(*source);
  }
}

void SpireGetStateResponse::MergeFrom(const SpireGetStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireGetStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
  if (from.has_last_inference_time()) {
    _internal_mutable_last_inference_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_inference_time());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SpireGetStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireGetStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireGetStateResponse::CopyFrom(const SpireGetStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireGetStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireGetStateResponse::IsInitialized() const {
  return true;
}

void SpireGetStateResponse::InternalSwap(SpireGetStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireGetStateResponse, state_)
      + sizeof(SpireGetStateResponse::state_)
      - PROTOBUF_FIELD_OFFSET(SpireGetStateResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireGetStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireMaybeJITRequest::InitAsDefaultInstance() {
  ::_SpireMaybeJITRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
}
class SpireMaybeJITRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireMaybeJITRequest* msg);
};

const ::RequestMeta&
SpireMaybeJITRequest::_Internal::meta(const SpireMaybeJITRequest* msg) {
  return *msg->meta_;
}
void SpireMaybeJITRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
SpireMaybeJITRequest::SpireMaybeJITRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireMaybeJITRequest)
}
SpireMaybeJITRequest::SpireMaybeJITRequest(const SpireMaybeJITRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireMaybeJITRequest)
}

void SpireMaybeJITRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireMaybeJITRequest_proto_2fspire_2fspire_2eproto.base);
  meta_ = nullptr;
}

SpireMaybeJITRequest::~SpireMaybeJITRequest() {
  // @@protoc_insertion_point(destructor:SpireMaybeJITRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireMaybeJITRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meta_;
}

void SpireMaybeJITRequest::ArenaDtor(void* object) {
  SpireMaybeJITRequest* _this = reinterpret_cast< SpireMaybeJITRequest* >(object);
  (void)_this;
}
void SpireMaybeJITRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireMaybeJITRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireMaybeJITRequest& SpireMaybeJITRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireMaybeJITRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireMaybeJITRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireMaybeJITRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireMaybeJITRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireMaybeJITRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireMaybeJITRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireMaybeJITRequest)
  return target;
}

size_t SpireMaybeJITRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireMaybeJITRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireMaybeJITRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireMaybeJITRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireMaybeJITRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireMaybeJITRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireMaybeJITRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireMaybeJITRequest)
    MergeFrom(*source);
  }
}

void SpireMaybeJITRequest::MergeFrom(const SpireMaybeJITRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireMaybeJITRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
}

void SpireMaybeJITRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireMaybeJITRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireMaybeJITRequest::CopyFrom(const SpireMaybeJITRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireMaybeJITRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireMaybeJITRequest::IsInitialized() const {
  return true;
}

void SpireMaybeJITRequest::InternalSwap(SpireMaybeJITRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(meta_, other->meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireMaybeJITRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireMaybeJITResponse::InitAsDefaultInstance() {
  ::_SpireMaybeJITResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
}
class SpireMaybeJITResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireMaybeJITResponse* msg);
};

const ::ResponseStatus&
SpireMaybeJITResponse::_Internal::status(const SpireMaybeJITResponse* msg) {
  return *msg->status_;
}
void SpireMaybeJITResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SpireMaybeJITResponse::SpireMaybeJITResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireMaybeJITResponse)
}
SpireMaybeJITResponse::SpireMaybeJITResponse(const SpireMaybeJITResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SpireMaybeJITResponse)
}

void SpireMaybeJITResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireMaybeJITResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

SpireMaybeJITResponse::~SpireMaybeJITResponse() {
  // @@protoc_insertion_point(destructor:SpireMaybeJITResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireMaybeJITResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void SpireMaybeJITResponse::ArenaDtor(void* object) {
  SpireMaybeJITResponse* _this = reinterpret_cast< SpireMaybeJITResponse* >(object);
  (void)_this;
}
void SpireMaybeJITResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireMaybeJITResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireMaybeJITResponse& SpireMaybeJITResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireMaybeJITResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireMaybeJITResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireMaybeJITResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireMaybeJITResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::SpireState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireMaybeJITResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireMaybeJITResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .SpireState state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireMaybeJITResponse)
  return target;
}

size_t SpireMaybeJITResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireMaybeJITResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .SpireState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireMaybeJITResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireMaybeJITResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireMaybeJITResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireMaybeJITResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireMaybeJITResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireMaybeJITResponse)
    MergeFrom(*source);
  }
}

void SpireMaybeJITResponse::MergeFrom(const SpireMaybeJITResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireMaybeJITResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SpireMaybeJITResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireMaybeJITResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireMaybeJITResponse::CopyFrom(const SpireMaybeJITResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireMaybeJITResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireMaybeJITResponse::IsInitialized() const {
  return true;
}

void SpireMaybeJITResponse::InternalSwap(SpireMaybeJITResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireMaybeJITResponse, state_)
      + sizeof(SpireMaybeJITResponse::state_)
      - PROTOBUF_FIELD_OFFSET(SpireMaybeJITResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireMaybeJITResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireStopServingRequest::InitAsDefaultInstance() {
  ::_SpireStopServingRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
}
class SpireStopServingRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireStopServingRequest* msg);
};

const ::RequestMeta&
SpireStopServingRequest::_Internal::meta(const SpireStopServingRequest* msg) {
  return *msg->meta_;
}
void SpireStopServingRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
SpireStopServingRequest::SpireStopServingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireStopServingRequest)
}
SpireStopServingRequest::SpireStopServingRequest(const SpireStopServingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireStopServingRequest)
}

void SpireStopServingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireStopServingRequest_proto_2fspire_2fspire_2eproto.base);
  meta_ = nullptr;
}

SpireStopServingRequest::~SpireStopServingRequest() {
  // @@protoc_insertion_point(destructor:SpireStopServingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireStopServingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meta_;
}

void SpireStopServingRequest::ArenaDtor(void* object) {
  SpireStopServingRequest* _this = reinterpret_cast< SpireStopServingRequest* >(object);
  (void)_this;
}
void SpireStopServingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireStopServingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireStopServingRequest& SpireStopServingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireStopServingRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireStopServingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireStopServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireStopServingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireStopServingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireStopServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireStopServingRequest)
  return target;
}

size_t SpireStopServingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireStopServingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireStopServingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireStopServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireStopServingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireStopServingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireStopServingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireStopServingRequest)
    MergeFrom(*source);
  }
}

void SpireStopServingRequest::MergeFrom(const SpireStopServingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireStopServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
}

void SpireStopServingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireStopServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireStopServingRequest::CopyFrom(const SpireStopServingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireStopServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireStopServingRequest::IsInitialized() const {
  return true;
}

void SpireStopServingRequest::InternalSwap(SpireStopServingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(meta_, other->meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireStopServingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireStopServingResponse::InitAsDefaultInstance() {
  ::_SpireStopServingResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
}
class SpireStopServingResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireStopServingResponse* msg);
};

const ::ResponseStatus&
SpireStopServingResponse::_Internal::status(const SpireStopServingResponse* msg) {
  return *msg->status_;
}
void SpireStopServingResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SpireStopServingResponse::SpireStopServingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireStopServingResponse)
}
SpireStopServingResponse::SpireStopServingResponse(const SpireStopServingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SpireStopServingResponse)
}

void SpireStopServingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireStopServingResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

SpireStopServingResponse::~SpireStopServingResponse() {
  // @@protoc_insertion_point(destructor:SpireStopServingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireStopServingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void SpireStopServingResponse::ArenaDtor(void* object) {
  SpireStopServingResponse* _this = reinterpret_cast< SpireStopServingResponse* >(object);
  (void)_this;
}
void SpireStopServingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireStopServingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireStopServingResponse& SpireStopServingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireStopServingResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireStopServingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireStopServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireStopServingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::SpireState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireStopServingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireStopServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .SpireState state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireStopServingResponse)
  return target;
}

size_t SpireStopServingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireStopServingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .SpireState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireStopServingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireStopServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireStopServingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireStopServingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireStopServingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireStopServingResponse)
    MergeFrom(*source);
  }
}

void SpireStopServingResponse::MergeFrom(const SpireStopServingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireStopServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SpireStopServingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireStopServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireStopServingResponse::CopyFrom(const SpireStopServingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireStopServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireStopServingResponse::IsInitialized() const {
  return true;
}

void SpireStopServingResponse::InternalSwap(SpireStopServingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireStopServingResponse, state_)
      + sizeof(SpireStopServingResponse::state_)
      - PROTOBUF_FIELD_OFFSET(SpireStopServingResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireStopServingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireEmbedTagRequest::InitAsDefaultInstance() {
  ::_SpireEmbedTagRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_SpireEmbedTagRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireEmbedTagRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireEmbedTagRequest* msg);
  static const ::DataBatch& data(const SpireEmbedTagRequest* msg);
};

const ::RequestMeta&
SpireEmbedTagRequest::_Internal::meta(const SpireEmbedTagRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
SpireEmbedTagRequest::_Internal::data(const SpireEmbedTagRequest* msg) {
  return *msg->data_;
}
void SpireEmbedTagRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void SpireEmbedTagRequest::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
void SpireEmbedTagRequest::clear_tags_to_watch() {
  tags_to_watch_.Clear();
}
SpireEmbedTagRequest::SpireEmbedTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ops_(arena),
  tags_to_watch_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireEmbedTagRequest)
}
SpireEmbedTagRequest::SpireEmbedTagRequest(const SpireEmbedTagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ops_(from.ops_),
      tags_to_watch_(from.tags_to_watch_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language(),
      GetArena());
  }
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&topk_, &from.topk_,
    static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&topk_)) + sizeof(fps_));
  // @@protoc_insertion_point(copy_constructor:SpireEmbedTagRequest)
}

void SpireEmbedTagRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireEmbedTagRequest_proto_2fspire_2fspire_2eproto.base);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(fps_));
}

SpireEmbedTagRequest::~SpireEmbedTagRequest() {
  // @@protoc_insertion_point(destructor:SpireEmbedTagRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireEmbedTagRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void SpireEmbedTagRequest::ArenaDtor(void* object) {
  SpireEmbedTagRequest* _this = reinterpret_cast< SpireEmbedTagRequest* >(object);
  (void)_this;
}
void SpireEmbedTagRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireEmbedTagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireEmbedTagRequest& SpireEmbedTagRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireEmbedTagRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireEmbedTagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireEmbedTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  tags_to_watch_.Clear();
  language_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&topk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&topk_)) + sizeof(fps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireEmbedTagRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SpireOps ops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ops(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ops(static_cast<::SpireOps>(val));
        } else goto handle_unusual;
        continue;
      // int32 topk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .Tag tags_to_watch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags_to_watch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string language = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireEmbedTagRequest.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireEmbedTagRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireEmbedTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // repeated .SpireOps ops = 3;
  {
    int byte_size = _ops_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, ops_, byte_size, target);
    }
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_topk(), target);
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_fps(), target);
  }

  // repeated .Tag tags_to_watch = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_to_watch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tags_to_watch(i), target, stream);
  }

  // string language = 7 [deprecated = true];
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireEmbedTagRequest.language");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireEmbedTagRequest)
  return target;
}

size_t SpireEmbedTagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireEmbedTagRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SpireOps ops = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ops_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ops(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ops_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Tag tags_to_watch = 6;
  total_size += 1UL * this->_internal_tags_to_watch_size();
  for (const auto& msg : this->tags_to_watch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string language = 7 [deprecated = true];
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_topk());
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireEmbedTagRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireEmbedTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireEmbedTagRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireEmbedTagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireEmbedTagRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireEmbedTagRequest)
    MergeFrom(*source);
  }
}

void SpireEmbedTagRequest::MergeFrom(const SpireEmbedTagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireEmbedTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
  tags_to_watch_.MergeFrom(from.tags_to_watch_);
  if (from.language().size() > 0) {
    _internal_set_language(from._internal_language());
  }
  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::DataBatch::MergeFrom(from._internal_data());
  }
  if (from.topk() != 0) {
    _internal_set_topk(from._internal_topk());
  }
  if (!(from.fps() <= 0 && from.fps() >= 0)) {
    _internal_set_fps(from._internal_fps());
  }
}

void SpireEmbedTagRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireEmbedTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireEmbedTagRequest::CopyFrom(const SpireEmbedTagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireEmbedTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireEmbedTagRequest::IsInitialized() const {
  return true;
}

void SpireEmbedTagRequest::InternalSwap(SpireEmbedTagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ops_.InternalSwap(&other->ops_);
  tags_to_watch_.InternalSwap(&other->tags_to_watch_);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireEmbedTagRequest, fps_)
      + sizeof(SpireEmbedTagRequest::fps_)
      - PROTOBUF_FIELD_OFFSET(SpireEmbedTagRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireEmbedTagRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireEmbedTagResponse::InitAsDefaultInstance() {
  ::_SpireEmbedTagResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_SpireEmbedTagResponse_default_instance_._instance.get_mutable()->results_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireEmbedTagResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireEmbedTagResponse* msg);
  static const ::DataBatch& results(const SpireEmbedTagResponse* msg);
};

const ::ResponseStatus&
SpireEmbedTagResponse::_Internal::status(const SpireEmbedTagResponse* msg) {
  return *msg->status_;
}
const ::DataBatch&
SpireEmbedTagResponse::_Internal::results(const SpireEmbedTagResponse* msg) {
  return *msg->results_;
}
void SpireEmbedTagResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SpireEmbedTagResponse::clear_results() {
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
}
SpireEmbedTagResponse::SpireEmbedTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireEmbedTagResponse)
}
SpireEmbedTagResponse::SpireEmbedTagResponse(const SpireEmbedTagResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_results()) {
    results_ = new ::DataBatch(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireEmbedTagResponse)
}

void SpireEmbedTagResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireEmbedTagResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&status_)) + sizeof(results_));
}

SpireEmbedTagResponse::~SpireEmbedTagResponse() {
  // @@protoc_insertion_point(destructor:SpireEmbedTagResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireEmbedTagResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete results_;
}

void SpireEmbedTagResponse::ArenaDtor(void* object) {
  SpireEmbedTagResponse* _this = reinterpret_cast< SpireEmbedTagResponse* >(object);
  (void)_this;
}
void SpireEmbedTagResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireEmbedTagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireEmbedTagResponse& SpireEmbedTagResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireEmbedTagResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireEmbedTagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireEmbedTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireEmbedTagResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireEmbedTagResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireEmbedTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::results(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireEmbedTagResponse)
  return target;
}

size_t SpireEmbedTagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireEmbedTagResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireEmbedTagResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireEmbedTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireEmbedTagResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireEmbedTagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireEmbedTagResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireEmbedTagResponse)
    MergeFrom(*source);
  }
}

void SpireEmbedTagResponse::MergeFrom(const SpireEmbedTagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireEmbedTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
  if (from.has_results()) {
    _internal_mutable_results()->::DataBatch::MergeFrom(from._internal_results());
  }
}

void SpireEmbedTagResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireEmbedTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireEmbedTagResponse::CopyFrom(const SpireEmbedTagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireEmbedTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireEmbedTagResponse::IsInitialized() const {
  return true;
}

void SpireEmbedTagResponse::InternalSwap(SpireEmbedTagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireEmbedTagResponse, results_)
      + sizeof(SpireEmbedTagResponse::results_)
      - PROTOBUF_FIELD_OFFSET(SpireEmbedTagResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireEmbedTagResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireSavedOutputRequest::InitAsDefaultInstance() {
  ::_SpireSavedOutputRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_SpireSavedOutputRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireSavedOutputRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireSavedOutputRequest* msg);
  static const ::DataBatch& data(const SpireSavedOutputRequest* msg);
};

const ::RequestMeta&
SpireSavedOutputRequest::_Internal::meta(const SpireSavedOutputRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
SpireSavedOutputRequest::_Internal::data(const SpireSavedOutputRequest* msg) {
  return *msg->data_;
}
void SpireSavedOutputRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void SpireSavedOutputRequest::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
SpireSavedOutputRequest::SpireSavedOutputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  store_layers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireSavedOutputRequest)
}
SpireSavedOutputRequest::SpireSavedOutputRequest(const SpireSavedOutputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      store_layers_(from.store_layers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&reduce_num_views_, &from.reduce_num_views_,
    static_cast<size_t>(reinterpret_cast<char*>(&topk_) -
    reinterpret_cast<char*>(&reduce_num_views_)) + sizeof(topk_));
  // @@protoc_insertion_point(copy_constructor:SpireSavedOutputRequest)
}

void SpireSavedOutputRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireSavedOutputRequest_proto_2fspire_2fspire_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topk_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(topk_));
}

SpireSavedOutputRequest::~SpireSavedOutputRequest() {
  // @@protoc_insertion_point(destructor:SpireSavedOutputRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireSavedOutputRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void SpireSavedOutputRequest::ArenaDtor(void* object) {
  SpireSavedOutputRequest* _this = reinterpret_cast< SpireSavedOutputRequest* >(object);
  (void)_this;
}
void SpireSavedOutputRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireSavedOutputRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireSavedOutputRequest& SpireSavedOutputRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireSavedOutputRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireSavedOutputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireSavedOutputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  store_layers_.Clear();
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&reduce_num_views_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topk_) -
      reinterpret_cast<char*>(&reduce_num_views_)) + sizeof(topk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireSavedOutputRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string store_layers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_store_layers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireSavedOutputRequest.store_layers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool reduce_num_views = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reduce_num_views_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reduce_output_space = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reduce_output_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 topk = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireSavedOutputRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireSavedOutputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // repeated string store_layers = 3;
  for (int i = 0, n = this->_internal_store_layers_size(); i < n; i++) {
    const auto& s = this->_internal_store_layers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireSavedOutputRequest.store_layers");
    target = stream->WriteString(3, s, target);
  }

  // bool reduce_num_views = 4;
  if (this->reduce_num_views() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_reduce_num_views(), target);
  }

  // bool reduce_output_space = 5;
  if (this->reduce_output_space() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_reduce_output_space(), target);
  }

  // float fps = 6;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_fps(), target);
  }

  // int32 topk = 7;
  if (this->topk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_topk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireSavedOutputRequest)
  return target;
}

size_t SpireSavedOutputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireSavedOutputRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string store_layers = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(store_layers_.size());
  for (int i = 0, n = store_layers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      store_layers_.Get(i));
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // bool reduce_num_views = 4;
  if (this->reduce_num_views() != 0) {
    total_size += 1 + 1;
  }

  // bool reduce_output_space = 5;
  if (this->reduce_output_space() != 0) {
    total_size += 1 + 1;
  }

  // float fps = 6;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 topk = 7;
  if (this->topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_topk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireSavedOutputRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireSavedOutputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireSavedOutputRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireSavedOutputRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireSavedOutputRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireSavedOutputRequest)
    MergeFrom(*source);
  }
}

void SpireSavedOutputRequest::MergeFrom(const SpireSavedOutputRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireSavedOutputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  store_layers_.MergeFrom(from.store_layers_);
  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::DataBatch::MergeFrom(from._internal_data());
  }
  if (from.reduce_num_views() != 0) {
    _internal_set_reduce_num_views(from._internal_reduce_num_views());
  }
  if (from.reduce_output_space() != 0) {
    _internal_set_reduce_output_space(from._internal_reduce_output_space());
  }
  if (!(from.fps() <= 0 && from.fps() >= 0)) {
    _internal_set_fps(from._internal_fps());
  }
  if (from.topk() != 0) {
    _internal_set_topk(from._internal_topk());
  }
}

void SpireSavedOutputRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireSavedOutputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireSavedOutputRequest::CopyFrom(const SpireSavedOutputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireSavedOutputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireSavedOutputRequest::IsInitialized() const {
  return true;
}

void SpireSavedOutputRequest::InternalSwap(SpireSavedOutputRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  store_layers_.InternalSwap(&other->store_layers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireSavedOutputRequest, topk_)
      + sizeof(SpireSavedOutputRequest::topk_)
      - PROTOBUF_FIELD_OFFSET(SpireSavedOutputRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireSavedOutputRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireSavedOutputResponse::InitAsDefaultInstance() {
  ::_SpireSavedOutputResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_SpireSavedOutputResponse_default_instance_._instance.get_mutable()->results_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireSavedOutputResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireSavedOutputResponse* msg);
  static const ::DataBatch& results(const SpireSavedOutputResponse* msg);
};

const ::ResponseStatus&
SpireSavedOutputResponse::_Internal::status(const SpireSavedOutputResponse* msg) {
  return *msg->status_;
}
const ::DataBatch&
SpireSavedOutputResponse::_Internal::results(const SpireSavedOutputResponse* msg) {
  return *msg->results_;
}
void SpireSavedOutputResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SpireSavedOutputResponse::clear_results() {
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
}
SpireSavedOutputResponse::SpireSavedOutputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireSavedOutputResponse)
}
SpireSavedOutputResponse::SpireSavedOutputResponse(const SpireSavedOutputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_results()) {
    results_ = new ::DataBatch(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireSavedOutputResponse)
}

void SpireSavedOutputResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireSavedOutputResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&status_)) + sizeof(results_));
}

SpireSavedOutputResponse::~SpireSavedOutputResponse() {
  // @@protoc_insertion_point(destructor:SpireSavedOutputResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireSavedOutputResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete results_;
}

void SpireSavedOutputResponse::ArenaDtor(void* object) {
  SpireSavedOutputResponse* _this = reinterpret_cast< SpireSavedOutputResponse* >(object);
  (void)_this;
}
void SpireSavedOutputResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireSavedOutputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireSavedOutputResponse& SpireSavedOutputResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireSavedOutputResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireSavedOutputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireSavedOutputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireSavedOutputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireSavedOutputResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireSavedOutputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::results(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireSavedOutputResponse)
  return target;
}

size_t SpireSavedOutputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireSavedOutputResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireSavedOutputResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireSavedOutputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireSavedOutputResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireSavedOutputResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireSavedOutputResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireSavedOutputResponse)
    MergeFrom(*source);
  }
}

void SpireSavedOutputResponse::MergeFrom(const SpireSavedOutputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireSavedOutputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
  if (from.has_results()) {
    _internal_mutable_results()->::DataBatch::MergeFrom(from._internal_results());
  }
}

void SpireSavedOutputResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireSavedOutputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireSavedOutputResponse::CopyFrom(const SpireSavedOutputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireSavedOutputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireSavedOutputResponse::IsInitialized() const {
  return true;
}

void SpireSavedOutputResponse::InternalSwap(SpireSavedOutputResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireSavedOutputResponse, results_)
      + sizeof(SpireSavedOutputResponse::results_)
      - PROTOBUF_FIELD_OFFSET(SpireSavedOutputResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireSavedOutputResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireFaceDetectEmbedTagRequest::InitAsDefaultInstance() {
  ::_SpireFaceDetectEmbedTagRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_SpireFaceDetectEmbedTagRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireFaceDetectEmbedTagRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireFaceDetectEmbedTagRequest* msg);
  static const ::DataBatch& data(const SpireFaceDetectEmbedTagRequest* msg);
};

const ::RequestMeta&
SpireFaceDetectEmbedTagRequest::_Internal::meta(const SpireFaceDetectEmbedTagRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
SpireFaceDetectEmbedTagRequest::_Internal::data(const SpireFaceDetectEmbedTagRequest* msg) {
  return *msg->data_;
}
void SpireFaceDetectEmbedTagRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void SpireFaceDetectEmbedTagRequest::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
void SpireFaceDetectEmbedTagRequest::clear_tags_to_watch() {
  tags_to_watch_.Clear();
}
SpireFaceDetectEmbedTagRequest::SpireFaceDetectEmbedTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ops_(arena),
  tags_to_watch_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireFaceDetectEmbedTagRequest)
}
SpireFaceDetectEmbedTagRequest::SpireFaceDetectEmbedTagRequest(const SpireFaceDetectEmbedTagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ops_(from.ops_),
      tags_to_watch_(from.tags_to_watch_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language(),
      GetArena());
  }
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&topk_, &from.topk_,
    static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&topk_)) + sizeof(fps_));
  // @@protoc_insertion_point(copy_constructor:SpireFaceDetectEmbedTagRequest)
}

void SpireFaceDetectEmbedTagRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireFaceDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto.base);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(fps_));
}

SpireFaceDetectEmbedTagRequest::~SpireFaceDetectEmbedTagRequest() {
  // @@protoc_insertion_point(destructor:SpireFaceDetectEmbedTagRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireFaceDetectEmbedTagRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void SpireFaceDetectEmbedTagRequest::ArenaDtor(void* object) {
  SpireFaceDetectEmbedTagRequest* _this = reinterpret_cast< SpireFaceDetectEmbedTagRequest* >(object);
  (void)_this;
}
void SpireFaceDetectEmbedTagRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireFaceDetectEmbedTagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireFaceDetectEmbedTagRequest& SpireFaceDetectEmbedTagRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireFaceDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireFaceDetectEmbedTagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireFaceDetectEmbedTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  tags_to_watch_.Clear();
  language_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&topk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&topk_)) + sizeof(fps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireFaceDetectEmbedTagRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SpireOps ops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ops(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ops(static_cast<::SpireOps>(val));
        } else goto handle_unusual;
        continue;
      // int32 topk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .Tag tags_to_watch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags_to_watch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string language = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SpireFaceDetectEmbedTagRequest.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireFaceDetectEmbedTagRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireFaceDetectEmbedTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // repeated .SpireOps ops = 3;
  {
    int byte_size = _ops_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, ops_, byte_size, target);
    }
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_topk(), target);
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_fps(), target);
  }

  // repeated .Tag tags_to_watch = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_to_watch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tags_to_watch(i), target, stream);
  }

  // string language = 7 [deprecated = true];
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireFaceDetectEmbedTagRequest.language");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireFaceDetectEmbedTagRequest)
  return target;
}

size_t SpireFaceDetectEmbedTagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireFaceDetectEmbedTagRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SpireOps ops = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ops_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ops(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ops_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Tag tags_to_watch = 6;
  total_size += 1UL * this->_internal_tags_to_watch_size();
  for (const auto& msg : this->tags_to_watch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string language = 7 [deprecated = true];
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_topk());
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireFaceDetectEmbedTagRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireFaceDetectEmbedTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireFaceDetectEmbedTagRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireFaceDetectEmbedTagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireFaceDetectEmbedTagRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireFaceDetectEmbedTagRequest)
    MergeFrom(*source);
  }
}

void SpireFaceDetectEmbedTagRequest::MergeFrom(const SpireFaceDetectEmbedTagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireFaceDetectEmbedTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
  tags_to_watch_.MergeFrom(from.tags_to_watch_);
  if (from.language().size() > 0) {
    _internal_set_language(from._internal_language());
  }
  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::DataBatch::MergeFrom(from._internal_data());
  }
  if (from.topk() != 0) {
    _internal_set_topk(from._internal_topk());
  }
  if (!(from.fps() <= 0 && from.fps() >= 0)) {
    _internal_set_fps(from._internal_fps());
  }
}

void SpireFaceDetectEmbedTagRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireFaceDetectEmbedTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireFaceDetectEmbedTagRequest::CopyFrom(const SpireFaceDetectEmbedTagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireFaceDetectEmbedTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireFaceDetectEmbedTagRequest::IsInitialized() const {
  return true;
}

void SpireFaceDetectEmbedTagRequest::InternalSwap(SpireFaceDetectEmbedTagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ops_.InternalSwap(&other->ops_);
  tags_to_watch_.InternalSwap(&other->tags_to_watch_);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireFaceDetectEmbedTagRequest, fps_)
      + sizeof(SpireFaceDetectEmbedTagRequest::fps_)
      - PROTOBUF_FIELD_OFFSET(SpireFaceDetectEmbedTagRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireFaceDetectEmbedTagRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireFaceDetectEmbedTagResponse::InitAsDefaultInstance() {
  ::_SpireFaceDetectEmbedTagResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_SpireFaceDetectEmbedTagResponse_default_instance_._instance.get_mutable()->results_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireFaceDetectEmbedTagResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireFaceDetectEmbedTagResponse* msg);
  static const ::DataBatch& results(const SpireFaceDetectEmbedTagResponse* msg);
};

const ::ResponseStatus&
SpireFaceDetectEmbedTagResponse::_Internal::status(const SpireFaceDetectEmbedTagResponse* msg) {
  return *msg->status_;
}
const ::DataBatch&
SpireFaceDetectEmbedTagResponse::_Internal::results(const SpireFaceDetectEmbedTagResponse* msg) {
  return *msg->results_;
}
void SpireFaceDetectEmbedTagResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SpireFaceDetectEmbedTagResponse::clear_results() {
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
}
SpireFaceDetectEmbedTagResponse::SpireFaceDetectEmbedTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireFaceDetectEmbedTagResponse)
}
SpireFaceDetectEmbedTagResponse::SpireFaceDetectEmbedTagResponse(const SpireFaceDetectEmbedTagResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_results()) {
    results_ = new ::DataBatch(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireFaceDetectEmbedTagResponse)
}

void SpireFaceDetectEmbedTagResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireFaceDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&status_)) + sizeof(results_));
}

SpireFaceDetectEmbedTagResponse::~SpireFaceDetectEmbedTagResponse() {
  // @@protoc_insertion_point(destructor:SpireFaceDetectEmbedTagResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireFaceDetectEmbedTagResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete results_;
}

void SpireFaceDetectEmbedTagResponse::ArenaDtor(void* object) {
  SpireFaceDetectEmbedTagResponse* _this = reinterpret_cast< SpireFaceDetectEmbedTagResponse* >(object);
  (void)_this;
}
void SpireFaceDetectEmbedTagResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireFaceDetectEmbedTagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireFaceDetectEmbedTagResponse& SpireFaceDetectEmbedTagResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireFaceDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireFaceDetectEmbedTagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireFaceDetectEmbedTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireFaceDetectEmbedTagResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireFaceDetectEmbedTagResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireFaceDetectEmbedTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::results(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireFaceDetectEmbedTagResponse)
  return target;
}

size_t SpireFaceDetectEmbedTagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireFaceDetectEmbedTagResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireFaceDetectEmbedTagResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireFaceDetectEmbedTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireFaceDetectEmbedTagResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireFaceDetectEmbedTagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireFaceDetectEmbedTagResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireFaceDetectEmbedTagResponse)
    MergeFrom(*source);
  }
}

void SpireFaceDetectEmbedTagResponse::MergeFrom(const SpireFaceDetectEmbedTagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireFaceDetectEmbedTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
  if (from.has_results()) {
    _internal_mutable_results()->::DataBatch::MergeFrom(from._internal_results());
  }
}

void SpireFaceDetectEmbedTagResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireFaceDetectEmbedTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireFaceDetectEmbedTagResponse::CopyFrom(const SpireFaceDetectEmbedTagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireFaceDetectEmbedTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireFaceDetectEmbedTagResponse::IsInitialized() const {
  return true;
}

void SpireFaceDetectEmbedTagResponse::InternalSwap(SpireFaceDetectEmbedTagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireFaceDetectEmbedTagResponse, results_)
      + sizeof(SpireFaceDetectEmbedTagResponse::results_)
      - PROTOBUF_FIELD_OFFSET(SpireFaceDetectEmbedTagResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireFaceDetectEmbedTagResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireInstanceSegmentRequest::InitAsDefaultInstance() {
  ::_SpireInstanceSegmentRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_SpireInstanceSegmentRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireInstanceSegmentRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireInstanceSegmentRequest* msg);
  static const ::DataBatch& data(const SpireInstanceSegmentRequest* msg);
};

const ::RequestMeta&
SpireInstanceSegmentRequest::_Internal::meta(const SpireInstanceSegmentRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
SpireInstanceSegmentRequest::_Internal::data(const SpireInstanceSegmentRequest* msg) {
  return *msg->data_;
}
void SpireInstanceSegmentRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void SpireInstanceSegmentRequest::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
void SpireInstanceSegmentRequest::clear_tags_to_watch() {
  tags_to_watch_.Clear();
}
SpireInstanceSegmentRequest::SpireInstanceSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ops_(arena),
  tags_to_watch_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireInstanceSegmentRequest)
}
SpireInstanceSegmentRequest::SpireInstanceSegmentRequest(const SpireInstanceSegmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ops_(from.ops_),
      tags_to_watch_(from.tags_to_watch_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&topk_, &from.topk_,
    static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&topk_)) + sizeof(fps_));
  // @@protoc_insertion_point(copy_constructor:SpireInstanceSegmentRequest)
}

void SpireInstanceSegmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireInstanceSegmentRequest_proto_2fspire_2fspire_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(fps_));
}

SpireInstanceSegmentRequest::~SpireInstanceSegmentRequest() {
  // @@protoc_insertion_point(destructor:SpireInstanceSegmentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireInstanceSegmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void SpireInstanceSegmentRequest::ArenaDtor(void* object) {
  SpireInstanceSegmentRequest* _this = reinterpret_cast< SpireInstanceSegmentRequest* >(object);
  (void)_this;
}
void SpireInstanceSegmentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireInstanceSegmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireInstanceSegmentRequest& SpireInstanceSegmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireInstanceSegmentRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireInstanceSegmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireInstanceSegmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  tags_to_watch_.Clear();
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&topk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&topk_)) + sizeof(fps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireInstanceSegmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SpireOps ops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ops(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ops(static_cast<::SpireOps>(val));
        } else goto handle_unusual;
        continue;
      // int32 topk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .Tag tags_to_watch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags_to_watch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireInstanceSegmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireInstanceSegmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // repeated .SpireOps ops = 3;
  {
    int byte_size = _ops_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, ops_, byte_size, target);
    }
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_topk(), target);
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_fps(), target);
  }

  // repeated .Tag tags_to_watch = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_to_watch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tags_to_watch(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireInstanceSegmentRequest)
  return target;
}

size_t SpireInstanceSegmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireInstanceSegmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SpireOps ops = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ops_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ops(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ops_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Tag tags_to_watch = 6;
  total_size += 1UL * this->_internal_tags_to_watch_size();
  for (const auto& msg : this->tags_to_watch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_topk());
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireInstanceSegmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireInstanceSegmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireInstanceSegmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireInstanceSegmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireInstanceSegmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireInstanceSegmentRequest)
    MergeFrom(*source);
  }
}

void SpireInstanceSegmentRequest::MergeFrom(const SpireInstanceSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireInstanceSegmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
  tags_to_watch_.MergeFrom(from.tags_to_watch_);
  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::DataBatch::MergeFrom(from._internal_data());
  }
  if (from.topk() != 0) {
    _internal_set_topk(from._internal_topk());
  }
  if (!(from.fps() <= 0 && from.fps() >= 0)) {
    _internal_set_fps(from._internal_fps());
  }
}

void SpireInstanceSegmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireInstanceSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireInstanceSegmentRequest::CopyFrom(const SpireInstanceSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireInstanceSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireInstanceSegmentRequest::IsInitialized() const {
  return true;
}

void SpireInstanceSegmentRequest::InternalSwap(SpireInstanceSegmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ops_.InternalSwap(&other->ops_);
  tags_to_watch_.InternalSwap(&other->tags_to_watch_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireInstanceSegmentRequest, fps_)
      + sizeof(SpireInstanceSegmentRequest::fps_)
      - PROTOBUF_FIELD_OFFSET(SpireInstanceSegmentRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireInstanceSegmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireInstanceSegmentResponse::InitAsDefaultInstance() {
  ::_SpireInstanceSegmentResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_SpireInstanceSegmentResponse_default_instance_._instance.get_mutable()->results_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireInstanceSegmentResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireInstanceSegmentResponse* msg);
  static const ::DataBatch& results(const SpireInstanceSegmentResponse* msg);
};

const ::ResponseStatus&
SpireInstanceSegmentResponse::_Internal::status(const SpireInstanceSegmentResponse* msg) {
  return *msg->status_;
}
const ::DataBatch&
SpireInstanceSegmentResponse::_Internal::results(const SpireInstanceSegmentResponse* msg) {
  return *msg->results_;
}
void SpireInstanceSegmentResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SpireInstanceSegmentResponse::clear_results() {
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
}
SpireInstanceSegmentResponse::SpireInstanceSegmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireInstanceSegmentResponse)
}
SpireInstanceSegmentResponse::SpireInstanceSegmentResponse(const SpireInstanceSegmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_results()) {
    results_ = new ::DataBatch(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireInstanceSegmentResponse)
}

void SpireInstanceSegmentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireInstanceSegmentResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&status_)) + sizeof(results_));
}

SpireInstanceSegmentResponse::~SpireInstanceSegmentResponse() {
  // @@protoc_insertion_point(destructor:SpireInstanceSegmentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireInstanceSegmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete results_;
}

void SpireInstanceSegmentResponse::ArenaDtor(void* object) {
  SpireInstanceSegmentResponse* _this = reinterpret_cast< SpireInstanceSegmentResponse* >(object);
  (void)_this;
}
void SpireInstanceSegmentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireInstanceSegmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireInstanceSegmentResponse& SpireInstanceSegmentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireInstanceSegmentResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireInstanceSegmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireInstanceSegmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireInstanceSegmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireInstanceSegmentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireInstanceSegmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::results(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireInstanceSegmentResponse)
  return target;
}

size_t SpireInstanceSegmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireInstanceSegmentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireInstanceSegmentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireInstanceSegmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireInstanceSegmentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireInstanceSegmentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireInstanceSegmentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireInstanceSegmentResponse)
    MergeFrom(*source);
  }
}

void SpireInstanceSegmentResponse::MergeFrom(const SpireInstanceSegmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireInstanceSegmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
  if (from.has_results()) {
    _internal_mutable_results()->::DataBatch::MergeFrom(from._internal_results());
  }
}

void SpireInstanceSegmentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireInstanceSegmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireInstanceSegmentResponse::CopyFrom(const SpireInstanceSegmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireInstanceSegmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireInstanceSegmentResponse::IsInitialized() const {
  return true;
}

void SpireInstanceSegmentResponse::InternalSwap(SpireInstanceSegmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireInstanceSegmentResponse, results_)
      + sizeof(SpireInstanceSegmentResponse::results_)
      - PROTOBUF_FIELD_OFFSET(SpireInstanceSegmentResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireInstanceSegmentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireDetectRequest::InitAsDefaultInstance() {
  ::_SpireDetectRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_SpireDetectRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireDetectRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireDetectRequest* msg);
  static const ::DataBatch& data(const SpireDetectRequest* msg);
};

const ::RequestMeta&
SpireDetectRequest::_Internal::meta(const SpireDetectRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
SpireDetectRequest::_Internal::data(const SpireDetectRequest* msg) {
  return *msg->data_;
}
void SpireDetectRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void SpireDetectRequest::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
void SpireDetectRequest::clear_tags_to_watch() {
  tags_to_watch_.Clear();
}
SpireDetectRequest::SpireDetectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ops_(arena),
  tags_to_watch_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireDetectRequest)
}
SpireDetectRequest::SpireDetectRequest(const SpireDetectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ops_(from.ops_),
      tags_to_watch_(from.tags_to_watch_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&topk_, &from.topk_,
    static_cast<size_t>(reinterpret_cast<char*>(&detection_score_threshold_) -
    reinterpret_cast<char*>(&topk_)) + sizeof(detection_score_threshold_));
  // @@protoc_insertion_point(copy_constructor:SpireDetectRequest)
}

void SpireDetectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireDetectRequest_proto_2fspire_2fspire_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_score_threshold_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(detection_score_threshold_));
}

SpireDetectRequest::~SpireDetectRequest() {
  // @@protoc_insertion_point(destructor:SpireDetectRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireDetectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void SpireDetectRequest::ArenaDtor(void* object) {
  SpireDetectRequest* _this = reinterpret_cast< SpireDetectRequest* >(object);
  (void)_this;
}
void SpireDetectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireDetectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireDetectRequest& SpireDetectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireDetectRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireDetectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireDetectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  tags_to_watch_.Clear();
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&topk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_score_threshold_) -
      reinterpret_cast<char*>(&topk_)) + sizeof(detection_score_threshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireDetectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SpireOps ops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ops(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ops(static_cast<::SpireOps>(val));
        } else goto handle_unusual;
        continue;
      // int32 topk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .Tag tags_to_watch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags_to_watch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // float detection_score_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          detection_score_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireDetectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireDetectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // repeated .SpireOps ops = 3;
  {
    int byte_size = _ops_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, ops_, byte_size, target);
    }
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_topk(), target);
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_fps(), target);
  }

  // repeated .Tag tags_to_watch = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_to_watch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tags_to_watch(i), target, stream);
  }

  // float detection_score_threshold = 7;
  if (!(this->detection_score_threshold() <= 0 && this->detection_score_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_detection_score_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireDetectRequest)
  return target;
}

size_t SpireDetectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireDetectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SpireOps ops = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ops_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ops(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ops_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Tag tags_to_watch = 6;
  total_size += 1UL * this->_internal_tags_to_watch_size();
  for (const auto& msg : this->tags_to_watch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_topk());
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    total_size += 1 + 4;
  }

  // float detection_score_threshold = 7;
  if (!(this->detection_score_threshold() <= 0 && this->detection_score_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireDetectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireDetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireDetectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireDetectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireDetectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireDetectRequest)
    MergeFrom(*source);
  }
}

void SpireDetectRequest::MergeFrom(const SpireDetectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireDetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
  tags_to_watch_.MergeFrom(from.tags_to_watch_);
  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::DataBatch::MergeFrom(from._internal_data());
  }
  if (from.topk() != 0) {
    _internal_set_topk(from._internal_topk());
  }
  if (!(from.fps() <= 0 && from.fps() >= 0)) {
    _internal_set_fps(from._internal_fps());
  }
  if (!(from.detection_score_threshold() <= 0 && from.detection_score_threshold() >= 0)) {
    _internal_set_detection_score_threshold(from._internal_detection_score_threshold());
  }
}

void SpireDetectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireDetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireDetectRequest::CopyFrom(const SpireDetectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireDetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireDetectRequest::IsInitialized() const {
  return true;
}

void SpireDetectRequest::InternalSwap(SpireDetectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ops_.InternalSwap(&other->ops_);
  tags_to_watch_.InternalSwap(&other->tags_to_watch_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireDetectRequest, detection_score_threshold_)
      + sizeof(SpireDetectRequest::detection_score_threshold_)
      - PROTOBUF_FIELD_OFFSET(SpireDetectRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireDetectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireTrackRequest::InitAsDefaultInstance() {
  ::_SpireTrackRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataExample*>(
      ::DataExample::internal_default_instance());
}
class SpireTrackRequest::_Internal {
 public:
  static const ::DataExample& data(const SpireTrackRequest* msg);
};

const ::DataExample&
SpireTrackRequest::_Internal::data(const SpireTrackRequest* msg) {
  return *msg->data_;
}
void SpireTrackRequest::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
SpireTrackRequest::SpireTrackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireTrackRequest)
}
SpireTrackRequest::SpireTrackRequest(const SpireTrackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::DataExample(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireTrackRequest)
}

void SpireTrackRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireTrackRequest_proto_2fspire_2fspire_2eproto.base);
  data_ = nullptr;
}

SpireTrackRequest::~SpireTrackRequest() {
  // @@protoc_insertion_point(destructor:SpireTrackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireTrackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void SpireTrackRequest::ArenaDtor(void* object) {
  SpireTrackRequest* _this = reinterpret_cast< SpireTrackRequest* >(object);
  (void)_this;
}
void SpireTrackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireTrackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireTrackRequest& SpireTrackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireTrackRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireTrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireTrackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireTrackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DataExample data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireTrackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireTrackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DataExample data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireTrackRequest)
  return target;
}

size_t SpireTrackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireTrackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DataExample data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireTrackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireTrackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireTrackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireTrackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireTrackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireTrackRequest)
    MergeFrom(*source);
  }
}

void SpireTrackRequest::MergeFrom(const SpireTrackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireTrackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::DataExample::MergeFrom(from._internal_data());
  }
}

void SpireTrackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireTrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireTrackRequest::CopyFrom(const SpireTrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireTrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireTrackRequest::IsInitialized() const {
  return true;
}

void SpireTrackRequest::InternalSwap(SpireTrackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireTrackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireDetectResponse::InitAsDefaultInstance() {
  ::_SpireDetectResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_SpireDetectResponse_default_instance_._instance.get_mutable()->results_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireDetectResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireDetectResponse* msg);
  static const ::DataBatch& results(const SpireDetectResponse* msg);
};

const ::ResponseStatus&
SpireDetectResponse::_Internal::status(const SpireDetectResponse* msg) {
  return *msg->status_;
}
const ::DataBatch&
SpireDetectResponse::_Internal::results(const SpireDetectResponse* msg) {
  return *msg->results_;
}
void SpireDetectResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SpireDetectResponse::clear_results() {
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
}
SpireDetectResponse::SpireDetectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireDetectResponse)
}
SpireDetectResponse::SpireDetectResponse(const SpireDetectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_results()) {
    results_ = new ::DataBatch(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireDetectResponse)
}

void SpireDetectResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireDetectResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&status_)) + sizeof(results_));
}

SpireDetectResponse::~SpireDetectResponse() {
  // @@protoc_insertion_point(destructor:SpireDetectResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireDetectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete results_;
}

void SpireDetectResponse::ArenaDtor(void* object) {
  SpireDetectResponse* _this = reinterpret_cast< SpireDetectResponse* >(object);
  (void)_this;
}
void SpireDetectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireDetectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireDetectResponse& SpireDetectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireDetectResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireDetectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireDetectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireDetectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireDetectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireDetectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::results(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireDetectResponse)
  return target;
}

size_t SpireDetectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireDetectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireDetectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireDetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireDetectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireDetectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireDetectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireDetectResponse)
    MergeFrom(*source);
  }
}

void SpireDetectResponse::MergeFrom(const SpireDetectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireDetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
  if (from.has_results()) {
    _internal_mutable_results()->::DataBatch::MergeFrom(from._internal_results());
  }
}

void SpireDetectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireDetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireDetectResponse::CopyFrom(const SpireDetectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireDetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireDetectResponse::IsInitialized() const {
  return true;
}

void SpireDetectResponse::InternalSwap(SpireDetectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireDetectResponse, results_)
      + sizeof(SpireDetectResponse::results_)
      - PROTOBUF_FIELD_OFFSET(SpireDetectResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireDetectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireTrackResponse::InitAsDefaultInstance() {
  ::_SpireTrackResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_SpireTrackResponse_default_instance_._instance.get_mutable()->results_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireTrackResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireTrackResponse* msg);
  static const ::DataBatch& results(const SpireTrackResponse* msg);
};

const ::ResponseStatus&
SpireTrackResponse::_Internal::status(const SpireTrackResponse* msg) {
  return *msg->status_;
}
const ::DataBatch&
SpireTrackResponse::_Internal::results(const SpireTrackResponse* msg) {
  return *msg->results_;
}
void SpireTrackResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SpireTrackResponse::clear_results() {
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
}
SpireTrackResponse::SpireTrackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireTrackResponse)
}
SpireTrackResponse::SpireTrackResponse(const SpireTrackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_results()) {
    results_ = new ::DataBatch(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireTrackResponse)
}

void SpireTrackResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireTrackResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&status_)) + sizeof(results_));
}

SpireTrackResponse::~SpireTrackResponse() {
  // @@protoc_insertion_point(destructor:SpireTrackResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireTrackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete results_;
}

void SpireTrackResponse::ArenaDtor(void* object) {
  SpireTrackResponse* _this = reinterpret_cast< SpireTrackResponse* >(object);
  (void)_this;
}
void SpireTrackResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireTrackResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireTrackResponse& SpireTrackResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireTrackResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireTrackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireTrackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireTrackResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireTrackResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireTrackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::results(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireTrackResponse)
  return target;
}

size_t SpireTrackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireTrackResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireTrackResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireTrackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireTrackResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireTrackResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireTrackResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireTrackResponse)
    MergeFrom(*source);
  }
}

void SpireTrackResponse::MergeFrom(const SpireTrackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireTrackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
  if (from.has_results()) {
    _internal_mutable_results()->::DataBatch::MergeFrom(from._internal_results());
  }
}

void SpireTrackResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireTrackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireTrackResponse::CopyFrom(const SpireTrackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireTrackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireTrackResponse::IsInitialized() const {
  return true;
}

void SpireTrackResponse::InternalSwap(SpireTrackResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireTrackResponse, results_)
      + sizeof(SpireTrackResponse::results_)
      - PROTOBUF_FIELD_OFFSET(SpireTrackResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireTrackResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireDetectEmbedTagRequest::InitAsDefaultInstance() {
  ::_SpireDetectEmbedTagRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_SpireDetectEmbedTagRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireDetectEmbedTagRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireDetectEmbedTagRequest* msg);
  static const ::DataBatch& data(const SpireDetectEmbedTagRequest* msg);
};

const ::RequestMeta&
SpireDetectEmbedTagRequest::_Internal::meta(const SpireDetectEmbedTagRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
SpireDetectEmbedTagRequest::_Internal::data(const SpireDetectEmbedTagRequest* msg) {
  return *msg->data_;
}
void SpireDetectEmbedTagRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void SpireDetectEmbedTagRequest::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
void SpireDetectEmbedTagRequest::clear_tags_to_watch() {
  tags_to_watch_.Clear();
}
SpireDetectEmbedTagRequest::SpireDetectEmbedTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ops_(arena),
  tags_to_watch_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireDetectEmbedTagRequest)
}
SpireDetectEmbedTagRequest::SpireDetectEmbedTagRequest(const SpireDetectEmbedTagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ops_(from.ops_),
      tags_to_watch_(from.tags_to_watch_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&topk_, &from.topk_,
    static_cast<size_t>(reinterpret_cast<char*>(&detection_score_threshold_) -
    reinterpret_cast<char*>(&topk_)) + sizeof(detection_score_threshold_));
  // @@protoc_insertion_point(copy_constructor:SpireDetectEmbedTagRequest)
}

void SpireDetectEmbedTagRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_score_threshold_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(detection_score_threshold_));
}

SpireDetectEmbedTagRequest::~SpireDetectEmbedTagRequest() {
  // @@protoc_insertion_point(destructor:SpireDetectEmbedTagRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireDetectEmbedTagRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void SpireDetectEmbedTagRequest::ArenaDtor(void* object) {
  SpireDetectEmbedTagRequest* _this = reinterpret_cast< SpireDetectEmbedTagRequest* >(object);
  (void)_this;
}
void SpireDetectEmbedTagRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireDetectEmbedTagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireDetectEmbedTagRequest& SpireDetectEmbedTagRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireDetectEmbedTagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireDetectEmbedTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  tags_to_watch_.Clear();
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&topk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_score_threshold_) -
      reinterpret_cast<char*>(&topk_)) + sizeof(detection_score_threshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireDetectEmbedTagRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SpireOps ops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ops(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ops(static_cast<::SpireOps>(val));
        } else goto handle_unusual;
        continue;
      // int32 topk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .Tag tags_to_watch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags_to_watch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // float detection_score_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          detection_score_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireDetectEmbedTagRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireDetectEmbedTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // repeated .SpireOps ops = 3;
  {
    int byte_size = _ops_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, ops_, byte_size, target);
    }
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_topk(), target);
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_fps(), target);
  }

  // repeated .Tag tags_to_watch = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_to_watch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tags_to_watch(i), target, stream);
  }

  // float detection_score_threshold = 7;
  if (!(this->detection_score_threshold() <= 0 && this->detection_score_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_detection_score_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireDetectEmbedTagRequest)
  return target;
}

size_t SpireDetectEmbedTagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireDetectEmbedTagRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SpireOps ops = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ops_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ops(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ops_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Tag tags_to_watch = 6;
  total_size += 1UL * this->_internal_tags_to_watch_size();
  for (const auto& msg : this->tags_to_watch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_topk());
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    total_size += 1 + 4;
  }

  // float detection_score_threshold = 7;
  if (!(this->detection_score_threshold() <= 0 && this->detection_score_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireDetectEmbedTagRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireDetectEmbedTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireDetectEmbedTagRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireDetectEmbedTagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireDetectEmbedTagRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireDetectEmbedTagRequest)
    MergeFrom(*source);
  }
}

void SpireDetectEmbedTagRequest::MergeFrom(const SpireDetectEmbedTagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireDetectEmbedTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
  tags_to_watch_.MergeFrom(from.tags_to_watch_);
  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::DataBatch::MergeFrom(from._internal_data());
  }
  if (from.topk() != 0) {
    _internal_set_topk(from._internal_topk());
  }
  if (!(from.fps() <= 0 && from.fps() >= 0)) {
    _internal_set_fps(from._internal_fps());
  }
  if (!(from.detection_score_threshold() <= 0 && from.detection_score_threshold() >= 0)) {
    _internal_set_detection_score_threshold(from._internal_detection_score_threshold());
  }
}

void SpireDetectEmbedTagRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireDetectEmbedTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireDetectEmbedTagRequest::CopyFrom(const SpireDetectEmbedTagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireDetectEmbedTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireDetectEmbedTagRequest::IsInitialized() const {
  return true;
}

void SpireDetectEmbedTagRequest::InternalSwap(SpireDetectEmbedTagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ops_.InternalSwap(&other->ops_);
  tags_to_watch_.InternalSwap(&other->tags_to_watch_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireDetectEmbedTagRequest, detection_score_threshold_)
      + sizeof(SpireDetectEmbedTagRequest::detection_score_threshold_)
      - PROTOBUF_FIELD_OFFSET(SpireDetectEmbedTagRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireDetectEmbedTagRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireDetectEmbedTagResponse::InitAsDefaultInstance() {
  ::_SpireDetectEmbedTagResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_SpireDetectEmbedTagResponse_default_instance_._instance.get_mutable()->results_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireDetectEmbedTagResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireDetectEmbedTagResponse* msg);
  static const ::DataBatch& results(const SpireDetectEmbedTagResponse* msg);
};

const ::ResponseStatus&
SpireDetectEmbedTagResponse::_Internal::status(const SpireDetectEmbedTagResponse* msg) {
  return *msg->status_;
}
const ::DataBatch&
SpireDetectEmbedTagResponse::_Internal::results(const SpireDetectEmbedTagResponse* msg) {
  return *msg->results_;
}
void SpireDetectEmbedTagResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SpireDetectEmbedTagResponse::clear_results() {
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
}
SpireDetectEmbedTagResponse::SpireDetectEmbedTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpireDetectEmbedTagResponse)
}
SpireDetectEmbedTagResponse::SpireDetectEmbedTagResponse(const SpireDetectEmbedTagResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_results()) {
    results_ = new ::DataBatch(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireDetectEmbedTagResponse)
}

void SpireDetectEmbedTagResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&status_)) + sizeof(results_));
}

SpireDetectEmbedTagResponse::~SpireDetectEmbedTagResponse() {
  // @@protoc_insertion_point(destructor:SpireDetectEmbedTagResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpireDetectEmbedTagResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete results_;
}

void SpireDetectEmbedTagResponse::ArenaDtor(void* object) {
  SpireDetectEmbedTagResponse* _this = reinterpret_cast< SpireDetectEmbedTagResponse* >(object);
  (void)_this;
}
void SpireDetectEmbedTagResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpireDetectEmbedTagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireDetectEmbedTagResponse& SpireDetectEmbedTagResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireDetectEmbedTagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireDetectEmbedTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpireDetectEmbedTagResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireDetectEmbedTagResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireDetectEmbedTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::results(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireDetectEmbedTagResponse)
  return target;
}

size_t SpireDetectEmbedTagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireDetectEmbedTagResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireDetectEmbedTagResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireDetectEmbedTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireDetectEmbedTagResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireDetectEmbedTagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireDetectEmbedTagResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireDetectEmbedTagResponse)
    MergeFrom(*source);
  }
}

void SpireDetectEmbedTagResponse::MergeFrom(const SpireDetectEmbedTagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireDetectEmbedTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
  if (from.has_results()) {
    _internal_mutable_results()->::DataBatch::MergeFrom(from._internal_results());
  }
}

void SpireDetectEmbedTagResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireDetectEmbedTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireDetectEmbedTagResponse::CopyFrom(const SpireDetectEmbedTagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireDetectEmbedTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireDetectEmbedTagResponse::IsInitialized() const {
  return true;
}

void SpireDetectEmbedTagResponse::InternalSwap(SpireDetectEmbedTagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpireDetectEmbedTagResponse, results_)
      + sizeof(SpireDetectEmbedTagResponse::results_)
      - PROTOBUF_FIELD_OFFSET(SpireDetectEmbedTagResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireDetectEmbedTagResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FaceDetectConfig* Arena::CreateMaybeMessage< ::FaceDetectConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FaceDetectConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::BBoxCropConfig* Arena::CreateMaybeMessage< ::BBoxCropConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BBoxCropConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::MultiHeadConfig* Arena::CreateMaybeMessage< ::MultiHeadConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MultiHeadConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireConfig_HeadsEntry_DoNotUse* Arena::CreateMaybeMessage< ::SpireConfig_HeadsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireConfig_HeadsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireConfig_CpuResourcesEntry_DoNotUse* Arena::CreateMaybeMessage< ::SpireConfig_CpuResourcesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireConfig_CpuResourcesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireConfig_ReplicasEntry_DoNotUse* Arena::CreateMaybeMessage< ::SpireConfig_ReplicasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireConfig_ReplicasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireConfig* Arena::CreateMaybeMessage< ::SpireConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::Replicas* Arena::CreateMaybeMessage< ::Replicas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Replicas >(arena);
}
template<> PROTOBUF_NOINLINE ::CPUResources* Arena::CreateMaybeMessage< ::CPUResources >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPUResources >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireMeta* Arena::CreateMaybeMessage< ::SpireMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireGetConfigRequest* Arena::CreateMaybeMessage< ::SpireGetConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireGetConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireGetConfigResponse* Arena::CreateMaybeMessage< ::SpireGetConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireGetConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireSetConfigRequest* Arena::CreateMaybeMessage< ::SpireSetConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireSetConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireSetConfigResponse* Arena::CreateMaybeMessage< ::SpireSetConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireSetConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireGetStateRequest* Arena::CreateMaybeMessage< ::SpireGetStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireGetStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireGetStateResponse* Arena::CreateMaybeMessage< ::SpireGetStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireGetStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireMaybeJITRequest* Arena::CreateMaybeMessage< ::SpireMaybeJITRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireMaybeJITRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireMaybeJITResponse* Arena::CreateMaybeMessage< ::SpireMaybeJITResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireMaybeJITResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireStopServingRequest* Arena::CreateMaybeMessage< ::SpireStopServingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireStopServingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireStopServingResponse* Arena::CreateMaybeMessage< ::SpireStopServingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireStopServingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireEmbedTagRequest* Arena::CreateMaybeMessage< ::SpireEmbedTagRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireEmbedTagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireEmbedTagResponse* Arena::CreateMaybeMessage< ::SpireEmbedTagResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireEmbedTagResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireSavedOutputRequest* Arena::CreateMaybeMessage< ::SpireSavedOutputRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireSavedOutputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireSavedOutputResponse* Arena::CreateMaybeMessage< ::SpireSavedOutputResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireSavedOutputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireFaceDetectEmbedTagRequest* Arena::CreateMaybeMessage< ::SpireFaceDetectEmbedTagRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireFaceDetectEmbedTagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireFaceDetectEmbedTagResponse* Arena::CreateMaybeMessage< ::SpireFaceDetectEmbedTagResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireFaceDetectEmbedTagResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireInstanceSegmentRequest* Arena::CreateMaybeMessage< ::SpireInstanceSegmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireInstanceSegmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireInstanceSegmentResponse* Arena::CreateMaybeMessage< ::SpireInstanceSegmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireInstanceSegmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireDetectRequest* Arena::CreateMaybeMessage< ::SpireDetectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireDetectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireTrackRequest* Arena::CreateMaybeMessage< ::SpireTrackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireTrackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireDetectResponse* Arena::CreateMaybeMessage< ::SpireDetectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireDetectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireTrackResponse* Arena::CreateMaybeMessage< ::SpireTrackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireTrackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireDetectEmbedTagRequest* Arena::CreateMaybeMessage< ::SpireDetectEmbedTagRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireDetectEmbedTagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireDetectEmbedTagResponse* Arena::CreateMaybeMessage< ::SpireDetectEmbedTagResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpireDetectEmbedTagResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
