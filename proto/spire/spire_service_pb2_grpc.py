# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from proto.spire import spire_pb2 as proto_dot_spire_dot_spire__pb2
from proto.utils import data_example_pb2 as proto_dot_utils_dot_data__example__pb2
from proto.utils import databatch_pb2 as proto_dot_utils_dot_databatch__pb2


class SpireServiceStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SpireGetState = channel.unary_unary(
                '/SpireService/SpireGetState',
                request_serializer=proto_dot_spire_dot_spire__pb2.SpireGetStateRequest.SerializeToString,
                response_deserializer=proto_dot_spire_dot_spire__pb2.SpireGetStateResponse.FromString,
                )
        self.SpireGetConfig = channel.unary_unary(
                '/SpireService/SpireGetConfig',
                request_serializer=proto_dot_spire_dot_spire__pb2.SpireGetConfigRequest.SerializeToString,
                response_deserializer=proto_dot_spire_dot_spire__pb2.SpireGetConfigResponse.FromString,
                )
        self.SpireSetConfig = channel.unary_unary(
                '/SpireService/SpireSetConfig',
                request_serializer=proto_dot_spire_dot_spire__pb2.SpireSetConfigRequest.SerializeToString,
                response_deserializer=proto_dot_spire_dot_spire__pb2.SpireSetConfigResponse.FromString,
                )
        self.SpireMaybeJIT = channel.unary_unary(
                '/SpireService/SpireMaybeJIT',
                request_serializer=proto_dot_spire_dot_spire__pb2.SpireMaybeJITRequest.SerializeToString,
                response_deserializer=proto_dot_spire_dot_spire__pb2.SpireMaybeJITResponse.FromString,
                )
        self.SpireStopServing = channel.unary_unary(
                '/SpireService/SpireStopServing',
                request_serializer=proto_dot_spire_dot_spire__pb2.SpireStopServingRequest.SerializeToString,
                response_deserializer=proto_dot_spire_dot_spire__pb2.SpireStopServingResponse.FromString,
                )
        self.SpireEmbedTag = channel.unary_unary(
                '/SpireService/SpireEmbedTag',
                request_serializer=proto_dot_spire_dot_spire__pb2.SpireEmbedTagRequest.SerializeToString,
                response_deserializer=proto_dot_spire_dot_spire__pb2.SpireEmbedTagResponse.FromString,
                )
        self.SpireSavedOutput = channel.unary_unary(
                '/SpireService/SpireSavedOutput',
                request_serializer=proto_dot_spire_dot_spire__pb2.SpireSavedOutputRequest.SerializeToString,
                response_deserializer=proto_dot_spire_dot_spire__pb2.SpireSavedOutputResponse.FromString,
                )
        self.SpireFaceDetectEmbedTag = channel.unary_unary(
                '/SpireService/SpireFaceDetectEmbedTag',
                request_serializer=proto_dot_spire_dot_spire__pb2.SpireFaceDetectEmbedTagRequest.SerializeToString,
                response_deserializer=proto_dot_spire_dot_spire__pb2.SpireFaceDetectEmbedTagResponse.FromString,
                )
        self.SpireDetectEmbedTag = channel.unary_unary(
                '/SpireService/SpireDetectEmbedTag',
                request_serializer=proto_dot_spire_dot_spire__pb2.SpireDetectEmbedTagRequest.SerializeToString,
                response_deserializer=proto_dot_spire_dot_spire__pb2.SpireDetectEmbedTagResponse.FromString,
                )
        self.SpireDetect = channel.unary_unary(
                '/SpireService/SpireDetect',
                request_serializer=proto_dot_spire_dot_spire__pb2.SpireDetectRequest.SerializeToString,
                response_deserializer=proto_dot_spire_dot_spire__pb2.SpireDetectResponse.FromString,
                )
        self.SpireTrack = channel.unary_unary(
                '/SpireService/SpireTrack',
                request_serializer=proto_dot_utils_dot_data__example__pb2.DataExample.SerializeToString,
                response_deserializer=proto_dot_utils_dot_databatch__pb2.DataBatch.FromString,
                )
        self.SpireInstanceSegment = channel.unary_unary(
                '/SpireService/SpireInstanceSegment',
                request_serializer=proto_dot_spire_dot_spire__pb2.SpireInstanceSegmentRequest.SerializeToString,
                response_deserializer=proto_dot_spire_dot_spire__pb2.SpireInstanceSegmentResponse.FromString,
                )


class SpireServiceServicer(object):
    """Interface exported by the server.
    """

    def SpireGetState(self, request, context):
        """Means the net is set and already initialized (jitted).
        This replaces is_ready and is_started which were always confusing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpireGetConfig(self, request, context):
        """Predict given a trained model and embeddings from some examples
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpireSetConfig(self, request, context):
        """Sets the spire config into the net and re-JITs with the new model.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpireMaybeJIT(self, request, context):
        """If the net is not JIT initialized then do it now.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpireStopServing(self, request, context):
        """Tell the net to stop serving which shutdowns the spire neural net and flushes the socket.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpireEmbedTag(self, request, context):
        """This does 'tag' and 'embed' ops on the image or any combination of them.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpireSavedOutput(self, request, context):
        """Get the saved outputs from the neural network.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpireFaceDetectEmbedTag(self, request, context):
        """This does face detection then does 'tag' and 'embed' ops on the image or any combination of
        them.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpireDetectEmbedTag(self, request, context):
        """Face and object detection in a single endpoint.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpireDetect(self, request, context):
        """New detection based methods.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpireTrack(self, request, context):
        """New track based methods
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpireInstanceSegment(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpireServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SpireGetState': grpc.unary_unary_rpc_method_handler(
                    servicer.SpireGetState,
                    request_deserializer=proto_dot_spire_dot_spire__pb2.SpireGetStateRequest.FromString,
                    response_serializer=proto_dot_spire_dot_spire__pb2.SpireGetStateResponse.SerializeToString,
            ),
            'SpireGetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.SpireGetConfig,
                    request_deserializer=proto_dot_spire_dot_spire__pb2.SpireGetConfigRequest.FromString,
                    response_serializer=proto_dot_spire_dot_spire__pb2.SpireGetConfigResponse.SerializeToString,
            ),
            'SpireSetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.SpireSetConfig,
                    request_deserializer=proto_dot_spire_dot_spire__pb2.SpireSetConfigRequest.FromString,
                    response_serializer=proto_dot_spire_dot_spire__pb2.SpireSetConfigResponse.SerializeToString,
            ),
            'SpireMaybeJIT': grpc.unary_unary_rpc_method_handler(
                    servicer.SpireMaybeJIT,
                    request_deserializer=proto_dot_spire_dot_spire__pb2.SpireMaybeJITRequest.FromString,
                    response_serializer=proto_dot_spire_dot_spire__pb2.SpireMaybeJITResponse.SerializeToString,
            ),
            'SpireStopServing': grpc.unary_unary_rpc_method_handler(
                    servicer.SpireStopServing,
                    request_deserializer=proto_dot_spire_dot_spire__pb2.SpireStopServingRequest.FromString,
                    response_serializer=proto_dot_spire_dot_spire__pb2.SpireStopServingResponse.SerializeToString,
            ),
            'SpireEmbedTag': grpc.unary_unary_rpc_method_handler(
                    servicer.SpireEmbedTag,
                    request_deserializer=proto_dot_spire_dot_spire__pb2.SpireEmbedTagRequest.FromString,
                    response_serializer=proto_dot_spire_dot_spire__pb2.SpireEmbedTagResponse.SerializeToString,
            ),
            'SpireSavedOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.SpireSavedOutput,
                    request_deserializer=proto_dot_spire_dot_spire__pb2.SpireSavedOutputRequest.FromString,
                    response_serializer=proto_dot_spire_dot_spire__pb2.SpireSavedOutputResponse.SerializeToString,
            ),
            'SpireFaceDetectEmbedTag': grpc.unary_unary_rpc_method_handler(
                    servicer.SpireFaceDetectEmbedTag,
                    request_deserializer=proto_dot_spire_dot_spire__pb2.SpireFaceDetectEmbedTagRequest.FromString,
                    response_serializer=proto_dot_spire_dot_spire__pb2.SpireFaceDetectEmbedTagResponse.SerializeToString,
            ),
            'SpireDetectEmbedTag': grpc.unary_unary_rpc_method_handler(
                    servicer.SpireDetectEmbedTag,
                    request_deserializer=proto_dot_spire_dot_spire__pb2.SpireDetectEmbedTagRequest.FromString,
                    response_serializer=proto_dot_spire_dot_spire__pb2.SpireDetectEmbedTagResponse.SerializeToString,
            ),
            'SpireDetect': grpc.unary_unary_rpc_method_handler(
                    servicer.SpireDetect,
                    request_deserializer=proto_dot_spire_dot_spire__pb2.SpireDetectRequest.FromString,
                    response_serializer=proto_dot_spire_dot_spire__pb2.SpireDetectResponse.SerializeToString,
            ),
            'SpireTrack': grpc.unary_unary_rpc_method_handler(
                    servicer.SpireTrack,
                    request_deserializer=proto_dot_utils_dot_data__example__pb2.DataExample.FromString,
                    response_serializer=proto_dot_utils_dot_databatch__pb2.DataBatch.SerializeToString,
            ),
            'SpireInstanceSegment': grpc.unary_unary_rpc_method_handler(
                    servicer.SpireInstanceSegment,
                    request_deserializer=proto_dot_spire_dot_spire__pb2.SpireInstanceSegmentRequest.FromString,
                    response_serializer=proto_dot_spire_dot_spire__pb2.SpireInstanceSegmentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SpireService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SpireService(object):
    """Interface exported by the server.
    """

    @staticmethod
    def SpireGetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SpireService/SpireGetState',
            proto_dot_spire_dot_spire__pb2.SpireGetStateRequest.SerializeToString,
            proto_dot_spire_dot_spire__pb2.SpireGetStateResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpireGetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SpireService/SpireGetConfig',
            proto_dot_spire_dot_spire__pb2.SpireGetConfigRequest.SerializeToString,
            proto_dot_spire_dot_spire__pb2.SpireGetConfigResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpireSetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SpireService/SpireSetConfig',
            proto_dot_spire_dot_spire__pb2.SpireSetConfigRequest.SerializeToString,
            proto_dot_spire_dot_spire__pb2.SpireSetConfigResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpireMaybeJIT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SpireService/SpireMaybeJIT',
            proto_dot_spire_dot_spire__pb2.SpireMaybeJITRequest.SerializeToString,
            proto_dot_spire_dot_spire__pb2.SpireMaybeJITResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpireStopServing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SpireService/SpireStopServing',
            proto_dot_spire_dot_spire__pb2.SpireStopServingRequest.SerializeToString,
            proto_dot_spire_dot_spire__pb2.SpireStopServingResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpireEmbedTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SpireService/SpireEmbedTag',
            proto_dot_spire_dot_spire__pb2.SpireEmbedTagRequest.SerializeToString,
            proto_dot_spire_dot_spire__pb2.SpireEmbedTagResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpireSavedOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SpireService/SpireSavedOutput',
            proto_dot_spire_dot_spire__pb2.SpireSavedOutputRequest.SerializeToString,
            proto_dot_spire_dot_spire__pb2.SpireSavedOutputResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpireFaceDetectEmbedTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SpireService/SpireFaceDetectEmbedTag',
            proto_dot_spire_dot_spire__pb2.SpireFaceDetectEmbedTagRequest.SerializeToString,
            proto_dot_spire_dot_spire__pb2.SpireFaceDetectEmbedTagResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpireDetectEmbedTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SpireService/SpireDetectEmbedTag',
            proto_dot_spire_dot_spire__pb2.SpireDetectEmbedTagRequest.SerializeToString,
            proto_dot_spire_dot_spire__pb2.SpireDetectEmbedTagResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpireDetect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SpireService/SpireDetect',
            proto_dot_spire_dot_spire__pb2.SpireDetectRequest.SerializeToString,
            proto_dot_spire_dot_spire__pb2.SpireDetectResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpireTrack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SpireService/SpireTrack',
            proto_dot_utils_dot_data__example__pb2.DataExample.SerializeToString,
            proto_dot_utils_dot_databatch__pb2.DataBatch.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpireInstanceSegment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SpireService/SpireInstanceSegment',
            proto_dot_spire_dot_spire__pb2.SpireInstanceSegmentRequest.SerializeToString,
            proto_dot_spire_dot_spire__pb2.SpireInstanceSegmentResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
