// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/spire/spire_service.proto
#ifndef GRPC_proto_2fspire_2fspire_5fservice_2eproto__INCLUDED
#define GRPC_proto_2fspire_2fspire_5fservice_2eproto__INCLUDED

#include "proto/spire/spire_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

// Interface exported by the server.
class SpireService final {
 public:
  static constexpr char const* service_full_name() {
    return "SpireService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Means the net is set and already initialized (jitted).
    // This replaces is_ready and is_started which were always confusing.
    virtual ::grpc::Status SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::SpireGetStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetStateResponse>> AsyncSpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetStateResponse>>(AsyncSpireGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetStateResponse>> PrepareAsyncSpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetStateResponse>>(PrepareAsyncSpireGetStateRaw(context, request, cq));
    }
    // Predict given a trained model and embeddings from some examples
    virtual ::grpc::Status SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::SpireGetConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetConfigResponse>> AsyncSpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetConfigResponse>>(AsyncSpireGetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetConfigResponse>> PrepareAsyncSpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetConfigResponse>>(PrepareAsyncSpireGetConfigRaw(context, request, cq));
    }
    // Sets the spire config into the net and re-JITs with the new model.
    virtual ::grpc::Status SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::SpireSetConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSetConfigResponse>> AsyncSpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSetConfigResponse>>(AsyncSpireSetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSetConfigResponse>> PrepareAsyncSpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSetConfigResponse>>(PrepareAsyncSpireSetConfigRaw(context, request, cq));
    }
    // If the net is not JIT initialized then do it now.
    virtual ::grpc::Status SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::SpireMaybeJITResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireMaybeJITResponse>> AsyncSpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireMaybeJITResponse>>(AsyncSpireMaybeJITRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireMaybeJITResponse>> PrepareAsyncSpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireMaybeJITResponse>>(PrepareAsyncSpireMaybeJITRaw(context, request, cq));
    }
    // Tell the net to stop serving which shutdowns the spire neural net and flushes the socket.
    virtual ::grpc::Status SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::SpireStopServingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireStopServingResponse>> AsyncSpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireStopServingResponse>>(AsyncSpireStopServingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireStopServingResponse>> PrepareAsyncSpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireStopServingResponse>>(PrepareAsyncSpireStopServingRaw(context, request, cq));
    }
    // This does 'tag' and 'embed' ops on the image or any combination of them.
    virtual ::grpc::Status SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::SpireEmbedTagResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireEmbedTagResponse>> AsyncSpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireEmbedTagResponse>>(AsyncSpireEmbedTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireEmbedTagResponse>> PrepareAsyncSpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireEmbedTagResponse>>(PrepareAsyncSpireEmbedTagRaw(context, request, cq));
    }
    // Get the saved outputs from the neural network.
    virtual ::grpc::Status SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::SpireSavedOutputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSavedOutputResponse>> AsyncSpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSavedOutputResponse>>(AsyncSpireSavedOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSavedOutputResponse>> PrepareAsyncSpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSavedOutputResponse>>(PrepareAsyncSpireSavedOutputRaw(context, request, cq));
    }
    // This does face detection then does 'tag' and 'embed' ops on the image or any combination of
    // them.
    virtual ::grpc::Status SpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest& request, ::SpireFaceDetectEmbedTagResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireFaceDetectEmbedTagResponse>> AsyncSpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireFaceDetectEmbedTagResponse>>(AsyncSpireFaceDetectEmbedTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireFaceDetectEmbedTagResponse>> PrepareAsyncSpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireFaceDetectEmbedTagResponse>>(PrepareAsyncSpireFaceDetectEmbedTagRaw(context, request, cq));
    }
    // Face and object detection in a single endpoint.
    virtual ::grpc::Status SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::SpireDetectEmbedTagResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectEmbedTagResponse>> AsyncSpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectEmbedTagResponse>>(AsyncSpireDetectEmbedTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectEmbedTagResponse>> PrepareAsyncSpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectEmbedTagResponse>>(PrepareAsyncSpireDetectEmbedTagRaw(context, request, cq));
    }
    // New detection based methods.
    virtual ::grpc::Status SpireDetect(::grpc::ClientContext* context, const ::SpireDetectRequest& request, ::SpireDetectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectResponse>> AsyncSpireDetect(::grpc::ClientContext* context, const ::SpireDetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectResponse>>(AsyncSpireDetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectResponse>> PrepareAsyncSpireDetect(::grpc::ClientContext* context, const ::SpireDetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectResponse>>(PrepareAsyncSpireDetectRaw(context, request, cq));
    }
    // New track based methods
    virtual ::grpc::Status SpireTrack(::grpc::ClientContext* context, const ::DataExample& request, ::DataBatch* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DataBatch>> AsyncSpireTrack(::grpc::ClientContext* context, const ::DataExample& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DataBatch>>(AsyncSpireTrackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DataBatch>> PrepareAsyncSpireTrack(::grpc::ClientContext* context, const ::DataExample& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DataBatch>>(PrepareAsyncSpireTrackRaw(context, request, cq));
    }
    virtual ::grpc::Status SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::SpireInstanceSegmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireInstanceSegmentResponse>> AsyncSpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireInstanceSegmentResponse>>(AsyncSpireInstanceSegmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireInstanceSegmentResponse>> PrepareAsyncSpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireInstanceSegmentResponse>>(PrepareAsyncSpireInstanceSegmentRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Means the net is set and already initialized (jitted).
      // This replaces is_ready and is_started which were always confusing.
      virtual void SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Predict given a trained model and embeddings from some examples
      virtual void SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireGetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireGetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireGetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Sets the spire config into the net and re-JITs with the new model.
      virtual void SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireSetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSetConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireSetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSetConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireSetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // If the net is not JIT initialized then do it now.
      virtual void SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireMaybeJIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireMaybeJITResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireMaybeJIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireMaybeJITResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireMaybeJIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireMaybeJITResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Tell the net to stop serving which shutdowns the spire neural net and flushes the socket.
      virtual void SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireStopServing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireStopServingResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireStopServing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireStopServingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireStopServing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireStopServingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // This does 'tag' and 'embed' ops on the image or any combination of them.
      virtual void SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireEmbedTagResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireEmbedTagResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get the saved outputs from the neural network.
      virtual void SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireSavedOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSavedOutputResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireSavedOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSavedOutputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireSavedOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSavedOutputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // This does face detection then does 'tag' and 'embed' ops on the image or any combination of
      // them.
      virtual void SpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest* request, ::SpireFaceDetectEmbedTagResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireFaceDetectEmbedTagResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest* request, ::SpireFaceDetectEmbedTagResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest* request, ::SpireFaceDetectEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireFaceDetectEmbedTagResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireFaceDetectEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Face and object detection in a single endpoint.
      virtual void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectEmbedTagResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectEmbedTagResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // New detection based methods.
      virtual void SpireDetect(::grpc::ClientContext* context, const ::SpireDetectRequest* request, ::SpireDetectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireDetect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireDetect(::grpc::ClientContext* context, const ::SpireDetectRequest* request, ::SpireDetectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireDetect(::grpc::ClientContext* context, const ::SpireDetectRequest* request, ::SpireDetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireDetect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireDetect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // New track based methods
      virtual void SpireTrack(::grpc::ClientContext* context, const ::DataExample* request, ::DataBatch* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireTrack(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DataBatch* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireTrack(::grpc::ClientContext* context, const ::DataExample* request, ::DataBatch* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireTrack(::grpc::ClientContext* context, const ::DataExample* request, ::DataBatch* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireTrack(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DataBatch* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireTrack(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DataBatch* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireInstanceSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireInstanceSegmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SpireInstanceSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireInstanceSegmentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SpireInstanceSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireInstanceSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetStateResponse>* AsyncSpireGetStateRaw(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetStateResponse>* PrepareAsyncSpireGetStateRaw(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetConfigResponse>* AsyncSpireGetConfigRaw(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetConfigResponse>* PrepareAsyncSpireGetConfigRaw(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireSetConfigResponse>* AsyncSpireSetConfigRaw(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireSetConfigResponse>* PrepareAsyncSpireSetConfigRaw(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireMaybeJITResponse>* AsyncSpireMaybeJITRaw(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireMaybeJITResponse>* PrepareAsyncSpireMaybeJITRaw(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireStopServingResponse>* AsyncSpireStopServingRaw(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireStopServingResponse>* PrepareAsyncSpireStopServingRaw(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireEmbedTagResponse>* AsyncSpireEmbedTagRaw(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireEmbedTagResponse>* PrepareAsyncSpireEmbedTagRaw(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireSavedOutputResponse>* AsyncSpireSavedOutputRaw(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireSavedOutputResponse>* PrepareAsyncSpireSavedOutputRaw(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireFaceDetectEmbedTagResponse>* AsyncSpireFaceDetectEmbedTagRaw(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireFaceDetectEmbedTagResponse>* PrepareAsyncSpireFaceDetectEmbedTagRaw(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectEmbedTagResponse>* AsyncSpireDetectEmbedTagRaw(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectEmbedTagResponse>* PrepareAsyncSpireDetectEmbedTagRaw(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectResponse>* AsyncSpireDetectRaw(::grpc::ClientContext* context, const ::SpireDetectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectResponse>* PrepareAsyncSpireDetectRaw(::grpc::ClientContext* context, const ::SpireDetectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DataBatch>* AsyncSpireTrackRaw(::grpc::ClientContext* context, const ::DataExample& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DataBatch>* PrepareAsyncSpireTrackRaw(::grpc::ClientContext* context, const ::DataExample& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireInstanceSegmentResponse>* AsyncSpireInstanceSegmentRaw(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireInstanceSegmentResponse>* PrepareAsyncSpireInstanceSegmentRaw(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::SpireGetStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetStateResponse>> AsyncSpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetStateResponse>>(AsyncSpireGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetStateResponse>> PrepareAsyncSpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetStateResponse>>(PrepareAsyncSpireGetStateRaw(context, request, cq));
    }
    ::grpc::Status SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::SpireGetConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetConfigResponse>> AsyncSpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetConfigResponse>>(AsyncSpireGetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetConfigResponse>> PrepareAsyncSpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetConfigResponse>>(PrepareAsyncSpireGetConfigRaw(context, request, cq));
    }
    ::grpc::Status SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::SpireSetConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSetConfigResponse>> AsyncSpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSetConfigResponse>>(AsyncSpireSetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSetConfigResponse>> PrepareAsyncSpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSetConfigResponse>>(PrepareAsyncSpireSetConfigRaw(context, request, cq));
    }
    ::grpc::Status SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::SpireMaybeJITResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireMaybeJITResponse>> AsyncSpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireMaybeJITResponse>>(AsyncSpireMaybeJITRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireMaybeJITResponse>> PrepareAsyncSpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireMaybeJITResponse>>(PrepareAsyncSpireMaybeJITRaw(context, request, cq));
    }
    ::grpc::Status SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::SpireStopServingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireStopServingResponse>> AsyncSpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireStopServingResponse>>(AsyncSpireStopServingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireStopServingResponse>> PrepareAsyncSpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireStopServingResponse>>(PrepareAsyncSpireStopServingRaw(context, request, cq));
    }
    ::grpc::Status SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::SpireEmbedTagResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireEmbedTagResponse>> AsyncSpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireEmbedTagResponse>>(AsyncSpireEmbedTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireEmbedTagResponse>> PrepareAsyncSpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireEmbedTagResponse>>(PrepareAsyncSpireEmbedTagRaw(context, request, cq));
    }
    ::grpc::Status SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::SpireSavedOutputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSavedOutputResponse>> AsyncSpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSavedOutputResponse>>(AsyncSpireSavedOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSavedOutputResponse>> PrepareAsyncSpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSavedOutputResponse>>(PrepareAsyncSpireSavedOutputRaw(context, request, cq));
    }
    ::grpc::Status SpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest& request, ::SpireFaceDetectEmbedTagResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireFaceDetectEmbedTagResponse>> AsyncSpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireFaceDetectEmbedTagResponse>>(AsyncSpireFaceDetectEmbedTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireFaceDetectEmbedTagResponse>> PrepareAsyncSpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireFaceDetectEmbedTagResponse>>(PrepareAsyncSpireFaceDetectEmbedTagRaw(context, request, cq));
    }
    ::grpc::Status SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::SpireDetectEmbedTagResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireDetectEmbedTagResponse>> AsyncSpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireDetectEmbedTagResponse>>(AsyncSpireDetectEmbedTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireDetectEmbedTagResponse>> PrepareAsyncSpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireDetectEmbedTagResponse>>(PrepareAsyncSpireDetectEmbedTagRaw(context, request, cq));
    }
    ::grpc::Status SpireDetect(::grpc::ClientContext* context, const ::SpireDetectRequest& request, ::SpireDetectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireDetectResponse>> AsyncSpireDetect(::grpc::ClientContext* context, const ::SpireDetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireDetectResponse>>(AsyncSpireDetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireDetectResponse>> PrepareAsyncSpireDetect(::grpc::ClientContext* context, const ::SpireDetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireDetectResponse>>(PrepareAsyncSpireDetectRaw(context, request, cq));
    }
    ::grpc::Status SpireTrack(::grpc::ClientContext* context, const ::DataExample& request, ::DataBatch* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DataBatch>> AsyncSpireTrack(::grpc::ClientContext* context, const ::DataExample& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DataBatch>>(AsyncSpireTrackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DataBatch>> PrepareAsyncSpireTrack(::grpc::ClientContext* context, const ::DataExample& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DataBatch>>(PrepareAsyncSpireTrackRaw(context, request, cq));
    }
    ::grpc::Status SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::SpireInstanceSegmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireInstanceSegmentResponse>> AsyncSpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireInstanceSegmentResponse>>(AsyncSpireInstanceSegmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireInstanceSegmentResponse>> PrepareAsyncSpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireInstanceSegmentResponse>>(PrepareAsyncSpireInstanceSegmentRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetStateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireGetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetConfigResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireGetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireGetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireSetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSetConfigResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireSetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSetConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireSetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireMaybeJIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireMaybeJITResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireMaybeJIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireMaybeJITResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireMaybeJIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireMaybeJITResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireStopServing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireStopServingResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireStopServing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireStopServingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireStopServing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireStopServingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireEmbedTagResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireEmbedTagResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireSavedOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSavedOutputResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireSavedOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSavedOutputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireSavedOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSavedOutputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest* request, ::SpireFaceDetectEmbedTagResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireFaceDetectEmbedTagResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest* request, ::SpireFaceDetectEmbedTagResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest* request, ::SpireFaceDetectEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireFaceDetectEmbedTagResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireFaceDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireFaceDetectEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectEmbedTagResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectEmbedTagResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SpireDetect(::grpc::ClientContext* context, const ::SpireDetectRequest* request, ::SpireDetectResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireDetect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireDetect(::grpc::ClientContext* context, const ::SpireDetectRequest* request, ::SpireDetectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireDetect(::grpc::ClientContext* context, const ::SpireDetectRequest* request, ::SpireDetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireDetect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireDetect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SpireTrack(::grpc::ClientContext* context, const ::DataExample* request, ::DataBatch* response, std::function<void(::grpc::Status)>) override;
      void SpireTrack(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DataBatch* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireTrack(::grpc::ClientContext* context, const ::DataExample* request, ::DataBatch* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireTrack(::grpc::ClientContext* context, const ::DataExample* request, ::DataBatch* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireTrack(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DataBatch* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireTrack(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DataBatch* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireInstanceSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireInstanceSegmentResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SpireInstanceSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireInstanceSegmentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SpireInstanceSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireInstanceSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::SpireGetStateResponse>* AsyncSpireGetStateRaw(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireGetStateResponse>* PrepareAsyncSpireGetStateRaw(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireGetConfigResponse>* AsyncSpireGetConfigRaw(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireGetConfigResponse>* PrepareAsyncSpireGetConfigRaw(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireSetConfigResponse>* AsyncSpireSetConfigRaw(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireSetConfigResponse>* PrepareAsyncSpireSetConfigRaw(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireMaybeJITResponse>* AsyncSpireMaybeJITRaw(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireMaybeJITResponse>* PrepareAsyncSpireMaybeJITRaw(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireStopServingResponse>* AsyncSpireStopServingRaw(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireStopServingResponse>* PrepareAsyncSpireStopServingRaw(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireEmbedTagResponse>* AsyncSpireEmbedTagRaw(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireEmbedTagResponse>* PrepareAsyncSpireEmbedTagRaw(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireSavedOutputResponse>* AsyncSpireSavedOutputRaw(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireSavedOutputResponse>* PrepareAsyncSpireSavedOutputRaw(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireFaceDetectEmbedTagResponse>* AsyncSpireFaceDetectEmbedTagRaw(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireFaceDetectEmbedTagResponse>* PrepareAsyncSpireFaceDetectEmbedTagRaw(::grpc::ClientContext* context, const ::SpireFaceDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireDetectEmbedTagResponse>* AsyncSpireDetectEmbedTagRaw(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireDetectEmbedTagResponse>* PrepareAsyncSpireDetectEmbedTagRaw(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireDetectResponse>* AsyncSpireDetectRaw(::grpc::ClientContext* context, const ::SpireDetectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireDetectResponse>* PrepareAsyncSpireDetectRaw(::grpc::ClientContext* context, const ::SpireDetectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DataBatch>* AsyncSpireTrackRaw(::grpc::ClientContext* context, const ::DataExample& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DataBatch>* PrepareAsyncSpireTrackRaw(::grpc::ClientContext* context, const ::DataExample& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireInstanceSegmentResponse>* AsyncSpireInstanceSegmentRaw(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireInstanceSegmentResponse>* PrepareAsyncSpireInstanceSegmentRaw(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SpireGetState_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireGetConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireSetConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireMaybeJIT_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireStopServing_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireEmbedTag_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireSavedOutput_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireFaceDetectEmbedTag_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireDetectEmbedTag_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireDetect_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireTrack_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireInstanceSegment_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Means the net is set and already initialized (jitted).
    // This replaces is_ready and is_started which were always confusing.
    virtual ::grpc::Status SpireGetState(::grpc::ServerContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response);
    // Predict given a trained model and embeddings from some examples
    virtual ::grpc::Status SpireGetConfig(::grpc::ServerContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response);
    // Sets the spire config into the net and re-JITs with the new model.
    virtual ::grpc::Status SpireSetConfig(::grpc::ServerContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response);
    // If the net is not JIT initialized then do it now.
    virtual ::grpc::Status SpireMaybeJIT(::grpc::ServerContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response);
    // Tell the net to stop serving which shutdowns the spire neural net and flushes the socket.
    virtual ::grpc::Status SpireStopServing(::grpc::ServerContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response);
    // This does 'tag' and 'embed' ops on the image or any combination of them.
    virtual ::grpc::Status SpireEmbedTag(::grpc::ServerContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response);
    // Get the saved outputs from the neural network.
    virtual ::grpc::Status SpireSavedOutput(::grpc::ServerContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response);
    // This does face detection then does 'tag' and 'embed' ops on the image or any combination of
    // them.
    virtual ::grpc::Status SpireFaceDetectEmbedTag(::grpc::ServerContext* context, const ::SpireFaceDetectEmbedTagRequest* request, ::SpireFaceDetectEmbedTagResponse* response);
    // Face and object detection in a single endpoint.
    virtual ::grpc::Status SpireDetectEmbedTag(::grpc::ServerContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response);
    // New detection based methods.
    virtual ::grpc::Status SpireDetect(::grpc::ServerContext* context, const ::SpireDetectRequest* request, ::SpireDetectResponse* response);
    // New track based methods
    virtual ::grpc::Status SpireTrack(::grpc::ServerContext* context, const ::DataExample* request, ::DataBatch* response);
    virtual ::grpc::Status SpireInstanceSegment(::grpc::ServerContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpireGetState() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SpireGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetState(::grpc::ServerContext* /*context*/, const ::SpireGetStateRequest* /*request*/, ::SpireGetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireGetState(::grpc::ServerContext* context, ::SpireGetStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireGetStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireGetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpireGetConfig() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SpireGetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetConfig(::grpc::ServerContext* /*context*/, const ::SpireGetConfigRequest* /*request*/, ::SpireGetConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireGetConfig(::grpc::ServerContext* context, ::SpireGetConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireGetConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireSetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpireSetConfig() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SpireSetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSetConfig(::grpc::ServerContext* /*context*/, const ::SpireSetConfigRequest* /*request*/, ::SpireSetConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireSetConfig(::grpc::ServerContext* context, ::SpireSetConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireSetConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireMaybeJIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpireMaybeJIT() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SpireMaybeJIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireMaybeJIT(::grpc::ServerContext* /*context*/, const ::SpireMaybeJITRequest* /*request*/, ::SpireMaybeJITResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireMaybeJIT(::grpc::ServerContext* context, ::SpireMaybeJITRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireMaybeJITResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireStopServing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpireStopServing() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SpireStopServing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireStopServing(::grpc::ServerContext* /*context*/, const ::SpireStopServingRequest* /*request*/, ::SpireStopServingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireStopServing(::grpc::ServerContext* context, ::SpireStopServingRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireStopServingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpireEmbedTag() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SpireEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireEmbedTagRequest* /*request*/, ::SpireEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireEmbedTag(::grpc::ServerContext* context, ::SpireEmbedTagRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireEmbedTagResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireSavedOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpireSavedOutput() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SpireSavedOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSavedOutput(::grpc::ServerContext* /*context*/, const ::SpireSavedOutputRequest* /*request*/, ::SpireSavedOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireSavedOutput(::grpc::ServerContext* context, ::SpireSavedOutputRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireSavedOutputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireFaceDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpireFaceDetectEmbedTag() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SpireFaceDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireFaceDetectEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireFaceDetectEmbedTagRequest* /*request*/, ::SpireFaceDetectEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireFaceDetectEmbedTag(::grpc::ServerContext* context, ::SpireFaceDetectEmbedTagRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireFaceDetectEmbedTagResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpireDetectEmbedTag() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SpireDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireDetectEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireDetectEmbedTagRequest* /*request*/, ::SpireDetectEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireDetectEmbedTag(::grpc::ServerContext* context, ::SpireDetectEmbedTagRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireDetectEmbedTagResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpireDetect() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SpireDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireDetect(::grpc::ServerContext* /*context*/, const ::SpireDetectRequest* /*request*/, ::SpireDetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireDetect(::grpc::ServerContext* context, ::SpireDetectRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireDetectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireTrack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpireTrack() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SpireTrack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireTrack(::grpc::ServerContext* /*context*/, const ::DataExample* /*request*/, ::DataBatch* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireTrack(::grpc::ServerContext* context, ::DataExample* request, ::grpc::ServerAsyncResponseWriter< ::DataBatch>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireInstanceSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpireInstanceSegment() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SpireInstanceSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireInstanceSegment(::grpc::ServerContext* /*context*/, const ::SpireInstanceSegmentRequest* /*request*/, ::SpireInstanceSegmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireInstanceSegment(::grpc::ServerContext* context, ::SpireInstanceSegmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireInstanceSegmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SpireGetState<WithAsyncMethod_SpireGetConfig<WithAsyncMethod_SpireSetConfig<WithAsyncMethod_SpireMaybeJIT<WithAsyncMethod_SpireStopServing<WithAsyncMethod_SpireEmbedTag<WithAsyncMethod_SpireSavedOutput<WithAsyncMethod_SpireFaceDetectEmbedTag<WithAsyncMethod_SpireDetectEmbedTag<WithAsyncMethod_SpireDetect<WithAsyncMethod_SpireTrack<WithAsyncMethod_SpireInstanceSegment<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SpireGetState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireGetStateRequest, ::SpireGetStateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response) { return this->SpireGetState(context, request, response); }));}
    void SetMessageAllocatorFor_SpireGetState(
        ::grpc::experimental::MessageAllocator< ::SpireGetStateRequest, ::SpireGetStateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireGetStateRequest, ::SpireGetStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetState(::grpc::ServerContext* /*context*/, const ::SpireGetStateRequest* /*request*/, ::SpireGetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireGetState(
      ::grpc::CallbackServerContext* /*context*/, const ::SpireGetStateRequest* /*request*/, ::SpireGetStateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireGetState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SpireGetStateRequest* /*request*/, ::SpireGetStateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireGetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SpireGetConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireGetConfigRequest, ::SpireGetConfigResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response) { return this->SpireGetConfig(context, request, response); }));}
    void SetMessageAllocatorFor_SpireGetConfig(
        ::grpc::experimental::MessageAllocator< ::SpireGetConfigRequest, ::SpireGetConfigResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireGetConfigRequest, ::SpireGetConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireGetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetConfig(::grpc::ServerContext* /*context*/, const ::SpireGetConfigRequest* /*request*/, ::SpireGetConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireGetConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::SpireGetConfigRequest* /*request*/, ::SpireGetConfigResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireGetConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SpireGetConfigRequest* /*request*/, ::SpireGetConfigResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireSetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SpireSetConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireSetConfigRequest, ::SpireSetConfigResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response) { return this->SpireSetConfig(context, request, response); }));}
    void SetMessageAllocatorFor_SpireSetConfig(
        ::grpc::experimental::MessageAllocator< ::SpireSetConfigRequest, ::SpireSetConfigResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireSetConfigRequest, ::SpireSetConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireSetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSetConfig(::grpc::ServerContext* /*context*/, const ::SpireSetConfigRequest* /*request*/, ::SpireSetConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireSetConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::SpireSetConfigRequest* /*request*/, ::SpireSetConfigResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireSetConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SpireSetConfigRequest* /*request*/, ::SpireSetConfigResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireMaybeJIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SpireMaybeJIT() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireMaybeJITRequest, ::SpireMaybeJITResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response) { return this->SpireMaybeJIT(context, request, response); }));}
    void SetMessageAllocatorFor_SpireMaybeJIT(
        ::grpc::experimental::MessageAllocator< ::SpireMaybeJITRequest, ::SpireMaybeJITResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireMaybeJITRequest, ::SpireMaybeJITResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireMaybeJIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireMaybeJIT(::grpc::ServerContext* /*context*/, const ::SpireMaybeJITRequest* /*request*/, ::SpireMaybeJITResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireMaybeJIT(
      ::grpc::CallbackServerContext* /*context*/, const ::SpireMaybeJITRequest* /*request*/, ::SpireMaybeJITResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireMaybeJIT(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SpireMaybeJITRequest* /*request*/, ::SpireMaybeJITResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireStopServing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SpireStopServing() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireStopServingRequest, ::SpireStopServingResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response) { return this->SpireStopServing(context, request, response); }));}
    void SetMessageAllocatorFor_SpireStopServing(
        ::grpc::experimental::MessageAllocator< ::SpireStopServingRequest, ::SpireStopServingResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireStopServingRequest, ::SpireStopServingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireStopServing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireStopServing(::grpc::ServerContext* /*context*/, const ::SpireStopServingRequest* /*request*/, ::SpireStopServingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireStopServing(
      ::grpc::CallbackServerContext* /*context*/, const ::SpireStopServingRequest* /*request*/, ::SpireStopServingResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireStopServing(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SpireStopServingRequest* /*request*/, ::SpireStopServingResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SpireEmbedTag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireEmbedTagRequest, ::SpireEmbedTagResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response) { return this->SpireEmbedTag(context, request, response); }));}
    void SetMessageAllocatorFor_SpireEmbedTag(
        ::grpc::experimental::MessageAllocator< ::SpireEmbedTagRequest, ::SpireEmbedTagResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireEmbedTagRequest, ::SpireEmbedTagResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireEmbedTagRequest* /*request*/, ::SpireEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireEmbedTag(
      ::grpc::CallbackServerContext* /*context*/, const ::SpireEmbedTagRequest* /*request*/, ::SpireEmbedTagResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireEmbedTag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SpireEmbedTagRequest* /*request*/, ::SpireEmbedTagResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireSavedOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SpireSavedOutput() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireSavedOutputRequest, ::SpireSavedOutputResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response) { return this->SpireSavedOutput(context, request, response); }));}
    void SetMessageAllocatorFor_SpireSavedOutput(
        ::grpc::experimental::MessageAllocator< ::SpireSavedOutputRequest, ::SpireSavedOutputResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireSavedOutputRequest, ::SpireSavedOutputResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireSavedOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSavedOutput(::grpc::ServerContext* /*context*/, const ::SpireSavedOutputRequest* /*request*/, ::SpireSavedOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireSavedOutput(
      ::grpc::CallbackServerContext* /*context*/, const ::SpireSavedOutputRequest* /*request*/, ::SpireSavedOutputResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireSavedOutput(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SpireSavedOutputRequest* /*request*/, ::SpireSavedOutputResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireFaceDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SpireFaceDetectEmbedTag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireFaceDetectEmbedTagRequest, ::SpireFaceDetectEmbedTagResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SpireFaceDetectEmbedTagRequest* request, ::SpireFaceDetectEmbedTagResponse* response) { return this->SpireFaceDetectEmbedTag(context, request, response); }));}
    void SetMessageAllocatorFor_SpireFaceDetectEmbedTag(
        ::grpc::experimental::MessageAllocator< ::SpireFaceDetectEmbedTagRequest, ::SpireFaceDetectEmbedTagResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireFaceDetectEmbedTagRequest, ::SpireFaceDetectEmbedTagResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireFaceDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireFaceDetectEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireFaceDetectEmbedTagRequest* /*request*/, ::SpireFaceDetectEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireFaceDetectEmbedTag(
      ::grpc::CallbackServerContext* /*context*/, const ::SpireFaceDetectEmbedTagRequest* /*request*/, ::SpireFaceDetectEmbedTagResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireFaceDetectEmbedTag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SpireFaceDetectEmbedTagRequest* /*request*/, ::SpireFaceDetectEmbedTagResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SpireDetectEmbedTag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireDetectEmbedTagRequest, ::SpireDetectEmbedTagResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response) { return this->SpireDetectEmbedTag(context, request, response); }));}
    void SetMessageAllocatorFor_SpireDetectEmbedTag(
        ::grpc::experimental::MessageAllocator< ::SpireDetectEmbedTagRequest, ::SpireDetectEmbedTagResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireDetectEmbedTagRequest, ::SpireDetectEmbedTagResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireDetectEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireDetectEmbedTagRequest* /*request*/, ::SpireDetectEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireDetectEmbedTag(
      ::grpc::CallbackServerContext* /*context*/, const ::SpireDetectEmbedTagRequest* /*request*/, ::SpireDetectEmbedTagResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireDetectEmbedTag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SpireDetectEmbedTagRequest* /*request*/, ::SpireDetectEmbedTagResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SpireDetect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireDetectRequest, ::SpireDetectResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SpireDetectRequest* request, ::SpireDetectResponse* response) { return this->SpireDetect(context, request, response); }));}
    void SetMessageAllocatorFor_SpireDetect(
        ::grpc::experimental::MessageAllocator< ::SpireDetectRequest, ::SpireDetectResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireDetectRequest, ::SpireDetectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireDetect(::grpc::ServerContext* /*context*/, const ::SpireDetectRequest* /*request*/, ::SpireDetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireDetect(
      ::grpc::CallbackServerContext* /*context*/, const ::SpireDetectRequest* /*request*/, ::SpireDetectResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireDetect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SpireDetectRequest* /*request*/, ::SpireDetectResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireTrack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SpireTrack() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::DataExample, ::DataBatch>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::DataExample* request, ::DataBatch* response) { return this->SpireTrack(context, request, response); }));}
    void SetMessageAllocatorFor_SpireTrack(
        ::grpc::experimental::MessageAllocator< ::DataExample, ::DataBatch>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::DataExample, ::DataBatch>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireTrack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireTrack(::grpc::ServerContext* /*context*/, const ::DataExample* /*request*/, ::DataBatch* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireTrack(
      ::grpc::CallbackServerContext* /*context*/, const ::DataExample* /*request*/, ::DataBatch* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireTrack(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::DataExample* /*request*/, ::DataBatch* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireInstanceSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SpireInstanceSegment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireInstanceSegmentRequest, ::SpireInstanceSegmentResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response) { return this->SpireInstanceSegment(context, request, response); }));}
    void SetMessageAllocatorFor_SpireInstanceSegment(
        ::grpc::experimental::MessageAllocator< ::SpireInstanceSegmentRequest, ::SpireInstanceSegmentResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireInstanceSegmentRequest, ::SpireInstanceSegmentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireInstanceSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireInstanceSegment(::grpc::ServerContext* /*context*/, const ::SpireInstanceSegmentRequest* /*request*/, ::SpireInstanceSegmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireInstanceSegment(
      ::grpc::CallbackServerContext* /*context*/, const ::SpireInstanceSegmentRequest* /*request*/, ::SpireInstanceSegmentResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireInstanceSegment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SpireInstanceSegmentRequest* /*request*/, ::SpireInstanceSegmentResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SpireGetState<ExperimentalWithCallbackMethod_SpireGetConfig<ExperimentalWithCallbackMethod_SpireSetConfig<ExperimentalWithCallbackMethod_SpireMaybeJIT<ExperimentalWithCallbackMethod_SpireStopServing<ExperimentalWithCallbackMethod_SpireEmbedTag<ExperimentalWithCallbackMethod_SpireSavedOutput<ExperimentalWithCallbackMethod_SpireFaceDetectEmbedTag<ExperimentalWithCallbackMethod_SpireDetectEmbedTag<ExperimentalWithCallbackMethod_SpireDetect<ExperimentalWithCallbackMethod_SpireTrack<ExperimentalWithCallbackMethod_SpireInstanceSegment<Service > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SpireGetState<ExperimentalWithCallbackMethod_SpireGetConfig<ExperimentalWithCallbackMethod_SpireSetConfig<ExperimentalWithCallbackMethod_SpireMaybeJIT<ExperimentalWithCallbackMethod_SpireStopServing<ExperimentalWithCallbackMethod_SpireEmbedTag<ExperimentalWithCallbackMethod_SpireSavedOutput<ExperimentalWithCallbackMethod_SpireFaceDetectEmbedTag<ExperimentalWithCallbackMethod_SpireDetectEmbedTag<ExperimentalWithCallbackMethod_SpireDetect<ExperimentalWithCallbackMethod_SpireTrack<ExperimentalWithCallbackMethod_SpireInstanceSegment<Service > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SpireGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpireGetState() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SpireGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetState(::grpc::ServerContext* /*context*/, const ::SpireGetStateRequest* /*request*/, ::SpireGetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireGetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpireGetConfig() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SpireGetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetConfig(::grpc::ServerContext* /*context*/, const ::SpireGetConfigRequest* /*request*/, ::SpireGetConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireSetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpireSetConfig() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SpireSetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSetConfig(::grpc::ServerContext* /*context*/, const ::SpireSetConfigRequest* /*request*/, ::SpireSetConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireMaybeJIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpireMaybeJIT() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SpireMaybeJIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireMaybeJIT(::grpc::ServerContext* /*context*/, const ::SpireMaybeJITRequest* /*request*/, ::SpireMaybeJITResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireStopServing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpireStopServing() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SpireStopServing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireStopServing(::grpc::ServerContext* /*context*/, const ::SpireStopServingRequest* /*request*/, ::SpireStopServingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpireEmbedTag() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SpireEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireEmbedTagRequest* /*request*/, ::SpireEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireSavedOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpireSavedOutput() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SpireSavedOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSavedOutput(::grpc::ServerContext* /*context*/, const ::SpireSavedOutputRequest* /*request*/, ::SpireSavedOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireFaceDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpireFaceDetectEmbedTag() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SpireFaceDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireFaceDetectEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireFaceDetectEmbedTagRequest* /*request*/, ::SpireFaceDetectEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpireDetectEmbedTag() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SpireDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireDetectEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireDetectEmbedTagRequest* /*request*/, ::SpireDetectEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpireDetect() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SpireDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireDetect(::grpc::ServerContext* /*context*/, const ::SpireDetectRequest* /*request*/, ::SpireDetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireTrack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpireTrack() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SpireTrack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireTrack(::grpc::ServerContext* /*context*/, const ::DataExample* /*request*/, ::DataBatch* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireInstanceSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpireInstanceSegment() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SpireInstanceSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireInstanceSegment(::grpc::ServerContext* /*context*/, const ::SpireInstanceSegmentRequest* /*request*/, ::SpireInstanceSegmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpireGetState() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SpireGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetState(::grpc::ServerContext* /*context*/, const ::SpireGetStateRequest* /*request*/, ::SpireGetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireGetState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireGetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpireGetConfig() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SpireGetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetConfig(::grpc::ServerContext* /*context*/, const ::SpireGetConfigRequest* /*request*/, ::SpireGetConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireGetConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireSetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpireSetConfig() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SpireSetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSetConfig(::grpc::ServerContext* /*context*/, const ::SpireSetConfigRequest* /*request*/, ::SpireSetConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireSetConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireMaybeJIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpireMaybeJIT() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SpireMaybeJIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireMaybeJIT(::grpc::ServerContext* /*context*/, const ::SpireMaybeJITRequest* /*request*/, ::SpireMaybeJITResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireMaybeJIT(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireStopServing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpireStopServing() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SpireStopServing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireStopServing(::grpc::ServerContext* /*context*/, const ::SpireStopServingRequest* /*request*/, ::SpireStopServingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireStopServing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpireEmbedTag() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SpireEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireEmbedTagRequest* /*request*/, ::SpireEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireEmbedTag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireSavedOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpireSavedOutput() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SpireSavedOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSavedOutput(::grpc::ServerContext* /*context*/, const ::SpireSavedOutputRequest* /*request*/, ::SpireSavedOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireSavedOutput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireFaceDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpireFaceDetectEmbedTag() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SpireFaceDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireFaceDetectEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireFaceDetectEmbedTagRequest* /*request*/, ::SpireFaceDetectEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireFaceDetectEmbedTag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpireDetectEmbedTag() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SpireDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireDetectEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireDetectEmbedTagRequest* /*request*/, ::SpireDetectEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireDetectEmbedTag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpireDetect() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SpireDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireDetect(::grpc::ServerContext* /*context*/, const ::SpireDetectRequest* /*request*/, ::SpireDetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireDetect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireTrack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpireTrack() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SpireTrack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireTrack(::grpc::ServerContext* /*context*/, const ::DataExample* /*request*/, ::DataBatch* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireTrack(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireInstanceSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpireInstanceSegment() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SpireInstanceSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireInstanceSegment(::grpc::ServerContext* /*context*/, const ::SpireInstanceSegmentRequest* /*request*/, ::SpireInstanceSegmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireInstanceSegment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireGetState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpireGetState(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetState(::grpc::ServerContext* /*context*/, const ::SpireGetStateRequest* /*request*/, ::SpireGetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireGetState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireGetState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireGetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireGetConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpireGetConfig(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireGetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetConfig(::grpc::ServerContext* /*context*/, const ::SpireGetConfigRequest* /*request*/, ::SpireGetConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireGetConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireGetConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireSetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireSetConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpireSetConfig(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireSetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSetConfig(::grpc::ServerContext* /*context*/, const ::SpireSetConfigRequest* /*request*/, ::SpireSetConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireSetConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireSetConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireMaybeJIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireMaybeJIT() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpireMaybeJIT(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireMaybeJIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireMaybeJIT(::grpc::ServerContext* /*context*/, const ::SpireMaybeJITRequest* /*request*/, ::SpireMaybeJITResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireMaybeJIT(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireMaybeJIT(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireStopServing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireStopServing() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpireStopServing(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireStopServing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireStopServing(::grpc::ServerContext* /*context*/, const ::SpireStopServingRequest* /*request*/, ::SpireStopServingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireStopServing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireStopServing(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireEmbedTag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpireEmbedTag(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireEmbedTagRequest* /*request*/, ::SpireEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireEmbedTag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireEmbedTag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireSavedOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireSavedOutput() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpireSavedOutput(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireSavedOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSavedOutput(::grpc::ServerContext* /*context*/, const ::SpireSavedOutputRequest* /*request*/, ::SpireSavedOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireSavedOutput(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireSavedOutput(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireFaceDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireFaceDetectEmbedTag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpireFaceDetectEmbedTag(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireFaceDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireFaceDetectEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireFaceDetectEmbedTagRequest* /*request*/, ::SpireFaceDetectEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireFaceDetectEmbedTag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireFaceDetectEmbedTag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireDetectEmbedTag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpireDetectEmbedTag(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireDetectEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireDetectEmbedTagRequest* /*request*/, ::SpireDetectEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireDetectEmbedTag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireDetectEmbedTag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireDetect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpireDetect(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireDetect(::grpc::ServerContext* /*context*/, const ::SpireDetectRequest* /*request*/, ::SpireDetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireDetect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireDetect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireTrack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireTrack() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpireTrack(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireTrack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireTrack(::grpc::ServerContext* /*context*/, const ::DataExample* /*request*/, ::DataBatch* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireTrack(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireTrack(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireInstanceSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireInstanceSegment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpireInstanceSegment(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireInstanceSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireInstanceSegment(::grpc::ServerContext* /*context*/, const ::SpireInstanceSegmentRequest* /*request*/, ::SpireInstanceSegmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SpireInstanceSegment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SpireInstanceSegment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpireGetState() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SpireGetStateRequest, ::SpireGetStateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::SpireGetStateRequest, ::SpireGetStateResponse>* streamer) {
                       return this->StreamedSpireGetState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpireGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireGetState(::grpc::ServerContext* /*context*/, const ::SpireGetStateRequest* /*request*/, ::SpireGetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireGetState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireGetStateRequest,::SpireGetStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireGetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpireGetConfig() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SpireGetConfigRequest, ::SpireGetConfigResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::SpireGetConfigRequest, ::SpireGetConfigResponse>* streamer) {
                       return this->StreamedSpireGetConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpireGetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireGetConfig(::grpc::ServerContext* /*context*/, const ::SpireGetConfigRequest* /*request*/, ::SpireGetConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireGetConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireGetConfigRequest,::SpireGetConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireSetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpireSetConfig() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SpireSetConfigRequest, ::SpireSetConfigResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::SpireSetConfigRequest, ::SpireSetConfigResponse>* streamer) {
                       return this->StreamedSpireSetConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpireSetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireSetConfig(::grpc::ServerContext* /*context*/, const ::SpireSetConfigRequest* /*request*/, ::SpireSetConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireSetConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireSetConfigRequest,::SpireSetConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireMaybeJIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpireMaybeJIT() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SpireMaybeJITRequest, ::SpireMaybeJITResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::SpireMaybeJITRequest, ::SpireMaybeJITResponse>* streamer) {
                       return this->StreamedSpireMaybeJIT(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpireMaybeJIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireMaybeJIT(::grpc::ServerContext* /*context*/, const ::SpireMaybeJITRequest* /*request*/, ::SpireMaybeJITResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireMaybeJIT(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireMaybeJITRequest,::SpireMaybeJITResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireStopServing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpireStopServing() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SpireStopServingRequest, ::SpireStopServingResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::SpireStopServingRequest, ::SpireStopServingResponse>* streamer) {
                       return this->StreamedSpireStopServing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpireStopServing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireStopServing(::grpc::ServerContext* /*context*/, const ::SpireStopServingRequest* /*request*/, ::SpireStopServingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireStopServing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireStopServingRequest,::SpireStopServingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpireEmbedTag() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SpireEmbedTagRequest, ::SpireEmbedTagResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::SpireEmbedTagRequest, ::SpireEmbedTagResponse>* streamer) {
                       return this->StreamedSpireEmbedTag(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpireEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireEmbedTagRequest* /*request*/, ::SpireEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireEmbedTag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireEmbedTagRequest,::SpireEmbedTagResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireSavedOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpireSavedOutput() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SpireSavedOutputRequest, ::SpireSavedOutputResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::SpireSavedOutputRequest, ::SpireSavedOutputResponse>* streamer) {
                       return this->StreamedSpireSavedOutput(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpireSavedOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireSavedOutput(::grpc::ServerContext* /*context*/, const ::SpireSavedOutputRequest* /*request*/, ::SpireSavedOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireSavedOutput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireSavedOutputRequest,::SpireSavedOutputResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireFaceDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpireFaceDetectEmbedTag() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SpireFaceDetectEmbedTagRequest, ::SpireFaceDetectEmbedTagResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::SpireFaceDetectEmbedTagRequest, ::SpireFaceDetectEmbedTagResponse>* streamer) {
                       return this->StreamedSpireFaceDetectEmbedTag(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpireFaceDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireFaceDetectEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireFaceDetectEmbedTagRequest* /*request*/, ::SpireFaceDetectEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireFaceDetectEmbedTag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireFaceDetectEmbedTagRequest,::SpireFaceDetectEmbedTagResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpireDetectEmbedTag() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SpireDetectEmbedTagRequest, ::SpireDetectEmbedTagResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::SpireDetectEmbedTagRequest, ::SpireDetectEmbedTagResponse>* streamer) {
                       return this->StreamedSpireDetectEmbedTag(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpireDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireDetectEmbedTag(::grpc::ServerContext* /*context*/, const ::SpireDetectEmbedTagRequest* /*request*/, ::SpireDetectEmbedTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireDetectEmbedTag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireDetectEmbedTagRequest,::SpireDetectEmbedTagResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpireDetect() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SpireDetectRequest, ::SpireDetectResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::SpireDetectRequest, ::SpireDetectResponse>* streamer) {
                       return this->StreamedSpireDetect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpireDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireDetect(::grpc::ServerContext* /*context*/, const ::SpireDetectRequest* /*request*/, ::SpireDetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireDetect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireDetectRequest,::SpireDetectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireTrack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpireTrack() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DataExample, ::DataBatch>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::DataExample, ::DataBatch>* streamer) {
                       return this->StreamedSpireTrack(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpireTrack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireTrack(::grpc::ServerContext* /*context*/, const ::DataExample* /*request*/, ::DataBatch* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireTrack(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DataExample,::DataBatch>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireInstanceSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpireInstanceSegment() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SpireInstanceSegmentRequest, ::SpireInstanceSegmentResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::SpireInstanceSegmentRequest, ::SpireInstanceSegmentResponse>* streamer) {
                       return this->StreamedSpireInstanceSegment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpireInstanceSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireInstanceSegment(::grpc::ServerContext* /*context*/, const ::SpireInstanceSegmentRequest* /*request*/, ::SpireInstanceSegmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireInstanceSegment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireInstanceSegmentRequest,::SpireInstanceSegmentResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SpireGetState<WithStreamedUnaryMethod_SpireGetConfig<WithStreamedUnaryMethod_SpireSetConfig<WithStreamedUnaryMethod_SpireMaybeJIT<WithStreamedUnaryMethod_SpireStopServing<WithStreamedUnaryMethod_SpireEmbedTag<WithStreamedUnaryMethod_SpireSavedOutput<WithStreamedUnaryMethod_SpireFaceDetectEmbedTag<WithStreamedUnaryMethod_SpireDetectEmbedTag<WithStreamedUnaryMethod_SpireDetect<WithStreamedUnaryMethod_SpireTrack<WithStreamedUnaryMethod_SpireInstanceSegment<Service > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SpireGetState<WithStreamedUnaryMethod_SpireGetConfig<WithStreamedUnaryMethod_SpireSetConfig<WithStreamedUnaryMethod_SpireMaybeJIT<WithStreamedUnaryMethod_SpireStopServing<WithStreamedUnaryMethod_SpireEmbedTag<WithStreamedUnaryMethod_SpireSavedOutput<WithStreamedUnaryMethod_SpireFaceDetectEmbedTag<WithStreamedUnaryMethod_SpireDetectEmbedTag<WithStreamedUnaryMethod_SpireDetect<WithStreamedUnaryMethod_SpireTrack<WithStreamedUnaryMethod_SpireInstanceSegment<Service > > > > > > > > > > > > StreamedService;
};


#endif  // GRPC_proto_2fspire_2fspire_5fservice_2eproto__INCLUDED
