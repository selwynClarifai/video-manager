// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/concept_mapping/service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fconcept_5fmapping_2fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fconcept_5fmapping_2fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/clarifai/api/resources.pb.h"
#include "proto/utils/request_meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fconcept_5fmapping_2fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fconcept_5fmapping_2fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fconcept_5fmapping_2fservice_2eproto;
class ConceptMappingRequest;
class ConceptMappingRequestDefaultTypeInternal;
extern ConceptMappingRequestDefaultTypeInternal _ConceptMappingRequest_default_instance_;
class ConceptMappingResponse;
class ConceptMappingResponseDefaultTypeInternal;
extern ConceptMappingResponseDefaultTypeInternal _ConceptMappingResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ConceptMappingRequest* Arena::CreateMaybeMessage<::ConceptMappingRequest>(Arena*);
template<> ::ConceptMappingResponse* Arena::CreateMaybeMessage<::ConceptMappingResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ConceptMappingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConceptMappingRequest) */ {
 public:
  inline ConceptMappingRequest() : ConceptMappingRequest(nullptr) {}
  virtual ~ConceptMappingRequest();

  ConceptMappingRequest(const ConceptMappingRequest& from);
  ConceptMappingRequest(ConceptMappingRequest&& from) noexcept
    : ConceptMappingRequest() {
    *this = ::std::move(from);
  }

  inline ConceptMappingRequest& operator=(const ConceptMappingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptMappingRequest& operator=(ConceptMappingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptMappingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptMappingRequest* internal_default_instance() {
    return reinterpret_cast<const ConceptMappingRequest*>(
               &_ConceptMappingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConceptMappingRequest& a, ConceptMappingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptMappingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConceptMappingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptMappingRequest* New() const final {
    return CreateMaybeMessage<ConceptMappingRequest>(nullptr);
  }

  ConceptMappingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptMappingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptMappingRequest& from);
  void MergeFrom(const ConceptMappingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptMappingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConceptMappingRequest";
  }
  protected:
  explicit ConceptMappingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fconcept_5fmapping_2fservice_2eproto);
    return ::descriptor_table_proto_2fconcept_5fmapping_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptIdsFieldNumber = 3,
    kAppIdFieldNumber = 2,
    kMetaFieldNumber = 1,
    kKnowledgeGraphFieldNumber = 4,
  };
  // repeated string concept_ids = 3;
  int concept_ids_size() const;
  private:
  int _internal_concept_ids_size() const;
  public:
  void clear_concept_ids();
  const std::string& concept_ids(int index) const;
  std::string* mutable_concept_ids(int index);
  void set_concept_ids(int index, const std::string& value);
  void set_concept_ids(int index, std::string&& value);
  void set_concept_ids(int index, const char* value);
  void set_concept_ids(int index, const char* value, size_t size);
  std::string* add_concept_ids();
  void add_concept_ids(const std::string& value);
  void add_concept_ids(std::string&& value);
  void add_concept_ids(const char* value);
  void add_concept_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& concept_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_concept_ids();
  private:
  const std::string& _internal_concept_ids(int index) const;
  std::string* _internal_add_concept_ids();
  public:

  // string app_id = 2;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .clarifai.api.KnowledgeGraph knowledge_graph = 4;
  bool has_knowledge_graph() const;
  private:
  bool _internal_has_knowledge_graph() const;
  public:
  void clear_knowledge_graph();
  const ::clarifai::api::KnowledgeGraph& knowledge_graph() const;
  ::clarifai::api::KnowledgeGraph* release_knowledge_graph();
  ::clarifai::api::KnowledgeGraph* mutable_knowledge_graph();
  void set_allocated_knowledge_graph(::clarifai::api::KnowledgeGraph* knowledge_graph);
  private:
  const ::clarifai::api::KnowledgeGraph& _internal_knowledge_graph() const;
  ::clarifai::api::KnowledgeGraph* _internal_mutable_knowledge_graph();
  public:
  void unsafe_arena_set_allocated_knowledge_graph(
      ::clarifai::api::KnowledgeGraph* knowledge_graph);
  ::clarifai::api::KnowledgeGraph* unsafe_arena_release_knowledge_graph();

  // @@protoc_insertion_point(class_scope:ConceptMappingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> concept_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::RequestMeta* meta_;
  ::clarifai::api::KnowledgeGraph* knowledge_graph_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fconcept_5fmapping_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ConceptMappingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConceptMappingResponse) */ {
 public:
  inline ConceptMappingResponse() : ConceptMappingResponse(nullptr) {}
  virtual ~ConceptMappingResponse();

  ConceptMappingResponse(const ConceptMappingResponse& from);
  ConceptMappingResponse(ConceptMappingResponse&& from) noexcept
    : ConceptMappingResponse() {
    *this = ::std::move(from);
  }

  inline ConceptMappingResponse& operator=(const ConceptMappingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptMappingResponse& operator=(ConceptMappingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptMappingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptMappingResponse* internal_default_instance() {
    return reinterpret_cast<const ConceptMappingResponse*>(
               &_ConceptMappingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConceptMappingResponse& a, ConceptMappingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptMappingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConceptMappingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptMappingResponse* New() const final {
    return CreateMaybeMessage<ConceptMappingResponse>(nullptr);
  }

  ConceptMappingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptMappingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptMappingResponse& from);
  void MergeFrom(const ConceptMappingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptMappingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConceptMappingResponse";
  }
  protected:
  explicit ConceptMappingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fconcept_5fmapping_2fservice_2eproto);
    return ::descriptor_table_proto_2fconcept_5fmapping_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:ConceptMappingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fconcept_5fmapping_2fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConceptMappingRequest

// .RequestMeta meta = 1;
inline bool ConceptMappingRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool ConceptMappingRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& ConceptMappingRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& ConceptMappingRequest::meta() const {
  // @@protoc_insertion_point(field_get:ConceptMappingRequest.meta)
  return _internal_meta();
}
inline void ConceptMappingRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConceptMappingRequest.meta)
}
inline ::RequestMeta* ConceptMappingRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* ConceptMappingRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:ConceptMappingRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* ConceptMappingRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* ConceptMappingRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:ConceptMappingRequest.meta)
  return _internal_mutable_meta();
}
inline void ConceptMappingRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:ConceptMappingRequest.meta)
}

// string app_id = 2;
inline void ConceptMappingRequest::clear_app_id() {
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptMappingRequest::app_id() const {
  // @@protoc_insertion_point(field_get:ConceptMappingRequest.app_id)
  return _internal_app_id();
}
inline void ConceptMappingRequest::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:ConceptMappingRequest.app_id)
}
inline std::string* ConceptMappingRequest::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:ConceptMappingRequest.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& ConceptMappingRequest::_internal_app_id() const {
  return app_id_.Get();
}
inline void ConceptMappingRequest::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptMappingRequest::set_app_id(std::string&& value) {
  
  app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConceptMappingRequest.app_id)
}
inline void ConceptMappingRequest::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConceptMappingRequest.app_id)
}
inline void ConceptMappingRequest::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConceptMappingRequest.app_id)
}
inline std::string* ConceptMappingRequest::_internal_mutable_app_id() {
  
  return app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptMappingRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:ConceptMappingRequest.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptMappingRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConceptMappingRequest.app_id)
}

// repeated string concept_ids = 3;
inline int ConceptMappingRequest::_internal_concept_ids_size() const {
  return concept_ids_.size();
}
inline int ConceptMappingRequest::concept_ids_size() const {
  return _internal_concept_ids_size();
}
inline void ConceptMappingRequest::clear_concept_ids() {
  concept_ids_.Clear();
}
inline std::string* ConceptMappingRequest::add_concept_ids() {
  // @@protoc_insertion_point(field_add_mutable:ConceptMappingRequest.concept_ids)
  return _internal_add_concept_ids();
}
inline const std::string& ConceptMappingRequest::_internal_concept_ids(int index) const {
  return concept_ids_.Get(index);
}
inline const std::string& ConceptMappingRequest::concept_ids(int index) const {
  // @@protoc_insertion_point(field_get:ConceptMappingRequest.concept_ids)
  return _internal_concept_ids(index);
}
inline std::string* ConceptMappingRequest::mutable_concept_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ConceptMappingRequest.concept_ids)
  return concept_ids_.Mutable(index);
}
inline void ConceptMappingRequest::set_concept_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ConceptMappingRequest.concept_ids)
  concept_ids_.Mutable(index)->assign(value);
}
inline void ConceptMappingRequest::set_concept_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ConceptMappingRequest.concept_ids)
  concept_ids_.Mutable(index)->assign(std::move(value));
}
inline void ConceptMappingRequest::set_concept_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ConceptMappingRequest.concept_ids)
}
inline void ConceptMappingRequest::set_concept_ids(int index, const char* value, size_t size) {
  concept_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ConceptMappingRequest.concept_ids)
}
inline std::string* ConceptMappingRequest::_internal_add_concept_ids() {
  return concept_ids_.Add();
}
inline void ConceptMappingRequest::add_concept_ids(const std::string& value) {
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ConceptMappingRequest.concept_ids)
}
inline void ConceptMappingRequest::add_concept_ids(std::string&& value) {
  concept_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ConceptMappingRequest.concept_ids)
}
inline void ConceptMappingRequest::add_concept_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ConceptMappingRequest.concept_ids)
}
inline void ConceptMappingRequest::add_concept_ids(const char* value, size_t size) {
  concept_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ConceptMappingRequest.concept_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConceptMappingRequest::concept_ids() const {
  // @@protoc_insertion_point(field_list:ConceptMappingRequest.concept_ids)
  return concept_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConceptMappingRequest::mutable_concept_ids() {
  // @@protoc_insertion_point(field_mutable_list:ConceptMappingRequest.concept_ids)
  return &concept_ids_;
}

// .clarifai.api.KnowledgeGraph knowledge_graph = 4;
inline bool ConceptMappingRequest::_internal_has_knowledge_graph() const {
  return this != internal_default_instance() && knowledge_graph_ != nullptr;
}
inline bool ConceptMappingRequest::has_knowledge_graph() const {
  return _internal_has_knowledge_graph();
}
inline const ::clarifai::api::KnowledgeGraph& ConceptMappingRequest::_internal_knowledge_graph() const {
  const ::clarifai::api::KnowledgeGraph* p = knowledge_graph_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::KnowledgeGraph*>(
      &::clarifai::api::_KnowledgeGraph_default_instance_);
}
inline const ::clarifai::api::KnowledgeGraph& ConceptMappingRequest::knowledge_graph() const {
  // @@protoc_insertion_point(field_get:ConceptMappingRequest.knowledge_graph)
  return _internal_knowledge_graph();
}
inline void ConceptMappingRequest::unsafe_arena_set_allocated_knowledge_graph(
    ::clarifai::api::KnowledgeGraph* knowledge_graph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(knowledge_graph_);
  }
  knowledge_graph_ = knowledge_graph;
  if (knowledge_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConceptMappingRequest.knowledge_graph)
}
inline ::clarifai::api::KnowledgeGraph* ConceptMappingRequest::release_knowledge_graph() {
  
  ::clarifai::api::KnowledgeGraph* temp = knowledge_graph_;
  knowledge_graph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::KnowledgeGraph* ConceptMappingRequest::unsafe_arena_release_knowledge_graph() {
  // @@protoc_insertion_point(field_release:ConceptMappingRequest.knowledge_graph)
  
  ::clarifai::api::KnowledgeGraph* temp = knowledge_graph_;
  knowledge_graph_ = nullptr;
  return temp;
}
inline ::clarifai::api::KnowledgeGraph* ConceptMappingRequest::_internal_mutable_knowledge_graph() {
  
  if (knowledge_graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::KnowledgeGraph>(GetArena());
    knowledge_graph_ = p;
  }
  return knowledge_graph_;
}
inline ::clarifai::api::KnowledgeGraph* ConceptMappingRequest::mutable_knowledge_graph() {
  // @@protoc_insertion_point(field_mutable:ConceptMappingRequest.knowledge_graph)
  return _internal_mutable_knowledge_graph();
}
inline void ConceptMappingRequest::set_allocated_knowledge_graph(::clarifai::api::KnowledgeGraph* knowledge_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(knowledge_graph_);
  }
  if (knowledge_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(knowledge_graph)->GetArena();
    if (message_arena != submessage_arena) {
      knowledge_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, knowledge_graph, submessage_arena);
    }
    
  } else {
    
  }
  knowledge_graph_ = knowledge_graph;
  // @@protoc_insertion_point(field_set_allocated:ConceptMappingRequest.knowledge_graph)
}

// -------------------------------------------------------------------

// ConceptMappingResponse

// .ResponseStatus status = 1;
inline bool ConceptMappingResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ConceptMappingResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& ConceptMappingResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& ConceptMappingResponse::status() const {
  // @@protoc_insertion_point(field_get:ConceptMappingResponse.status)
  return _internal_status();
}
inline void ConceptMappingResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConceptMappingResponse.status)
}
inline ::ResponseStatus* ConceptMappingResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* ConceptMappingResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:ConceptMappingResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* ConceptMappingResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* ConceptMappingResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:ConceptMappingResponse.status)
  return _internal_mutable_status();
}
inline void ConceptMappingResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:ConceptMappingResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fconcept_5fmapping_2fservice_2eproto
