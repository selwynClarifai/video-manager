// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/config_runner/config_runner.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/request_meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto;
class ConfigRunRequest;
class ConfigRunRequestDefaultTypeInternal;
extern ConfigRunRequestDefaultTypeInternal _ConfigRunRequest_default_instance_;
class ConfigRunResponse;
class ConfigRunResponseDefaultTypeInternal;
extern ConfigRunResponseDefaultTypeInternal _ConfigRunResponse_default_instance_;
class ShutdownRequest;
class ShutdownRequestDefaultTypeInternal;
extern ShutdownRequestDefaultTypeInternal _ShutdownRequest_default_instance_;
class ShutdownResponse;
class ShutdownResponseDefaultTypeInternal;
extern ShutdownResponseDefaultTypeInternal _ShutdownResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ConfigRunRequest* Arena::CreateMaybeMessage<::ConfigRunRequest>(Arena*);
template<> ::ConfigRunResponse* Arena::CreateMaybeMessage<::ConfigRunResponse>(Arena*);
template<> ::ShutdownRequest* Arena::CreateMaybeMessage<::ShutdownRequest>(Arena*);
template<> ::ShutdownResponse* Arena::CreateMaybeMessage<::ShutdownResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ConfigRunRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigRunRequest) */ {
 public:
  inline ConfigRunRequest() : ConfigRunRequest(nullptr) {}
  virtual ~ConfigRunRequest();

  ConfigRunRequest(const ConfigRunRequest& from);
  ConfigRunRequest(ConfigRunRequest&& from) noexcept
    : ConfigRunRequest() {
    *this = ::std::move(from);
  }

  inline ConfigRunRequest& operator=(const ConfigRunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigRunRequest& operator=(ConfigRunRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigRunRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigRunRequest* internal_default_instance() {
    return reinterpret_cast<const ConfigRunRequest*>(
               &_ConfigRunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConfigRunRequest& a, ConfigRunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigRunRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigRunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigRunRequest* New() const final {
    return CreateMaybeMessage<ConfigRunRequest>(nullptr);
  }

  ConfigRunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigRunRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigRunRequest& from);
  void MergeFrom(const ConfigRunRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRunRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigRunRequest";
  }
  protected:
  explicit ConfigRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto);
    return ::descriptor_table_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigJsonFieldNumber = 3,
    kMetaFieldNumber = 1,
    kEidFieldNumber = 2,
  };
  // string config_json = 3;
  void clear_config_json();
  const std::string& config_json() const;
  void set_config_json(const std::string& value);
  void set_config_json(std::string&& value);
  void set_config_json(const char* value);
  void set_config_json(const char* value, size_t size);
  std::string* mutable_config_json();
  std::string* release_config_json();
  void set_allocated_config_json(std::string* config_json);
  private:
  const std::string& _internal_config_json() const;
  void _internal_set_config_json(const std::string& value);
  std::string* _internal_mutable_config_json();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // int64 eid = 2;
  void clear_eid();
  ::PROTOBUF_NAMESPACE_ID::int64 eid() const;
  void set_eid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_eid() const;
  void _internal_set_eid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ConfigRunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_json_;
  ::RequestMeta* meta_;
  ::PROTOBUF_NAMESPACE_ID::int64 eid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto;
};
// -------------------------------------------------------------------

class ConfigRunResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigRunResponse) */ {
 public:
  inline ConfigRunResponse() : ConfigRunResponse(nullptr) {}
  virtual ~ConfigRunResponse();

  ConfigRunResponse(const ConfigRunResponse& from);
  ConfigRunResponse(ConfigRunResponse&& from) noexcept
    : ConfigRunResponse() {
    *this = ::std::move(from);
  }

  inline ConfigRunResponse& operator=(const ConfigRunResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigRunResponse& operator=(ConfigRunResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigRunResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigRunResponse* internal_default_instance() {
    return reinterpret_cast<const ConfigRunResponse*>(
               &_ConfigRunResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConfigRunResponse& a, ConfigRunResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigRunResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigRunResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigRunResponse* New() const final {
    return CreateMaybeMessage<ConfigRunResponse>(nullptr);
  }

  ConfigRunResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigRunResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigRunResponse& from);
  void MergeFrom(const ConfigRunResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRunResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigRunResponse";
  }
  protected:
  explicit ConfigRunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto);
    return ::descriptor_table_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExceptionClassFieldNumber = 5,
    kExceptionMessageFieldNumber = 6,
    kExceptionTracebackFieldNumber = 7,
    kStatusFieldNumber = 1,
    kRetryFieldNumber = 4,
  };
  // string exception_class = 5;
  void clear_exception_class();
  const std::string& exception_class() const;
  void set_exception_class(const std::string& value);
  void set_exception_class(std::string&& value);
  void set_exception_class(const char* value);
  void set_exception_class(const char* value, size_t size);
  std::string* mutable_exception_class();
  std::string* release_exception_class();
  void set_allocated_exception_class(std::string* exception_class);
  private:
  const std::string& _internal_exception_class() const;
  void _internal_set_exception_class(const std::string& value);
  std::string* _internal_mutable_exception_class();
  public:

  // string exception_message = 6;
  void clear_exception_message();
  const std::string& exception_message() const;
  void set_exception_message(const std::string& value);
  void set_exception_message(std::string&& value);
  void set_exception_message(const char* value);
  void set_exception_message(const char* value, size_t size);
  std::string* mutable_exception_message();
  std::string* release_exception_message();
  void set_allocated_exception_message(std::string* exception_message);
  private:
  const std::string& _internal_exception_message() const;
  void _internal_set_exception_message(const std::string& value);
  std::string* _internal_mutable_exception_message();
  public:

  // string exception_traceback = 7;
  void clear_exception_traceback();
  const std::string& exception_traceback() const;
  void set_exception_traceback(const std::string& value);
  void set_exception_traceback(std::string&& value);
  void set_exception_traceback(const char* value);
  void set_exception_traceback(const char* value, size_t size);
  std::string* mutable_exception_traceback();
  std::string* release_exception_traceback();
  void set_allocated_exception_traceback(std::string* exception_traceback);
  private:
  const std::string& _internal_exception_traceback() const;
  void _internal_set_exception_traceback(const std::string& value);
  std::string* _internal_mutable_exception_traceback();
  public:

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // bool retry = 4;
  void clear_retry();
  bool retry() const;
  void set_retry(bool value);
  private:
  bool _internal_retry() const;
  void _internal_set_retry(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ConfigRunResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exception_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exception_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exception_traceback_;
  ::ResponseStatus* status_;
  bool retry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto;
};
// -------------------------------------------------------------------

class ShutdownRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShutdownRequest) */ {
 public:
  inline ShutdownRequest() : ShutdownRequest(nullptr) {}
  virtual ~ShutdownRequest();

  ShutdownRequest(const ShutdownRequest& from);
  ShutdownRequest(ShutdownRequest&& from) noexcept
    : ShutdownRequest() {
    *this = ::std::move(from);
  }

  inline ShutdownRequest& operator=(const ShutdownRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownRequest& operator=(ShutdownRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShutdownRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShutdownRequest* internal_default_instance() {
    return reinterpret_cast<const ShutdownRequest*>(
               &_ShutdownRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ShutdownRequest& a, ShutdownRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutdownRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutdownRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShutdownRequest* New() const final {
    return CreateMaybeMessage<ShutdownRequest>(nullptr);
  }

  ShutdownRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShutdownRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShutdownRequest& from);
  void MergeFrom(const ShutdownRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutdownRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShutdownRequest";
  }
  protected:
  explicit ShutdownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto);
    return ::descriptor_table_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
  };
  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:ShutdownRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::RequestMeta* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto;
};
// -------------------------------------------------------------------

class ShutdownResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShutdownResponse) */ {
 public:
  inline ShutdownResponse() : ShutdownResponse(nullptr) {}
  virtual ~ShutdownResponse();

  ShutdownResponse(const ShutdownResponse& from);
  ShutdownResponse(ShutdownResponse&& from) noexcept
    : ShutdownResponse() {
    *this = ::std::move(from);
  }

  inline ShutdownResponse& operator=(const ShutdownResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownResponse& operator=(ShutdownResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShutdownResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShutdownResponse* internal_default_instance() {
    return reinterpret_cast<const ShutdownResponse*>(
               &_ShutdownResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ShutdownResponse& a, ShutdownResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutdownResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutdownResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShutdownResponse* New() const final {
    return CreateMaybeMessage<ShutdownResponse>(nullptr);
  }

  ShutdownResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShutdownResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShutdownResponse& from);
  void MergeFrom(const ShutdownResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutdownResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShutdownResponse";
  }
  protected:
  explicit ShutdownResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto);
    return ::descriptor_table_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:ShutdownResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigRunRequest

// .RequestMeta meta = 1;
inline bool ConfigRunRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool ConfigRunRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& ConfigRunRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& ConfigRunRequest::meta() const {
  // @@protoc_insertion_point(field_get:ConfigRunRequest.meta)
  return _internal_meta();
}
inline void ConfigRunRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConfigRunRequest.meta)
}
inline ::RequestMeta* ConfigRunRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* ConfigRunRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:ConfigRunRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* ConfigRunRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* ConfigRunRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:ConfigRunRequest.meta)
  return _internal_mutable_meta();
}
inline void ConfigRunRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:ConfigRunRequest.meta)
}

// int64 eid = 2;
inline void ConfigRunRequest::clear_eid() {
  eid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfigRunRequest::_internal_eid() const {
  return eid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfigRunRequest::eid() const {
  // @@protoc_insertion_point(field_get:ConfigRunRequest.eid)
  return _internal_eid();
}
inline void ConfigRunRequest::_internal_set_eid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  eid_ = value;
}
inline void ConfigRunRequest::set_eid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_eid(value);
  // @@protoc_insertion_point(field_set:ConfigRunRequest.eid)
}

// string config_json = 3;
inline void ConfigRunRequest::clear_config_json() {
  config_json_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfigRunRequest::config_json() const {
  // @@protoc_insertion_point(field_get:ConfigRunRequest.config_json)
  return _internal_config_json();
}
inline void ConfigRunRequest::set_config_json(const std::string& value) {
  _internal_set_config_json(value);
  // @@protoc_insertion_point(field_set:ConfigRunRequest.config_json)
}
inline std::string* ConfigRunRequest::mutable_config_json() {
  // @@protoc_insertion_point(field_mutable:ConfigRunRequest.config_json)
  return _internal_mutable_config_json();
}
inline const std::string& ConfigRunRequest::_internal_config_json() const {
  return config_json_.Get();
}
inline void ConfigRunRequest::_internal_set_config_json(const std::string& value) {
  
  config_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigRunRequest::set_config_json(std::string&& value) {
  
  config_json_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigRunRequest.config_json)
}
inline void ConfigRunRequest::set_config_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigRunRequest.config_json)
}
inline void ConfigRunRequest::set_config_json(const char* value,
    size_t size) {
  
  config_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigRunRequest.config_json)
}
inline std::string* ConfigRunRequest::_internal_mutable_config_json() {
  
  return config_json_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigRunRequest::release_config_json() {
  // @@protoc_insertion_point(field_release:ConfigRunRequest.config_json)
  return config_json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigRunRequest::set_allocated_config_json(std::string* config_json) {
  if (config_json != nullptr) {
    
  } else {
    
  }
  config_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigRunRequest.config_json)
}

// -------------------------------------------------------------------

// ConfigRunResponse

// .ResponseStatus status = 1;
inline bool ConfigRunResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ConfigRunResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& ConfigRunResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& ConfigRunResponse::status() const {
  // @@protoc_insertion_point(field_get:ConfigRunResponse.status)
  return _internal_status();
}
inline void ConfigRunResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConfigRunResponse.status)
}
inline ::ResponseStatus* ConfigRunResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* ConfigRunResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:ConfigRunResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* ConfigRunResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* ConfigRunResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:ConfigRunResponse.status)
  return _internal_mutable_status();
}
inline void ConfigRunResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:ConfigRunResponse.status)
}

// bool retry = 4;
inline void ConfigRunResponse::clear_retry() {
  retry_ = false;
}
inline bool ConfigRunResponse::_internal_retry() const {
  return retry_;
}
inline bool ConfigRunResponse::retry() const {
  // @@protoc_insertion_point(field_get:ConfigRunResponse.retry)
  return _internal_retry();
}
inline void ConfigRunResponse::_internal_set_retry(bool value) {
  
  retry_ = value;
}
inline void ConfigRunResponse::set_retry(bool value) {
  _internal_set_retry(value);
  // @@protoc_insertion_point(field_set:ConfigRunResponse.retry)
}

// string exception_class = 5;
inline void ConfigRunResponse::clear_exception_class() {
  exception_class_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfigRunResponse::exception_class() const {
  // @@protoc_insertion_point(field_get:ConfigRunResponse.exception_class)
  return _internal_exception_class();
}
inline void ConfigRunResponse::set_exception_class(const std::string& value) {
  _internal_set_exception_class(value);
  // @@protoc_insertion_point(field_set:ConfigRunResponse.exception_class)
}
inline std::string* ConfigRunResponse::mutable_exception_class() {
  // @@protoc_insertion_point(field_mutable:ConfigRunResponse.exception_class)
  return _internal_mutable_exception_class();
}
inline const std::string& ConfigRunResponse::_internal_exception_class() const {
  return exception_class_.Get();
}
inline void ConfigRunResponse::_internal_set_exception_class(const std::string& value) {
  
  exception_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigRunResponse::set_exception_class(std::string&& value) {
  
  exception_class_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigRunResponse.exception_class)
}
inline void ConfigRunResponse::set_exception_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exception_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigRunResponse.exception_class)
}
inline void ConfigRunResponse::set_exception_class(const char* value,
    size_t size) {
  
  exception_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigRunResponse.exception_class)
}
inline std::string* ConfigRunResponse::_internal_mutable_exception_class() {
  
  return exception_class_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigRunResponse::release_exception_class() {
  // @@protoc_insertion_point(field_release:ConfigRunResponse.exception_class)
  return exception_class_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigRunResponse::set_allocated_exception_class(std::string* exception_class) {
  if (exception_class != nullptr) {
    
  } else {
    
  }
  exception_class_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exception_class,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigRunResponse.exception_class)
}

// string exception_message = 6;
inline void ConfigRunResponse::clear_exception_message() {
  exception_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfigRunResponse::exception_message() const {
  // @@protoc_insertion_point(field_get:ConfigRunResponse.exception_message)
  return _internal_exception_message();
}
inline void ConfigRunResponse::set_exception_message(const std::string& value) {
  _internal_set_exception_message(value);
  // @@protoc_insertion_point(field_set:ConfigRunResponse.exception_message)
}
inline std::string* ConfigRunResponse::mutable_exception_message() {
  // @@protoc_insertion_point(field_mutable:ConfigRunResponse.exception_message)
  return _internal_mutable_exception_message();
}
inline const std::string& ConfigRunResponse::_internal_exception_message() const {
  return exception_message_.Get();
}
inline void ConfigRunResponse::_internal_set_exception_message(const std::string& value) {
  
  exception_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigRunResponse::set_exception_message(std::string&& value) {
  
  exception_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigRunResponse.exception_message)
}
inline void ConfigRunResponse::set_exception_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exception_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigRunResponse.exception_message)
}
inline void ConfigRunResponse::set_exception_message(const char* value,
    size_t size) {
  
  exception_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigRunResponse.exception_message)
}
inline std::string* ConfigRunResponse::_internal_mutable_exception_message() {
  
  return exception_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigRunResponse::release_exception_message() {
  // @@protoc_insertion_point(field_release:ConfigRunResponse.exception_message)
  return exception_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigRunResponse::set_allocated_exception_message(std::string* exception_message) {
  if (exception_message != nullptr) {
    
  } else {
    
  }
  exception_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exception_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigRunResponse.exception_message)
}

// string exception_traceback = 7;
inline void ConfigRunResponse::clear_exception_traceback() {
  exception_traceback_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfigRunResponse::exception_traceback() const {
  // @@protoc_insertion_point(field_get:ConfigRunResponse.exception_traceback)
  return _internal_exception_traceback();
}
inline void ConfigRunResponse::set_exception_traceback(const std::string& value) {
  _internal_set_exception_traceback(value);
  // @@protoc_insertion_point(field_set:ConfigRunResponse.exception_traceback)
}
inline std::string* ConfigRunResponse::mutable_exception_traceback() {
  // @@protoc_insertion_point(field_mutable:ConfigRunResponse.exception_traceback)
  return _internal_mutable_exception_traceback();
}
inline const std::string& ConfigRunResponse::_internal_exception_traceback() const {
  return exception_traceback_.Get();
}
inline void ConfigRunResponse::_internal_set_exception_traceback(const std::string& value) {
  
  exception_traceback_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigRunResponse::set_exception_traceback(std::string&& value) {
  
  exception_traceback_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigRunResponse.exception_traceback)
}
inline void ConfigRunResponse::set_exception_traceback(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exception_traceback_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigRunResponse.exception_traceback)
}
inline void ConfigRunResponse::set_exception_traceback(const char* value,
    size_t size) {
  
  exception_traceback_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigRunResponse.exception_traceback)
}
inline std::string* ConfigRunResponse::_internal_mutable_exception_traceback() {
  
  return exception_traceback_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigRunResponse::release_exception_traceback() {
  // @@protoc_insertion_point(field_release:ConfigRunResponse.exception_traceback)
  return exception_traceback_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigRunResponse::set_allocated_exception_traceback(std::string* exception_traceback) {
  if (exception_traceback != nullptr) {
    
  } else {
    
  }
  exception_traceback_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exception_traceback,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigRunResponse.exception_traceback)
}

// -------------------------------------------------------------------

// ShutdownRequest

// .RequestMeta meta = 1;
inline bool ShutdownRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool ShutdownRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& ShutdownRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& ShutdownRequest::meta() const {
  // @@protoc_insertion_point(field_get:ShutdownRequest.meta)
  return _internal_meta();
}
inline void ShutdownRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ShutdownRequest.meta)
}
inline ::RequestMeta* ShutdownRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* ShutdownRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:ShutdownRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* ShutdownRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* ShutdownRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:ShutdownRequest.meta)
  return _internal_mutable_meta();
}
inline void ShutdownRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:ShutdownRequest.meta)
}

// -------------------------------------------------------------------

// ShutdownResponse

// .ResponseStatus status = 1;
inline bool ShutdownResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ShutdownResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& ShutdownResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& ShutdownResponse::status() const {
  // @@protoc_insertion_point(field_get:ShutdownResponse.status)
  return _internal_status();
}
inline void ShutdownResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ShutdownResponse.status)
}
inline ::ResponseStatus* ShutdownResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* ShutdownResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:ShutdownResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* ShutdownResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* ShutdownResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:ShutdownResponse.status)
  return _internal_mutable_status();
}
inline void ShutdownResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:ShutdownResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fconfig_5frunner_2fconfig_5frunner_2eproto
