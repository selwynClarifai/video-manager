// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/kepler/kepler_service.proto

#include "proto/kepler/kepler_service.pb.h"
#include "proto/kepler/kepler_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace kepler_clarifai {

static const char* KeplerService_method_names[] = {
  "/kepler_clarifai.KeplerService/GetStatus",
  "/kepler_clarifai.KeplerService/ProcessFrameBundle",
};

std::unique_ptr< KeplerService::Stub> KeplerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KeplerService::Stub> stub(new KeplerService::Stub(channel));
  return stub;
}

KeplerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetStatus_(KeplerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProcessFrameBundle_(KeplerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KeplerService::Stub::GetStatus(::grpc::ClientContext* context, const ::kepler_clarifai::GetStatusRequest& request, ::kepler_clarifai::GetStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetStatus_, context, request, response);
}

void KeplerService::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::kepler_clarifai::GetStatusRequest* request, ::kepler_clarifai::GetStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, std::move(f));
}

void KeplerService::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kepler_clarifai::GetStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, std::move(f));
}

void KeplerService::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::kepler_clarifai::GetStatusRequest* request, ::kepler_clarifai::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, reactor);
}

void KeplerService::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kepler_clarifai::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kepler_clarifai::GetStatusResponse>* KeplerService::Stub::AsyncGetStatusRaw(::grpc::ClientContext* context, const ::kepler_clarifai::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kepler_clarifai::GetStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kepler_clarifai::GetStatusResponse>* KeplerService::Stub::PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::kepler_clarifai::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kepler_clarifai::GetStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetStatus_, context, request, false);
}

::grpc::Status KeplerService::Stub::ProcessFrameBundle(::grpc::ClientContext* context, const ::kepler_clarifai::FrameBundle& request, ::kepler_clarifai::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ProcessFrameBundle_, context, request, response);
}

void KeplerService::Stub::experimental_async::ProcessFrameBundle(::grpc::ClientContext* context, const ::kepler_clarifai::FrameBundle* request, ::kepler_clarifai::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ProcessFrameBundle_, context, request, response, std::move(f));
}

void KeplerService::Stub::experimental_async::ProcessFrameBundle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kepler_clarifai::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ProcessFrameBundle_, context, request, response, std::move(f));
}

void KeplerService::Stub::experimental_async::ProcessFrameBundle(::grpc::ClientContext* context, const ::kepler_clarifai::FrameBundle* request, ::kepler_clarifai::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ProcessFrameBundle_, context, request, response, reactor);
}

void KeplerService::Stub::experimental_async::ProcessFrameBundle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kepler_clarifai::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ProcessFrameBundle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kepler_clarifai::Response>* KeplerService::Stub::AsyncProcessFrameBundleRaw(::grpc::ClientContext* context, const ::kepler_clarifai::FrameBundle& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kepler_clarifai::Response>::Create(channel_.get(), cq, rpcmethod_ProcessFrameBundle_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kepler_clarifai::Response>* KeplerService::Stub::PrepareAsyncProcessFrameBundleRaw(::grpc::ClientContext* context, const ::kepler_clarifai::FrameBundle& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kepler_clarifai::Response>::Create(channel_.get(), cq, rpcmethod_ProcessFrameBundle_, context, request, false);
}

KeplerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeplerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeplerService::Service, ::kepler_clarifai::GetStatusRequest, ::kepler_clarifai::GetStatusResponse>(
          [](KeplerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::kepler_clarifai::GetStatusRequest* req,
             ::kepler_clarifai::GetStatusResponse* resp) {
               return service->GetStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeplerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeplerService::Service, ::kepler_clarifai::FrameBundle, ::kepler_clarifai::Response>(
          [](KeplerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::kepler_clarifai::FrameBundle* req,
             ::kepler_clarifai::Response* resp) {
               return service->ProcessFrameBundle(ctx, req, resp);
             }, this)));
}

KeplerService::Service::~Service() {
}

::grpc::Status KeplerService::Service::GetStatus(::grpc::ServerContext* context, const ::kepler_clarifai::GetStatusRequest* request, ::kepler_clarifai::GetStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeplerService::Service::ProcessFrameBundle(::grpc::ServerContext* context, const ::kepler_clarifai::FrameBundle* request, ::kepler_clarifai::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kepler_clarifai

