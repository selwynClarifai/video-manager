// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/kepler/kepler.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fkepler_2fkepler_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fkepler_2fkepler_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fkepler_2fkepler_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fkepler_2fkepler_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fkepler_2fkepler_2eproto;
namespace kepler_clarifai {
class Activity;
class ActivityDefaultTypeInternal;
extern ActivityDefaultTypeInternal _Activity_default_instance_;
class ActivityProbabilities;
class ActivityProbabilitiesDefaultTypeInternal;
extern ActivityProbabilitiesDefaultTypeInternal _ActivityProbabilities_default_instance_;
class BoundingBox;
class BoundingBoxDefaultTypeInternal;
extern BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class FrameBundle;
class FrameBundleDefaultTypeInternal;
extern FrameBundleDefaultTypeInternal _FrameBundle_default_instance_;
class Gesture;
class GestureDefaultTypeInternal;
extern GestureDefaultTypeInternal _Gesture_default_instance_;
class GesturesProbabilities;
class GesturesProbabilitiesDefaultTypeInternal;
extern GesturesProbabilitiesDefaultTypeInternal _GesturesProbabilities_default_instance_;
class Hands;
class HandsDefaultTypeInternal;
extern HandsDefaultTypeInternal _Hands_default_instance_;
class Product;
class ProductDefaultTypeInternal;
extern ProductDefaultTypeInternal _Product_default_instance_;
class Region;
class RegionDefaultTypeInternal;
extern RegionDefaultTypeInternal _Region_default_instance_;
class Sku;
class SkuDefaultTypeInternal;
extern SkuDefaultTypeInternal _Sku_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace kepler_clarifai
PROTOBUF_NAMESPACE_OPEN
template<> ::kepler_clarifai::Activity* Arena::CreateMaybeMessage<::kepler_clarifai::Activity>(Arena*);
template<> ::kepler_clarifai::ActivityProbabilities* Arena::CreateMaybeMessage<::kepler_clarifai::ActivityProbabilities>(Arena*);
template<> ::kepler_clarifai::BoundingBox* Arena::CreateMaybeMessage<::kepler_clarifai::BoundingBox>(Arena*);
template<> ::kepler_clarifai::Frame* Arena::CreateMaybeMessage<::kepler_clarifai::Frame>(Arena*);
template<> ::kepler_clarifai::FrameBundle* Arena::CreateMaybeMessage<::kepler_clarifai::FrameBundle>(Arena*);
template<> ::kepler_clarifai::Gesture* Arena::CreateMaybeMessage<::kepler_clarifai::Gesture>(Arena*);
template<> ::kepler_clarifai::GesturesProbabilities* Arena::CreateMaybeMessage<::kepler_clarifai::GesturesProbabilities>(Arena*);
template<> ::kepler_clarifai::Hands* Arena::CreateMaybeMessage<::kepler_clarifai::Hands>(Arena*);
template<> ::kepler_clarifai::Product* Arena::CreateMaybeMessage<::kepler_clarifai::Product>(Arena*);
template<> ::kepler_clarifai::Region* Arena::CreateMaybeMessage<::kepler_clarifai::Region>(Arena*);
template<> ::kepler_clarifai::Sku* Arena::CreateMaybeMessage<::kepler_clarifai::Sku>(Arena*);
template<> ::kepler_clarifai::Status* Arena::CreateMaybeMessage<::kepler_clarifai::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kepler_clarifai {

// ===================================================================

class BoundingBox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kepler_clarifai.BoundingBox) */ {
 public:
  inline BoundingBox() : BoundingBox(nullptr) {}
  virtual ~BoundingBox();

  BoundingBox(const BoundingBox& from);
  BoundingBox(BoundingBox&& from) noexcept
    : BoundingBox() {
    *this = ::std::move(from);
  }

  inline BoundingBox& operator=(const BoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox& operator=(BoundingBox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundingBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundingBox* internal_default_instance() {
    return reinterpret_cast<const BoundingBox*>(
               &_BoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoundingBox& a, BoundingBox& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox* New() const final {
    return CreateMaybeMessage<BoundingBox>(nullptr);
  }

  BoundingBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundingBox& from);
  void MergeFrom(const BoundingBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kepler_clarifai.BoundingBox";
  }
  protected:
  explicit BoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fkepler_2fkepler_2eproto);
    return ::descriptor_table_proto_2fkepler_2fkepler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinXFieldNumber = 1,
    kMinYFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // float minX = 1;
  void clear_minx();
  float minx() const;
  void set_minx(float value);
  private:
  float _internal_minx() const;
  void _internal_set_minx(float value);
  public:

  // float minY = 2;
  void clear_miny();
  float miny() const;
  void set_miny(float value);
  private:
  float _internal_miny() const;
  void _internal_set_miny(float value);
  public:

  // float width = 3;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float height = 4;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:kepler_clarifai.BoundingBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float minx_;
  float miny_;
  float width_;
  float height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fkepler_2fkepler_2eproto;
};
// -------------------------------------------------------------------

class Hands PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kepler_clarifai.Hands) */ {
 public:
  inline Hands() : Hands(nullptr) {}
  virtual ~Hands();

  Hands(const Hands& from);
  Hands(Hands&& from) noexcept
    : Hands() {
    *this = ::std::move(from);
  }

  inline Hands& operator=(const Hands& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hands& operator=(Hands&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Hands& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hands* internal_default_instance() {
    return reinterpret_cast<const Hands*>(
               &_Hands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Hands& a, Hands& b) {
    a.Swap(&b);
  }
  inline void Swap(Hands* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hands* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hands* New() const final {
    return CreateMaybeMessage<Hands>(nullptr);
  }

  Hands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hands>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hands& from);
  void MergeFrom(const Hands& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hands* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kepler_clarifai.Hands";
  }
  protected:
  explicit Hands(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fkepler_2fkepler_2eproto);
    return ::descriptor_table_proto_2fkepler_2fkepler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kRightFieldNumber = 2,
  };
  // .kepler_clarifai.BoundingBox left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::kepler_clarifai::BoundingBox& left() const;
  ::kepler_clarifai::BoundingBox* release_left();
  ::kepler_clarifai::BoundingBox* mutable_left();
  void set_allocated_left(::kepler_clarifai::BoundingBox* left);
  private:
  const ::kepler_clarifai::BoundingBox& _internal_left() const;
  ::kepler_clarifai::BoundingBox* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::kepler_clarifai::BoundingBox* left);
  ::kepler_clarifai::BoundingBox* unsafe_arena_release_left();

  // .kepler_clarifai.BoundingBox right = 2;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::kepler_clarifai::BoundingBox& right() const;
  ::kepler_clarifai::BoundingBox* release_right();
  ::kepler_clarifai::BoundingBox* mutable_right();
  void set_allocated_right(::kepler_clarifai::BoundingBox* right);
  private:
  const ::kepler_clarifai::BoundingBox& _internal_right() const;
  ::kepler_clarifai::BoundingBox* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::kepler_clarifai::BoundingBox* right);
  ::kepler_clarifai::BoundingBox* unsafe_arena_release_right();

  // @@protoc_insertion_point(class_scope:kepler_clarifai.Hands)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kepler_clarifai::BoundingBox* left_;
  ::kepler_clarifai::BoundingBox* right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fkepler_2fkepler_2eproto;
};
// -------------------------------------------------------------------

class GesturesProbabilities PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kepler_clarifai.GesturesProbabilities) */ {
 public:
  inline GesturesProbabilities() : GesturesProbabilities(nullptr) {}
  virtual ~GesturesProbabilities();

  GesturesProbabilities(const GesturesProbabilities& from);
  GesturesProbabilities(GesturesProbabilities&& from) noexcept
    : GesturesProbabilities() {
    *this = ::std::move(from);
  }

  inline GesturesProbabilities& operator=(const GesturesProbabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline GesturesProbabilities& operator=(GesturesProbabilities&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GesturesProbabilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GesturesProbabilities* internal_default_instance() {
    return reinterpret_cast<const GesturesProbabilities*>(
               &_GesturesProbabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GesturesProbabilities& a, GesturesProbabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(GesturesProbabilities* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GesturesProbabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GesturesProbabilities* New() const final {
    return CreateMaybeMessage<GesturesProbabilities>(nullptr);
  }

  GesturesProbabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GesturesProbabilities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GesturesProbabilities& from);
  void MergeFrom(const GesturesProbabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GesturesProbabilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kepler_clarifai.GesturesProbabilities";
  }
  protected:
  explicit GesturesProbabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fkepler_2fkepler_2eproto);
    return ::descriptor_table_proto_2fkepler_2fkepler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoneFieldNumber = 1,
    kCartRetractFieldNumber = 2,
    kReachFieldNumber = 3,
    kNoDataFieldNumber = 4,
    kRetractFieldNumber = 5,
    kCartReachFieldNumber = 6,
  };
  // float none = 1;
  void clear_none();
  float none() const;
  void set_none(float value);
  private:
  float _internal_none() const;
  void _internal_set_none(float value);
  public:

  // float cartRetract = 2;
  void clear_cartretract();
  float cartretract() const;
  void set_cartretract(float value);
  private:
  float _internal_cartretract() const;
  void _internal_set_cartretract(float value);
  public:

  // float reach = 3;
  void clear_reach();
  float reach() const;
  void set_reach(float value);
  private:
  float _internal_reach() const;
  void _internal_set_reach(float value);
  public:

  // float noData = 4;
  void clear_nodata();
  float nodata() const;
  void set_nodata(float value);
  private:
  float _internal_nodata() const;
  void _internal_set_nodata(float value);
  public:

  // float retract = 5;
  void clear_retract();
  float retract() const;
  void set_retract(float value);
  private:
  float _internal_retract() const;
  void _internal_set_retract(float value);
  public:

  // float cartReach = 6;
  void clear_cartreach();
  float cartreach() const;
  void set_cartreach(float value);
  private:
  float _internal_cartreach() const;
  void _internal_set_cartreach(float value);
  public:

  // @@protoc_insertion_point(class_scope:kepler_clarifai.GesturesProbabilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float none_;
  float cartretract_;
  float reach_;
  float nodata_;
  float retract_;
  float cartreach_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fkepler_2fkepler_2eproto;
};
// -------------------------------------------------------------------

class ActivityProbabilities PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kepler_clarifai.ActivityProbabilities) */ {
 public:
  inline ActivityProbabilities() : ActivityProbabilities(nullptr) {}
  virtual ~ActivityProbabilities();

  ActivityProbabilities(const ActivityProbabilities& from);
  ActivityProbabilities(ActivityProbabilities&& from) noexcept
    : ActivityProbabilities() {
    *this = ::std::move(from);
  }

  inline ActivityProbabilities& operator=(const ActivityProbabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityProbabilities& operator=(ActivityProbabilities&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivityProbabilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityProbabilities* internal_default_instance() {
    return reinterpret_cast<const ActivityProbabilities*>(
               &_ActivityProbabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ActivityProbabilities& a, ActivityProbabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityProbabilities* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityProbabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityProbabilities* New() const final {
    return CreateMaybeMessage<ActivityProbabilities>(nullptr);
  }

  ActivityProbabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityProbabilities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivityProbabilities& from);
  void MergeFrom(const ActivityProbabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityProbabilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kepler_clarifai.ActivityProbabilities";
  }
  protected:
  explicit ActivityProbabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fkepler_2fkepler_2eproto);
    return ::descriptor_table_proto_2fkepler_2fkepler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCartPutdownFieldNumber = 1,
    kNoneFieldNumber = 2,
    kShelfPutdownFieldNumber = 3,
    kCartPickupFieldNumber = 4,
    kShelfPickupFieldNumber = 5,
  };
  // float cartPutdown = 1;
  void clear_cartputdown();
  float cartputdown() const;
  void set_cartputdown(float value);
  private:
  float _internal_cartputdown() const;
  void _internal_set_cartputdown(float value);
  public:

  // float none = 2;
  void clear_none();
  float none() const;
  void set_none(float value);
  private:
  float _internal_none() const;
  void _internal_set_none(float value);
  public:

  // float shelfPutdown = 3;
  void clear_shelfputdown();
  float shelfputdown() const;
  void set_shelfputdown(float value);
  private:
  float _internal_shelfputdown() const;
  void _internal_set_shelfputdown(float value);
  public:

  // float cartPickup = 4;
  void clear_cartpickup();
  float cartpickup() const;
  void set_cartpickup(float value);
  private:
  float _internal_cartpickup() const;
  void _internal_set_cartpickup(float value);
  public:

  // float shelfPickup = 5;
  void clear_shelfpickup();
  float shelfpickup() const;
  void set_shelfpickup(float value);
  private:
  float _internal_shelfpickup() const;
  void _internal_set_shelfpickup(float value);
  public:

  // @@protoc_insertion_point(class_scope:kepler_clarifai.ActivityProbabilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float cartputdown_;
  float none_;
  float shelfputdown_;
  float cartpickup_;
  float shelfpickup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fkepler_2fkepler_2eproto;
};
// -------------------------------------------------------------------

class Gesture PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kepler_clarifai.Gesture) */ {
 public:
  inline Gesture() : Gesture(nullptr) {}
  virtual ~Gesture();

  Gesture(const Gesture& from);
  Gesture(Gesture&& from) noexcept
    : Gesture() {
    *this = ::std::move(from);
  }

  inline Gesture& operator=(const Gesture& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gesture& operator=(Gesture&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Gesture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gesture* internal_default_instance() {
    return reinterpret_cast<const Gesture*>(
               &_Gesture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Gesture& a, Gesture& b) {
    a.Swap(&b);
  }
  inline void Swap(Gesture* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gesture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gesture* New() const final {
    return CreateMaybeMessage<Gesture>(nullptr);
  }

  Gesture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gesture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gesture& from);
  void MergeFrom(const Gesture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gesture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kepler_clarifai.Gesture";
  }
  protected:
  explicit Gesture(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fkepler_2fkepler_2eproto);
    return ::descriptor_table_proto_2fkepler_2fkepler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionFieldNumber = 2,
    kProbabilitiesFieldNumber = 1,
  };
  // string prediction = 2;
  void clear_prediction();
  const std::string& prediction() const;
  void set_prediction(const std::string& value);
  void set_prediction(std::string&& value);
  void set_prediction(const char* value);
  void set_prediction(const char* value, size_t size);
  std::string* mutable_prediction();
  std::string* release_prediction();
  void set_allocated_prediction(std::string* prediction);
  private:
  const std::string& _internal_prediction() const;
  void _internal_set_prediction(const std::string& value);
  std::string* _internal_mutable_prediction();
  public:

  // .kepler_clarifai.GesturesProbabilities probabilities = 1;
  bool has_probabilities() const;
  private:
  bool _internal_has_probabilities() const;
  public:
  void clear_probabilities();
  const ::kepler_clarifai::GesturesProbabilities& probabilities() const;
  ::kepler_clarifai::GesturesProbabilities* release_probabilities();
  ::kepler_clarifai::GesturesProbabilities* mutable_probabilities();
  void set_allocated_probabilities(::kepler_clarifai::GesturesProbabilities* probabilities);
  private:
  const ::kepler_clarifai::GesturesProbabilities& _internal_probabilities() const;
  ::kepler_clarifai::GesturesProbabilities* _internal_mutable_probabilities();
  public:
  void unsafe_arena_set_allocated_probabilities(
      ::kepler_clarifai::GesturesProbabilities* probabilities);
  ::kepler_clarifai::GesturesProbabilities* unsafe_arena_release_probabilities();

  // @@protoc_insertion_point(class_scope:kepler_clarifai.Gesture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prediction_;
  ::kepler_clarifai::GesturesProbabilities* probabilities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fkepler_2fkepler_2eproto;
};
// -------------------------------------------------------------------

class Activity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kepler_clarifai.Activity) */ {
 public:
  inline Activity() : Activity(nullptr) {}
  virtual ~Activity();

  Activity(const Activity& from);
  Activity(Activity&& from) noexcept
    : Activity() {
    *this = ::std::move(from);
  }

  inline Activity& operator=(const Activity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Activity& operator=(Activity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Activity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Activity* internal_default_instance() {
    return reinterpret_cast<const Activity*>(
               &_Activity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Activity& a, Activity& b) {
    a.Swap(&b);
  }
  inline void Swap(Activity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Activity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Activity* New() const final {
    return CreateMaybeMessage<Activity>(nullptr);
  }

  Activity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Activity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Activity& from);
  void MergeFrom(const Activity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Activity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kepler_clarifai.Activity";
  }
  protected:
  explicit Activity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fkepler_2fkepler_2eproto);
    return ::descriptor_table_proto_2fkepler_2fkepler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionFieldNumber = 2,
    kProbabilitiesFieldNumber = 1,
  };
  // string prediction = 2;
  void clear_prediction();
  const std::string& prediction() const;
  void set_prediction(const std::string& value);
  void set_prediction(std::string&& value);
  void set_prediction(const char* value);
  void set_prediction(const char* value, size_t size);
  std::string* mutable_prediction();
  std::string* release_prediction();
  void set_allocated_prediction(std::string* prediction);
  private:
  const std::string& _internal_prediction() const;
  void _internal_set_prediction(const std::string& value);
  std::string* _internal_mutable_prediction();
  public:

  // .kepler_clarifai.ActivityProbabilities probabilities = 1;
  bool has_probabilities() const;
  private:
  bool _internal_has_probabilities() const;
  public:
  void clear_probabilities();
  const ::kepler_clarifai::ActivityProbabilities& probabilities() const;
  ::kepler_clarifai::ActivityProbabilities* release_probabilities();
  ::kepler_clarifai::ActivityProbabilities* mutable_probabilities();
  void set_allocated_probabilities(::kepler_clarifai::ActivityProbabilities* probabilities);
  private:
  const ::kepler_clarifai::ActivityProbabilities& _internal_probabilities() const;
  ::kepler_clarifai::ActivityProbabilities* _internal_mutable_probabilities();
  public:
  void unsafe_arena_set_allocated_probabilities(
      ::kepler_clarifai::ActivityProbabilities* probabilities);
  ::kepler_clarifai::ActivityProbabilities* unsafe_arena_release_probabilities();

  // @@protoc_insertion_point(class_scope:kepler_clarifai.Activity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prediction_;
  ::kepler_clarifai::ActivityProbabilities* probabilities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fkepler_2fkepler_2eproto;
};
// -------------------------------------------------------------------

class Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kepler_clarifai.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kepler_clarifai.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fkepler_2fkepler_2eproto);
    return ::descriptor_table_proto_2fkepler_2fkepler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kImageJpgFieldNumber = 8,
    kHandsFieldNumber = 4,
    kGestureFieldNumber = 5,
    kSequenceFieldNumber = 1,
    kTimeStampFieldNumber = 6,
    kHasObjectFieldNumber = 3,
  };
  // bytes image = 2;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // bytes imageJpg = 8;
  void clear_imagejpg();
  const std::string& imagejpg() const;
  void set_imagejpg(const std::string& value);
  void set_imagejpg(std::string&& value);
  void set_imagejpg(const char* value);
  void set_imagejpg(const void* value, size_t size);
  std::string* mutable_imagejpg();
  std::string* release_imagejpg();
  void set_allocated_imagejpg(std::string* imagejpg);
  private:
  const std::string& _internal_imagejpg() const;
  void _internal_set_imagejpg(const std::string& value);
  std::string* _internal_mutable_imagejpg();
  public:

  // .kepler_clarifai.Hands hands = 4;
  bool has_hands() const;
  private:
  bool _internal_has_hands() const;
  public:
  void clear_hands();
  const ::kepler_clarifai::Hands& hands() const;
  ::kepler_clarifai::Hands* release_hands();
  ::kepler_clarifai::Hands* mutable_hands();
  void set_allocated_hands(::kepler_clarifai::Hands* hands);
  private:
  const ::kepler_clarifai::Hands& _internal_hands() const;
  ::kepler_clarifai::Hands* _internal_mutable_hands();
  public:
  void unsafe_arena_set_allocated_hands(
      ::kepler_clarifai::Hands* hands);
  ::kepler_clarifai::Hands* unsafe_arena_release_hands();

  // .kepler_clarifai.Gesture gesture = 5;
  bool has_gesture() const;
  private:
  bool _internal_has_gesture() const;
  public:
  void clear_gesture();
  const ::kepler_clarifai::Gesture& gesture() const;
  ::kepler_clarifai::Gesture* release_gesture();
  ::kepler_clarifai::Gesture* mutable_gesture();
  void set_allocated_gesture(::kepler_clarifai::Gesture* gesture);
  private:
  const ::kepler_clarifai::Gesture& _internal_gesture() const;
  ::kepler_clarifai::Gesture* _internal_mutable_gesture();
  public:
  void unsafe_arena_set_allocated_gesture(
      ::kepler_clarifai::Gesture* gesture);
  ::kepler_clarifai::Gesture* unsafe_arena_release_gesture();

  // int64 sequence = 1;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timeStamp = 6;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool hasObject = 3;
  void clear_hasobject();
  bool hasobject() const;
  void set_hasobject(bool value);
  private:
  bool _internal_hasobject() const;
  void _internal_set_hasobject(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kepler_clarifai.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagejpg_;
  ::kepler_clarifai::Hands* hands_;
  ::kepler_clarifai::Gesture* gesture_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  bool hasobject_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fkepler_2fkepler_2eproto;
};
// -------------------------------------------------------------------

class FrameBundle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kepler_clarifai.FrameBundle) */ {
 public:
  inline FrameBundle() : FrameBundle(nullptr) {}
  virtual ~FrameBundle();

  FrameBundle(const FrameBundle& from);
  FrameBundle(FrameBundle&& from) noexcept
    : FrameBundle() {
    *this = ::std::move(from);
  }

  inline FrameBundle& operator=(const FrameBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameBundle& operator=(FrameBundle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameBundle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameBundle* internal_default_instance() {
    return reinterpret_cast<const FrameBundle*>(
               &_FrameBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FrameBundle& a, FrameBundle& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameBundle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameBundle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameBundle* New() const final {
    return CreateMaybeMessage<FrameBundle>(nullptr);
  }

  FrameBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameBundle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameBundle& from);
  void MergeFrom(const FrameBundle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameBundle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kepler_clarifai.FrameBundle";
  }
  protected:
  explicit FrameBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fkepler_2fkepler_2eproto);
    return ::descriptor_table_proto_2fkepler_2fkepler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 4,
    kCameraIdFieldNumber = 5,
    kStoreIdFieldNumber = 10,
    kIdFieldNumber = 11,
    kVideoFieldNumber = 12,
    kActivityFieldNumber = 6,
    kSequenceFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kSizeFieldNumber = 3,
    kWidthFieldNumber = 7,
    kHeightFieldNumber = 8,
    kChannelsFieldNumber = 9,
  };
  // repeated .kepler_clarifai.Frame frames = 4;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::kepler_clarifai::Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kepler_clarifai::Frame >*
      mutable_frames();
  private:
  const ::kepler_clarifai::Frame& _internal_frames(int index) const;
  ::kepler_clarifai::Frame* _internal_add_frames();
  public:
  const ::kepler_clarifai::Frame& frames(int index) const;
  ::kepler_clarifai::Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kepler_clarifai::Frame >&
      frames() const;

  // string cameraId = 5;
  void clear_cameraid();
  const std::string& cameraid() const;
  void set_cameraid(const std::string& value);
  void set_cameraid(std::string&& value);
  void set_cameraid(const char* value);
  void set_cameraid(const char* value, size_t size);
  std::string* mutable_cameraid();
  std::string* release_cameraid();
  void set_allocated_cameraid(std::string* cameraid);
  private:
  const std::string& _internal_cameraid() const;
  void _internal_set_cameraid(const std::string& value);
  std::string* _internal_mutable_cameraid();
  public:

  // string storeId = 10;
  void clear_storeid();
  const std::string& storeid() const;
  void set_storeid(const std::string& value);
  void set_storeid(std::string&& value);
  void set_storeid(const char* value);
  void set_storeid(const char* value, size_t size);
  std::string* mutable_storeid();
  std::string* release_storeid();
  void set_allocated_storeid(std::string* storeid);
  private:
  const std::string& _internal_storeid() const;
  void _internal_set_storeid(const std::string& value);
  std::string* _internal_mutable_storeid();
  public:

  // string id = 11;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes video = 12;
  void clear_video();
  const std::string& video() const;
  void set_video(const std::string& value);
  void set_video(std::string&& value);
  void set_video(const char* value);
  void set_video(const void* value, size_t size);
  std::string* mutable_video();
  std::string* release_video();
  void set_allocated_video(std::string* video);
  private:
  const std::string& _internal_video() const;
  void _internal_set_video(const std::string& value);
  std::string* _internal_mutable_video();
  public:

  // .kepler_clarifai.Activity activity = 6;
  bool has_activity() const;
  private:
  bool _internal_has_activity() const;
  public:
  void clear_activity();
  const ::kepler_clarifai::Activity& activity() const;
  ::kepler_clarifai::Activity* release_activity();
  ::kepler_clarifai::Activity* mutable_activity();
  void set_allocated_activity(::kepler_clarifai::Activity* activity);
  private:
  const ::kepler_clarifai::Activity& _internal_activity() const;
  ::kepler_clarifai::Activity* _internal_mutable_activity();
  public:
  void unsafe_arena_set_allocated_activity(
      ::kepler_clarifai::Activity* activity);
  ::kepler_clarifai::Activity* unsafe_arena_release_activity();

  // int64 sequence = 1;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 7;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 8;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channels = 9;
  void clear_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channels() const;
  void _internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kepler_clarifai.FrameBundle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kepler_clarifai::Frame > frames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_;
  ::kepler_clarifai::Activity* activity_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fkepler_2fkepler_2eproto;
};
// -------------------------------------------------------------------

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kepler_clarifai.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kepler_clarifai.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fkepler_2fkepler_2eproto);
    return ::descriptor_table_proto_2fkepler_2fkepler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kOkFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // uint32 errorCode = 2;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kepler_clarifai.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool ok_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fkepler_2fkepler_2eproto;
};
// -------------------------------------------------------------------

class Sku PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kepler_clarifai.Sku) */ {
 public:
  inline Sku() : Sku(nullptr) {}
  virtual ~Sku();

  Sku(const Sku& from);
  Sku(Sku&& from) noexcept
    : Sku() {
    *this = ::std::move(from);
  }

  inline Sku& operator=(const Sku& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sku& operator=(Sku&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sku& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sku* internal_default_instance() {
    return reinterpret_cast<const Sku*>(
               &_Sku_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Sku& a, Sku& b) {
    a.Swap(&b);
  }
  inline void Swap(Sku* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sku* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sku* New() const final {
    return CreateMaybeMessage<Sku>(nullptr);
  }

  Sku* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sku>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sku& from);
  void MergeFrom(const Sku& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sku* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kepler_clarifai.Sku";
  }
  protected:
  explicit Sku(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fkepler_2fkepler_2eproto);
    return ::descriptor_table_proto_2fkepler_2fkepler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpcFieldNumber = 1,
  };
  // string upc = 1;
  void clear_upc();
  const std::string& upc() const;
  void set_upc(const std::string& value);
  void set_upc(std::string&& value);
  void set_upc(const char* value);
  void set_upc(const char* value, size_t size);
  std::string* mutable_upc();
  std::string* release_upc();
  void set_allocated_upc(std::string* upc);
  private:
  const std::string& _internal_upc() const;
  void _internal_set_upc(const std::string& value);
  std::string* _internal_mutable_upc();
  public:

  // @@protoc_insertion_point(class_scope:kepler_clarifai.Sku)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fkepler_2fkepler_2eproto;
};
// -------------------------------------------------------------------

class Product PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kepler_clarifai.Product) */ {
 public:
  inline Product() : Product(nullptr) {}
  virtual ~Product();

  Product(const Product& from);
  Product(Product&& from) noexcept
    : Product() {
    *this = ::std::move(from);
  }

  inline Product& operator=(const Product& from) {
    CopyFrom(from);
    return *this;
  }
  inline Product& operator=(Product&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Product& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Product* internal_default_instance() {
    return reinterpret_cast<const Product*>(
               &_Product_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Product& a, Product& b) {
    a.Swap(&b);
  }
  inline void Swap(Product* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Product* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Product* New() const final {
    return CreateMaybeMessage<Product>(nullptr);
  }

  Product* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Product>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Product& from);
  void MergeFrom(const Product& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Product* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kepler_clarifai.Product";
  }
  protected:
  explicit Product(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fkepler_2fkepler_2eproto);
    return ::descriptor_table_proto_2fkepler_2fkepler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kSkuFieldNumber = 1,
    kProbabilityFieldNumber = 3,
  };
  // string label = 2;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // .kepler_clarifai.Sku sku = 1;
  bool has_sku() const;
  private:
  bool _internal_has_sku() const;
  public:
  void clear_sku();
  const ::kepler_clarifai::Sku& sku() const;
  ::kepler_clarifai::Sku* release_sku();
  ::kepler_clarifai::Sku* mutable_sku();
  void set_allocated_sku(::kepler_clarifai::Sku* sku);
  private:
  const ::kepler_clarifai::Sku& _internal_sku() const;
  ::kepler_clarifai::Sku* _internal_mutable_sku();
  public:
  void unsafe_arena_set_allocated_sku(
      ::kepler_clarifai::Sku* sku);
  ::kepler_clarifai::Sku* unsafe_arena_release_sku();

  // float probability = 3;
  void clear_probability();
  float probability() const;
  void set_probability(float value);
  private:
  float _internal_probability() const;
  void _internal_set_probability(float value);
  public:

  // @@protoc_insertion_point(class_scope:kepler_clarifai.Product)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::kepler_clarifai::Sku* sku_;
  float probability_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fkepler_2fkepler_2eproto;
};
// -------------------------------------------------------------------

class Region PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kepler_clarifai.Region) */ {
 public:
  inline Region() : Region(nullptr) {}
  virtual ~Region();

  Region(const Region& from);
  Region(Region&& from) noexcept
    : Region() {
    *this = ::std::move(from);
  }

  inline Region& operator=(const Region& from) {
    CopyFrom(from);
    return *this;
  }
  inline Region& operator=(Region&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Region& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Region* internal_default_instance() {
    return reinterpret_cast<const Region*>(
               &_Region_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Region& a, Region& b) {
    a.Swap(&b);
  }
  inline void Swap(Region* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Region* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Region* New() const final {
    return CreateMaybeMessage<Region>(nullptr);
  }

  Region* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Region>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Region& from);
  void MergeFrom(const Region& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Region* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kepler_clarifai.Region";
  }
  protected:
  explicit Region(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fkepler_2fkepler_2eproto);
    return ::descriptor_table_proto_2fkepler_2fkepler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductsFieldNumber = 2,
    kBBoxIdFieldNumber = 1,
  };
  // repeated .kepler_clarifai.Product products = 2;
  int products_size() const;
  private:
  int _internal_products_size() const;
  public:
  void clear_products();
  ::kepler_clarifai::Product* mutable_products(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kepler_clarifai::Product >*
      mutable_products();
  private:
  const ::kepler_clarifai::Product& _internal_products(int index) const;
  ::kepler_clarifai::Product* _internal_add_products();
  public:
  const ::kepler_clarifai::Product& products(int index) const;
  ::kepler_clarifai::Product* add_products();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kepler_clarifai::Product >&
      products() const;

  // int32 bBoxId = 1;
  void clear_bboxid();
  ::PROTOBUF_NAMESPACE_ID::int32 bboxid() const;
  void set_bboxid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bboxid() const;
  void _internal_set_bboxid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kepler_clarifai.Region)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kepler_clarifai::Product > products_;
  ::PROTOBUF_NAMESPACE_ID::int32 bboxid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fkepler_2fkepler_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoundingBox

// float minX = 1;
inline void BoundingBox::clear_minx() {
  minx_ = 0;
}
inline float BoundingBox::_internal_minx() const {
  return minx_;
}
inline float BoundingBox::minx() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.BoundingBox.minX)
  return _internal_minx();
}
inline void BoundingBox::_internal_set_minx(float value) {
  
  minx_ = value;
}
inline void BoundingBox::set_minx(float value) {
  _internal_set_minx(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.BoundingBox.minX)
}

// float minY = 2;
inline void BoundingBox::clear_miny() {
  miny_ = 0;
}
inline float BoundingBox::_internal_miny() const {
  return miny_;
}
inline float BoundingBox::miny() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.BoundingBox.minY)
  return _internal_miny();
}
inline void BoundingBox::_internal_set_miny(float value) {
  
  miny_ = value;
}
inline void BoundingBox::set_miny(float value) {
  _internal_set_miny(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.BoundingBox.minY)
}

// float width = 3;
inline void BoundingBox::clear_width() {
  width_ = 0;
}
inline float BoundingBox::_internal_width() const {
  return width_;
}
inline float BoundingBox::width() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.BoundingBox.width)
  return _internal_width();
}
inline void BoundingBox::_internal_set_width(float value) {
  
  width_ = value;
}
inline void BoundingBox::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.BoundingBox.width)
}

// float height = 4;
inline void BoundingBox::clear_height() {
  height_ = 0;
}
inline float BoundingBox::_internal_height() const {
  return height_;
}
inline float BoundingBox::height() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.BoundingBox.height)
  return _internal_height();
}
inline void BoundingBox::_internal_set_height(float value) {
  
  height_ = value;
}
inline void BoundingBox::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.BoundingBox.height)
}

// -------------------------------------------------------------------

// Hands

// .kepler_clarifai.BoundingBox left = 1;
inline bool Hands::_internal_has_left() const {
  return this != internal_default_instance() && left_ != nullptr;
}
inline bool Hands::has_left() const {
  return _internal_has_left();
}
inline void Hands::clear_left() {
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
}
inline const ::kepler_clarifai::BoundingBox& Hands::_internal_left() const {
  const ::kepler_clarifai::BoundingBox* p = left_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kepler_clarifai::BoundingBox*>(
      &::kepler_clarifai::_BoundingBox_default_instance_);
}
inline const ::kepler_clarifai::BoundingBox& Hands::left() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Hands.left)
  return _internal_left();
}
inline void Hands::unsafe_arena_set_allocated_left(
    ::kepler_clarifai::BoundingBox* left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
  }
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kepler_clarifai.Hands.left)
}
inline ::kepler_clarifai::BoundingBox* Hands::release_left() {
  
  ::kepler_clarifai::BoundingBox* temp = left_;
  left_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kepler_clarifai::BoundingBox* Hands::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.Hands.left)
  
  ::kepler_clarifai::BoundingBox* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::kepler_clarifai::BoundingBox* Hands::_internal_mutable_left() {
  
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::kepler_clarifai::BoundingBox>(GetArena());
    left_ = p;
  }
  return left_;
}
inline ::kepler_clarifai::BoundingBox* Hands::mutable_left() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.Hands.left)
  return _internal_mutable_left();
}
inline void Hands::set_allocated_left(::kepler_clarifai::BoundingBox* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.Hands.left)
}

// .kepler_clarifai.BoundingBox right = 2;
inline bool Hands::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool Hands::has_right() const {
  return _internal_has_right();
}
inline void Hands::clear_right() {
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
inline const ::kepler_clarifai::BoundingBox& Hands::_internal_right() const {
  const ::kepler_clarifai::BoundingBox* p = right_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kepler_clarifai::BoundingBox*>(
      &::kepler_clarifai::_BoundingBox_default_instance_);
}
inline const ::kepler_clarifai::BoundingBox& Hands::right() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Hands.right)
  return _internal_right();
}
inline void Hands::unsafe_arena_set_allocated_right(
    ::kepler_clarifai::BoundingBox* right) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kepler_clarifai.Hands.right)
}
inline ::kepler_clarifai::BoundingBox* Hands::release_right() {
  
  ::kepler_clarifai::BoundingBox* temp = right_;
  right_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kepler_clarifai::BoundingBox* Hands::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.Hands.right)
  
  ::kepler_clarifai::BoundingBox* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::kepler_clarifai::BoundingBox* Hands::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::kepler_clarifai::BoundingBox>(GetArena());
    right_ = p;
  }
  return right_;
}
inline ::kepler_clarifai::BoundingBox* Hands::mutable_right() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.Hands.right)
  return _internal_mutable_right();
}
inline void Hands::set_allocated_right(::kepler_clarifai::BoundingBox* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.Hands.right)
}

// -------------------------------------------------------------------

// GesturesProbabilities

// float none = 1;
inline void GesturesProbabilities::clear_none() {
  none_ = 0;
}
inline float GesturesProbabilities::_internal_none() const {
  return none_;
}
inline float GesturesProbabilities::none() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.GesturesProbabilities.none)
  return _internal_none();
}
inline void GesturesProbabilities::_internal_set_none(float value) {
  
  none_ = value;
}
inline void GesturesProbabilities::set_none(float value) {
  _internal_set_none(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.GesturesProbabilities.none)
}

// float cartRetract = 2;
inline void GesturesProbabilities::clear_cartretract() {
  cartretract_ = 0;
}
inline float GesturesProbabilities::_internal_cartretract() const {
  return cartretract_;
}
inline float GesturesProbabilities::cartretract() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.GesturesProbabilities.cartRetract)
  return _internal_cartretract();
}
inline void GesturesProbabilities::_internal_set_cartretract(float value) {
  
  cartretract_ = value;
}
inline void GesturesProbabilities::set_cartretract(float value) {
  _internal_set_cartretract(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.GesturesProbabilities.cartRetract)
}

// float reach = 3;
inline void GesturesProbabilities::clear_reach() {
  reach_ = 0;
}
inline float GesturesProbabilities::_internal_reach() const {
  return reach_;
}
inline float GesturesProbabilities::reach() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.GesturesProbabilities.reach)
  return _internal_reach();
}
inline void GesturesProbabilities::_internal_set_reach(float value) {
  
  reach_ = value;
}
inline void GesturesProbabilities::set_reach(float value) {
  _internal_set_reach(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.GesturesProbabilities.reach)
}

// float noData = 4;
inline void GesturesProbabilities::clear_nodata() {
  nodata_ = 0;
}
inline float GesturesProbabilities::_internal_nodata() const {
  return nodata_;
}
inline float GesturesProbabilities::nodata() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.GesturesProbabilities.noData)
  return _internal_nodata();
}
inline void GesturesProbabilities::_internal_set_nodata(float value) {
  
  nodata_ = value;
}
inline void GesturesProbabilities::set_nodata(float value) {
  _internal_set_nodata(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.GesturesProbabilities.noData)
}

// float retract = 5;
inline void GesturesProbabilities::clear_retract() {
  retract_ = 0;
}
inline float GesturesProbabilities::_internal_retract() const {
  return retract_;
}
inline float GesturesProbabilities::retract() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.GesturesProbabilities.retract)
  return _internal_retract();
}
inline void GesturesProbabilities::_internal_set_retract(float value) {
  
  retract_ = value;
}
inline void GesturesProbabilities::set_retract(float value) {
  _internal_set_retract(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.GesturesProbabilities.retract)
}

// float cartReach = 6;
inline void GesturesProbabilities::clear_cartreach() {
  cartreach_ = 0;
}
inline float GesturesProbabilities::_internal_cartreach() const {
  return cartreach_;
}
inline float GesturesProbabilities::cartreach() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.GesturesProbabilities.cartReach)
  return _internal_cartreach();
}
inline void GesturesProbabilities::_internal_set_cartreach(float value) {
  
  cartreach_ = value;
}
inline void GesturesProbabilities::set_cartreach(float value) {
  _internal_set_cartreach(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.GesturesProbabilities.cartReach)
}

// -------------------------------------------------------------------

// ActivityProbabilities

// float cartPutdown = 1;
inline void ActivityProbabilities::clear_cartputdown() {
  cartputdown_ = 0;
}
inline float ActivityProbabilities::_internal_cartputdown() const {
  return cartputdown_;
}
inline float ActivityProbabilities::cartputdown() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.ActivityProbabilities.cartPutdown)
  return _internal_cartputdown();
}
inline void ActivityProbabilities::_internal_set_cartputdown(float value) {
  
  cartputdown_ = value;
}
inline void ActivityProbabilities::set_cartputdown(float value) {
  _internal_set_cartputdown(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.ActivityProbabilities.cartPutdown)
}

// float none = 2;
inline void ActivityProbabilities::clear_none() {
  none_ = 0;
}
inline float ActivityProbabilities::_internal_none() const {
  return none_;
}
inline float ActivityProbabilities::none() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.ActivityProbabilities.none)
  return _internal_none();
}
inline void ActivityProbabilities::_internal_set_none(float value) {
  
  none_ = value;
}
inline void ActivityProbabilities::set_none(float value) {
  _internal_set_none(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.ActivityProbabilities.none)
}

// float shelfPutdown = 3;
inline void ActivityProbabilities::clear_shelfputdown() {
  shelfputdown_ = 0;
}
inline float ActivityProbabilities::_internal_shelfputdown() const {
  return shelfputdown_;
}
inline float ActivityProbabilities::shelfputdown() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.ActivityProbabilities.shelfPutdown)
  return _internal_shelfputdown();
}
inline void ActivityProbabilities::_internal_set_shelfputdown(float value) {
  
  shelfputdown_ = value;
}
inline void ActivityProbabilities::set_shelfputdown(float value) {
  _internal_set_shelfputdown(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.ActivityProbabilities.shelfPutdown)
}

// float cartPickup = 4;
inline void ActivityProbabilities::clear_cartpickup() {
  cartpickup_ = 0;
}
inline float ActivityProbabilities::_internal_cartpickup() const {
  return cartpickup_;
}
inline float ActivityProbabilities::cartpickup() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.ActivityProbabilities.cartPickup)
  return _internal_cartpickup();
}
inline void ActivityProbabilities::_internal_set_cartpickup(float value) {
  
  cartpickup_ = value;
}
inline void ActivityProbabilities::set_cartpickup(float value) {
  _internal_set_cartpickup(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.ActivityProbabilities.cartPickup)
}

// float shelfPickup = 5;
inline void ActivityProbabilities::clear_shelfpickup() {
  shelfpickup_ = 0;
}
inline float ActivityProbabilities::_internal_shelfpickup() const {
  return shelfpickup_;
}
inline float ActivityProbabilities::shelfpickup() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.ActivityProbabilities.shelfPickup)
  return _internal_shelfpickup();
}
inline void ActivityProbabilities::_internal_set_shelfpickup(float value) {
  
  shelfpickup_ = value;
}
inline void ActivityProbabilities::set_shelfpickup(float value) {
  _internal_set_shelfpickup(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.ActivityProbabilities.shelfPickup)
}

// -------------------------------------------------------------------

// Gesture

// .kepler_clarifai.GesturesProbabilities probabilities = 1;
inline bool Gesture::_internal_has_probabilities() const {
  return this != internal_default_instance() && probabilities_ != nullptr;
}
inline bool Gesture::has_probabilities() const {
  return _internal_has_probabilities();
}
inline void Gesture::clear_probabilities() {
  if (GetArena() == nullptr && probabilities_ != nullptr) {
    delete probabilities_;
  }
  probabilities_ = nullptr;
}
inline const ::kepler_clarifai::GesturesProbabilities& Gesture::_internal_probabilities() const {
  const ::kepler_clarifai::GesturesProbabilities* p = probabilities_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kepler_clarifai::GesturesProbabilities*>(
      &::kepler_clarifai::_GesturesProbabilities_default_instance_);
}
inline const ::kepler_clarifai::GesturesProbabilities& Gesture::probabilities() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Gesture.probabilities)
  return _internal_probabilities();
}
inline void Gesture::unsafe_arena_set_allocated_probabilities(
    ::kepler_clarifai::GesturesProbabilities* probabilities) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(probabilities_);
  }
  probabilities_ = probabilities;
  if (probabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kepler_clarifai.Gesture.probabilities)
}
inline ::kepler_clarifai::GesturesProbabilities* Gesture::release_probabilities() {
  
  ::kepler_clarifai::GesturesProbabilities* temp = probabilities_;
  probabilities_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kepler_clarifai::GesturesProbabilities* Gesture::unsafe_arena_release_probabilities() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.Gesture.probabilities)
  
  ::kepler_clarifai::GesturesProbabilities* temp = probabilities_;
  probabilities_ = nullptr;
  return temp;
}
inline ::kepler_clarifai::GesturesProbabilities* Gesture::_internal_mutable_probabilities() {
  
  if (probabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::kepler_clarifai::GesturesProbabilities>(GetArena());
    probabilities_ = p;
  }
  return probabilities_;
}
inline ::kepler_clarifai::GesturesProbabilities* Gesture::mutable_probabilities() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.Gesture.probabilities)
  return _internal_mutable_probabilities();
}
inline void Gesture::set_allocated_probabilities(::kepler_clarifai::GesturesProbabilities* probabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete probabilities_;
  }
  if (probabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(probabilities);
    if (message_arena != submessage_arena) {
      probabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, probabilities, submessage_arena);
    }
    
  } else {
    
  }
  probabilities_ = probabilities;
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.Gesture.probabilities)
}

// string prediction = 2;
inline void Gesture::clear_prediction() {
  prediction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Gesture::prediction() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Gesture.prediction)
  return _internal_prediction();
}
inline void Gesture::set_prediction(const std::string& value) {
  _internal_set_prediction(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.Gesture.prediction)
}
inline std::string* Gesture::mutable_prediction() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.Gesture.prediction)
  return _internal_mutable_prediction();
}
inline const std::string& Gesture::_internal_prediction() const {
  return prediction_.Get();
}
inline void Gesture::_internal_set_prediction(const std::string& value) {
  
  prediction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Gesture::set_prediction(std::string&& value) {
  
  prediction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kepler_clarifai.Gesture.prediction)
}
inline void Gesture::set_prediction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prediction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kepler_clarifai.Gesture.prediction)
}
inline void Gesture::set_prediction(const char* value,
    size_t size) {
  
  prediction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kepler_clarifai.Gesture.prediction)
}
inline std::string* Gesture::_internal_mutable_prediction() {
  
  return prediction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Gesture::release_prediction() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.Gesture.prediction)
  return prediction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Gesture::set_allocated_prediction(std::string* prediction) {
  if (prediction != nullptr) {
    
  } else {
    
  }
  prediction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prediction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.Gesture.prediction)
}

// -------------------------------------------------------------------

// Activity

// .kepler_clarifai.ActivityProbabilities probabilities = 1;
inline bool Activity::_internal_has_probabilities() const {
  return this != internal_default_instance() && probabilities_ != nullptr;
}
inline bool Activity::has_probabilities() const {
  return _internal_has_probabilities();
}
inline void Activity::clear_probabilities() {
  if (GetArena() == nullptr && probabilities_ != nullptr) {
    delete probabilities_;
  }
  probabilities_ = nullptr;
}
inline const ::kepler_clarifai::ActivityProbabilities& Activity::_internal_probabilities() const {
  const ::kepler_clarifai::ActivityProbabilities* p = probabilities_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kepler_clarifai::ActivityProbabilities*>(
      &::kepler_clarifai::_ActivityProbabilities_default_instance_);
}
inline const ::kepler_clarifai::ActivityProbabilities& Activity::probabilities() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Activity.probabilities)
  return _internal_probabilities();
}
inline void Activity::unsafe_arena_set_allocated_probabilities(
    ::kepler_clarifai::ActivityProbabilities* probabilities) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(probabilities_);
  }
  probabilities_ = probabilities;
  if (probabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kepler_clarifai.Activity.probabilities)
}
inline ::kepler_clarifai::ActivityProbabilities* Activity::release_probabilities() {
  
  ::kepler_clarifai::ActivityProbabilities* temp = probabilities_;
  probabilities_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kepler_clarifai::ActivityProbabilities* Activity::unsafe_arena_release_probabilities() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.Activity.probabilities)
  
  ::kepler_clarifai::ActivityProbabilities* temp = probabilities_;
  probabilities_ = nullptr;
  return temp;
}
inline ::kepler_clarifai::ActivityProbabilities* Activity::_internal_mutable_probabilities() {
  
  if (probabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::kepler_clarifai::ActivityProbabilities>(GetArena());
    probabilities_ = p;
  }
  return probabilities_;
}
inline ::kepler_clarifai::ActivityProbabilities* Activity::mutable_probabilities() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.Activity.probabilities)
  return _internal_mutable_probabilities();
}
inline void Activity::set_allocated_probabilities(::kepler_clarifai::ActivityProbabilities* probabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete probabilities_;
  }
  if (probabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(probabilities);
    if (message_arena != submessage_arena) {
      probabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, probabilities, submessage_arena);
    }
    
  } else {
    
  }
  probabilities_ = probabilities;
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.Activity.probabilities)
}

// string prediction = 2;
inline void Activity::clear_prediction() {
  prediction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Activity::prediction() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Activity.prediction)
  return _internal_prediction();
}
inline void Activity::set_prediction(const std::string& value) {
  _internal_set_prediction(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.Activity.prediction)
}
inline std::string* Activity::mutable_prediction() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.Activity.prediction)
  return _internal_mutable_prediction();
}
inline const std::string& Activity::_internal_prediction() const {
  return prediction_.Get();
}
inline void Activity::_internal_set_prediction(const std::string& value) {
  
  prediction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Activity::set_prediction(std::string&& value) {
  
  prediction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kepler_clarifai.Activity.prediction)
}
inline void Activity::set_prediction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prediction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kepler_clarifai.Activity.prediction)
}
inline void Activity::set_prediction(const char* value,
    size_t size) {
  
  prediction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kepler_clarifai.Activity.prediction)
}
inline std::string* Activity::_internal_mutable_prediction() {
  
  return prediction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Activity::release_prediction() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.Activity.prediction)
  return prediction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Activity::set_allocated_prediction(std::string* prediction) {
  if (prediction != nullptr) {
    
  } else {
    
  }
  prediction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prediction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.Activity.prediction)
}

// -------------------------------------------------------------------

// Frame

// int64 sequence = 1;
inline void Frame::clear_sequence() {
  sequence_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Frame::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Frame::sequence() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Frame.sequence)
  return _internal_sequence();
}
inline void Frame::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sequence_ = value;
}
inline void Frame::set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.Frame.sequence)
}

// bytes image = 2;
inline void Frame::clear_image() {
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Frame::image() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Frame.image)
  return _internal_image();
}
inline void Frame::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.Frame.image)
}
inline std::string* Frame::mutable_image() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.Frame.image)
  return _internal_mutable_image();
}
inline const std::string& Frame::_internal_image() const {
  return image_.Get();
}
inline void Frame::_internal_set_image(const std::string& value) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Frame::set_image(std::string&& value) {
  
  image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kepler_clarifai.Frame.image)
}
inline void Frame::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kepler_clarifai.Frame.image)
}
inline void Frame::set_image(const void* value,
    size_t size) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kepler_clarifai.Frame.image)
}
inline std::string* Frame::_internal_mutable_image() {
  
  return image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Frame::release_image() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.Frame.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Frame::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.Frame.image)
}

// bool hasObject = 3;
inline void Frame::clear_hasobject() {
  hasobject_ = false;
}
inline bool Frame::_internal_hasobject() const {
  return hasobject_;
}
inline bool Frame::hasobject() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Frame.hasObject)
  return _internal_hasobject();
}
inline void Frame::_internal_set_hasobject(bool value) {
  
  hasobject_ = value;
}
inline void Frame::set_hasobject(bool value) {
  _internal_set_hasobject(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.Frame.hasObject)
}

// .kepler_clarifai.Hands hands = 4;
inline bool Frame::_internal_has_hands() const {
  return this != internal_default_instance() && hands_ != nullptr;
}
inline bool Frame::has_hands() const {
  return _internal_has_hands();
}
inline void Frame::clear_hands() {
  if (GetArena() == nullptr && hands_ != nullptr) {
    delete hands_;
  }
  hands_ = nullptr;
}
inline const ::kepler_clarifai::Hands& Frame::_internal_hands() const {
  const ::kepler_clarifai::Hands* p = hands_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kepler_clarifai::Hands*>(
      &::kepler_clarifai::_Hands_default_instance_);
}
inline const ::kepler_clarifai::Hands& Frame::hands() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Frame.hands)
  return _internal_hands();
}
inline void Frame::unsafe_arena_set_allocated_hands(
    ::kepler_clarifai::Hands* hands) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hands_);
  }
  hands_ = hands;
  if (hands) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kepler_clarifai.Frame.hands)
}
inline ::kepler_clarifai::Hands* Frame::release_hands() {
  
  ::kepler_clarifai::Hands* temp = hands_;
  hands_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kepler_clarifai::Hands* Frame::unsafe_arena_release_hands() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.Frame.hands)
  
  ::kepler_clarifai::Hands* temp = hands_;
  hands_ = nullptr;
  return temp;
}
inline ::kepler_clarifai::Hands* Frame::_internal_mutable_hands() {
  
  if (hands_ == nullptr) {
    auto* p = CreateMaybeMessage<::kepler_clarifai::Hands>(GetArena());
    hands_ = p;
  }
  return hands_;
}
inline ::kepler_clarifai::Hands* Frame::mutable_hands() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.Frame.hands)
  return _internal_mutable_hands();
}
inline void Frame::set_allocated_hands(::kepler_clarifai::Hands* hands) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hands_;
  }
  if (hands) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hands);
    if (message_arena != submessage_arena) {
      hands = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hands, submessage_arena);
    }
    
  } else {
    
  }
  hands_ = hands;
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.Frame.hands)
}

// .kepler_clarifai.Gesture gesture = 5;
inline bool Frame::_internal_has_gesture() const {
  return this != internal_default_instance() && gesture_ != nullptr;
}
inline bool Frame::has_gesture() const {
  return _internal_has_gesture();
}
inline void Frame::clear_gesture() {
  if (GetArena() == nullptr && gesture_ != nullptr) {
    delete gesture_;
  }
  gesture_ = nullptr;
}
inline const ::kepler_clarifai::Gesture& Frame::_internal_gesture() const {
  const ::kepler_clarifai::Gesture* p = gesture_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kepler_clarifai::Gesture*>(
      &::kepler_clarifai::_Gesture_default_instance_);
}
inline const ::kepler_clarifai::Gesture& Frame::gesture() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Frame.gesture)
  return _internal_gesture();
}
inline void Frame::unsafe_arena_set_allocated_gesture(
    ::kepler_clarifai::Gesture* gesture) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gesture_);
  }
  gesture_ = gesture;
  if (gesture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kepler_clarifai.Frame.gesture)
}
inline ::kepler_clarifai::Gesture* Frame::release_gesture() {
  
  ::kepler_clarifai::Gesture* temp = gesture_;
  gesture_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kepler_clarifai::Gesture* Frame::unsafe_arena_release_gesture() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.Frame.gesture)
  
  ::kepler_clarifai::Gesture* temp = gesture_;
  gesture_ = nullptr;
  return temp;
}
inline ::kepler_clarifai::Gesture* Frame::_internal_mutable_gesture() {
  
  if (gesture_ == nullptr) {
    auto* p = CreateMaybeMessage<::kepler_clarifai::Gesture>(GetArena());
    gesture_ = p;
  }
  return gesture_;
}
inline ::kepler_clarifai::Gesture* Frame::mutable_gesture() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.Frame.gesture)
  return _internal_mutable_gesture();
}
inline void Frame::set_allocated_gesture(::kepler_clarifai::Gesture* gesture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gesture_;
  }
  if (gesture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gesture);
    if (message_arena != submessage_arena) {
      gesture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gesture, submessage_arena);
    }
    
  } else {
    
  }
  gesture_ = gesture;
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.Frame.gesture)
}

// int64 timeStamp = 6;
inline void Frame::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Frame::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Frame::timestamp() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Frame.timeStamp)
  return _internal_timestamp();
}
inline void Frame::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void Frame::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.Frame.timeStamp)
}

// bytes imageJpg = 8;
inline void Frame::clear_imagejpg() {
  imagejpg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Frame::imagejpg() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Frame.imageJpg)
  return _internal_imagejpg();
}
inline void Frame::set_imagejpg(const std::string& value) {
  _internal_set_imagejpg(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.Frame.imageJpg)
}
inline std::string* Frame::mutable_imagejpg() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.Frame.imageJpg)
  return _internal_mutable_imagejpg();
}
inline const std::string& Frame::_internal_imagejpg() const {
  return imagejpg_.Get();
}
inline void Frame::_internal_set_imagejpg(const std::string& value) {
  
  imagejpg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Frame::set_imagejpg(std::string&& value) {
  
  imagejpg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kepler_clarifai.Frame.imageJpg)
}
inline void Frame::set_imagejpg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagejpg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kepler_clarifai.Frame.imageJpg)
}
inline void Frame::set_imagejpg(const void* value,
    size_t size) {
  
  imagejpg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kepler_clarifai.Frame.imageJpg)
}
inline std::string* Frame::_internal_mutable_imagejpg() {
  
  return imagejpg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Frame::release_imagejpg() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.Frame.imageJpg)
  return imagejpg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Frame::set_allocated_imagejpg(std::string* imagejpg) {
  if (imagejpg != nullptr) {
    
  } else {
    
  }
  imagejpg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagejpg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.Frame.imageJpg)
}

// -------------------------------------------------------------------

// FrameBundle

// int64 sequence = 1;
inline void FrameBundle::clear_sequence() {
  sequence_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameBundle::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameBundle::sequence() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.FrameBundle.sequence)
  return _internal_sequence();
}
inline void FrameBundle::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sequence_ = value;
}
inline void FrameBundle::set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.FrameBundle.sequence)
}

// int64 timestamp = 2;
inline void FrameBundle::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameBundle::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameBundle::timestamp() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.FrameBundle.timestamp)
  return _internal_timestamp();
}
inline void FrameBundle::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void FrameBundle::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.FrameBundle.timestamp)
}

// int32 size = 3;
inline void FrameBundle::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameBundle::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameBundle::size() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.FrameBundle.size)
  return _internal_size();
}
inline void FrameBundle::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void FrameBundle::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.FrameBundle.size)
}

// repeated .kepler_clarifai.Frame frames = 4;
inline int FrameBundle::_internal_frames_size() const {
  return frames_.size();
}
inline int FrameBundle::frames_size() const {
  return _internal_frames_size();
}
inline void FrameBundle::clear_frames() {
  frames_.Clear();
}
inline ::kepler_clarifai::Frame* FrameBundle::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.FrameBundle.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kepler_clarifai::Frame >*
FrameBundle::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:kepler_clarifai.FrameBundle.frames)
  return &frames_;
}
inline const ::kepler_clarifai::Frame& FrameBundle::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::kepler_clarifai::Frame& FrameBundle::frames(int index) const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.FrameBundle.frames)
  return _internal_frames(index);
}
inline ::kepler_clarifai::Frame* FrameBundle::_internal_add_frames() {
  return frames_.Add();
}
inline ::kepler_clarifai::Frame* FrameBundle::add_frames() {
  // @@protoc_insertion_point(field_add:kepler_clarifai.FrameBundle.frames)
  return _internal_add_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kepler_clarifai::Frame >&
FrameBundle::frames() const {
  // @@protoc_insertion_point(field_list:kepler_clarifai.FrameBundle.frames)
  return frames_;
}

// string cameraId = 5;
inline void FrameBundle::clear_cameraid() {
  cameraid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FrameBundle::cameraid() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.FrameBundle.cameraId)
  return _internal_cameraid();
}
inline void FrameBundle::set_cameraid(const std::string& value) {
  _internal_set_cameraid(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.FrameBundle.cameraId)
}
inline std::string* FrameBundle::mutable_cameraid() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.FrameBundle.cameraId)
  return _internal_mutable_cameraid();
}
inline const std::string& FrameBundle::_internal_cameraid() const {
  return cameraid_.Get();
}
inline void FrameBundle::_internal_set_cameraid(const std::string& value) {
  
  cameraid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FrameBundle::set_cameraid(std::string&& value) {
  
  cameraid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kepler_clarifai.FrameBundle.cameraId)
}
inline void FrameBundle::set_cameraid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cameraid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kepler_clarifai.FrameBundle.cameraId)
}
inline void FrameBundle::set_cameraid(const char* value,
    size_t size) {
  
  cameraid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kepler_clarifai.FrameBundle.cameraId)
}
inline std::string* FrameBundle::_internal_mutable_cameraid() {
  
  return cameraid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FrameBundle::release_cameraid() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.FrameBundle.cameraId)
  return cameraid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FrameBundle::set_allocated_cameraid(std::string* cameraid) {
  if (cameraid != nullptr) {
    
  } else {
    
  }
  cameraid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cameraid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.FrameBundle.cameraId)
}

// .kepler_clarifai.Activity activity = 6;
inline bool FrameBundle::_internal_has_activity() const {
  return this != internal_default_instance() && activity_ != nullptr;
}
inline bool FrameBundle::has_activity() const {
  return _internal_has_activity();
}
inline void FrameBundle::clear_activity() {
  if (GetArena() == nullptr && activity_ != nullptr) {
    delete activity_;
  }
  activity_ = nullptr;
}
inline const ::kepler_clarifai::Activity& FrameBundle::_internal_activity() const {
  const ::kepler_clarifai::Activity* p = activity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kepler_clarifai::Activity*>(
      &::kepler_clarifai::_Activity_default_instance_);
}
inline const ::kepler_clarifai::Activity& FrameBundle::activity() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.FrameBundle.activity)
  return _internal_activity();
}
inline void FrameBundle::unsafe_arena_set_allocated_activity(
    ::kepler_clarifai::Activity* activity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activity_);
  }
  activity_ = activity;
  if (activity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kepler_clarifai.FrameBundle.activity)
}
inline ::kepler_clarifai::Activity* FrameBundle::release_activity() {
  
  ::kepler_clarifai::Activity* temp = activity_;
  activity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kepler_clarifai::Activity* FrameBundle::unsafe_arena_release_activity() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.FrameBundle.activity)
  
  ::kepler_clarifai::Activity* temp = activity_;
  activity_ = nullptr;
  return temp;
}
inline ::kepler_clarifai::Activity* FrameBundle::_internal_mutable_activity() {
  
  if (activity_ == nullptr) {
    auto* p = CreateMaybeMessage<::kepler_clarifai::Activity>(GetArena());
    activity_ = p;
  }
  return activity_;
}
inline ::kepler_clarifai::Activity* FrameBundle::mutable_activity() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.FrameBundle.activity)
  return _internal_mutable_activity();
}
inline void FrameBundle::set_allocated_activity(::kepler_clarifai::Activity* activity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete activity_;
  }
  if (activity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(activity);
    if (message_arena != submessage_arena) {
      activity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activity, submessage_arena);
    }
    
  } else {
    
  }
  activity_ = activity;
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.FrameBundle.activity)
}

// int32 width = 7;
inline void FrameBundle::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameBundle::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameBundle::width() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.FrameBundle.width)
  return _internal_width();
}
inline void FrameBundle::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void FrameBundle::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.FrameBundle.width)
}

// int32 height = 8;
inline void FrameBundle::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameBundle::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameBundle::height() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.FrameBundle.height)
  return _internal_height();
}
inline void FrameBundle::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void FrameBundle::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.FrameBundle.height)
}

// int32 channels = 9;
inline void FrameBundle::clear_channels() {
  channels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameBundle::_internal_channels() const {
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameBundle::channels() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.FrameBundle.channels)
  return _internal_channels();
}
inline void FrameBundle::_internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channels_ = value;
}
inline void FrameBundle::set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.FrameBundle.channels)
}

// string storeId = 10;
inline void FrameBundle::clear_storeid() {
  storeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FrameBundle::storeid() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.FrameBundle.storeId)
  return _internal_storeid();
}
inline void FrameBundle::set_storeid(const std::string& value) {
  _internal_set_storeid(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.FrameBundle.storeId)
}
inline std::string* FrameBundle::mutable_storeid() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.FrameBundle.storeId)
  return _internal_mutable_storeid();
}
inline const std::string& FrameBundle::_internal_storeid() const {
  return storeid_.Get();
}
inline void FrameBundle::_internal_set_storeid(const std::string& value) {
  
  storeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FrameBundle::set_storeid(std::string&& value) {
  
  storeid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kepler_clarifai.FrameBundle.storeId)
}
inline void FrameBundle::set_storeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  storeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kepler_clarifai.FrameBundle.storeId)
}
inline void FrameBundle::set_storeid(const char* value,
    size_t size) {
  
  storeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kepler_clarifai.FrameBundle.storeId)
}
inline std::string* FrameBundle::_internal_mutable_storeid() {
  
  return storeid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FrameBundle::release_storeid() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.FrameBundle.storeId)
  return storeid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FrameBundle::set_allocated_storeid(std::string* storeid) {
  if (storeid != nullptr) {
    
  } else {
    
  }
  storeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.FrameBundle.storeId)
}

// string id = 11;
inline void FrameBundle::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FrameBundle::id() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.FrameBundle.id)
  return _internal_id();
}
inline void FrameBundle::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.FrameBundle.id)
}
inline std::string* FrameBundle::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.FrameBundle.id)
  return _internal_mutable_id();
}
inline const std::string& FrameBundle::_internal_id() const {
  return id_.Get();
}
inline void FrameBundle::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FrameBundle::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kepler_clarifai.FrameBundle.id)
}
inline void FrameBundle::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kepler_clarifai.FrameBundle.id)
}
inline void FrameBundle::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kepler_clarifai.FrameBundle.id)
}
inline std::string* FrameBundle::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FrameBundle::release_id() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.FrameBundle.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FrameBundle::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.FrameBundle.id)
}

// bytes video = 12;
inline void FrameBundle::clear_video() {
  video_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FrameBundle::video() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.FrameBundle.video)
  return _internal_video();
}
inline void FrameBundle::set_video(const std::string& value) {
  _internal_set_video(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.FrameBundle.video)
}
inline std::string* FrameBundle::mutable_video() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.FrameBundle.video)
  return _internal_mutable_video();
}
inline const std::string& FrameBundle::_internal_video() const {
  return video_.Get();
}
inline void FrameBundle::_internal_set_video(const std::string& value) {
  
  video_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FrameBundle::set_video(std::string&& value) {
  
  video_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kepler_clarifai.FrameBundle.video)
}
inline void FrameBundle::set_video(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  video_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kepler_clarifai.FrameBundle.video)
}
inline void FrameBundle::set_video(const void* value,
    size_t size) {
  
  video_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kepler_clarifai.FrameBundle.video)
}
inline std::string* FrameBundle::_internal_mutable_video() {
  
  return video_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FrameBundle::release_video() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.FrameBundle.video)
  return video_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FrameBundle::set_allocated_video(std::string* video) {
  if (video != nullptr) {
    
  } else {
    
  }
  video_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.FrameBundle.video)
}

// -------------------------------------------------------------------

// Status

// bool ok = 1;
inline void Status::clear_ok() {
  ok_ = false;
}
inline bool Status::_internal_ok() const {
  return ok_;
}
inline bool Status::ok() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Status.ok)
  return _internal_ok();
}
inline void Status::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void Status::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.Status.ok)
}

// uint32 errorCode = 2;
inline void Status::clear_errorcode() {
  errorcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::errorcode() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Status.errorCode)
  return _internal_errorcode();
}
inline void Status::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  errorcode_ = value;
}
inline void Status::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.Status.errorCode)
}

// string msg = 3;
inline void Status::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Status::msg() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Status.msg)
  return _internal_msg();
}
inline void Status::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.Status.msg)
}
inline std::string* Status::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.Status.msg)
  return _internal_mutable_msg();
}
inline const std::string& Status::_internal_msg() const {
  return msg_.Get();
}
inline void Status::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Status::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kepler_clarifai.Status.msg)
}
inline void Status::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kepler_clarifai.Status.msg)
}
inline void Status::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kepler_clarifai.Status.msg)
}
inline std::string* Status::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Status::release_msg() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.Status.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.Status.msg)
}

// -------------------------------------------------------------------

// Sku

// string upc = 1;
inline void Sku::clear_upc() {
  upc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Sku::upc() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Sku.upc)
  return _internal_upc();
}
inline void Sku::set_upc(const std::string& value) {
  _internal_set_upc(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.Sku.upc)
}
inline std::string* Sku::mutable_upc() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.Sku.upc)
  return _internal_mutable_upc();
}
inline const std::string& Sku::_internal_upc() const {
  return upc_.Get();
}
inline void Sku::_internal_set_upc(const std::string& value) {
  
  upc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Sku::set_upc(std::string&& value) {
  
  upc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kepler_clarifai.Sku.upc)
}
inline void Sku::set_upc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  upc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kepler_clarifai.Sku.upc)
}
inline void Sku::set_upc(const char* value,
    size_t size) {
  
  upc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kepler_clarifai.Sku.upc)
}
inline std::string* Sku::_internal_mutable_upc() {
  
  return upc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Sku::release_upc() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.Sku.upc)
  return upc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Sku::set_allocated_upc(std::string* upc) {
  if (upc != nullptr) {
    
  } else {
    
  }
  upc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), upc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.Sku.upc)
}

// -------------------------------------------------------------------

// Product

// .kepler_clarifai.Sku sku = 1;
inline bool Product::_internal_has_sku() const {
  return this != internal_default_instance() && sku_ != nullptr;
}
inline bool Product::has_sku() const {
  return _internal_has_sku();
}
inline void Product::clear_sku() {
  if (GetArena() == nullptr && sku_ != nullptr) {
    delete sku_;
  }
  sku_ = nullptr;
}
inline const ::kepler_clarifai::Sku& Product::_internal_sku() const {
  const ::kepler_clarifai::Sku* p = sku_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kepler_clarifai::Sku*>(
      &::kepler_clarifai::_Sku_default_instance_);
}
inline const ::kepler_clarifai::Sku& Product::sku() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Product.sku)
  return _internal_sku();
}
inline void Product::unsafe_arena_set_allocated_sku(
    ::kepler_clarifai::Sku* sku) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sku_);
  }
  sku_ = sku;
  if (sku) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kepler_clarifai.Product.sku)
}
inline ::kepler_clarifai::Sku* Product::release_sku() {
  
  ::kepler_clarifai::Sku* temp = sku_;
  sku_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kepler_clarifai::Sku* Product::unsafe_arena_release_sku() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.Product.sku)
  
  ::kepler_clarifai::Sku* temp = sku_;
  sku_ = nullptr;
  return temp;
}
inline ::kepler_clarifai::Sku* Product::_internal_mutable_sku() {
  
  if (sku_ == nullptr) {
    auto* p = CreateMaybeMessage<::kepler_clarifai::Sku>(GetArena());
    sku_ = p;
  }
  return sku_;
}
inline ::kepler_clarifai::Sku* Product::mutable_sku() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.Product.sku)
  return _internal_mutable_sku();
}
inline void Product::set_allocated_sku(::kepler_clarifai::Sku* sku) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sku_;
  }
  if (sku) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sku);
    if (message_arena != submessage_arena) {
      sku = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sku, submessage_arena);
    }
    
  } else {
    
  }
  sku_ = sku;
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.Product.sku)
}

// string label = 2;
inline void Product::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Product::label() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Product.label)
  return _internal_label();
}
inline void Product::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.Product.label)
}
inline std::string* Product::mutable_label() {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.Product.label)
  return _internal_mutable_label();
}
inline const std::string& Product::_internal_label() const {
  return label_.Get();
}
inline void Product::_internal_set_label(const std::string& value) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Product::set_label(std::string&& value) {
  
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kepler_clarifai.Product.label)
}
inline void Product::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kepler_clarifai.Product.label)
}
inline void Product::set_label(const char* value,
    size_t size) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kepler_clarifai.Product.label)
}
inline std::string* Product::_internal_mutable_label() {
  
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Product::release_label() {
  // @@protoc_insertion_point(field_release:kepler_clarifai.Product.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Product::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kepler_clarifai.Product.label)
}

// float probability = 3;
inline void Product::clear_probability() {
  probability_ = 0;
}
inline float Product::_internal_probability() const {
  return probability_;
}
inline float Product::probability() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Product.probability)
  return _internal_probability();
}
inline void Product::_internal_set_probability(float value) {
  
  probability_ = value;
}
inline void Product::set_probability(float value) {
  _internal_set_probability(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.Product.probability)
}

// -------------------------------------------------------------------

// Region

// int32 bBoxId = 1;
inline void Region::clear_bboxid() {
  bboxid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Region::_internal_bboxid() const {
  return bboxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Region::bboxid() const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Region.bBoxId)
  return _internal_bboxid();
}
inline void Region::_internal_set_bboxid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bboxid_ = value;
}
inline void Region::set_bboxid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bboxid(value);
  // @@protoc_insertion_point(field_set:kepler_clarifai.Region.bBoxId)
}

// repeated .kepler_clarifai.Product products = 2;
inline int Region::_internal_products_size() const {
  return products_.size();
}
inline int Region::products_size() const {
  return _internal_products_size();
}
inline void Region::clear_products() {
  products_.Clear();
}
inline ::kepler_clarifai::Product* Region::mutable_products(int index) {
  // @@protoc_insertion_point(field_mutable:kepler_clarifai.Region.products)
  return products_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kepler_clarifai::Product >*
Region::mutable_products() {
  // @@protoc_insertion_point(field_mutable_list:kepler_clarifai.Region.products)
  return &products_;
}
inline const ::kepler_clarifai::Product& Region::_internal_products(int index) const {
  return products_.Get(index);
}
inline const ::kepler_clarifai::Product& Region::products(int index) const {
  // @@protoc_insertion_point(field_get:kepler_clarifai.Region.products)
  return _internal_products(index);
}
inline ::kepler_clarifai::Product* Region::_internal_add_products() {
  return products_.Add();
}
inline ::kepler_clarifai::Product* Region::add_products() {
  // @@protoc_insertion_point(field_add:kepler_clarifai.Region.products)
  return _internal_add_products();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kepler_clarifai::Product >&
Region::products() const {
  // @@protoc_insertion_point(field_list:kepler_clarifai.Region.products)
  return products_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kepler_clarifai

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fkepler_2fkepler_2eproto
