// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/kepler/kepler.proto

#include "proto/kepler/kepler.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fkepler_2fkepler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Activity_proto_2fkepler_2fkepler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fkepler_2fkepler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityProbabilities_proto_2fkepler_2fkepler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fkepler_2fkepler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoundingBox_proto_2fkepler_2fkepler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fkepler_2fkepler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Frame_proto_2fkepler_2fkepler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fkepler_2fkepler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Gesture_proto_2fkepler_2fkepler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fkepler_2fkepler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GesturesProbabilities_proto_2fkepler_2fkepler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fkepler_2fkepler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Hands_proto_2fkepler_2fkepler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fkepler_2fkepler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Product_proto_2fkepler_2fkepler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fkepler_2fkepler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sku_proto_2fkepler_2fkepler_2eproto;
namespace kepler_clarifai {
class BoundingBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundingBox> _instance;
} _BoundingBox_default_instance_;
class HandsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hands> _instance;
} _Hands_default_instance_;
class GesturesProbabilitiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GesturesProbabilities> _instance;
} _GesturesProbabilities_default_instance_;
class ActivityProbabilitiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityProbabilities> _instance;
} _ActivityProbabilities_default_instance_;
class GestureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gesture> _instance;
} _Gesture_default_instance_;
class ActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Activity> _instance;
} _Activity_default_instance_;
class FrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Frame> _instance;
} _Frame_default_instance_;
class FrameBundleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameBundle> _instance;
} _FrameBundle_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class SkuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sku> _instance;
} _Sku_default_instance_;
class ProductDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Product> _instance;
} _Product_default_instance_;
class RegionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Region> _instance;
} _Region_default_instance_;
}  // namespace kepler_clarifai
static void InitDefaultsscc_info_Activity_proto_2fkepler_2fkepler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kepler_clarifai::_Activity_default_instance_;
    new (ptr) ::kepler_clarifai::Activity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kepler_clarifai::Activity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Activity_proto_2fkepler_2fkepler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Activity_proto_2fkepler_2fkepler_2eproto}, {
      &scc_info_ActivityProbabilities_proto_2fkepler_2fkepler_2eproto.base,}};

static void InitDefaultsscc_info_ActivityProbabilities_proto_2fkepler_2fkepler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kepler_clarifai::_ActivityProbabilities_default_instance_;
    new (ptr) ::kepler_clarifai::ActivityProbabilities();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kepler_clarifai::ActivityProbabilities::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityProbabilities_proto_2fkepler_2fkepler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActivityProbabilities_proto_2fkepler_2fkepler_2eproto}, {}};

static void InitDefaultsscc_info_BoundingBox_proto_2fkepler_2fkepler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kepler_clarifai::_BoundingBox_default_instance_;
    new (ptr) ::kepler_clarifai::BoundingBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kepler_clarifai::BoundingBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoundingBox_proto_2fkepler_2fkepler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BoundingBox_proto_2fkepler_2fkepler_2eproto}, {}};

static void InitDefaultsscc_info_Frame_proto_2fkepler_2fkepler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kepler_clarifai::_Frame_default_instance_;
    new (ptr) ::kepler_clarifai::Frame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kepler_clarifai::Frame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Frame_proto_2fkepler_2fkepler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Frame_proto_2fkepler_2fkepler_2eproto}, {
      &scc_info_Hands_proto_2fkepler_2fkepler_2eproto.base,
      &scc_info_Gesture_proto_2fkepler_2fkepler_2eproto.base,}};

static void InitDefaultsscc_info_FrameBundle_proto_2fkepler_2fkepler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kepler_clarifai::_FrameBundle_default_instance_;
    new (ptr) ::kepler_clarifai::FrameBundle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kepler_clarifai::FrameBundle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FrameBundle_proto_2fkepler_2fkepler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FrameBundle_proto_2fkepler_2fkepler_2eproto}, {
      &scc_info_Frame_proto_2fkepler_2fkepler_2eproto.base,
      &scc_info_Activity_proto_2fkepler_2fkepler_2eproto.base,}};

static void InitDefaultsscc_info_Gesture_proto_2fkepler_2fkepler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kepler_clarifai::_Gesture_default_instance_;
    new (ptr) ::kepler_clarifai::Gesture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kepler_clarifai::Gesture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Gesture_proto_2fkepler_2fkepler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Gesture_proto_2fkepler_2fkepler_2eproto}, {
      &scc_info_GesturesProbabilities_proto_2fkepler_2fkepler_2eproto.base,}};

static void InitDefaultsscc_info_GesturesProbabilities_proto_2fkepler_2fkepler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kepler_clarifai::_GesturesProbabilities_default_instance_;
    new (ptr) ::kepler_clarifai::GesturesProbabilities();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kepler_clarifai::GesturesProbabilities::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GesturesProbabilities_proto_2fkepler_2fkepler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GesturesProbabilities_proto_2fkepler_2fkepler_2eproto}, {}};

static void InitDefaultsscc_info_Hands_proto_2fkepler_2fkepler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kepler_clarifai::_Hands_default_instance_;
    new (ptr) ::kepler_clarifai::Hands();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kepler_clarifai::Hands::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Hands_proto_2fkepler_2fkepler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Hands_proto_2fkepler_2fkepler_2eproto}, {
      &scc_info_BoundingBox_proto_2fkepler_2fkepler_2eproto.base,}};

static void InitDefaultsscc_info_Product_proto_2fkepler_2fkepler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kepler_clarifai::_Product_default_instance_;
    new (ptr) ::kepler_clarifai::Product();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kepler_clarifai::Product::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Product_proto_2fkepler_2fkepler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Product_proto_2fkepler_2fkepler_2eproto}, {
      &scc_info_Sku_proto_2fkepler_2fkepler_2eproto.base,}};

static void InitDefaultsscc_info_Region_proto_2fkepler_2fkepler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kepler_clarifai::_Region_default_instance_;
    new (ptr) ::kepler_clarifai::Region();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kepler_clarifai::Region::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Region_proto_2fkepler_2fkepler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Region_proto_2fkepler_2fkepler_2eproto}, {
      &scc_info_Product_proto_2fkepler_2fkepler_2eproto.base,}};

static void InitDefaultsscc_info_Sku_proto_2fkepler_2fkepler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kepler_clarifai::_Sku_default_instance_;
    new (ptr) ::kepler_clarifai::Sku();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kepler_clarifai::Sku::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sku_proto_2fkepler_2fkepler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Sku_proto_2fkepler_2fkepler_2eproto}, {}};

static void InitDefaultsscc_info_Status_proto_2fkepler_2fkepler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kepler_clarifai::_Status_default_instance_;
    new (ptr) ::kepler_clarifai::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kepler_clarifai::Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_proto_2fkepler_2fkepler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Status_proto_2fkepler_2fkepler_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fkepler_2fkepler_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fkepler_2fkepler_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fkepler_2fkepler_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fkepler_2fkepler_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::BoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::BoundingBox, minx_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::BoundingBox, miny_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::BoundingBox, width_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::BoundingBox, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Hands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Hands, left_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Hands, right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::GesturesProbabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::GesturesProbabilities, none_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::GesturesProbabilities, cartretract_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::GesturesProbabilities, reach_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::GesturesProbabilities, nodata_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::GesturesProbabilities, retract_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::GesturesProbabilities, cartreach_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::ActivityProbabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::ActivityProbabilities, cartputdown_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::ActivityProbabilities, none_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::ActivityProbabilities, shelfputdown_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::ActivityProbabilities, cartpickup_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::ActivityProbabilities, shelfpickup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Gesture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Gesture, probabilities_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Gesture, prediction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Activity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Activity, probabilities_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Activity, prediction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Frame, sequence_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Frame, image_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Frame, hasobject_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Frame, hands_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Frame, gesture_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Frame, timestamp_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Frame, imagejpg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::FrameBundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::FrameBundle, sequence_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::FrameBundle, timestamp_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::FrameBundle, size_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::FrameBundle, frames_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::FrameBundle, cameraid_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::FrameBundle, activity_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::FrameBundle, width_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::FrameBundle, height_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::FrameBundle, channels_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::FrameBundle, storeid_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::FrameBundle, id_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::FrameBundle, video_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Status, ok_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Status, errorcode_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Status, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Sku, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Sku, upc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Product, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Product, sku_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Product, label_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Product, probability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Region, bboxid_),
  PROTOBUF_FIELD_OFFSET(::kepler_clarifai::Region, products_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kepler_clarifai::BoundingBox)},
  { 9, -1, sizeof(::kepler_clarifai::Hands)},
  { 16, -1, sizeof(::kepler_clarifai::GesturesProbabilities)},
  { 27, -1, sizeof(::kepler_clarifai::ActivityProbabilities)},
  { 37, -1, sizeof(::kepler_clarifai::Gesture)},
  { 44, -1, sizeof(::kepler_clarifai::Activity)},
  { 51, -1, sizeof(::kepler_clarifai::Frame)},
  { 63, -1, sizeof(::kepler_clarifai::FrameBundle)},
  { 80, -1, sizeof(::kepler_clarifai::Status)},
  { 88, -1, sizeof(::kepler_clarifai::Sku)},
  { 94, -1, sizeof(::kepler_clarifai::Product)},
  { 102, -1, sizeof(::kepler_clarifai::Region)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kepler_clarifai::_BoundingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kepler_clarifai::_Hands_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kepler_clarifai::_GesturesProbabilities_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kepler_clarifai::_ActivityProbabilities_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kepler_clarifai::_Gesture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kepler_clarifai::_Activity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kepler_clarifai::_Frame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kepler_clarifai::_FrameBundle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kepler_clarifai::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kepler_clarifai::_Sku_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kepler_clarifai::_Product_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kepler_clarifai::_Region_default_instance_),
};

const char descriptor_table_protodef_proto_2fkepler_2fkepler_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031proto/kepler/kepler.proto\022\017kepler_clar"
  "ifai\"H\n\013BoundingBox\022\014\n\004minX\030\001 \001(\002\022\014\n\004min"
  "Y\030\002 \001(\002\022\r\n\005width\030\003 \001(\002\022\016\n\006height\030\004 \001(\002\"`"
  "\n\005Hands\022*\n\004left\030\001 \001(\0132\034.kepler_clarifai."
  "BoundingBox\022+\n\005right\030\002 \001(\0132\034.kepler_clar"
  "ifai.BoundingBox\"}\n\025GesturesProbabilitie"
  "s\022\014\n\004none\030\001 \001(\002\022\023\n\013cartRetract\030\002 \001(\002\022\r\n\005"
  "reach\030\003 \001(\002\022\016\n\006noData\030\004 \001(\002\022\017\n\007retract\030\005"
  " \001(\002\022\021\n\tcartReach\030\006 \001(\002\"y\n\025ActivityProba"
  "bilities\022\023\n\013cartPutdown\030\001 \001(\002\022\014\n\004none\030\002 "
  "\001(\002\022\024\n\014shelfPutdown\030\003 \001(\002\022\022\n\ncartPickup\030"
  "\004 \001(\002\022\023\n\013shelfPickup\030\005 \001(\002\"\\\n\007Gesture\022=\n"
  "\rprobabilities\030\001 \001(\0132&.kepler_clarifai.G"
  "esturesProbabilities\022\022\n\nprediction\030\002 \001(\t"
  "\"]\n\010Activity\022=\n\rprobabilities\030\001 \001(\0132&.ke"
  "pler_clarifai.ActivityProbabilities\022\022\n\np"
  "rediction\030\002 \001(\t\"\262\001\n\005Frame\022\020\n\010sequence\030\001 "
  "\001(\003\022\r\n\005image\030\002 \001(\014\022\021\n\thasObject\030\003 \001(\010\022%\n"
  "\005hands\030\004 \001(\0132\026.kepler_clarifai.Hands\022)\n\007"
  "gesture\030\005 \001(\0132\030.kepler_clarifai.Gesture\022"
  "\021\n\ttimeStamp\030\006 \001(\003\022\020\n\010imageJpg\030\010 \001(\014\"\204\002\n"
  "\013FrameBundle\022\020\n\010sequence\030\001 \001(\003\022\021\n\ttimest"
  "amp\030\002 \001(\003\022\014\n\004size\030\003 \001(\005\022&\n\006frames\030\004 \003(\0132"
  "\026.kepler_clarifai.Frame\022\020\n\010cameraId\030\005 \001("
  "\t\022+\n\010activity\030\006 \001(\0132\031.kepler_clarifai.Ac"
  "tivity\022\r\n\005width\030\007 \001(\005\022\016\n\006height\030\010 \001(\005\022\020\n"
  "\010channels\030\t \001(\005\022\017\n\007storeId\030\n \001(\t\022\n\n\002id\030\013"
  " \001(\t\022\r\n\005video\030\014 \001(\014\"4\n\006Status\022\n\n\002ok\030\001 \001("
  "\010\022\021\n\terrorCode\030\002 \001(\r\022\013\n\003msg\030\003 \001(\t\"\022\n\003Sku"
  "\022\013\n\003upc\030\001 \001(\t\"P\n\007Product\022!\n\003sku\030\001 \001(\0132\024."
  "kepler_clarifai.Sku\022\r\n\005label\030\002 \001(\t\022\023\n\013pr"
  "obability\030\003 \001(\002\"D\n\006Region\022\016\n\006bBoxId\030\001 \001("
  "\005\022*\n\010products\030\002 \003(\0132\030.kepler_clarifai.Pr"
  "oductb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fkepler_2fkepler_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fkepler_2fkepler_2eproto_sccs[12] = {
  &scc_info_Activity_proto_2fkepler_2fkepler_2eproto.base,
  &scc_info_ActivityProbabilities_proto_2fkepler_2fkepler_2eproto.base,
  &scc_info_BoundingBox_proto_2fkepler_2fkepler_2eproto.base,
  &scc_info_Frame_proto_2fkepler_2fkepler_2eproto.base,
  &scc_info_FrameBundle_proto_2fkepler_2fkepler_2eproto.base,
  &scc_info_Gesture_proto_2fkepler_2fkepler_2eproto.base,
  &scc_info_GesturesProbabilities_proto_2fkepler_2fkepler_2eproto.base,
  &scc_info_Hands_proto_2fkepler_2fkepler_2eproto.base,
  &scc_info_Product_proto_2fkepler_2fkepler_2eproto.base,
  &scc_info_Region_proto_2fkepler_2fkepler_2eproto.base,
  &scc_info_Sku_proto_2fkepler_2fkepler_2eproto.base,
  &scc_info_Status_proto_2fkepler_2fkepler_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fkepler_2fkepler_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fkepler_2fkepler_2eproto = {
  false, false, descriptor_table_protodef_proto_2fkepler_2fkepler_2eproto, "proto/kepler/kepler.proto", 1333,
  &descriptor_table_proto_2fkepler_2fkepler_2eproto_once, descriptor_table_proto_2fkepler_2fkepler_2eproto_sccs, descriptor_table_proto_2fkepler_2fkepler_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_proto_2fkepler_2fkepler_2eproto::offsets,
  file_level_metadata_proto_2fkepler_2fkepler_2eproto, 12, file_level_enum_descriptors_proto_2fkepler_2fkepler_2eproto, file_level_service_descriptors_proto_2fkepler_2fkepler_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fkepler_2fkepler_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fkepler_2fkepler_2eproto)), true);
namespace kepler_clarifai {

// ===================================================================

void BoundingBox::InitAsDefaultInstance() {
}
class BoundingBox::_Internal {
 public:
};

BoundingBox::BoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kepler_clarifai.BoundingBox)
}
BoundingBox::BoundingBox(const BoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&minx_, &from.minx_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&minx_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:kepler_clarifai.BoundingBox)
}

void BoundingBox::SharedCtor() {
  ::memset(&minx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&minx_)) + sizeof(height_));
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:kepler_clarifai.BoundingBox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundingBox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BoundingBox::ArenaDtor(void* object) {
  BoundingBox* _this = reinterpret_cast< BoundingBox* >(object);
  (void)_this;
}
void BoundingBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundingBox& BoundingBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundingBox_proto_2fkepler_2fkepler_2eproto.base);
  return *internal_default_instance();
}


void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:kepler_clarifai.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&minx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&minx_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float minX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          minx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float minY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          miny_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kepler_clarifai.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float minX = 1;
  if (!(this->minx() <= 0 && this->minx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_minx(), target);
  }

  // float minY = 2;
  if (!(this->miny() <= 0 && this->miny() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_miny(), target);
  }

  // float width = 3;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_width(), target);
  }

  // float height = 4;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kepler_clarifai.BoundingBox)
  return target;
}

size_t BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kepler_clarifai.BoundingBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float minX = 1;
  if (!(this->minx() <= 0 && this->minx() >= 0)) {
    total_size += 1 + 4;
  }

  // float minY = 2;
  if (!(this->miny() <= 0 && this->miny() >= 0)) {
    total_size += 1 + 4;
  }

  // float width = 3;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 4;
  }

  // float height = 4;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kepler_clarifai.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundingBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kepler_clarifai.BoundingBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kepler_clarifai.BoundingBox)
    MergeFrom(*source);
  }
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kepler_clarifai.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.minx() <= 0 && from.minx() >= 0)) {
    _internal_set_minx(from._internal_minx());
  }
  if (!(from.miny() <= 0 && from.miny() >= 0)) {
    _internal_set_miny(from._internal_miny());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
}

void BoundingBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kepler_clarifai.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kepler_clarifai.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  return true;
}

void BoundingBox::InternalSwap(BoundingBox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox, height_)
      + sizeof(BoundingBox::height_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox, minx_)>(
          reinterpret_cast<char*>(&minx_),
          reinterpret_cast<char*>(&other->minx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Hands::InitAsDefaultInstance() {
  ::kepler_clarifai::_Hands_default_instance_._instance.get_mutable()->left_ = const_cast< ::kepler_clarifai::BoundingBox*>(
      ::kepler_clarifai::BoundingBox::internal_default_instance());
  ::kepler_clarifai::_Hands_default_instance_._instance.get_mutable()->right_ = const_cast< ::kepler_clarifai::BoundingBox*>(
      ::kepler_clarifai::BoundingBox::internal_default_instance());
}
class Hands::_Internal {
 public:
  static const ::kepler_clarifai::BoundingBox& left(const Hands* msg);
  static const ::kepler_clarifai::BoundingBox& right(const Hands* msg);
};

const ::kepler_clarifai::BoundingBox&
Hands::_Internal::left(const Hands* msg) {
  return *msg->left_;
}
const ::kepler_clarifai::BoundingBox&
Hands::_Internal::right(const Hands* msg) {
  return *msg->right_;
}
Hands::Hands(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kepler_clarifai.Hands)
}
Hands::Hands(const Hands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left()) {
    left_ = new ::kepler_clarifai::BoundingBox(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::kepler_clarifai::BoundingBox(*from.right_);
  } else {
    right_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kepler_clarifai.Hands)
}

void Hands::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Hands_proto_2fkepler_2fkepler_2eproto.base);
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&left_)) + sizeof(right_));
}

Hands::~Hands() {
  // @@protoc_insertion_point(destructor:kepler_clarifai.Hands)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Hands::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
}

void Hands::ArenaDtor(void* object) {
  Hands* _this = reinterpret_cast< Hands* >(object);
  (void)_this;
}
void Hands::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Hands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hands& Hands::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hands_proto_2fkepler_2fkepler_2eproto.base);
  return *internal_default_instance();
}


void Hands::Clear() {
// @@protoc_insertion_point(message_clear_start:kepler_clarifai.Hands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hands::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kepler_clarifai.BoundingBox left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kepler_clarifai.BoundingBox right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hands::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kepler_clarifai.Hands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kepler_clarifai.BoundingBox left = 1;
  if (this->has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::left(this), target, stream);
  }

  // .kepler_clarifai.BoundingBox right = 2;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::right(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kepler_clarifai.Hands)
  return target;
}

size_t Hands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kepler_clarifai.Hands)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kepler_clarifai.BoundingBox left = 1;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .kepler_clarifai.BoundingBox right = 2;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hands::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kepler_clarifai.Hands)
  GOOGLE_DCHECK_NE(&from, this);
  const Hands* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hands>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kepler_clarifai.Hands)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kepler_clarifai.Hands)
    MergeFrom(*source);
  }
}

void Hands::MergeFrom(const Hands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kepler_clarifai.Hands)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left()) {
    _internal_mutable_left()->::kepler_clarifai::BoundingBox::MergeFrom(from._internal_left());
  }
  if (from.has_right()) {
    _internal_mutable_right()->::kepler_clarifai::BoundingBox::MergeFrom(from._internal_right());
  }
}

void Hands::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kepler_clarifai.Hands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hands::CopyFrom(const Hands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kepler_clarifai.Hands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hands::IsInitialized() const {
  return true;
}

void Hands::InternalSwap(Hands* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hands, right_)
      + sizeof(Hands::right_)
      - PROTOBUF_FIELD_OFFSET(Hands, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Hands::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GesturesProbabilities::InitAsDefaultInstance() {
}
class GesturesProbabilities::_Internal {
 public:
};

GesturesProbabilities::GesturesProbabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kepler_clarifai.GesturesProbabilities)
}
GesturesProbabilities::GesturesProbabilities(const GesturesProbabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&none_, &from.none_,
    static_cast<size_t>(reinterpret_cast<char*>(&cartreach_) -
    reinterpret_cast<char*>(&none_)) + sizeof(cartreach_));
  // @@protoc_insertion_point(copy_constructor:kepler_clarifai.GesturesProbabilities)
}

void GesturesProbabilities::SharedCtor() {
  ::memset(&none_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cartreach_) -
      reinterpret_cast<char*>(&none_)) + sizeof(cartreach_));
}

GesturesProbabilities::~GesturesProbabilities() {
  // @@protoc_insertion_point(destructor:kepler_clarifai.GesturesProbabilities)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GesturesProbabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GesturesProbabilities::ArenaDtor(void* object) {
  GesturesProbabilities* _this = reinterpret_cast< GesturesProbabilities* >(object);
  (void)_this;
}
void GesturesProbabilities::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GesturesProbabilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GesturesProbabilities& GesturesProbabilities::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GesturesProbabilities_proto_2fkepler_2fkepler_2eproto.base);
  return *internal_default_instance();
}


void GesturesProbabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:kepler_clarifai.GesturesProbabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&none_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cartreach_) -
      reinterpret_cast<char*>(&none_)) + sizeof(cartreach_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GesturesProbabilities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float none = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          none_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cartRetract = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          cartretract_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float reach = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          reach_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float noData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          nodata_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float retract = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          retract_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cartReach = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          cartreach_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GesturesProbabilities::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kepler_clarifai.GesturesProbabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float none = 1;
  if (!(this->none() <= 0 && this->none() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_none(), target);
  }

  // float cartRetract = 2;
  if (!(this->cartretract() <= 0 && this->cartretract() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_cartretract(), target);
  }

  // float reach = 3;
  if (!(this->reach() <= 0 && this->reach() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_reach(), target);
  }

  // float noData = 4;
  if (!(this->nodata() <= 0 && this->nodata() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_nodata(), target);
  }

  // float retract = 5;
  if (!(this->retract() <= 0 && this->retract() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_retract(), target);
  }

  // float cartReach = 6;
  if (!(this->cartreach() <= 0 && this->cartreach() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_cartreach(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kepler_clarifai.GesturesProbabilities)
  return target;
}

size_t GesturesProbabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kepler_clarifai.GesturesProbabilities)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float none = 1;
  if (!(this->none() <= 0 && this->none() >= 0)) {
    total_size += 1 + 4;
  }

  // float cartRetract = 2;
  if (!(this->cartretract() <= 0 && this->cartretract() >= 0)) {
    total_size += 1 + 4;
  }

  // float reach = 3;
  if (!(this->reach() <= 0 && this->reach() >= 0)) {
    total_size += 1 + 4;
  }

  // float noData = 4;
  if (!(this->nodata() <= 0 && this->nodata() >= 0)) {
    total_size += 1 + 4;
  }

  // float retract = 5;
  if (!(this->retract() <= 0 && this->retract() >= 0)) {
    total_size += 1 + 4;
  }

  // float cartReach = 6;
  if (!(this->cartreach() <= 0 && this->cartreach() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GesturesProbabilities::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kepler_clarifai.GesturesProbabilities)
  GOOGLE_DCHECK_NE(&from, this);
  const GesturesProbabilities* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GesturesProbabilities>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kepler_clarifai.GesturesProbabilities)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kepler_clarifai.GesturesProbabilities)
    MergeFrom(*source);
  }
}

void GesturesProbabilities::MergeFrom(const GesturesProbabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kepler_clarifai.GesturesProbabilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.none() <= 0 && from.none() >= 0)) {
    _internal_set_none(from._internal_none());
  }
  if (!(from.cartretract() <= 0 && from.cartretract() >= 0)) {
    _internal_set_cartretract(from._internal_cartretract());
  }
  if (!(from.reach() <= 0 && from.reach() >= 0)) {
    _internal_set_reach(from._internal_reach());
  }
  if (!(from.nodata() <= 0 && from.nodata() >= 0)) {
    _internal_set_nodata(from._internal_nodata());
  }
  if (!(from.retract() <= 0 && from.retract() >= 0)) {
    _internal_set_retract(from._internal_retract());
  }
  if (!(from.cartreach() <= 0 && from.cartreach() >= 0)) {
    _internal_set_cartreach(from._internal_cartreach());
  }
}

void GesturesProbabilities::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kepler_clarifai.GesturesProbabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GesturesProbabilities::CopyFrom(const GesturesProbabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kepler_clarifai.GesturesProbabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GesturesProbabilities::IsInitialized() const {
  return true;
}

void GesturesProbabilities::InternalSwap(GesturesProbabilities* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GesturesProbabilities, cartreach_)
      + sizeof(GesturesProbabilities::cartreach_)
      - PROTOBUF_FIELD_OFFSET(GesturesProbabilities, none_)>(
          reinterpret_cast<char*>(&none_),
          reinterpret_cast<char*>(&other->none_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GesturesProbabilities::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivityProbabilities::InitAsDefaultInstance() {
}
class ActivityProbabilities::_Internal {
 public:
};

ActivityProbabilities::ActivityProbabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kepler_clarifai.ActivityProbabilities)
}
ActivityProbabilities::ActivityProbabilities(const ActivityProbabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cartputdown_, &from.cartputdown_,
    static_cast<size_t>(reinterpret_cast<char*>(&shelfpickup_) -
    reinterpret_cast<char*>(&cartputdown_)) + sizeof(shelfpickup_));
  // @@protoc_insertion_point(copy_constructor:kepler_clarifai.ActivityProbabilities)
}

void ActivityProbabilities::SharedCtor() {
  ::memset(&cartputdown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shelfpickup_) -
      reinterpret_cast<char*>(&cartputdown_)) + sizeof(shelfpickup_));
}

ActivityProbabilities::~ActivityProbabilities() {
  // @@protoc_insertion_point(destructor:kepler_clarifai.ActivityProbabilities)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActivityProbabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ActivityProbabilities::ArenaDtor(void* object) {
  ActivityProbabilities* _this = reinterpret_cast< ActivityProbabilities* >(object);
  (void)_this;
}
void ActivityProbabilities::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivityProbabilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityProbabilities& ActivityProbabilities::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityProbabilities_proto_2fkepler_2fkepler_2eproto.base);
  return *internal_default_instance();
}


void ActivityProbabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:kepler_clarifai.ActivityProbabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cartputdown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shelfpickup_) -
      reinterpret_cast<char*>(&cartputdown_)) + sizeof(shelfpickup_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityProbabilities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float cartPutdown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          cartputdown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float none = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          none_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float shelfPutdown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          shelfputdown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cartPickup = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          cartpickup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float shelfPickup = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          shelfpickup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityProbabilities::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kepler_clarifai.ActivityProbabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float cartPutdown = 1;
  if (!(this->cartputdown() <= 0 && this->cartputdown() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_cartputdown(), target);
  }

  // float none = 2;
  if (!(this->none() <= 0 && this->none() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_none(), target);
  }

  // float shelfPutdown = 3;
  if (!(this->shelfputdown() <= 0 && this->shelfputdown() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_shelfputdown(), target);
  }

  // float cartPickup = 4;
  if (!(this->cartpickup() <= 0 && this->cartpickup() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_cartpickup(), target);
  }

  // float shelfPickup = 5;
  if (!(this->shelfpickup() <= 0 && this->shelfpickup() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_shelfpickup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kepler_clarifai.ActivityProbabilities)
  return target;
}

size_t ActivityProbabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kepler_clarifai.ActivityProbabilities)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float cartPutdown = 1;
  if (!(this->cartputdown() <= 0 && this->cartputdown() >= 0)) {
    total_size += 1 + 4;
  }

  // float none = 2;
  if (!(this->none() <= 0 && this->none() >= 0)) {
    total_size += 1 + 4;
  }

  // float shelfPutdown = 3;
  if (!(this->shelfputdown() <= 0 && this->shelfputdown() >= 0)) {
    total_size += 1 + 4;
  }

  // float cartPickup = 4;
  if (!(this->cartpickup() <= 0 && this->cartpickup() >= 0)) {
    total_size += 1 + 4;
  }

  // float shelfPickup = 5;
  if (!(this->shelfpickup() <= 0 && this->shelfpickup() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityProbabilities::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kepler_clarifai.ActivityProbabilities)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityProbabilities* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityProbabilities>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kepler_clarifai.ActivityProbabilities)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kepler_clarifai.ActivityProbabilities)
    MergeFrom(*source);
  }
}

void ActivityProbabilities::MergeFrom(const ActivityProbabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kepler_clarifai.ActivityProbabilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.cartputdown() <= 0 && from.cartputdown() >= 0)) {
    _internal_set_cartputdown(from._internal_cartputdown());
  }
  if (!(from.none() <= 0 && from.none() >= 0)) {
    _internal_set_none(from._internal_none());
  }
  if (!(from.shelfputdown() <= 0 && from.shelfputdown() >= 0)) {
    _internal_set_shelfputdown(from._internal_shelfputdown());
  }
  if (!(from.cartpickup() <= 0 && from.cartpickup() >= 0)) {
    _internal_set_cartpickup(from._internal_cartpickup());
  }
  if (!(from.shelfpickup() <= 0 && from.shelfpickup() >= 0)) {
    _internal_set_shelfpickup(from._internal_shelfpickup());
  }
}

void ActivityProbabilities::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kepler_clarifai.ActivityProbabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityProbabilities::CopyFrom(const ActivityProbabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kepler_clarifai.ActivityProbabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityProbabilities::IsInitialized() const {
  return true;
}

void ActivityProbabilities::InternalSwap(ActivityProbabilities* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityProbabilities, shelfpickup_)
      + sizeof(ActivityProbabilities::shelfpickup_)
      - PROTOBUF_FIELD_OFFSET(ActivityProbabilities, cartputdown_)>(
          reinterpret_cast<char*>(&cartputdown_),
          reinterpret_cast<char*>(&other->cartputdown_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityProbabilities::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Gesture::InitAsDefaultInstance() {
  ::kepler_clarifai::_Gesture_default_instance_._instance.get_mutable()->probabilities_ = const_cast< ::kepler_clarifai::GesturesProbabilities*>(
      ::kepler_clarifai::GesturesProbabilities::internal_default_instance());
}
class Gesture::_Internal {
 public:
  static const ::kepler_clarifai::GesturesProbabilities& probabilities(const Gesture* msg);
};

const ::kepler_clarifai::GesturesProbabilities&
Gesture::_Internal::probabilities(const Gesture* msg) {
  return *msg->probabilities_;
}
Gesture::Gesture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kepler_clarifai.Gesture)
}
Gesture::Gesture(const Gesture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prediction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prediction().empty()) {
    prediction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prediction(),
      GetArena());
  }
  if (from._internal_has_probabilities()) {
    probabilities_ = new ::kepler_clarifai::GesturesProbabilities(*from.probabilities_);
  } else {
    probabilities_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kepler_clarifai.Gesture)
}

void Gesture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Gesture_proto_2fkepler_2fkepler_2eproto.base);
  prediction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  probabilities_ = nullptr;
}

Gesture::~Gesture() {
  // @@protoc_insertion_point(destructor:kepler_clarifai.Gesture)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Gesture::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prediction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete probabilities_;
}

void Gesture::ArenaDtor(void* object) {
  Gesture* _this = reinterpret_cast< Gesture* >(object);
  (void)_this;
}
void Gesture::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Gesture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gesture& Gesture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gesture_proto_2fkepler_2fkepler_2eproto.base);
  return *internal_default_instance();
}


void Gesture::Clear() {
// @@protoc_insertion_point(message_clear_start:kepler_clarifai.Gesture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prediction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && probabilities_ != nullptr) {
    delete probabilities_;
  }
  probabilities_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gesture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kepler_clarifai.GesturesProbabilities probabilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_probabilities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prediction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_prediction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kepler_clarifai.Gesture.prediction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gesture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kepler_clarifai.Gesture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kepler_clarifai.GesturesProbabilities probabilities = 1;
  if (this->has_probabilities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::probabilities(this), target, stream);
  }

  // string prediction = 2;
  if (this->prediction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prediction().data(), static_cast<int>(this->_internal_prediction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kepler_clarifai.Gesture.prediction");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prediction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kepler_clarifai.Gesture)
  return target;
}

size_t Gesture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kepler_clarifai.Gesture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prediction = 2;
  if (this->prediction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prediction());
  }

  // .kepler_clarifai.GesturesProbabilities probabilities = 1;
  if (this->has_probabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *probabilities_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gesture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kepler_clarifai.Gesture)
  GOOGLE_DCHECK_NE(&from, this);
  const Gesture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gesture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kepler_clarifai.Gesture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kepler_clarifai.Gesture)
    MergeFrom(*source);
  }
}

void Gesture::MergeFrom(const Gesture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kepler_clarifai.Gesture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prediction().size() > 0) {
    _internal_set_prediction(from._internal_prediction());
  }
  if (from.has_probabilities()) {
    _internal_mutable_probabilities()->::kepler_clarifai::GesturesProbabilities::MergeFrom(from._internal_probabilities());
  }
}

void Gesture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kepler_clarifai.Gesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gesture::CopyFrom(const Gesture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kepler_clarifai.Gesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gesture::IsInitialized() const {
  return true;
}

void Gesture::InternalSwap(Gesture* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prediction_.Swap(&other->prediction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(probabilities_, other->probabilities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gesture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Activity::InitAsDefaultInstance() {
  ::kepler_clarifai::_Activity_default_instance_._instance.get_mutable()->probabilities_ = const_cast< ::kepler_clarifai::ActivityProbabilities*>(
      ::kepler_clarifai::ActivityProbabilities::internal_default_instance());
}
class Activity::_Internal {
 public:
  static const ::kepler_clarifai::ActivityProbabilities& probabilities(const Activity* msg);
};

const ::kepler_clarifai::ActivityProbabilities&
Activity::_Internal::probabilities(const Activity* msg) {
  return *msg->probabilities_;
}
Activity::Activity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kepler_clarifai.Activity)
}
Activity::Activity(const Activity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prediction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prediction().empty()) {
    prediction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prediction(),
      GetArena());
  }
  if (from._internal_has_probabilities()) {
    probabilities_ = new ::kepler_clarifai::ActivityProbabilities(*from.probabilities_);
  } else {
    probabilities_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kepler_clarifai.Activity)
}

void Activity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Activity_proto_2fkepler_2fkepler_2eproto.base);
  prediction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  probabilities_ = nullptr;
}

Activity::~Activity() {
  // @@protoc_insertion_point(destructor:kepler_clarifai.Activity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Activity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prediction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete probabilities_;
}

void Activity::ArenaDtor(void* object) {
  Activity* _this = reinterpret_cast< Activity* >(object);
  (void)_this;
}
void Activity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Activity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Activity& Activity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Activity_proto_2fkepler_2fkepler_2eproto.base);
  return *internal_default_instance();
}


void Activity::Clear() {
// @@protoc_insertion_point(message_clear_start:kepler_clarifai.Activity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prediction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && probabilities_ != nullptr) {
    delete probabilities_;
  }
  probabilities_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Activity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kepler_clarifai.ActivityProbabilities probabilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_probabilities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prediction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_prediction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kepler_clarifai.Activity.prediction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Activity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kepler_clarifai.Activity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kepler_clarifai.ActivityProbabilities probabilities = 1;
  if (this->has_probabilities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::probabilities(this), target, stream);
  }

  // string prediction = 2;
  if (this->prediction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prediction().data(), static_cast<int>(this->_internal_prediction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kepler_clarifai.Activity.prediction");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prediction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kepler_clarifai.Activity)
  return target;
}

size_t Activity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kepler_clarifai.Activity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prediction = 2;
  if (this->prediction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prediction());
  }

  // .kepler_clarifai.ActivityProbabilities probabilities = 1;
  if (this->has_probabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *probabilities_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Activity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kepler_clarifai.Activity)
  GOOGLE_DCHECK_NE(&from, this);
  const Activity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Activity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kepler_clarifai.Activity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kepler_clarifai.Activity)
    MergeFrom(*source);
  }
}

void Activity::MergeFrom(const Activity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kepler_clarifai.Activity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prediction().size() > 0) {
    _internal_set_prediction(from._internal_prediction());
  }
  if (from.has_probabilities()) {
    _internal_mutable_probabilities()->::kepler_clarifai::ActivityProbabilities::MergeFrom(from._internal_probabilities());
  }
}

void Activity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kepler_clarifai.Activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity::CopyFrom(const Activity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kepler_clarifai.Activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity::IsInitialized() const {
  return true;
}

void Activity::InternalSwap(Activity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prediction_.Swap(&other->prediction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(probabilities_, other->probabilities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Activity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Frame::InitAsDefaultInstance() {
  ::kepler_clarifai::_Frame_default_instance_._instance.get_mutable()->hands_ = const_cast< ::kepler_clarifai::Hands*>(
      ::kepler_clarifai::Hands::internal_default_instance());
  ::kepler_clarifai::_Frame_default_instance_._instance.get_mutable()->gesture_ = const_cast< ::kepler_clarifai::Gesture*>(
      ::kepler_clarifai::Gesture::internal_default_instance());
}
class Frame::_Internal {
 public:
  static const ::kepler_clarifai::Hands& hands(const Frame* msg);
  static const ::kepler_clarifai::Gesture& gesture(const Frame* msg);
};

const ::kepler_clarifai::Hands&
Frame::_Internal::hands(const Frame* msg) {
  return *msg->hands_;
}
const ::kepler_clarifai::Gesture&
Frame::_Internal::gesture(const Frame* msg) {
  return *msg->gesture_;
}
Frame::Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kepler_clarifai.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image(),
      GetArena());
  }
  imagejpg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imagejpg().empty()) {
    imagejpg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imagejpg(),
      GetArena());
  }
  if (from._internal_has_hands()) {
    hands_ = new ::kepler_clarifai::Hands(*from.hands_);
  } else {
    hands_ = nullptr;
  }
  if (from._internal_has_gesture()) {
    gesture_ = new ::kepler_clarifai::Gesture(*from.gesture_);
  } else {
    gesture_ = nullptr;
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&hasobject_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(hasobject_));
  // @@protoc_insertion_point(copy_constructor:kepler_clarifai.Frame)
}

void Frame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Frame_proto_2fkepler_2fkepler_2eproto.base);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagejpg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hands_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hasobject_) -
      reinterpret_cast<char*>(&hands_)) + sizeof(hasobject_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:kepler_clarifai.Frame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagejpg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hands_;
  if (this != internal_default_instance()) delete gesture_;
}

void Frame::ArenaDtor(void* object) {
  Frame* _this = reinterpret_cast< Frame* >(object);
  (void)_this;
}
void Frame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Frame& Frame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Frame_proto_2fkepler_2fkepler_2eproto.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:kepler_clarifai.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imagejpg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && hands_ != nullptr) {
    delete hands_;
  }
  hands_ = nullptr;
  if (GetArena() == nullptr && gesture_ != nullptr) {
    delete gesture_;
  }
  gesture_ = nullptr;
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hasobject_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(hasobject_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasObject = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hasobject_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kepler_clarifai.Hands hands = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hands(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kepler_clarifai.Gesture gesture = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gesture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timeStamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes imageJpg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_imagejpg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Frame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kepler_clarifai.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sequence = 1;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sequence(), target);
  }

  // bytes image = 2;
  if (this->image().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image(), target);
  }

  // bool hasObject = 3;
  if (this->hasobject() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_hasobject(), target);
  }

  // .kepler_clarifai.Hands hands = 4;
  if (this->has_hands()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hands(this), target, stream);
  }

  // .kepler_clarifai.Gesture gesture = 5;
  if (this->has_gesture()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::gesture(this), target, stream);
  }

  // int64 timeStamp = 6;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp(), target);
  }

  // bytes imageJpg = 8;
  if (this->imagejpg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_imagejpg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kepler_clarifai.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kepler_clarifai.Frame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 2;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // bytes imageJpg = 8;
  if (this->imagejpg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imagejpg());
  }

  // .kepler_clarifai.Hands hands = 4;
  if (this->has_hands()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hands_);
  }

  // .kepler_clarifai.Gesture gesture = 5;
  if (this->has_gesture()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gesture_);
  }

  // int64 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sequence());
  }

  // int64 timeStamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // bool hasObject = 3;
  if (this->hasobject() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kepler_clarifai.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Frame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kepler_clarifai.Frame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kepler_clarifai.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kepler_clarifai.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image().size() > 0) {
    _internal_set_image(from._internal_image());
  }
  if (from.imagejpg().size() > 0) {
    _internal_set_imagejpg(from._internal_imagejpg());
  }
  if (from.has_hands()) {
    _internal_mutable_hands()->::kepler_clarifai::Hands::MergeFrom(from._internal_hands());
  }
  if (from.has_gesture()) {
    _internal_mutable_gesture()->::kepler_clarifai::Gesture::MergeFrom(from._internal_gesture());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.hasobject() != 0) {
    _internal_set_hasobject(from._internal_hasobject());
  }
}

void Frame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kepler_clarifai.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kepler_clarifai.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imagejpg_.Swap(&other->imagejpg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frame, hasobject_)
      + sizeof(Frame::hasobject_)
      - PROTOBUF_FIELD_OFFSET(Frame, hands_)>(
          reinterpret_cast<char*>(&hands_),
          reinterpret_cast<char*>(&other->hands_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameBundle::InitAsDefaultInstance() {
  ::kepler_clarifai::_FrameBundle_default_instance_._instance.get_mutable()->activity_ = const_cast< ::kepler_clarifai::Activity*>(
      ::kepler_clarifai::Activity::internal_default_instance());
}
class FrameBundle::_Internal {
 public:
  static const ::kepler_clarifai::Activity& activity(const FrameBundle* msg);
};

const ::kepler_clarifai::Activity&
FrameBundle::_Internal::activity(const FrameBundle* msg) {
  return *msg->activity_;
}
FrameBundle::FrameBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  frames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kepler_clarifai.FrameBundle)
}
FrameBundle::FrameBundle(const FrameBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cameraid().empty()) {
    cameraid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cameraid(),
      GetArena());
  }
  storeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_storeid().empty()) {
    storeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_storeid(),
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  video_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_video().empty()) {
    video_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_video(),
      GetArena());
  }
  if (from._internal_has_activity()) {
    activity_ = new ::kepler_clarifai::Activity(*from.activity_);
  } else {
    activity_ = nullptr;
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&channels_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(channels_));
  // @@protoc_insertion_point(copy_constructor:kepler_clarifai.FrameBundle)
}

void FrameBundle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameBundle_proto_2fkepler_2fkepler_2eproto.base);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  video_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&activity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channels_) -
      reinterpret_cast<char*>(&activity_)) + sizeof(channels_));
}

FrameBundle::~FrameBundle() {
  // @@protoc_insertion_point(destructor:kepler_clarifai.FrameBundle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameBundle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cameraid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  video_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete activity_;
}

void FrameBundle::ArenaDtor(void* object) {
  FrameBundle* _this = reinterpret_cast< FrameBundle* >(object);
  (void)_this;
}
void FrameBundle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameBundle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameBundle& FrameBundle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameBundle_proto_2fkepler_2fkepler_2eproto.base);
  return *internal_default_instance();
}


void FrameBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:kepler_clarifai.FrameBundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  cameraid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  storeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  video_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && activity_ != nullptr) {
    delete activity_;
  }
  activity_ = nullptr;
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channels_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(channels_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameBundle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kepler_clarifai.Frame frames = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string cameraId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_cameraid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kepler_clarifai.FrameBundle.cameraId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kepler_clarifai.Activity activity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_activity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 channels = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string storeId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_storeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kepler_clarifai.FrameBundle.storeId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kepler_clarifai.FrameBundle.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes video = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_video();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameBundle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kepler_clarifai.FrameBundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sequence = 1;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sequence(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // int32 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_size(), target);
  }

  // repeated .kepler_clarifai.Frame frames = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_frames(i), target, stream);
  }

  // string cameraId = 5;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cameraid().data(), static_cast<int>(this->_internal_cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kepler_clarifai.FrameBundle.cameraId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cameraid(), target);
  }

  // .kepler_clarifai.Activity activity = 6;
  if (this->has_activity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::activity(this), target, stream);
  }

  // int32 width = 7;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_width(), target);
  }

  // int32 height = 8;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_height(), target);
  }

  // int32 channels = 9;
  if (this->channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_channels(), target);
  }

  // string storeId = 10;
  if (this->storeid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_storeid().data(), static_cast<int>(this->_internal_storeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kepler_clarifai.FrameBundle.storeId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_storeid(), target);
  }

  // string id = 11;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kepler_clarifai.FrameBundle.id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_id(), target);
  }

  // bytes video = 12;
  if (this->video().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_video(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kepler_clarifai.FrameBundle)
  return target;
}

size_t FrameBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kepler_clarifai.FrameBundle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kepler_clarifai.Frame frames = 4;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cameraId = 5;
  if (this->cameraid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cameraid());
  }

  // string storeId = 10;
  if (this->storeid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_storeid());
  }

  // string id = 11;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes video = 12;
  if (this->video().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_video());
  }

  // .kepler_clarifai.Activity activity = 6;
  if (this->has_activity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activity_);
  }

  // int64 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sequence());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int32 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  // int32 width = 7;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 8;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 channels = 9;
  if (this->channels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channels());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameBundle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kepler_clarifai.FrameBundle)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameBundle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameBundle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kepler_clarifai.FrameBundle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kepler_clarifai.FrameBundle)
    MergeFrom(*source);
  }
}

void FrameBundle::MergeFrom(const FrameBundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kepler_clarifai.FrameBundle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
  if (from.cameraid().size() > 0) {
    _internal_set_cameraid(from._internal_cameraid());
  }
  if (from.storeid().size() > 0) {
    _internal_set_storeid(from._internal_storeid());
  }
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.video().size() > 0) {
    _internal_set_video(from._internal_video());
  }
  if (from.has_activity()) {
    _internal_mutable_activity()->::kepler_clarifai::Activity::MergeFrom(from._internal_activity());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.channels() != 0) {
    _internal_set_channels(from._internal_channels());
  }
}

void FrameBundle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kepler_clarifai.FrameBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameBundle::CopyFrom(const FrameBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kepler_clarifai.FrameBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameBundle::IsInitialized() const {
  return true;
}

void FrameBundle::InternalSwap(FrameBundle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frames_.InternalSwap(&other->frames_);
  cameraid_.Swap(&other->cameraid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  storeid_.Swap(&other->storeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  video_.Swap(&other->video_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameBundle, channels_)
      + sizeof(FrameBundle::channels_)
      - PROTOBUF_FIELD_OFFSET(FrameBundle, activity_)>(
          reinterpret_cast<char*>(&activity_),
          reinterpret_cast<char*>(&other->activity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameBundle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Status::InitAsDefaultInstance() {
}
class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kepler_clarifai.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg(),
      GetArena());
  }
  ::memcpy(&ok_, &from.ok_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&ok_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:kepler_clarifai.Status)
}

void Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Status_proto_2fkepler_2fkepler_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&ok_)) + sizeof(errorcode_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:kepler_clarifai.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_proto_2fkepler_2fkepler_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:kepler_clarifai.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&ok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&ok_)) + sizeof(errorcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kepler_clarifai.Status.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kepler_clarifai.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // uint32 errorCode = 2;
  if (this->errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_errorcode(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kepler_clarifai.Status.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kepler_clarifai.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kepler_clarifai.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  // uint32 errorCode = 2;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kepler_clarifai.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kepler_clarifai.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kepler_clarifai.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kepler_clarifai.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
  if (from.errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kepler_clarifai.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kepler_clarifai.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, errorcode_)
      + sizeof(Status::errorcode_)
      - PROTOBUF_FIELD_OFFSET(Status, ok_)>(
          reinterpret_cast<char*>(&ok_),
          reinterpret_cast<char*>(&other->ok_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Sku::InitAsDefaultInstance() {
}
class Sku::_Internal {
 public:
};

Sku::Sku(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kepler_clarifai.Sku)
}
Sku::Sku(const Sku& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  upc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_upc().empty()) {
    upc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_upc(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kepler_clarifai.Sku)
}

void Sku::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sku_proto_2fkepler_2fkepler_2eproto.base);
  upc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Sku::~Sku() {
  // @@protoc_insertion_point(destructor:kepler_clarifai.Sku)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Sku::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  upc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Sku::ArenaDtor(void* object) {
  Sku* _this = reinterpret_cast< Sku* >(object);
  (void)_this;
}
void Sku::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sku::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sku& Sku::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sku_proto_2fkepler_2fkepler_2eproto.base);
  return *internal_default_instance();
}


void Sku::Clear() {
// @@protoc_insertion_point(message_clear_start:kepler_clarifai.Sku)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  upc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sku::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string upc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_upc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kepler_clarifai.Sku.upc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sku::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kepler_clarifai.Sku)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string upc = 1;
  if (this->upc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_upc().data(), static_cast<int>(this->_internal_upc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kepler_clarifai.Sku.upc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_upc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kepler_clarifai.Sku)
  return target;
}

size_t Sku::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kepler_clarifai.Sku)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string upc = 1;
  if (this->upc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sku::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kepler_clarifai.Sku)
  GOOGLE_DCHECK_NE(&from, this);
  const Sku* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sku>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kepler_clarifai.Sku)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kepler_clarifai.Sku)
    MergeFrom(*source);
  }
}

void Sku::MergeFrom(const Sku& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kepler_clarifai.Sku)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.upc().size() > 0) {
    _internal_set_upc(from._internal_upc());
  }
}

void Sku::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kepler_clarifai.Sku)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sku::CopyFrom(const Sku& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kepler_clarifai.Sku)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sku::IsInitialized() const {
  return true;
}

void Sku::InternalSwap(Sku* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  upc_.Swap(&other->upc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Sku::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Product::InitAsDefaultInstance() {
  ::kepler_clarifai::_Product_default_instance_._instance.get_mutable()->sku_ = const_cast< ::kepler_clarifai::Sku*>(
      ::kepler_clarifai::Sku::internal_default_instance());
}
class Product::_Internal {
 public:
  static const ::kepler_clarifai::Sku& sku(const Product* msg);
};

const ::kepler_clarifai::Sku&
Product::_Internal::sku(const Product* msg) {
  return *msg->sku_;
}
Product::Product(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kepler_clarifai.Product)
}
Product::Product(const Product& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  if (from._internal_has_sku()) {
    sku_ = new ::kepler_clarifai::Sku(*from.sku_);
  } else {
    sku_ = nullptr;
  }
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:kepler_clarifai.Product)
}

void Product::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Product_proto_2fkepler_2fkepler_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sku_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&sku_)) + sizeof(probability_));
}

Product::~Product() {
  // @@protoc_insertion_point(destructor:kepler_clarifai.Product)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Product::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sku_;
}

void Product::ArenaDtor(void* object) {
  Product* _this = reinterpret_cast< Product* >(object);
  (void)_this;
}
void Product::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Product::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Product& Product::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Product_proto_2fkepler_2fkepler_2eproto.base);
  return *internal_default_instance();
}


void Product::Clear() {
// @@protoc_insertion_point(message_clear_start:kepler_clarifai.Product)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sku_ != nullptr) {
    delete sku_;
  }
  sku_ = nullptr;
  probability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Product::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kepler_clarifai.Sku sku = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sku(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kepler_clarifai.Product.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float probability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Product::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kepler_clarifai.Product)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kepler_clarifai.Sku sku = 1;
  if (this->has_sku()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sku(this), target, stream);
  }

  // string label = 2;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kepler_clarifai.Product.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // float probability = 3;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_probability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kepler_clarifai.Product)
  return target;
}

size_t Product::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kepler_clarifai.Product)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 2;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // .kepler_clarifai.Sku sku = 1;
  if (this->has_sku()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sku_);
  }

  // float probability = 3;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Product::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kepler_clarifai.Product)
  GOOGLE_DCHECK_NE(&from, this);
  const Product* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Product>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kepler_clarifai.Product)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kepler_clarifai.Product)
    MergeFrom(*source);
  }
}

void Product::MergeFrom(const Product& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kepler_clarifai.Product)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
  if (from.has_sku()) {
    _internal_mutable_sku()->::kepler_clarifai::Sku::MergeFrom(from._internal_sku());
  }
  if (!(from.probability() <= 0 && from.probability() >= 0)) {
    _internal_set_probability(from._internal_probability());
  }
}

void Product::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kepler_clarifai.Product)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Product::CopyFrom(const Product& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kepler_clarifai.Product)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Product::IsInitialized() const {
  return true;
}

void Product::InternalSwap(Product* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Product, probability_)
      + sizeof(Product::probability_)
      - PROTOBUF_FIELD_OFFSET(Product, sku_)>(
          reinterpret_cast<char*>(&sku_),
          reinterpret_cast<char*>(&other->sku_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Product::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Region::InitAsDefaultInstance() {
}
class Region::_Internal {
 public:
};

Region::Region(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  products_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kepler_clarifai.Region)
}
Region::Region(const Region& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      products_(from.products_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bboxid_ = from.bboxid_;
  // @@protoc_insertion_point(copy_constructor:kepler_clarifai.Region)
}

void Region::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Region_proto_2fkepler_2fkepler_2eproto.base);
  bboxid_ = 0;
}

Region::~Region() {
  // @@protoc_insertion_point(destructor:kepler_clarifai.Region)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Region::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Region::ArenaDtor(void* object) {
  Region* _this = reinterpret_cast< Region* >(object);
  (void)_this;
}
void Region::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Region::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Region& Region::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Region_proto_2fkepler_2fkepler_2eproto.base);
  return *internal_default_instance();
}


void Region::Clear() {
// @@protoc_insertion_point(message_clear_start:kepler_clarifai.Region)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  products_.Clear();
  bboxid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Region::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bBoxId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bboxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kepler_clarifai.Product products = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_products(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Region::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kepler_clarifai.Region)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bBoxId = 1;
  if (this->bboxid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bboxid(), target);
  }

  // repeated .kepler_clarifai.Product products = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_products_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_products(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kepler_clarifai.Region)
  return target;
}

size_t Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kepler_clarifai.Region)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kepler_clarifai.Product products = 2;
  total_size += 1UL * this->_internal_products_size();
  for (const auto& msg : this->products_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 bBoxId = 1;
  if (this->bboxid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bboxid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Region::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kepler_clarifai.Region)
  GOOGLE_DCHECK_NE(&from, this);
  const Region* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Region>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kepler_clarifai.Region)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kepler_clarifai.Region)
    MergeFrom(*source);
  }
}

void Region::MergeFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kepler_clarifai.Region)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  products_.MergeFrom(from.products_);
  if (from.bboxid() != 0) {
    _internal_set_bboxid(from._internal_bboxid());
  }
}

void Region::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kepler_clarifai.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Region::CopyFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kepler_clarifai.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Region::IsInitialized() const {
  return true;
}

void Region::InternalSwap(Region* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  products_.InternalSwap(&other->products_);
  swap(bboxid_, other->bboxid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Region::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace kepler_clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kepler_clarifai::BoundingBox* Arena::CreateMaybeMessage< ::kepler_clarifai::BoundingBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kepler_clarifai::BoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::kepler_clarifai::Hands* Arena::CreateMaybeMessage< ::kepler_clarifai::Hands >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kepler_clarifai::Hands >(arena);
}
template<> PROTOBUF_NOINLINE ::kepler_clarifai::GesturesProbabilities* Arena::CreateMaybeMessage< ::kepler_clarifai::GesturesProbabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kepler_clarifai::GesturesProbabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::kepler_clarifai::ActivityProbabilities* Arena::CreateMaybeMessage< ::kepler_clarifai::ActivityProbabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kepler_clarifai::ActivityProbabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::kepler_clarifai::Gesture* Arena::CreateMaybeMessage< ::kepler_clarifai::Gesture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kepler_clarifai::Gesture >(arena);
}
template<> PROTOBUF_NOINLINE ::kepler_clarifai::Activity* Arena::CreateMaybeMessage< ::kepler_clarifai::Activity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kepler_clarifai::Activity >(arena);
}
template<> PROTOBUF_NOINLINE ::kepler_clarifai::Frame* Arena::CreateMaybeMessage< ::kepler_clarifai::Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kepler_clarifai::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::kepler_clarifai::FrameBundle* Arena::CreateMaybeMessage< ::kepler_clarifai::FrameBundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kepler_clarifai::FrameBundle >(arena);
}
template<> PROTOBUF_NOINLINE ::kepler_clarifai::Status* Arena::CreateMaybeMessage< ::kepler_clarifai::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kepler_clarifai::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::kepler_clarifai::Sku* Arena::CreateMaybeMessage< ::kepler_clarifai::Sku >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kepler_clarifai::Sku >(arena);
}
template<> PROTOBUF_NOINLINE ::kepler_clarifai::Product* Arena::CreateMaybeMessage< ::kepler_clarifai::Product >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kepler_clarifai::Product >(arena);
}
template<> PROTOBUF_NOINLINE ::kepler_clarifai::Region* Arena::CreateMaybeMessage< ::kepler_clarifai::Region >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kepler_clarifai::Region >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
