// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/blur/blur_extent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fblur_2fblur_5fextent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fblur_2fblur_5fextent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/blur_result.pb.h"
#include "proto/utils/databatch.pb.h"
#include "proto/utils/request_meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fblur_2fblur_5fextent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fblur_2fblur_5fextent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fblur_2fblur_5fextent_2eproto;
class BlurDetectRequest;
class BlurDetectRequestDefaultTypeInternal;
extern BlurDetectRequestDefaultTypeInternal _BlurDetectRequest_default_instance_;
class BlurDetectResponse;
class BlurDetectResponseDefaultTypeInternal;
extern BlurDetectResponseDefaultTypeInternal _BlurDetectResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BlurDetectRequest* Arena::CreateMaybeMessage<::BlurDetectRequest>(Arena*);
template<> ::BlurDetectResponse* Arena::CreateMaybeMessage<::BlurDetectResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class BlurDetectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlurDetectRequest) */ {
 public:
  inline BlurDetectRequest() : BlurDetectRequest(nullptr) {}
  virtual ~BlurDetectRequest();

  BlurDetectRequest(const BlurDetectRequest& from);
  BlurDetectRequest(BlurDetectRequest&& from) noexcept
    : BlurDetectRequest() {
    *this = ::std::move(from);
  }

  inline BlurDetectRequest& operator=(const BlurDetectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlurDetectRequest& operator=(BlurDetectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlurDetectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlurDetectRequest* internal_default_instance() {
    return reinterpret_cast<const BlurDetectRequest*>(
               &_BlurDetectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlurDetectRequest& a, BlurDetectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlurDetectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlurDetectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlurDetectRequest* New() const final {
    return CreateMaybeMessage<BlurDetectRequest>(nullptr);
  }

  BlurDetectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlurDetectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlurDetectRequest& from);
  void MergeFrom(const BlurDetectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlurDetectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlurDetectRequest";
  }
  protected:
  explicit BlurDetectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fblur_2fblur_5fextent_2eproto);
    return ::descriptor_table_proto_2fblur_2fblur_5fextent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .DataBatch data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DataBatch& data() const;
  ::DataBatch* release_data();
  ::DataBatch* mutable_data();
  void set_allocated_data(::DataBatch* data);
  private:
  const ::DataBatch& _internal_data() const;
  ::DataBatch* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DataBatch* data);
  ::DataBatch* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:BlurDetectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::RequestMeta* meta_;
  ::DataBatch* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fblur_2fblur_5fextent_2eproto;
};
// -------------------------------------------------------------------

class BlurDetectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlurDetectResponse) */ {
 public:
  inline BlurDetectResponse() : BlurDetectResponse(nullptr) {}
  virtual ~BlurDetectResponse();

  BlurDetectResponse(const BlurDetectResponse& from);
  BlurDetectResponse(BlurDetectResponse&& from) noexcept
    : BlurDetectResponse() {
    *this = ::std::move(from);
  }

  inline BlurDetectResponse& operator=(const BlurDetectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlurDetectResponse& operator=(BlurDetectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlurDetectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlurDetectResponse* internal_default_instance() {
    return reinterpret_cast<const BlurDetectResponse*>(
               &_BlurDetectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlurDetectResponse& a, BlurDetectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BlurDetectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlurDetectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlurDetectResponse* New() const final {
    return CreateMaybeMessage<BlurDetectResponse>(nullptr);
  }

  BlurDetectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlurDetectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlurDetectResponse& from);
  void MergeFrom(const BlurDetectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlurDetectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlurDetectResponse";
  }
  protected:
  explicit BlurDetectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fblur_2fblur_5fextent_2eproto);
    return ::descriptor_table_proto_2fblur_2fblur_5fextent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kStatusFieldNumber = 1,
    kResultsFieldNumber = 3,
  };
  // repeated .BlurResult result = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_result();
  PROTOBUF_DEPRECATED ::BlurResult* mutable_result(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlurResult >*
      mutable_result();
  private:
  const ::BlurResult& _internal_result(int index) const;
  ::BlurResult* _internal_add_result();
  public:
  PROTOBUF_DEPRECATED const ::BlurResult& result(int index) const;
  PROTOBUF_DEPRECATED ::BlurResult* add_result();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlurResult >&
      result() const;

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // .DataBatch results = 3;
  bool has_results() const;
  private:
  bool _internal_has_results() const;
  public:
  void clear_results();
  const ::DataBatch& results() const;
  ::DataBatch* release_results();
  ::DataBatch* mutable_results();
  void set_allocated_results(::DataBatch* results);
  private:
  const ::DataBatch& _internal_results() const;
  ::DataBatch* _internal_mutable_results();
  public:
  void unsafe_arena_set_allocated_results(
      ::DataBatch* results);
  ::DataBatch* unsafe_arena_release_results();

  // @@protoc_insertion_point(class_scope:BlurDetectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlurResult > result_;
  ::ResponseStatus* status_;
  ::DataBatch* results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fblur_2fblur_5fextent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlurDetectRequest

// .RequestMeta meta = 1;
inline bool BlurDetectRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool BlurDetectRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& BlurDetectRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& BlurDetectRequest::meta() const {
  // @@protoc_insertion_point(field_get:BlurDetectRequest.meta)
  return _internal_meta();
}
inline void BlurDetectRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BlurDetectRequest.meta)
}
inline ::RequestMeta* BlurDetectRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* BlurDetectRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:BlurDetectRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* BlurDetectRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* BlurDetectRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:BlurDetectRequest.meta)
  return _internal_mutable_meta();
}
inline void BlurDetectRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:BlurDetectRequest.meta)
}

// .DataBatch data = 2;
inline bool BlurDetectRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool BlurDetectRequest::has_data() const {
  return _internal_has_data();
}
inline const ::DataBatch& BlurDetectRequest::_internal_data() const {
  const ::DataBatch* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& BlurDetectRequest::data() const {
  // @@protoc_insertion_point(field_get:BlurDetectRequest.data)
  return _internal_data();
}
inline void BlurDetectRequest::unsafe_arena_set_allocated_data(
    ::DataBatch* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BlurDetectRequest.data)
}
inline ::DataBatch* BlurDetectRequest::release_data() {
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* BlurDetectRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:BlurDetectRequest.data)
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DataBatch* BlurDetectRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::DataBatch* BlurDetectRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:BlurDetectRequest.data)
  return _internal_mutable_data();
}
inline void BlurDetectRequest::set_allocated_data(::DataBatch* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:BlurDetectRequest.data)
}

// -------------------------------------------------------------------

// BlurDetectResponse

// .ResponseStatus status = 1;
inline bool BlurDetectResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BlurDetectResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& BlurDetectResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& BlurDetectResponse::status() const {
  // @@protoc_insertion_point(field_get:BlurDetectResponse.status)
  return _internal_status();
}
inline void BlurDetectResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BlurDetectResponse.status)
}
inline ::ResponseStatus* BlurDetectResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* BlurDetectResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:BlurDetectResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* BlurDetectResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* BlurDetectResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:BlurDetectResponse.status)
  return _internal_mutable_status();
}
inline void BlurDetectResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:BlurDetectResponse.status)
}

// repeated .BlurResult result = 2 [deprecated = true];
inline int BlurDetectResponse::_internal_result_size() const {
  return result_.size();
}
inline int BlurDetectResponse::result_size() const {
  return _internal_result_size();
}
inline ::BlurResult* BlurDetectResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:BlurDetectResponse.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlurResult >*
BlurDetectResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:BlurDetectResponse.result)
  return &result_;
}
inline const ::BlurResult& BlurDetectResponse::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::BlurResult& BlurDetectResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:BlurDetectResponse.result)
  return _internal_result(index);
}
inline ::BlurResult* BlurDetectResponse::_internal_add_result() {
  return result_.Add();
}
inline ::BlurResult* BlurDetectResponse::add_result() {
  // @@protoc_insertion_point(field_add:BlurDetectResponse.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlurResult >&
BlurDetectResponse::result() const {
  // @@protoc_insertion_point(field_list:BlurDetectResponse.result)
  return result_;
}

// .DataBatch results = 3;
inline bool BlurDetectResponse::_internal_has_results() const {
  return this != internal_default_instance() && results_ != nullptr;
}
inline bool BlurDetectResponse::has_results() const {
  return _internal_has_results();
}
inline const ::DataBatch& BlurDetectResponse::_internal_results() const {
  const ::DataBatch* p = results_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& BlurDetectResponse::results() const {
  // @@protoc_insertion_point(field_get:BlurDetectResponse.results)
  return _internal_results();
}
inline void BlurDetectResponse::unsafe_arena_set_allocated_results(
    ::DataBatch* results) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_);
  }
  results_ = results;
  if (results) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BlurDetectResponse.results)
}
inline ::DataBatch* BlurDetectResponse::release_results() {
  
  ::DataBatch* temp = results_;
  results_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* BlurDetectResponse::unsafe_arena_release_results() {
  // @@protoc_insertion_point(field_release:BlurDetectResponse.results)
  
  ::DataBatch* temp = results_;
  results_ = nullptr;
  return temp;
}
inline ::DataBatch* BlurDetectResponse::_internal_mutable_results() {
  
  if (results_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    results_ = p;
  }
  return results_;
}
inline ::DataBatch* BlurDetectResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable:BlurDetectResponse.results)
  return _internal_mutable_results();
}
inline void BlurDetectResponse::set_allocated_results(::DataBatch* results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_);
  }
  if (results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(results)->GetArena();
    if (message_arena != submessage_arena) {
      results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, results, submessage_arena);
    }
    
  } else {
    
  }
  results_ = results;
  // @@protoc_insertion_point(field_set_allocated:BlurDetectResponse.results)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fblur_2fblur_5fextent_2eproto
