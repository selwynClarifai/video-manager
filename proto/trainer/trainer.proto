syntax = "proto3";

import "proto/clarifai/api/resources.proto";
import "proto/evaluation/evaluation.proto";
import "proto/predictor/predictor_metrics.proto";
import "proto/utils/request_meta.proto";
import "google/protobuf/timestamp.proto";

option go_package = "trainer";

// Interface exported by the server.
service TrainingCoordinator {
  // Train a model
  rpc Train (TrainRequest) returns (TrainResponse) {}

  // Get status of training job
  rpc GetStatus (GetStatusRequest) returns (GetStatusResponse) {}

  // Get evaluation metrics for the training job
  rpc GetEvaluations (GetEvaluationsRequest) returns (GetEvaluationsResponse) {}

  // List training templates and doc strings
  rpc ListTemplates (ListTemplatesRequest) returns (ListTemplatesResponse) {}

  // Get spire name
  rpc GetSpireConfig (GetSpireConfigRequest) returns (GetSpireConfigResponse) {}

  // Cleanup files no longer needed
  rpc EidCleanUp (EidCleanUpRequest) returns (EidCleanUpResponse) {}
}

// specifying data to use
message DatasetLocation {
  enum Type {
    INVALID = 0;
    USER_APP = 1; // from app specified by user and app id
    DATASETS_YAML = 2; // dataset in datasets.yaml (for dev/debug on colo)
    //DATASET_DIR = 3;  // TODO
    //INLINE_DATABATCH = 4; // TODO
  }

  // Where the dataset is stored
  Type type = 1;

  // USER_APP type
  string api_key = 2;
  string api_url = 3; // url to access the api (for development); defaults to https://api.clarifai.com
  string data_bulk_url = 4;
  string model_id = 5; // model with vocab
  int32 test_split_percent = 6; // 0..100 value for test split percentage based on image url

  // Use this to filter inputs that are used in training
  clarifai.api.Search data_dump_search = 7;

  // DATASETS_YAML type
  string dataset_name = 10;

  // dataset_dir location type
  //string dataset_dir = 20;

  // INLINE_DATABATCH type
  //DataBatch databatch = 30;
}

// Train

message TrainRequest {
  // Data to help with logging requests and marking error.
  RequestMeta meta = 1;
  // TODO should we allow specifying an eid here?  for now, always use a new eid
  //string eid = 2;
  // Data location
  DatasetLocation data = 3;
  // Training setup name to supply defaults based on the dataset
  string template_name = 4;
  // Setup arguments and explicit config from user, replacing any config generated by the template.
  string hyper_parameters = 5;
}

message TrainResponse {
  // Status for the request.
  ResponseStatus status = 1;
  // Eid assigned for this job
  string eid = 2;
}

// GetStatus

message GetStatusRequest {
  // Data to help with logging requests and marking error.
  RequestMeta meta = 1;
  // Eid of model
  string eid = 2;
}

message GetStatusResponse {
  // Status for the GetStatus rpc request.
  ResponseStatus status = 1;

  // Status of data retrieval
  ResponseStatus data_fetch_status = 2;
  // Status of the training job
  ResponseStatus train_status = 3;
  // Progress status of last updated status ^
  ProgressStatus progress_status = 4;
  // Status of the eval job
  ResponseStatus eval_status = 5;
  // Time any state was last updated
  google.protobuf.Timestamp status_modified_at = 10;
}

// GetEvaluations

message GetEvaluationsRequest {
  // Data to help with logging requests and marking error.
  RequestMeta meta = 1;
  // Eid of training job
  string eid = 2;
}

message GetEvaluationsResponse {
  // Status for the request.
  ResponseStatus status = 1;

  map<string, EvaluationResult> evaluations = 2;
}

// ListTemplates

message TrainingTemplate {
  string name = 1;
  string default_args_json = 2;
  string doc_string = 3;
  string model_type = 4;
}

message ListTemplatesRequest {
  // Data to help with logging requests and marking error.
  RequestMeta meta = 1;
}

message ListTemplatesResponse {
  // Status for the ListTemplates rpc request.
  ResponseStatus status = 1;

  repeated TrainingTemplate templates = 2;
}

// eid - the eid of the trained model
message GetSpireConfigRequest {
  RequestMeta meta = 1;
  string eid = 2;
}
/*
  status - will be success if the spire_config.proto is found for the eid given, otherwise it will be failure
  spire_name - the name of the trained spire, usually in the form of eid_cropType
  spire_config_location - the location of the spire config proto written for the trained model, used to start up the spire. It contains the data provider params, vocab, resource requests, and other information needed for inference.
  checkpoint_root - the root location for checkpoints. For example: s3://clarifai-ecp3 contains checkpoints. See utils/defaults.py to see other locations that the CHECKPOINT_ROOT can be.
*/
message GetSpireConfigResponse {
  ResponseStatus status = 1;
  string spire_name = 2;
  string spire_config_location = 3;
  string checkpoint_root = 4;
}

/*
  Clean up files related to an eid
  delete-checkpoint - whether you want to delete the checkpoint files
*/
message EidCleanUpRequest {
  RequestMeta meta = 1;
  string eid = 2;
  bool delete_checkpoint_folder = 3;
  bool delete_cached_data = 4;
}

message EidCleanUpResponse {
  ResponseStatus status = 1;
}
