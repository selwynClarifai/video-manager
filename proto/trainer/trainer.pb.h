// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/trainer/trainer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2ftrainer_2ftrainer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2ftrainer_2ftrainer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/clarifai/api/resources.pb.h"
#include "proto/evaluation/evaluation.pb.h"
#include "proto/predictor/predictor_metrics.pb.h"
#include "proto/utils/request_meta.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2ftrainer_2ftrainer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ftrainer_2ftrainer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ftrainer_2ftrainer_2eproto;
class DatasetLocation;
class DatasetLocationDefaultTypeInternal;
extern DatasetLocationDefaultTypeInternal _DatasetLocation_default_instance_;
class EidCleanUpRequest;
class EidCleanUpRequestDefaultTypeInternal;
extern EidCleanUpRequestDefaultTypeInternal _EidCleanUpRequest_default_instance_;
class EidCleanUpResponse;
class EidCleanUpResponseDefaultTypeInternal;
extern EidCleanUpResponseDefaultTypeInternal _EidCleanUpResponse_default_instance_;
class GetEvaluationsRequest;
class GetEvaluationsRequestDefaultTypeInternal;
extern GetEvaluationsRequestDefaultTypeInternal _GetEvaluationsRequest_default_instance_;
class GetEvaluationsResponse;
class GetEvaluationsResponseDefaultTypeInternal;
extern GetEvaluationsResponseDefaultTypeInternal _GetEvaluationsResponse_default_instance_;
class GetEvaluationsResponse_EvaluationsEntry_DoNotUse;
class GetEvaluationsResponse_EvaluationsEntry_DoNotUseDefaultTypeInternal;
extern GetEvaluationsResponse_EvaluationsEntry_DoNotUseDefaultTypeInternal _GetEvaluationsResponse_EvaluationsEntry_DoNotUse_default_instance_;
class GetSpireConfigRequest;
class GetSpireConfigRequestDefaultTypeInternal;
extern GetSpireConfigRequestDefaultTypeInternal _GetSpireConfigRequest_default_instance_;
class GetSpireConfigResponse;
class GetSpireConfigResponseDefaultTypeInternal;
extern GetSpireConfigResponseDefaultTypeInternal _GetSpireConfigResponse_default_instance_;
class GetStatusRequest;
class GetStatusRequestDefaultTypeInternal;
extern GetStatusRequestDefaultTypeInternal _GetStatusRequest_default_instance_;
class GetStatusResponse;
class GetStatusResponseDefaultTypeInternal;
extern GetStatusResponseDefaultTypeInternal _GetStatusResponse_default_instance_;
class ListTemplatesRequest;
class ListTemplatesRequestDefaultTypeInternal;
extern ListTemplatesRequestDefaultTypeInternal _ListTemplatesRequest_default_instance_;
class ListTemplatesResponse;
class ListTemplatesResponseDefaultTypeInternal;
extern ListTemplatesResponseDefaultTypeInternal _ListTemplatesResponse_default_instance_;
class TrainRequest;
class TrainRequestDefaultTypeInternal;
extern TrainRequestDefaultTypeInternal _TrainRequest_default_instance_;
class TrainResponse;
class TrainResponseDefaultTypeInternal;
extern TrainResponseDefaultTypeInternal _TrainResponse_default_instance_;
class TrainingTemplate;
class TrainingTemplateDefaultTypeInternal;
extern TrainingTemplateDefaultTypeInternal _TrainingTemplate_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DatasetLocation* Arena::CreateMaybeMessage<::DatasetLocation>(Arena*);
template<> ::EidCleanUpRequest* Arena::CreateMaybeMessage<::EidCleanUpRequest>(Arena*);
template<> ::EidCleanUpResponse* Arena::CreateMaybeMessage<::EidCleanUpResponse>(Arena*);
template<> ::GetEvaluationsRequest* Arena::CreateMaybeMessage<::GetEvaluationsRequest>(Arena*);
template<> ::GetEvaluationsResponse* Arena::CreateMaybeMessage<::GetEvaluationsResponse>(Arena*);
template<> ::GetEvaluationsResponse_EvaluationsEntry_DoNotUse* Arena::CreateMaybeMessage<::GetEvaluationsResponse_EvaluationsEntry_DoNotUse>(Arena*);
template<> ::GetSpireConfigRequest* Arena::CreateMaybeMessage<::GetSpireConfigRequest>(Arena*);
template<> ::GetSpireConfigResponse* Arena::CreateMaybeMessage<::GetSpireConfigResponse>(Arena*);
template<> ::GetStatusRequest* Arena::CreateMaybeMessage<::GetStatusRequest>(Arena*);
template<> ::GetStatusResponse* Arena::CreateMaybeMessage<::GetStatusResponse>(Arena*);
template<> ::ListTemplatesRequest* Arena::CreateMaybeMessage<::ListTemplatesRequest>(Arena*);
template<> ::ListTemplatesResponse* Arena::CreateMaybeMessage<::ListTemplatesResponse>(Arena*);
template<> ::TrainRequest* Arena::CreateMaybeMessage<::TrainRequest>(Arena*);
template<> ::TrainResponse* Arena::CreateMaybeMessage<::TrainResponse>(Arena*);
template<> ::TrainingTemplate* Arena::CreateMaybeMessage<::TrainingTemplate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum DatasetLocation_Type : int {
  DatasetLocation_Type_INVALID = 0,
  DatasetLocation_Type_USER_APP = 1,
  DatasetLocation_Type_DATASETS_YAML = 2,
  DatasetLocation_Type_DatasetLocation_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DatasetLocation_Type_DatasetLocation_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DatasetLocation_Type_IsValid(int value);
constexpr DatasetLocation_Type DatasetLocation_Type_Type_MIN = DatasetLocation_Type_INVALID;
constexpr DatasetLocation_Type DatasetLocation_Type_Type_MAX = DatasetLocation_Type_DATASETS_YAML;
constexpr int DatasetLocation_Type_Type_ARRAYSIZE = DatasetLocation_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatasetLocation_Type_descriptor();
template<typename T>
inline const std::string& DatasetLocation_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DatasetLocation_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DatasetLocation_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DatasetLocation_Type_descriptor(), enum_t_value);
}
inline bool DatasetLocation_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DatasetLocation_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DatasetLocation_Type>(
    DatasetLocation_Type_descriptor(), name, value);
}
// ===================================================================

class DatasetLocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DatasetLocation) */ {
 public:
  inline DatasetLocation() : DatasetLocation(nullptr) {}
  virtual ~DatasetLocation();

  DatasetLocation(const DatasetLocation& from);
  DatasetLocation(DatasetLocation&& from) noexcept
    : DatasetLocation() {
    *this = ::std::move(from);
  }

  inline DatasetLocation& operator=(const DatasetLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetLocation& operator=(DatasetLocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DatasetLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatasetLocation* internal_default_instance() {
    return reinterpret_cast<const DatasetLocation*>(
               &_DatasetLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DatasetLocation& a, DatasetLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(DatasetLocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatasetLocation* New() const final {
    return CreateMaybeMessage<DatasetLocation>(nullptr);
  }

  DatasetLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatasetLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DatasetLocation& from);
  void MergeFrom(const DatasetLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatasetLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DatasetLocation";
  }
  protected:
  explicit DatasetLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftrainer_2ftrainer_2eproto);
    return ::descriptor_table_proto_2ftrainer_2ftrainer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DatasetLocation_Type Type;
  static constexpr Type INVALID =
    DatasetLocation_Type_INVALID;
  static constexpr Type USER_APP =
    DatasetLocation_Type_USER_APP;
  static constexpr Type DATASETS_YAML =
    DatasetLocation_Type_DATASETS_YAML;
  static inline bool Type_IsValid(int value) {
    return DatasetLocation_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    DatasetLocation_Type_Type_MIN;
  static constexpr Type Type_MAX =
    DatasetLocation_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    DatasetLocation_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return DatasetLocation_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return DatasetLocation_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return DatasetLocation_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kApiKeyFieldNumber = 2,
    kApiUrlFieldNumber = 3,
    kDataBulkUrlFieldNumber = 4,
    kModelIdFieldNumber = 5,
    kDatasetNameFieldNumber = 10,
    kDataDumpSearchFieldNumber = 7,
    kTypeFieldNumber = 1,
    kTestSplitPercentFieldNumber = 6,
  };
  // string api_key = 2;
  void clear_api_key();
  const std::string& api_key() const;
  void set_api_key(const std::string& value);
  void set_api_key(std::string&& value);
  void set_api_key(const char* value);
  void set_api_key(const char* value, size_t size);
  std::string* mutable_api_key();
  std::string* release_api_key();
  void set_allocated_api_key(std::string* api_key);
  private:
  const std::string& _internal_api_key() const;
  void _internal_set_api_key(const std::string& value);
  std::string* _internal_mutable_api_key();
  public:

  // string api_url = 3;
  void clear_api_url();
  const std::string& api_url() const;
  void set_api_url(const std::string& value);
  void set_api_url(std::string&& value);
  void set_api_url(const char* value);
  void set_api_url(const char* value, size_t size);
  std::string* mutable_api_url();
  std::string* release_api_url();
  void set_allocated_api_url(std::string* api_url);
  private:
  const std::string& _internal_api_url() const;
  void _internal_set_api_url(const std::string& value);
  std::string* _internal_mutable_api_url();
  public:

  // string data_bulk_url = 4;
  void clear_data_bulk_url();
  const std::string& data_bulk_url() const;
  void set_data_bulk_url(const std::string& value);
  void set_data_bulk_url(std::string&& value);
  void set_data_bulk_url(const char* value);
  void set_data_bulk_url(const char* value, size_t size);
  std::string* mutable_data_bulk_url();
  std::string* release_data_bulk_url();
  void set_allocated_data_bulk_url(std::string* data_bulk_url);
  private:
  const std::string& _internal_data_bulk_url() const;
  void _internal_set_data_bulk_url(const std::string& value);
  std::string* _internal_mutable_data_bulk_url();
  public:

  // string model_id = 5;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string dataset_name = 10;
  void clear_dataset_name();
  const std::string& dataset_name() const;
  void set_dataset_name(const std::string& value);
  void set_dataset_name(std::string&& value);
  void set_dataset_name(const char* value);
  void set_dataset_name(const char* value, size_t size);
  std::string* mutable_dataset_name();
  std::string* release_dataset_name();
  void set_allocated_dataset_name(std::string* dataset_name);
  private:
  const std::string& _internal_dataset_name() const;
  void _internal_set_dataset_name(const std::string& value);
  std::string* _internal_mutable_dataset_name();
  public:

  // .clarifai.api.Search data_dump_search = 7;
  bool has_data_dump_search() const;
  private:
  bool _internal_has_data_dump_search() const;
  public:
  void clear_data_dump_search();
  const ::clarifai::api::Search& data_dump_search() const;
  ::clarifai::api::Search* release_data_dump_search();
  ::clarifai::api::Search* mutable_data_dump_search();
  void set_allocated_data_dump_search(::clarifai::api::Search* data_dump_search);
  private:
  const ::clarifai::api::Search& _internal_data_dump_search() const;
  ::clarifai::api::Search* _internal_mutable_data_dump_search();
  public:
  void unsafe_arena_set_allocated_data_dump_search(
      ::clarifai::api::Search* data_dump_search);
  ::clarifai::api::Search* unsafe_arena_release_data_dump_search();

  // .DatasetLocation.Type type = 1;
  void clear_type();
  ::DatasetLocation_Type type() const;
  void set_type(::DatasetLocation_Type value);
  private:
  ::DatasetLocation_Type _internal_type() const;
  void _internal_set_type(::DatasetLocation_Type value);
  public:

  // int32 test_split_percent = 6;
  void clear_test_split_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 test_split_percent() const;
  void set_test_split_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test_split_percent() const;
  void _internal_set_test_split_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DatasetLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_bulk_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_name_;
  ::clarifai::api::Search* data_dump_search_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_split_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftrainer_2ftrainer_2eproto;
};
// -------------------------------------------------------------------

class TrainRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrainRequest) */ {
 public:
  inline TrainRequest() : TrainRequest(nullptr) {}
  virtual ~TrainRequest();

  TrainRequest(const TrainRequest& from);
  TrainRequest(TrainRequest&& from) noexcept
    : TrainRequest() {
    *this = ::std::move(from);
  }

  inline TrainRequest& operator=(const TrainRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainRequest& operator=(TrainRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainRequest* internal_default_instance() {
    return reinterpret_cast<const TrainRequest*>(
               &_TrainRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrainRequest& a, TrainRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainRequest* New() const final {
    return CreateMaybeMessage<TrainRequest>(nullptr);
  }

  TrainRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainRequest& from);
  void MergeFrom(const TrainRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrainRequest";
  }
  protected:
  explicit TrainRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftrainer_2ftrainer_2eproto);
    return ::descriptor_table_proto_2ftrainer_2ftrainer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplateNameFieldNumber = 4,
    kHyperParametersFieldNumber = 5,
    kMetaFieldNumber = 1,
    kDataFieldNumber = 3,
  };
  // string template_name = 4;
  void clear_template_name();
  const std::string& template_name() const;
  void set_template_name(const std::string& value);
  void set_template_name(std::string&& value);
  void set_template_name(const char* value);
  void set_template_name(const char* value, size_t size);
  std::string* mutable_template_name();
  std::string* release_template_name();
  void set_allocated_template_name(std::string* template_name);
  private:
  const std::string& _internal_template_name() const;
  void _internal_set_template_name(const std::string& value);
  std::string* _internal_mutable_template_name();
  public:

  // string hyper_parameters = 5;
  void clear_hyper_parameters();
  const std::string& hyper_parameters() const;
  void set_hyper_parameters(const std::string& value);
  void set_hyper_parameters(std::string&& value);
  void set_hyper_parameters(const char* value);
  void set_hyper_parameters(const char* value, size_t size);
  std::string* mutable_hyper_parameters();
  std::string* release_hyper_parameters();
  void set_allocated_hyper_parameters(std::string* hyper_parameters);
  private:
  const std::string& _internal_hyper_parameters() const;
  void _internal_set_hyper_parameters(const std::string& value);
  std::string* _internal_mutable_hyper_parameters();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .DatasetLocation data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DatasetLocation& data() const;
  ::DatasetLocation* release_data();
  ::DatasetLocation* mutable_data();
  void set_allocated_data(::DatasetLocation* data);
  private:
  const ::DatasetLocation& _internal_data() const;
  ::DatasetLocation* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DatasetLocation* data);
  ::DatasetLocation* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:TrainRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hyper_parameters_;
  ::RequestMeta* meta_;
  ::DatasetLocation* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftrainer_2ftrainer_2eproto;
};
// -------------------------------------------------------------------

class TrainResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrainResponse) */ {
 public:
  inline TrainResponse() : TrainResponse(nullptr) {}
  virtual ~TrainResponse();

  TrainResponse(const TrainResponse& from);
  TrainResponse(TrainResponse&& from) noexcept
    : TrainResponse() {
    *this = ::std::move(from);
  }

  inline TrainResponse& operator=(const TrainResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainResponse& operator=(TrainResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainResponse* internal_default_instance() {
    return reinterpret_cast<const TrainResponse*>(
               &_TrainResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrainResponse& a, TrainResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainResponse* New() const final {
    return CreateMaybeMessage<TrainResponse>(nullptr);
  }

  TrainResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainResponse& from);
  void MergeFrom(const TrainResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrainResponse";
  }
  protected:
  explicit TrainResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftrainer_2ftrainer_2eproto);
    return ::descriptor_table_proto_2ftrainer_2ftrainer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEidFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string eid = 2;
  void clear_eid();
  const std::string& eid() const;
  void set_eid(const std::string& value);
  void set_eid(std::string&& value);
  void set_eid(const char* value);
  void set_eid(const char* value, size_t size);
  std::string* mutable_eid();
  std::string* release_eid();
  void set_allocated_eid(std::string* eid);
  private:
  const std::string& _internal_eid() const;
  void _internal_set_eid(const std::string& value);
  std::string* _internal_mutable_eid();
  public:

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:TrainResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eid_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftrainer_2ftrainer_2eproto;
};
// -------------------------------------------------------------------

class GetStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetStatusRequest) */ {
 public:
  inline GetStatusRequest() : GetStatusRequest(nullptr) {}
  virtual ~GetStatusRequest();

  GetStatusRequest(const GetStatusRequest& from);
  GetStatusRequest(GetStatusRequest&& from) noexcept
    : GetStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetStatusRequest& operator=(const GetStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusRequest& operator=(GetStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetStatusRequest*>(
               &_GetStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetStatusRequest& a, GetStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStatusRequest* New() const final {
    return CreateMaybeMessage<GetStatusRequest>(nullptr);
  }

  GetStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStatusRequest& from);
  void MergeFrom(const GetStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetStatusRequest";
  }
  protected:
  explicit GetStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftrainer_2ftrainer_2eproto);
    return ::descriptor_table_proto_2ftrainer_2ftrainer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEidFieldNumber = 2,
    kMetaFieldNumber = 1,
  };
  // string eid = 2;
  void clear_eid();
  const std::string& eid() const;
  void set_eid(const std::string& value);
  void set_eid(std::string&& value);
  void set_eid(const char* value);
  void set_eid(const char* value, size_t size);
  std::string* mutable_eid();
  std::string* release_eid();
  void set_allocated_eid(std::string* eid);
  private:
  const std::string& _internal_eid() const;
  void _internal_set_eid(const std::string& value);
  std::string* _internal_mutable_eid();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:GetStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eid_;
  ::RequestMeta* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftrainer_2ftrainer_2eproto;
};
// -------------------------------------------------------------------

class GetStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetStatusResponse) */ {
 public:
  inline GetStatusResponse() : GetStatusResponse(nullptr) {}
  virtual ~GetStatusResponse();

  GetStatusResponse(const GetStatusResponse& from);
  GetStatusResponse(GetStatusResponse&& from) noexcept
    : GetStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetStatusResponse& operator=(const GetStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusResponse& operator=(GetStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetStatusResponse*>(
               &_GetStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetStatusResponse& a, GetStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStatusResponse* New() const final {
    return CreateMaybeMessage<GetStatusResponse>(nullptr);
  }

  GetStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStatusResponse& from);
  void MergeFrom(const GetStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetStatusResponse";
  }
  protected:
  explicit GetStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftrainer_2ftrainer_2eproto);
    return ::descriptor_table_proto_2ftrainer_2ftrainer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFetchStatusFieldNumber = 2,
    kTrainStatusFieldNumber = 3,
    kProgressStatusFieldNumber = 4,
    kEvalStatusFieldNumber = 5,
    kStatusModifiedAtFieldNumber = 10,
  };
  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // .ResponseStatus data_fetch_status = 2;
  bool has_data_fetch_status() const;
  private:
  bool _internal_has_data_fetch_status() const;
  public:
  void clear_data_fetch_status();
  const ::ResponseStatus& data_fetch_status() const;
  ::ResponseStatus* release_data_fetch_status();
  ::ResponseStatus* mutable_data_fetch_status();
  void set_allocated_data_fetch_status(::ResponseStatus* data_fetch_status);
  private:
  const ::ResponseStatus& _internal_data_fetch_status() const;
  ::ResponseStatus* _internal_mutable_data_fetch_status();
  public:
  void unsafe_arena_set_allocated_data_fetch_status(
      ::ResponseStatus* data_fetch_status);
  ::ResponseStatus* unsafe_arena_release_data_fetch_status();

  // .ResponseStatus train_status = 3;
  bool has_train_status() const;
  private:
  bool _internal_has_train_status() const;
  public:
  void clear_train_status();
  const ::ResponseStatus& train_status() const;
  ::ResponseStatus* release_train_status();
  ::ResponseStatus* mutable_train_status();
  void set_allocated_train_status(::ResponseStatus* train_status);
  private:
  const ::ResponseStatus& _internal_train_status() const;
  ::ResponseStatus* _internal_mutable_train_status();
  public:
  void unsafe_arena_set_allocated_train_status(
      ::ResponseStatus* train_status);
  ::ResponseStatus* unsafe_arena_release_train_status();

  // .ProgressStatus progress_status = 4;
  bool has_progress_status() const;
  private:
  bool _internal_has_progress_status() const;
  public:
  void clear_progress_status();
  const ::ProgressStatus& progress_status() const;
  ::ProgressStatus* release_progress_status();
  ::ProgressStatus* mutable_progress_status();
  void set_allocated_progress_status(::ProgressStatus* progress_status);
  private:
  const ::ProgressStatus& _internal_progress_status() const;
  ::ProgressStatus* _internal_mutable_progress_status();
  public:
  void unsafe_arena_set_allocated_progress_status(
      ::ProgressStatus* progress_status);
  ::ProgressStatus* unsafe_arena_release_progress_status();

  // .ResponseStatus eval_status = 5;
  bool has_eval_status() const;
  private:
  bool _internal_has_eval_status() const;
  public:
  void clear_eval_status();
  const ::ResponseStatus& eval_status() const;
  ::ResponseStatus* release_eval_status();
  ::ResponseStatus* mutable_eval_status();
  void set_allocated_eval_status(::ResponseStatus* eval_status);
  private:
  const ::ResponseStatus& _internal_eval_status() const;
  ::ResponseStatus* _internal_mutable_eval_status();
  public:
  void unsafe_arena_set_allocated_eval_status(
      ::ResponseStatus* eval_status);
  ::ResponseStatus* unsafe_arena_release_eval_status();

  // .google.protobuf.Timestamp status_modified_at = 10;
  bool has_status_modified_at() const;
  private:
  bool _internal_has_status_modified_at() const;
  public:
  void clear_status_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& status_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_status_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_status_modified_at();
  void set_allocated_status_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* status_modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_status_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_status_modified_at();
  public:
  void unsafe_arena_set_allocated_status_modified_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* status_modified_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_status_modified_at();

  // @@protoc_insertion_point(class_scope:GetStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ResponseStatus* status_;
  ::ResponseStatus* data_fetch_status_;
  ::ResponseStatus* train_status_;
  ::ProgressStatus* progress_status_;
  ::ResponseStatus* eval_status_;
  PROTOBUF_NAMESPACE_ID::Timestamp* status_modified_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftrainer_2ftrainer_2eproto;
};
// -------------------------------------------------------------------

class GetEvaluationsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetEvaluationsRequest) */ {
 public:
  inline GetEvaluationsRequest() : GetEvaluationsRequest(nullptr) {}
  virtual ~GetEvaluationsRequest();

  GetEvaluationsRequest(const GetEvaluationsRequest& from);
  GetEvaluationsRequest(GetEvaluationsRequest&& from) noexcept
    : GetEvaluationsRequest() {
    *this = ::std::move(from);
  }

  inline GetEvaluationsRequest& operator=(const GetEvaluationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEvaluationsRequest& operator=(GetEvaluationsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEvaluationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEvaluationsRequest* internal_default_instance() {
    return reinterpret_cast<const GetEvaluationsRequest*>(
               &_GetEvaluationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetEvaluationsRequest& a, GetEvaluationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEvaluationsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEvaluationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEvaluationsRequest* New() const final {
    return CreateMaybeMessage<GetEvaluationsRequest>(nullptr);
  }

  GetEvaluationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEvaluationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEvaluationsRequest& from);
  void MergeFrom(const GetEvaluationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEvaluationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetEvaluationsRequest";
  }
  protected:
  explicit GetEvaluationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftrainer_2ftrainer_2eproto);
    return ::descriptor_table_proto_2ftrainer_2ftrainer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEidFieldNumber = 2,
    kMetaFieldNumber = 1,
  };
  // string eid = 2;
  void clear_eid();
  const std::string& eid() const;
  void set_eid(const std::string& value);
  void set_eid(std::string&& value);
  void set_eid(const char* value);
  void set_eid(const char* value, size_t size);
  std::string* mutable_eid();
  std::string* release_eid();
  void set_allocated_eid(std::string* eid);
  private:
  const std::string& _internal_eid() const;
  void _internal_set_eid(const std::string& value);
  std::string* _internal_mutable_eid();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:GetEvaluationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eid_;
  ::RequestMeta* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftrainer_2ftrainer_2eproto;
};
// -------------------------------------------------------------------

class GetEvaluationsResponse_EvaluationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetEvaluationsResponse_EvaluationsEntry_DoNotUse, 
    std::string, ::EvaluationResult,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetEvaluationsResponse_EvaluationsEntry_DoNotUse, 
    std::string, ::EvaluationResult,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GetEvaluationsResponse_EvaluationsEntry_DoNotUse();
  explicit GetEvaluationsResponse_EvaluationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetEvaluationsResponse_EvaluationsEntry_DoNotUse& other);
  static const GetEvaluationsResponse_EvaluationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetEvaluationsResponse_EvaluationsEntry_DoNotUse*>(&_GetEvaluationsResponse_EvaluationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "GetEvaluationsResponse.EvaluationsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftrainer_2ftrainer_2eproto);
    return ::descriptor_table_proto_2ftrainer_2ftrainer_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class GetEvaluationsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetEvaluationsResponse) */ {
 public:
  inline GetEvaluationsResponse() : GetEvaluationsResponse(nullptr) {}
  virtual ~GetEvaluationsResponse();

  GetEvaluationsResponse(const GetEvaluationsResponse& from);
  GetEvaluationsResponse(GetEvaluationsResponse&& from) noexcept
    : GetEvaluationsResponse() {
    *this = ::std::move(from);
  }

  inline GetEvaluationsResponse& operator=(const GetEvaluationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEvaluationsResponse& operator=(GetEvaluationsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEvaluationsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEvaluationsResponse* internal_default_instance() {
    return reinterpret_cast<const GetEvaluationsResponse*>(
               &_GetEvaluationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetEvaluationsResponse& a, GetEvaluationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEvaluationsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEvaluationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEvaluationsResponse* New() const final {
    return CreateMaybeMessage<GetEvaluationsResponse>(nullptr);
  }

  GetEvaluationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEvaluationsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEvaluationsResponse& from);
  void MergeFrom(const GetEvaluationsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEvaluationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetEvaluationsResponse";
  }
  protected:
  explicit GetEvaluationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftrainer_2ftrainer_2eproto);
    return ::descriptor_table_proto_2ftrainer_2ftrainer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEvaluationsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // map<string, .EvaluationResult> evaluations = 2;
  int evaluations_size() const;
  private:
  int _internal_evaluations_size() const;
  public:
  void clear_evaluations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EvaluationResult >&
      _internal_evaluations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EvaluationResult >*
      _internal_mutable_evaluations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EvaluationResult >&
      evaluations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EvaluationResult >*
      mutable_evaluations();

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:GetEvaluationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetEvaluationsResponse_EvaluationsEntry_DoNotUse,
      std::string, ::EvaluationResult,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > evaluations_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftrainer_2ftrainer_2eproto;
};
// -------------------------------------------------------------------

class TrainingTemplate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrainingTemplate) */ {
 public:
  inline TrainingTemplate() : TrainingTemplate(nullptr) {}
  virtual ~TrainingTemplate();

  TrainingTemplate(const TrainingTemplate& from);
  TrainingTemplate(TrainingTemplate&& from) noexcept
    : TrainingTemplate() {
    *this = ::std::move(from);
  }

  inline TrainingTemplate& operator=(const TrainingTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainingTemplate& operator=(TrainingTemplate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainingTemplate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainingTemplate* internal_default_instance() {
    return reinterpret_cast<const TrainingTemplate*>(
               &_TrainingTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TrainingTemplate& a, TrainingTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainingTemplate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainingTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainingTemplate* New() const final {
    return CreateMaybeMessage<TrainingTemplate>(nullptr);
  }

  TrainingTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainingTemplate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainingTemplate& from);
  void MergeFrom(const TrainingTemplate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainingTemplate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrainingTemplate";
  }
  protected:
  explicit TrainingTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftrainer_2ftrainer_2eproto);
    return ::descriptor_table_proto_2ftrainer_2ftrainer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDefaultArgsJsonFieldNumber = 2,
    kDocStringFieldNumber = 3,
    kModelTypeFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string default_args_json = 2;
  void clear_default_args_json();
  const std::string& default_args_json() const;
  void set_default_args_json(const std::string& value);
  void set_default_args_json(std::string&& value);
  void set_default_args_json(const char* value);
  void set_default_args_json(const char* value, size_t size);
  std::string* mutable_default_args_json();
  std::string* release_default_args_json();
  void set_allocated_default_args_json(std::string* default_args_json);
  private:
  const std::string& _internal_default_args_json() const;
  void _internal_set_default_args_json(const std::string& value);
  std::string* _internal_mutable_default_args_json();
  public:

  // string doc_string = 3;
  void clear_doc_string();
  const std::string& doc_string() const;
  void set_doc_string(const std::string& value);
  void set_doc_string(std::string&& value);
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  std::string* mutable_doc_string();
  std::string* release_doc_string();
  void set_allocated_doc_string(std::string* doc_string);
  private:
  const std::string& _internal_doc_string() const;
  void _internal_set_doc_string(const std::string& value);
  std::string* _internal_mutable_doc_string();
  public:

  // string model_type = 4;
  void clear_model_type();
  const std::string& model_type() const;
  void set_model_type(const std::string& value);
  void set_model_type(std::string&& value);
  void set_model_type(const char* value);
  void set_model_type(const char* value, size_t size);
  std::string* mutable_model_type();
  std::string* release_model_type();
  void set_allocated_model_type(std::string* model_type);
  private:
  const std::string& _internal_model_type() const;
  void _internal_set_model_type(const std::string& value);
  std::string* _internal_mutable_model_type();
  public:

  // @@protoc_insertion_point(class_scope:TrainingTemplate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_args_json_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftrainer_2ftrainer_2eproto;
};
// -------------------------------------------------------------------

class ListTemplatesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ListTemplatesRequest) */ {
 public:
  inline ListTemplatesRequest() : ListTemplatesRequest(nullptr) {}
  virtual ~ListTemplatesRequest();

  ListTemplatesRequest(const ListTemplatesRequest& from);
  ListTemplatesRequest(ListTemplatesRequest&& from) noexcept
    : ListTemplatesRequest() {
    *this = ::std::move(from);
  }

  inline ListTemplatesRequest& operator=(const ListTemplatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTemplatesRequest& operator=(ListTemplatesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTemplatesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTemplatesRequest* internal_default_instance() {
    return reinterpret_cast<const ListTemplatesRequest*>(
               &_ListTemplatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListTemplatesRequest& a, ListTemplatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTemplatesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTemplatesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTemplatesRequest* New() const final {
    return CreateMaybeMessage<ListTemplatesRequest>(nullptr);
  }

  ListTemplatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTemplatesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTemplatesRequest& from);
  void MergeFrom(const ListTemplatesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTemplatesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ListTemplatesRequest";
  }
  protected:
  explicit ListTemplatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftrainer_2ftrainer_2eproto);
    return ::descriptor_table_proto_2ftrainer_2ftrainer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
  };
  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:ListTemplatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::RequestMeta* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftrainer_2ftrainer_2eproto;
};
// -------------------------------------------------------------------

class ListTemplatesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ListTemplatesResponse) */ {
 public:
  inline ListTemplatesResponse() : ListTemplatesResponse(nullptr) {}
  virtual ~ListTemplatesResponse();

  ListTemplatesResponse(const ListTemplatesResponse& from);
  ListTemplatesResponse(ListTemplatesResponse&& from) noexcept
    : ListTemplatesResponse() {
    *this = ::std::move(from);
  }

  inline ListTemplatesResponse& operator=(const ListTemplatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTemplatesResponse& operator=(ListTemplatesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTemplatesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTemplatesResponse* internal_default_instance() {
    return reinterpret_cast<const ListTemplatesResponse*>(
               &_ListTemplatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListTemplatesResponse& a, ListTemplatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTemplatesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTemplatesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTemplatesResponse* New() const final {
    return CreateMaybeMessage<ListTemplatesResponse>(nullptr);
  }

  ListTemplatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTemplatesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTemplatesResponse& from);
  void MergeFrom(const ListTemplatesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTemplatesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ListTemplatesResponse";
  }
  protected:
  explicit ListTemplatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftrainer_2ftrainer_2eproto);
    return ::descriptor_table_proto_2ftrainer_2ftrainer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplatesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .TrainingTemplate templates = 2;
  int templates_size() const;
  private:
  int _internal_templates_size() const;
  public:
  void clear_templates();
  ::TrainingTemplate* mutable_templates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrainingTemplate >*
      mutable_templates();
  private:
  const ::TrainingTemplate& _internal_templates(int index) const;
  ::TrainingTemplate* _internal_add_templates();
  public:
  const ::TrainingTemplate& templates(int index) const;
  ::TrainingTemplate* add_templates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrainingTemplate >&
      templates() const;

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:ListTemplatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrainingTemplate > templates_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftrainer_2ftrainer_2eproto;
};
// -------------------------------------------------------------------

class GetSpireConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetSpireConfigRequest) */ {
 public:
  inline GetSpireConfigRequest() : GetSpireConfigRequest(nullptr) {}
  virtual ~GetSpireConfigRequest();

  GetSpireConfigRequest(const GetSpireConfigRequest& from);
  GetSpireConfigRequest(GetSpireConfigRequest&& from) noexcept
    : GetSpireConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetSpireConfigRequest& operator=(const GetSpireConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSpireConfigRequest& operator=(GetSpireConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSpireConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSpireConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetSpireConfigRequest*>(
               &_GetSpireConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetSpireConfigRequest& a, GetSpireConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSpireConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSpireConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSpireConfigRequest* New() const final {
    return CreateMaybeMessage<GetSpireConfigRequest>(nullptr);
  }

  GetSpireConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSpireConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSpireConfigRequest& from);
  void MergeFrom(const GetSpireConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSpireConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetSpireConfigRequest";
  }
  protected:
  explicit GetSpireConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftrainer_2ftrainer_2eproto);
    return ::descriptor_table_proto_2ftrainer_2ftrainer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEidFieldNumber = 2,
    kMetaFieldNumber = 1,
  };
  // string eid = 2;
  void clear_eid();
  const std::string& eid() const;
  void set_eid(const std::string& value);
  void set_eid(std::string&& value);
  void set_eid(const char* value);
  void set_eid(const char* value, size_t size);
  std::string* mutable_eid();
  std::string* release_eid();
  void set_allocated_eid(std::string* eid);
  private:
  const std::string& _internal_eid() const;
  void _internal_set_eid(const std::string& value);
  std::string* _internal_mutable_eid();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:GetSpireConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eid_;
  ::RequestMeta* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftrainer_2ftrainer_2eproto;
};
// -------------------------------------------------------------------

class GetSpireConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetSpireConfigResponse) */ {
 public:
  inline GetSpireConfigResponse() : GetSpireConfigResponse(nullptr) {}
  virtual ~GetSpireConfigResponse();

  GetSpireConfigResponse(const GetSpireConfigResponse& from);
  GetSpireConfigResponse(GetSpireConfigResponse&& from) noexcept
    : GetSpireConfigResponse() {
    *this = ::std::move(from);
  }

  inline GetSpireConfigResponse& operator=(const GetSpireConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSpireConfigResponse& operator=(GetSpireConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSpireConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSpireConfigResponse* internal_default_instance() {
    return reinterpret_cast<const GetSpireConfigResponse*>(
               &_GetSpireConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetSpireConfigResponse& a, GetSpireConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSpireConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSpireConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSpireConfigResponse* New() const final {
    return CreateMaybeMessage<GetSpireConfigResponse>(nullptr);
  }

  GetSpireConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSpireConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSpireConfigResponse& from);
  void MergeFrom(const GetSpireConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSpireConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetSpireConfigResponse";
  }
  protected:
  explicit GetSpireConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftrainer_2ftrainer_2eproto);
    return ::descriptor_table_proto_2ftrainer_2ftrainer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpireNameFieldNumber = 2,
    kSpireConfigLocationFieldNumber = 3,
    kCheckpointRootFieldNumber = 4,
    kStatusFieldNumber = 1,
  };
  // string spire_name = 2;
  void clear_spire_name();
  const std::string& spire_name() const;
  void set_spire_name(const std::string& value);
  void set_spire_name(std::string&& value);
  void set_spire_name(const char* value);
  void set_spire_name(const char* value, size_t size);
  std::string* mutable_spire_name();
  std::string* release_spire_name();
  void set_allocated_spire_name(std::string* spire_name);
  private:
  const std::string& _internal_spire_name() const;
  void _internal_set_spire_name(const std::string& value);
  std::string* _internal_mutable_spire_name();
  public:

  // string spire_config_location = 3;
  void clear_spire_config_location();
  const std::string& spire_config_location() const;
  void set_spire_config_location(const std::string& value);
  void set_spire_config_location(std::string&& value);
  void set_spire_config_location(const char* value);
  void set_spire_config_location(const char* value, size_t size);
  std::string* mutable_spire_config_location();
  std::string* release_spire_config_location();
  void set_allocated_spire_config_location(std::string* spire_config_location);
  private:
  const std::string& _internal_spire_config_location() const;
  void _internal_set_spire_config_location(const std::string& value);
  std::string* _internal_mutable_spire_config_location();
  public:

  // string checkpoint_root = 4;
  void clear_checkpoint_root();
  const std::string& checkpoint_root() const;
  void set_checkpoint_root(const std::string& value);
  void set_checkpoint_root(std::string&& value);
  void set_checkpoint_root(const char* value);
  void set_checkpoint_root(const char* value, size_t size);
  std::string* mutable_checkpoint_root();
  std::string* release_checkpoint_root();
  void set_allocated_checkpoint_root(std::string* checkpoint_root);
  private:
  const std::string& _internal_checkpoint_root() const;
  void _internal_set_checkpoint_root(const std::string& value);
  std::string* _internal_mutable_checkpoint_root();
  public:

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:GetSpireConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spire_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spire_config_location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpoint_root_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftrainer_2ftrainer_2eproto;
};
// -------------------------------------------------------------------

class EidCleanUpRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EidCleanUpRequest) */ {
 public:
  inline EidCleanUpRequest() : EidCleanUpRequest(nullptr) {}
  virtual ~EidCleanUpRequest();

  EidCleanUpRequest(const EidCleanUpRequest& from);
  EidCleanUpRequest(EidCleanUpRequest&& from) noexcept
    : EidCleanUpRequest() {
    *this = ::std::move(from);
  }

  inline EidCleanUpRequest& operator=(const EidCleanUpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EidCleanUpRequest& operator=(EidCleanUpRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EidCleanUpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EidCleanUpRequest* internal_default_instance() {
    return reinterpret_cast<const EidCleanUpRequest*>(
               &_EidCleanUpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EidCleanUpRequest& a, EidCleanUpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EidCleanUpRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EidCleanUpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EidCleanUpRequest* New() const final {
    return CreateMaybeMessage<EidCleanUpRequest>(nullptr);
  }

  EidCleanUpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EidCleanUpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EidCleanUpRequest& from);
  void MergeFrom(const EidCleanUpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EidCleanUpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EidCleanUpRequest";
  }
  protected:
  explicit EidCleanUpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftrainer_2ftrainer_2eproto);
    return ::descriptor_table_proto_2ftrainer_2ftrainer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEidFieldNumber = 2,
    kMetaFieldNumber = 1,
    kDeleteCheckpointFolderFieldNumber = 3,
    kDeleteCachedDataFieldNumber = 4,
  };
  // string eid = 2;
  void clear_eid();
  const std::string& eid() const;
  void set_eid(const std::string& value);
  void set_eid(std::string&& value);
  void set_eid(const char* value);
  void set_eid(const char* value, size_t size);
  std::string* mutable_eid();
  std::string* release_eid();
  void set_allocated_eid(std::string* eid);
  private:
  const std::string& _internal_eid() const;
  void _internal_set_eid(const std::string& value);
  std::string* _internal_mutable_eid();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // bool delete_checkpoint_folder = 3;
  void clear_delete_checkpoint_folder();
  bool delete_checkpoint_folder() const;
  void set_delete_checkpoint_folder(bool value);
  private:
  bool _internal_delete_checkpoint_folder() const;
  void _internal_set_delete_checkpoint_folder(bool value);
  public:

  // bool delete_cached_data = 4;
  void clear_delete_cached_data();
  bool delete_cached_data() const;
  void set_delete_cached_data(bool value);
  private:
  bool _internal_delete_cached_data() const;
  void _internal_set_delete_cached_data(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EidCleanUpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eid_;
  ::RequestMeta* meta_;
  bool delete_checkpoint_folder_;
  bool delete_cached_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftrainer_2ftrainer_2eproto;
};
// -------------------------------------------------------------------

class EidCleanUpResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EidCleanUpResponse) */ {
 public:
  inline EidCleanUpResponse() : EidCleanUpResponse(nullptr) {}
  virtual ~EidCleanUpResponse();

  EidCleanUpResponse(const EidCleanUpResponse& from);
  EidCleanUpResponse(EidCleanUpResponse&& from) noexcept
    : EidCleanUpResponse() {
    *this = ::std::move(from);
  }

  inline EidCleanUpResponse& operator=(const EidCleanUpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EidCleanUpResponse& operator=(EidCleanUpResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EidCleanUpResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EidCleanUpResponse* internal_default_instance() {
    return reinterpret_cast<const EidCleanUpResponse*>(
               &_EidCleanUpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(EidCleanUpResponse& a, EidCleanUpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EidCleanUpResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EidCleanUpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EidCleanUpResponse* New() const final {
    return CreateMaybeMessage<EidCleanUpResponse>(nullptr);
  }

  EidCleanUpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EidCleanUpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EidCleanUpResponse& from);
  void MergeFrom(const EidCleanUpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EidCleanUpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EidCleanUpResponse";
  }
  protected:
  explicit EidCleanUpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftrainer_2ftrainer_2eproto);
    return ::descriptor_table_proto_2ftrainer_2ftrainer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:EidCleanUpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftrainer_2ftrainer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DatasetLocation

// .DatasetLocation.Type type = 1;
inline void DatasetLocation::clear_type() {
  type_ = 0;
}
inline ::DatasetLocation_Type DatasetLocation::_internal_type() const {
  return static_cast< ::DatasetLocation_Type >(type_);
}
inline ::DatasetLocation_Type DatasetLocation::type() const {
  // @@protoc_insertion_point(field_get:DatasetLocation.type)
  return _internal_type();
}
inline void DatasetLocation::_internal_set_type(::DatasetLocation_Type value) {
  
  type_ = value;
}
inline void DatasetLocation::set_type(::DatasetLocation_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DatasetLocation.type)
}

// string api_key = 2;
inline void DatasetLocation::clear_api_key() {
  api_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DatasetLocation::api_key() const {
  // @@protoc_insertion_point(field_get:DatasetLocation.api_key)
  return _internal_api_key();
}
inline void DatasetLocation::set_api_key(const std::string& value) {
  _internal_set_api_key(value);
  // @@protoc_insertion_point(field_set:DatasetLocation.api_key)
}
inline std::string* DatasetLocation::mutable_api_key() {
  // @@protoc_insertion_point(field_mutable:DatasetLocation.api_key)
  return _internal_mutable_api_key();
}
inline const std::string& DatasetLocation::_internal_api_key() const {
  return api_key_.Get();
}
inline void DatasetLocation::_internal_set_api_key(const std::string& value) {
  
  api_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DatasetLocation::set_api_key(std::string&& value) {
  
  api_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DatasetLocation.api_key)
}
inline void DatasetLocation::set_api_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  api_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DatasetLocation.api_key)
}
inline void DatasetLocation::set_api_key(const char* value,
    size_t size) {
  
  api_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DatasetLocation.api_key)
}
inline std::string* DatasetLocation::_internal_mutable_api_key() {
  
  return api_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DatasetLocation::release_api_key() {
  // @@protoc_insertion_point(field_release:DatasetLocation.api_key)
  return api_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DatasetLocation::set_allocated_api_key(std::string* api_key) {
  if (api_key != nullptr) {
    
  } else {
    
  }
  api_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DatasetLocation.api_key)
}

// string api_url = 3;
inline void DatasetLocation::clear_api_url() {
  api_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DatasetLocation::api_url() const {
  // @@protoc_insertion_point(field_get:DatasetLocation.api_url)
  return _internal_api_url();
}
inline void DatasetLocation::set_api_url(const std::string& value) {
  _internal_set_api_url(value);
  // @@protoc_insertion_point(field_set:DatasetLocation.api_url)
}
inline std::string* DatasetLocation::mutable_api_url() {
  // @@protoc_insertion_point(field_mutable:DatasetLocation.api_url)
  return _internal_mutable_api_url();
}
inline const std::string& DatasetLocation::_internal_api_url() const {
  return api_url_.Get();
}
inline void DatasetLocation::_internal_set_api_url(const std::string& value) {
  
  api_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DatasetLocation::set_api_url(std::string&& value) {
  
  api_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DatasetLocation.api_url)
}
inline void DatasetLocation::set_api_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  api_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DatasetLocation.api_url)
}
inline void DatasetLocation::set_api_url(const char* value,
    size_t size) {
  
  api_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DatasetLocation.api_url)
}
inline std::string* DatasetLocation::_internal_mutable_api_url() {
  
  return api_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DatasetLocation::release_api_url() {
  // @@protoc_insertion_point(field_release:DatasetLocation.api_url)
  return api_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DatasetLocation::set_allocated_api_url(std::string* api_url) {
  if (api_url != nullptr) {
    
  } else {
    
  }
  api_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DatasetLocation.api_url)
}

// string data_bulk_url = 4;
inline void DatasetLocation::clear_data_bulk_url() {
  data_bulk_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DatasetLocation::data_bulk_url() const {
  // @@protoc_insertion_point(field_get:DatasetLocation.data_bulk_url)
  return _internal_data_bulk_url();
}
inline void DatasetLocation::set_data_bulk_url(const std::string& value) {
  _internal_set_data_bulk_url(value);
  // @@protoc_insertion_point(field_set:DatasetLocation.data_bulk_url)
}
inline std::string* DatasetLocation::mutable_data_bulk_url() {
  // @@protoc_insertion_point(field_mutable:DatasetLocation.data_bulk_url)
  return _internal_mutable_data_bulk_url();
}
inline const std::string& DatasetLocation::_internal_data_bulk_url() const {
  return data_bulk_url_.Get();
}
inline void DatasetLocation::_internal_set_data_bulk_url(const std::string& value) {
  
  data_bulk_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DatasetLocation::set_data_bulk_url(std::string&& value) {
  
  data_bulk_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DatasetLocation.data_bulk_url)
}
inline void DatasetLocation::set_data_bulk_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_bulk_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DatasetLocation.data_bulk_url)
}
inline void DatasetLocation::set_data_bulk_url(const char* value,
    size_t size) {
  
  data_bulk_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DatasetLocation.data_bulk_url)
}
inline std::string* DatasetLocation::_internal_mutable_data_bulk_url() {
  
  return data_bulk_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DatasetLocation::release_data_bulk_url() {
  // @@protoc_insertion_point(field_release:DatasetLocation.data_bulk_url)
  return data_bulk_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DatasetLocation::set_allocated_data_bulk_url(std::string* data_bulk_url) {
  if (data_bulk_url != nullptr) {
    
  } else {
    
  }
  data_bulk_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_bulk_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DatasetLocation.data_bulk_url)
}

// string model_id = 5;
inline void DatasetLocation::clear_model_id() {
  model_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DatasetLocation::model_id() const {
  // @@protoc_insertion_point(field_get:DatasetLocation.model_id)
  return _internal_model_id();
}
inline void DatasetLocation::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:DatasetLocation.model_id)
}
inline std::string* DatasetLocation::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:DatasetLocation.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& DatasetLocation::_internal_model_id() const {
  return model_id_.Get();
}
inline void DatasetLocation::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DatasetLocation::set_model_id(std::string&& value) {
  
  model_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DatasetLocation.model_id)
}
inline void DatasetLocation::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DatasetLocation.model_id)
}
inline void DatasetLocation::set_model_id(const char* value,
    size_t size) {
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DatasetLocation.model_id)
}
inline std::string* DatasetLocation::_internal_mutable_model_id() {
  
  return model_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DatasetLocation::release_model_id() {
  // @@protoc_insertion_point(field_release:DatasetLocation.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DatasetLocation::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DatasetLocation.model_id)
}

// int32 test_split_percent = 6;
inline void DatasetLocation::clear_test_split_percent() {
  test_split_percent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DatasetLocation::_internal_test_split_percent() const {
  return test_split_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DatasetLocation::test_split_percent() const {
  // @@protoc_insertion_point(field_get:DatasetLocation.test_split_percent)
  return _internal_test_split_percent();
}
inline void DatasetLocation::_internal_set_test_split_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  test_split_percent_ = value;
}
inline void DatasetLocation::set_test_split_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test_split_percent(value);
  // @@protoc_insertion_point(field_set:DatasetLocation.test_split_percent)
}

// .clarifai.api.Search data_dump_search = 7;
inline bool DatasetLocation::_internal_has_data_dump_search() const {
  return this != internal_default_instance() && data_dump_search_ != nullptr;
}
inline bool DatasetLocation::has_data_dump_search() const {
  return _internal_has_data_dump_search();
}
inline const ::clarifai::api::Search& DatasetLocation::_internal_data_dump_search() const {
  const ::clarifai::api::Search* p = data_dump_search_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Search*>(
      &::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& DatasetLocation::data_dump_search() const {
  // @@protoc_insertion_point(field_get:DatasetLocation.data_dump_search)
  return _internal_data_dump_search();
}
inline void DatasetLocation::unsafe_arena_set_allocated_data_dump_search(
    ::clarifai::api::Search* data_dump_search) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_dump_search_);
  }
  data_dump_search_ = data_dump_search;
  if (data_dump_search) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DatasetLocation.data_dump_search)
}
inline ::clarifai::api::Search* DatasetLocation::release_data_dump_search() {
  
  ::clarifai::api::Search* temp = data_dump_search_;
  data_dump_search_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Search* DatasetLocation::unsafe_arena_release_data_dump_search() {
  // @@protoc_insertion_point(field_release:DatasetLocation.data_dump_search)
  
  ::clarifai::api::Search* temp = data_dump_search_;
  data_dump_search_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* DatasetLocation::_internal_mutable_data_dump_search() {
  
  if (data_dump_search_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArena());
    data_dump_search_ = p;
  }
  return data_dump_search_;
}
inline ::clarifai::api::Search* DatasetLocation::mutable_data_dump_search() {
  // @@protoc_insertion_point(field_mutable:DatasetLocation.data_dump_search)
  return _internal_mutable_data_dump_search();
}
inline void DatasetLocation::set_allocated_data_dump_search(::clarifai::api::Search* data_dump_search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_dump_search_);
  }
  if (data_dump_search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_dump_search)->GetArena();
    if (message_arena != submessage_arena) {
      data_dump_search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_dump_search, submessage_arena);
    }
    
  } else {
    
  }
  data_dump_search_ = data_dump_search;
  // @@protoc_insertion_point(field_set_allocated:DatasetLocation.data_dump_search)
}

// string dataset_name = 10;
inline void DatasetLocation::clear_dataset_name() {
  dataset_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DatasetLocation::dataset_name() const {
  // @@protoc_insertion_point(field_get:DatasetLocation.dataset_name)
  return _internal_dataset_name();
}
inline void DatasetLocation::set_dataset_name(const std::string& value) {
  _internal_set_dataset_name(value);
  // @@protoc_insertion_point(field_set:DatasetLocation.dataset_name)
}
inline std::string* DatasetLocation::mutable_dataset_name() {
  // @@protoc_insertion_point(field_mutable:DatasetLocation.dataset_name)
  return _internal_mutable_dataset_name();
}
inline const std::string& DatasetLocation::_internal_dataset_name() const {
  return dataset_name_.Get();
}
inline void DatasetLocation::_internal_set_dataset_name(const std::string& value) {
  
  dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DatasetLocation::set_dataset_name(std::string&& value) {
  
  dataset_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DatasetLocation.dataset_name)
}
inline void DatasetLocation::set_dataset_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DatasetLocation.dataset_name)
}
inline void DatasetLocation::set_dataset_name(const char* value,
    size_t size) {
  
  dataset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DatasetLocation.dataset_name)
}
inline std::string* DatasetLocation::_internal_mutable_dataset_name() {
  
  return dataset_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DatasetLocation::release_dataset_name() {
  // @@protoc_insertion_point(field_release:DatasetLocation.dataset_name)
  return dataset_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DatasetLocation::set_allocated_dataset_name(std::string* dataset_name) {
  if (dataset_name != nullptr) {
    
  } else {
    
  }
  dataset_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DatasetLocation.dataset_name)
}

// -------------------------------------------------------------------

// TrainRequest

// .RequestMeta meta = 1;
inline bool TrainRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool TrainRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& TrainRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& TrainRequest::meta() const {
  // @@protoc_insertion_point(field_get:TrainRequest.meta)
  return _internal_meta();
}
inline void TrainRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrainRequest.meta)
}
inline ::RequestMeta* TrainRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* TrainRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:TrainRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* TrainRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* TrainRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:TrainRequest.meta)
  return _internal_mutable_meta();
}
inline void TrainRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:TrainRequest.meta)
}

// .DatasetLocation data = 3;
inline bool TrainRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool TrainRequest::has_data() const {
  return _internal_has_data();
}
inline void TrainRequest::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::DatasetLocation& TrainRequest::_internal_data() const {
  const ::DatasetLocation* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DatasetLocation*>(
      &::_DatasetLocation_default_instance_);
}
inline const ::DatasetLocation& TrainRequest::data() const {
  // @@protoc_insertion_point(field_get:TrainRequest.data)
  return _internal_data();
}
inline void TrainRequest::unsafe_arena_set_allocated_data(
    ::DatasetLocation* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrainRequest.data)
}
inline ::DatasetLocation* TrainRequest::release_data() {
  
  ::DatasetLocation* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DatasetLocation* TrainRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:TrainRequest.data)
  
  ::DatasetLocation* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DatasetLocation* TrainRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DatasetLocation>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::DatasetLocation* TrainRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TrainRequest.data)
  return _internal_mutable_data();
}
inline void TrainRequest::set_allocated_data(::DatasetLocation* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:TrainRequest.data)
}

// string template_name = 4;
inline void TrainRequest::clear_template_name() {
  template_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TrainRequest::template_name() const {
  // @@protoc_insertion_point(field_get:TrainRequest.template_name)
  return _internal_template_name();
}
inline void TrainRequest::set_template_name(const std::string& value) {
  _internal_set_template_name(value);
  // @@protoc_insertion_point(field_set:TrainRequest.template_name)
}
inline std::string* TrainRequest::mutable_template_name() {
  // @@protoc_insertion_point(field_mutable:TrainRequest.template_name)
  return _internal_mutable_template_name();
}
inline const std::string& TrainRequest::_internal_template_name() const {
  return template_name_.Get();
}
inline void TrainRequest::_internal_set_template_name(const std::string& value) {
  
  template_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrainRequest::set_template_name(std::string&& value) {
  
  template_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TrainRequest.template_name)
}
inline void TrainRequest::set_template_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  template_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TrainRequest.template_name)
}
inline void TrainRequest::set_template_name(const char* value,
    size_t size) {
  
  template_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TrainRequest.template_name)
}
inline std::string* TrainRequest::_internal_mutable_template_name() {
  
  return template_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrainRequest::release_template_name() {
  // @@protoc_insertion_point(field_release:TrainRequest.template_name)
  return template_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrainRequest::set_allocated_template_name(std::string* template_name) {
  if (template_name != nullptr) {
    
  } else {
    
  }
  template_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TrainRequest.template_name)
}

// string hyper_parameters = 5;
inline void TrainRequest::clear_hyper_parameters() {
  hyper_parameters_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TrainRequest::hyper_parameters() const {
  // @@protoc_insertion_point(field_get:TrainRequest.hyper_parameters)
  return _internal_hyper_parameters();
}
inline void TrainRequest::set_hyper_parameters(const std::string& value) {
  _internal_set_hyper_parameters(value);
  // @@protoc_insertion_point(field_set:TrainRequest.hyper_parameters)
}
inline std::string* TrainRequest::mutable_hyper_parameters() {
  // @@protoc_insertion_point(field_mutable:TrainRequest.hyper_parameters)
  return _internal_mutable_hyper_parameters();
}
inline const std::string& TrainRequest::_internal_hyper_parameters() const {
  return hyper_parameters_.Get();
}
inline void TrainRequest::_internal_set_hyper_parameters(const std::string& value) {
  
  hyper_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrainRequest::set_hyper_parameters(std::string&& value) {
  
  hyper_parameters_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TrainRequest.hyper_parameters)
}
inline void TrainRequest::set_hyper_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hyper_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TrainRequest.hyper_parameters)
}
inline void TrainRequest::set_hyper_parameters(const char* value,
    size_t size) {
  
  hyper_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TrainRequest.hyper_parameters)
}
inline std::string* TrainRequest::_internal_mutable_hyper_parameters() {
  
  return hyper_parameters_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrainRequest::release_hyper_parameters() {
  // @@protoc_insertion_point(field_release:TrainRequest.hyper_parameters)
  return hyper_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrainRequest::set_allocated_hyper_parameters(std::string* hyper_parameters) {
  if (hyper_parameters != nullptr) {
    
  } else {
    
  }
  hyper_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hyper_parameters,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TrainRequest.hyper_parameters)
}

// -------------------------------------------------------------------

// TrainResponse

// .ResponseStatus status = 1;
inline bool TrainResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool TrainResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& TrainResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& TrainResponse::status() const {
  // @@protoc_insertion_point(field_get:TrainResponse.status)
  return _internal_status();
}
inline void TrainResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrainResponse.status)
}
inline ::ResponseStatus* TrainResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* TrainResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:TrainResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* TrainResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* TrainResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:TrainResponse.status)
  return _internal_mutable_status();
}
inline void TrainResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:TrainResponse.status)
}

// string eid = 2;
inline void TrainResponse::clear_eid() {
  eid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TrainResponse::eid() const {
  // @@protoc_insertion_point(field_get:TrainResponse.eid)
  return _internal_eid();
}
inline void TrainResponse::set_eid(const std::string& value) {
  _internal_set_eid(value);
  // @@protoc_insertion_point(field_set:TrainResponse.eid)
}
inline std::string* TrainResponse::mutable_eid() {
  // @@protoc_insertion_point(field_mutable:TrainResponse.eid)
  return _internal_mutable_eid();
}
inline const std::string& TrainResponse::_internal_eid() const {
  return eid_.Get();
}
inline void TrainResponse::_internal_set_eid(const std::string& value) {
  
  eid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrainResponse::set_eid(std::string&& value) {
  
  eid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TrainResponse.eid)
}
inline void TrainResponse::set_eid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TrainResponse.eid)
}
inline void TrainResponse::set_eid(const char* value,
    size_t size) {
  
  eid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TrainResponse.eid)
}
inline std::string* TrainResponse::_internal_mutable_eid() {
  
  return eid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrainResponse::release_eid() {
  // @@protoc_insertion_point(field_release:TrainResponse.eid)
  return eid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrainResponse::set_allocated_eid(std::string* eid) {
  if (eid != nullptr) {
    
  } else {
    
  }
  eid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TrainResponse.eid)
}

// -------------------------------------------------------------------

// GetStatusRequest

// .RequestMeta meta = 1;
inline bool GetStatusRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool GetStatusRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& GetStatusRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& GetStatusRequest::meta() const {
  // @@protoc_insertion_point(field_get:GetStatusRequest.meta)
  return _internal_meta();
}
inline void GetStatusRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetStatusRequest.meta)
}
inline ::RequestMeta* GetStatusRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* GetStatusRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:GetStatusRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* GetStatusRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* GetStatusRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:GetStatusRequest.meta)
  return _internal_mutable_meta();
}
inline void GetStatusRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:GetStatusRequest.meta)
}

// string eid = 2;
inline void GetStatusRequest::clear_eid() {
  eid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetStatusRequest::eid() const {
  // @@protoc_insertion_point(field_get:GetStatusRequest.eid)
  return _internal_eid();
}
inline void GetStatusRequest::set_eid(const std::string& value) {
  _internal_set_eid(value);
  // @@protoc_insertion_point(field_set:GetStatusRequest.eid)
}
inline std::string* GetStatusRequest::mutable_eid() {
  // @@protoc_insertion_point(field_mutable:GetStatusRequest.eid)
  return _internal_mutable_eid();
}
inline const std::string& GetStatusRequest::_internal_eid() const {
  return eid_.Get();
}
inline void GetStatusRequest::_internal_set_eid(const std::string& value) {
  
  eid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetStatusRequest::set_eid(std::string&& value) {
  
  eid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetStatusRequest.eid)
}
inline void GetStatusRequest::set_eid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GetStatusRequest.eid)
}
inline void GetStatusRequest::set_eid(const char* value,
    size_t size) {
  
  eid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetStatusRequest.eid)
}
inline std::string* GetStatusRequest::_internal_mutable_eid() {
  
  return eid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetStatusRequest::release_eid() {
  // @@protoc_insertion_point(field_release:GetStatusRequest.eid)
  return eid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetStatusRequest::set_allocated_eid(std::string* eid) {
  if (eid != nullptr) {
    
  } else {
    
  }
  eid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetStatusRequest.eid)
}

// -------------------------------------------------------------------

// GetStatusResponse

// .ResponseStatus status = 1;
inline bool GetStatusResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetStatusResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& GetStatusResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& GetStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:GetStatusResponse.status)
  return _internal_status();
}
inline void GetStatusResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetStatusResponse.status)
}
inline ::ResponseStatus* GetStatusResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* GetStatusResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:GetStatusResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* GetStatusResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* GetStatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:GetStatusResponse.status)
  return _internal_mutable_status();
}
inline void GetStatusResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:GetStatusResponse.status)
}

// .ResponseStatus data_fetch_status = 2;
inline bool GetStatusResponse::_internal_has_data_fetch_status() const {
  return this != internal_default_instance() && data_fetch_status_ != nullptr;
}
inline bool GetStatusResponse::has_data_fetch_status() const {
  return _internal_has_data_fetch_status();
}
inline const ::ResponseStatus& GetStatusResponse::_internal_data_fetch_status() const {
  const ::ResponseStatus* p = data_fetch_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& GetStatusResponse::data_fetch_status() const {
  // @@protoc_insertion_point(field_get:GetStatusResponse.data_fetch_status)
  return _internal_data_fetch_status();
}
inline void GetStatusResponse::unsafe_arena_set_allocated_data_fetch_status(
    ::ResponseStatus* data_fetch_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_fetch_status_);
  }
  data_fetch_status_ = data_fetch_status;
  if (data_fetch_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetStatusResponse.data_fetch_status)
}
inline ::ResponseStatus* GetStatusResponse::release_data_fetch_status() {
  
  ::ResponseStatus* temp = data_fetch_status_;
  data_fetch_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* GetStatusResponse::unsafe_arena_release_data_fetch_status() {
  // @@protoc_insertion_point(field_release:GetStatusResponse.data_fetch_status)
  
  ::ResponseStatus* temp = data_fetch_status_;
  data_fetch_status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* GetStatusResponse::_internal_mutable_data_fetch_status() {
  
  if (data_fetch_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    data_fetch_status_ = p;
  }
  return data_fetch_status_;
}
inline ::ResponseStatus* GetStatusResponse::mutable_data_fetch_status() {
  // @@protoc_insertion_point(field_mutable:GetStatusResponse.data_fetch_status)
  return _internal_mutable_data_fetch_status();
}
inline void GetStatusResponse::set_allocated_data_fetch_status(::ResponseStatus* data_fetch_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_fetch_status_);
  }
  if (data_fetch_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_fetch_status)->GetArena();
    if (message_arena != submessage_arena) {
      data_fetch_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_fetch_status, submessage_arena);
    }
    
  } else {
    
  }
  data_fetch_status_ = data_fetch_status;
  // @@protoc_insertion_point(field_set_allocated:GetStatusResponse.data_fetch_status)
}

// .ResponseStatus train_status = 3;
inline bool GetStatusResponse::_internal_has_train_status() const {
  return this != internal_default_instance() && train_status_ != nullptr;
}
inline bool GetStatusResponse::has_train_status() const {
  return _internal_has_train_status();
}
inline const ::ResponseStatus& GetStatusResponse::_internal_train_status() const {
  const ::ResponseStatus* p = train_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& GetStatusResponse::train_status() const {
  // @@protoc_insertion_point(field_get:GetStatusResponse.train_status)
  return _internal_train_status();
}
inline void GetStatusResponse::unsafe_arena_set_allocated_train_status(
    ::ResponseStatus* train_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(train_status_);
  }
  train_status_ = train_status;
  if (train_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetStatusResponse.train_status)
}
inline ::ResponseStatus* GetStatusResponse::release_train_status() {
  
  ::ResponseStatus* temp = train_status_;
  train_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* GetStatusResponse::unsafe_arena_release_train_status() {
  // @@protoc_insertion_point(field_release:GetStatusResponse.train_status)
  
  ::ResponseStatus* temp = train_status_;
  train_status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* GetStatusResponse::_internal_mutable_train_status() {
  
  if (train_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    train_status_ = p;
  }
  return train_status_;
}
inline ::ResponseStatus* GetStatusResponse::mutable_train_status() {
  // @@protoc_insertion_point(field_mutable:GetStatusResponse.train_status)
  return _internal_mutable_train_status();
}
inline void GetStatusResponse::set_allocated_train_status(::ResponseStatus* train_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(train_status_);
  }
  if (train_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(train_status)->GetArena();
    if (message_arena != submessage_arena) {
      train_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, train_status, submessage_arena);
    }
    
  } else {
    
  }
  train_status_ = train_status;
  // @@protoc_insertion_point(field_set_allocated:GetStatusResponse.train_status)
}

// .ProgressStatus progress_status = 4;
inline bool GetStatusResponse::_internal_has_progress_status() const {
  return this != internal_default_instance() && progress_status_ != nullptr;
}
inline bool GetStatusResponse::has_progress_status() const {
  return _internal_has_progress_status();
}
inline const ::ProgressStatus& GetStatusResponse::_internal_progress_status() const {
  const ::ProgressStatus* p = progress_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ProgressStatus*>(
      &::_ProgressStatus_default_instance_);
}
inline const ::ProgressStatus& GetStatusResponse::progress_status() const {
  // @@protoc_insertion_point(field_get:GetStatusResponse.progress_status)
  return _internal_progress_status();
}
inline void GetStatusResponse::unsafe_arena_set_allocated_progress_status(
    ::ProgressStatus* progress_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_status_);
  }
  progress_status_ = progress_status;
  if (progress_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetStatusResponse.progress_status)
}
inline ::ProgressStatus* GetStatusResponse::release_progress_status() {
  
  ::ProgressStatus* temp = progress_status_;
  progress_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProgressStatus* GetStatusResponse::unsafe_arena_release_progress_status() {
  // @@protoc_insertion_point(field_release:GetStatusResponse.progress_status)
  
  ::ProgressStatus* temp = progress_status_;
  progress_status_ = nullptr;
  return temp;
}
inline ::ProgressStatus* GetStatusResponse::_internal_mutable_progress_status() {
  
  if (progress_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProgressStatus>(GetArena());
    progress_status_ = p;
  }
  return progress_status_;
}
inline ::ProgressStatus* GetStatusResponse::mutable_progress_status() {
  // @@protoc_insertion_point(field_mutable:GetStatusResponse.progress_status)
  return _internal_mutable_progress_status();
}
inline void GetStatusResponse::set_allocated_progress_status(::ProgressStatus* progress_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_status_);
  }
  if (progress_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_status)->GetArena();
    if (message_arena != submessage_arena) {
      progress_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress_status, submessage_arena);
    }
    
  } else {
    
  }
  progress_status_ = progress_status;
  // @@protoc_insertion_point(field_set_allocated:GetStatusResponse.progress_status)
}

// .ResponseStatus eval_status = 5;
inline bool GetStatusResponse::_internal_has_eval_status() const {
  return this != internal_default_instance() && eval_status_ != nullptr;
}
inline bool GetStatusResponse::has_eval_status() const {
  return _internal_has_eval_status();
}
inline const ::ResponseStatus& GetStatusResponse::_internal_eval_status() const {
  const ::ResponseStatus* p = eval_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& GetStatusResponse::eval_status() const {
  // @@protoc_insertion_point(field_get:GetStatusResponse.eval_status)
  return _internal_eval_status();
}
inline void GetStatusResponse::unsafe_arena_set_allocated_eval_status(
    ::ResponseStatus* eval_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_status_);
  }
  eval_status_ = eval_status;
  if (eval_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetStatusResponse.eval_status)
}
inline ::ResponseStatus* GetStatusResponse::release_eval_status() {
  
  ::ResponseStatus* temp = eval_status_;
  eval_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* GetStatusResponse::unsafe_arena_release_eval_status() {
  // @@protoc_insertion_point(field_release:GetStatusResponse.eval_status)
  
  ::ResponseStatus* temp = eval_status_;
  eval_status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* GetStatusResponse::_internal_mutable_eval_status() {
  
  if (eval_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    eval_status_ = p;
  }
  return eval_status_;
}
inline ::ResponseStatus* GetStatusResponse::mutable_eval_status() {
  // @@protoc_insertion_point(field_mutable:GetStatusResponse.eval_status)
  return _internal_mutable_eval_status();
}
inline void GetStatusResponse::set_allocated_eval_status(::ResponseStatus* eval_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_status_);
  }
  if (eval_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_status)->GetArena();
    if (message_arena != submessage_arena) {
      eval_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval_status, submessage_arena);
    }
    
  } else {
    
  }
  eval_status_ = eval_status;
  // @@protoc_insertion_point(field_set_allocated:GetStatusResponse.eval_status)
}

// .google.protobuf.Timestamp status_modified_at = 10;
inline bool GetStatusResponse::_internal_has_status_modified_at() const {
  return this != internal_default_instance() && status_modified_at_ != nullptr;
}
inline bool GetStatusResponse::has_status_modified_at() const {
  return _internal_has_status_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetStatusResponse::_internal_status_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = status_modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetStatusResponse::status_modified_at() const {
  // @@protoc_insertion_point(field_get:GetStatusResponse.status_modified_at)
  return _internal_status_modified_at();
}
inline void GetStatusResponse::unsafe_arena_set_allocated_status_modified_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* status_modified_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_modified_at_);
  }
  status_modified_at_ = status_modified_at;
  if (status_modified_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetStatusResponse.status_modified_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetStatusResponse::release_status_modified_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = status_modified_at_;
  status_modified_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetStatusResponse::unsafe_arena_release_status_modified_at() {
  // @@protoc_insertion_point(field_release:GetStatusResponse.status_modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = status_modified_at_;
  status_modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetStatusResponse::_internal_mutable_status_modified_at() {
  
  if (status_modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    status_modified_at_ = p;
  }
  return status_modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetStatusResponse::mutable_status_modified_at() {
  // @@protoc_insertion_point(field_mutable:GetStatusResponse.status_modified_at)
  return _internal_mutable_status_modified_at();
}
inline void GetStatusResponse::set_allocated_status_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* status_modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_modified_at_);
  }
  if (status_modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      status_modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_modified_at, submessage_arena);
    }
    
  } else {
    
  }
  status_modified_at_ = status_modified_at;
  // @@protoc_insertion_point(field_set_allocated:GetStatusResponse.status_modified_at)
}

// -------------------------------------------------------------------

// GetEvaluationsRequest

// .RequestMeta meta = 1;
inline bool GetEvaluationsRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool GetEvaluationsRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& GetEvaluationsRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& GetEvaluationsRequest::meta() const {
  // @@protoc_insertion_point(field_get:GetEvaluationsRequest.meta)
  return _internal_meta();
}
inline void GetEvaluationsRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetEvaluationsRequest.meta)
}
inline ::RequestMeta* GetEvaluationsRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* GetEvaluationsRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:GetEvaluationsRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* GetEvaluationsRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* GetEvaluationsRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:GetEvaluationsRequest.meta)
  return _internal_mutable_meta();
}
inline void GetEvaluationsRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:GetEvaluationsRequest.meta)
}

// string eid = 2;
inline void GetEvaluationsRequest::clear_eid() {
  eid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetEvaluationsRequest::eid() const {
  // @@protoc_insertion_point(field_get:GetEvaluationsRequest.eid)
  return _internal_eid();
}
inline void GetEvaluationsRequest::set_eid(const std::string& value) {
  _internal_set_eid(value);
  // @@protoc_insertion_point(field_set:GetEvaluationsRequest.eid)
}
inline std::string* GetEvaluationsRequest::mutable_eid() {
  // @@protoc_insertion_point(field_mutable:GetEvaluationsRequest.eid)
  return _internal_mutable_eid();
}
inline const std::string& GetEvaluationsRequest::_internal_eid() const {
  return eid_.Get();
}
inline void GetEvaluationsRequest::_internal_set_eid(const std::string& value) {
  
  eid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEvaluationsRequest::set_eid(std::string&& value) {
  
  eid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetEvaluationsRequest.eid)
}
inline void GetEvaluationsRequest::set_eid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GetEvaluationsRequest.eid)
}
inline void GetEvaluationsRequest::set_eid(const char* value,
    size_t size) {
  
  eid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetEvaluationsRequest.eid)
}
inline std::string* GetEvaluationsRequest::_internal_mutable_eid() {
  
  return eid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEvaluationsRequest::release_eid() {
  // @@protoc_insertion_point(field_release:GetEvaluationsRequest.eid)
  return eid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEvaluationsRequest::set_allocated_eid(std::string* eid) {
  if (eid != nullptr) {
    
  } else {
    
  }
  eid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetEvaluationsRequest.eid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetEvaluationsResponse

// .ResponseStatus status = 1;
inline bool GetEvaluationsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetEvaluationsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& GetEvaluationsResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& GetEvaluationsResponse::status() const {
  // @@protoc_insertion_point(field_get:GetEvaluationsResponse.status)
  return _internal_status();
}
inline void GetEvaluationsResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetEvaluationsResponse.status)
}
inline ::ResponseStatus* GetEvaluationsResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* GetEvaluationsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:GetEvaluationsResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* GetEvaluationsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* GetEvaluationsResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:GetEvaluationsResponse.status)
  return _internal_mutable_status();
}
inline void GetEvaluationsResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:GetEvaluationsResponse.status)
}

// map<string, .EvaluationResult> evaluations = 2;
inline int GetEvaluationsResponse::_internal_evaluations_size() const {
  return evaluations_.size();
}
inline int GetEvaluationsResponse::evaluations_size() const {
  return _internal_evaluations_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EvaluationResult >&
GetEvaluationsResponse::_internal_evaluations() const {
  return evaluations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EvaluationResult >&
GetEvaluationsResponse::evaluations() const {
  // @@protoc_insertion_point(field_map:GetEvaluationsResponse.evaluations)
  return _internal_evaluations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EvaluationResult >*
GetEvaluationsResponse::_internal_mutable_evaluations() {
  return evaluations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EvaluationResult >*
GetEvaluationsResponse::mutable_evaluations() {
  // @@protoc_insertion_point(field_mutable_map:GetEvaluationsResponse.evaluations)
  return _internal_mutable_evaluations();
}

// -------------------------------------------------------------------

// TrainingTemplate

// string name = 1;
inline void TrainingTemplate::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TrainingTemplate::name() const {
  // @@protoc_insertion_point(field_get:TrainingTemplate.name)
  return _internal_name();
}
inline void TrainingTemplate::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:TrainingTemplate.name)
}
inline std::string* TrainingTemplate::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TrainingTemplate.name)
  return _internal_mutable_name();
}
inline const std::string& TrainingTemplate::_internal_name() const {
  return name_.Get();
}
inline void TrainingTemplate::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrainingTemplate::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TrainingTemplate.name)
}
inline void TrainingTemplate::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TrainingTemplate.name)
}
inline void TrainingTemplate::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TrainingTemplate.name)
}
inline std::string* TrainingTemplate::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrainingTemplate::release_name() {
  // @@protoc_insertion_point(field_release:TrainingTemplate.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrainingTemplate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TrainingTemplate.name)
}

// string default_args_json = 2;
inline void TrainingTemplate::clear_default_args_json() {
  default_args_json_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TrainingTemplate::default_args_json() const {
  // @@protoc_insertion_point(field_get:TrainingTemplate.default_args_json)
  return _internal_default_args_json();
}
inline void TrainingTemplate::set_default_args_json(const std::string& value) {
  _internal_set_default_args_json(value);
  // @@protoc_insertion_point(field_set:TrainingTemplate.default_args_json)
}
inline std::string* TrainingTemplate::mutable_default_args_json() {
  // @@protoc_insertion_point(field_mutable:TrainingTemplate.default_args_json)
  return _internal_mutable_default_args_json();
}
inline const std::string& TrainingTemplate::_internal_default_args_json() const {
  return default_args_json_.Get();
}
inline void TrainingTemplate::_internal_set_default_args_json(const std::string& value) {
  
  default_args_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrainingTemplate::set_default_args_json(std::string&& value) {
  
  default_args_json_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TrainingTemplate.default_args_json)
}
inline void TrainingTemplate::set_default_args_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_args_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TrainingTemplate.default_args_json)
}
inline void TrainingTemplate::set_default_args_json(const char* value,
    size_t size) {
  
  default_args_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TrainingTemplate.default_args_json)
}
inline std::string* TrainingTemplate::_internal_mutable_default_args_json() {
  
  return default_args_json_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrainingTemplate::release_default_args_json() {
  // @@protoc_insertion_point(field_release:TrainingTemplate.default_args_json)
  return default_args_json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrainingTemplate::set_allocated_default_args_json(std::string* default_args_json) {
  if (default_args_json != nullptr) {
    
  } else {
    
  }
  default_args_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_args_json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TrainingTemplate.default_args_json)
}

// string doc_string = 3;
inline void TrainingTemplate::clear_doc_string() {
  doc_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TrainingTemplate::doc_string() const {
  // @@protoc_insertion_point(field_get:TrainingTemplate.doc_string)
  return _internal_doc_string();
}
inline void TrainingTemplate::set_doc_string(const std::string& value) {
  _internal_set_doc_string(value);
  // @@protoc_insertion_point(field_set:TrainingTemplate.doc_string)
}
inline std::string* TrainingTemplate::mutable_doc_string() {
  // @@protoc_insertion_point(field_mutable:TrainingTemplate.doc_string)
  return _internal_mutable_doc_string();
}
inline const std::string& TrainingTemplate::_internal_doc_string() const {
  return doc_string_.Get();
}
inline void TrainingTemplate::_internal_set_doc_string(const std::string& value) {
  
  doc_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrainingTemplate::set_doc_string(std::string&& value) {
  
  doc_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TrainingTemplate.doc_string)
}
inline void TrainingTemplate::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doc_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TrainingTemplate.doc_string)
}
inline void TrainingTemplate::set_doc_string(const char* value,
    size_t size) {
  
  doc_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TrainingTemplate.doc_string)
}
inline std::string* TrainingTemplate::_internal_mutable_doc_string() {
  
  return doc_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrainingTemplate::release_doc_string() {
  // @@protoc_insertion_point(field_release:TrainingTemplate.doc_string)
  return doc_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrainingTemplate::set_allocated_doc_string(std::string* doc_string) {
  if (doc_string != nullptr) {
    
  } else {
    
  }
  doc_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TrainingTemplate.doc_string)
}

// string model_type = 4;
inline void TrainingTemplate::clear_model_type() {
  model_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TrainingTemplate::model_type() const {
  // @@protoc_insertion_point(field_get:TrainingTemplate.model_type)
  return _internal_model_type();
}
inline void TrainingTemplate::set_model_type(const std::string& value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:TrainingTemplate.model_type)
}
inline std::string* TrainingTemplate::mutable_model_type() {
  // @@protoc_insertion_point(field_mutable:TrainingTemplate.model_type)
  return _internal_mutable_model_type();
}
inline const std::string& TrainingTemplate::_internal_model_type() const {
  return model_type_.Get();
}
inline void TrainingTemplate::_internal_set_model_type(const std::string& value) {
  
  model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrainingTemplate::set_model_type(std::string&& value) {
  
  model_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TrainingTemplate.model_type)
}
inline void TrainingTemplate::set_model_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TrainingTemplate.model_type)
}
inline void TrainingTemplate::set_model_type(const char* value,
    size_t size) {
  
  model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TrainingTemplate.model_type)
}
inline std::string* TrainingTemplate::_internal_mutable_model_type() {
  
  return model_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrainingTemplate::release_model_type() {
  // @@protoc_insertion_point(field_release:TrainingTemplate.model_type)
  return model_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrainingTemplate::set_allocated_model_type(std::string* model_type) {
  if (model_type != nullptr) {
    
  } else {
    
  }
  model_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TrainingTemplate.model_type)
}

// -------------------------------------------------------------------

// ListTemplatesRequest

// .RequestMeta meta = 1;
inline bool ListTemplatesRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool ListTemplatesRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& ListTemplatesRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& ListTemplatesRequest::meta() const {
  // @@protoc_insertion_point(field_get:ListTemplatesRequest.meta)
  return _internal_meta();
}
inline void ListTemplatesRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ListTemplatesRequest.meta)
}
inline ::RequestMeta* ListTemplatesRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* ListTemplatesRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:ListTemplatesRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* ListTemplatesRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* ListTemplatesRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:ListTemplatesRequest.meta)
  return _internal_mutable_meta();
}
inline void ListTemplatesRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:ListTemplatesRequest.meta)
}

// -------------------------------------------------------------------

// ListTemplatesResponse

// .ResponseStatus status = 1;
inline bool ListTemplatesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListTemplatesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& ListTemplatesResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& ListTemplatesResponse::status() const {
  // @@protoc_insertion_point(field_get:ListTemplatesResponse.status)
  return _internal_status();
}
inline void ListTemplatesResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ListTemplatesResponse.status)
}
inline ::ResponseStatus* ListTemplatesResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* ListTemplatesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:ListTemplatesResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* ListTemplatesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* ListTemplatesResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:ListTemplatesResponse.status)
  return _internal_mutable_status();
}
inline void ListTemplatesResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:ListTemplatesResponse.status)
}

// repeated .TrainingTemplate templates = 2;
inline int ListTemplatesResponse::_internal_templates_size() const {
  return templates_.size();
}
inline int ListTemplatesResponse::templates_size() const {
  return _internal_templates_size();
}
inline void ListTemplatesResponse::clear_templates() {
  templates_.Clear();
}
inline ::TrainingTemplate* ListTemplatesResponse::mutable_templates(int index) {
  // @@protoc_insertion_point(field_mutable:ListTemplatesResponse.templates)
  return templates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrainingTemplate >*
ListTemplatesResponse::mutable_templates() {
  // @@protoc_insertion_point(field_mutable_list:ListTemplatesResponse.templates)
  return &templates_;
}
inline const ::TrainingTemplate& ListTemplatesResponse::_internal_templates(int index) const {
  return templates_.Get(index);
}
inline const ::TrainingTemplate& ListTemplatesResponse::templates(int index) const {
  // @@protoc_insertion_point(field_get:ListTemplatesResponse.templates)
  return _internal_templates(index);
}
inline ::TrainingTemplate* ListTemplatesResponse::_internal_add_templates() {
  return templates_.Add();
}
inline ::TrainingTemplate* ListTemplatesResponse::add_templates() {
  // @@protoc_insertion_point(field_add:ListTemplatesResponse.templates)
  return _internal_add_templates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrainingTemplate >&
ListTemplatesResponse::templates() const {
  // @@protoc_insertion_point(field_list:ListTemplatesResponse.templates)
  return templates_;
}

// -------------------------------------------------------------------

// GetSpireConfigRequest

// .RequestMeta meta = 1;
inline bool GetSpireConfigRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool GetSpireConfigRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& GetSpireConfigRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& GetSpireConfigRequest::meta() const {
  // @@protoc_insertion_point(field_get:GetSpireConfigRequest.meta)
  return _internal_meta();
}
inline void GetSpireConfigRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetSpireConfigRequest.meta)
}
inline ::RequestMeta* GetSpireConfigRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* GetSpireConfigRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:GetSpireConfigRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* GetSpireConfigRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* GetSpireConfigRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:GetSpireConfigRequest.meta)
  return _internal_mutable_meta();
}
inline void GetSpireConfigRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:GetSpireConfigRequest.meta)
}

// string eid = 2;
inline void GetSpireConfigRequest::clear_eid() {
  eid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSpireConfigRequest::eid() const {
  // @@protoc_insertion_point(field_get:GetSpireConfigRequest.eid)
  return _internal_eid();
}
inline void GetSpireConfigRequest::set_eid(const std::string& value) {
  _internal_set_eid(value);
  // @@protoc_insertion_point(field_set:GetSpireConfigRequest.eid)
}
inline std::string* GetSpireConfigRequest::mutable_eid() {
  // @@protoc_insertion_point(field_mutable:GetSpireConfigRequest.eid)
  return _internal_mutable_eid();
}
inline const std::string& GetSpireConfigRequest::_internal_eid() const {
  return eid_.Get();
}
inline void GetSpireConfigRequest::_internal_set_eid(const std::string& value) {
  
  eid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSpireConfigRequest::set_eid(std::string&& value) {
  
  eid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetSpireConfigRequest.eid)
}
inline void GetSpireConfigRequest::set_eid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GetSpireConfigRequest.eid)
}
inline void GetSpireConfigRequest::set_eid(const char* value,
    size_t size) {
  
  eid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetSpireConfigRequest.eid)
}
inline std::string* GetSpireConfigRequest::_internal_mutable_eid() {
  
  return eid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSpireConfigRequest::release_eid() {
  // @@protoc_insertion_point(field_release:GetSpireConfigRequest.eid)
  return eid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSpireConfigRequest::set_allocated_eid(std::string* eid) {
  if (eid != nullptr) {
    
  } else {
    
  }
  eid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetSpireConfigRequest.eid)
}

// -------------------------------------------------------------------

// GetSpireConfigResponse

// .ResponseStatus status = 1;
inline bool GetSpireConfigResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetSpireConfigResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& GetSpireConfigResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& GetSpireConfigResponse::status() const {
  // @@protoc_insertion_point(field_get:GetSpireConfigResponse.status)
  return _internal_status();
}
inline void GetSpireConfigResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetSpireConfigResponse.status)
}
inline ::ResponseStatus* GetSpireConfigResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* GetSpireConfigResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:GetSpireConfigResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* GetSpireConfigResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* GetSpireConfigResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:GetSpireConfigResponse.status)
  return _internal_mutable_status();
}
inline void GetSpireConfigResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:GetSpireConfigResponse.status)
}

// string spire_name = 2;
inline void GetSpireConfigResponse::clear_spire_name() {
  spire_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSpireConfigResponse::spire_name() const {
  // @@protoc_insertion_point(field_get:GetSpireConfigResponse.spire_name)
  return _internal_spire_name();
}
inline void GetSpireConfigResponse::set_spire_name(const std::string& value) {
  _internal_set_spire_name(value);
  // @@protoc_insertion_point(field_set:GetSpireConfigResponse.spire_name)
}
inline std::string* GetSpireConfigResponse::mutable_spire_name() {
  // @@protoc_insertion_point(field_mutable:GetSpireConfigResponse.spire_name)
  return _internal_mutable_spire_name();
}
inline const std::string& GetSpireConfigResponse::_internal_spire_name() const {
  return spire_name_.Get();
}
inline void GetSpireConfigResponse::_internal_set_spire_name(const std::string& value) {
  
  spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSpireConfigResponse::set_spire_name(std::string&& value) {
  
  spire_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetSpireConfigResponse.spire_name)
}
inline void GetSpireConfigResponse::set_spire_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GetSpireConfigResponse.spire_name)
}
inline void GetSpireConfigResponse::set_spire_name(const char* value,
    size_t size) {
  
  spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetSpireConfigResponse.spire_name)
}
inline std::string* GetSpireConfigResponse::_internal_mutable_spire_name() {
  
  return spire_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSpireConfigResponse::release_spire_name() {
  // @@protoc_insertion_point(field_release:GetSpireConfigResponse.spire_name)
  return spire_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSpireConfigResponse::set_allocated_spire_name(std::string* spire_name) {
  if (spire_name != nullptr) {
    
  } else {
    
  }
  spire_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spire_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetSpireConfigResponse.spire_name)
}

// string spire_config_location = 3;
inline void GetSpireConfigResponse::clear_spire_config_location() {
  spire_config_location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSpireConfigResponse::spire_config_location() const {
  // @@protoc_insertion_point(field_get:GetSpireConfigResponse.spire_config_location)
  return _internal_spire_config_location();
}
inline void GetSpireConfigResponse::set_spire_config_location(const std::string& value) {
  _internal_set_spire_config_location(value);
  // @@protoc_insertion_point(field_set:GetSpireConfigResponse.spire_config_location)
}
inline std::string* GetSpireConfigResponse::mutable_spire_config_location() {
  // @@protoc_insertion_point(field_mutable:GetSpireConfigResponse.spire_config_location)
  return _internal_mutable_spire_config_location();
}
inline const std::string& GetSpireConfigResponse::_internal_spire_config_location() const {
  return spire_config_location_.Get();
}
inline void GetSpireConfigResponse::_internal_set_spire_config_location(const std::string& value) {
  
  spire_config_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSpireConfigResponse::set_spire_config_location(std::string&& value) {
  
  spire_config_location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetSpireConfigResponse.spire_config_location)
}
inline void GetSpireConfigResponse::set_spire_config_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spire_config_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GetSpireConfigResponse.spire_config_location)
}
inline void GetSpireConfigResponse::set_spire_config_location(const char* value,
    size_t size) {
  
  spire_config_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetSpireConfigResponse.spire_config_location)
}
inline std::string* GetSpireConfigResponse::_internal_mutable_spire_config_location() {
  
  return spire_config_location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSpireConfigResponse::release_spire_config_location() {
  // @@protoc_insertion_point(field_release:GetSpireConfigResponse.spire_config_location)
  return spire_config_location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSpireConfigResponse::set_allocated_spire_config_location(std::string* spire_config_location) {
  if (spire_config_location != nullptr) {
    
  } else {
    
  }
  spire_config_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spire_config_location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetSpireConfigResponse.spire_config_location)
}

// string checkpoint_root = 4;
inline void GetSpireConfigResponse::clear_checkpoint_root() {
  checkpoint_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSpireConfigResponse::checkpoint_root() const {
  // @@protoc_insertion_point(field_get:GetSpireConfigResponse.checkpoint_root)
  return _internal_checkpoint_root();
}
inline void GetSpireConfigResponse::set_checkpoint_root(const std::string& value) {
  _internal_set_checkpoint_root(value);
  // @@protoc_insertion_point(field_set:GetSpireConfigResponse.checkpoint_root)
}
inline std::string* GetSpireConfigResponse::mutable_checkpoint_root() {
  // @@protoc_insertion_point(field_mutable:GetSpireConfigResponse.checkpoint_root)
  return _internal_mutable_checkpoint_root();
}
inline const std::string& GetSpireConfigResponse::_internal_checkpoint_root() const {
  return checkpoint_root_.Get();
}
inline void GetSpireConfigResponse::_internal_set_checkpoint_root(const std::string& value) {
  
  checkpoint_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSpireConfigResponse::set_checkpoint_root(std::string&& value) {
  
  checkpoint_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetSpireConfigResponse.checkpoint_root)
}
inline void GetSpireConfigResponse::set_checkpoint_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpoint_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GetSpireConfigResponse.checkpoint_root)
}
inline void GetSpireConfigResponse::set_checkpoint_root(const char* value,
    size_t size) {
  
  checkpoint_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetSpireConfigResponse.checkpoint_root)
}
inline std::string* GetSpireConfigResponse::_internal_mutable_checkpoint_root() {
  
  return checkpoint_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSpireConfigResponse::release_checkpoint_root() {
  // @@protoc_insertion_point(field_release:GetSpireConfigResponse.checkpoint_root)
  return checkpoint_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSpireConfigResponse::set_allocated_checkpoint_root(std::string* checkpoint_root) {
  if (checkpoint_root != nullptr) {
    
  } else {
    
  }
  checkpoint_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpoint_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetSpireConfigResponse.checkpoint_root)
}

// -------------------------------------------------------------------

// EidCleanUpRequest

// .RequestMeta meta = 1;
inline bool EidCleanUpRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool EidCleanUpRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& EidCleanUpRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& EidCleanUpRequest::meta() const {
  // @@protoc_insertion_point(field_get:EidCleanUpRequest.meta)
  return _internal_meta();
}
inline void EidCleanUpRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EidCleanUpRequest.meta)
}
inline ::RequestMeta* EidCleanUpRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* EidCleanUpRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:EidCleanUpRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* EidCleanUpRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* EidCleanUpRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:EidCleanUpRequest.meta)
  return _internal_mutable_meta();
}
inline void EidCleanUpRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:EidCleanUpRequest.meta)
}

// string eid = 2;
inline void EidCleanUpRequest::clear_eid() {
  eid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EidCleanUpRequest::eid() const {
  // @@protoc_insertion_point(field_get:EidCleanUpRequest.eid)
  return _internal_eid();
}
inline void EidCleanUpRequest::set_eid(const std::string& value) {
  _internal_set_eid(value);
  // @@protoc_insertion_point(field_set:EidCleanUpRequest.eid)
}
inline std::string* EidCleanUpRequest::mutable_eid() {
  // @@protoc_insertion_point(field_mutable:EidCleanUpRequest.eid)
  return _internal_mutable_eid();
}
inline const std::string& EidCleanUpRequest::_internal_eid() const {
  return eid_.Get();
}
inline void EidCleanUpRequest::_internal_set_eid(const std::string& value) {
  
  eid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EidCleanUpRequest::set_eid(std::string&& value) {
  
  eid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:EidCleanUpRequest.eid)
}
inline void EidCleanUpRequest::set_eid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:EidCleanUpRequest.eid)
}
inline void EidCleanUpRequest::set_eid(const char* value,
    size_t size) {
  
  eid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:EidCleanUpRequest.eid)
}
inline std::string* EidCleanUpRequest::_internal_mutable_eid() {
  
  return eid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EidCleanUpRequest::release_eid() {
  // @@protoc_insertion_point(field_release:EidCleanUpRequest.eid)
  return eid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EidCleanUpRequest::set_allocated_eid(std::string* eid) {
  if (eid != nullptr) {
    
  } else {
    
  }
  eid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:EidCleanUpRequest.eid)
}

// bool delete_checkpoint_folder = 3;
inline void EidCleanUpRequest::clear_delete_checkpoint_folder() {
  delete_checkpoint_folder_ = false;
}
inline bool EidCleanUpRequest::_internal_delete_checkpoint_folder() const {
  return delete_checkpoint_folder_;
}
inline bool EidCleanUpRequest::delete_checkpoint_folder() const {
  // @@protoc_insertion_point(field_get:EidCleanUpRequest.delete_checkpoint_folder)
  return _internal_delete_checkpoint_folder();
}
inline void EidCleanUpRequest::_internal_set_delete_checkpoint_folder(bool value) {
  
  delete_checkpoint_folder_ = value;
}
inline void EidCleanUpRequest::set_delete_checkpoint_folder(bool value) {
  _internal_set_delete_checkpoint_folder(value);
  // @@protoc_insertion_point(field_set:EidCleanUpRequest.delete_checkpoint_folder)
}

// bool delete_cached_data = 4;
inline void EidCleanUpRequest::clear_delete_cached_data() {
  delete_cached_data_ = false;
}
inline bool EidCleanUpRequest::_internal_delete_cached_data() const {
  return delete_cached_data_;
}
inline bool EidCleanUpRequest::delete_cached_data() const {
  // @@protoc_insertion_point(field_get:EidCleanUpRequest.delete_cached_data)
  return _internal_delete_cached_data();
}
inline void EidCleanUpRequest::_internal_set_delete_cached_data(bool value) {
  
  delete_cached_data_ = value;
}
inline void EidCleanUpRequest::set_delete_cached_data(bool value) {
  _internal_set_delete_cached_data(value);
  // @@protoc_insertion_point(field_set:EidCleanUpRequest.delete_cached_data)
}

// -------------------------------------------------------------------

// EidCleanUpResponse

// .ResponseStatus status = 1;
inline bool EidCleanUpResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool EidCleanUpResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& EidCleanUpResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& EidCleanUpResponse::status() const {
  // @@protoc_insertion_point(field_get:EidCleanUpResponse.status)
  return _internal_status();
}
inline void EidCleanUpResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EidCleanUpResponse.status)
}
inline ::ResponseStatus* EidCleanUpResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* EidCleanUpResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:EidCleanUpResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* EidCleanUpResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* EidCleanUpResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:EidCleanUpResponse.status)
  return _internal_mutable_status();
}
inline void EidCleanUpResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:EidCleanUpResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DatasetLocation_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DatasetLocation_Type>() {
  return ::DatasetLocation_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2ftrainer_2ftrainer_2eproto
