// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/trainer/trainer.proto

#include "proto/trainer/trainer.pb.h"
#include "proto/trainer/trainer.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* TrainingCoordinator_method_names[] = {
  "/TrainingCoordinator/Train",
  "/TrainingCoordinator/GetStatus",
  "/TrainingCoordinator/GetEvaluations",
  "/TrainingCoordinator/ListTemplates",
  "/TrainingCoordinator/GetSpireConfig",
  "/TrainingCoordinator/EidCleanUp",
};

std::unique_ptr< TrainingCoordinator::Stub> TrainingCoordinator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TrainingCoordinator::Stub> stub(new TrainingCoordinator::Stub(channel));
  return stub;
}

TrainingCoordinator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Train_(TrainingCoordinator_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStatus_(TrainingCoordinator_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEvaluations_(TrainingCoordinator_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTemplates_(TrainingCoordinator_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpireConfig_(TrainingCoordinator_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EidCleanUp_(TrainingCoordinator_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TrainingCoordinator::Stub::Train(::grpc::ClientContext* context, const ::TrainRequest& request, ::TrainResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Train_, context, request, response);
}

void TrainingCoordinator::Stub::experimental_async::Train(::grpc::ClientContext* context, const ::TrainRequest* request, ::TrainResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Train_, context, request, response, std::move(f));
}

void TrainingCoordinator::Stub::experimental_async::Train(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TrainResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Train_, context, request, response, std::move(f));
}

void TrainingCoordinator::Stub::experimental_async::Train(::grpc::ClientContext* context, const ::TrainRequest* request, ::TrainResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Train_, context, request, response, reactor);
}

void TrainingCoordinator::Stub::experimental_async::Train(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TrainResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Train_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TrainResponse>* TrainingCoordinator::Stub::AsyncTrainRaw(::grpc::ClientContext* context, const ::TrainRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TrainResponse>::Create(channel_.get(), cq, rpcmethod_Train_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::TrainResponse>* TrainingCoordinator::Stub::PrepareAsyncTrainRaw(::grpc::ClientContext* context, const ::TrainRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TrainResponse>::Create(channel_.get(), cq, rpcmethod_Train_, context, request, false);
}

::grpc::Status TrainingCoordinator::Stub::GetStatus(::grpc::ClientContext* context, const ::GetStatusRequest& request, ::GetStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetStatus_, context, request, response);
}

void TrainingCoordinator::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::GetStatusRequest* request, ::GetStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, std::move(f));
}

void TrainingCoordinator::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, std::move(f));
}

void TrainingCoordinator::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::GetStatusRequest* request, ::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, reactor);
}

void TrainingCoordinator::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetStatusResponse>* TrainingCoordinator::Stub::AsyncGetStatusRaw(::grpc::ClientContext* context, const ::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GetStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GetStatusResponse>* TrainingCoordinator::Stub::PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GetStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetStatus_, context, request, false);
}

::grpc::Status TrainingCoordinator::Stub::GetEvaluations(::grpc::ClientContext* context, const ::GetEvaluationsRequest& request, ::GetEvaluationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEvaluations_, context, request, response);
}

void TrainingCoordinator::Stub::experimental_async::GetEvaluations(::grpc::ClientContext* context, const ::GetEvaluationsRequest* request, ::GetEvaluationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEvaluations_, context, request, response, std::move(f));
}

void TrainingCoordinator::Stub::experimental_async::GetEvaluations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetEvaluationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEvaluations_, context, request, response, std::move(f));
}

void TrainingCoordinator::Stub::experimental_async::GetEvaluations(::grpc::ClientContext* context, const ::GetEvaluationsRequest* request, ::GetEvaluationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEvaluations_, context, request, response, reactor);
}

void TrainingCoordinator::Stub::experimental_async::GetEvaluations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetEvaluationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEvaluations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetEvaluationsResponse>* TrainingCoordinator::Stub::AsyncGetEvaluationsRaw(::grpc::ClientContext* context, const ::GetEvaluationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GetEvaluationsResponse>::Create(channel_.get(), cq, rpcmethod_GetEvaluations_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GetEvaluationsResponse>* TrainingCoordinator::Stub::PrepareAsyncGetEvaluationsRaw(::grpc::ClientContext* context, const ::GetEvaluationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GetEvaluationsResponse>::Create(channel_.get(), cq, rpcmethod_GetEvaluations_, context, request, false);
}

::grpc::Status TrainingCoordinator::Stub::ListTemplates(::grpc::ClientContext* context, const ::ListTemplatesRequest& request, ::ListTemplatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListTemplates_, context, request, response);
}

void TrainingCoordinator::Stub::experimental_async::ListTemplates(::grpc::ClientContext* context, const ::ListTemplatesRequest* request, ::ListTemplatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTemplates_, context, request, response, std::move(f));
}

void TrainingCoordinator::Stub::experimental_async::ListTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ListTemplatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTemplates_, context, request, response, std::move(f));
}

void TrainingCoordinator::Stub::experimental_async::ListTemplates(::grpc::ClientContext* context, const ::ListTemplatesRequest* request, ::ListTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListTemplates_, context, request, response, reactor);
}

void TrainingCoordinator::Stub::experimental_async::ListTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ListTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListTemplates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ListTemplatesResponse>* TrainingCoordinator::Stub::AsyncListTemplatesRaw(::grpc::ClientContext* context, const ::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ListTemplatesResponse>::Create(channel_.get(), cq, rpcmethod_ListTemplates_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ListTemplatesResponse>* TrainingCoordinator::Stub::PrepareAsyncListTemplatesRaw(::grpc::ClientContext* context, const ::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ListTemplatesResponse>::Create(channel_.get(), cq, rpcmethod_ListTemplates_, context, request, false);
}

::grpc::Status TrainingCoordinator::Stub::GetSpireConfig(::grpc::ClientContext* context, const ::GetSpireConfigRequest& request, ::GetSpireConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSpireConfig_, context, request, response);
}

void TrainingCoordinator::Stub::experimental_async::GetSpireConfig(::grpc::ClientContext* context, const ::GetSpireConfigRequest* request, ::GetSpireConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSpireConfig_, context, request, response, std::move(f));
}

void TrainingCoordinator::Stub::experimental_async::GetSpireConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetSpireConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSpireConfig_, context, request, response, std::move(f));
}

void TrainingCoordinator::Stub::experimental_async::GetSpireConfig(::grpc::ClientContext* context, const ::GetSpireConfigRequest* request, ::GetSpireConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSpireConfig_, context, request, response, reactor);
}

void TrainingCoordinator::Stub::experimental_async::GetSpireConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetSpireConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSpireConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetSpireConfigResponse>* TrainingCoordinator::Stub::AsyncGetSpireConfigRaw(::grpc::ClientContext* context, const ::GetSpireConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GetSpireConfigResponse>::Create(channel_.get(), cq, rpcmethod_GetSpireConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GetSpireConfigResponse>* TrainingCoordinator::Stub::PrepareAsyncGetSpireConfigRaw(::grpc::ClientContext* context, const ::GetSpireConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GetSpireConfigResponse>::Create(channel_.get(), cq, rpcmethod_GetSpireConfig_, context, request, false);
}

::grpc::Status TrainingCoordinator::Stub::EidCleanUp(::grpc::ClientContext* context, const ::EidCleanUpRequest& request, ::EidCleanUpResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EidCleanUp_, context, request, response);
}

void TrainingCoordinator::Stub::experimental_async::EidCleanUp(::grpc::ClientContext* context, const ::EidCleanUpRequest* request, ::EidCleanUpResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EidCleanUp_, context, request, response, std::move(f));
}

void TrainingCoordinator::Stub::experimental_async::EidCleanUp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EidCleanUpResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EidCleanUp_, context, request, response, std::move(f));
}

void TrainingCoordinator::Stub::experimental_async::EidCleanUp(::grpc::ClientContext* context, const ::EidCleanUpRequest* request, ::EidCleanUpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EidCleanUp_, context, request, response, reactor);
}

void TrainingCoordinator::Stub::experimental_async::EidCleanUp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EidCleanUpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EidCleanUp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::EidCleanUpResponse>* TrainingCoordinator::Stub::AsyncEidCleanUpRaw(::grpc::ClientContext* context, const ::EidCleanUpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::EidCleanUpResponse>::Create(channel_.get(), cq, rpcmethod_EidCleanUp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::EidCleanUpResponse>* TrainingCoordinator::Stub::PrepareAsyncEidCleanUpRaw(::grpc::ClientContext* context, const ::EidCleanUpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::EidCleanUpResponse>::Create(channel_.get(), cq, rpcmethod_EidCleanUp_, context, request, false);
}

TrainingCoordinator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrainingCoordinator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrainingCoordinator::Service, ::TrainRequest, ::TrainResponse>(
          [](TrainingCoordinator::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::TrainRequest* req,
             ::TrainResponse* resp) {
               return service->Train(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrainingCoordinator_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrainingCoordinator::Service, ::GetStatusRequest, ::GetStatusResponse>(
          [](TrainingCoordinator::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GetStatusRequest* req,
             ::GetStatusResponse* resp) {
               return service->GetStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrainingCoordinator_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrainingCoordinator::Service, ::GetEvaluationsRequest, ::GetEvaluationsResponse>(
          [](TrainingCoordinator::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GetEvaluationsRequest* req,
             ::GetEvaluationsResponse* resp) {
               return service->GetEvaluations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrainingCoordinator_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrainingCoordinator::Service, ::ListTemplatesRequest, ::ListTemplatesResponse>(
          [](TrainingCoordinator::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::ListTemplatesRequest* req,
             ::ListTemplatesResponse* resp) {
               return service->ListTemplates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrainingCoordinator_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrainingCoordinator::Service, ::GetSpireConfigRequest, ::GetSpireConfigResponse>(
          [](TrainingCoordinator::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GetSpireConfigRequest* req,
             ::GetSpireConfigResponse* resp) {
               return service->GetSpireConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrainingCoordinator_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrainingCoordinator::Service, ::EidCleanUpRequest, ::EidCleanUpResponse>(
          [](TrainingCoordinator::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::EidCleanUpRequest* req,
             ::EidCleanUpResponse* resp) {
               return service->EidCleanUp(ctx, req, resp);
             }, this)));
}

TrainingCoordinator::Service::~Service() {
}

::grpc::Status TrainingCoordinator::Service::Train(::grpc::ServerContext* context, const ::TrainRequest* request, ::TrainResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TrainingCoordinator::Service::GetStatus(::grpc::ServerContext* context, const ::GetStatusRequest* request, ::GetStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TrainingCoordinator::Service::GetEvaluations(::grpc::ServerContext* context, const ::GetEvaluationsRequest* request, ::GetEvaluationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TrainingCoordinator::Service::ListTemplates(::grpc::ServerContext* context, const ::ListTemplatesRequest* request, ::ListTemplatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TrainingCoordinator::Service::GetSpireConfig(::grpc::ServerContext* context, const ::GetSpireConfigRequest* request, ::GetSpireConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TrainingCoordinator::Service::EidCleanUp(::grpc::ServerContext* context, const ::EidCleanUpRequest* request, ::EidCleanUpResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


