// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/resources.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fapi_2fresources_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fapi_2fresources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/clarifai/api/status/status.pb.h"
#include "proto/clarifai/api/utils/extensions.pb.h"
#include "proto/clarifai/auth/util/extension.pb.h"
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[106]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto;
namespace clarifai {
namespace api {
class APIPostModelOutputsCollectorSource;
class APIPostModelOutputsCollectorSourceDefaultTypeInternal;
extern APIPostModelOutputsCollectorSourceDefaultTypeInternal _APIPostModelOutputsCollectorSource_default_instance_;
class And;
class AndDefaultTypeInternal;
extern AndDefaultTypeInternal _And_default_instance_;
class Annotation;
class AnnotationDefaultTypeInternal;
extern AnnotationDefaultTypeInternal _Annotation_default_instance_;
class AnnotationSummary;
class AnnotationSummaryDefaultTypeInternal;
extern AnnotationSummaryDefaultTypeInternal _AnnotationSummary_default_instance_;
class App;
class AppDefaultTypeInternal;
extern AppDefaultTypeInternal _App_default_instance_;
class AppDuplication;
class AppDuplicationDefaultTypeInternal;
extern AppDuplicationDefaultTypeInternal _AppDuplication_default_instance_;
class AttributeMixIn;
class AttributeMixInDefaultTypeInternal;
extern AttributeMixInDefaultTypeInternal _AttributeMixIn_default_instance_;
class AttributeQuery;
class AttributeQueryDefaultTypeInternal;
extern AttributeQueryDefaultTypeInternal _AttributeQuery_default_instance_;
class Audio;
class AudioDefaultTypeInternal;
extern AudioDefaultTypeInternal _Audio_default_instance_;
class BillingCycle;
class BillingCycleDefaultTypeInternal;
extern BillingCycleDefaultTypeInternal _BillingCycle_default_instance_;
class BinaryMetrics;
class BinaryMetricsDefaultTypeInternal;
extern BinaryMetricsDefaultTypeInternal _BinaryMetrics_default_instance_;
class BoundingBox;
class BoundingBoxDefaultTypeInternal;
extern BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;
class Cluster;
class ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class Collaboration;
class CollaborationDefaultTypeInternal;
extern CollaborationDefaultTypeInternal _Collaboration_default_instance_;
class Collaborator;
class CollaboratorDefaultTypeInternal;
extern CollaboratorDefaultTypeInternal _Collaborator_default_instance_;
class Collector;
class CollectorDefaultTypeInternal;
extern CollectorDefaultTypeInternal _Collector_default_instance_;
class CollectorSource;
class CollectorSourceDefaultTypeInternal;
extern CollectorSourceDefaultTypeInternal _CollectorSource_default_instance_;
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Concept;
class ConceptDefaultTypeInternal;
extern ConceptDefaultTypeInternal _Concept_default_instance_;
class ConceptCount;
class ConceptCountDefaultTypeInternal;
extern ConceptCountDefaultTypeInternal _ConceptCount_default_instance_;
class ConceptLanguage;
class ConceptLanguageDefaultTypeInternal;
extern ConceptLanguageDefaultTypeInternal _ConceptLanguage_default_instance_;
class ConceptMapping;
class ConceptMappingDefaultTypeInternal;
extern ConceptMappingDefaultTypeInternal _ConceptMapping_default_instance_;
class ConceptMappingJob;
class ConceptMappingJobDefaultTypeInternal;
extern ConceptMappingJobDefaultTypeInternal _ConceptMappingJob_default_instance_;
class ConceptQuery;
class ConceptQueryDefaultTypeInternal;
extern ConceptQueryDefaultTypeInternal _ConceptQuery_default_instance_;
class ConceptReference;
class ConceptReferenceDefaultTypeInternal;
extern ConceptReferenceDefaultTypeInternal _ConceptReference_default_instance_;
class ConceptRelation;
class ConceptRelationDefaultTypeInternal;
extern ConceptRelationDefaultTypeInternal _ConceptRelation_default_instance_;
class ConceptTypeCount;
class ConceptTypeCountDefaultTypeInternal;
extern ConceptTypeCountDefaultTypeInternal _ConceptTypeCount_default_instance_;
class ConfusionMatrix;
class ConfusionMatrixDefaultTypeInternal;
extern ConfusionMatrixDefaultTypeInternal _ConfusionMatrix_default_instance_;
class ConfusionMatrixEntry;
class ConfusionMatrixEntryDefaultTypeInternal;
extern ConfusionMatrixEntryDefaultTypeInternal _ConfusionMatrixEntry_default_instance_;
class CooccurrenceMatrix;
class CooccurrenceMatrixDefaultTypeInternal;
extern CooccurrenceMatrixDefaultTypeInternal _CooccurrenceMatrix_default_instance_;
class CooccurrenceMatrixEntry;
class CooccurrenceMatrixEntryDefaultTypeInternal;
extern CooccurrenceMatrixEntryDefaultTypeInternal _CooccurrenceMatrixEntry_default_instance_;
class CreditCard;
class CreditCardDefaultTypeInternal;
extern CreditCardDefaultTypeInternal _CreditCard_default_instance_;
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class DetailConceptCount;
class DetailConceptCountDefaultTypeInternal;
extern DetailConceptCountDefaultTypeInternal _DetailConceptCount_default_instance_;
class DimensionList;
class DimensionListDefaultTypeInternal;
extern DimensionListDefaultTypeInternal _DimensionList_default_instance_;
class DimensionList_DimensionEntry_DoNotUse;
class DimensionList_DimensionEntry_DoNotUseDefaultTypeInternal;
extern DimensionList_DimensionEntry_DoNotUseDefaultTypeInternal _DimensionList_DimensionEntry_DoNotUse_default_instance_;
class EmailAddress;
class EmailAddressDefaultTypeInternal;
extern EmailAddressDefaultTypeInternal _EmailAddress_default_instance_;
class Embedding;
class EmbeddingDefaultTypeInternal;
extern EmbeddingDefaultTypeInternal _Embedding_default_instance_;
class EndpointDeps;
class EndpointDepsDefaultTypeInternal;
extern EndpointDepsDefaultTypeInternal _EndpointDeps_default_instance_;
class EvalMetrics;
class EvalMetricsDefaultTypeInternal;
extern EvalMetricsDefaultTypeInternal _EvalMetrics_default_instance_;
class EvalTestSetEntry;
class EvalTestSetEntryDefaultTypeInternal;
extern EvalTestSetEntryDefaultTypeInternal _EvalTestSetEntry_default_instance_;
class EventSummary;
class EventSummaryDefaultTypeInternal;
extern EventSummaryDefaultTypeInternal _EventSummary_default_instance_;
class EventsCollection;
class EventsCollectionDefaultTypeInternal;
extern EventsCollectionDefaultTypeInternal _EventsCollection_default_instance_;
class Face;
class FaceDefaultTypeInternal;
extern FaceDefaultTypeInternal _Face_default_instance_;
class FaceAge;
class FaceAgeDefaultTypeInternal;
extern FaceAgeDefaultTypeInternal _FaceAge_default_instance_;
class FaceGenderIdentity;
class FaceGenderIdentityDefaultTypeInternal;
extern FaceGenderIdentityDefaultTypeInternal _FaceGenderIdentity_default_instance_;
class FaceIdentity;
class FaceIdentityDefaultTypeInternal;
extern FaceIdentityDefaultTypeInternal _FaceIdentity_default_instance_;
class FaceMCAffinity;
class FaceMCAffinityDefaultTypeInternal;
extern FaceMCAffinityDefaultTypeInternal _FaceMCAffinity_default_instance_;
class FieldsValue;
class FieldsValueDefaultTypeInternal;
extern FieldsValueDefaultTypeInternal _FieldsValue_default_instance_;
class Filter;
class FilterDefaultTypeInternal;
extern FilterDefaultTypeInternal _Filter_default_instance_;
class Focus;
class FocusDefaultTypeInternal;
extern FocusDefaultTypeInternal _Focus_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class FrameInfo;
class FrameInfoDefaultTypeInternal;
extern FrameInfoDefaultTypeInternal _FrameInfo_default_instance_;
class Geo;
class GeoDefaultTypeInternal;
extern GeoDefaultTypeInternal _Geo_default_instance_;
class GeoBoxedPoint;
class GeoBoxedPointDefaultTypeInternal;
extern GeoBoxedPointDefaultTypeInternal _GeoBoxedPoint_default_instance_;
class GeoLimit;
class GeoLimitDefaultTypeInternal;
extern GeoLimitDefaultTypeInternal _GeoLimit_default_instance_;
class GeoPoint;
class GeoPointDefaultTypeInternal;
extern GeoPointDefaultTypeInternal _GeoPoint_default_instance_;
class Hit;
class HitDefaultTypeInternal;
extern HitDefaultTypeInternal _Hit_default_instance_;
class HostedURL;
class HostedURLDefaultTypeInternal;
extern HostedURLDefaultTypeInternal _HostedURL_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Input;
class InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class InputCount;
class InputCountDefaultTypeInternal;
extern InputCountDefaultTypeInternal _InputCount_default_instance_;
class InvoiceItem;
class InvoiceItemDefaultTypeInternal;
extern InvoiceItemDefaultTypeInternal _InvoiceItem_default_instance_;
class Key;
class KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
class KnowledgeGraph;
class KnowledgeGraphDefaultTypeInternal;
extern KnowledgeGraphDefaultTypeInternal _KnowledgeGraph_default_instance_;
class LOPQEvalResult;
class LOPQEvalResultDefaultTypeInternal;
extern LOPQEvalResultDefaultTypeInternal _LOPQEvalResult_default_instance_;
class LabelCount;
class LabelCountDefaultTypeInternal;
extern LabelCountDefaultTypeInternal _LabelCount_default_instance_;
class LabelDistribution;
class LabelDistributionDefaultTypeInternal;
extern LabelDistributionDefaultTypeInternal _LabelDistribution_default_instance_;
class License;
class LicenseDefaultTypeInternal;
extern LicenseDefaultTypeInternal _License_default_instance_;
class LicenseLimit;
class LicenseLimitDefaultTypeInternal;
extern LicenseLimitDefaultTypeInternal _LicenseLimit_default_instance_;
class LossCurveEntry;
class LossCurveEntryDefaultTypeInternal;
extern LossCurveEntryDefaultTypeInternal _LossCurveEntry_default_instance_;
class Mask;
class MaskDefaultTypeInternal;
extern MaskDefaultTypeInternal _Mask_default_instance_;
class MetricsSummary;
class MetricsSummaryDefaultTypeInternal;
extern MetricsSummaryDefaultTypeInternal _MetricsSummary_default_instance_;
class Model;
class ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
class ModelQuery;
class ModelQueryDefaultTypeInternal;
extern ModelQueryDefaultTypeInternal _ModelQuery_default_instance_;
class ModelVersion;
class ModelVersionDefaultTypeInternal;
extern ModelVersionDefaultTypeInternal _ModelVersion_default_instance_;
class NodeInput;
class NodeInputDefaultTypeInternal;
extern NodeInputDefaultTypeInternal _NodeInput_default_instance_;
class Output;
class OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
class OutputConfig;
class OutputConfigDefaultTypeInternal;
extern OutputConfigDefaultTypeInternal _OutputConfig_default_instance_;
class OutputInfo;
class OutputInfoDefaultTypeInternal;
extern OutputInfoDefaultTypeInternal _OutputInfo_default_instance_;
class PatchAction;
class PatchActionDefaultTypeInternal;
extern PatchActionDefaultTypeInternal _PatchAction_default_instance_;
class Plan;
class PlanDefaultTypeInternal;
extern PlanDefaultTypeInternal _Plan_default_instance_;
class PrecisionRecallCurve;
class PrecisionRecallCurveDefaultTypeInternal;
extern PrecisionRecallCurveDefaultTypeInternal _PrecisionRecallCurve_default_instance_;
class PretrainedModelConfig;
class PretrainedModelConfigDefaultTypeInternal;
extern PretrainedModelConfigDefaultTypeInternal _PretrainedModelConfig_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class ROC;
class ROCDefaultTypeInternal;
extern ROCDefaultTypeInternal _ROC_default_instance_;
class Rank;
class RankDefaultTypeInternal;
extern RankDefaultTypeInternal _Rank_default_instance_;
class RealtimeCount;
class RealtimeCountDefaultTypeInternal;
extern RealtimeCountDefaultTypeInternal _RealtimeCount_default_instance_;
class Region;
class RegionDefaultTypeInternal;
extern RegionDefaultTypeInternal _Region_default_instance_;
class RegionInfo;
class RegionInfoDefaultTypeInternal;
extern RegionInfoDefaultTypeInternal _RegionInfo_default_instance_;
class ScopeDeps;
class ScopeDepsDefaultTypeInternal;
extern ScopeDepsDefaultTypeInternal _ScopeDeps_default_instance_;
class Search;
class SearchDefaultTypeInternal;
extern SearchDefaultTypeInternal _Search_default_instance_;
class Text;
class TextDefaultTypeInternal;
extern TextDefaultTypeInternal _Text_default_instance_;
class TrainStats;
class TrainStatsDefaultTypeInternal;
extern TrainStatsDefaultTypeInternal _TrainStats_default_instance_;
class UsageInterval;
class UsageIntervalDefaultTypeInternal;
extern UsageIntervalDefaultTypeInternal _UsageInterval_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserAppIDSet;
class UserAppIDSetDefaultTypeInternal;
extern UserAppIDSetDefaultTypeInternal _UserAppIDSet_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserPassword;
class UserPasswordDefaultTypeInternal;
extern UserPasswordDefaultTypeInternal _UserPassword_default_instance_;
class Video;
class VideoDefaultTypeInternal;
extern VideoDefaultTypeInternal _Video_default_instance_;
class Vocab;
class VocabDefaultTypeInternal;
extern VocabDefaultTypeInternal _Vocab_default_instance_;
class W3C;
class W3CDefaultTypeInternal;
extern W3CDefaultTypeInternal _W3C_default_instance_;
class Worker;
class WorkerDefaultTypeInternal;
extern WorkerDefaultTypeInternal _Worker_default_instance_;
class Workflow;
class WorkflowDefaultTypeInternal;
extern WorkflowDefaultTypeInternal _Workflow_default_instance_;
class WorkflowNode;
class WorkflowNodeDefaultTypeInternal;
extern WorkflowNodeDefaultTypeInternal _WorkflowNode_default_instance_;
class WorkflowResult;
class WorkflowResultDefaultTypeInternal;
extern WorkflowResultDefaultTypeInternal _WorkflowResult_default_instance_;
}  // namespace api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> ::clarifai::api::APIPostModelOutputsCollectorSource* Arena::CreateMaybeMessage<::clarifai::api::APIPostModelOutputsCollectorSource>(Arena*);
template<> ::clarifai::api::And* Arena::CreateMaybeMessage<::clarifai::api::And>(Arena*);
template<> ::clarifai::api::Annotation* Arena::CreateMaybeMessage<::clarifai::api::Annotation>(Arena*);
template<> ::clarifai::api::AnnotationSummary* Arena::CreateMaybeMessage<::clarifai::api::AnnotationSummary>(Arena*);
template<> ::clarifai::api::App* Arena::CreateMaybeMessage<::clarifai::api::App>(Arena*);
template<> ::clarifai::api::AppDuplication* Arena::CreateMaybeMessage<::clarifai::api::AppDuplication>(Arena*);
template<> ::clarifai::api::AttributeMixIn* Arena::CreateMaybeMessage<::clarifai::api::AttributeMixIn>(Arena*);
template<> ::clarifai::api::AttributeQuery* Arena::CreateMaybeMessage<::clarifai::api::AttributeQuery>(Arena*);
template<> ::clarifai::api::Audio* Arena::CreateMaybeMessage<::clarifai::api::Audio>(Arena*);
template<> ::clarifai::api::BillingCycle* Arena::CreateMaybeMessage<::clarifai::api::BillingCycle>(Arena*);
template<> ::clarifai::api::BinaryMetrics* Arena::CreateMaybeMessage<::clarifai::api::BinaryMetrics>(Arena*);
template<> ::clarifai::api::BoundingBox* Arena::CreateMaybeMessage<::clarifai::api::BoundingBox>(Arena*);
template<> ::clarifai::api::Cluster* Arena::CreateMaybeMessage<::clarifai::api::Cluster>(Arena*);
template<> ::clarifai::api::Collaboration* Arena::CreateMaybeMessage<::clarifai::api::Collaboration>(Arena*);
template<> ::clarifai::api::Collaborator* Arena::CreateMaybeMessage<::clarifai::api::Collaborator>(Arena*);
template<> ::clarifai::api::Collector* Arena::CreateMaybeMessage<::clarifai::api::Collector>(Arena*);
template<> ::clarifai::api::CollectorSource* Arena::CreateMaybeMessage<::clarifai::api::CollectorSource>(Arena*);
template<> ::clarifai::api::Color* Arena::CreateMaybeMessage<::clarifai::api::Color>(Arena*);
template<> ::clarifai::api::Concept* Arena::CreateMaybeMessage<::clarifai::api::Concept>(Arena*);
template<> ::clarifai::api::ConceptCount* Arena::CreateMaybeMessage<::clarifai::api::ConceptCount>(Arena*);
template<> ::clarifai::api::ConceptLanguage* Arena::CreateMaybeMessage<::clarifai::api::ConceptLanguage>(Arena*);
template<> ::clarifai::api::ConceptMapping* Arena::CreateMaybeMessage<::clarifai::api::ConceptMapping>(Arena*);
template<> ::clarifai::api::ConceptMappingJob* Arena::CreateMaybeMessage<::clarifai::api::ConceptMappingJob>(Arena*);
template<> ::clarifai::api::ConceptQuery* Arena::CreateMaybeMessage<::clarifai::api::ConceptQuery>(Arena*);
template<> ::clarifai::api::ConceptReference* Arena::CreateMaybeMessage<::clarifai::api::ConceptReference>(Arena*);
template<> ::clarifai::api::ConceptRelation* Arena::CreateMaybeMessage<::clarifai::api::ConceptRelation>(Arena*);
template<> ::clarifai::api::ConceptTypeCount* Arena::CreateMaybeMessage<::clarifai::api::ConceptTypeCount>(Arena*);
template<> ::clarifai::api::ConfusionMatrix* Arena::CreateMaybeMessage<::clarifai::api::ConfusionMatrix>(Arena*);
template<> ::clarifai::api::ConfusionMatrixEntry* Arena::CreateMaybeMessage<::clarifai::api::ConfusionMatrixEntry>(Arena*);
template<> ::clarifai::api::CooccurrenceMatrix* Arena::CreateMaybeMessage<::clarifai::api::CooccurrenceMatrix>(Arena*);
template<> ::clarifai::api::CooccurrenceMatrixEntry* Arena::CreateMaybeMessage<::clarifai::api::CooccurrenceMatrixEntry>(Arena*);
template<> ::clarifai::api::CreditCard* Arena::CreateMaybeMessage<::clarifai::api::CreditCard>(Arena*);
template<> ::clarifai::api::Data* Arena::CreateMaybeMessage<::clarifai::api::Data>(Arena*);
template<> ::clarifai::api::DetailConceptCount* Arena::CreateMaybeMessage<::clarifai::api::DetailConceptCount>(Arena*);
template<> ::clarifai::api::DimensionList* Arena::CreateMaybeMessage<::clarifai::api::DimensionList>(Arena*);
template<> ::clarifai::api::DimensionList_DimensionEntry_DoNotUse* Arena::CreateMaybeMessage<::clarifai::api::DimensionList_DimensionEntry_DoNotUse>(Arena*);
template<> ::clarifai::api::EmailAddress* Arena::CreateMaybeMessage<::clarifai::api::EmailAddress>(Arena*);
template<> ::clarifai::api::Embedding* Arena::CreateMaybeMessage<::clarifai::api::Embedding>(Arena*);
template<> ::clarifai::api::EndpointDeps* Arena::CreateMaybeMessage<::clarifai::api::EndpointDeps>(Arena*);
template<> ::clarifai::api::EvalMetrics* Arena::CreateMaybeMessage<::clarifai::api::EvalMetrics>(Arena*);
template<> ::clarifai::api::EvalTestSetEntry* Arena::CreateMaybeMessage<::clarifai::api::EvalTestSetEntry>(Arena*);
template<> ::clarifai::api::EventSummary* Arena::CreateMaybeMessage<::clarifai::api::EventSummary>(Arena*);
template<> ::clarifai::api::EventsCollection* Arena::CreateMaybeMessage<::clarifai::api::EventsCollection>(Arena*);
template<> ::clarifai::api::Face* Arena::CreateMaybeMessage<::clarifai::api::Face>(Arena*);
template<> ::clarifai::api::FaceAge* Arena::CreateMaybeMessage<::clarifai::api::FaceAge>(Arena*);
template<> ::clarifai::api::FaceGenderIdentity* Arena::CreateMaybeMessage<::clarifai::api::FaceGenderIdentity>(Arena*);
template<> ::clarifai::api::FaceIdentity* Arena::CreateMaybeMessage<::clarifai::api::FaceIdentity>(Arena*);
template<> ::clarifai::api::FaceMCAffinity* Arena::CreateMaybeMessage<::clarifai::api::FaceMCAffinity>(Arena*);
template<> ::clarifai::api::FieldsValue* Arena::CreateMaybeMessage<::clarifai::api::FieldsValue>(Arena*);
template<> ::clarifai::api::Filter* Arena::CreateMaybeMessage<::clarifai::api::Filter>(Arena*);
template<> ::clarifai::api::Focus* Arena::CreateMaybeMessage<::clarifai::api::Focus>(Arena*);
template<> ::clarifai::api::Frame* Arena::CreateMaybeMessage<::clarifai::api::Frame>(Arena*);
template<> ::clarifai::api::FrameInfo* Arena::CreateMaybeMessage<::clarifai::api::FrameInfo>(Arena*);
template<> ::clarifai::api::Geo* Arena::CreateMaybeMessage<::clarifai::api::Geo>(Arena*);
template<> ::clarifai::api::GeoBoxedPoint* Arena::CreateMaybeMessage<::clarifai::api::GeoBoxedPoint>(Arena*);
template<> ::clarifai::api::GeoLimit* Arena::CreateMaybeMessage<::clarifai::api::GeoLimit>(Arena*);
template<> ::clarifai::api::GeoPoint* Arena::CreateMaybeMessage<::clarifai::api::GeoPoint>(Arena*);
template<> ::clarifai::api::Hit* Arena::CreateMaybeMessage<::clarifai::api::Hit>(Arena*);
template<> ::clarifai::api::HostedURL* Arena::CreateMaybeMessage<::clarifai::api::HostedURL>(Arena*);
template<> ::clarifai::api::Image* Arena::CreateMaybeMessage<::clarifai::api::Image>(Arena*);
template<> ::clarifai::api::Input* Arena::CreateMaybeMessage<::clarifai::api::Input>(Arena*);
template<> ::clarifai::api::InputCount* Arena::CreateMaybeMessage<::clarifai::api::InputCount>(Arena*);
template<> ::clarifai::api::InvoiceItem* Arena::CreateMaybeMessage<::clarifai::api::InvoiceItem>(Arena*);
template<> ::clarifai::api::Key* Arena::CreateMaybeMessage<::clarifai::api::Key>(Arena*);
template<> ::clarifai::api::KnowledgeGraph* Arena::CreateMaybeMessage<::clarifai::api::KnowledgeGraph>(Arena*);
template<> ::clarifai::api::LOPQEvalResult* Arena::CreateMaybeMessage<::clarifai::api::LOPQEvalResult>(Arena*);
template<> ::clarifai::api::LabelCount* Arena::CreateMaybeMessage<::clarifai::api::LabelCount>(Arena*);
template<> ::clarifai::api::LabelDistribution* Arena::CreateMaybeMessage<::clarifai::api::LabelDistribution>(Arena*);
template<> ::clarifai::api::License* Arena::CreateMaybeMessage<::clarifai::api::License>(Arena*);
template<> ::clarifai::api::LicenseLimit* Arena::CreateMaybeMessage<::clarifai::api::LicenseLimit>(Arena*);
template<> ::clarifai::api::LossCurveEntry* Arena::CreateMaybeMessage<::clarifai::api::LossCurveEntry>(Arena*);
template<> ::clarifai::api::Mask* Arena::CreateMaybeMessage<::clarifai::api::Mask>(Arena*);
template<> ::clarifai::api::MetricsSummary* Arena::CreateMaybeMessage<::clarifai::api::MetricsSummary>(Arena*);
template<> ::clarifai::api::Model* Arena::CreateMaybeMessage<::clarifai::api::Model>(Arena*);
template<> ::clarifai::api::ModelQuery* Arena::CreateMaybeMessage<::clarifai::api::ModelQuery>(Arena*);
template<> ::clarifai::api::ModelVersion* Arena::CreateMaybeMessage<::clarifai::api::ModelVersion>(Arena*);
template<> ::clarifai::api::NodeInput* Arena::CreateMaybeMessage<::clarifai::api::NodeInput>(Arena*);
template<> ::clarifai::api::Output* Arena::CreateMaybeMessage<::clarifai::api::Output>(Arena*);
template<> ::clarifai::api::OutputConfig* Arena::CreateMaybeMessage<::clarifai::api::OutputConfig>(Arena*);
template<> ::clarifai::api::OutputInfo* Arena::CreateMaybeMessage<::clarifai::api::OutputInfo>(Arena*);
template<> ::clarifai::api::PatchAction* Arena::CreateMaybeMessage<::clarifai::api::PatchAction>(Arena*);
template<> ::clarifai::api::Plan* Arena::CreateMaybeMessage<::clarifai::api::Plan>(Arena*);
template<> ::clarifai::api::PrecisionRecallCurve* Arena::CreateMaybeMessage<::clarifai::api::PrecisionRecallCurve>(Arena*);
template<> ::clarifai::api::PretrainedModelConfig* Arena::CreateMaybeMessage<::clarifai::api::PretrainedModelConfig>(Arena*);
template<> ::clarifai::api::Query* Arena::CreateMaybeMessage<::clarifai::api::Query>(Arena*);
template<> ::clarifai::api::ROC* Arena::CreateMaybeMessage<::clarifai::api::ROC>(Arena*);
template<> ::clarifai::api::Rank* Arena::CreateMaybeMessage<::clarifai::api::Rank>(Arena*);
template<> ::clarifai::api::RealtimeCount* Arena::CreateMaybeMessage<::clarifai::api::RealtimeCount>(Arena*);
template<> ::clarifai::api::Region* Arena::CreateMaybeMessage<::clarifai::api::Region>(Arena*);
template<> ::clarifai::api::RegionInfo* Arena::CreateMaybeMessage<::clarifai::api::RegionInfo>(Arena*);
template<> ::clarifai::api::ScopeDeps* Arena::CreateMaybeMessage<::clarifai::api::ScopeDeps>(Arena*);
template<> ::clarifai::api::Search* Arena::CreateMaybeMessage<::clarifai::api::Search>(Arena*);
template<> ::clarifai::api::Text* Arena::CreateMaybeMessage<::clarifai::api::Text>(Arena*);
template<> ::clarifai::api::TrainStats* Arena::CreateMaybeMessage<::clarifai::api::TrainStats>(Arena*);
template<> ::clarifai::api::UsageInterval* Arena::CreateMaybeMessage<::clarifai::api::UsageInterval>(Arena*);
template<> ::clarifai::api::User* Arena::CreateMaybeMessage<::clarifai::api::User>(Arena*);
template<> ::clarifai::api::UserAppIDSet* Arena::CreateMaybeMessage<::clarifai::api::UserAppIDSet>(Arena*);
template<> ::clarifai::api::UserInfo* Arena::CreateMaybeMessage<::clarifai::api::UserInfo>(Arena*);
template<> ::clarifai::api::UserPassword* Arena::CreateMaybeMessage<::clarifai::api::UserPassword>(Arena*);
template<> ::clarifai::api::Video* Arena::CreateMaybeMessage<::clarifai::api::Video>(Arena*);
template<> ::clarifai::api::Vocab* Arena::CreateMaybeMessage<::clarifai::api::Vocab>(Arena*);
template<> ::clarifai::api::W3C* Arena::CreateMaybeMessage<::clarifai::api::W3C>(Arena*);
template<> ::clarifai::api::Worker* Arena::CreateMaybeMessage<::clarifai::api::Worker>(Arena*);
template<> ::clarifai::api::Workflow* Arena::CreateMaybeMessage<::clarifai::api::Workflow>(Arena*);
template<> ::clarifai::api::WorkflowNode* Arena::CreateMaybeMessage<::clarifai::api::WorkflowNode>(Arena*);
template<> ::clarifai::api::WorkflowResult* Arena::CreateMaybeMessage<::clarifai::api::WorkflowResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clarifai {
namespace api {

enum ExpirationAction : int {
  EXPIRATION_ACTION_NOT_SET = 0,
  DELAY = 1,
  EXPIRY = 2,
  ExpirationAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ExpirationAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ExpirationAction_IsValid(int value);
constexpr ExpirationAction ExpirationAction_MIN = EXPIRATION_ACTION_NOT_SET;
constexpr ExpirationAction ExpirationAction_MAX = EXPIRY;
constexpr int ExpirationAction_ARRAYSIZE = ExpirationAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExpirationAction_descriptor();
template<typename T>
inline const std::string& ExpirationAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExpirationAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExpirationAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExpirationAction_descriptor(), enum_t_value);
}
inline bool ExpirationAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExpirationAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExpirationAction>(
    ExpirationAction_descriptor(), name, value);
}
enum LicenseScope : int {
  LICENSE_SCOPE_NOT_SET = 0,
  PREDICT = 1,
  TRAIN = 2,
  SEARCH = 3,
  LicenseScope_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LicenseScope_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LicenseScope_IsValid(int value);
constexpr LicenseScope LicenseScope_MIN = LICENSE_SCOPE_NOT_SET;
constexpr LicenseScope LicenseScope_MAX = SEARCH;
constexpr int LicenseScope_ARRAYSIZE = LicenseScope_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LicenseScope_descriptor();
template<typename T>
inline const std::string& LicenseScope_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LicenseScope>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LicenseScope_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LicenseScope_descriptor(), enum_t_value);
}
inline bool LicenseScope_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LicenseScope* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LicenseScope>(
    LicenseScope_descriptor(), name, value);
}
enum ValueComparator : int {
  CONCEPT_THRESHOLD_NOT_SET = 0,
  GREATER_THAN = 1,
  GREATER_THAN_OR_EQUAL = 2,
  LESS_THAN = 3,
  LESS_THAN_OR_EQUAL = 4,
  EQUAL = 5,
  ValueComparator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ValueComparator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ValueComparator_IsValid(int value);
constexpr ValueComparator ValueComparator_MIN = CONCEPT_THRESHOLD_NOT_SET;
constexpr ValueComparator ValueComparator_MAX = EQUAL;
constexpr int ValueComparator_ARRAYSIZE = ValueComparator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValueComparator_descriptor();
template<typename T>
inline const std::string& ValueComparator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ValueComparator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ValueComparator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ValueComparator_descriptor(), enum_t_value);
}
inline bool ValueComparator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ValueComparator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ValueComparator>(
    ValueComparator_descriptor(), name, value);
}
enum APIEventType : int {
  API_EVENT_TYPE_NOT_SET = 0,
  ON_PREM_PREDICT = 1,
  ON_PREM_TRAIN = 2,
  ON_PREM_SEARCH = 3,
  APIEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  APIEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool APIEventType_IsValid(int value);
constexpr APIEventType APIEventType_MIN = API_EVENT_TYPE_NOT_SET;
constexpr APIEventType APIEventType_MAX = ON_PREM_SEARCH;
constexpr int APIEventType_ARRAYSIZE = APIEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APIEventType_descriptor();
template<typename T>
inline const std::string& APIEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, APIEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function APIEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    APIEventType_descriptor(), enum_t_value);
}
inline bool APIEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, APIEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<APIEventType>(
    APIEventType_descriptor(), name, value);
}
enum UsageIntervalType : int {
  undef = 0,
  day = 1,
  month = 2,
  year = 3,
  UsageIntervalType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UsageIntervalType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UsageIntervalType_IsValid(int value);
constexpr UsageIntervalType UsageIntervalType_MIN = undef;
constexpr UsageIntervalType UsageIntervalType_MAX = year;
constexpr int UsageIntervalType_ARRAYSIZE = UsageIntervalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UsageIntervalType_descriptor();
template<typename T>
inline const std::string& UsageIntervalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UsageIntervalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UsageIntervalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UsageIntervalType_descriptor(), enum_t_value);
}
inline bool UsageIntervalType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UsageIntervalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UsageIntervalType>(
    UsageIntervalType_descriptor(), name, value);
}
// ===================================================================

class Annotation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Annotation) */ {
 public:
  inline Annotation() : Annotation(nullptr) {}
  virtual ~Annotation();

  Annotation(const Annotation& from);
  Annotation(Annotation&& from) noexcept
    : Annotation() {
    *this = ::std::move(from);
  }

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Annotation& operator=(Annotation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Annotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Annotation* internal_default_instance() {
    return reinterpret_cast<const Annotation*>(
               &_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Annotation& a, Annotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Annotation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Annotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Annotation* New() const final {
    return CreateMaybeMessage<Annotation>(nullptr);
  }

  Annotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Annotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Annotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Annotation";
  }
  protected:
  explicit Annotation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kInputIdFieldNumber = 2,
    kWorkerIdFieldNumber = 4,
    kEmbedVersionIdFieldNumber = 5,
    kParentAnnotationIdFieldNumber = 6,
    kEmbedModelVersionIdFieldNumber = 14,
    kDataFieldNumber = 3,
    kStatusFieldNumber = 7,
    kCreatedAtFieldNumber = 8,
    kModifiedAtFieldNumber = 9,
    kAnnotationInfoFieldNumber = 13,
    kTrustedFieldNumber = 10,
    kDefaultFieldNumber = 12,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string input_id = 2;
  void clear_input_id();
  const std::string& input_id() const;
  void set_input_id(const std::string& value);
  void set_input_id(std::string&& value);
  void set_input_id(const char* value);
  void set_input_id(const char* value, size_t size);
  std::string* mutable_input_id();
  std::string* release_input_id();
  void set_allocated_input_id(std::string* input_id);
  private:
  const std::string& _internal_input_id() const;
  void _internal_set_input_id(const std::string& value);
  std::string* _internal_mutable_input_id();
  public:

  // string worker_id = 4;
  void clear_worker_id();
  const std::string& worker_id() const;
  void set_worker_id(const std::string& value);
  void set_worker_id(std::string&& value);
  void set_worker_id(const char* value);
  void set_worker_id(const char* value, size_t size);
  std::string* mutable_worker_id();
  std::string* release_worker_id();
  void set_allocated_worker_id(std::string* worker_id);
  private:
  const std::string& _internal_worker_id() const;
  void _internal_set_worker_id(const std::string& value);
  std::string* _internal_mutable_worker_id();
  public:

  // string embed_version_id = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_embed_version_id();
  PROTOBUF_DEPRECATED const std::string& embed_version_id() const;
  PROTOBUF_DEPRECATED void set_embed_version_id(const std::string& value);
  PROTOBUF_DEPRECATED void set_embed_version_id(std::string&& value);
  PROTOBUF_DEPRECATED void set_embed_version_id(const char* value);
  PROTOBUF_DEPRECATED void set_embed_version_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_embed_version_id();
  PROTOBUF_DEPRECATED std::string* release_embed_version_id();
  PROTOBUF_DEPRECATED void set_allocated_embed_version_id(std::string* embed_version_id);
  private:
  const std::string& _internal_embed_version_id() const;
  void _internal_set_embed_version_id(const std::string& value);
  std::string* _internal_mutable_embed_version_id();
  public:

  // string parent_annotation_id = 6;
  void clear_parent_annotation_id();
  const std::string& parent_annotation_id() const;
  void set_parent_annotation_id(const std::string& value);
  void set_parent_annotation_id(std::string&& value);
  void set_parent_annotation_id(const char* value);
  void set_parent_annotation_id(const char* value, size_t size);
  std::string* mutable_parent_annotation_id();
  std::string* release_parent_annotation_id();
  void set_allocated_parent_annotation_id(std::string* parent_annotation_id);
  private:
  const std::string& _internal_parent_annotation_id() const;
  void _internal_set_parent_annotation_id(const std::string& value);
  std::string* _internal_mutable_parent_annotation_id();
  public:

  // string embed_model_version_id = 14;
  void clear_embed_model_version_id();
  const std::string& embed_model_version_id() const;
  void set_embed_model_version_id(const std::string& value);
  void set_embed_model_version_id(std::string&& value);
  void set_embed_model_version_id(const char* value);
  void set_embed_model_version_id(const char* value, size_t size);
  std::string* mutable_embed_model_version_id();
  std::string* release_embed_model_version_id();
  void set_allocated_embed_model_version_id(std::string* embed_model_version_id);
  private:
  const std::string& _internal_embed_model_version_id() const;
  void _internal_set_embed_model_version_id(const std::string& value);
  std::string* _internal_mutable_embed_model_version_id();
  public:

  // .clarifai.api.Data data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::clarifai::api::Data* data);
  ::clarifai::api::Data* unsafe_arena_release_data();

  // .clarifai.api.status.Status status = 7;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .google.protobuf.Timestamp created_at = 8;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp modified_at = 9;
  bool has_modified_at() const;
  private:
  bool _internal_has_modified_at() const;
  public:
  void clear_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified_at();
  void set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified_at();
  public:
  void unsafe_arena_set_allocated_modified_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_modified_at();

  // .google.protobuf.Struct annotation_info = 13;
  bool has_annotation_info() const;
  private:
  bool _internal_has_annotation_info() const;
  public:
  void clear_annotation_info();
  const PROTOBUF_NAMESPACE_ID::Struct& annotation_info() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_annotation_info();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_annotation_info();
  void set_allocated_annotation_info(PROTOBUF_NAMESPACE_ID::Struct* annotation_info);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_annotation_info() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_annotation_info();
  public:
  void unsafe_arena_set_allocated_annotation_info(
      PROTOBUF_NAMESPACE_ID::Struct* annotation_info);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_annotation_info();

  // bool trusted = 10;
  void clear_trusted();
  bool trusted() const;
  void set_trusted(bool value);
  private:
  bool _internal_trusted() const;
  void _internal_set_trusted(bool value);
  public:

  // bool default = 12;
  void clear_default_();
  bool default_() const;
  void set_default_(bool value);
  private:
  bool _internal_default_() const;
  void _internal_set_default_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Annotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr embed_version_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_annotation_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr embed_model_version_id_;
  ::clarifai::api::Data* data_;
  ::clarifai::api::status::Status* status_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_at_;
  PROTOBUF_NAMESPACE_ID::Struct* annotation_info_;
  bool trusted_;
  bool default__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class App PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.App) */ {
 public:
  inline App() : App(nullptr) {}
  virtual ~App();

  App(const App& from);
  App(App&& from) noexcept
    : App() {
    *this = ::std::move(from);
  }

  inline App& operator=(const App& from) {
    CopyFrom(from);
    return *this;
  }
  inline App& operator=(App&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const App& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const App* internal_default_instance() {
    return reinterpret_cast<const App*>(
               &_App_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(App& a, App& b) {
    a.Swap(&b);
  }
  inline void Swap(App* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(App* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline App* New() const final {
    return CreateMaybeMessage<App>(nullptr);
  }

  App* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<App>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const App& from);
  void MergeFrom(const App& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(App* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.App";
  }
  protected:
  explicit App(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDefaultLanguageFieldNumber = 3,
    kDefaultWorkflowIdFieldNumber = 4,
    kUserIdFieldNumber = 5,
    kCreatedAtFieldNumber = 6,
    kLastInputAddedFieldNumber = 10,
    kInputCountFieldNumber = 11,
    kMetadataFieldNumber = 13,
    kLegalConsentStatusFieldNumber = 7,
    kActiveConceptCountFieldNumber = 12,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string default_language = 3;
  void clear_default_language();
  const std::string& default_language() const;
  void set_default_language(const std::string& value);
  void set_default_language(std::string&& value);
  void set_default_language(const char* value);
  void set_default_language(const char* value, size_t size);
  std::string* mutable_default_language();
  std::string* release_default_language();
  void set_allocated_default_language(std::string* default_language);
  private:
  const std::string& _internal_default_language() const;
  void _internal_set_default_language(const std::string& value);
  std::string* _internal_mutable_default_language();
  public:

  // string default_workflow_id = 4;
  void clear_default_workflow_id();
  const std::string& default_workflow_id() const;
  void set_default_workflow_id(const std::string& value);
  void set_default_workflow_id(std::string&& value);
  void set_default_workflow_id(const char* value);
  void set_default_workflow_id(const char* value, size_t size);
  std::string* mutable_default_workflow_id();
  std::string* release_default_workflow_id();
  void set_allocated_default_workflow_id(std::string* default_workflow_id);
  private:
  const std::string& _internal_default_workflow_id() const;
  void _internal_set_default_workflow_id(const std::string& value);
  std::string* _internal_mutable_default_workflow_id();
  public:

  // string user_id = 5;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .google.protobuf.Timestamp created_at = 6;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .clarifai.api.Input last_input_added = 10;
  bool has_last_input_added() const;
  private:
  bool _internal_has_last_input_added() const;
  public:
  void clear_last_input_added();
  const ::clarifai::api::Input& last_input_added() const;
  ::clarifai::api::Input* release_last_input_added();
  ::clarifai::api::Input* mutable_last_input_added();
  void set_allocated_last_input_added(::clarifai::api::Input* last_input_added);
  private:
  const ::clarifai::api::Input& _internal_last_input_added() const;
  ::clarifai::api::Input* _internal_mutable_last_input_added();
  public:
  void unsafe_arena_set_allocated_last_input_added(
      ::clarifai::api::Input* last_input_added);
  ::clarifai::api::Input* unsafe_arena_release_last_input_added();

  // .clarifai.api.InputCount input_count = 11;
  bool has_input_count() const;
  private:
  bool _internal_has_input_count() const;
  public:
  void clear_input_count();
  const ::clarifai::api::InputCount& input_count() const;
  ::clarifai::api::InputCount* release_input_count();
  ::clarifai::api::InputCount* mutable_input_count();
  void set_allocated_input_count(::clarifai::api::InputCount* input_count);
  private:
  const ::clarifai::api::InputCount& _internal_input_count() const;
  ::clarifai::api::InputCount* _internal_mutable_input_count();
  public:
  void unsafe_arena_set_allocated_input_count(
      ::clarifai::api::InputCount* input_count);
  ::clarifai::api::InputCount* unsafe_arena_release_input_count();

  // .google.protobuf.Struct metadata = 13;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      PROTOBUF_NAMESPACE_ID::Struct* metadata);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_metadata();

  // uint32 legal_consent_status = 7;
  void clear_legal_consent_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 legal_consent_status() const;
  void set_legal_consent_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_legal_consent_status() const;
  void _internal_set_legal_consent_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 active_concept_count = 12 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_active_concept_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 active_concept_count() const;
  void set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_active_concept_count() const;
  void _internal_set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.App)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_workflow_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::clarifai::api::Input* last_input_added_;
  ::clarifai::api::InputCount* input_count_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 legal_consent_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 active_concept_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Collaborator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Collaborator) */ {
 public:
  inline Collaborator() : Collaborator(nullptr) {}
  virtual ~Collaborator();

  Collaborator(const Collaborator& from);
  Collaborator(Collaborator&& from) noexcept
    : Collaborator() {
    *this = ::std::move(from);
  }

  inline Collaborator& operator=(const Collaborator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collaborator& operator=(Collaborator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Collaborator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Collaborator* internal_default_instance() {
    return reinterpret_cast<const Collaborator*>(
               &_Collaborator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Collaborator& a, Collaborator& b) {
    a.Swap(&b);
  }
  inline void Swap(Collaborator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Collaborator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collaborator* New() const final {
    return CreateMaybeMessage<Collaborator>(nullptr);
  }

  Collaborator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collaborator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Collaborator& from);
  void MergeFrom(const Collaborator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collaborator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Collaborator";
  }
  protected:
  explicit Collaborator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 4,
    kEndpointsFieldNumber = 5,
    kIdFieldNumber = 1,
    kAppFieldNumber = 2,
    kUserFieldNumber = 3,
    kCreatedAtFieldNumber = 6,
  };
  // repeated string scopes = 4;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;
  public:
  void clear_scopes();
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes();
  private:
  const std::string& _internal_scopes(int index) const;
  std::string* _internal_add_scopes();
  public:

  // repeated string endpoints = 5;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  const std::string& endpoints(int index) const;
  std::string* mutable_endpoints(int index);
  void set_endpoints(int index, const std::string& value);
  void set_endpoints(int index, std::string&& value);
  void set_endpoints(int index, const char* value);
  void set_endpoints(int index, const char* value, size_t size);
  std::string* add_endpoints();
  void add_endpoints(const std::string& value);
  void add_endpoints(std::string&& value);
  void add_endpoints(const char* value);
  void add_endpoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_endpoints();
  private:
  const std::string& _internal_endpoints(int index) const;
  std::string* _internal_add_endpoints();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.App app = 2;
  bool has_app() const;
  private:
  bool _internal_has_app() const;
  public:
  void clear_app();
  const ::clarifai::api::App& app() const;
  ::clarifai::api::App* release_app();
  ::clarifai::api::App* mutable_app();
  void set_allocated_app(::clarifai::api::App* app);
  private:
  const ::clarifai::api::App& _internal_app() const;
  ::clarifai::api::App* _internal_mutable_app();
  public:
  void unsafe_arena_set_allocated_app(
      ::clarifai::api::App* app);
  ::clarifai::api::App* unsafe_arena_release_app();

  // .clarifai.api.User user = 3;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::clarifai::api::User& user() const;
  ::clarifai::api::User* release_user();
  ::clarifai::api::User* mutable_user();
  void set_allocated_user(::clarifai::api::User* user);
  private:
  const ::clarifai::api::User& _internal_user() const;
  ::clarifai::api::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::clarifai::api::User* user);
  ::clarifai::api::User* unsafe_arena_release_user();

  // .google.protobuf.Timestamp created_at = 6;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // @@protoc_insertion_point(class_scope:clarifai.api.Collaborator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> endpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::App* app_;
  ::clarifai::api::User* user_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Collaboration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Collaboration) */ {
 public:
  inline Collaboration() : Collaboration(nullptr) {}
  virtual ~Collaboration();

  Collaboration(const Collaboration& from);
  Collaboration(Collaboration&& from) noexcept
    : Collaboration() {
    *this = ::std::move(from);
  }

  inline Collaboration& operator=(const Collaboration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collaboration& operator=(Collaboration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Collaboration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Collaboration* internal_default_instance() {
    return reinterpret_cast<const Collaboration*>(
               &_Collaboration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Collaboration& a, Collaboration& b) {
    a.Swap(&b);
  }
  inline void Swap(Collaboration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Collaboration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collaboration* New() const final {
    return CreateMaybeMessage<Collaboration>(nullptr);
  }

  Collaboration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collaboration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Collaboration& from);
  void MergeFrom(const Collaboration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collaboration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Collaboration";
  }
  protected:
  explicit Collaboration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 3,
    kEndpointsFieldNumber = 4,
    kAppFieldNumber = 1,
    kAppOwnerFieldNumber = 2,
    kCreatedAtFieldNumber = 5,
  };
  // repeated string scopes = 3;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;
  public:
  void clear_scopes();
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes();
  private:
  const std::string& _internal_scopes(int index) const;
  std::string* _internal_add_scopes();
  public:

  // repeated string endpoints = 4;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  const std::string& endpoints(int index) const;
  std::string* mutable_endpoints(int index);
  void set_endpoints(int index, const std::string& value);
  void set_endpoints(int index, std::string&& value);
  void set_endpoints(int index, const char* value);
  void set_endpoints(int index, const char* value, size_t size);
  std::string* add_endpoints();
  void add_endpoints(const std::string& value);
  void add_endpoints(std::string&& value);
  void add_endpoints(const char* value);
  void add_endpoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_endpoints();
  private:
  const std::string& _internal_endpoints(int index) const;
  std::string* _internal_add_endpoints();
  public:

  // .clarifai.api.App app = 1;
  bool has_app() const;
  private:
  bool _internal_has_app() const;
  public:
  void clear_app();
  const ::clarifai::api::App& app() const;
  ::clarifai::api::App* release_app();
  ::clarifai::api::App* mutable_app();
  void set_allocated_app(::clarifai::api::App* app);
  private:
  const ::clarifai::api::App& _internal_app() const;
  ::clarifai::api::App* _internal_mutable_app();
  public:
  void unsafe_arena_set_allocated_app(
      ::clarifai::api::App* app);
  ::clarifai::api::App* unsafe_arena_release_app();

  // .clarifai.api.User app_owner = 2;
  bool has_app_owner() const;
  private:
  bool _internal_has_app_owner() const;
  public:
  void clear_app_owner();
  const ::clarifai::api::User& app_owner() const;
  ::clarifai::api::User* release_app_owner();
  ::clarifai::api::User* mutable_app_owner();
  void set_allocated_app_owner(::clarifai::api::User* app_owner);
  private:
  const ::clarifai::api::User& _internal_app_owner() const;
  ::clarifai::api::User* _internal_mutable_app_owner();
  public:
  void unsafe_arena_set_allocated_app_owner(
      ::clarifai::api::User* app_owner);
  ::clarifai::api::User* unsafe_arena_release_app_owner();

  // .google.protobuf.Timestamp created_at = 5;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // @@protoc_insertion_point(class_scope:clarifai.api.Collaboration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> endpoints_;
  ::clarifai::api::App* app_;
  ::clarifai::api::User* app_owner_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Audio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Audio) */ {
 public:
  inline Audio() : Audio(nullptr) {}
  virtual ~Audio();

  Audio(const Audio& from);
  Audio(Audio&& from) noexcept
    : Audio() {
    *this = ::std::move(from);
  }

  inline Audio& operator=(const Audio& from) {
    CopyFrom(from);
    return *this;
  }
  inline Audio& operator=(Audio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Audio& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Audio* internal_default_instance() {
    return reinterpret_cast<const Audio*>(
               &_Audio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Audio& a, Audio& b) {
    a.Swap(&b);
  }
  inline void Swap(Audio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Audio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Audio* New() const final {
    return CreateMaybeMessage<Audio>(nullptr);
  }

  Audio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Audio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Audio& from);
  void MergeFrom(const Audio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Audio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Audio";
  }
  protected:
  explicit Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kBase64FieldNumber = 2,
    kAllowDuplicateUrlFieldNumber = 4,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes base64 = 2;
  void clear_base64();
  const std::string& base64() const;
  void set_base64(const std::string& value);
  void set_base64(std::string&& value);
  void set_base64(const char* value);
  void set_base64(const void* value, size_t size);
  std::string* mutable_base64();
  std::string* release_base64();
  void set_allocated_base64(std::string* base64);
  private:
  const std::string& _internal_base64() const;
  void _internal_set_base64(const std::string& value);
  std::string* _internal_mutable_base64();
  public:

  // bool allow_duplicate_url = 4;
  void clear_allow_duplicate_url();
  bool allow_duplicate_url() const;
  void set_allow_duplicate_url(bool value);
  private:
  bool _internal_allow_duplicate_url() const;
  void _internal_set_allow_duplicate_url(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Audio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base64_;
  bool allow_duplicate_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class BillingCycle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.BillingCycle) */ {
 public:
  inline BillingCycle() : BillingCycle(nullptr) {}
  virtual ~BillingCycle();

  BillingCycle(const BillingCycle& from);
  BillingCycle(BillingCycle&& from) noexcept
    : BillingCycle() {
    *this = ::std::move(from);
  }

  inline BillingCycle& operator=(const BillingCycle& from) {
    CopyFrom(from);
    return *this;
  }
  inline BillingCycle& operator=(BillingCycle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BillingCycle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BillingCycle* internal_default_instance() {
    return reinterpret_cast<const BillingCycle*>(
               &_BillingCycle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BillingCycle& a, BillingCycle& b) {
    a.Swap(&b);
  }
  inline void Swap(BillingCycle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BillingCycle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BillingCycle* New() const final {
    return CreateMaybeMessage<BillingCycle>(nullptr);
  }

  BillingCycle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BillingCycle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BillingCycle& from);
  void MergeFrom(const BillingCycle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BillingCycle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.BillingCycle";
  }
  protected:
  explicit BillingCycle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartDateFieldNumber = 1,
    kEndDateFieldNumber = 2,
    kCycleIdFieldNumber = 3,
  };
  // .google.protobuf.Timestamp start_date = 1;
  bool has_start_date() const;
  private:
  bool _internal_has_start_date() const;
  public:
  void clear_start_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_date();
  void set_allocated_start_date(PROTOBUF_NAMESPACE_ID::Timestamp* start_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_date();
  public:
  void unsafe_arena_set_allocated_start_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_date();

  // .google.protobuf.Timestamp end_date = 2;
  bool has_end_date() const;
  private:
  bool _internal_has_end_date() const;
  public:
  void clear_end_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_date();
  void set_allocated_end_date(PROTOBUF_NAMESPACE_ID::Timestamp* end_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_date();
  public:
  void unsafe_arena_set_allocated_end_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_date();

  // int32 cycle_id = 3;
  void clear_cycle_id();
  ::PROTOBUF_NAMESPACE_ID::int32 cycle_id() const;
  void set_cycle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cycle_id() const;
  void _internal_set_cycle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.BillingCycle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_date_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 cycle_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class InvoiceItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.InvoiceItem) */ {
 public:
  inline InvoiceItem() : InvoiceItem(nullptr) {}
  virtual ~InvoiceItem();

  InvoiceItem(const InvoiceItem& from);
  InvoiceItem(InvoiceItem&& from) noexcept
    : InvoiceItem() {
    *this = ::std::move(from);
  }

  inline InvoiceItem& operator=(const InvoiceItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvoiceItem& operator=(InvoiceItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvoiceItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvoiceItem* internal_default_instance() {
    return reinterpret_cast<const InvoiceItem*>(
               &_InvoiceItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InvoiceItem& a, InvoiceItem& b) {
    a.Swap(&b);
  }
  inline void Swap(InvoiceItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvoiceItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvoiceItem* New() const final {
    return CreateMaybeMessage<InvoiceItem>(nullptr);
  }

  InvoiceItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvoiceItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvoiceItem& from);
  void MergeFrom(const InvoiceItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvoiceItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.InvoiceItem";
  }
  protected:
  explicit InvoiceItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpTypeFieldNumber = 1,
    kBillTypeFieldNumber = 2,
    kNotesFieldNumber = 6,
    kPricePerOpFieldNumber = 3,
    kCountFieldNumber = 4,
    kDollarsFieldNumber = 5,
  };
  // string op_type = 1;
  void clear_op_type();
  const std::string& op_type() const;
  void set_op_type(const std::string& value);
  void set_op_type(std::string&& value);
  void set_op_type(const char* value);
  void set_op_type(const char* value, size_t size);
  std::string* mutable_op_type();
  std::string* release_op_type();
  void set_allocated_op_type(std::string* op_type);
  private:
  const std::string& _internal_op_type() const;
  void _internal_set_op_type(const std::string& value);
  std::string* _internal_mutable_op_type();
  public:

  // string bill_type = 2;
  void clear_bill_type();
  const std::string& bill_type() const;
  void set_bill_type(const std::string& value);
  void set_bill_type(std::string&& value);
  void set_bill_type(const char* value);
  void set_bill_type(const char* value, size_t size);
  std::string* mutable_bill_type();
  std::string* release_bill_type();
  void set_allocated_bill_type(std::string* bill_type);
  private:
  const std::string& _internal_bill_type() const;
  void _internal_set_bill_type(const std::string& value);
  std::string* _internal_mutable_bill_type();
  public:

  // string notes = 6;
  void clear_notes();
  const std::string& notes() const;
  void set_notes(const std::string& value);
  void set_notes(std::string&& value);
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  std::string* mutable_notes();
  std::string* release_notes();
  void set_allocated_notes(std::string* notes);
  private:
  const std::string& _internal_notes() const;
  void _internal_set_notes(const std::string& value);
  std::string* _internal_mutable_notes();
  public:

  // double price_per_op = 3;
  void clear_price_per_op();
  double price_per_op() const;
  void set_price_per_op(double value);
  private:
  double _internal_price_per_op() const;
  void _internal_set_price_per_op(double value);
  public:

  // double count = 4;
  void clear_count();
  double count() const;
  void set_count(double value);
  private:
  double _internal_count() const;
  void _internal_set_count(double value);
  public:

  // double dollars = 5;
  void clear_dollars();
  double dollars() const;
  void set_dollars(double value);
  private:
  double _internal_dollars() const;
  void _internal_set_dollars(double value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.InvoiceItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bill_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  double price_per_op_;
  double count_;
  double dollars_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Cluster PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Cluster) */ {
 public:
  inline Cluster() : Cluster(nullptr) {}
  virtual ~Cluster();

  Cluster(const Cluster& from);
  Cluster(Cluster&& from) noexcept
    : Cluster() {
    *this = ::std::move(from);
  }

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cluster& operator=(Cluster&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cluster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Cluster& a, Cluster& b) {
    a.Swap(&b);
  }
  inline void Swap(Cluster* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cluster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cluster* New() const final {
    return CreateMaybeMessage<Cluster>(nullptr);
  }

  Cluster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cluster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cluster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Cluster";
  }
  protected:
  explicit Cluster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitsFieldNumber = 4,
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kScoreFieldNumber = 3,
  };
  // repeated .clarifai.api.Hit hits = 4;
  int hits_size() const;
  private:
  int _internal_hits_size() const;
  public:
  void clear_hits();
  ::clarifai::api::Hit* mutable_hits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >*
      mutable_hits();
  private:
  const ::clarifai::api::Hit& _internal_hits(int index) const;
  ::clarifai::api::Hit* _internal_add_hits();
  public:
  const ::clarifai::api::Hit& hits(int index) const;
  ::clarifai::api::Hit* add_hits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >&
      hits() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float score = 3;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Cluster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit > hits_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Color PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  virtual ~Color();

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawHexFieldNumber = 1,
    kW3CFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string raw_hex = 1;
  void clear_raw_hex();
  const std::string& raw_hex() const;
  void set_raw_hex(const std::string& value);
  void set_raw_hex(std::string&& value);
  void set_raw_hex(const char* value);
  void set_raw_hex(const char* value, size_t size);
  std::string* mutable_raw_hex();
  std::string* release_raw_hex();
  void set_allocated_raw_hex(std::string* raw_hex);
  private:
  const std::string& _internal_raw_hex() const;
  void _internal_set_raw_hex(const std::string& value);
  std::string* _internal_mutable_raw_hex();
  public:

  // .clarifai.api.W3C w3c = 2;
  bool has_w3c() const;
  private:
  bool _internal_has_w3c() const;
  public:
  void clear_w3c();
  const ::clarifai::api::W3C& w3c() const;
  ::clarifai::api::W3C* release_w3c();
  ::clarifai::api::W3C* mutable_w3c();
  void set_allocated_w3c(::clarifai::api::W3C* w3c);
  private:
  const ::clarifai::api::W3C& _internal_w3c() const;
  ::clarifai::api::W3C* _internal_mutable_w3c();
  public:
  void unsafe_arena_set_allocated_w3c(
      ::clarifai::api::W3C* w3c);
  ::clarifai::api::W3C* unsafe_arena_release_w3c();

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_hex_;
  ::clarifai::api::W3C* w3c_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class W3C PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.W3C) */ {
 public:
  inline W3C() : W3C(nullptr) {}
  virtual ~W3C();

  W3C(const W3C& from);
  W3C(W3C&& from) noexcept
    : W3C() {
    *this = ::std::move(from);
  }

  inline W3C& operator=(const W3C& from) {
    CopyFrom(from);
    return *this;
  }
  inline W3C& operator=(W3C&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const W3C& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const W3C* internal_default_instance() {
    return reinterpret_cast<const W3C*>(
               &_W3C_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(W3C& a, W3C& b) {
    a.Swap(&b);
  }
  inline void Swap(W3C* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(W3C* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline W3C* New() const final {
    return CreateMaybeMessage<W3C>(nullptr);
  }

  W3C* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<W3C>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const W3C& from);
  void MergeFrom(const W3C& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(W3C* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.W3C";
  }
  protected:
  explicit W3C(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHexFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string hex = 1;
  void clear_hex();
  const std::string& hex() const;
  void set_hex(const std::string& value);
  void set_hex(std::string&& value);
  void set_hex(const char* value);
  void set_hex(const char* value, size_t size);
  std::string* mutable_hex();
  std::string* release_hex();
  void set_allocated_hex(std::string* hex);
  private:
  const std::string& _internal_hex() const;
  void _internal_set_hex(const std::string& value);
  std::string* _internal_mutable_hex();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.W3C)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class UserAppIDSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.UserAppIDSet) */ {
 public:
  inline UserAppIDSet() : UserAppIDSet(nullptr) {}
  virtual ~UserAppIDSet();

  UserAppIDSet(const UserAppIDSet& from);
  UserAppIDSet(UserAppIDSet&& from) noexcept
    : UserAppIDSet() {
    *this = ::std::move(from);
  }

  inline UserAppIDSet& operator=(const UserAppIDSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAppIDSet& operator=(UserAppIDSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserAppIDSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAppIDSet* internal_default_instance() {
    return reinterpret_cast<const UserAppIDSet*>(
               &_UserAppIDSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UserAppIDSet& a, UserAppIDSet& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAppIDSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserAppIDSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserAppIDSet* New() const final {
    return CreateMaybeMessage<UserAppIDSet>(nullptr);
  }

  UserAppIDSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserAppIDSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserAppIDSet& from);
  void MergeFrom(const UserAppIDSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAppIDSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.UserAppIDSet";
  }
  protected:
  explicit UserAppIDSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string app_id = 2;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.UserAppIDSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class PatchAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchAction) */ {
 public:
  inline PatchAction() : PatchAction(nullptr) {}
  virtual ~PatchAction();

  PatchAction(const PatchAction& from);
  PatchAction(PatchAction&& from) noexcept
    : PatchAction() {
    *this = ::std::move(from);
  }

  inline PatchAction& operator=(const PatchAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchAction& operator=(PatchAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchAction* internal_default_instance() {
    return reinterpret_cast<const PatchAction*>(
               &_PatchAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PatchAction& a, PatchAction& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchAction* New() const final {
    return CreateMaybeMessage<PatchAction>(nullptr);
  }

  PatchAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchAction& from);
  void MergeFrom(const PatchAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchAction";
  }
  protected:
  explicit PatchAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
    kMergeConflictResolutionFieldNumber = 2,
    kPathFieldNumber = 3,
  };
  // string op = 1;
  void clear_op();
  const std::string& op() const;
  void set_op(const std::string& value);
  void set_op(std::string&& value);
  void set_op(const char* value);
  void set_op(const char* value, size_t size);
  std::string* mutable_op();
  std::string* release_op();
  void set_allocated_op(std::string* op);
  private:
  const std::string& _internal_op() const;
  void _internal_set_op(const std::string& value);
  std::string* _internal_mutable_op();
  public:

  // string merge_conflict_resolution = 2;
  void clear_merge_conflict_resolution();
  const std::string& merge_conflict_resolution() const;
  void set_merge_conflict_resolution(const std::string& value);
  void set_merge_conflict_resolution(std::string&& value);
  void set_merge_conflict_resolution(const char* value);
  void set_merge_conflict_resolution(const char* value, size_t size);
  std::string* mutable_merge_conflict_resolution();
  std::string* release_merge_conflict_resolution();
  void set_allocated_merge_conflict_resolution(std::string* merge_conflict_resolution);
  private:
  const std::string& _internal_merge_conflict_resolution() const;
  void _internal_set_merge_conflict_resolution(const std::string& value);
  std::string* _internal_mutable_merge_conflict_resolution();
  public:

  // string path = 3;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merge_conflict_resolution_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Concept PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Concept) */ {
 public:
  inline Concept() : Concept(nullptr) {}
  virtual ~Concept();

  Concept(const Concept& from);
  Concept(Concept&& from) noexcept
    : Concept() {
    *this = ::std::move(from);
  }

  inline Concept& operator=(const Concept& from) {
    CopyFrom(from);
    return *this;
  }
  inline Concept& operator=(Concept&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Concept& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Concept* internal_default_instance() {
    return reinterpret_cast<const Concept*>(
               &_Concept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Concept& a, Concept& b) {
    a.Swap(&b);
  }
  inline void Swap(Concept* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Concept* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Concept* New() const final {
    return CreateMaybeMessage<Concept>(nullptr);
  }

  Concept* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Concept>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Concept& from);
  void MergeFrom(const Concept& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Concept* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Concept";
  }
  protected:
  explicit Concept(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kLanguageFieldNumber = 5,
    kAppIdFieldNumber = 6,
    kDefinitionFieldNumber = 7,
    kCreatedAtFieldNumber = 4,
    kValueFieldNumber = 3,
    kIsVirtualFieldNumber = 8,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string language = 5;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string app_id = 6;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string definition = 7;
  void clear_definition();
  const std::string& definition() const;
  void set_definition(const std::string& value);
  void set_definition(std::string&& value);
  void set_definition(const char* value);
  void set_definition(const char* value, size_t size);
  std::string* mutable_definition();
  std::string* release_definition();
  void set_allocated_definition(std::string* definition);
  private:
  const std::string& _internal_definition() const;
  void _internal_set_definition(const std::string& value);
  std::string* _internal_mutable_definition();
  public:

  // .google.protobuf.Timestamp created_at = 4;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_default_float) = 1];
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // bool is_virtual = 8;
  void clear_is_virtual();
  bool is_virtual() const;
  void set_is_virtual(bool value);
  private:
  bool _internal_is_virtual() const;
  void _internal_set_is_virtual(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Concept)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr definition_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  float value_;
  bool is_virtual_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConceptCount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptCount) */ {
 public:
  inline ConceptCount() : ConceptCount(nullptr) {}
  virtual ~ConceptCount();

  ConceptCount(const ConceptCount& from);
  ConceptCount(ConceptCount&& from) noexcept
    : ConceptCount() {
    *this = ::std::move(from);
  }

  inline ConceptCount& operator=(const ConceptCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptCount& operator=(ConceptCount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptCount* internal_default_instance() {
    return reinterpret_cast<const ConceptCount*>(
               &_ConceptCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ConceptCount& a, ConceptCount& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptCount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConceptCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptCount* New() const final {
    return CreateMaybeMessage<ConceptCount>(nullptr);
  }

  ConceptCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptCount& from);
  void MergeFrom(const ConceptCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptCount";
  }
  protected:
  explicit ConceptCount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kConceptTypeCountFieldNumber = 3,
    kDetailConceptCountFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .clarifai.api.ConceptTypeCount concept_type_count = 3;
  bool has_concept_type_count() const;
  private:
  bool _internal_has_concept_type_count() const;
  public:
  void clear_concept_type_count();
  const ::clarifai::api::ConceptTypeCount& concept_type_count() const;
  ::clarifai::api::ConceptTypeCount* release_concept_type_count();
  ::clarifai::api::ConceptTypeCount* mutable_concept_type_count();
  void set_allocated_concept_type_count(::clarifai::api::ConceptTypeCount* concept_type_count);
  private:
  const ::clarifai::api::ConceptTypeCount& _internal_concept_type_count() const;
  ::clarifai::api::ConceptTypeCount* _internal_mutable_concept_type_count();
  public:
  void unsafe_arena_set_allocated_concept_type_count(
      ::clarifai::api::ConceptTypeCount* concept_type_count);
  ::clarifai::api::ConceptTypeCount* unsafe_arena_release_concept_type_count();

  // .clarifai.api.DetailConceptCount detail_concept_count = 4;
  bool has_detail_concept_count() const;
  private:
  bool _internal_has_detail_concept_count() const;
  public:
  void clear_detail_concept_count();
  const ::clarifai::api::DetailConceptCount& detail_concept_count() const;
  ::clarifai::api::DetailConceptCount* release_detail_concept_count();
  ::clarifai::api::DetailConceptCount* mutable_detail_concept_count();
  void set_allocated_detail_concept_count(::clarifai::api::DetailConceptCount* detail_concept_count);
  private:
  const ::clarifai::api::DetailConceptCount& _internal_detail_concept_count() const;
  ::clarifai::api::DetailConceptCount* _internal_mutable_detail_concept_count();
  public:
  void unsafe_arena_set_allocated_detail_concept_count(
      ::clarifai::api::DetailConceptCount* detail_concept_count);
  ::clarifai::api::DetailConceptCount* unsafe_arena_release_detail_concept_count();

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::clarifai::api::ConceptTypeCount* concept_type_count_;
  ::clarifai::api::DetailConceptCount* detail_concept_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConceptTypeCount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptTypeCount) */ {
 public:
  inline ConceptTypeCount() : ConceptTypeCount(nullptr) {}
  virtual ~ConceptTypeCount();

  ConceptTypeCount(const ConceptTypeCount& from);
  ConceptTypeCount(ConceptTypeCount&& from) noexcept
    : ConceptTypeCount() {
    *this = ::std::move(from);
  }

  inline ConceptTypeCount& operator=(const ConceptTypeCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptTypeCount& operator=(ConceptTypeCount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptTypeCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptTypeCount* internal_default_instance() {
    return reinterpret_cast<const ConceptTypeCount*>(
               &_ConceptTypeCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ConceptTypeCount& a, ConceptTypeCount& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptTypeCount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConceptTypeCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptTypeCount* New() const final {
    return CreateMaybeMessage<ConceptTypeCount>(nullptr);
  }

  ConceptTypeCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptTypeCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptTypeCount& from);
  void MergeFrom(const ConceptTypeCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptTypeCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptTypeCount";
  }
  protected:
  explicit ConceptTypeCount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositiveFieldNumber = 1,
    kNegativeFieldNumber = 2,
  };
  // uint32 positive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_positive();
  ::PROTOBUF_NAMESPACE_ID::uint32 positive() const;
  void set_positive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_positive() const;
  void _internal_set_positive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 negative = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_negative();
  ::PROTOBUF_NAMESPACE_ID::uint32 negative() const;
  void set_negative(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_negative() const;
  void _internal_set_negative(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptTypeCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 positive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 negative_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class DetailConceptCount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DetailConceptCount) */ {
 public:
  inline DetailConceptCount() : DetailConceptCount(nullptr) {}
  virtual ~DetailConceptCount();

  DetailConceptCount(const DetailConceptCount& from);
  DetailConceptCount(DetailConceptCount&& from) noexcept
    : DetailConceptCount() {
    *this = ::std::move(from);
  }

  inline DetailConceptCount& operator=(const DetailConceptCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailConceptCount& operator=(DetailConceptCount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailConceptCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetailConceptCount* internal_default_instance() {
    return reinterpret_cast<const DetailConceptCount*>(
               &_DetailConceptCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DetailConceptCount& a, DetailConceptCount& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailConceptCount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailConceptCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailConceptCount* New() const final {
    return CreateMaybeMessage<DetailConceptCount>(nullptr);
  }

  DetailConceptCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailConceptCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailConceptCount& from);
  void MergeFrom(const DetailConceptCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailConceptCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DetailConceptCount";
  }
  protected:
  explicit DetailConceptCount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessedFieldNumber = 1,
    kToProcessFieldNumber = 2,
    kErrorsFieldNumber = 3,
    kProcessingFieldNumber = 4,
  };
  // .clarifai.api.ConceptTypeCount processed = 1;
  bool has_processed() const;
  private:
  bool _internal_has_processed() const;
  public:
  void clear_processed();
  const ::clarifai::api::ConceptTypeCount& processed() const;
  ::clarifai::api::ConceptTypeCount* release_processed();
  ::clarifai::api::ConceptTypeCount* mutable_processed();
  void set_allocated_processed(::clarifai::api::ConceptTypeCount* processed);
  private:
  const ::clarifai::api::ConceptTypeCount& _internal_processed() const;
  ::clarifai::api::ConceptTypeCount* _internal_mutable_processed();
  public:
  void unsafe_arena_set_allocated_processed(
      ::clarifai::api::ConceptTypeCount* processed);
  ::clarifai::api::ConceptTypeCount* unsafe_arena_release_processed();

  // .clarifai.api.ConceptTypeCount to_process = 2;
  bool has_to_process() const;
  private:
  bool _internal_has_to_process() const;
  public:
  void clear_to_process();
  const ::clarifai::api::ConceptTypeCount& to_process() const;
  ::clarifai::api::ConceptTypeCount* release_to_process();
  ::clarifai::api::ConceptTypeCount* mutable_to_process();
  void set_allocated_to_process(::clarifai::api::ConceptTypeCount* to_process);
  private:
  const ::clarifai::api::ConceptTypeCount& _internal_to_process() const;
  ::clarifai::api::ConceptTypeCount* _internal_mutable_to_process();
  public:
  void unsafe_arena_set_allocated_to_process(
      ::clarifai::api::ConceptTypeCount* to_process);
  ::clarifai::api::ConceptTypeCount* unsafe_arena_release_to_process();

  // .clarifai.api.ConceptTypeCount errors = 3;
  bool has_errors() const;
  private:
  bool _internal_has_errors() const;
  public:
  void clear_errors();
  const ::clarifai::api::ConceptTypeCount& errors() const;
  ::clarifai::api::ConceptTypeCount* release_errors();
  ::clarifai::api::ConceptTypeCount* mutable_errors();
  void set_allocated_errors(::clarifai::api::ConceptTypeCount* errors);
  private:
  const ::clarifai::api::ConceptTypeCount& _internal_errors() const;
  ::clarifai::api::ConceptTypeCount* _internal_mutable_errors();
  public:
  void unsafe_arena_set_allocated_errors(
      ::clarifai::api::ConceptTypeCount* errors);
  ::clarifai::api::ConceptTypeCount* unsafe_arena_release_errors();

  // .clarifai.api.ConceptTypeCount processing = 4;
  bool has_processing() const;
  private:
  bool _internal_has_processing() const;
  public:
  void clear_processing();
  const ::clarifai::api::ConceptTypeCount& processing() const;
  ::clarifai::api::ConceptTypeCount* release_processing();
  ::clarifai::api::ConceptTypeCount* mutable_processing();
  void set_allocated_processing(::clarifai::api::ConceptTypeCount* processing);
  private:
  const ::clarifai::api::ConceptTypeCount& _internal_processing() const;
  ::clarifai::api::ConceptTypeCount* _internal_mutable_processing();
  public:
  void unsafe_arena_set_allocated_processing(
      ::clarifai::api::ConceptTypeCount* processing);
  ::clarifai::api::ConceptTypeCount* unsafe_arena_release_processing();

  // @@protoc_insertion_point(class_scope:clarifai.api.DetailConceptCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::ConceptTypeCount* processed_;
  ::clarifai::api::ConceptTypeCount* to_process_;
  ::clarifai::api::ConceptTypeCount* errors_;
  ::clarifai::api::ConceptTypeCount* processing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConceptQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptQuery) */ {
 public:
  inline ConceptQuery() : ConceptQuery(nullptr) {}
  virtual ~ConceptQuery();

  ConceptQuery(const ConceptQuery& from);
  ConceptQuery(ConceptQuery&& from) noexcept
    : ConceptQuery() {
    *this = ::std::move(from);
  }

  inline ConceptQuery& operator=(const ConceptQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptQuery& operator=(ConceptQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptQuery* internal_default_instance() {
    return reinterpret_cast<const ConceptQuery*>(
               &_ConceptQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ConceptQuery& a, ConceptQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConceptQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptQuery* New() const final {
    return CreateMaybeMessage<ConceptQuery>(nullptr);
  }

  ConceptQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptQuery& from);
  void MergeFrom(const ConceptQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptQuery";
  }
  protected:
  explicit ConceptQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLanguageFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string language = 2;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConceptRelation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptRelation) */ {
 public:
  inline ConceptRelation() : ConceptRelation(nullptr) {}
  virtual ~ConceptRelation();

  ConceptRelation(const ConceptRelation& from);
  ConceptRelation(ConceptRelation&& from) noexcept
    : ConceptRelation() {
    *this = ::std::move(from);
  }

  inline ConceptRelation& operator=(const ConceptRelation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptRelation& operator=(ConceptRelation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptRelation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptRelation* internal_default_instance() {
    return reinterpret_cast<const ConceptRelation*>(
               &_ConceptRelation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ConceptRelation& a, ConceptRelation& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptRelation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConceptRelation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptRelation* New() const final {
    return CreateMaybeMessage<ConceptRelation>(nullptr);
  }

  ConceptRelation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptRelation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptRelation& from);
  void MergeFrom(const ConceptRelation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptRelation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptRelation";
  }
  protected:
  explicit ConceptRelation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPredicateFieldNumber = 4,
    kKnowledgeGraphIdFieldNumber = 5,
    kSubjectConceptFieldNumber = 2,
    kObjectConceptFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string predicate = 4;
  void clear_predicate();
  const std::string& predicate() const;
  void set_predicate(const std::string& value);
  void set_predicate(std::string&& value);
  void set_predicate(const char* value);
  void set_predicate(const char* value, size_t size);
  std::string* mutable_predicate();
  std::string* release_predicate();
  void set_allocated_predicate(std::string* predicate);
  private:
  const std::string& _internal_predicate() const;
  void _internal_set_predicate(const std::string& value);
  std::string* _internal_mutable_predicate();
  public:

  // string knowledge_graph_id = 5;
  void clear_knowledge_graph_id();
  const std::string& knowledge_graph_id() const;
  void set_knowledge_graph_id(const std::string& value);
  void set_knowledge_graph_id(std::string&& value);
  void set_knowledge_graph_id(const char* value);
  void set_knowledge_graph_id(const char* value, size_t size);
  std::string* mutable_knowledge_graph_id();
  std::string* release_knowledge_graph_id();
  void set_allocated_knowledge_graph_id(std::string* knowledge_graph_id);
  private:
  const std::string& _internal_knowledge_graph_id() const;
  void _internal_set_knowledge_graph_id(const std::string& value);
  std::string* _internal_mutable_knowledge_graph_id();
  public:

  // .clarifai.api.Concept subject_concept = 2;
  bool has_subject_concept() const;
  private:
  bool _internal_has_subject_concept() const;
  public:
  void clear_subject_concept();
  const ::clarifai::api::Concept& subject_concept() const;
  ::clarifai::api::Concept* release_subject_concept();
  ::clarifai::api::Concept* mutable_subject_concept();
  void set_allocated_subject_concept(::clarifai::api::Concept* subject_concept);
  private:
  const ::clarifai::api::Concept& _internal_subject_concept() const;
  ::clarifai::api::Concept* _internal_mutable_subject_concept();
  public:
  void unsafe_arena_set_allocated_subject_concept(
      ::clarifai::api::Concept* subject_concept);
  ::clarifai::api::Concept* unsafe_arena_release_subject_concept();

  // .clarifai.api.Concept object_concept = 3;
  bool has_object_concept() const;
  private:
  bool _internal_has_object_concept() const;
  public:
  void clear_object_concept();
  const ::clarifai::api::Concept& object_concept() const;
  ::clarifai::api::Concept* release_object_concept();
  ::clarifai::api::Concept* mutable_object_concept();
  void set_allocated_object_concept(::clarifai::api::Concept* object_concept);
  private:
  const ::clarifai::api::Concept& _internal_object_concept() const;
  ::clarifai::api::Concept* _internal_mutable_object_concept();
  public:
  void unsafe_arena_set_allocated_object_concept(
      ::clarifai::api::Concept* object_concept);
  ::clarifai::api::Concept* unsafe_arena_release_object_concept();

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptRelation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predicate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr knowledge_graph_id_;
  ::clarifai::api::Concept* subject_concept_;
  ::clarifai::api::Concept* object_concept_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class KnowledgeGraph PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.KnowledgeGraph) */ {
 public:
  inline KnowledgeGraph() : KnowledgeGraph(nullptr) {}
  virtual ~KnowledgeGraph();

  KnowledgeGraph(const KnowledgeGraph& from);
  KnowledgeGraph(KnowledgeGraph&& from) noexcept
    : KnowledgeGraph() {
    *this = ::std::move(from);
  }

  inline KnowledgeGraph& operator=(const KnowledgeGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline KnowledgeGraph& operator=(KnowledgeGraph&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KnowledgeGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KnowledgeGraph* internal_default_instance() {
    return reinterpret_cast<const KnowledgeGraph*>(
               &_KnowledgeGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(KnowledgeGraph& a, KnowledgeGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(KnowledgeGraph* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KnowledgeGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KnowledgeGraph* New() const final {
    return CreateMaybeMessage<KnowledgeGraph>(nullptr);
  }

  KnowledgeGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KnowledgeGraph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KnowledgeGraph& from);
  void MergeFrom(const KnowledgeGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KnowledgeGraph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.KnowledgeGraph";
  }
  protected:
  explicit KnowledgeGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kExamplesAppIdFieldNumber = 4,
    kSampledExamplesAppIdFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string examples_app_id = 4;
  void clear_examples_app_id();
  const std::string& examples_app_id() const;
  void set_examples_app_id(const std::string& value);
  void set_examples_app_id(std::string&& value);
  void set_examples_app_id(const char* value);
  void set_examples_app_id(const char* value, size_t size);
  std::string* mutable_examples_app_id();
  std::string* release_examples_app_id();
  void set_allocated_examples_app_id(std::string* examples_app_id);
  private:
  const std::string& _internal_examples_app_id() const;
  void _internal_set_examples_app_id(const std::string& value);
  std::string* _internal_mutable_examples_app_id();
  public:

  // string sampled_examples_app_id = 5;
  void clear_sampled_examples_app_id();
  const std::string& sampled_examples_app_id() const;
  void set_sampled_examples_app_id(const std::string& value);
  void set_sampled_examples_app_id(std::string&& value);
  void set_sampled_examples_app_id(const char* value);
  void set_sampled_examples_app_id(const char* value, size_t size);
  std::string* mutable_sampled_examples_app_id();
  std::string* release_sampled_examples_app_id();
  void set_allocated_sampled_examples_app_id(std::string* sampled_examples_app_id);
  private:
  const std::string& _internal_sampled_examples_app_id() const;
  void _internal_set_sampled_examples_app_id(const std::string& value);
  std::string* _internal_mutable_sampled_examples_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.KnowledgeGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr examples_app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sampled_examples_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConceptMapping PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptMapping) */ {
 public:
  inline ConceptMapping() : ConceptMapping(nullptr) {}
  virtual ~ConceptMapping();

  ConceptMapping(const ConceptMapping& from);
  ConceptMapping(ConceptMapping&& from) noexcept
    : ConceptMapping() {
    *this = ::std::move(from);
  }

  inline ConceptMapping& operator=(const ConceptMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptMapping& operator=(ConceptMapping&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptMapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptMapping* internal_default_instance() {
    return reinterpret_cast<const ConceptMapping*>(
               &_ConceptMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ConceptMapping& a, ConceptMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptMapping* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConceptMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptMapping* New() const final {
    return CreateMaybeMessage<ConceptMapping>(nullptr);
  }

  ConceptMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptMapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptMapping& from);
  void MergeFrom(const ConceptMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptMapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptMapping";
  }
  protected:
  explicit ConceptMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptFieldNumber = 1,
    kSuggestedConceptFieldNumber = 2,
    kCreatedAtFieldNumber = 4,
    kCustomerConfirmedFieldNumber = 3,
  };
  // .clarifai.api.Concept concept = 1;
  bool has_concept() const;
  private:
  bool _internal_has_concept() const;
  public:
  void clear_concept();
  const ::clarifai::api::Concept& concept() const;
  ::clarifai::api::Concept* release_concept();
  ::clarifai::api::Concept* mutable_concept();
  void set_allocated_concept(::clarifai::api::Concept* concept);
  private:
  const ::clarifai::api::Concept& _internal_concept() const;
  ::clarifai::api::Concept* _internal_mutable_concept();
  public:
  void unsafe_arena_set_allocated_concept(
      ::clarifai::api::Concept* concept);
  ::clarifai::api::Concept* unsafe_arena_release_concept();

  // .clarifai.api.Concept suggested_concept = 2;
  bool has_suggested_concept() const;
  private:
  bool _internal_has_suggested_concept() const;
  public:
  void clear_suggested_concept();
  const ::clarifai::api::Concept& suggested_concept() const;
  ::clarifai::api::Concept* release_suggested_concept();
  ::clarifai::api::Concept* mutable_suggested_concept();
  void set_allocated_suggested_concept(::clarifai::api::Concept* suggested_concept);
  private:
  const ::clarifai::api::Concept& _internal_suggested_concept() const;
  ::clarifai::api::Concept* _internal_mutable_suggested_concept();
  public:
  void unsafe_arena_set_allocated_suggested_concept(
      ::clarifai::api::Concept* suggested_concept);
  ::clarifai::api::Concept* unsafe_arena_release_suggested_concept();

  // .google.protobuf.Timestamp created_at = 4;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // bool customer_confirmed = 3;
  void clear_customer_confirmed();
  bool customer_confirmed() const;
  void set_customer_confirmed(bool value);
  private:
  bool _internal_customer_confirmed() const;
  void _internal_set_customer_confirmed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::Concept* concept_;
  ::clarifai::api::Concept* suggested_concept_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  bool customer_confirmed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConceptMappingJob PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptMappingJob) */ {
 public:
  inline ConceptMappingJob() : ConceptMappingJob(nullptr) {}
  virtual ~ConceptMappingJob();

  ConceptMappingJob(const ConceptMappingJob& from);
  ConceptMappingJob(ConceptMappingJob&& from) noexcept
    : ConceptMappingJob() {
    *this = ::std::move(from);
  }

  inline ConceptMappingJob& operator=(const ConceptMappingJob& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptMappingJob& operator=(ConceptMappingJob&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptMappingJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptMappingJob* internal_default_instance() {
    return reinterpret_cast<const ConceptMappingJob*>(
               &_ConceptMappingJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ConceptMappingJob& a, ConceptMappingJob& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptMappingJob* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConceptMappingJob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptMappingJob* New() const final {
    return CreateMaybeMessage<ConceptMappingJob>(nullptr);
  }

  ConceptMappingJob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptMappingJob>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptMappingJob& from);
  void MergeFrom(const ConceptMappingJob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptMappingJob* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptMappingJob";
  }
  protected:
  explicit ConceptMappingJob(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptIdsFieldNumber = 2,
    kKnowledgeGraphIdFieldNumber = 1,
  };
  // repeated string concept_ids = 2;
  int concept_ids_size() const;
  private:
  int _internal_concept_ids_size() const;
  public:
  void clear_concept_ids();
  const std::string& concept_ids(int index) const;
  std::string* mutable_concept_ids(int index);
  void set_concept_ids(int index, const std::string& value);
  void set_concept_ids(int index, std::string&& value);
  void set_concept_ids(int index, const char* value);
  void set_concept_ids(int index, const char* value, size_t size);
  std::string* add_concept_ids();
  void add_concept_ids(const std::string& value);
  void add_concept_ids(std::string&& value);
  void add_concept_ids(const char* value);
  void add_concept_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& concept_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_concept_ids();
  private:
  const std::string& _internal_concept_ids(int index) const;
  std::string* _internal_add_concept_ids();
  public:

  // string knowledge_graph_id = 1;
  void clear_knowledge_graph_id();
  const std::string& knowledge_graph_id() const;
  void set_knowledge_graph_id(const std::string& value);
  void set_knowledge_graph_id(std::string&& value);
  void set_knowledge_graph_id(const char* value);
  void set_knowledge_graph_id(const char* value, size_t size);
  std::string* mutable_knowledge_graph_id();
  std::string* release_knowledge_graph_id();
  void set_allocated_knowledge_graph_id(std::string* knowledge_graph_id);
  private:
  const std::string& _internal_knowledge_graph_id() const;
  void _internal_set_knowledge_graph_id(const std::string& value);
  std::string* _internal_mutable_knowledge_graph_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptMappingJob)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> concept_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr knowledge_graph_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConceptLanguage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptLanguage) */ {
 public:
  inline ConceptLanguage() : ConceptLanguage(nullptr) {}
  virtual ~ConceptLanguage();

  ConceptLanguage(const ConceptLanguage& from);
  ConceptLanguage(ConceptLanguage&& from) noexcept
    : ConceptLanguage() {
    *this = ::std::move(from);
  }

  inline ConceptLanguage& operator=(const ConceptLanguage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptLanguage& operator=(ConceptLanguage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptLanguage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptLanguage* internal_default_instance() {
    return reinterpret_cast<const ConceptLanguage*>(
               &_ConceptLanguage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ConceptLanguage& a, ConceptLanguage& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptLanguage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConceptLanguage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptLanguage* New() const final {
    return CreateMaybeMessage<ConceptLanguage>(nullptr);
  }

  ConceptLanguage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptLanguage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptLanguage& from);
  void MergeFrom(const ConceptLanguage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptLanguage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptLanguage";
  }
  protected:
  explicit ConceptLanguage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDefinitionFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string definition = 3;
  void clear_definition();
  const std::string& definition() const;
  void set_definition(const std::string& value);
  void set_definition(std::string&& value);
  void set_definition(const char* value);
  void set_definition(const char* value, size_t size);
  std::string* mutable_definition();
  std::string* release_definition();
  void set_allocated_definition(std::string* definition);
  private:
  const std::string& _internal_definition() const;
  void _internal_set_definition(const std::string& value);
  std::string* _internal_mutable_definition();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptLanguage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr definition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConceptReference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptReference) */ {
 public:
  inline ConceptReference() : ConceptReference(nullptr) {}
  virtual ~ConceptReference();

  ConceptReference(const ConceptReference& from);
  ConceptReference(ConceptReference&& from) noexcept
    : ConceptReference() {
    *this = ::std::move(from);
  }

  inline ConceptReference& operator=(const ConceptReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptReference& operator=(ConceptReference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptReference* internal_default_instance() {
    return reinterpret_cast<const ConceptReference*>(
               &_ConceptReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ConceptReference& a, ConceptReference& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptReference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConceptReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptReference* New() const final {
    return CreateMaybeMessage<ConceptReference>(nullptr);
  }

  ConceptReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptReference& from);
  void MergeFrom(const ConceptReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptReference";
  }
  protected:
  explicit ConceptReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSourceFieldNumber = 2,
    kSourceIdFieldNumber = 3,
    kSourceUrlFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string source = 2;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string source_id = 3;
  void clear_source_id();
  const std::string& source_id() const;
  void set_source_id(const std::string& value);
  void set_source_id(std::string&& value);
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  std::string* mutable_source_id();
  std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // string source_url = 4;
  void clear_source_url();
  const std::string& source_url() const;
  void set_source_url(const std::string& value);
  void set_source_url(std::string&& value);
  void set_source_url(const char* value);
  void set_source_url(const char* value, size_t size);
  std::string* mutable_source_url();
  std::string* release_source_url();
  void set_allocated_source_url(std::string* source_url);
  private:
  const std::string& _internal_source_url() const;
  void _internal_set_source_url(const std::string& value);
  std::string* _internal_mutable_source_url();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Data) */ {
 public:
  inline Data() : Data(nullptr) {}
  virtual ~Data();

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(nullptr);
  }

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Data";
  }
  protected:
  explicit Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptsFieldNumber = 3,
    kColorsFieldNumber = 7,
    kClustersFieldNumber = 8,
    kEmbeddingsFieldNumber = 9,
    kRegionsFieldNumber = 11,
    kFramesFieldNumber = 12,
    kImageFieldNumber = 1,
    kVideoFieldNumber = 2,
    kFaceFieldNumber = 4,
    kMetadataFieldNumber = 5,
    kGeoFieldNumber = 6,
    kFocusFieldNumber = 10,
    kTextFieldNumber = 13,
    kAudioFieldNumber = 14,
  };
  // repeated .clarifai.api.Concept concepts = 3;
  int concepts_size() const;
  private:
  int _internal_concepts_size() const;
  public:
  void clear_concepts();
  ::clarifai::api::Concept* mutable_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_concepts();
  private:
  const ::clarifai::api::Concept& _internal_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_concepts();
  public:
  const ::clarifai::api::Concept& concepts(int index) const;
  ::clarifai::api::Concept* add_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      concepts() const;

  // repeated .clarifai.api.Color colors = 7;
  int colors_size() const;
  private:
  int _internal_colors_size() const;
  public:
  void clear_colors();
  ::clarifai::api::Color* mutable_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Color >*
      mutable_colors();
  private:
  const ::clarifai::api::Color& _internal_colors(int index) const;
  ::clarifai::api::Color* _internal_add_colors();
  public:
  const ::clarifai::api::Color& colors(int index) const;
  ::clarifai::api::Color* add_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Color >&
      colors() const;

  // repeated .clarifai.api.Cluster clusters = 8;
  int clusters_size() const;
  private:
  int _internal_clusters_size() const;
  public:
  void clear_clusters();
  ::clarifai::api::Cluster* mutable_clusters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Cluster >*
      mutable_clusters();
  private:
  const ::clarifai::api::Cluster& _internal_clusters(int index) const;
  ::clarifai::api::Cluster* _internal_add_clusters();
  public:
  const ::clarifai::api::Cluster& clusters(int index) const;
  ::clarifai::api::Cluster* add_clusters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Cluster >&
      clusters() const;

  // repeated .clarifai.api.Embedding embeddings = 9;
  int embeddings_size() const;
  private:
  int _internal_embeddings_size() const;
  public:
  void clear_embeddings();
  ::clarifai::api::Embedding* mutable_embeddings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Embedding >*
      mutable_embeddings();
  private:
  const ::clarifai::api::Embedding& _internal_embeddings(int index) const;
  ::clarifai::api::Embedding* _internal_add_embeddings();
  public:
  const ::clarifai::api::Embedding& embeddings(int index) const;
  ::clarifai::api::Embedding* add_embeddings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Embedding >&
      embeddings() const;

  // repeated .clarifai.api.Region regions = 11;
  int regions_size() const;
  private:
  int _internal_regions_size() const;
  public:
  void clear_regions();
  ::clarifai::api::Region* mutable_regions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Region >*
      mutable_regions();
  private:
  const ::clarifai::api::Region& _internal_regions(int index) const;
  ::clarifai::api::Region* _internal_add_regions();
  public:
  const ::clarifai::api::Region& regions(int index) const;
  ::clarifai::api::Region* add_regions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Region >&
      regions() const;

  // repeated .clarifai.api.Frame frames = 12;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::clarifai::api::Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Frame >*
      mutable_frames();
  private:
  const ::clarifai::api::Frame& _internal_frames(int index) const;
  ::clarifai::api::Frame* _internal_add_frames();
  public:
  const ::clarifai::api::Frame& frames(int index) const;
  ::clarifai::api::Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Frame >&
      frames() const;

  // .clarifai.api.Image image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::clarifai::api::Image& image() const;
  ::clarifai::api::Image* release_image();
  ::clarifai::api::Image* mutable_image();
  void set_allocated_image(::clarifai::api::Image* image);
  private:
  const ::clarifai::api::Image& _internal_image() const;
  ::clarifai::api::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::clarifai::api::Image* image);
  ::clarifai::api::Image* unsafe_arena_release_image();

  // .clarifai.api.Video video = 2;
  bool has_video() const;
  private:
  bool _internal_has_video() const;
  public:
  void clear_video();
  const ::clarifai::api::Video& video() const;
  ::clarifai::api::Video* release_video();
  ::clarifai::api::Video* mutable_video();
  void set_allocated_video(::clarifai::api::Video* video);
  private:
  const ::clarifai::api::Video& _internal_video() const;
  ::clarifai::api::Video* _internal_mutable_video();
  public:
  void unsafe_arena_set_allocated_video(
      ::clarifai::api::Video* video);
  ::clarifai::api::Video* unsafe_arena_release_video();

  // .clarifai.api.Face face = 4;
  bool has_face() const;
  private:
  bool _internal_has_face() const;
  public:
  void clear_face();
  const ::clarifai::api::Face& face() const;
  ::clarifai::api::Face* release_face();
  ::clarifai::api::Face* mutable_face();
  void set_allocated_face(::clarifai::api::Face* face);
  private:
  const ::clarifai::api::Face& _internal_face() const;
  ::clarifai::api::Face* _internal_mutable_face();
  public:
  void unsafe_arena_set_allocated_face(
      ::clarifai::api::Face* face);
  ::clarifai::api::Face* unsafe_arena_release_face();

  // .google.protobuf.Struct metadata = 5;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      PROTOBUF_NAMESPACE_ID::Struct* metadata);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_metadata();

  // .clarifai.api.Geo geo = 6;
  bool has_geo() const;
  private:
  bool _internal_has_geo() const;
  public:
  void clear_geo();
  const ::clarifai::api::Geo& geo() const;
  ::clarifai::api::Geo* release_geo();
  ::clarifai::api::Geo* mutable_geo();
  void set_allocated_geo(::clarifai::api::Geo* geo);
  private:
  const ::clarifai::api::Geo& _internal_geo() const;
  ::clarifai::api::Geo* _internal_mutable_geo();
  public:
  void unsafe_arena_set_allocated_geo(
      ::clarifai::api::Geo* geo);
  ::clarifai::api::Geo* unsafe_arena_release_geo();

  // .clarifai.api.Focus focus = 10;
  bool has_focus() const;
  private:
  bool _internal_has_focus() const;
  public:
  void clear_focus();
  const ::clarifai::api::Focus& focus() const;
  ::clarifai::api::Focus* release_focus();
  ::clarifai::api::Focus* mutable_focus();
  void set_allocated_focus(::clarifai::api::Focus* focus);
  private:
  const ::clarifai::api::Focus& _internal_focus() const;
  ::clarifai::api::Focus* _internal_mutable_focus();
  public:
  void unsafe_arena_set_allocated_focus(
      ::clarifai::api::Focus* focus);
  ::clarifai::api::Focus* unsafe_arena_release_focus();

  // .clarifai.api.Text text = 13;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::clarifai::api::Text& text() const;
  ::clarifai::api::Text* release_text();
  ::clarifai::api::Text* mutable_text();
  void set_allocated_text(::clarifai::api::Text* text);
  private:
  const ::clarifai::api::Text& _internal_text() const;
  ::clarifai::api::Text* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::clarifai::api::Text* text);
  ::clarifai::api::Text* unsafe_arena_release_text();

  // .clarifai.api.Audio audio = 14;
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const ::clarifai::api::Audio& audio() const;
  ::clarifai::api::Audio* release_audio();
  ::clarifai::api::Audio* mutable_audio();
  void set_allocated_audio(::clarifai::api::Audio* audio);
  private:
  const ::clarifai::api::Audio& _internal_audio() const;
  ::clarifai::api::Audio* _internal_mutable_audio();
  public:
  void unsafe_arena_set_allocated_audio(
      ::clarifai::api::Audio* audio);
  ::clarifai::api::Audio* unsafe_arena_release_audio();

  // @@protoc_insertion_point(class_scope:clarifai.api.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > concepts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Color > colors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Cluster > clusters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Embedding > embeddings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Region > regions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Frame > frames_;
  ::clarifai::api::Image* image_;
  ::clarifai::api::Video* video_;
  ::clarifai::api::Face* face_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  ::clarifai::api::Geo* geo_;
  ::clarifai::api::Focus* focus_;
  ::clarifai::api::Text* text_;
  ::clarifai::api::Audio* audio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Region PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Region) */ {
 public:
  inline Region() : Region(nullptr) {}
  virtual ~Region();

  Region(const Region& from);
  Region(Region&& from) noexcept
    : Region() {
    *this = ::std::move(from);
  }

  inline Region& operator=(const Region& from) {
    CopyFrom(from);
    return *this;
  }
  inline Region& operator=(Region&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Region& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Region* internal_default_instance() {
    return reinterpret_cast<const Region*>(
               &_Region_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Region& a, Region& b) {
    a.Swap(&b);
  }
  inline void Swap(Region* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Region* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Region* New() const final {
    return CreateMaybeMessage<Region>(nullptr);
  }

  Region* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Region>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Region& from);
  void MergeFrom(const Region& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Region* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Region";
  }
  protected:
  explicit Region(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRegionInfoFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.RegionInfo region_info = 2;
  bool has_region_info() const;
  private:
  bool _internal_has_region_info() const;
  public:
  void clear_region_info();
  const ::clarifai::api::RegionInfo& region_info() const;
  ::clarifai::api::RegionInfo* release_region_info();
  ::clarifai::api::RegionInfo* mutable_region_info();
  void set_allocated_region_info(::clarifai::api::RegionInfo* region_info);
  private:
  const ::clarifai::api::RegionInfo& _internal_region_info() const;
  ::clarifai::api::RegionInfo* _internal_mutable_region_info();
  public:
  void unsafe_arena_set_allocated_region_info(
      ::clarifai::api::RegionInfo* region_info);
  ::clarifai::api::RegionInfo* unsafe_arena_release_region_info();

  // .clarifai.api.Data data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::clarifai::api::Data* data);
  ::clarifai::api::Data* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:clarifai.api.Region)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::RegionInfo* region_info_;
  ::clarifai::api::Data* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class RegionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.RegionInfo) */ {
 public:
  inline RegionInfo() : RegionInfo(nullptr) {}
  virtual ~RegionInfo();

  RegionInfo(const RegionInfo& from);
  RegionInfo(RegionInfo&& from) noexcept
    : RegionInfo() {
    *this = ::std::move(from);
  }

  inline RegionInfo& operator=(const RegionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionInfo& operator=(RegionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionInfo* internal_default_instance() {
    return reinterpret_cast<const RegionInfo*>(
               &_RegionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(RegionInfo& a, RegionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionInfo* New() const final {
    return CreateMaybeMessage<RegionInfo>(nullptr);
  }

  RegionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionInfo& from);
  void MergeFrom(const RegionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.RegionInfo";
  }
  protected:
  explicit RegionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundingBoxFieldNumber = 1,
    kMaskFieldNumber = 4,
    kValueFieldNumber = 2,
  };
  // .clarifai.api.BoundingBox bounding_box = 1;
  bool has_bounding_box() const;
  private:
  bool _internal_has_bounding_box() const;
  public:
  void clear_bounding_box();
  const ::clarifai::api::BoundingBox& bounding_box() const;
  ::clarifai::api::BoundingBox* release_bounding_box();
  ::clarifai::api::BoundingBox* mutable_bounding_box();
  void set_allocated_bounding_box(::clarifai::api::BoundingBox* bounding_box);
  private:
  const ::clarifai::api::BoundingBox& _internal_bounding_box() const;
  ::clarifai::api::BoundingBox* _internal_mutable_bounding_box();
  public:
  void unsafe_arena_set_allocated_bounding_box(
      ::clarifai::api::BoundingBox* bounding_box);
  ::clarifai::api::BoundingBox* unsafe_arena_release_bounding_box();

  // .clarifai.api.Mask mask = 4;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const ::clarifai::api::Mask& mask() const;
  ::clarifai::api::Mask* release_mask();
  ::clarifai::api::Mask* mutable_mask();
  void set_allocated_mask(::clarifai::api::Mask* mask);
  private:
  const ::clarifai::api::Mask& _internal_mask() const;
  ::clarifai::api::Mask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      ::clarifai::api::Mask* mask);
  ::clarifai::api::Mask* unsafe_arena_release_mask();

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.RegionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::BoundingBox* bounding_box_;
  ::clarifai::api::Mask* mask_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.BoundingBox) */ {
 public:
  inline BoundingBox() : BoundingBox(nullptr) {}
  virtual ~BoundingBox();

  BoundingBox(const BoundingBox& from);
  BoundingBox(BoundingBox&& from) noexcept
    : BoundingBox() {
    *this = ::std::move(from);
  }

  inline BoundingBox& operator=(const BoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox& operator=(BoundingBox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundingBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundingBox* internal_default_instance() {
    return reinterpret_cast<const BoundingBox*>(
               &_BoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(BoundingBox& a, BoundingBox& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox* New() const final {
    return CreateMaybeMessage<BoundingBox>(nullptr);
  }

  BoundingBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundingBox& from);
  void MergeFrom(const BoundingBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.BoundingBox";
  }
  protected:
  explicit BoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopRowFieldNumber = 1,
    kLeftColFieldNumber = 2,
    kBottomRowFieldNumber = 3,
    kRightColFieldNumber = 4,
  };
  // float top_row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_top_row();
  float top_row() const;
  void set_top_row(float value);
  private:
  float _internal_top_row() const;
  void _internal_set_top_row(float value);
  public:

  // float left_col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_left_col();
  float left_col() const;
  void set_left_col(float value);
  private:
  float _internal_left_col() const;
  void _internal_set_left_col(float value);
  public:

  // float bottom_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_bottom_row();
  float bottom_row() const;
  void set_bottom_row(float value);
  private:
  float _internal_bottom_row() const;
  void _internal_set_bottom_row(float value);
  public:

  // float right_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_right_col();
  float right_col() const;
  void set_right_col(float value);
  private:
  float _internal_right_col() const;
  void _internal_set_right_col(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.BoundingBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float top_row_;
  float left_col_;
  float bottom_row_;
  float right_col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class FrameInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.FrameInfo) */ {
 public:
  inline FrameInfo() : FrameInfo(nullptr) {}
  virtual ~FrameInfo();

  FrameInfo(const FrameInfo& from);
  FrameInfo(FrameInfo&& from) noexcept
    : FrameInfo() {
    *this = ::std::move(from);
  }

  inline FrameInfo& operator=(const FrameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameInfo& operator=(FrameInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameInfo* internal_default_instance() {
    return reinterpret_cast<const FrameInfo*>(
               &_FrameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(FrameInfo& a, FrameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameInfo* New() const final {
    return CreateMaybeMessage<FrameInfo>(nullptr);
  }

  FrameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameInfo& from);
  void MergeFrom(const FrameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.FrameInfo";
  }
  protected:
  explicit FrameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // uint32 index = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 time = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.FrameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameInfoFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .clarifai.api.FrameInfo frame_info = 1;
  bool has_frame_info() const;
  private:
  bool _internal_has_frame_info() const;
  public:
  void clear_frame_info();
  const ::clarifai::api::FrameInfo& frame_info() const;
  ::clarifai::api::FrameInfo* release_frame_info();
  ::clarifai::api::FrameInfo* mutable_frame_info();
  void set_allocated_frame_info(::clarifai::api::FrameInfo* frame_info);
  private:
  const ::clarifai::api::FrameInfo& _internal_frame_info() const;
  ::clarifai::api::FrameInfo* _internal_mutable_frame_info();
  public:
  void unsafe_arena_set_allocated_frame_info(
      ::clarifai::api::FrameInfo* frame_info);
  ::clarifai::api::FrameInfo* unsafe_arena_release_frame_info();

  // .clarifai.api.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::clarifai::api::Data* data);
  ::clarifai::api::Data* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:clarifai.api.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::FrameInfo* frame_info_;
  ::clarifai::api::Data* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Mask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Mask) */ {
 public:
  inline Mask() : Mask(nullptr) {}
  virtual ~Mask();

  Mask(const Mask& from);
  Mask(Mask&& from) noexcept
    : Mask() {
    *this = ::std::move(from);
  }

  inline Mask& operator=(const Mask& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mask& operator=(Mask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mask* internal_default_instance() {
    return reinterpret_cast<const Mask*>(
               &_Mask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Mask& a, Mask& b) {
    a.Swap(&b);
  }
  inline void Swap(Mask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mask* New() const final {
    return CreateMaybeMessage<Mask>(nullptr);
  }

  Mask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mask& from);
  void MergeFrom(const Mask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Mask";
  }
  protected:
  explicit Mask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
    kImageFieldNumber = 2,
  };
  // .clarifai.api.Color color = 1;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::clarifai::api::Color& color() const;
  ::clarifai::api::Color* release_color();
  ::clarifai::api::Color* mutable_color();
  void set_allocated_color(::clarifai::api::Color* color);
  private:
  const ::clarifai::api::Color& _internal_color() const;
  ::clarifai::api::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::clarifai::api::Color* color);
  ::clarifai::api::Color* unsafe_arena_release_color();

  // .clarifai.api.Image image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::clarifai::api::Image& image() const;
  ::clarifai::api::Image* release_image();
  ::clarifai::api::Image* mutable_image();
  void set_allocated_image(::clarifai::api::Image* image);
  private:
  const ::clarifai::api::Image& _internal_image() const;
  ::clarifai::api::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::clarifai::api::Image* image);
  ::clarifai::api::Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:clarifai.api.Mask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::Color* color_;
  ::clarifai::api::Image* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Embedding PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Embedding) */ {
 public:
  inline Embedding() : Embedding(nullptr) {}
  virtual ~Embedding();

  Embedding(const Embedding& from);
  Embedding(Embedding&& from) noexcept
    : Embedding() {
    *this = ::std::move(from);
  }

  inline Embedding& operator=(const Embedding& from) {
    CopyFrom(from);
    return *this;
  }
  inline Embedding& operator=(Embedding&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Embedding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Embedding* internal_default_instance() {
    return reinterpret_cast<const Embedding*>(
               &_Embedding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Embedding& a, Embedding& b) {
    a.Swap(&b);
  }
  inline void Swap(Embedding* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Embedding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Embedding* New() const final {
    return CreateMaybeMessage<Embedding>(nullptr);
  }

  Embedding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Embedding>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Embedding& from);
  void MergeFrom(const Embedding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Embedding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Embedding";
  }
  protected:
  explicit Embedding(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
    kNumDimensionsFieldNumber = 2,
  };
  // repeated float vector = 1 [packed = true];
  int vector_size() const;
  private:
  int _internal_vector_size() const;
  public:
  void clear_vector();
  private:
  float _internal_vector(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vector() const;
  void _internal_add_vector(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vector();
  public:
  float vector(int index) const;
  void set_vector(int index, float value);
  void add_vector(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vector();

  // uint32 num_dimensions = 2;
  void clear_num_dimensions();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_dimensions() const;
  void set_num_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_dimensions() const;
  void _internal_set_num_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Embedding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vector_;
  mutable std::atomic<int> _vector_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_dimensions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class FaceIdentity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.FaceIdentity) */ {
 public:
  inline FaceIdentity() : FaceIdentity(nullptr) {}
  virtual ~FaceIdentity();

  FaceIdentity(const FaceIdentity& from);
  FaceIdentity(FaceIdentity&& from) noexcept
    : FaceIdentity() {
    *this = ::std::move(from);
  }

  inline FaceIdentity& operator=(const FaceIdentity& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceIdentity& operator=(FaceIdentity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceIdentity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceIdentity* internal_default_instance() {
    return reinterpret_cast<const FaceIdentity*>(
               &_FaceIdentity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(FaceIdentity& a, FaceIdentity& b) {
    a.Swap(&b);
  }
  inline void Swap(FaceIdentity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FaceIdentity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaceIdentity* New() const final {
    return CreateMaybeMessage<FaceIdentity>(nullptr);
  }

  FaceIdentity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceIdentity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceIdentity& from);
  void MergeFrom(const FaceIdentity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceIdentity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.FaceIdentity";
  }
  protected:
  explicit FaceIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptsFieldNumber = 1,
  };
  // repeated .clarifai.api.Concept concepts = 1;
  int concepts_size() const;
  private:
  int _internal_concepts_size() const;
  public:
  void clear_concepts();
  ::clarifai::api::Concept* mutable_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_concepts();
  private:
  const ::clarifai::api::Concept& _internal_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_concepts();
  public:
  const ::clarifai::api::Concept& concepts(int index) const;
  ::clarifai::api::Concept* add_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      concepts() const;

  // @@protoc_insertion_point(class_scope:clarifai.api.FaceIdentity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > concepts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class FaceAge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.FaceAge) */ {
 public:
  inline FaceAge() : FaceAge(nullptr) {}
  virtual ~FaceAge();

  FaceAge(const FaceAge& from);
  FaceAge(FaceAge&& from) noexcept
    : FaceAge() {
    *this = ::std::move(from);
  }

  inline FaceAge& operator=(const FaceAge& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceAge& operator=(FaceAge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceAge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceAge* internal_default_instance() {
    return reinterpret_cast<const FaceAge*>(
               &_FaceAge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(FaceAge& a, FaceAge& b) {
    a.Swap(&b);
  }
  inline void Swap(FaceAge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FaceAge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaceAge* New() const final {
    return CreateMaybeMessage<FaceAge>(nullptr);
  }

  FaceAge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceAge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceAge& from);
  void MergeFrom(const FaceAge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceAge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.FaceAge";
  }
  protected:
  explicit FaceAge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptsFieldNumber = 1,
  };
  // repeated .clarifai.api.Concept concepts = 1;
  int concepts_size() const;
  private:
  int _internal_concepts_size() const;
  public:
  void clear_concepts();
  ::clarifai::api::Concept* mutable_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_concepts();
  private:
  const ::clarifai::api::Concept& _internal_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_concepts();
  public:
  const ::clarifai::api::Concept& concepts(int index) const;
  ::clarifai::api::Concept* add_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      concepts() const;

  // @@protoc_insertion_point(class_scope:clarifai.api.FaceAge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > concepts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class FaceGenderIdentity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.FaceGenderIdentity) */ {
 public:
  inline FaceGenderIdentity() : FaceGenderIdentity(nullptr) {}
  virtual ~FaceGenderIdentity();

  FaceGenderIdentity(const FaceGenderIdentity& from);
  FaceGenderIdentity(FaceGenderIdentity&& from) noexcept
    : FaceGenderIdentity() {
    *this = ::std::move(from);
  }

  inline FaceGenderIdentity& operator=(const FaceGenderIdentity& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceGenderIdentity& operator=(FaceGenderIdentity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceGenderIdentity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceGenderIdentity* internal_default_instance() {
    return reinterpret_cast<const FaceGenderIdentity*>(
               &_FaceGenderIdentity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(FaceGenderIdentity& a, FaceGenderIdentity& b) {
    a.Swap(&b);
  }
  inline void Swap(FaceGenderIdentity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FaceGenderIdentity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaceGenderIdentity* New() const final {
    return CreateMaybeMessage<FaceGenderIdentity>(nullptr);
  }

  FaceGenderIdentity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceGenderIdentity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceGenderIdentity& from);
  void MergeFrom(const FaceGenderIdentity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceGenderIdentity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.FaceGenderIdentity";
  }
  protected:
  explicit FaceGenderIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptsFieldNumber = 1,
  };
  // repeated .clarifai.api.Concept concepts = 1;
  int concepts_size() const;
  private:
  int _internal_concepts_size() const;
  public:
  void clear_concepts();
  ::clarifai::api::Concept* mutable_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_concepts();
  private:
  const ::clarifai::api::Concept& _internal_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_concepts();
  public:
  const ::clarifai::api::Concept& concepts(int index) const;
  ::clarifai::api::Concept* add_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      concepts() const;

  // @@protoc_insertion_point(class_scope:clarifai.api.FaceGenderIdentity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > concepts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class FaceMCAffinity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.FaceMCAffinity) */ {
 public:
  inline FaceMCAffinity() : FaceMCAffinity(nullptr) {}
  virtual ~FaceMCAffinity();

  FaceMCAffinity(const FaceMCAffinity& from);
  FaceMCAffinity(FaceMCAffinity&& from) noexcept
    : FaceMCAffinity() {
    *this = ::std::move(from);
  }

  inline FaceMCAffinity& operator=(const FaceMCAffinity& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceMCAffinity& operator=(FaceMCAffinity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceMCAffinity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceMCAffinity* internal_default_instance() {
    return reinterpret_cast<const FaceMCAffinity*>(
               &_FaceMCAffinity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(FaceMCAffinity& a, FaceMCAffinity& b) {
    a.Swap(&b);
  }
  inline void Swap(FaceMCAffinity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FaceMCAffinity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaceMCAffinity* New() const final {
    return CreateMaybeMessage<FaceMCAffinity>(nullptr);
  }

  FaceMCAffinity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceMCAffinity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceMCAffinity& from);
  void MergeFrom(const FaceMCAffinity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceMCAffinity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.FaceMCAffinity";
  }
  protected:
  explicit FaceMCAffinity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptsFieldNumber = 1,
  };
  // repeated .clarifai.api.Concept concepts = 1;
  int concepts_size() const;
  private:
  int _internal_concepts_size() const;
  public:
  void clear_concepts();
  ::clarifai::api::Concept* mutable_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_concepts();
  private:
  const ::clarifai::api::Concept& _internal_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_concepts();
  public:
  const ::clarifai::api::Concept& concepts(int index) const;
  ::clarifai::api::Concept* add_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      concepts() const;

  // @@protoc_insertion_point(class_scope:clarifai.api.FaceMCAffinity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > concepts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Face PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Face) */ {
 public:
  inline Face() : Face(nullptr) {}
  virtual ~Face();

  Face(const Face& from);
  Face(Face&& from) noexcept
    : Face() {
    *this = ::std::move(from);
  }

  inline Face& operator=(const Face& from) {
    CopyFrom(from);
    return *this;
  }
  inline Face& operator=(Face&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Face& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Face* internal_default_instance() {
    return reinterpret_cast<const Face*>(
               &_Face_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Face& a, Face& b) {
    a.Swap(&b);
  }
  inline void Swap(Face* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Face* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Face* New() const final {
    return CreateMaybeMessage<Face>(nullptr);
  }

  Face* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Face>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Face& from);
  void MergeFrom(const Face& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Face* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Face";
  }
  protected:
  explicit Face(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityFieldNumber = 1,
    kAgeAppearanceFieldNumber = 2,
    kGenderAppearanceFieldNumber = 3,
    kMulticulturalAppearanceFieldNumber = 4,
  };
  // .clarifai.api.FaceIdentity identity = 1;
  bool has_identity() const;
  private:
  bool _internal_has_identity() const;
  public:
  void clear_identity();
  const ::clarifai::api::FaceIdentity& identity() const;
  ::clarifai::api::FaceIdentity* release_identity();
  ::clarifai::api::FaceIdentity* mutable_identity();
  void set_allocated_identity(::clarifai::api::FaceIdentity* identity);
  private:
  const ::clarifai::api::FaceIdentity& _internal_identity() const;
  ::clarifai::api::FaceIdentity* _internal_mutable_identity();
  public:
  void unsafe_arena_set_allocated_identity(
      ::clarifai::api::FaceIdentity* identity);
  ::clarifai::api::FaceIdentity* unsafe_arena_release_identity();

  // .clarifai.api.FaceAge age_appearance = 2;
  bool has_age_appearance() const;
  private:
  bool _internal_has_age_appearance() const;
  public:
  void clear_age_appearance();
  const ::clarifai::api::FaceAge& age_appearance() const;
  ::clarifai::api::FaceAge* release_age_appearance();
  ::clarifai::api::FaceAge* mutable_age_appearance();
  void set_allocated_age_appearance(::clarifai::api::FaceAge* age_appearance);
  private:
  const ::clarifai::api::FaceAge& _internal_age_appearance() const;
  ::clarifai::api::FaceAge* _internal_mutable_age_appearance();
  public:
  void unsafe_arena_set_allocated_age_appearance(
      ::clarifai::api::FaceAge* age_appearance);
  ::clarifai::api::FaceAge* unsafe_arena_release_age_appearance();

  // .clarifai.api.FaceGenderIdentity gender_appearance = 3;
  bool has_gender_appearance() const;
  private:
  bool _internal_has_gender_appearance() const;
  public:
  void clear_gender_appearance();
  const ::clarifai::api::FaceGenderIdentity& gender_appearance() const;
  ::clarifai::api::FaceGenderIdentity* release_gender_appearance();
  ::clarifai::api::FaceGenderIdentity* mutable_gender_appearance();
  void set_allocated_gender_appearance(::clarifai::api::FaceGenderIdentity* gender_appearance);
  private:
  const ::clarifai::api::FaceGenderIdentity& _internal_gender_appearance() const;
  ::clarifai::api::FaceGenderIdentity* _internal_mutable_gender_appearance();
  public:
  void unsafe_arena_set_allocated_gender_appearance(
      ::clarifai::api::FaceGenderIdentity* gender_appearance);
  ::clarifai::api::FaceGenderIdentity* unsafe_arena_release_gender_appearance();

  // .clarifai.api.FaceMCAffinity multicultural_appearance = 4;
  bool has_multicultural_appearance() const;
  private:
  bool _internal_has_multicultural_appearance() const;
  public:
  void clear_multicultural_appearance();
  const ::clarifai::api::FaceMCAffinity& multicultural_appearance() const;
  ::clarifai::api::FaceMCAffinity* release_multicultural_appearance();
  ::clarifai::api::FaceMCAffinity* mutable_multicultural_appearance();
  void set_allocated_multicultural_appearance(::clarifai::api::FaceMCAffinity* multicultural_appearance);
  private:
  const ::clarifai::api::FaceMCAffinity& _internal_multicultural_appearance() const;
  ::clarifai::api::FaceMCAffinity* _internal_mutable_multicultural_appearance();
  public:
  void unsafe_arena_set_allocated_multicultural_appearance(
      ::clarifai::api::FaceMCAffinity* multicultural_appearance);
  ::clarifai::api::FaceMCAffinity* unsafe_arena_release_multicultural_appearance();

  // @@protoc_insertion_point(class_scope:clarifai.api.Face)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::FaceIdentity* identity_;
  ::clarifai::api::FaceAge* age_appearance_;
  ::clarifai::api::FaceGenderIdentity* gender_appearance_;
  ::clarifai::api::FaceMCAffinity* multicultural_appearance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Focus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Focus) */ {
 public:
  inline Focus() : Focus(nullptr) {}
  virtual ~Focus();

  Focus(const Focus& from);
  Focus(Focus&& from) noexcept
    : Focus() {
    *this = ::std::move(from);
  }

  inline Focus& operator=(const Focus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Focus& operator=(Focus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Focus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Focus* internal_default_instance() {
    return reinterpret_cast<const Focus*>(
               &_Focus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Focus& a, Focus& b) {
    a.Swap(&b);
  }
  inline void Swap(Focus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Focus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Focus* New() const final {
    return CreateMaybeMessage<Focus>(nullptr);
  }

  Focus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Focus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Focus& from);
  void MergeFrom(const Focus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Focus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Focus";
  }
  protected:
  explicit Focus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDensityFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // float density = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_density();
  float density() const;
  void set_density(float value);
  private:
  float _internal_density() const;
  void _internal_set_density(float value);
  public:

  // float value = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Focus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float density_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class GeoPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GeoPoint) */ {
 public:
  inline GeoPoint() : GeoPoint(nullptr) {}
  virtual ~GeoPoint();

  GeoPoint(const GeoPoint& from);
  GeoPoint(GeoPoint&& from) noexcept
    : GeoPoint() {
    *this = ::std::move(from);
  }

  inline GeoPoint& operator=(const GeoPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoPoint& operator=(GeoPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoPoint* internal_default_instance() {
    return reinterpret_cast<const GeoPoint*>(
               &_GeoPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GeoPoint& a, GeoPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoPoint* New() const final {
    return CreateMaybeMessage<GeoPoint>(nullptr);
  }

  GeoPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoPoint& from);
  void MergeFrom(const GeoPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GeoPoint";
  }
  protected:
  explicit GeoPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
  };
  // float longitude = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // float latitude = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GeoPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float longitude_;
  float latitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class GeoLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GeoLimit) */ {
 public:
  inline GeoLimit() : GeoLimit(nullptr) {}
  virtual ~GeoLimit();

  GeoLimit(const GeoLimit& from);
  GeoLimit(GeoLimit&& from) noexcept
    : GeoLimit() {
    *this = ::std::move(from);
  }

  inline GeoLimit& operator=(const GeoLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoLimit& operator=(GeoLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoLimit* internal_default_instance() {
    return reinterpret_cast<const GeoLimit*>(
               &_GeoLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GeoLimit& a, GeoLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoLimit* New() const final {
    return CreateMaybeMessage<GeoLimit>(nullptr);
  }

  GeoLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoLimit& from);
  void MergeFrom(const GeoLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GeoLimit";
  }
  protected:
  explicit GeoLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // float value = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GeoLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class GeoBoxedPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GeoBoxedPoint) */ {
 public:
  inline GeoBoxedPoint() : GeoBoxedPoint(nullptr) {}
  virtual ~GeoBoxedPoint();

  GeoBoxedPoint(const GeoBoxedPoint& from);
  GeoBoxedPoint(GeoBoxedPoint&& from) noexcept
    : GeoBoxedPoint() {
    *this = ::std::move(from);
  }

  inline GeoBoxedPoint& operator=(const GeoBoxedPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoBoxedPoint& operator=(GeoBoxedPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoBoxedPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoBoxedPoint* internal_default_instance() {
    return reinterpret_cast<const GeoBoxedPoint*>(
               &_GeoBoxedPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GeoBoxedPoint& a, GeoBoxedPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoBoxedPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoBoxedPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoBoxedPoint* New() const final {
    return CreateMaybeMessage<GeoBoxedPoint>(nullptr);
  }

  GeoBoxedPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoBoxedPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoBoxedPoint& from);
  void MergeFrom(const GeoBoxedPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoBoxedPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GeoBoxedPoint";
  }
  protected:
  explicit GeoBoxedPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeoPointFieldNumber = 1,
  };
  // .clarifai.api.GeoPoint geo_point = 1;
  bool has_geo_point() const;
  private:
  bool _internal_has_geo_point() const;
  public:
  void clear_geo_point();
  const ::clarifai::api::GeoPoint& geo_point() const;
  ::clarifai::api::GeoPoint* release_geo_point();
  ::clarifai::api::GeoPoint* mutable_geo_point();
  void set_allocated_geo_point(::clarifai::api::GeoPoint* geo_point);
  private:
  const ::clarifai::api::GeoPoint& _internal_geo_point() const;
  ::clarifai::api::GeoPoint* _internal_mutable_geo_point();
  public:
  void unsafe_arena_set_allocated_geo_point(
      ::clarifai::api::GeoPoint* geo_point);
  ::clarifai::api::GeoPoint* unsafe_arena_release_geo_point();

  // @@protoc_insertion_point(class_scope:clarifai.api.GeoBoxedPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::GeoPoint* geo_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Geo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Geo) */ {
 public:
  inline Geo() : Geo(nullptr) {}
  virtual ~Geo();

  Geo(const Geo& from);
  Geo(Geo&& from) noexcept
    : Geo() {
    *this = ::std::move(from);
  }

  inline Geo& operator=(const Geo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geo& operator=(Geo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geo* internal_default_instance() {
    return reinterpret_cast<const Geo*>(
               &_Geo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Geo& a, Geo& b) {
    a.Swap(&b);
  }
  inline void Swap(Geo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Geo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geo* New() const final {
    return CreateMaybeMessage<Geo>(nullptr);
  }

  Geo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geo& from);
  void MergeFrom(const Geo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Geo";
  }
  protected:
  explicit Geo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeoBoxFieldNumber = 3,
    kGeoPointFieldNumber = 1,
    kGeoLimitFieldNumber = 2,
  };
  // repeated .clarifai.api.GeoBoxedPoint geo_box = 3;
  int geo_box_size() const;
  private:
  int _internal_geo_box_size() const;
  public:
  void clear_geo_box();
  ::clarifai::api::GeoBoxedPoint* mutable_geo_box(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::GeoBoxedPoint >*
      mutable_geo_box();
  private:
  const ::clarifai::api::GeoBoxedPoint& _internal_geo_box(int index) const;
  ::clarifai::api::GeoBoxedPoint* _internal_add_geo_box();
  public:
  const ::clarifai::api::GeoBoxedPoint& geo_box(int index) const;
  ::clarifai::api::GeoBoxedPoint* add_geo_box();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::GeoBoxedPoint >&
      geo_box() const;

  // .clarifai.api.GeoPoint geo_point = 1;
  bool has_geo_point() const;
  private:
  bool _internal_has_geo_point() const;
  public:
  void clear_geo_point();
  const ::clarifai::api::GeoPoint& geo_point() const;
  ::clarifai::api::GeoPoint* release_geo_point();
  ::clarifai::api::GeoPoint* mutable_geo_point();
  void set_allocated_geo_point(::clarifai::api::GeoPoint* geo_point);
  private:
  const ::clarifai::api::GeoPoint& _internal_geo_point() const;
  ::clarifai::api::GeoPoint* _internal_mutable_geo_point();
  public:
  void unsafe_arena_set_allocated_geo_point(
      ::clarifai::api::GeoPoint* geo_point);
  ::clarifai::api::GeoPoint* unsafe_arena_release_geo_point();

  // .clarifai.api.GeoLimit geo_limit = 2;
  bool has_geo_limit() const;
  private:
  bool _internal_has_geo_limit() const;
  public:
  void clear_geo_limit();
  const ::clarifai::api::GeoLimit& geo_limit() const;
  ::clarifai::api::GeoLimit* release_geo_limit();
  ::clarifai::api::GeoLimit* mutable_geo_limit();
  void set_allocated_geo_limit(::clarifai::api::GeoLimit* geo_limit);
  private:
  const ::clarifai::api::GeoLimit& _internal_geo_limit() const;
  ::clarifai::api::GeoLimit* _internal_mutable_geo_limit();
  public:
  void unsafe_arena_set_allocated_geo_limit(
      ::clarifai::api::GeoLimit* geo_limit);
  ::clarifai::api::GeoLimit* unsafe_arena_release_geo_limit();

  // @@protoc_insertion_point(class_scope:clarifai.api.Geo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::GeoBoxedPoint > geo_box_;
  ::clarifai::api::GeoPoint* geo_point_;
  ::clarifai::api::GeoLimit* geo_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Image PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kBase64FieldNumber = 2,
    kHostedFieldNumber = 5,
    kAllowDuplicateUrlFieldNumber = 4,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes base64 = 2;
  void clear_base64();
  const std::string& base64() const;
  void set_base64(const std::string& value);
  void set_base64(std::string&& value);
  void set_base64(const char* value);
  void set_base64(const void* value, size_t size);
  std::string* mutable_base64();
  std::string* release_base64();
  void set_allocated_base64(std::string* base64);
  private:
  const std::string& _internal_base64() const;
  void _internal_set_base64(const std::string& value);
  std::string* _internal_mutable_base64();
  public:

  // .clarifai.api.HostedURL hosted = 5;
  bool has_hosted() const;
  private:
  bool _internal_has_hosted() const;
  public:
  void clear_hosted();
  const ::clarifai::api::HostedURL& hosted() const;
  ::clarifai::api::HostedURL* release_hosted();
  ::clarifai::api::HostedURL* mutable_hosted();
  void set_allocated_hosted(::clarifai::api::HostedURL* hosted);
  private:
  const ::clarifai::api::HostedURL& _internal_hosted() const;
  ::clarifai::api::HostedURL* _internal_mutable_hosted();
  public:
  void unsafe_arena_set_allocated_hosted(
      ::clarifai::api::HostedURL* hosted);
  ::clarifai::api::HostedURL* unsafe_arena_release_hosted();

  // bool allow_duplicate_url = 4;
  void clear_allow_duplicate_url();
  bool allow_duplicate_url() const;
  void set_allow_duplicate_url(bool value);
  private:
  bool _internal_allow_duplicate_url() const;
  void _internal_set_allow_duplicate_url(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base64_;
  ::clarifai::api::HostedURL* hosted_;
  bool allow_duplicate_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class HostedURL PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.HostedURL) */ {
 public:
  inline HostedURL() : HostedURL(nullptr) {}
  virtual ~HostedURL();

  HostedURL(const HostedURL& from);
  HostedURL(HostedURL&& from) noexcept
    : HostedURL() {
    *this = ::std::move(from);
  }

  inline HostedURL& operator=(const HostedURL& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostedURL& operator=(HostedURL&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostedURL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostedURL* internal_default_instance() {
    return reinterpret_cast<const HostedURL*>(
               &_HostedURL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(HostedURL& a, HostedURL& b) {
    a.Swap(&b);
  }
  inline void Swap(HostedURL* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostedURL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostedURL* New() const final {
    return CreateMaybeMessage<HostedURL>(nullptr);
  }

  HostedURL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostedURL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostedURL& from);
  void MergeFrom(const HostedURL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostedURL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.HostedURL";
  }
  protected:
  explicit HostedURL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizesFieldNumber = 3,
    kPrefixFieldNumber = 1,
    kSuffixFieldNumber = 2,
  };
  // repeated string sizes = 3;
  int sizes_size() const;
  private:
  int _internal_sizes_size() const;
  public:
  void clear_sizes();
  const std::string& sizes(int index) const;
  std::string* mutable_sizes(int index);
  void set_sizes(int index, const std::string& value);
  void set_sizes(int index, std::string&& value);
  void set_sizes(int index, const char* value);
  void set_sizes(int index, const char* value, size_t size);
  std::string* add_sizes();
  void add_sizes(const std::string& value);
  void add_sizes(std::string&& value);
  void add_sizes(const char* value);
  void add_sizes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sizes();
  private:
  const std::string& _internal_sizes(int index) const;
  std::string* _internal_add_sizes();
  public:

  // string prefix = 1;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // string suffix = 2;
  void clear_suffix();
  const std::string& suffix() const;
  void set_suffix(const std::string& value);
  void set_suffix(std::string&& value);
  void set_suffix(const char* value);
  void set_suffix(const char* value, size_t size);
  std::string* mutable_suffix();
  std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);
  private:
  const std::string& _internal_suffix() const;
  void _internal_set_suffix(const std::string& value);
  std::string* _internal_mutable_suffix();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.HostedURL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sizes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Input PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Input) */ {
 public:
  inline Input() : Input(nullptr) {}
  virtual ~Input();

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Input* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Input* New() const final {
    return CreateMaybeMessage<Input>(nullptr);
  }

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Input";
  }
  protected:
  explicit Input(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDataFieldNumber = 2,
    kCreatedAtFieldNumber = 4,
    kModifiedAtFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::clarifai::api::Data* data);
  ::clarifai::api::Data* unsafe_arena_release_data();

  // .google.protobuf.Timestamp created_at = 4;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp modified_at = 5;
  bool has_modified_at() const;
  private:
  bool _internal_has_modified_at() const;
  public:
  void clear_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified_at();
  void set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified_at();
  public:
  void unsafe_arena_set_allocated_modified_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_modified_at();

  // .clarifai.api.status.Status status = 6;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.Input)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::Data* data_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_at_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class InputCount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.InputCount) */ {
 public:
  inline InputCount() : InputCount(nullptr) {}
  virtual ~InputCount();

  InputCount(const InputCount& from);
  InputCount(InputCount&& from) noexcept
    : InputCount() {
    *this = ::std::move(from);
  }

  inline InputCount& operator=(const InputCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputCount& operator=(InputCount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputCount* internal_default_instance() {
    return reinterpret_cast<const InputCount*>(
               &_InputCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(InputCount& a, InputCount& b) {
    a.Swap(&b);
  }
  inline void Swap(InputCount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputCount* New() const final {
    return CreateMaybeMessage<InputCount>(nullptr);
  }

  InputCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputCount& from);
  void MergeFrom(const InputCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.InputCount";
  }
  protected:
  explicit InputCount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessedFieldNumber = 1,
    kToProcessFieldNumber = 2,
    kErrorsFieldNumber = 3,
    kProcessingFieldNumber = 4,
    kReindexedFieldNumber = 5,
    kToReindexFieldNumber = 6,
    kReindexErrorsFieldNumber = 7,
    kReindexingFieldNumber = 8,
  };
  // uint32 processed = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_processed();
  ::PROTOBUF_NAMESPACE_ID::uint32 processed() const;
  void set_processed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_processed() const;
  void _internal_set_processed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 to_process = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_to_process();
  ::PROTOBUF_NAMESPACE_ID::uint32 to_process() const;
  void set_to_process(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to_process() const;
  void _internal_set_to_process(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 errors = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_errors();
  ::PROTOBUF_NAMESPACE_ID::uint32 errors() const;
  void set_errors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errors() const;
  void _internal_set_errors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 processing = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_processing();
  ::PROTOBUF_NAMESPACE_ID::uint32 processing() const;
  void set_processing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_processing() const;
  void _internal_set_processing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reindexed = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_reindexed();
  ::PROTOBUF_NAMESPACE_ID::uint32 reindexed() const;
  void set_reindexed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reindexed() const;
  void _internal_set_reindexed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 to_reindex = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_to_reindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 to_reindex() const;
  void set_to_reindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to_reindex() const;
  void _internal_set_to_reindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reindex_errors = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_reindex_errors();
  ::PROTOBUF_NAMESPACE_ID::uint32 reindex_errors() const;
  void set_reindex_errors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reindex_errors() const;
  void _internal_set_reindex_errors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reindexing = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_reindexing();
  ::PROTOBUF_NAMESPACE_ID::uint32 reindexing() const;
  void set_reindexing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reindexing() const;
  void _internal_set_reindexing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.InputCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 processed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_process_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errors_;
  ::PROTOBUF_NAMESPACE_ID::uint32 processing_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reindexed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_reindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reindex_errors_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reindexing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Key PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Key) */ {
 public:
  inline Key() : Key(nullptr) {}
  virtual ~Key();

  Key(const Key& from);
  Key(Key&& from) noexcept
    : Key() {
    *this = ::std::move(from);
  }

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }
  inline Key& operator=(Key&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Key* internal_default_instance() {
    return reinterpret_cast<const Key*>(
               &_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(Key& a, Key& b) {
    a.Swap(&b);
  }
  inline void Swap(Key* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Key* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Key* New() const final {
    return CreateMaybeMessage<Key>(nullptr);
  }

  Key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Key>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Key";
  }
  protected:
  explicit Key(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 3,
    kAppsFieldNumber = 4,
    kEndpointsFieldNumber = 7,
    kIdFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kTypeFieldNumber = 8,
    kCreatedAtFieldNumber = 5,
    kExpiresAtFieldNumber = 6,
  };
  // repeated string scopes = 3;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;
  public:
  void clear_scopes();
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes();
  private:
  const std::string& _internal_scopes(int index) const;
  std::string* _internal_add_scopes();
  public:

  // repeated .clarifai.api.App apps = 4;
  int apps_size() const;
  private:
  int _internal_apps_size() const;
  public:
  void clear_apps();
  ::clarifai::api::App* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
      mutable_apps();
  private:
  const ::clarifai::api::App& _internal_apps(int index) const;
  ::clarifai::api::App* _internal_add_apps();
  public:
  const ::clarifai::api::App& apps(int index) const;
  ::clarifai::api::App* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
      apps() const;

  // repeated string endpoints = 7;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  const std::string& endpoints(int index) const;
  std::string* mutable_endpoints(int index);
  void set_endpoints(int index, const std::string& value);
  void set_endpoints(int index, std::string&& value);
  void set_endpoints(int index, const char* value);
  void set_endpoints(int index, const char* value, size_t size);
  std::string* add_endpoints();
  void add_endpoints(const std::string& value);
  void add_endpoints(std::string&& value);
  void add_endpoints(const char* value);
  void add_endpoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_endpoints();
  private:
  const std::string& _internal_endpoints(int index) const;
  std::string* _internal_add_endpoints();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string type = 8;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .google.protobuf.Timestamp created_at = 5;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp expires_at = 6;
  bool has_expires_at() const;
  private:
  bool _internal_has_expires_at() const;
  public:
  void clear_expires_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expires_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expires_at();
  public:
  void unsafe_arena_set_allocated_expires_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expires_at();

  // @@protoc_insertion_point(class_scope:clarifai.api.Key)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App > apps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> endpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expires_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class LicenseLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.LicenseLimit) */ {
 public:
  inline LicenseLimit() : LicenseLimit(nullptr) {}
  virtual ~LicenseLimit();

  LicenseLimit(const LicenseLimit& from);
  LicenseLimit(LicenseLimit&& from) noexcept
    : LicenseLimit() {
    *this = ::std::move(from);
  }

  inline LicenseLimit& operator=(const LicenseLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline LicenseLimit& operator=(LicenseLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LicenseLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LicenseLimit* internal_default_instance() {
    return reinterpret_cast<const LicenseLimit*>(
               &_LicenseLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(LicenseLimit& a, LicenseLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(LicenseLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LicenseLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LicenseLimit* New() const final {
    return CreateMaybeMessage<LicenseLimit>(nullptr);
  }

  LicenseLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LicenseLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LicenseLimit& from);
  void MergeFrom(const LicenseLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LicenseLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.LicenseLimit";
  }
  protected:
  explicit LicenseLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kExpiresAtFieldNumber = 2,
    kStatusFieldNumber = 4,
    kMaxOperationCountFieldNumber = 3,
  };
  // .clarifai.api.Model model = 1;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::api::Model& model() const;
  ::clarifai::api::Model* release_model();
  ::clarifai::api::Model* mutable_model();
  void set_allocated_model(::clarifai::api::Model* model);
  private:
  const ::clarifai::api::Model& _internal_model() const;
  ::clarifai::api::Model* _internal_mutable_model();
  public:
  void unsafe_arena_set_allocated_model(
      ::clarifai::api::Model* model);
  ::clarifai::api::Model* unsafe_arena_release_model();

  // .google.protobuf.Timestamp expires_at = 2;
  bool has_expires_at() const;
  private:
  bool _internal_has_expires_at() const;
  public:
  void clear_expires_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expires_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expires_at();
  public:
  void unsafe_arena_set_allocated_expires_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expires_at();

  // .clarifai.api.status.Status status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // int64 max_operation_count = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_max_operation_count();
  ::PROTOBUF_NAMESPACE_ID::int64 max_operation_count() const;
  void set_max_operation_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_operation_count() const;
  void _internal_set_max_operation_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.LicenseLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::Model* model_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expires_at_;
  ::clarifai::api::status::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_operation_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class License PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.License) */ {
 public:
  inline License() : License(nullptr) {}
  virtual ~License();

  License(const License& from);
  License(License&& from) noexcept
    : License() {
    *this = ::std::move(from);
  }

  inline License& operator=(const License& from) {
    CopyFrom(from);
    return *this;
  }
  inline License& operator=(License&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const License& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const License* internal_default_instance() {
    return reinterpret_cast<const License*>(
               &_License_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(License& a, License& b) {
    a.Swap(&b);
  }
  inline void Swap(License* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(License* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline License* New() const final {
    return CreateMaybeMessage<License>(nullptr);
  }

  License* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<License>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const License& from);
  void MergeFrom(const License& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(License* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.License";
  }
  protected:
  explicit License(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitsFieldNumber = 5,
    kIdFieldNumber = 1,
    kExpiresAtFieldNumber = 3,
    kStatusFieldNumber = 6,
    kScopeFieldNumber = 2,
    kExpirationActionFieldNumber = 4,
    kIsOfflineFieldNumber = 7,
  };
  // repeated .clarifai.api.LicenseLimit limits = 5;
  int limits_size() const;
  private:
  int _internal_limits_size() const;
  public:
  void clear_limits();
  ::clarifai::api::LicenseLimit* mutable_limits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LicenseLimit >*
      mutable_limits();
  private:
  const ::clarifai::api::LicenseLimit& _internal_limits(int index) const;
  ::clarifai::api::LicenseLimit* _internal_add_limits();
  public:
  const ::clarifai::api::LicenseLimit& limits(int index) const;
  ::clarifai::api::LicenseLimit* add_limits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LicenseLimit >&
      limits() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp expires_at = 3;
  bool has_expires_at() const;
  private:
  bool _internal_has_expires_at() const;
  public:
  void clear_expires_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expires_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expires_at();
  public:
  void unsafe_arena_set_allocated_expires_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expires_at();

  // .clarifai.api.status.Status status = 6;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.LicenseScope scope = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_scope();
  ::clarifai::api::LicenseScope scope() const;
  void set_scope(::clarifai::api::LicenseScope value);
  private:
  ::clarifai::api::LicenseScope _internal_scope() const;
  void _internal_set_scope(::clarifai::api::LicenseScope value);
  public:

  // .clarifai.api.ExpirationAction expiration_action = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_expiration_action();
  ::clarifai::api::ExpirationAction expiration_action() const;
  void set_expiration_action(::clarifai::api::ExpirationAction value);
  private:
  ::clarifai::api::ExpirationAction _internal_expiration_action() const;
  void _internal_set_expiration_action(::clarifai::api::ExpirationAction value);
  public:

  // bool is_offline = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_is_offline();
  bool is_offline() const;
  void set_is_offline(bool value);
  private:
  bool _internal_is_offline() const;
  void _internal_set_is_offline(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.License)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LicenseLimit > limits_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expires_at_;
  ::clarifai::api::status::Status* status_;
  int scope_;
  int expiration_action_;
  bool is_offline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Model PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Model) */ {
 public:
  inline Model() : Model(nullptr) {}
  virtual ~Model();

  Model(const Model& from);
  Model(Model&& from) noexcept
    : Model() {
    *this = ::std::move(from);
  }

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }
  inline Model& operator=(Model&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Model& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(Model& a, Model& b) {
    a.Swap(&b);
  }
  inline void Swap(Model* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Model* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Model* New() const final {
    return CreateMaybeMessage<Model>(nullptr);
  }

  Model* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Model>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Model";
  }
  protected:
  explicit Model(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kAppIdFieldNumber = 4,
    kDisplayNameFieldNumber = 7,
    kTemplateNameFieldNumber = 8,
    kUserIdFieldNumber = 9,
    kCreatedAtFieldNumber = 3,
    kOutputInfoFieldNumber = 5,
    kModelVersionFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string app_id = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string display_name = 7;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string template_name = 8;
  void clear_template_name();
  const std::string& template_name() const;
  void set_template_name(const std::string& value);
  void set_template_name(std::string&& value);
  void set_template_name(const char* value);
  void set_template_name(const char* value, size_t size);
  std::string* mutable_template_name();
  std::string* release_template_name();
  void set_allocated_template_name(std::string* template_name);
  private:
  const std::string& _internal_template_name() const;
  void _internal_set_template_name(const std::string& value);
  std::string* _internal_mutable_template_name();
  public:

  // string user_id = 9;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .clarifai.api.OutputInfo output_info = 5;
  bool has_output_info() const;
  private:
  bool _internal_has_output_info() const;
  public:
  void clear_output_info();
  const ::clarifai::api::OutputInfo& output_info() const;
  ::clarifai::api::OutputInfo* release_output_info();
  ::clarifai::api::OutputInfo* mutable_output_info();
  void set_allocated_output_info(::clarifai::api::OutputInfo* output_info);
  private:
  const ::clarifai::api::OutputInfo& _internal_output_info() const;
  ::clarifai::api::OutputInfo* _internal_mutable_output_info();
  public:
  void unsafe_arena_set_allocated_output_info(
      ::clarifai::api::OutputInfo* output_info);
  ::clarifai::api::OutputInfo* unsafe_arena_release_output_info();

  // .clarifai.api.ModelVersion model_version = 6;
  bool has_model_version() const;
  private:
  bool _internal_has_model_version() const;
  public:
  void clear_model_version();
  const ::clarifai::api::ModelVersion& model_version() const;
  ::clarifai::api::ModelVersion* release_model_version();
  ::clarifai::api::ModelVersion* mutable_model_version();
  void set_allocated_model_version(::clarifai::api::ModelVersion* model_version);
  private:
  const ::clarifai::api::ModelVersion& _internal_model_version() const;
  ::clarifai::api::ModelVersion* _internal_mutable_model_version();
  public:
  void unsafe_arena_set_allocated_model_version(
      ::clarifai::api::ModelVersion* model_version);
  ::clarifai::api::ModelVersion* unsafe_arena_release_model_version();

  // @@protoc_insertion_point(class_scope:clarifai.api.Model)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::clarifai::api::OutputInfo* output_info_;
  ::clarifai::api::ModelVersion* model_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class OutputInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.OutputInfo) */ {
 public:
  inline OutputInfo() : OutputInfo(nullptr) {}
  virtual ~OutputInfo();

  OutputInfo(const OutputInfo& from);
  OutputInfo(OutputInfo&& from) noexcept
    : OutputInfo() {
    *this = ::std::move(from);
  }

  inline OutputInfo& operator=(const OutputInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputInfo& operator=(OutputInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputInfo* internal_default_instance() {
    return reinterpret_cast<const OutputInfo*>(
               &_OutputInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(OutputInfo& a, OutputInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputInfo* New() const final {
    return CreateMaybeMessage<OutputInfo>(nullptr);
  }

  OutputInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputInfo& from);
  void MergeFrom(const OutputInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.OutputInfo";
  }
  protected:
  explicit OutputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kTypeFieldNumber = 4,
    kTypeExtFieldNumber = 5,
    kDataFieldNumber = 1,
    kOutputConfigFieldNumber = 2,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string type = 4;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string type_ext = 5;
  void clear_type_ext();
  const std::string& type_ext() const;
  void set_type_ext(const std::string& value);
  void set_type_ext(std::string&& value);
  void set_type_ext(const char* value);
  void set_type_ext(const char* value, size_t size);
  std::string* mutable_type_ext();
  std::string* release_type_ext();
  void set_allocated_type_ext(std::string* type_ext);
  private:
  const std::string& _internal_type_ext() const;
  void _internal_set_type_ext(const std::string& value);
  std::string* _internal_mutable_type_ext();
  public:

  // .clarifai.api.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::clarifai::api::Data* data);
  ::clarifai::api::Data* unsafe_arena_release_data();

  // .clarifai.api.OutputConfig output_config = 2;
  bool has_output_config() const;
  private:
  bool _internal_has_output_config() const;
  public:
  void clear_output_config();
  const ::clarifai::api::OutputConfig& output_config() const;
  ::clarifai::api::OutputConfig* release_output_config();
  ::clarifai::api::OutputConfig* mutable_output_config();
  void set_allocated_output_config(::clarifai::api::OutputConfig* output_config);
  private:
  const ::clarifai::api::OutputConfig& _internal_output_config() const;
  ::clarifai::api::OutputConfig* _internal_mutable_output_config();
  public:
  void unsafe_arena_set_allocated_output_config(
      ::clarifai::api::OutputConfig* output_config);
  ::clarifai::api::OutputConfig* unsafe_arena_release_output_config();

  // @@protoc_insertion_point(class_scope:clarifai.api.OutputInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_ext_;
  ::clarifai::api::Data* data_;
  ::clarifai::api::OutputConfig* output_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class OutputConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.OutputConfig) */ {
 public:
  inline OutputConfig() : OutputConfig(nullptr) {}
  virtual ~OutputConfig();

  OutputConfig(const OutputConfig& from);
  OutputConfig(OutputConfig&& from) noexcept
    : OutputConfig() {
    *this = ::std::move(from);
  }

  inline OutputConfig& operator=(const OutputConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputConfig& operator=(OutputConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputConfig* internal_default_instance() {
    return reinterpret_cast<const OutputConfig*>(
               &_OutputConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(OutputConfig& a, OutputConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputConfig* New() const final {
    return CreateMaybeMessage<OutputConfig>(nullptr);
  }

  OutputConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputConfig& from);
  void MergeFrom(const OutputConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.OutputConfig";
  }
  protected:
  explicit OutputConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectConceptsFieldNumber = 8,
    kExistingModelIdFieldNumber = 3,
    kLanguageFieldNumber = 4,
    kHyperParametersFieldNumber = 5,
    kEmbedModelVersionIdFieldNumber = 14,
    kHyperParamsFieldNumber = 13,
    kModelMetadataFieldNumber = 17,
    kMaxConceptsFieldNumber = 6,
    kConceptsMutuallyExclusiveFieldNumber = 1,
    kClosedEnvironmentFieldNumber = 2,
    kFailOnMissingPositiveExamplesFieldNumber = 15,
    kMinValueFieldNumber = 7,
    kTrainingTimeoutFieldNumber = 9,
    kSampleMsFieldNumber = 10,
    kTestSplitPercentFieldNumber = 11,
    kConceptThresholdTypeFieldNumber = 16,
  };
  // repeated .clarifai.api.Concept select_concepts = 8;
  int select_concepts_size() const;
  private:
  int _internal_select_concepts_size() const;
  public:
  void clear_select_concepts();
  ::clarifai::api::Concept* mutable_select_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_select_concepts();
  private:
  const ::clarifai::api::Concept& _internal_select_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_select_concepts();
  public:
  const ::clarifai::api::Concept& select_concepts(int index) const;
  ::clarifai::api::Concept* add_select_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      select_concepts() const;

  // string existing_model_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_existing_model_id();
  PROTOBUF_DEPRECATED const std::string& existing_model_id() const;
  PROTOBUF_DEPRECATED void set_existing_model_id(const std::string& value);
  PROTOBUF_DEPRECATED void set_existing_model_id(std::string&& value);
  PROTOBUF_DEPRECATED void set_existing_model_id(const char* value);
  PROTOBUF_DEPRECATED void set_existing_model_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_existing_model_id();
  PROTOBUF_DEPRECATED std::string* release_existing_model_id();
  PROTOBUF_DEPRECATED void set_allocated_existing_model_id(std::string* existing_model_id);
  private:
  const std::string& _internal_existing_model_id() const;
  void _internal_set_existing_model_id(const std::string& value);
  std::string* _internal_mutable_existing_model_id();
  public:

  // string language = 4;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string hyper_parameters = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_hyper_parameters();
  PROTOBUF_DEPRECATED const std::string& hyper_parameters() const;
  PROTOBUF_DEPRECATED void set_hyper_parameters(const std::string& value);
  PROTOBUF_DEPRECATED void set_hyper_parameters(std::string&& value);
  PROTOBUF_DEPRECATED void set_hyper_parameters(const char* value);
  PROTOBUF_DEPRECATED void set_hyper_parameters(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_hyper_parameters();
  PROTOBUF_DEPRECATED std::string* release_hyper_parameters();
  PROTOBUF_DEPRECATED void set_allocated_hyper_parameters(std::string* hyper_parameters);
  private:
  const std::string& _internal_hyper_parameters() const;
  void _internal_set_hyper_parameters(const std::string& value);
  std::string* _internal_mutable_hyper_parameters();
  public:

  // string embed_model_version_id = 14;
  void clear_embed_model_version_id();
  const std::string& embed_model_version_id() const;
  void set_embed_model_version_id(const std::string& value);
  void set_embed_model_version_id(std::string&& value);
  void set_embed_model_version_id(const char* value);
  void set_embed_model_version_id(const char* value, size_t size);
  std::string* mutable_embed_model_version_id();
  std::string* release_embed_model_version_id();
  void set_allocated_embed_model_version_id(std::string* embed_model_version_id);
  private:
  const std::string& _internal_embed_model_version_id() const;
  void _internal_set_embed_model_version_id(const std::string& value);
  std::string* _internal_mutable_embed_model_version_id();
  public:

  // .google.protobuf.Struct hyper_params = 13;
  bool has_hyper_params() const;
  private:
  bool _internal_has_hyper_params() const;
  public:
  void clear_hyper_params();
  const PROTOBUF_NAMESPACE_ID::Struct& hyper_params() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_hyper_params();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_hyper_params();
  void set_allocated_hyper_params(PROTOBUF_NAMESPACE_ID::Struct* hyper_params);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_hyper_params() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_hyper_params();
  public:
  void unsafe_arena_set_allocated_hyper_params(
      PROTOBUF_NAMESPACE_ID::Struct* hyper_params);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_hyper_params();

  // .google.protobuf.Struct model_metadata = 17;
  bool has_model_metadata() const;
  private:
  bool _internal_has_model_metadata() const;
  public:
  void clear_model_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& model_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_model_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_model_metadata();
  void set_allocated_model_metadata(PROTOBUF_NAMESPACE_ID::Struct* model_metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_model_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_model_metadata();
  public:
  void unsafe_arena_set_allocated_model_metadata(
      PROTOBUF_NAMESPACE_ID::Struct* model_metadata);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_model_metadata();

  // uint32 max_concepts = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_max_concepts();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_concepts() const;
  void set_max_concepts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_concepts() const;
  void _internal_set_max_concepts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool concepts_mutually_exclusive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_concepts_mutually_exclusive();
  bool concepts_mutually_exclusive() const;
  void set_concepts_mutually_exclusive(bool value);
  private:
  bool _internal_concepts_mutually_exclusive() const;
  void _internal_set_concepts_mutually_exclusive(bool value);
  public:

  // bool closed_environment = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_closed_environment();
  bool closed_environment() const;
  void set_closed_environment(bool value);
  private:
  bool _internal_closed_environment() const;
  void _internal_set_closed_environment(bool value);
  public:

  // bool fail_on_missing_positive_examples = 15;
  void clear_fail_on_missing_positive_examples();
  bool fail_on_missing_positive_examples() const;
  void set_fail_on_missing_positive_examples(bool value);
  private:
  bool _internal_fail_on_missing_positive_examples() const;
  void _internal_set_fail_on_missing_positive_examples(bool value);
  public:

  // float min_value = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_min_value();
  float min_value() const;
  void set_min_value(float value);
  private:
  float _internal_min_value() const;
  void _internal_set_min_value(float value);
  public:

  // uint32 training_timeout = 9;
  void clear_training_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 training_timeout() const;
  void set_training_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_training_timeout() const;
  void _internal_set_training_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sample_ms = 10;
  void clear_sample_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_ms() const;
  void set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sample_ms() const;
  void _internal_set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 test_split_percent = 11;
  void clear_test_split_percent();
  ::PROTOBUF_NAMESPACE_ID::uint32 test_split_percent() const;
  void set_test_split_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_test_split_percent() const;
  void _internal_set_test_split_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .clarifai.api.ValueComparator concept_threshold_type = 16;
  void clear_concept_threshold_type();
  ::clarifai::api::ValueComparator concept_threshold_type() const;
  void set_concept_threshold_type(::clarifai::api::ValueComparator value);
  private:
  ::clarifai::api::ValueComparator _internal_concept_threshold_type() const;
  void _internal_set_concept_threshold_type(::clarifai::api::ValueComparator value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.OutputConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > select_concepts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr existing_model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hyper_parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr embed_model_version_id_;
  PROTOBUF_NAMESPACE_ID::Struct* hyper_params_;
  PROTOBUF_NAMESPACE_ID::Struct* model_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_concepts_;
  bool concepts_mutually_exclusive_;
  bool closed_environment_;
  bool fail_on_missing_positive_examples_;
  float min_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 training_timeout_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 test_split_percent_;
  int concept_threshold_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ModelQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ModelQuery) */ {
 public:
  inline ModelQuery() : ModelQuery(nullptr) {}
  virtual ~ModelQuery();

  ModelQuery(const ModelQuery& from);
  ModelQuery(ModelQuery&& from) noexcept
    : ModelQuery() {
    *this = ::std::move(from);
  }

  inline ModelQuery& operator=(const ModelQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelQuery& operator=(ModelQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelQuery* internal_default_instance() {
    return reinterpret_cast<const ModelQuery*>(
               &_ModelQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ModelQuery& a, ModelQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelQuery* New() const final {
    return CreateMaybeMessage<ModelQuery>(nullptr);
  }

  ModelQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelQuery& from);
  void MergeFrom(const ModelQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ModelQuery";
  }
  protected:
  explicit ModelQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ModelQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ModelVersion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ModelVersion) */ {
 public:
  inline ModelVersion() : ModelVersion(nullptr) {}
  virtual ~ModelVersion();

  ModelVersion(const ModelVersion& from);
  ModelVersion(ModelVersion&& from) noexcept
    : ModelVersion() {
    *this = ::std::move(from);
  }

  inline ModelVersion& operator=(const ModelVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelVersion& operator=(ModelVersion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelVersion* internal_default_instance() {
    return reinterpret_cast<const ModelVersion*>(
               &_ModelVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ModelVersion& a, ModelVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelVersion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelVersion* New() const final {
    return CreateMaybeMessage<ModelVersion>(nullptr);
  }

  ModelVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelVersion& from);
  void MergeFrom(const ModelVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ModelVersion";
  }
  protected:
  explicit ModelVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kWorkerIdFieldNumber = 9,
    kCreatedAtFieldNumber = 2,
    kStatusFieldNumber = 3,
    kMetricsFieldNumber = 5,
    kPretrainedModelConfigFieldNumber = 7,
    kTrainStatsFieldNumber = 8,
    kCompletedAtFieldNumber = 10,
    kActiveConceptCountFieldNumber = 4,
    kTotalInputCountFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string worker_id = 9;
  void clear_worker_id();
  const std::string& worker_id() const;
  void set_worker_id(const std::string& value);
  void set_worker_id(std::string&& value);
  void set_worker_id(const char* value);
  void set_worker_id(const char* value, size_t size);
  std::string* mutable_worker_id();
  std::string* release_worker_id();
  void set_allocated_worker_id(std::string* worker_id);
  private:
  const std::string& _internal_worker_id() const;
  void _internal_set_worker_id(const std::string& value);
  std::string* _internal_mutable_worker_id();
  public:

  // .google.protobuf.Timestamp created_at = 2;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .clarifai.api.status.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.EvalMetrics metrics = 5;
  bool has_metrics() const;
  private:
  bool _internal_has_metrics() const;
  public:
  void clear_metrics();
  const ::clarifai::api::EvalMetrics& metrics() const;
  ::clarifai::api::EvalMetrics* release_metrics();
  ::clarifai::api::EvalMetrics* mutable_metrics();
  void set_allocated_metrics(::clarifai::api::EvalMetrics* metrics);
  private:
  const ::clarifai::api::EvalMetrics& _internal_metrics() const;
  ::clarifai::api::EvalMetrics* _internal_mutable_metrics();
  public:
  void unsafe_arena_set_allocated_metrics(
      ::clarifai::api::EvalMetrics* metrics);
  ::clarifai::api::EvalMetrics* unsafe_arena_release_metrics();

  // .clarifai.api.PretrainedModelConfig pretrained_model_config = 7 [(.clarifai.auth.util.cl_private_field) = true];
  bool has_pretrained_model_config() const;
  private:
  bool _internal_has_pretrained_model_config() const;
  public:
  void clear_pretrained_model_config();
  const ::clarifai::api::PretrainedModelConfig& pretrained_model_config() const;
  ::clarifai::api::PretrainedModelConfig* release_pretrained_model_config();
  ::clarifai::api::PretrainedModelConfig* mutable_pretrained_model_config();
  void set_allocated_pretrained_model_config(::clarifai::api::PretrainedModelConfig* pretrained_model_config);
  private:
  const ::clarifai::api::PretrainedModelConfig& _internal_pretrained_model_config() const;
  ::clarifai::api::PretrainedModelConfig* _internal_mutable_pretrained_model_config();
  public:
  void unsafe_arena_set_allocated_pretrained_model_config(
      ::clarifai::api::PretrainedModelConfig* pretrained_model_config);
  ::clarifai::api::PretrainedModelConfig* unsafe_arena_release_pretrained_model_config();

  // .clarifai.api.TrainStats train_stats = 8 [(.clarifai.auth.util.cl_private_field) = true];
  bool has_train_stats() const;
  private:
  bool _internal_has_train_stats() const;
  public:
  void clear_train_stats();
  const ::clarifai::api::TrainStats& train_stats() const;
  ::clarifai::api::TrainStats* release_train_stats();
  ::clarifai::api::TrainStats* mutable_train_stats();
  void set_allocated_train_stats(::clarifai::api::TrainStats* train_stats);
  private:
  const ::clarifai::api::TrainStats& _internal_train_stats() const;
  ::clarifai::api::TrainStats* _internal_mutable_train_stats();
  public:
  void unsafe_arena_set_allocated_train_stats(
      ::clarifai::api::TrainStats* train_stats);
  ::clarifai::api::TrainStats* unsafe_arena_release_train_stats();

  // .google.protobuf.Timestamp completed_at = 10;
  bool has_completed_at() const;
  private:
  bool _internal_has_completed_at() const;
  public:
  void clear_completed_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& completed_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_completed_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_completed_at();
  void set_allocated_completed_at(PROTOBUF_NAMESPACE_ID::Timestamp* completed_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_completed_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_completed_at();
  public:
  void unsafe_arena_set_allocated_completed_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* completed_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_completed_at();

  // uint32 active_concept_count = 4;
  void clear_active_concept_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 active_concept_count() const;
  void set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_active_concept_count() const;
  void _internal_set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_input_count = 6;
  void clear_total_input_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_input_count() const;
  void set_total_input_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_input_count() const;
  void _internal_set_total_input_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ModelVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::EvalMetrics* metrics_;
  ::clarifai::api::PretrainedModelConfig* pretrained_model_config_;
  ::clarifai::api::TrainStats* train_stats_;
  PROTOBUF_NAMESPACE_ID::Timestamp* completed_at_;
  ::PROTOBUF_NAMESPACE_ID::uint32 active_concept_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_input_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class PretrainedModelConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PretrainedModelConfig) */ {
 public:
  inline PretrainedModelConfig() : PretrainedModelConfig(nullptr) {}
  virtual ~PretrainedModelConfig();

  PretrainedModelConfig(const PretrainedModelConfig& from);
  PretrainedModelConfig(PretrainedModelConfig&& from) noexcept
    : PretrainedModelConfig() {
    *this = ::std::move(from);
  }

  inline PretrainedModelConfig& operator=(const PretrainedModelConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PretrainedModelConfig& operator=(PretrainedModelConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PretrainedModelConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PretrainedModelConfig* internal_default_instance() {
    return reinterpret_cast<const PretrainedModelConfig*>(
               &_PretrainedModelConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(PretrainedModelConfig& a, PretrainedModelConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PretrainedModelConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PretrainedModelConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PretrainedModelConfig* New() const final {
    return CreateMaybeMessage<PretrainedModelConfig>(nullptr);
  }

  PretrainedModelConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PretrainedModelConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PretrainedModelConfig& from);
  void MergeFrom(const PretrainedModelConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PretrainedModelConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PretrainedModelConfig";
  }
  protected:
  explicit PretrainedModelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PretrainedModelConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class TrainStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.TrainStats) */ {
 public:
  inline TrainStats() : TrainStats(nullptr) {}
  virtual ~TrainStats();

  TrainStats(const TrainStats& from);
  TrainStats(TrainStats&& from) noexcept
    : TrainStats() {
    *this = ::std::move(from);
  }

  inline TrainStats& operator=(const TrainStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainStats& operator=(TrainStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainStats* internal_default_instance() {
    return reinterpret_cast<const TrainStats*>(
               &_TrainStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(TrainStats& a, TrainStats& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainStats* New() const final {
    return CreateMaybeMessage<TrainStats>(nullptr);
  }

  TrainStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainStats& from);
  void MergeFrom(const TrainStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.TrainStats";
  }
  protected:
  explicit TrainStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLossCurveFieldNumber = 1,
  };
  // repeated .clarifai.api.LossCurveEntry loss_curve = 1;
  int loss_curve_size() const;
  private:
  int _internal_loss_curve_size() const;
  public:
  void clear_loss_curve();
  ::clarifai::api::LossCurveEntry* mutable_loss_curve(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LossCurveEntry >*
      mutable_loss_curve();
  private:
  const ::clarifai::api::LossCurveEntry& _internal_loss_curve(int index) const;
  ::clarifai::api::LossCurveEntry* _internal_add_loss_curve();
  public:
  const ::clarifai::api::LossCurveEntry& loss_curve(int index) const;
  ::clarifai::api::LossCurveEntry* add_loss_curve();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LossCurveEntry >&
      loss_curve() const;

  // @@protoc_insertion_point(class_scope:clarifai.api.TrainStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LossCurveEntry > loss_curve_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class LossCurveEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.LossCurveEntry) */ {
 public:
  inline LossCurveEntry() : LossCurveEntry(nullptr) {}
  virtual ~LossCurveEntry();

  LossCurveEntry(const LossCurveEntry& from);
  LossCurveEntry(LossCurveEntry&& from) noexcept
    : LossCurveEntry() {
    *this = ::std::move(from);
  }

  inline LossCurveEntry& operator=(const LossCurveEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LossCurveEntry& operator=(LossCurveEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LossCurveEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LossCurveEntry* internal_default_instance() {
    return reinterpret_cast<const LossCurveEntry*>(
               &_LossCurveEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(LossCurveEntry& a, LossCurveEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LossCurveEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LossCurveEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LossCurveEntry* New() const final {
    return CreateMaybeMessage<LossCurveEntry>(nullptr);
  }

  LossCurveEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LossCurveEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LossCurveEntry& from);
  void MergeFrom(const LossCurveEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LossCurveEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.LossCurveEntry";
  }
  protected:
  explicit LossCurveEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpochFieldNumber = 1,
    kGlobalStepFieldNumber = 2,
    kCostFieldNumber = 3,
  };
  // uint32 epoch = 1;
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 global_step = 2;
  void clear_global_step();
  ::PROTOBUF_NAMESPACE_ID::uint32 global_step() const;
  void set_global_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_global_step() const;
  void _internal_set_global_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float cost = 3;
  void clear_cost();
  float cost() const;
  void set_cost(float value);
  private:
  float _internal_cost() const;
  void _internal_set_cost(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.LossCurveEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 global_step_;
  float cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class LabelCount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.LabelCount) */ {
 public:
  inline LabelCount() : LabelCount(nullptr) {}
  virtual ~LabelCount();

  LabelCount(const LabelCount& from);
  LabelCount(LabelCount&& from) noexcept
    : LabelCount() {
    *this = ::std::move(from);
  }

  inline LabelCount& operator=(const LabelCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelCount& operator=(LabelCount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelCount* internal_default_instance() {
    return reinterpret_cast<const LabelCount*>(
               &_LabelCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(LabelCount& a, LabelCount& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelCount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelCount* New() const final {
    return CreateMaybeMessage<LabelCount>(nullptr);
  }

  LabelCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelCount& from);
  void MergeFrom(const LabelCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.LabelCount";
  }
  protected:
  explicit LabelCount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptNameFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // string concept_name = 1;
  void clear_concept_name();
  const std::string& concept_name() const;
  void set_concept_name(const std::string& value);
  void set_concept_name(std::string&& value);
  void set_concept_name(const char* value);
  void set_concept_name(const char* value, size_t size);
  std::string* mutable_concept_name();
  std::string* release_concept_name();
  void set_allocated_concept_name(std::string* concept_name);
  private:
  const std::string& _internal_concept_name() const;
  void _internal_set_concept_name(const std::string& value);
  std::string* _internal_mutable_concept_name();
  public:

  // uint32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.LabelCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class LabelDistribution PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.LabelDistribution) */ {
 public:
  inline LabelDistribution() : LabelDistribution(nullptr) {}
  virtual ~LabelDistribution();

  LabelDistribution(const LabelDistribution& from);
  LabelDistribution(LabelDistribution&& from) noexcept
    : LabelDistribution() {
    *this = ::std::move(from);
  }

  inline LabelDistribution& operator=(const LabelDistribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelDistribution& operator=(LabelDistribution&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelDistribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelDistribution* internal_default_instance() {
    return reinterpret_cast<const LabelDistribution*>(
               &_LabelDistribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(LabelDistribution& a, LabelDistribution& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelDistribution* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelDistribution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelDistribution* New() const final {
    return CreateMaybeMessage<LabelDistribution>(nullptr);
  }

  LabelDistribution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelDistribution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelDistribution& from);
  void MergeFrom(const LabelDistribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelDistribution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.LabelDistribution";
  }
  protected:
  explicit LabelDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositiveLabelCountsFieldNumber = 1,
  };
  // repeated .clarifai.api.LabelCount positive_label_counts = 1;
  int positive_label_counts_size() const;
  private:
  int _internal_positive_label_counts_size() const;
  public:
  void clear_positive_label_counts();
  ::clarifai::api::LabelCount* mutable_positive_label_counts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelCount >*
      mutable_positive_label_counts();
  private:
  const ::clarifai::api::LabelCount& _internal_positive_label_counts(int index) const;
  ::clarifai::api::LabelCount* _internal_add_positive_label_counts();
  public:
  const ::clarifai::api::LabelCount& positive_label_counts(int index) const;
  ::clarifai::api::LabelCount* add_positive_label_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelCount >&
      positive_label_counts() const;

  // @@protoc_insertion_point(class_scope:clarifai.api.LabelDistribution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelCount > positive_label_counts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class CooccurrenceMatrixEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.CooccurrenceMatrixEntry) */ {
 public:
  inline CooccurrenceMatrixEntry() : CooccurrenceMatrixEntry(nullptr) {}
  virtual ~CooccurrenceMatrixEntry();

  CooccurrenceMatrixEntry(const CooccurrenceMatrixEntry& from);
  CooccurrenceMatrixEntry(CooccurrenceMatrixEntry&& from) noexcept
    : CooccurrenceMatrixEntry() {
    *this = ::std::move(from);
  }

  inline CooccurrenceMatrixEntry& operator=(const CooccurrenceMatrixEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CooccurrenceMatrixEntry& operator=(CooccurrenceMatrixEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CooccurrenceMatrixEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CooccurrenceMatrixEntry* internal_default_instance() {
    return reinterpret_cast<const CooccurrenceMatrixEntry*>(
               &_CooccurrenceMatrixEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CooccurrenceMatrixEntry& a, CooccurrenceMatrixEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CooccurrenceMatrixEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CooccurrenceMatrixEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CooccurrenceMatrixEntry* New() const final {
    return CreateMaybeMessage<CooccurrenceMatrixEntry>(nullptr);
  }

  CooccurrenceMatrixEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CooccurrenceMatrixEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CooccurrenceMatrixEntry& from);
  void MergeFrom(const CooccurrenceMatrixEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CooccurrenceMatrixEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.CooccurrenceMatrixEntry";
  }
  protected:
  explicit CooccurrenceMatrixEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // string row = 1;
  void clear_row();
  const std::string& row() const;
  void set_row(const std::string& value);
  void set_row(std::string&& value);
  void set_row(const char* value);
  void set_row(const char* value, size_t size);
  std::string* mutable_row();
  std::string* release_row();
  void set_allocated_row(std::string* row);
  private:
  const std::string& _internal_row() const;
  void _internal_set_row(const std::string& value);
  std::string* _internal_mutable_row();
  public:

  // string col = 2;
  void clear_col();
  const std::string& col() const;
  void set_col(const std::string& value);
  void set_col(std::string&& value);
  void set_col(const char* value);
  void set_col(const char* value, size_t size);
  std::string* mutable_col();
  std::string* release_col();
  void set_allocated_col(std::string* col);
  private:
  const std::string& _internal_col() const;
  void _internal_set_col(const std::string& value);
  std::string* _internal_mutable_col();
  public:

  // uint32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.CooccurrenceMatrixEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr col_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class CooccurrenceMatrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.CooccurrenceMatrix) */ {
 public:
  inline CooccurrenceMatrix() : CooccurrenceMatrix(nullptr) {}
  virtual ~CooccurrenceMatrix();

  CooccurrenceMatrix(const CooccurrenceMatrix& from);
  CooccurrenceMatrix(CooccurrenceMatrix&& from) noexcept
    : CooccurrenceMatrix() {
    *this = ::std::move(from);
  }

  inline CooccurrenceMatrix& operator=(const CooccurrenceMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline CooccurrenceMatrix& operator=(CooccurrenceMatrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CooccurrenceMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CooccurrenceMatrix* internal_default_instance() {
    return reinterpret_cast<const CooccurrenceMatrix*>(
               &_CooccurrenceMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CooccurrenceMatrix& a, CooccurrenceMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(CooccurrenceMatrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CooccurrenceMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CooccurrenceMatrix* New() const final {
    return CreateMaybeMessage<CooccurrenceMatrix>(nullptr);
  }

  CooccurrenceMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CooccurrenceMatrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CooccurrenceMatrix& from);
  void MergeFrom(const CooccurrenceMatrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CooccurrenceMatrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.CooccurrenceMatrix";
  }
  protected:
  explicit CooccurrenceMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatrixFieldNumber = 1,
    kConceptIdsFieldNumber = 2,
  };
  // repeated .clarifai.api.CooccurrenceMatrixEntry matrix = 1;
  int matrix_size() const;
  private:
  int _internal_matrix_size() const;
  public:
  void clear_matrix();
  ::clarifai::api::CooccurrenceMatrixEntry* mutable_matrix(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CooccurrenceMatrixEntry >*
      mutable_matrix();
  private:
  const ::clarifai::api::CooccurrenceMatrixEntry& _internal_matrix(int index) const;
  ::clarifai::api::CooccurrenceMatrixEntry* _internal_add_matrix();
  public:
  const ::clarifai::api::CooccurrenceMatrixEntry& matrix(int index) const;
  ::clarifai::api::CooccurrenceMatrixEntry* add_matrix();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CooccurrenceMatrixEntry >&
      matrix() const;

  // repeated string concept_ids = 2;
  int concept_ids_size() const;
  private:
  int _internal_concept_ids_size() const;
  public:
  void clear_concept_ids();
  const std::string& concept_ids(int index) const;
  std::string* mutable_concept_ids(int index);
  void set_concept_ids(int index, const std::string& value);
  void set_concept_ids(int index, std::string&& value);
  void set_concept_ids(int index, const char* value);
  void set_concept_ids(int index, const char* value, size_t size);
  std::string* add_concept_ids();
  void add_concept_ids(const std::string& value);
  void add_concept_ids(std::string&& value);
  void add_concept_ids(const char* value);
  void add_concept_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& concept_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_concept_ids();
  private:
  const std::string& _internal_concept_ids(int index) const;
  std::string* _internal_add_concept_ids();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.CooccurrenceMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CooccurrenceMatrixEntry > matrix_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> concept_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConfusionMatrixEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConfusionMatrixEntry) */ {
 public:
  inline ConfusionMatrixEntry() : ConfusionMatrixEntry(nullptr) {}
  virtual ~ConfusionMatrixEntry();

  ConfusionMatrixEntry(const ConfusionMatrixEntry& from);
  ConfusionMatrixEntry(ConfusionMatrixEntry&& from) noexcept
    : ConfusionMatrixEntry() {
    *this = ::std::move(from);
  }

  inline ConfusionMatrixEntry& operator=(const ConfusionMatrixEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfusionMatrixEntry& operator=(ConfusionMatrixEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfusionMatrixEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfusionMatrixEntry* internal_default_instance() {
    return reinterpret_cast<const ConfusionMatrixEntry*>(
               &_ConfusionMatrixEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(ConfusionMatrixEntry& a, ConfusionMatrixEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfusionMatrixEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfusionMatrixEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfusionMatrixEntry* New() const final {
    return CreateMaybeMessage<ConfusionMatrixEntry>(nullptr);
  }

  ConfusionMatrixEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfusionMatrixEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfusionMatrixEntry& from);
  void MergeFrom(const ConfusionMatrixEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfusionMatrixEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConfusionMatrixEntry";
  }
  protected:
  explicit ConfusionMatrixEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictedFieldNumber = 1,
    kActualFieldNumber = 2,
    kValueFieldNumber = 4,
  };
  // string predicted = 1;
  void clear_predicted();
  const std::string& predicted() const;
  void set_predicted(const std::string& value);
  void set_predicted(std::string&& value);
  void set_predicted(const char* value);
  void set_predicted(const char* value, size_t size);
  std::string* mutable_predicted();
  std::string* release_predicted();
  void set_allocated_predicted(std::string* predicted);
  private:
  const std::string& _internal_predicted() const;
  void _internal_set_predicted(const std::string& value);
  std::string* _internal_mutable_predicted();
  public:

  // string actual = 2;
  void clear_actual();
  const std::string& actual() const;
  void set_actual(const std::string& value);
  void set_actual(std::string&& value);
  void set_actual(const char* value);
  void set_actual(const char* value, size_t size);
  std::string* mutable_actual();
  std::string* release_actual();
  void set_allocated_actual(std::string* actual);
  private:
  const std::string& _internal_actual() const;
  void _internal_set_actual(const std::string& value);
  std::string* _internal_mutable_actual();
  public:

  // float value = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConfusionMatrixEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predicted_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actual_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConfusionMatrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConfusionMatrix) */ {
 public:
  inline ConfusionMatrix() : ConfusionMatrix(nullptr) {}
  virtual ~ConfusionMatrix();

  ConfusionMatrix(const ConfusionMatrix& from);
  ConfusionMatrix(ConfusionMatrix&& from) noexcept
    : ConfusionMatrix() {
    *this = ::std::move(from);
  }

  inline ConfusionMatrix& operator=(const ConfusionMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfusionMatrix& operator=(ConfusionMatrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfusionMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfusionMatrix* internal_default_instance() {
    return reinterpret_cast<const ConfusionMatrix*>(
               &_ConfusionMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ConfusionMatrix& a, ConfusionMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfusionMatrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfusionMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfusionMatrix* New() const final {
    return CreateMaybeMessage<ConfusionMatrix>(nullptr);
  }

  ConfusionMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfusionMatrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfusionMatrix& from);
  void MergeFrom(const ConfusionMatrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfusionMatrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConfusionMatrix";
  }
  protected:
  explicit ConfusionMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatrixFieldNumber = 1,
    kConceptIdsFieldNumber = 2,
  };
  // repeated .clarifai.api.ConfusionMatrixEntry matrix = 1;
  int matrix_size() const;
  private:
  int _internal_matrix_size() const;
  public:
  void clear_matrix();
  ::clarifai::api::ConfusionMatrixEntry* mutable_matrix(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConfusionMatrixEntry >*
      mutable_matrix();
  private:
  const ::clarifai::api::ConfusionMatrixEntry& _internal_matrix(int index) const;
  ::clarifai::api::ConfusionMatrixEntry* _internal_add_matrix();
  public:
  const ::clarifai::api::ConfusionMatrixEntry& matrix(int index) const;
  ::clarifai::api::ConfusionMatrixEntry* add_matrix();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConfusionMatrixEntry >&
      matrix() const;

  // repeated string concept_ids = 2;
  int concept_ids_size() const;
  private:
  int _internal_concept_ids_size() const;
  public:
  void clear_concept_ids();
  const std::string& concept_ids(int index) const;
  std::string* mutable_concept_ids(int index);
  void set_concept_ids(int index, const std::string& value);
  void set_concept_ids(int index, std::string&& value);
  void set_concept_ids(int index, const char* value);
  void set_concept_ids(int index, const char* value, size_t size);
  std::string* add_concept_ids();
  void add_concept_ids(const std::string& value);
  void add_concept_ids(std::string&& value);
  void add_concept_ids(const char* value);
  void add_concept_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& concept_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_concept_ids();
  private:
  const std::string& _internal_concept_ids(int index) const;
  std::string* _internal_add_concept_ids();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConfusionMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConfusionMatrixEntry > matrix_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> concept_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ROC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ROC) */ {
 public:
  inline ROC() : ROC(nullptr) {}
  virtual ~ROC();

  ROC(const ROC& from);
  ROC(ROC&& from) noexcept
    : ROC() {
    *this = ::std::move(from);
  }

  inline ROC& operator=(const ROC& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROC& operator=(ROC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROC* internal_default_instance() {
    return reinterpret_cast<const ROC*>(
               &_ROC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ROC& a, ROC& b) {
    a.Swap(&b);
  }
  inline void Swap(ROC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROC* New() const final {
    return CreateMaybeMessage<ROC>(nullptr);
  }

  ROC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROC& from);
  void MergeFrom(const ROC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ROC";
  }
  protected:
  explicit ROC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFprFieldNumber = 1,
    kTprFieldNumber = 2,
    kThresholdsFieldNumber = 3,
    kFprPerImageFieldNumber = 4,
    kFprPerObjectFieldNumber = 5,
  };
  // repeated float fpr = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int fpr_size() const;
  private:
  int _internal_fpr_size() const;
  public:
  void clear_fpr();
  private:
  float _internal_fpr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fpr() const;
  void _internal_add_fpr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fpr();
  public:
  float fpr(int index) const;
  void set_fpr(int index, float value);
  void add_fpr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fpr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fpr();

  // repeated float tpr = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int tpr_size() const;
  private:
  int _internal_tpr_size() const;
  public:
  void clear_tpr();
  private:
  float _internal_tpr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_tpr() const;
  void _internal_add_tpr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_tpr();
  public:
  float tpr(int index) const;
  void set_tpr(int index, float value);
  void add_tpr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpr();

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int thresholds_size() const;
  private:
  int _internal_thresholds_size() const;
  public:
  void clear_thresholds();
  private:
  float _internal_thresholds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_thresholds() const;
  void _internal_add_thresholds(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_thresholds();
  public:
  float thresholds(int index) const;
  void set_thresholds(int index, float value);
  void add_thresholds(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      thresholds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_thresholds();

  // repeated float fpr_per_image = 4;
  int fpr_per_image_size() const;
  private:
  int _internal_fpr_per_image_size() const;
  public:
  void clear_fpr_per_image();
  private:
  float _internal_fpr_per_image(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fpr_per_image() const;
  void _internal_add_fpr_per_image(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fpr_per_image();
  public:
  float fpr_per_image(int index) const;
  void set_fpr_per_image(int index, float value);
  void add_fpr_per_image(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fpr_per_image() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fpr_per_image();

  // repeated float fpr_per_object = 5;
  int fpr_per_object_size() const;
  private:
  int _internal_fpr_per_object_size() const;
  public:
  void clear_fpr_per_object();
  private:
  float _internal_fpr_per_object(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fpr_per_object() const;
  void _internal_add_fpr_per_object(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fpr_per_object();
  public:
  float fpr_per_object(int index) const;
  void set_fpr_per_object(int index, float value);
  void add_fpr_per_object(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fpr_per_object() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fpr_per_object();

  // @@protoc_insertion_point(class_scope:clarifai.api.ROC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fpr_;
  mutable std::atomic<int> _fpr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpr_;
  mutable std::atomic<int> _tpr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > thresholds_;
  mutable std::atomic<int> _thresholds_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fpr_per_image_;
  mutable std::atomic<int> _fpr_per_image_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fpr_per_object_;
  mutable std::atomic<int> _fpr_per_object_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class PrecisionRecallCurve PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PrecisionRecallCurve) */ {
 public:
  inline PrecisionRecallCurve() : PrecisionRecallCurve(nullptr) {}
  virtual ~PrecisionRecallCurve();

  PrecisionRecallCurve(const PrecisionRecallCurve& from);
  PrecisionRecallCurve(PrecisionRecallCurve&& from) noexcept
    : PrecisionRecallCurve() {
    *this = ::std::move(from);
  }

  inline PrecisionRecallCurve& operator=(const PrecisionRecallCurve& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrecisionRecallCurve& operator=(PrecisionRecallCurve&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrecisionRecallCurve& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrecisionRecallCurve* internal_default_instance() {
    return reinterpret_cast<const PrecisionRecallCurve*>(
               &_PrecisionRecallCurve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(PrecisionRecallCurve& a, PrecisionRecallCurve& b) {
    a.Swap(&b);
  }
  inline void Swap(PrecisionRecallCurve* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrecisionRecallCurve* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrecisionRecallCurve* New() const final {
    return CreateMaybeMessage<PrecisionRecallCurve>(nullptr);
  }

  PrecisionRecallCurve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrecisionRecallCurve>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrecisionRecallCurve& from);
  void MergeFrom(const PrecisionRecallCurve& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrecisionRecallCurve* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PrecisionRecallCurve";
  }
  protected:
  explicit PrecisionRecallCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecallFieldNumber = 1,
    kPrecisionFieldNumber = 2,
    kThresholdsFieldNumber = 3,
  };
  // repeated float recall = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int recall_size() const;
  private:
  int _internal_recall_size() const;
  public:
  void clear_recall();
  private:
  float _internal_recall(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_recall() const;
  void _internal_add_recall(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_recall();
  public:
  float recall(int index) const;
  void set_recall(int index, float value);
  void add_recall(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      recall() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_recall();

  // repeated float precision = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int precision_size() const;
  private:
  int _internal_precision_size() const;
  public:
  void clear_precision();
  private:
  float _internal_precision(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_precision() const;
  void _internal_add_precision(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_precision();
  public:
  float precision(int index) const;
  void set_precision(int index, float value);
  void add_precision(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      precision() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_precision();

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int thresholds_size() const;
  private:
  int _internal_thresholds_size() const;
  public:
  void clear_thresholds();
  private:
  float _internal_thresholds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_thresholds() const;
  void _internal_add_thresholds(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_thresholds();
  public:
  float thresholds(int index) const;
  void set_thresholds(int index, float value);
  void add_thresholds(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      thresholds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_thresholds();

  // @@protoc_insertion_point(class_scope:clarifai.api.PrecisionRecallCurve)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > recall_;
  mutable std::atomic<int> _recall_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > precision_;
  mutable std::atomic<int> _precision_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > thresholds_;
  mutable std::atomic<int> _thresholds_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class BinaryMetrics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.BinaryMetrics) */ {
 public:
  inline BinaryMetrics() : BinaryMetrics(nullptr) {}
  virtual ~BinaryMetrics();

  BinaryMetrics(const BinaryMetrics& from);
  BinaryMetrics(BinaryMetrics&& from) noexcept
    : BinaryMetrics() {
    *this = ::std::move(from);
  }

  inline BinaryMetrics& operator=(const BinaryMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryMetrics& operator=(BinaryMetrics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BinaryMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinaryMetrics* internal_default_instance() {
    return reinterpret_cast<const BinaryMetrics*>(
               &_BinaryMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(BinaryMetrics& a, BinaryMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryMetrics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinaryMetrics* New() const final {
    return CreateMaybeMessage<BinaryMetrics>(nullptr);
  }

  BinaryMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinaryMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BinaryMetrics& from);
  void MergeFrom(const BinaryMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.BinaryMetrics";
  }
  protected:
  explicit BinaryMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAreaNameFieldNumber = 10,
    kConceptFieldNumber = 6,
    kRocCurveFieldNumber = 7,
    kPrecisionRecallCurveFieldNumber = 8,
    kNumPosFieldNumber = 1,
    kNumNegFieldNumber = 2,
    kNumTotFieldNumber = 3,
    kRocAucFieldNumber = 4,
    kF1FieldNumber = 5,
    kAvgPrecisionFieldNumber = 9,
    kAreaMinFieldNumber = 11,
    kAreaMaxFieldNumber = 12,
    kIouFieldNumber = 13,
  };
  // string area_name = 10;
  void clear_area_name();
  const std::string& area_name() const;
  void set_area_name(const std::string& value);
  void set_area_name(std::string&& value);
  void set_area_name(const char* value);
  void set_area_name(const char* value, size_t size);
  std::string* mutable_area_name();
  std::string* release_area_name();
  void set_allocated_area_name(std::string* area_name);
  private:
  const std::string& _internal_area_name() const;
  void _internal_set_area_name(const std::string& value);
  std::string* _internal_mutable_area_name();
  public:

  // .clarifai.api.Concept concept = 6;
  bool has_concept() const;
  private:
  bool _internal_has_concept() const;
  public:
  void clear_concept();
  const ::clarifai::api::Concept& concept() const;
  ::clarifai::api::Concept* release_concept();
  ::clarifai::api::Concept* mutable_concept();
  void set_allocated_concept(::clarifai::api::Concept* concept);
  private:
  const ::clarifai::api::Concept& _internal_concept() const;
  ::clarifai::api::Concept* _internal_mutable_concept();
  public:
  void unsafe_arena_set_allocated_concept(
      ::clarifai::api::Concept* concept);
  ::clarifai::api::Concept* unsafe_arena_release_concept();

  // .clarifai.api.ROC roc_curve = 7;
  bool has_roc_curve() const;
  private:
  bool _internal_has_roc_curve() const;
  public:
  void clear_roc_curve();
  const ::clarifai::api::ROC& roc_curve() const;
  ::clarifai::api::ROC* release_roc_curve();
  ::clarifai::api::ROC* mutable_roc_curve();
  void set_allocated_roc_curve(::clarifai::api::ROC* roc_curve);
  private:
  const ::clarifai::api::ROC& _internal_roc_curve() const;
  ::clarifai::api::ROC* _internal_mutable_roc_curve();
  public:
  void unsafe_arena_set_allocated_roc_curve(
      ::clarifai::api::ROC* roc_curve);
  ::clarifai::api::ROC* unsafe_arena_release_roc_curve();

  // .clarifai.api.PrecisionRecallCurve precision_recall_curve = 8;
  bool has_precision_recall_curve() const;
  private:
  bool _internal_has_precision_recall_curve() const;
  public:
  void clear_precision_recall_curve();
  const ::clarifai::api::PrecisionRecallCurve& precision_recall_curve() const;
  ::clarifai::api::PrecisionRecallCurve* release_precision_recall_curve();
  ::clarifai::api::PrecisionRecallCurve* mutable_precision_recall_curve();
  void set_allocated_precision_recall_curve(::clarifai::api::PrecisionRecallCurve* precision_recall_curve);
  private:
  const ::clarifai::api::PrecisionRecallCurve& _internal_precision_recall_curve() const;
  ::clarifai::api::PrecisionRecallCurve* _internal_mutable_precision_recall_curve();
  public:
  void unsafe_arena_set_allocated_precision_recall_curve(
      ::clarifai::api::PrecisionRecallCurve* precision_recall_curve);
  ::clarifai::api::PrecisionRecallCurve* unsafe_arena_release_precision_recall_curve();

  // uint32 num_pos = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_num_pos();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_pos() const;
  void set_num_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_pos() const;
  void _internal_set_num_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_neg = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_num_neg();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_neg() const;
  void set_num_neg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_neg() const;
  void _internal_set_num_neg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_tot = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_num_tot();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_tot() const;
  void set_num_tot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_tot() const;
  void _internal_set_num_tot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_roc_auc();
  float roc_auc() const;
  void set_roc_auc(float value);
  private:
  float _internal_roc_auc() const;
  void _internal_set_roc_auc(float value);
  public:

  // float f1 = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_f1();
  float f1() const;
  void set_f1(float value);
  private:
  float _internal_f1() const;
  void _internal_set_f1(float value);
  public:

  // float avg_precision = 9;
  void clear_avg_precision();
  float avg_precision() const;
  void set_avg_precision(float value);
  private:
  float _internal_avg_precision() const;
  void _internal_set_avg_precision(float value);
  public:

  // double area_min = 11;
  void clear_area_min();
  double area_min() const;
  void set_area_min(double value);
  private:
  double _internal_area_min() const;
  void _internal_set_area_min(double value);
  public:

  // double area_max = 12;
  void clear_area_max();
  double area_max() const;
  void set_area_max(double value);
  private:
  double _internal_area_max() const;
  void _internal_set_area_max(double value);
  public:

  // float iou = 13;
  void clear_iou();
  float iou() const;
  void set_iou(float value);
  private:
  float _internal_iou() const;
  void _internal_set_iou(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.BinaryMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_name_;
  ::clarifai::api::Concept* concept_;
  ::clarifai::api::ROC* roc_curve_;
  ::clarifai::api::PrecisionRecallCurve* precision_recall_curve_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_neg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_tot_;
  float roc_auc_;
  float f1_;
  float avg_precision_;
  double area_min_;
  double area_max_;
  float iou_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class EvalTestSetEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.EvalTestSetEntry) */ {
 public:
  inline EvalTestSetEntry() : EvalTestSetEntry(nullptr) {}
  virtual ~EvalTestSetEntry();

  EvalTestSetEntry(const EvalTestSetEntry& from);
  EvalTestSetEntry(EvalTestSetEntry&& from) noexcept
    : EvalTestSetEntry() {
    *this = ::std::move(from);
  }

  inline EvalTestSetEntry& operator=(const EvalTestSetEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvalTestSetEntry& operator=(EvalTestSetEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EvalTestSetEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EvalTestSetEntry* internal_default_instance() {
    return reinterpret_cast<const EvalTestSetEntry*>(
               &_EvalTestSetEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(EvalTestSetEntry& a, EvalTestSetEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(EvalTestSetEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvalTestSetEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvalTestSetEntry* New() const final {
    return CreateMaybeMessage<EvalTestSetEntry>(nullptr);
  }

  EvalTestSetEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvalTestSetEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EvalTestSetEntry& from);
  void MergeFrom(const EvalTestSetEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvalTestSetEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.EvalTestSetEntry";
  }
  protected:
  explicit EvalTestSetEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictedConceptsFieldNumber = 3,
    kGroundTruthConceptsFieldNumber = 4,
    kIdFieldNumber = 1,
    kUrlFieldNumber = 2,
    kAnnotationFieldNumber = 5,
  };
  // repeated .clarifai.api.Concept predicted_concepts = 3;
  int predicted_concepts_size() const;
  private:
  int _internal_predicted_concepts_size() const;
  public:
  void clear_predicted_concepts();
  ::clarifai::api::Concept* mutable_predicted_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_predicted_concepts();
  private:
  const ::clarifai::api::Concept& _internal_predicted_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_predicted_concepts();
  public:
  const ::clarifai::api::Concept& predicted_concepts(int index) const;
  ::clarifai::api::Concept* add_predicted_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      predicted_concepts() const;

  // repeated .clarifai.api.Concept ground_truth_concepts = 4;
  int ground_truth_concepts_size() const;
  private:
  int _internal_ground_truth_concepts_size() const;
  public:
  void clear_ground_truth_concepts();
  ::clarifai::api::Concept* mutable_ground_truth_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_ground_truth_concepts();
  private:
  const ::clarifai::api::Concept& _internal_ground_truth_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_ground_truth_concepts();
  public:
  const ::clarifai::api::Concept& ground_truth_concepts(int index) const;
  ::clarifai::api::Concept* add_ground_truth_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      ground_truth_concepts() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // .clarifai.api.Annotation annotation = 5;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::clarifai::api::Annotation& annotation() const;
  ::clarifai::api::Annotation* release_annotation();
  ::clarifai::api::Annotation* mutable_annotation();
  void set_allocated_annotation(::clarifai::api::Annotation* annotation);
  private:
  const ::clarifai::api::Annotation& _internal_annotation() const;
  ::clarifai::api::Annotation* _internal_mutable_annotation();
  public:
  void unsafe_arena_set_allocated_annotation(
      ::clarifai::api::Annotation* annotation);
  ::clarifai::api::Annotation* unsafe_arena_release_annotation();

  // @@protoc_insertion_point(class_scope:clarifai.api.EvalTestSetEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > predicted_concepts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > ground_truth_concepts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::clarifai::api::Annotation* annotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class LOPQEvalResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.LOPQEvalResult) */ {
 public:
  inline LOPQEvalResult() : LOPQEvalResult(nullptr) {}
  virtual ~LOPQEvalResult();

  LOPQEvalResult(const LOPQEvalResult& from);
  LOPQEvalResult(LOPQEvalResult&& from) noexcept
    : LOPQEvalResult() {
    *this = ::std::move(from);
  }

  inline LOPQEvalResult& operator=(const LOPQEvalResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQEvalResult& operator=(LOPQEvalResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQEvalResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQEvalResult* internal_default_instance() {
    return reinterpret_cast<const LOPQEvalResult*>(
               &_LOPQEvalResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(LOPQEvalResult& a, LOPQEvalResult& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQEvalResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQEvalResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQEvalResult* New() const final {
    return CreateMaybeMessage<LOPQEvalResult>(nullptr);
  }

  LOPQEvalResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQEvalResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQEvalResult& from);
  void MergeFrom(const LOPQEvalResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQEvalResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.LOPQEvalResult";
  }
  protected:
  explicit LOPQEvalResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKFieldNumber = 1,
    kRecallVsBruteForceFieldNumber = 2,
    kKendallTauVsBruteForceFieldNumber = 3,
    kMostFrequentCodePercentFieldNumber = 4,
    kLopqNdcgFieldNumber = 5,
    kBruteForceNdcgFieldNumber = 6,
  };
  // int32 k = 1;
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::int32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_k() const;
  void _internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_recall_vs_brute_force();
  float recall_vs_brute_force() const;
  void set_recall_vs_brute_force(float value);
  private:
  float _internal_recall_vs_brute_force() const;
  void _internal_set_recall_vs_brute_force(float value);
  public:

  // float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_kendall_tau_vs_brute_force();
  float kendall_tau_vs_brute_force() const;
  void set_kendall_tau_vs_brute_force(float value);
  private:
  float _internal_kendall_tau_vs_brute_force() const;
  void _internal_set_kendall_tau_vs_brute_force(float value);
  public:

  // float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_most_frequent_code_percent();
  float most_frequent_code_percent() const;
  void set_most_frequent_code_percent(float value);
  private:
  float _internal_most_frequent_code_percent() const;
  void _internal_set_most_frequent_code_percent(float value);
  public:

  // float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_lopq_ndcg();
  float lopq_ndcg() const;
  void set_lopq_ndcg(float value);
  private:
  float _internal_lopq_ndcg() const;
  void _internal_set_lopq_ndcg(float value);
  public:

  // float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_brute_force_ndcg();
  float brute_force_ndcg() const;
  void set_brute_force_ndcg(float value);
  private:
  float _internal_brute_force_ndcg() const;
  void _internal_set_brute_force_ndcg(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.LOPQEvalResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 k_;
  float recall_vs_brute_force_;
  float kendall_tau_vs_brute_force_;
  float most_frequent_code_percent_;
  float lopq_ndcg_;
  float brute_force_ndcg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class MetricsSummary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MetricsSummary) */ {
 public:
  inline MetricsSummary() : MetricsSummary(nullptr) {}
  virtual ~MetricsSummary();

  MetricsSummary(const MetricsSummary& from);
  MetricsSummary(MetricsSummary&& from) noexcept
    : MetricsSummary() {
    *this = ::std::move(from);
  }

  inline MetricsSummary& operator=(const MetricsSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsSummary& operator=(MetricsSummary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricsSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricsSummary* internal_default_instance() {
    return reinterpret_cast<const MetricsSummary*>(
               &_MetricsSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(MetricsSummary& a, MetricsSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricsSummary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricsSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricsSummary* New() const final {
    return CreateMaybeMessage<MetricsSummary>(nullptr);
  }

  MetricsSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricsSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricsSummary& from);
  void MergeFrom(const MetricsSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricsSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MetricsSummary";
  }
  protected:
  explicit MetricsSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLopqMetricsFieldNumber = 9,
    kTop1AccuracyFieldNumber = 1,
    kTop5AccuracyFieldNumber = 2,
    kMacroAvgRocAucFieldNumber = 3,
    kMacroStdRocAucFieldNumber = 4,
    kMacroAvgF1ScoreFieldNumber = 5,
    kMacroStdF1ScoreFieldNumber = 6,
    kMacroAvgPrecisionFieldNumber = 7,
    kMacroAvgRecallFieldNumber = 8,
    kMeanAvgPrecisionIou50FieldNumber = 10,
    kMeanAvgPrecisionIouRangeFieldNumber = 11,
  };
  // repeated .clarifai.api.LOPQEvalResult lopq_metrics = 9;
  int lopq_metrics_size() const;
  private:
  int _internal_lopq_metrics_size() const;
  public:
  void clear_lopq_metrics();
  ::clarifai::api::LOPQEvalResult* mutable_lopq_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LOPQEvalResult >*
      mutable_lopq_metrics();
  private:
  const ::clarifai::api::LOPQEvalResult& _internal_lopq_metrics(int index) const;
  ::clarifai::api::LOPQEvalResult* _internal_add_lopq_metrics();
  public:
  const ::clarifai::api::LOPQEvalResult& lopq_metrics(int index) const;
  ::clarifai::api::LOPQEvalResult* add_lopq_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LOPQEvalResult >&
      lopq_metrics() const;

  // float top1_accuracy = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_top1_accuracy();
  PROTOBUF_DEPRECATED float top1_accuracy() const;
  PROTOBUF_DEPRECATED void set_top1_accuracy(float value);
  private:
  float _internal_top1_accuracy() const;
  void _internal_set_top1_accuracy(float value);
  public:

  // float top5_accuracy = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_top5_accuracy();
  PROTOBUF_DEPRECATED float top5_accuracy() const;
  PROTOBUF_DEPRECATED void set_top5_accuracy(float value);
  private:
  float _internal_top5_accuracy() const;
  void _internal_set_top5_accuracy(float value);
  public:

  // float macro_avg_roc_auc = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_macro_avg_roc_auc();
  float macro_avg_roc_auc() const;
  void set_macro_avg_roc_auc(float value);
  private:
  float _internal_macro_avg_roc_auc() const;
  void _internal_set_macro_avg_roc_auc(float value);
  public:

  // float macro_std_roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_macro_std_roc_auc();
  float macro_std_roc_auc() const;
  void set_macro_std_roc_auc(float value);
  private:
  float _internal_macro_std_roc_auc() const;
  void _internal_set_macro_std_roc_auc(float value);
  public:

  // float macro_avg_f1_score = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_macro_avg_f1_score();
  float macro_avg_f1_score() const;
  void set_macro_avg_f1_score(float value);
  private:
  float _internal_macro_avg_f1_score() const;
  void _internal_set_macro_avg_f1_score(float value);
  public:

  // float macro_std_f1_score = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_macro_std_f1_score();
  float macro_std_f1_score() const;
  void set_macro_std_f1_score(float value);
  private:
  float _internal_macro_std_f1_score() const;
  void _internal_set_macro_std_f1_score(float value);
  public:

  // float macro_avg_precision = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_macro_avg_precision();
  float macro_avg_precision() const;
  void set_macro_avg_precision(float value);
  private:
  float _internal_macro_avg_precision() const;
  void _internal_set_macro_avg_precision(float value);
  public:

  // float macro_avg_recall = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_macro_avg_recall();
  float macro_avg_recall() const;
  void set_macro_avg_recall(float value);
  private:
  float _internal_macro_avg_recall() const;
  void _internal_set_macro_avg_recall(float value);
  public:

  // float mean_avg_precision_iou_50 = 10;
  void clear_mean_avg_precision_iou_50();
  float mean_avg_precision_iou_50() const;
  void set_mean_avg_precision_iou_50(float value);
  private:
  float _internal_mean_avg_precision_iou_50() const;
  void _internal_set_mean_avg_precision_iou_50(float value);
  public:

  // float mean_avg_precision_iou_range = 11;
  void clear_mean_avg_precision_iou_range();
  float mean_avg_precision_iou_range() const;
  void set_mean_avg_precision_iou_range(float value);
  private:
  float _internal_mean_avg_precision_iou_range() const;
  void _internal_set_mean_avg_precision_iou_range(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MetricsSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LOPQEvalResult > lopq_metrics_;
  float top1_accuracy_;
  float top5_accuracy_;
  float macro_avg_roc_auc_;
  float macro_std_roc_auc_;
  float macro_avg_f1_score_;
  float macro_std_f1_score_;
  float macro_avg_precision_;
  float macro_avg_recall_;
  float mean_avg_precision_iou_50_;
  float mean_avg_precision_iou_range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class EvalMetrics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.EvalMetrics) */ {
 public:
  inline EvalMetrics() : EvalMetrics(nullptr) {}
  virtual ~EvalMetrics();

  EvalMetrics(const EvalMetrics& from);
  EvalMetrics(EvalMetrics&& from) noexcept
    : EvalMetrics() {
    *this = ::std::move(from);
  }

  inline EvalMetrics& operator=(const EvalMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvalMetrics& operator=(EvalMetrics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EvalMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EvalMetrics* internal_default_instance() {
    return reinterpret_cast<const EvalMetrics*>(
               &_EvalMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(EvalMetrics& a, EvalMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(EvalMetrics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvalMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvalMetrics* New() const final {
    return CreateMaybeMessage<EvalMetrics>(nullptr);
  }

  EvalMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvalMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EvalMetrics& from);
  void MergeFrom(const EvalMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvalMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.EvalMetrics";
  }
  protected:
  explicit EvalMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinaryMetricsFieldNumber = 6,
    kTestSetFieldNumber = 7,
    kMetricsByAreaFieldNumber = 8,
    kMetricsByClassFieldNumber = 9,
    kStatusFieldNumber = 1,
    kSummaryFieldNumber = 2,
    kConfusionMatrixFieldNumber = 3,
    kCooccurrenceMatrixFieldNumber = 4,
    kLabelCountsFieldNumber = 5,
  };
  // repeated .clarifai.api.BinaryMetrics binary_metrics = 6;
  int binary_metrics_size() const;
  private:
  int _internal_binary_metrics_size() const;
  public:
  void clear_binary_metrics();
  ::clarifai::api::BinaryMetrics* mutable_binary_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >*
      mutable_binary_metrics();
  private:
  const ::clarifai::api::BinaryMetrics& _internal_binary_metrics(int index) const;
  ::clarifai::api::BinaryMetrics* _internal_add_binary_metrics();
  public:
  const ::clarifai::api::BinaryMetrics& binary_metrics(int index) const;
  ::clarifai::api::BinaryMetrics* add_binary_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >&
      binary_metrics() const;

  // repeated .clarifai.api.EvalTestSetEntry test_set = 7;
  int test_set_size() const;
  private:
  int _internal_test_set_size() const;
  public:
  void clear_test_set();
  ::clarifai::api::EvalTestSetEntry* mutable_test_set(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EvalTestSetEntry >*
      mutable_test_set();
  private:
  const ::clarifai::api::EvalTestSetEntry& _internal_test_set(int index) const;
  ::clarifai::api::EvalTestSetEntry* _internal_add_test_set();
  public:
  const ::clarifai::api::EvalTestSetEntry& test_set(int index) const;
  ::clarifai::api::EvalTestSetEntry* add_test_set();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EvalTestSetEntry >&
      test_set() const;

  // repeated .clarifai.api.BinaryMetrics metrics_by_area = 8;
  int metrics_by_area_size() const;
  private:
  int _internal_metrics_by_area_size() const;
  public:
  void clear_metrics_by_area();
  ::clarifai::api::BinaryMetrics* mutable_metrics_by_area(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >*
      mutable_metrics_by_area();
  private:
  const ::clarifai::api::BinaryMetrics& _internal_metrics_by_area(int index) const;
  ::clarifai::api::BinaryMetrics* _internal_add_metrics_by_area();
  public:
  const ::clarifai::api::BinaryMetrics& metrics_by_area(int index) const;
  ::clarifai::api::BinaryMetrics* add_metrics_by_area();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >&
      metrics_by_area() const;

  // repeated .clarifai.api.BinaryMetrics metrics_by_class = 9;
  int metrics_by_class_size() const;
  private:
  int _internal_metrics_by_class_size() const;
  public:
  void clear_metrics_by_class();
  ::clarifai::api::BinaryMetrics* mutable_metrics_by_class(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >*
      mutable_metrics_by_class();
  private:
  const ::clarifai::api::BinaryMetrics& _internal_metrics_by_class(int index) const;
  ::clarifai::api::BinaryMetrics* _internal_add_metrics_by_class();
  public:
  const ::clarifai::api::BinaryMetrics& metrics_by_class(int index) const;
  ::clarifai::api::BinaryMetrics* add_metrics_by_class();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >&
      metrics_by_class() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.MetricsSummary summary = 2;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::clarifai::api::MetricsSummary& summary() const;
  ::clarifai::api::MetricsSummary* release_summary();
  ::clarifai::api::MetricsSummary* mutable_summary();
  void set_allocated_summary(::clarifai::api::MetricsSummary* summary);
  private:
  const ::clarifai::api::MetricsSummary& _internal_summary() const;
  ::clarifai::api::MetricsSummary* _internal_mutable_summary();
  public:
  void unsafe_arena_set_allocated_summary(
      ::clarifai::api::MetricsSummary* summary);
  ::clarifai::api::MetricsSummary* unsafe_arena_release_summary();

  // .clarifai.api.ConfusionMatrix confusion_matrix = 3;
  bool has_confusion_matrix() const;
  private:
  bool _internal_has_confusion_matrix() const;
  public:
  void clear_confusion_matrix();
  const ::clarifai::api::ConfusionMatrix& confusion_matrix() const;
  ::clarifai::api::ConfusionMatrix* release_confusion_matrix();
  ::clarifai::api::ConfusionMatrix* mutable_confusion_matrix();
  void set_allocated_confusion_matrix(::clarifai::api::ConfusionMatrix* confusion_matrix);
  private:
  const ::clarifai::api::ConfusionMatrix& _internal_confusion_matrix() const;
  ::clarifai::api::ConfusionMatrix* _internal_mutable_confusion_matrix();
  public:
  void unsafe_arena_set_allocated_confusion_matrix(
      ::clarifai::api::ConfusionMatrix* confusion_matrix);
  ::clarifai::api::ConfusionMatrix* unsafe_arena_release_confusion_matrix();

  // .clarifai.api.CooccurrenceMatrix cooccurrence_matrix = 4;
  bool has_cooccurrence_matrix() const;
  private:
  bool _internal_has_cooccurrence_matrix() const;
  public:
  void clear_cooccurrence_matrix();
  const ::clarifai::api::CooccurrenceMatrix& cooccurrence_matrix() const;
  ::clarifai::api::CooccurrenceMatrix* release_cooccurrence_matrix();
  ::clarifai::api::CooccurrenceMatrix* mutable_cooccurrence_matrix();
  void set_allocated_cooccurrence_matrix(::clarifai::api::CooccurrenceMatrix* cooccurrence_matrix);
  private:
  const ::clarifai::api::CooccurrenceMatrix& _internal_cooccurrence_matrix() const;
  ::clarifai::api::CooccurrenceMatrix* _internal_mutable_cooccurrence_matrix();
  public:
  void unsafe_arena_set_allocated_cooccurrence_matrix(
      ::clarifai::api::CooccurrenceMatrix* cooccurrence_matrix);
  ::clarifai::api::CooccurrenceMatrix* unsafe_arena_release_cooccurrence_matrix();

  // .clarifai.api.LabelDistribution label_counts = 5;
  bool has_label_counts() const;
  private:
  bool _internal_has_label_counts() const;
  public:
  void clear_label_counts();
  const ::clarifai::api::LabelDistribution& label_counts() const;
  ::clarifai::api::LabelDistribution* release_label_counts();
  ::clarifai::api::LabelDistribution* mutable_label_counts();
  void set_allocated_label_counts(::clarifai::api::LabelDistribution* label_counts);
  private:
  const ::clarifai::api::LabelDistribution& _internal_label_counts() const;
  ::clarifai::api::LabelDistribution* _internal_mutable_label_counts();
  public:
  void unsafe_arena_set_allocated_label_counts(
      ::clarifai::api::LabelDistribution* label_counts);
  ::clarifai::api::LabelDistribution* unsafe_arena_release_label_counts();

  // @@protoc_insertion_point(class_scope:clarifai.api.EvalMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics > binary_metrics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EvalTestSetEntry > test_set_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics > metrics_by_area_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics > metrics_by_class_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::MetricsSummary* summary_;
  ::clarifai::api::ConfusionMatrix* confusion_matrix_;
  ::clarifai::api::CooccurrenceMatrix* cooccurrence_matrix_;
  ::clarifai::api::LabelDistribution* label_counts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class FieldsValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.FieldsValue) */ {
 public:
  inline FieldsValue() : FieldsValue(nullptr) {}
  virtual ~FieldsValue();

  FieldsValue(const FieldsValue& from);
  FieldsValue(FieldsValue&& from) noexcept
    : FieldsValue() {
    *this = ::std::move(from);
  }

  inline FieldsValue& operator=(const FieldsValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldsValue& operator=(FieldsValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldsValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldsValue* internal_default_instance() {
    return reinterpret_cast<const FieldsValue*>(
               &_FieldsValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(FieldsValue& a, FieldsValue& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldsValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldsValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldsValue* New() const final {
    return CreateMaybeMessage<FieldsValue>(nullptr);
  }

  FieldsValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldsValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldsValue& from);
  void MergeFrom(const FieldsValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldsValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.FieldsValue";
  }
  protected:
  explicit FieldsValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfusionMatrixFieldNumber = 1,
    kCooccurrenceMatrixFieldNumber = 2,
    kLabelCountsFieldNumber = 3,
    kBinaryMetricsFieldNumber = 4,
    kTestSetFieldNumber = 5,
    kMetricsByAreaFieldNumber = 6,
    kMetricsByClassFieldNumber = 7,
  };
  // bool confusion_matrix = 1;
  void clear_confusion_matrix();
  bool confusion_matrix() const;
  void set_confusion_matrix(bool value);
  private:
  bool _internal_confusion_matrix() const;
  void _internal_set_confusion_matrix(bool value);
  public:

  // bool cooccurrence_matrix = 2;
  void clear_cooccurrence_matrix();
  bool cooccurrence_matrix() const;
  void set_cooccurrence_matrix(bool value);
  private:
  bool _internal_cooccurrence_matrix() const;
  void _internal_set_cooccurrence_matrix(bool value);
  public:

  // bool label_counts = 3;
  void clear_label_counts();
  bool label_counts() const;
  void set_label_counts(bool value);
  private:
  bool _internal_label_counts() const;
  void _internal_set_label_counts(bool value);
  public:

  // bool binary_metrics = 4;
  void clear_binary_metrics();
  bool binary_metrics() const;
  void set_binary_metrics(bool value);
  private:
  bool _internal_binary_metrics() const;
  void _internal_set_binary_metrics(bool value);
  public:

  // bool test_set = 5;
  void clear_test_set();
  bool test_set() const;
  void set_test_set(bool value);
  private:
  bool _internal_test_set() const;
  void _internal_set_test_set(bool value);
  public:

  // bool metrics_by_area = 6;
  void clear_metrics_by_area();
  bool metrics_by_area() const;
  void set_metrics_by_area(bool value);
  private:
  bool _internal_metrics_by_area() const;
  void _internal_set_metrics_by_area(bool value);
  public:

  // bool metrics_by_class = 7;
  void clear_metrics_by_class();
  bool metrics_by_class() const;
  void set_metrics_by_class(bool value);
  private:
  bool _internal_metrics_by_class() const;
  void _internal_set_metrics_by_class(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.FieldsValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool confusion_matrix_;
  bool cooccurrence_matrix_;
  bool label_counts_;
  bool binary_metrics_;
  bool test_set_;
  bool metrics_by_area_;
  bool metrics_by_class_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Output PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Output) */ {
 public:
  inline Output() : Output(nullptr) {}
  virtual ~Output();

  Output(const Output& from);
  Output(Output&& from) noexcept
    : Output() {
    *this = ::std::move(from);
  }

  inline Output& operator=(const Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline Output& operator=(Output&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Output* internal_default_instance() {
    return reinterpret_cast<const Output*>(
               &_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(Output& a, Output& b) {
    a.Swap(&b);
  }
  inline void Swap(Output* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Output* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Output* New() const final {
    return CreateMaybeMessage<Output>(nullptr);
  }

  Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Output>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Output& from);
  void MergeFrom(const Output& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Output* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Output";
  }
  protected:
  explicit Output(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kCreatedAtFieldNumber = 3,
    kModelFieldNumber = 4,
    kInputFieldNumber = 5,
    kDataFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.status.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .clarifai.api.Model model = 4;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::api::Model& model() const;
  ::clarifai::api::Model* release_model();
  ::clarifai::api::Model* mutable_model();
  void set_allocated_model(::clarifai::api::Model* model);
  private:
  const ::clarifai::api::Model& _internal_model() const;
  ::clarifai::api::Model* _internal_mutable_model();
  public:
  void unsafe_arena_set_allocated_model(
      ::clarifai::api::Model* model);
  ::clarifai::api::Model* unsafe_arena_release_model();

  // .clarifai.api.Input input = 5;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::clarifai::api::Input& input() const;
  ::clarifai::api::Input* release_input();
  ::clarifai::api::Input* mutable_input();
  void set_allocated_input(::clarifai::api::Input* input);
  private:
  const ::clarifai::api::Input& _internal_input() const;
  ::clarifai::api::Input* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::clarifai::api::Input* input);
  ::clarifai::api::Input* unsafe_arena_release_input();

  // .clarifai.api.Data data = 6;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::clarifai::api::Data* data);
  ::clarifai::api::Data* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:clarifai.api.Output)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::status::Status* status_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::clarifai::api::Model* model_;
  ::clarifai::api::Input* input_;
  ::clarifai::api::Data* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ScopeDeps PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ScopeDeps) */ {
 public:
  inline ScopeDeps() : ScopeDeps(nullptr) {}
  virtual ~ScopeDeps();

  ScopeDeps(const ScopeDeps& from);
  ScopeDeps(ScopeDeps&& from) noexcept
    : ScopeDeps() {
    *this = ::std::move(from);
  }

  inline ScopeDeps& operator=(const ScopeDeps& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScopeDeps& operator=(ScopeDeps&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScopeDeps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScopeDeps* internal_default_instance() {
    return reinterpret_cast<const ScopeDeps*>(
               &_ScopeDeps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(ScopeDeps& a, ScopeDeps& b) {
    a.Swap(&b);
  }
  inline void Swap(ScopeDeps* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScopeDeps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScopeDeps* New() const final {
    return CreateMaybeMessage<ScopeDeps>(nullptr);
  }

  ScopeDeps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScopeDeps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScopeDeps& from);
  void MergeFrom(const ScopeDeps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScopeDeps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ScopeDeps";
  }
  protected:
  explicit ScopeDeps(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependingScopesFieldNumber = 2,
    kScopeFieldNumber = 1,
  };
  // repeated string depending_scopes = 2;
  int depending_scopes_size() const;
  private:
  int _internal_depending_scopes_size() const;
  public:
  void clear_depending_scopes();
  const std::string& depending_scopes(int index) const;
  std::string* mutable_depending_scopes(int index);
  void set_depending_scopes(int index, const std::string& value);
  void set_depending_scopes(int index, std::string&& value);
  void set_depending_scopes(int index, const char* value);
  void set_depending_scopes(int index, const char* value, size_t size);
  std::string* add_depending_scopes();
  void add_depending_scopes(const std::string& value);
  void add_depending_scopes(std::string&& value);
  void add_depending_scopes(const char* value);
  void add_depending_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& depending_scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_depending_scopes();
  private:
  const std::string& _internal_depending_scopes(int index) const;
  std::string* _internal_add_depending_scopes();
  public:

  // string scope = 1;
  void clear_scope();
  const std::string& scope() const;
  void set_scope(const std::string& value);
  void set_scope(std::string&& value);
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  std::string* mutable_scope();
  std::string* release_scope();
  void set_allocated_scope(std::string* scope);
  private:
  const std::string& _internal_scope() const;
  void _internal_set_scope(const std::string& value);
  std::string* _internal_mutable_scope();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ScopeDeps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> depending_scopes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class EndpointDeps PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.EndpointDeps) */ {
 public:
  inline EndpointDeps() : EndpointDeps(nullptr) {}
  virtual ~EndpointDeps();

  EndpointDeps(const EndpointDeps& from);
  EndpointDeps(EndpointDeps&& from) noexcept
    : EndpointDeps() {
    *this = ::std::move(from);
  }

  inline EndpointDeps& operator=(const EndpointDeps& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndpointDeps& operator=(EndpointDeps&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndpointDeps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndpointDeps* internal_default_instance() {
    return reinterpret_cast<const EndpointDeps*>(
               &_EndpointDeps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(EndpointDeps& a, EndpointDeps& b) {
    a.Swap(&b);
  }
  inline void Swap(EndpointDeps* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndpointDeps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndpointDeps* New() const final {
    return CreateMaybeMessage<EndpointDeps>(nullptr);
  }

  EndpointDeps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndpointDeps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndpointDeps& from);
  void MergeFrom(const EndpointDeps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndpointDeps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.EndpointDeps";
  }
  protected:
  explicit EndpointDeps(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependingScopesFieldNumber = 2,
    kEndpointFieldNumber = 1,
  };
  // repeated string depending_scopes = 2;
  int depending_scopes_size() const;
  private:
  int _internal_depending_scopes_size() const;
  public:
  void clear_depending_scopes();
  const std::string& depending_scopes(int index) const;
  std::string* mutable_depending_scopes(int index);
  void set_depending_scopes(int index, const std::string& value);
  void set_depending_scopes(int index, std::string&& value);
  void set_depending_scopes(int index, const char* value);
  void set_depending_scopes(int index, const char* value, size_t size);
  std::string* add_depending_scopes();
  void add_depending_scopes(const std::string& value);
  void add_depending_scopes(std::string&& value);
  void add_depending_scopes(const char* value);
  void add_depending_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& depending_scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_depending_scopes();
  private:
  const std::string& _internal_depending_scopes(int index) const;
  std::string* _internal_add_depending_scopes();
  public:

  // string endpoint = 1;
  void clear_endpoint();
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.EndpointDeps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> depending_scopes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Hit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Hit) */ {
 public:
  inline Hit() : Hit(nullptr) {}
  virtual ~Hit();

  Hit(const Hit& from);
  Hit(Hit&& from) noexcept
    : Hit() {
    *this = ::std::move(from);
  }

  inline Hit& operator=(const Hit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hit& operator=(Hit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Hit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hit* internal_default_instance() {
    return reinterpret_cast<const Hit*>(
               &_Hit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(Hit& a, Hit& b) {
    a.Swap(&b);
  }
  inline void Swap(Hit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hit* New() const final {
    return CreateMaybeMessage<Hit>(nullptr);
  }

  Hit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hit& from);
  void MergeFrom(const Hit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Hit";
  }
  protected:
  explicit Hit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 2,
    kAnnotationFieldNumber = 3,
    kScoreFieldNumber = 1,
  };
  // .clarifai.api.Input input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::clarifai::api::Input& input() const;
  ::clarifai::api::Input* release_input();
  ::clarifai::api::Input* mutable_input();
  void set_allocated_input(::clarifai::api::Input* input);
  private:
  const ::clarifai::api::Input& _internal_input() const;
  ::clarifai::api::Input* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::clarifai::api::Input* input);
  ::clarifai::api::Input* unsafe_arena_release_input();

  // .clarifai.api.Annotation annotation = 3;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::clarifai::api::Annotation& annotation() const;
  ::clarifai::api::Annotation* release_annotation();
  ::clarifai::api::Annotation* mutable_annotation();
  void set_allocated_annotation(::clarifai::api::Annotation* annotation);
  private:
  const ::clarifai::api::Annotation& _internal_annotation() const;
  ::clarifai::api::Annotation* _internal_mutable_annotation();
  public:
  void unsafe_arena_set_allocated_annotation(
      ::clarifai::api::Annotation* annotation);
  ::clarifai::api::Annotation* unsafe_arena_release_annotation();

  // float score = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Hit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::Input* input_;
  ::clarifai::api::Annotation* annotation_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class And PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.And) */ {
 public:
  inline And() : And(nullptr) {}
  virtual ~And();

  And(const And& from);
  And(And&& from) noexcept
    : And() {
    *this = ::std::move(from);
  }

  inline And& operator=(const And& from) {
    CopyFrom(from);
    return *this;
  }
  inline And& operator=(And&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const And& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const And* internal_default_instance() {
    return reinterpret_cast<const And*>(
               &_And_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(And& a, And& b) {
    a.Swap(&b);
  }
  inline void Swap(And* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(And* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline And* New() const final {
    return CreateMaybeMessage<And>(nullptr);
  }

  And* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<And>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const And& from);
  void MergeFrom(const And& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(And* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.And";
  }
  protected:
  explicit And(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kOutputFieldNumber = 2,
    kAnnotationFieldNumber = 4,
    kNegateFieldNumber = 3,
  };
  // .clarifai.api.Input input = 1;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::clarifai::api::Input& input() const;
  ::clarifai::api::Input* release_input();
  ::clarifai::api::Input* mutable_input();
  void set_allocated_input(::clarifai::api::Input* input);
  private:
  const ::clarifai::api::Input& _internal_input() const;
  ::clarifai::api::Input* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::clarifai::api::Input* input);
  ::clarifai::api::Input* unsafe_arena_release_input();

  // .clarifai.api.Output output = 2;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::clarifai::api::Output& output() const;
  ::clarifai::api::Output* release_output();
  ::clarifai::api::Output* mutable_output();
  void set_allocated_output(::clarifai::api::Output* output);
  private:
  const ::clarifai::api::Output& _internal_output() const;
  ::clarifai::api::Output* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::clarifai::api::Output* output);
  ::clarifai::api::Output* unsafe_arena_release_output();

  // .clarifai.api.Annotation annotation = 4;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::clarifai::api::Annotation& annotation() const;
  ::clarifai::api::Annotation* release_annotation();
  ::clarifai::api::Annotation* mutable_annotation();
  void set_allocated_annotation(::clarifai::api::Annotation* annotation);
  private:
  const ::clarifai::api::Annotation& _internal_annotation() const;
  ::clarifai::api::Annotation* _internal_mutable_annotation();
  public:
  void unsafe_arena_set_allocated_annotation(
      ::clarifai::api::Annotation* annotation);
  ::clarifai::api::Annotation* unsafe_arena_release_annotation();

  // bool negate = 3;
  void clear_negate();
  bool negate() const;
  void set_negate(bool value);
  private:
  bool _internal_negate() const;
  void _internal_set_negate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.And)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::Input* input_;
  ::clarifai::api::Output* output_;
  ::clarifai::api::Annotation* annotation_;
  bool negate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class AttributeMixIn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.AttributeMixIn) */ {
 public:
  inline AttributeMixIn() : AttributeMixIn(nullptr) {}
  virtual ~AttributeMixIn();

  AttributeMixIn(const AttributeMixIn& from);
  AttributeMixIn(AttributeMixIn&& from) noexcept
    : AttributeMixIn() {
    *this = ::std::move(from);
  }

  inline AttributeMixIn& operator=(const AttributeMixIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeMixIn& operator=(AttributeMixIn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeMixIn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttributeMixIn* internal_default_instance() {
    return reinterpret_cast<const AttributeMixIn*>(
               &_AttributeMixIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(AttributeMixIn& a, AttributeMixIn& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeMixIn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeMixIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeMixIn* New() const final {
    return CreateMaybeMessage<AttributeMixIn>(nullptr);
  }

  AttributeMixIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeMixIn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeMixIn& from);
  void MergeFrom(const AttributeMixIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeMixIn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.AttributeMixIn";
  }
  protected:
  explicit AttributeMixIn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionIdFieldNumber = 1,
    kConceptOverrideFieldNumber = 3,
    kMixInCoefficientFieldNumber = 2,
  };
  // string version_id = 1;
  void clear_version_id();
  const std::string& version_id() const;
  void set_version_id(const std::string& value);
  void set_version_id(std::string&& value);
  void set_version_id(const char* value);
  void set_version_id(const char* value, size_t size);
  std::string* mutable_version_id();
  std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.Concept concept_override = 3;
  bool has_concept_override() const;
  private:
  bool _internal_has_concept_override() const;
  public:
  void clear_concept_override();
  const ::clarifai::api::Concept& concept_override() const;
  ::clarifai::api::Concept* release_concept_override();
  ::clarifai::api::Concept* mutable_concept_override();
  void set_allocated_concept_override(::clarifai::api::Concept* concept_override);
  private:
  const ::clarifai::api::Concept& _internal_concept_override() const;
  ::clarifai::api::Concept* _internal_mutable_concept_override();
  public:
  void unsafe_arena_set_allocated_concept_override(
      ::clarifai::api::Concept* concept_override);
  ::clarifai::api::Concept* unsafe_arena_release_concept_override();

  // float mix_in_coefficient = 2;
  void clear_mix_in_coefficient();
  float mix_in_coefficient() const;
  void set_mix_in_coefficient(float value);
  private:
  float _internal_mix_in_coefficient() const;
  void _internal_set_mix_in_coefficient(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.AttributeMixIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::Concept* concept_override_;
  float mix_in_coefficient_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class AttributeQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.AttributeQuery) */ {
 public:
  inline AttributeQuery() : AttributeQuery(nullptr) {}
  virtual ~AttributeQuery();

  AttributeQuery(const AttributeQuery& from);
  AttributeQuery(AttributeQuery&& from) noexcept
    : AttributeQuery() {
    *this = ::std::move(from);
  }

  inline AttributeQuery& operator=(const AttributeQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeQuery& operator=(AttributeQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttributeQuery* internal_default_instance() {
    return reinterpret_cast<const AttributeQuery*>(
               &_AttributeQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(AttributeQuery& a, AttributeQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeQuery* New() const final {
    return CreateMaybeMessage<AttributeQuery>(nullptr);
  }

  AttributeQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeQuery& from);
  void MergeFrom(const AttributeQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.AttributeQuery";
  }
  protected:
  explicit AttributeQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeMixInFieldNumber = 2,
    kInputFieldNumber = 1,
  };
  // repeated .clarifai.api.AttributeMixIn attribute_mix_in = 2;
  int attribute_mix_in_size() const;
  private:
  int _internal_attribute_mix_in_size() const;
  public:
  void clear_attribute_mix_in();
  ::clarifai::api::AttributeMixIn* mutable_attribute_mix_in(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AttributeMixIn >*
      mutable_attribute_mix_in();
  private:
  const ::clarifai::api::AttributeMixIn& _internal_attribute_mix_in(int index) const;
  ::clarifai::api::AttributeMixIn* _internal_add_attribute_mix_in();
  public:
  const ::clarifai::api::AttributeMixIn& attribute_mix_in(int index) const;
  ::clarifai::api::AttributeMixIn* add_attribute_mix_in();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AttributeMixIn >&
      attribute_mix_in() const;

  // .clarifai.api.Input input = 1;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::clarifai::api::Input& input() const;
  ::clarifai::api::Input* release_input();
  ::clarifai::api::Input* mutable_input();
  void set_allocated_input(::clarifai::api::Input* input);
  private:
  const ::clarifai::api::Input& _internal_input() const;
  ::clarifai::api::Input* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::clarifai::api::Input* input);
  ::clarifai::api::Input* unsafe_arena_release_input();

  // @@protoc_insertion_point(class_scope:clarifai.api.AttributeQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AttributeMixIn > attribute_mix_in_;
  ::clarifai::api::Input* input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Query PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Query) */ {
 public:
  inline Query() : Query(nullptr) {}
  virtual ~Query();

  Query(const Query& from);
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query& operator=(Query&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }
  inline void Swap(Query* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const final {
    return CreateMaybeMessage<Query>(nullptr);
  }

  Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Query";
  }
  protected:
  explicit Query(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAndsFieldNumber = 1,
    kFiltersFieldNumber = 3,
    kRanksFieldNumber = 4,
    kLanguageFieldNumber = 2,
  };
  // repeated .clarifai.api.And ands = 1;
  int ands_size() const;
  private:
  int _internal_ands_size() const;
  public:
  void clear_ands();
  ::clarifai::api::And* mutable_ands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::And >*
      mutable_ands();
  private:
  const ::clarifai::api::And& _internal_ands(int index) const;
  ::clarifai::api::And* _internal_add_ands();
  public:
  const ::clarifai::api::And& ands(int index) const;
  ::clarifai::api::And* add_ands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::And >&
      ands() const;

  // repeated .clarifai.api.Filter filters = 3;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::clarifai::api::Filter* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Filter >*
      mutable_filters();
  private:
  const ::clarifai::api::Filter& _internal_filters(int index) const;
  ::clarifai::api::Filter* _internal_add_filters();
  public:
  const ::clarifai::api::Filter& filters(int index) const;
  ::clarifai::api::Filter* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Filter >&
      filters() const;

  // repeated .clarifai.api.Rank ranks = 4;
  int ranks_size() const;
  private:
  int _internal_ranks_size() const;
  public:
  void clear_ranks();
  ::clarifai::api::Rank* mutable_ranks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Rank >*
      mutable_ranks();
  private:
  const ::clarifai::api::Rank& _internal_ranks(int index) const;
  ::clarifai::api::Rank* _internal_add_ranks();
  public:
  const ::clarifai::api::Rank& ranks(int index) const;
  ::clarifai::api::Rank* add_ranks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Rank >&
      ranks() const;

  // string language = 2;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Query)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::And > ands_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Filter > filters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Rank > ranks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Search PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Search) */ {
 public:
  inline Search() : Search(nullptr) {}
  virtual ~Search();

  Search(const Search& from);
  Search(Search&& from) noexcept
    : Search() {
    *this = ::std::move(from);
  }

  inline Search& operator=(const Search& from) {
    CopyFrom(from);
    return *this;
  }
  inline Search& operator=(Search&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Search& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Search* internal_default_instance() {
    return reinterpret_cast<const Search*>(
               &_Search_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(Search& a, Search& b) {
    a.Swap(&b);
  }
  inline void Swap(Search* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Search* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Search* New() const final {
    return CreateMaybeMessage<Search>(nullptr);
  }

  Search* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Search>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Search& from);
  void MergeFrom(const Search& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Search* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Search";
  }
  protected:
  explicit Search(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kApplicationIdFieldNumber = 3,
    kNameFieldNumber = 4,
    kGitHashFieldNumber = 6,
    kAlgorithmFieldNumber = 9,
    kQueryFieldNumber = 1,
    kAsOfFieldNumber = 5,
    kCreatedAtFieldNumber = 7,
    kModifiedAtFieldNumber = 8,
    kSaveFieldNumber = 10,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string application_id = 3;
  void clear_application_id();
  const std::string& application_id() const;
  void set_application_id(const std::string& value);
  void set_application_id(std::string&& value);
  void set_application_id(const char* value);
  void set_application_id(const char* value, size_t size);
  std::string* mutable_application_id();
  std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string git_hash = 6;
  void clear_git_hash();
  const std::string& git_hash() const;
  void set_git_hash(const std::string& value);
  void set_git_hash(std::string&& value);
  void set_git_hash(const char* value);
  void set_git_hash(const char* value, size_t size);
  std::string* mutable_git_hash();
  std::string* release_git_hash();
  void set_allocated_git_hash(std::string* git_hash);
  private:
  const std::string& _internal_git_hash() const;
  void _internal_set_git_hash(const std::string& value);
  std::string* _internal_mutable_git_hash();
  public:

  // string algorithm = 9;
  void clear_algorithm();
  const std::string& algorithm() const;
  void set_algorithm(const std::string& value);
  void set_algorithm(std::string&& value);
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  std::string* mutable_algorithm();
  std::string* release_algorithm();
  void set_allocated_algorithm(std::string* algorithm);
  private:
  const std::string& _internal_algorithm() const;
  void _internal_set_algorithm(const std::string& value);
  std::string* _internal_mutable_algorithm();
  public:

  // .clarifai.api.Query query = 1;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::clarifai::api::Query& query() const;
  ::clarifai::api::Query* release_query();
  ::clarifai::api::Query* mutable_query();
  void set_allocated_query(::clarifai::api::Query* query);
  private:
  const ::clarifai::api::Query& _internal_query() const;
  ::clarifai::api::Query* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::clarifai::api::Query* query);
  ::clarifai::api::Query* unsafe_arena_release_query();

  // .google.protobuf.Timestamp as_of = 5;
  bool has_as_of() const;
  private:
  bool _internal_has_as_of() const;
  public:
  void clear_as_of();
  const PROTOBUF_NAMESPACE_ID::Timestamp& as_of() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_as_of();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_as_of();
  void set_allocated_as_of(PROTOBUF_NAMESPACE_ID::Timestamp* as_of);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_as_of() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_as_of();
  public:
  void unsafe_arena_set_allocated_as_of(
      PROTOBUF_NAMESPACE_ID::Timestamp* as_of);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_as_of();

  // .google.protobuf.Timestamp created_at = 7;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp modified_at = 8;
  bool has_modified_at() const;
  private:
  bool _internal_has_modified_at() const;
  public:
  void clear_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified_at();
  void set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified_at();
  public:
  void unsafe_arena_set_allocated_modified_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_modified_at();

  // bool save = 10;
  void clear_save();
  bool save() const;
  void set_save(bool value);
  private:
  bool _internal_save() const;
  void _internal_set_save(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Search)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr git_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_;
  ::clarifai::api::Query* query_;
  PROTOBUF_NAMESPACE_ID::Timestamp* as_of_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_at_;
  bool save_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Filter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Filter) */ {
 public:
  inline Filter() : Filter(nullptr) {}
  virtual ~Filter();

  Filter(const Filter& from);
  Filter(Filter&& from) noexcept
    : Filter() {
    *this = ::std::move(from);
  }

  inline Filter& operator=(const Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Filter& operator=(Filter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Filter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Filter* internal_default_instance() {
    return reinterpret_cast<const Filter*>(
               &_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(Filter& a, Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Filter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Filter* New() const final {
    return CreateMaybeMessage<Filter>(nullptr);
  }

  Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Filter& from);
  void MergeFrom(const Filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Filter";
  }
  protected:
  explicit Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationFieldNumber = 4,
    kNegateFieldNumber = 3,
  };
  // .clarifai.api.Annotation annotation = 4;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::clarifai::api::Annotation& annotation() const;
  ::clarifai::api::Annotation* release_annotation();
  ::clarifai::api::Annotation* mutable_annotation();
  void set_allocated_annotation(::clarifai::api::Annotation* annotation);
  private:
  const ::clarifai::api::Annotation& _internal_annotation() const;
  ::clarifai::api::Annotation* _internal_mutable_annotation();
  public:
  void unsafe_arena_set_allocated_annotation(
      ::clarifai::api::Annotation* annotation);
  ::clarifai::api::Annotation* unsafe_arena_release_annotation();

  // bool negate = 3;
  void clear_negate();
  bool negate() const;
  void set_negate(bool value);
  private:
  bool _internal_negate() const;
  void _internal_set_negate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::Annotation* annotation_;
  bool negate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Rank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Rank) */ {
 public:
  inline Rank() : Rank(nullptr) {}
  virtual ~Rank();

  Rank(const Rank& from);
  Rank(Rank&& from) noexcept
    : Rank() {
    *this = ::std::move(from);
  }

  inline Rank& operator=(const Rank& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rank& operator=(Rank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rank* internal_default_instance() {
    return reinterpret_cast<const Rank*>(
               &_Rank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(Rank& a, Rank& b) {
    a.Swap(&b);
  }
  inline void Swap(Rank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rank* New() const final {
    return CreateMaybeMessage<Rank>(nullptr);
  }

  Rank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rank& from);
  void MergeFrom(const Rank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Rank";
  }
  protected:
  explicit Rank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationFieldNumber = 4,
    kNegateFieldNumber = 3,
  };
  // .clarifai.api.Annotation annotation = 4;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::clarifai::api::Annotation& annotation() const;
  ::clarifai::api::Annotation* release_annotation();
  ::clarifai::api::Annotation* mutable_annotation();
  void set_allocated_annotation(::clarifai::api::Annotation* annotation);
  private:
  const ::clarifai::api::Annotation& _internal_annotation() const;
  ::clarifai::api::Annotation* _internal_mutable_annotation();
  public:
  void unsafe_arena_set_allocated_annotation(
      ::clarifai::api::Annotation* annotation);
  ::clarifai::api::Annotation* unsafe_arena_release_annotation();

  // bool negate = 3;
  void clear_negate();
  bool negate() const;
  void set_negate(bool value);
  private:
  bool _internal_negate() const;
  void _internal_set_negate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Rank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::Annotation* annotation_;
  bool negate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Plan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Plan) */ {
 public:
  inline Plan() : Plan(nullptr) {}
  virtual ~Plan();

  Plan(const Plan& from);
  Plan(Plan&& from) noexcept
    : Plan() {
    *this = ::std::move(from);
  }

  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plan& operator=(Plan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Plan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Plan* internal_default_instance() {
    return reinterpret_cast<const Plan*>(
               &_Plan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(Plan& a, Plan& b) {
    a.Swap(&b);
  }
  inline void Swap(Plan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Plan* New() const final {
    return CreateMaybeMessage<Plan>(nullptr);
  }

  Plan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Plan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Plan& from);
  void MergeFrom(const Plan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Plan";
  }
  protected:
  explicit Plan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Plan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class CreditCard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.CreditCard) */ {
 public:
  inline CreditCard() : CreditCard(nullptr) {}
  virtual ~CreditCard();

  CreditCard(const CreditCard& from);
  CreditCard(CreditCard&& from) noexcept
    : CreditCard() {
    *this = ::std::move(from);
  }

  inline CreditCard& operator=(const CreditCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreditCard& operator=(CreditCard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreditCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreditCard* internal_default_instance() {
    return reinterpret_cast<const CreditCard*>(
               &_CreditCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CreditCard& a, CreditCard& b) {
    a.Swap(&b);
  }
  inline void Swap(CreditCard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreditCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreditCard* New() const final {
    return CreateMaybeMessage<CreditCard>(nullptr);
  }

  CreditCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreditCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreditCard& from);
  void MergeFrom(const CreditCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreditCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.CreditCard";
  }
  protected:
  explicit CreditCard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
    kFourDigitsFieldNumber = 2,
    kExpMonthFieldNumber = 3,
    kExpYearFieldNumber = 4,
    kCvcFieldNumber = 5,
    kNameFieldNumber = 6,
    kAddressLine1FieldNumber = 7,
    kAddressLine2FieldNumber = 8,
    kAddressZipFieldNumber = 9,
    kAddressCountryFieldNumber = 10,
    kAddressCityFieldNumber = 11,
    kAddressStateFieldNumber = 12,
    kIdFieldNumber = 13,
    kBrandFieldNumber = 14,
    kFundingFieldNumber = 15,
    kCvcCheckFieldNumber = 17,
    kDefaultFieldNumber = 16,
  };
  // string number = 1;
  void clear_number();
  const std::string& number() const;
  void set_number(const std::string& value);
  void set_number(std::string&& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  std::string* mutable_number();
  std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // string four_digits = 2;
  void clear_four_digits();
  const std::string& four_digits() const;
  void set_four_digits(const std::string& value);
  void set_four_digits(std::string&& value);
  void set_four_digits(const char* value);
  void set_four_digits(const char* value, size_t size);
  std::string* mutable_four_digits();
  std::string* release_four_digits();
  void set_allocated_four_digits(std::string* four_digits);
  private:
  const std::string& _internal_four_digits() const;
  void _internal_set_four_digits(const std::string& value);
  std::string* _internal_mutable_four_digits();
  public:

  // string exp_month = 3;
  void clear_exp_month();
  const std::string& exp_month() const;
  void set_exp_month(const std::string& value);
  void set_exp_month(std::string&& value);
  void set_exp_month(const char* value);
  void set_exp_month(const char* value, size_t size);
  std::string* mutable_exp_month();
  std::string* release_exp_month();
  void set_allocated_exp_month(std::string* exp_month);
  private:
  const std::string& _internal_exp_month() const;
  void _internal_set_exp_month(const std::string& value);
  std::string* _internal_mutable_exp_month();
  public:

  // string exp_year = 4;
  void clear_exp_year();
  const std::string& exp_year() const;
  void set_exp_year(const std::string& value);
  void set_exp_year(std::string&& value);
  void set_exp_year(const char* value);
  void set_exp_year(const char* value, size_t size);
  std::string* mutable_exp_year();
  std::string* release_exp_year();
  void set_allocated_exp_year(std::string* exp_year);
  private:
  const std::string& _internal_exp_year() const;
  void _internal_set_exp_year(const std::string& value);
  std::string* _internal_mutable_exp_year();
  public:

  // string cvc = 5;
  void clear_cvc();
  const std::string& cvc() const;
  void set_cvc(const std::string& value);
  void set_cvc(std::string&& value);
  void set_cvc(const char* value);
  void set_cvc(const char* value, size_t size);
  std::string* mutable_cvc();
  std::string* release_cvc();
  void set_allocated_cvc(std::string* cvc);
  private:
  const std::string& _internal_cvc() const;
  void _internal_set_cvc(const std::string& value);
  std::string* _internal_mutable_cvc();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string address_line_1 = 7;
  void clear_address_line_1();
  const std::string& address_line_1() const;
  void set_address_line_1(const std::string& value);
  void set_address_line_1(std::string&& value);
  void set_address_line_1(const char* value);
  void set_address_line_1(const char* value, size_t size);
  std::string* mutable_address_line_1();
  std::string* release_address_line_1();
  void set_allocated_address_line_1(std::string* address_line_1);
  private:
  const std::string& _internal_address_line_1() const;
  void _internal_set_address_line_1(const std::string& value);
  std::string* _internal_mutable_address_line_1();
  public:

  // string address_line_2 = 8;
  void clear_address_line_2();
  const std::string& address_line_2() const;
  void set_address_line_2(const std::string& value);
  void set_address_line_2(std::string&& value);
  void set_address_line_2(const char* value);
  void set_address_line_2(const char* value, size_t size);
  std::string* mutable_address_line_2();
  std::string* release_address_line_2();
  void set_allocated_address_line_2(std::string* address_line_2);
  private:
  const std::string& _internal_address_line_2() const;
  void _internal_set_address_line_2(const std::string& value);
  std::string* _internal_mutable_address_line_2();
  public:

  // string address_zip = 9;
  void clear_address_zip();
  const std::string& address_zip() const;
  void set_address_zip(const std::string& value);
  void set_address_zip(std::string&& value);
  void set_address_zip(const char* value);
  void set_address_zip(const char* value, size_t size);
  std::string* mutable_address_zip();
  std::string* release_address_zip();
  void set_allocated_address_zip(std::string* address_zip);
  private:
  const std::string& _internal_address_zip() const;
  void _internal_set_address_zip(const std::string& value);
  std::string* _internal_mutable_address_zip();
  public:

  // string address_country = 10;
  void clear_address_country();
  const std::string& address_country() const;
  void set_address_country(const std::string& value);
  void set_address_country(std::string&& value);
  void set_address_country(const char* value);
  void set_address_country(const char* value, size_t size);
  std::string* mutable_address_country();
  std::string* release_address_country();
  void set_allocated_address_country(std::string* address_country);
  private:
  const std::string& _internal_address_country() const;
  void _internal_set_address_country(const std::string& value);
  std::string* _internal_mutable_address_country();
  public:

  // string address_city = 11;
  void clear_address_city();
  const std::string& address_city() const;
  void set_address_city(const std::string& value);
  void set_address_city(std::string&& value);
  void set_address_city(const char* value);
  void set_address_city(const char* value, size_t size);
  std::string* mutable_address_city();
  std::string* release_address_city();
  void set_allocated_address_city(std::string* address_city);
  private:
  const std::string& _internal_address_city() const;
  void _internal_set_address_city(const std::string& value);
  std::string* _internal_mutable_address_city();
  public:

  // string address_state = 12;
  void clear_address_state();
  const std::string& address_state() const;
  void set_address_state(const std::string& value);
  void set_address_state(std::string&& value);
  void set_address_state(const char* value);
  void set_address_state(const char* value, size_t size);
  std::string* mutable_address_state();
  std::string* release_address_state();
  void set_allocated_address_state(std::string* address_state);
  private:
  const std::string& _internal_address_state() const;
  void _internal_set_address_state(const std::string& value);
  std::string* _internal_mutable_address_state();
  public:

  // string id = 13;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string brand = 14;
  void clear_brand();
  const std::string& brand() const;
  void set_brand(const std::string& value);
  void set_brand(std::string&& value);
  void set_brand(const char* value);
  void set_brand(const char* value, size_t size);
  std::string* mutable_brand();
  std::string* release_brand();
  void set_allocated_brand(std::string* brand);
  private:
  const std::string& _internal_brand() const;
  void _internal_set_brand(const std::string& value);
  std::string* _internal_mutable_brand();
  public:

  // string funding = 15;
  void clear_funding();
  const std::string& funding() const;
  void set_funding(const std::string& value);
  void set_funding(std::string&& value);
  void set_funding(const char* value);
  void set_funding(const char* value, size_t size);
  std::string* mutable_funding();
  std::string* release_funding();
  void set_allocated_funding(std::string* funding);
  private:
  const std::string& _internal_funding() const;
  void _internal_set_funding(const std::string& value);
  std::string* _internal_mutable_funding();
  public:

  // string cvc_check = 17;
  void clear_cvc_check();
  const std::string& cvc_check() const;
  void set_cvc_check(const std::string& value);
  void set_cvc_check(std::string&& value);
  void set_cvc_check(const char* value);
  void set_cvc_check(const char* value, size_t size);
  std::string* mutable_cvc_check();
  std::string* release_cvc_check();
  void set_allocated_cvc_check(std::string* cvc_check);
  private:
  const std::string& _internal_cvc_check() const;
  void _internal_set_cvc_check(const std::string& value);
  std::string* _internal_mutable_cvc_check();
  public:

  // bool default = 16 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_default_();
  bool default_() const;
  void set_default_(bool value);
  private:
  bool _internal_default_() const;
  void _internal_set_default_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.CreditCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr four_digits_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exp_month_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exp_year_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cvc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_line_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_line_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_zip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funding_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cvc_check_;
  bool default__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Text PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Text) */ {
 public:
  inline Text() : Text(nullptr) {}
  virtual ~Text();

  Text(const Text& from);
  Text(Text&& from) noexcept
    : Text() {
    *this = ::std::move(from);
  }

  inline Text& operator=(const Text& from) {
    CopyFrom(from);
    return *this;
  }
  inline Text& operator=(Text&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Text& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Text* internal_default_instance() {
    return reinterpret_cast<const Text*>(
               &_Text_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(Text& a, Text& b) {
    a.Swap(&b);
  }
  inline void Swap(Text* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Text* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Text* New() const final {
    return CreateMaybeMessage<Text>(nullptr);
  }

  Text* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Text>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Text& from);
  void MergeFrom(const Text& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Text* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Text";
  }
  protected:
  explicit Text(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawFieldNumber = 1,
  };
  // string raw = 1;
  void clear_raw();
  const std::string& raw() const;
  void set_raw(const std::string& value);
  void set_raw(std::string&& value);
  void set_raw(const char* value);
  void set_raw(const char* value, size_t size);
  std::string* mutable_raw();
  std::string* release_raw();
  void set_allocated_raw(std::string* raw);
  private:
  const std::string& _internal_raw() const;
  void _internal_set_raw(const std::string& value);
  std::string* _internal_mutable_raw();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Text)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class DimensionList_DimensionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DimensionList_DimensionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DimensionList_DimensionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  DimensionList_DimensionEntry_DoNotUse();
  explicit DimensionList_DimensionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DimensionList_DimensionEntry_DoNotUse& other);
  static const DimensionList_DimensionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DimensionList_DimensionEntry_DoNotUse*>(&_DimensionList_DimensionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "clarifai.api.DimensionList.DimensionEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "clarifai.api.DimensionList.DimensionEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[84];
  }

  public:
};

// -------------------------------------------------------------------

class DimensionList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DimensionList) */ {
 public:
  inline DimensionList() : DimensionList(nullptr) {}
  virtual ~DimensionList();

  DimensionList(const DimensionList& from);
  DimensionList(DimensionList&& from) noexcept
    : DimensionList() {
    *this = ::std::move(from);
  }

  inline DimensionList& operator=(const DimensionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DimensionList& operator=(DimensionList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DimensionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DimensionList* internal_default_instance() {
    return reinterpret_cast<const DimensionList*>(
               &_DimensionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(DimensionList& a, DimensionList& b) {
    a.Swap(&b);
  }
  inline void Swap(DimensionList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DimensionList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DimensionList* New() const final {
    return CreateMaybeMessage<DimensionList>(nullptr);
  }

  DimensionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DimensionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DimensionList& from);
  void MergeFrom(const DimensionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimensionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DimensionList";
  }
  protected:
  explicit DimensionList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDimensionFieldNumber = 1,
    kIntValueListFieldNumber = 2,
    kStartDateFieldNumber = 3,
    kEndDateFieldNumber = 4,
  };
  // map<string, string> dimension = 1;
  int dimension_size() const;
  private:
  int _internal_dimension_size() const;
  public:
  void clear_dimension();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_dimension() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_dimension();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      dimension() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_dimension();

  // repeated int64 int_value_list = 2;
  int int_value_list_size() const;
  private:
  int _internal_int_value_list_size() const;
  public:
  void clear_int_value_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int_value_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_int_value_list() const;
  void _internal_add_int_value_list(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_int_value_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 int_value_list(int index) const;
  void set_int_value_list(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_int_value_list(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      int_value_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_int_value_list();

  // .google.protobuf.Timestamp start_date = 3;
  bool has_start_date() const;
  private:
  bool _internal_has_start_date() const;
  public:
  void clear_start_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_date();
  void set_allocated_start_date(PROTOBUF_NAMESPACE_ID::Timestamp* start_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_date();
  public:
  void unsafe_arena_set_allocated_start_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_date();

  // .google.protobuf.Timestamp end_date = 4;
  bool has_end_date() const;
  private:
  bool _internal_has_end_date() const;
  public:
  void clear_end_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_date();
  void set_allocated_end_date(PROTOBUF_NAMESPACE_ID::Timestamp* end_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_date();
  public:
  void unsafe_arena_set_allocated_end_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_date();

  // @@protoc_insertion_point(class_scope:clarifai.api.DimensionList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DimensionList_DimensionEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > dimension_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > int_value_list_;
  mutable std::atomic<int> _int_value_list_cached_byte_size_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_date_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class UsageInterval PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.UsageInterval) */ {
 public:
  inline UsageInterval() : UsageInterval(nullptr) {}
  virtual ~UsageInterval();

  UsageInterval(const UsageInterval& from);
  UsageInterval(UsageInterval&& from) noexcept
    : UsageInterval() {
    *this = ::std::move(from);
  }

  inline UsageInterval& operator=(const UsageInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsageInterval& operator=(UsageInterval&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsageInterval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsageInterval* internal_default_instance() {
    return reinterpret_cast<const UsageInterval*>(
               &_UsageInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(UsageInterval& a, UsageInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(UsageInterval* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsageInterval* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsageInterval* New() const final {
    return CreateMaybeMessage<UsageInterval>(nullptr);
  }

  UsageInterval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsageInterval>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsageInterval& from);
  void MergeFrom(const UsageInterval& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsageInterval* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.UsageInterval";
  }
  protected:
  explicit UsageInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalFieldNumber = 1,
    kRangeFieldNumber = 2,
  };
  // string interval = 1;
  void clear_interval();
  const std::string& interval() const;
  void set_interval(const std::string& value);
  void set_interval(std::string&& value);
  void set_interval(const char* value);
  void set_interval(const char* value, size_t size);
  std::string* mutable_interval();
  std::string* release_interval();
  void set_allocated_interval(std::string* interval);
  private:
  const std::string& _internal_interval() const;
  void _internal_set_interval(const std::string& value);
  std::string* _internal_mutable_interval();
  public:

  // int32 range = 2;
  void clear_range();
  ::PROTOBUF_NAMESPACE_ID::int32 range() const;
  void set_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_range() const;
  void _internal_set_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.UsageInterval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class RealtimeCount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.RealtimeCount) */ {
 public:
  inline RealtimeCount() : RealtimeCount(nullptr) {}
  virtual ~RealtimeCount();

  RealtimeCount(const RealtimeCount& from);
  RealtimeCount(RealtimeCount&& from) noexcept
    : RealtimeCount() {
    *this = ::std::move(from);
  }

  inline RealtimeCount& operator=(const RealtimeCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline RealtimeCount& operator=(RealtimeCount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RealtimeCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RealtimeCount* internal_default_instance() {
    return reinterpret_cast<const RealtimeCount*>(
               &_RealtimeCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(RealtimeCount& a, RealtimeCount& b) {
    a.Swap(&b);
  }
  inline void Swap(RealtimeCount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RealtimeCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RealtimeCount* New() const final {
    return CreateMaybeMessage<RealtimeCount>(nullptr);
  }

  RealtimeCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RealtimeCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RealtimeCount& from);
  void MergeFrom(const RealtimeCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RealtimeCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.RealtimeCount";
  }
  protected:
  explicit RealtimeCount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpTypeFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // string op_type = 1;
  void clear_op_type();
  const std::string& op_type() const;
  void set_op_type(const std::string& value);
  void set_op_type(std::string&& value);
  void set_op_type(const char* value);
  void set_op_type(const char* value, size_t size);
  std::string* mutable_op_type();
  std::string* release_op_type();
  void set_allocated_op_type(std::string* op_type);
  private:
  const std::string& _internal_op_type() const;
  void _internal_set_op_type(const std::string& value);
  std::string* _internal_mutable_op_type();
  public:

  // int64 count = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.RealtimeCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class EventSummary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.EventSummary) */ {
 public:
  inline EventSummary() : EventSummary(nullptr) {}
  virtual ~EventSummary();

  EventSummary(const EventSummary& from);
  EventSummary(EventSummary&& from) noexcept
    : EventSummary() {
    *this = ::std::move(from);
  }

  inline EventSummary& operator=(const EventSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSummary& operator=(EventSummary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventSummary* internal_default_instance() {
    return reinterpret_cast<const EventSummary*>(
               &_EventSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(EventSummary& a, EventSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(EventSummary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventSummary* New() const final {
    return CreateMaybeMessage<EventSummary>(nullptr);
  }

  EventSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventSummary& from);
  void MergeFrom(const EventSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.EventSummary";
  }
  protected:
  explicit EventSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 2,
    kCountFieldNumber = 3,
    kEventTypeFieldNumber = 1,
  };
  // .clarifai.api.Model model = 2;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::api::Model& model() const;
  ::clarifai::api::Model* release_model();
  ::clarifai::api::Model* mutable_model();
  void set_allocated_model(::clarifai::api::Model* model);
  private:
  const ::clarifai::api::Model& _internal_model() const;
  ::clarifai::api::Model* _internal_mutable_model();
  public:
  void unsafe_arena_set_allocated_model(
      ::clarifai::api::Model* model);
  ::clarifai::api::Model* unsafe_arena_release_model();

  // uint64 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .clarifai.api.APIEventType event_type = 1;
  void clear_event_type();
  ::clarifai::api::APIEventType event_type() const;
  void set_event_type(::clarifai::api::APIEventType value);
  private:
  ::clarifai::api::APIEventType _internal_event_type() const;
  void _internal_set_event_type(::clarifai::api::APIEventType value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.EventSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::Model* model_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  int event_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class EventsCollection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.EventsCollection) */ {
 public:
  inline EventsCollection() : EventsCollection(nullptr) {}
  virtual ~EventsCollection();

  EventsCollection(const EventsCollection& from);
  EventsCollection(EventsCollection&& from) noexcept
    : EventsCollection() {
    *this = ::std::move(from);
  }

  inline EventsCollection& operator=(const EventsCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventsCollection& operator=(EventsCollection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventsCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventsCollection* internal_default_instance() {
    return reinterpret_cast<const EventsCollection*>(
               &_EventsCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(EventsCollection& a, EventsCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(EventsCollection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventsCollection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventsCollection* New() const final {
    return CreateMaybeMessage<EventsCollection>(nullptr);
  }

  EventsCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventsCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventsCollection& from);
  void MergeFrom(const EventsCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventsCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.EventsCollection";
  }
  protected:
  explicit EventsCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventSummariesFieldNumber = 3,
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
  };
  // repeated .clarifai.api.EventSummary event_summaries = 3;
  int event_summaries_size() const;
  private:
  int _internal_event_summaries_size() const;
  public:
  void clear_event_summaries();
  ::clarifai::api::EventSummary* mutable_event_summaries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EventSummary >*
      mutable_event_summaries();
  private:
  const ::clarifai::api::EventSummary& _internal_event_summaries(int index) const;
  ::clarifai::api::EventSummary* _internal_add_event_summaries();
  public:
  const ::clarifai::api::EventSummary& event_summaries(int index) const;
  ::clarifai::api::EventSummary* add_event_summaries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EventSummary >&
      event_summaries() const;

  // .google.protobuf.Timestamp start_time = 1;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 2;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // @@protoc_insertion_point(class_scope:clarifai.api.EventsCollection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EventSummary > event_summaries_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.User) */ {
 public:
  inline User() : User(nullptr) {}
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailAddressesFieldNumber = 12,
    kIdFieldNumber = 1,
    kPrimaryEmailFieldNumber = 2,
    kFirstNameFieldNumber = 3,
    kLastNameFieldNumber = 4,
    kCompanyNameFieldNumber = 5,
    kBillTypeFieldNumber = 7,
    kWorkerIdFieldNumber = 13,
    kCreatedAtFieldNumber = 6,
    kDateGdprConsentFieldNumber = 8,
    kDateTosConsentFieldNumber = 9,
    kDateMarketingConsentFieldNumber = 10,
    kMetadataFieldNumber = 11,
  };
  // repeated .clarifai.api.EmailAddress email_addresses = 12;
  int email_addresses_size() const;
  private:
  int _internal_email_addresses_size() const;
  public:
  void clear_email_addresses();
  ::clarifai::api::EmailAddress* mutable_email_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >*
      mutable_email_addresses();
  private:
  const ::clarifai::api::EmailAddress& _internal_email_addresses(int index) const;
  ::clarifai::api::EmailAddress* _internal_add_email_addresses();
  public:
  const ::clarifai::api::EmailAddress& email_addresses(int index) const;
  ::clarifai::api::EmailAddress* add_email_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >&
      email_addresses() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string primary_email = 2;
  void clear_primary_email();
  const std::string& primary_email() const;
  void set_primary_email(const std::string& value);
  void set_primary_email(std::string&& value);
  void set_primary_email(const char* value);
  void set_primary_email(const char* value, size_t size);
  std::string* mutable_primary_email();
  std::string* release_primary_email();
  void set_allocated_primary_email(std::string* primary_email);
  private:
  const std::string& _internal_primary_email() const;
  void _internal_set_primary_email(const std::string& value);
  std::string* _internal_mutable_primary_email();
  public:

  // string first_name = 3;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 4;
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string company_name = 5;
  void clear_company_name();
  const std::string& company_name() const;
  void set_company_name(const std::string& value);
  void set_company_name(std::string&& value);
  void set_company_name(const char* value);
  void set_company_name(const char* value, size_t size);
  std::string* mutable_company_name();
  std::string* release_company_name();
  void set_allocated_company_name(std::string* company_name);
  private:
  const std::string& _internal_company_name() const;
  void _internal_set_company_name(const std::string& value);
  std::string* _internal_mutable_company_name();
  public:

  // string bill_type = 7;
  void clear_bill_type();
  const std::string& bill_type() const;
  void set_bill_type(const std::string& value);
  void set_bill_type(std::string&& value);
  void set_bill_type(const char* value);
  void set_bill_type(const char* value, size_t size);
  std::string* mutable_bill_type();
  std::string* release_bill_type();
  void set_allocated_bill_type(std::string* bill_type);
  private:
  const std::string& _internal_bill_type() const;
  void _internal_set_bill_type(const std::string& value);
  std::string* _internal_mutable_bill_type();
  public:

  // string worker_id = 13;
  void clear_worker_id();
  const std::string& worker_id() const;
  void set_worker_id(const std::string& value);
  void set_worker_id(std::string&& value);
  void set_worker_id(const char* value);
  void set_worker_id(const char* value, size_t size);
  std::string* mutable_worker_id();
  std::string* release_worker_id();
  void set_allocated_worker_id(std::string* worker_id);
  private:
  const std::string& _internal_worker_id() const;
  void _internal_set_worker_id(const std::string& value);
  std::string* _internal_mutable_worker_id();
  public:

  // .google.protobuf.Timestamp created_at = 6;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp date_gdpr_consent = 8;
  bool has_date_gdpr_consent() const;
  private:
  bool _internal_has_date_gdpr_consent() const;
  public:
  void clear_date_gdpr_consent();
  const PROTOBUF_NAMESPACE_ID::Timestamp& date_gdpr_consent() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_date_gdpr_consent();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date_gdpr_consent();
  void set_allocated_date_gdpr_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_gdpr_consent);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date_gdpr_consent() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date_gdpr_consent();
  public:
  void unsafe_arena_set_allocated_date_gdpr_consent(
      PROTOBUF_NAMESPACE_ID::Timestamp* date_gdpr_consent);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_date_gdpr_consent();

  // .google.protobuf.Timestamp date_tos_consent = 9;
  bool has_date_tos_consent() const;
  private:
  bool _internal_has_date_tos_consent() const;
  public:
  void clear_date_tos_consent();
  const PROTOBUF_NAMESPACE_ID::Timestamp& date_tos_consent() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_date_tos_consent();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date_tos_consent();
  void set_allocated_date_tos_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_tos_consent);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date_tos_consent() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date_tos_consent();
  public:
  void unsafe_arena_set_allocated_date_tos_consent(
      PROTOBUF_NAMESPACE_ID::Timestamp* date_tos_consent);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_date_tos_consent();

  // .google.protobuf.Timestamp date_marketing_consent = 10;
  bool has_date_marketing_consent() const;
  private:
  bool _internal_has_date_marketing_consent() const;
  public:
  void clear_date_marketing_consent();
  const PROTOBUF_NAMESPACE_ID::Timestamp& date_marketing_consent() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_date_marketing_consent();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date_marketing_consent();
  void set_allocated_date_marketing_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_marketing_consent);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date_marketing_consent() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date_marketing_consent();
  public:
  void unsafe_arena_set_allocated_date_marketing_consent(
      PROTOBUF_NAMESPACE_ID::Timestamp* date_marketing_consent);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_date_marketing_consent();

  // .google.protobuf.Struct metadata = 11;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      PROTOBUF_NAMESPACE_ID::Struct* metadata);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:clarifai.api.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress > email_addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bill_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* date_gdpr_consent_;
  PROTOBUF_NAMESPACE_ID::Timestamp* date_tos_consent_;
  PROTOBUF_NAMESPACE_ID::Timestamp* date_marketing_consent_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class EmailAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.EmailAddress) */ {
 public:
  inline EmailAddress() : EmailAddress(nullptr) {}
  virtual ~EmailAddress();

  EmailAddress(const EmailAddress& from);
  EmailAddress(EmailAddress&& from) noexcept
    : EmailAddress() {
    *this = ::std::move(from);
  }

  inline EmailAddress& operator=(const EmailAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailAddress& operator=(EmailAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmailAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailAddress* internal_default_instance() {
    return reinterpret_cast<const EmailAddress*>(
               &_EmailAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(EmailAddress& a, EmailAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmailAddress* New() const final {
    return CreateMaybeMessage<EmailAddress>(nullptr);
  }

  EmailAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmailAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmailAddress& from);
  void MergeFrom(const EmailAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.EmailAddress";
  }
  protected:
  explicit EmailAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kPrimaryFieldNumber = 2,
    kVerifiedFieldNumber = 3,
  };
  // string email = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // bool primary = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_primary();
  bool primary() const;
  void set_primary(bool value);
  private:
  bool _internal_primary() const;
  void _internal_set_primary(bool value);
  public:

  // bool verified = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_verified();
  bool verified() const;
  void set_verified(bool value);
  private:
  bool _internal_verified() const;
  void _internal_set_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.EmailAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  bool primary_;
  bool verified_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class UserPassword PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.UserPassword) */ {
 public:
  inline UserPassword() : UserPassword(nullptr) {}
  virtual ~UserPassword();

  UserPassword(const UserPassword& from);
  UserPassword(UserPassword&& from) noexcept
    : UserPassword() {
    *this = ::std::move(from);
  }

  inline UserPassword& operator=(const UserPassword& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPassword& operator=(UserPassword&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserPassword& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserPassword* internal_default_instance() {
    return reinterpret_cast<const UserPassword*>(
               &_UserPassword_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(UserPassword& a, UserPassword& b) {
    a.Swap(&b);
  }
  inline void Swap(UserPassword* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserPassword* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserPassword* New() const final {
    return CreateMaybeMessage<UserPassword>(nullptr);
  }

  UserPassword* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserPassword>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserPassword& from);
  void MergeFrom(const UserPassword& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPassword* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.UserPassword";
  }
  protected:
  explicit UserPassword(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldPasswordFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string old_password = 1;
  void clear_old_password();
  const std::string& old_password() const;
  void set_old_password(const std::string& value);
  void set_old_password(std::string&& value);
  void set_old_password(const char* value);
  void set_old_password(const char* value, size_t size);
  std::string* mutable_old_password();
  std::string* release_old_password();
  void set_allocated_old_password(std::string* old_password);
  private:
  const std::string& _internal_old_password() const;
  void _internal_set_old_password(const std::string& value);
  std::string* _internal_mutable_old_password();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.UserPassword)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class UserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompanyNameFieldNumber = 1,
    kFirstNameFieldNumber = 2,
    kLastNameFieldNumber = 3,
  };
  // string company_name = 1;
  void clear_company_name();
  const std::string& company_name() const;
  void set_company_name(const std::string& value);
  void set_company_name(std::string&& value);
  void set_company_name(const char* value);
  void set_company_name(const char* value, size_t size);
  std::string* mutable_company_name();
  std::string* release_company_name();
  void set_allocated_company_name(std::string* company_name);
  private:
  const std::string& _internal_company_name() const;
  void _internal_set_company_name(const std::string& value);
  std::string* _internal_mutable_company_name();
  public:

  // string first_name = 2;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 3;
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Video PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Video) */ {
 public:
  inline Video() : Video(nullptr) {}
  virtual ~Video();

  Video(const Video& from);
  Video(Video&& from) noexcept
    : Video() {
    *this = ::std::move(from);
  }

  inline Video& operator=(const Video& from) {
    CopyFrom(from);
    return *this;
  }
  inline Video& operator=(Video&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Video& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Video* internal_default_instance() {
    return reinterpret_cast<const Video*>(
               &_Video_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(Video& a, Video& b) {
    a.Swap(&b);
  }
  inline void Swap(Video* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Video* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Video* New() const final {
    return CreateMaybeMessage<Video>(nullptr);
  }

  Video* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Video>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Video& from);
  void MergeFrom(const Video& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Video* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Video";
  }
  protected:
  explicit Video(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kBase64FieldNumber = 2,
    kThumbnailUrlFieldNumber = 5,
    kHostedFieldNumber = 6,
    kAllowDuplicateUrlFieldNumber = 4,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes base64 = 2;
  void clear_base64();
  const std::string& base64() const;
  void set_base64(const std::string& value);
  void set_base64(std::string&& value);
  void set_base64(const char* value);
  void set_base64(const void* value, size_t size);
  std::string* mutable_base64();
  std::string* release_base64();
  void set_allocated_base64(std::string* base64);
  private:
  const std::string& _internal_base64() const;
  void _internal_set_base64(const std::string& value);
  std::string* _internal_mutable_base64();
  public:

  // string thumbnail_url = 5;
  void clear_thumbnail_url();
  const std::string& thumbnail_url() const;
  void set_thumbnail_url(const std::string& value);
  void set_thumbnail_url(std::string&& value);
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const char* value, size_t size);
  std::string* mutable_thumbnail_url();
  std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(std::string* thumbnail_url);
  private:
  const std::string& _internal_thumbnail_url() const;
  void _internal_set_thumbnail_url(const std::string& value);
  std::string* _internal_mutable_thumbnail_url();
  public:

  // .clarifai.api.HostedURL hosted = 6;
  bool has_hosted() const;
  private:
  bool _internal_has_hosted() const;
  public:
  void clear_hosted();
  const ::clarifai::api::HostedURL& hosted() const;
  ::clarifai::api::HostedURL* release_hosted();
  ::clarifai::api::HostedURL* mutable_hosted();
  void set_allocated_hosted(::clarifai::api::HostedURL* hosted);
  private:
  const ::clarifai::api::HostedURL& _internal_hosted() const;
  ::clarifai::api::HostedURL* _internal_mutable_hosted();
  public:
  void unsafe_arena_set_allocated_hosted(
      ::clarifai::api::HostedURL* hosted);
  ::clarifai::api::HostedURL* unsafe_arena_release_hosted();

  // bool allow_duplicate_url = 4;
  void clear_allow_duplicate_url();
  bool allow_duplicate_url() const;
  void set_allow_duplicate_url(bool value);
  private:
  bool _internal_allow_duplicate_url() const;
  void _internal_set_allow_duplicate_url(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Video)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base64_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_url_;
  ::clarifai::api::HostedURL* hosted_;
  bool allow_duplicate_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Vocab PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Vocab) */ {
 public:
  inline Vocab() : Vocab(nullptr) {}
  virtual ~Vocab();

  Vocab(const Vocab& from);
  Vocab(Vocab&& from) noexcept
    : Vocab() {
    *this = ::std::move(from);
  }

  inline Vocab& operator=(const Vocab& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vocab& operator=(Vocab&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vocab& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vocab* internal_default_instance() {
    return reinterpret_cast<const Vocab*>(
               &_Vocab_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(Vocab& a, Vocab& b) {
    a.Swap(&b);
  }
  inline void Swap(Vocab* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vocab* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vocab* New() const final {
    return CreateMaybeMessage<Vocab>(nullptr);
  }

  Vocab* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vocab>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vocab& from);
  void MergeFrom(const Vocab& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vocab* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Vocab";
  }
  protected:
  explicit Vocab(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kAppIdFieldNumber = 4,
    kCreatedAtFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string app_id = 4;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // .google.protobuf.Timestamp created_at = 5;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // @@protoc_insertion_point(class_scope:clarifai.api.Vocab)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Worker PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Worker) */ {
 public:
  inline Worker() : Worker(nullptr) {}
  virtual ~Worker();

  Worker(const Worker& from);
  Worker(Worker&& from) noexcept
    : Worker() {
    *this = ::std::move(from);
  }

  inline Worker& operator=(const Worker& from) {
    CopyFrom(from);
    return *this;
  }
  inline Worker& operator=(Worker&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Worker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Worker* internal_default_instance() {
    return reinterpret_cast<const Worker*>(
               &_Worker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(Worker& a, Worker& b) {
    a.Swap(&b);
  }
  inline void Swap(Worker* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Worker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Worker* New() const final {
    return CreateMaybeMessage<Worker>(nullptr);
  }

  Worker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Worker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Worker& from);
  void MergeFrom(const Worker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Worker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Worker";
  }
  protected:
  explicit Worker(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kWorkerTypeFieldNumber = 2,
    kUserFieldNumber = 3,
    kModelFieldNumber = 4,
    kCreatedAtFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string worker_type = 2;
  void clear_worker_type();
  const std::string& worker_type() const;
  void set_worker_type(const std::string& value);
  void set_worker_type(std::string&& value);
  void set_worker_type(const char* value);
  void set_worker_type(const char* value, size_t size);
  std::string* mutable_worker_type();
  std::string* release_worker_type();
  void set_allocated_worker_type(std::string* worker_type);
  private:
  const std::string& _internal_worker_type() const;
  void _internal_set_worker_type(const std::string& value);
  std::string* _internal_mutable_worker_type();
  public:

  // .clarifai.api.User user = 3;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::clarifai::api::User& user() const;
  ::clarifai::api::User* release_user();
  ::clarifai::api::User* mutable_user();
  void set_allocated_user(::clarifai::api::User* user);
  private:
  const ::clarifai::api::User& _internal_user() const;
  ::clarifai::api::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::clarifai::api::User* user);
  ::clarifai::api::User* unsafe_arena_release_user();

  // .clarifai.api.Model model = 4;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::api::Model& model() const;
  ::clarifai::api::Model* release_model();
  ::clarifai::api::Model* mutable_model();
  void set_allocated_model(::clarifai::api::Model* model);
  private:
  const ::clarifai::api::Model& _internal_model() const;
  ::clarifai::api::Model* _internal_mutable_model();
  public:
  void unsafe_arena_set_allocated_model(
      ::clarifai::api::Model* model);
  ::clarifai::api::Model* unsafe_arena_release_model();

  // .google.protobuf.Timestamp created_at = 5;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // @@protoc_insertion_point(class_scope:clarifai.api.Worker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_type_;
  ::clarifai::api::User* user_;
  ::clarifai::api::Model* model_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class AnnotationSummary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.AnnotationSummary) */ {
 public:
  inline AnnotationSummary() : AnnotationSummary(nullptr) {}
  virtual ~AnnotationSummary();

  AnnotationSummary(const AnnotationSummary& from);
  AnnotationSummary(AnnotationSummary&& from) noexcept
    : AnnotationSummary() {
    *this = ::std::move(from);
  }

  inline AnnotationSummary& operator=(const AnnotationSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnotationSummary& operator=(AnnotationSummary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnnotationSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnnotationSummary* internal_default_instance() {
    return reinterpret_cast<const AnnotationSummary*>(
               &_AnnotationSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(AnnotationSummary& a, AnnotationSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnotationSummary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnnotationSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnnotationSummary* New() const final {
    return CreateMaybeMessage<AnnotationSummary>(nullptr);
  }

  AnnotationSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnnotationSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnnotationSummary& from);
  void MergeFrom(const AnnotationSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotationSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.AnnotationSummary";
  }
  protected:
  explicit AnnotationSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastAnnotatedAtFieldNumber = 3,
    kTotalAssignedFieldNumber = 1,
    kTotalAnnotatedFieldNumber = 2,
  };
  // .google.protobuf.Timestamp last_annotated_at = 3;
  bool has_last_annotated_at() const;
  private:
  bool _internal_has_last_annotated_at() const;
  public:
  void clear_last_annotated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_annotated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_last_annotated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_annotated_at();
  void set_allocated_last_annotated_at(PROTOBUF_NAMESPACE_ID::Timestamp* last_annotated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_annotated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_annotated_at();
  public:
  void unsafe_arena_set_allocated_last_annotated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* last_annotated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_annotated_at();

  // uint32 total_assigned = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_total_assigned();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_assigned() const;
  void set_total_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_assigned() const;
  void _internal_set_total_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_annotated = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_total_annotated();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_annotated() const;
  void set_total_annotated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_annotated() const;
  void _internal_set_total_annotated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.AnnotationSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_annotated_at_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_assigned_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_annotated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Workflow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Workflow) */ {
 public:
  inline Workflow() : Workflow(nullptr) {}
  virtual ~Workflow();

  Workflow(const Workflow& from);
  Workflow(Workflow&& from) noexcept
    : Workflow() {
    *this = ::std::move(from);
  }

  inline Workflow& operator=(const Workflow& from) {
    CopyFrom(from);
    return *this;
  }
  inline Workflow& operator=(Workflow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Workflow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Workflow* internal_default_instance() {
    return reinterpret_cast<const Workflow*>(
               &_Workflow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(Workflow& a, Workflow& b) {
    a.Swap(&b);
  }
  inline void Swap(Workflow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Workflow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Workflow* New() const final {
    return CreateMaybeMessage<Workflow>(nullptr);
  }

  Workflow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Workflow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Workflow& from);
  void MergeFrom(const Workflow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Workflow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Workflow";
  }
  protected:
  explicit Workflow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 4,
    kIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kCreatedAtFieldNumber = 3,
  };
  // repeated .clarifai.api.WorkflowNode nodes = 4;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::clarifai::api::WorkflowNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowNode >*
      mutable_nodes();
  private:
  const ::clarifai::api::WorkflowNode& _internal_nodes(int index) const;
  ::clarifai::api::WorkflowNode* _internal_add_nodes();
  public:
  const ::clarifai::api::WorkflowNode& nodes(int index) const;
  ::clarifai::api::WorkflowNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowNode >&
      nodes() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string app_id = 2;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // @@protoc_insertion_point(class_scope:clarifai.api.Workflow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowNode > nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class WorkflowNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.WorkflowNode) */ {
 public:
  inline WorkflowNode() : WorkflowNode(nullptr) {}
  virtual ~WorkflowNode();

  WorkflowNode(const WorkflowNode& from);
  WorkflowNode(WorkflowNode&& from) noexcept
    : WorkflowNode() {
    *this = ::std::move(from);
  }

  inline WorkflowNode& operator=(const WorkflowNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowNode& operator=(WorkflowNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowNode* internal_default_instance() {
    return reinterpret_cast<const WorkflowNode*>(
               &_WorkflowNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(WorkflowNode& a, WorkflowNode& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowNode* New() const final {
    return CreateMaybeMessage<WorkflowNode>(nullptr);
  }

  WorkflowNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowNode& from);
  void MergeFrom(const WorkflowNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.WorkflowNode";
  }
  protected:
  explicit WorkflowNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeInputsFieldNumber = 3,
    kIdFieldNumber = 1,
    kModelFieldNumber = 2,
  };
  // repeated .clarifai.api.NodeInput node_inputs = 3;
  int node_inputs_size() const;
  private:
  int _internal_node_inputs_size() const;
  public:
  void clear_node_inputs();
  ::clarifai::api::NodeInput* mutable_node_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::NodeInput >*
      mutable_node_inputs();
  private:
  const ::clarifai::api::NodeInput& _internal_node_inputs(int index) const;
  ::clarifai::api::NodeInput* _internal_add_node_inputs();
  public:
  const ::clarifai::api::NodeInput& node_inputs(int index) const;
  ::clarifai::api::NodeInput* add_node_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::NodeInput >&
      node_inputs() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.Model model = 2;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::api::Model& model() const;
  ::clarifai::api::Model* release_model();
  ::clarifai::api::Model* mutable_model();
  void set_allocated_model(::clarifai::api::Model* model);
  private:
  const ::clarifai::api::Model& _internal_model() const;
  ::clarifai::api::Model* _internal_mutable_model();
  public:
  void unsafe_arena_set_allocated_model(
      ::clarifai::api::Model* model);
  ::clarifai::api::Model* unsafe_arena_release_model();

  // @@protoc_insertion_point(class_scope:clarifai.api.WorkflowNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::NodeInput > node_inputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::Model* model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class NodeInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.NodeInput) */ {
 public:
  inline NodeInput() : NodeInput(nullptr) {}
  virtual ~NodeInput();

  NodeInput(const NodeInput& from);
  NodeInput(NodeInput&& from) noexcept
    : NodeInput() {
    *this = ::std::move(from);
  }

  inline NodeInput& operator=(const NodeInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInput& operator=(NodeInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInput* internal_default_instance() {
    return reinterpret_cast<const NodeInput*>(
               &_NodeInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(NodeInput& a, NodeInput& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInput* New() const final {
    return CreateMaybeMessage<NodeInput>(nullptr);
  }

  NodeInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInput& from);
  void MergeFrom(const NodeInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.NodeInput";
  }
  protected:
  explicit NodeInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
  };
  // string node_id = 1;
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.NodeInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class WorkflowResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.WorkflowResult) */ {
 public:
  inline WorkflowResult() : WorkflowResult(nullptr) {}
  virtual ~WorkflowResult();

  WorkflowResult(const WorkflowResult& from);
  WorkflowResult(WorkflowResult&& from) noexcept
    : WorkflowResult() {
    *this = ::std::move(from);
  }

  inline WorkflowResult& operator=(const WorkflowResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowResult& operator=(WorkflowResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowResult* internal_default_instance() {
    return reinterpret_cast<const WorkflowResult*>(
               &_WorkflowResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(WorkflowResult& a, WorkflowResult& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowResult* New() const final {
    return CreateMaybeMessage<WorkflowResult>(nullptr);
  }

  WorkflowResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowResult& from);
  void MergeFrom(const WorkflowResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.WorkflowResult";
  }
  protected:
  explicit WorkflowResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputsFieldNumber = 6,
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kCreatedAtFieldNumber = 3,
    kModelFieldNumber = 4,
    kInputFieldNumber = 5,
  };
  // repeated .clarifai.api.Output outputs = 6;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::clarifai::api::Output* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >*
      mutable_outputs();
  private:
  const ::clarifai::api::Output& _internal_outputs(int index) const;
  ::clarifai::api::Output* _internal_add_outputs();
  public:
  const ::clarifai::api::Output& outputs(int index) const;
  ::clarifai::api::Output* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >&
      outputs() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.status.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .clarifai.api.Model model = 4;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::api::Model& model() const;
  ::clarifai::api::Model* release_model();
  ::clarifai::api::Model* mutable_model();
  void set_allocated_model(::clarifai::api::Model* model);
  private:
  const ::clarifai::api::Model& _internal_model() const;
  ::clarifai::api::Model* _internal_mutable_model();
  public:
  void unsafe_arena_set_allocated_model(
      ::clarifai::api::Model* model);
  ::clarifai::api::Model* unsafe_arena_release_model();

  // .clarifai.api.Input input = 5;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::clarifai::api::Input& input() const;
  ::clarifai::api::Input* release_input();
  ::clarifai::api::Input* mutable_input();
  void set_allocated_input(::clarifai::api::Input* input);
  private:
  const ::clarifai::api::Input& _internal_input() const;
  ::clarifai::api::Input* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::clarifai::api::Input* input);
  ::clarifai::api::Input* unsafe_arena_release_input();

  // @@protoc_insertion_point(class_scope:clarifai.api.WorkflowResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::status::Status* status_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::clarifai::api::Model* model_;
  ::clarifai::api::Input* input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class AppDuplication PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.AppDuplication) */ {
 public:
  inline AppDuplication() : AppDuplication(nullptr) {}
  virtual ~AppDuplication();

  AppDuplication(const AppDuplication& from);
  AppDuplication(AppDuplication&& from) noexcept
    : AppDuplication() {
    *this = ::std::move(from);
  }

  inline AppDuplication& operator=(const AppDuplication& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppDuplication& operator=(AppDuplication&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppDuplication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppDuplication* internal_default_instance() {
    return reinterpret_cast<const AppDuplication*>(
               &_AppDuplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(AppDuplication& a, AppDuplication& b) {
    a.Swap(&b);
  }
  inline void Swap(AppDuplication* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppDuplication* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppDuplication* New() const final {
    return CreateMaybeMessage<AppDuplication>(nullptr);
  }

  AppDuplication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppDuplication>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppDuplication& from);
  void MergeFrom(const AppDuplication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppDuplication* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.AppDuplication";
  }
  protected:
  explicit AppDuplication(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNewAppIdFieldNumber = 2,
    kNewAppNameFieldNumber = 3,
    kStatusFieldNumber = 4,
    kCreatedAtFieldNumber = 5,
    kLastModifiedAtFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string new_app_id = 2;
  void clear_new_app_id();
  const std::string& new_app_id() const;
  void set_new_app_id(const std::string& value);
  void set_new_app_id(std::string&& value);
  void set_new_app_id(const char* value);
  void set_new_app_id(const char* value, size_t size);
  std::string* mutable_new_app_id();
  std::string* release_new_app_id();
  void set_allocated_new_app_id(std::string* new_app_id);
  private:
  const std::string& _internal_new_app_id() const;
  void _internal_set_new_app_id(const std::string& value);
  std::string* _internal_mutable_new_app_id();
  public:

  // string new_app_name = 3;
  void clear_new_app_name();
  const std::string& new_app_name() const;
  void set_new_app_name(const std::string& value);
  void set_new_app_name(std::string&& value);
  void set_new_app_name(const char* value);
  void set_new_app_name(const char* value, size_t size);
  std::string* mutable_new_app_name();
  std::string* release_new_app_name();
  void set_allocated_new_app_name(std::string* new_app_name);
  private:
  const std::string& _internal_new_app_name() const;
  void _internal_set_new_app_name(const std::string& value);
  std::string* _internal_mutable_new_app_name();
  public:

  // .clarifai.api.status.Status status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .google.protobuf.Timestamp created_at = 5;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp last_modified_at = 6;
  bool has_last_modified_at() const;
  private:
  bool _internal_has_last_modified_at() const;
  public:
  void clear_last_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_last_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_modified_at();
  void set_allocated_last_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* last_modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_modified_at();
  public:
  void unsafe_arena_set_allocated_last_modified_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* last_modified_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_modified_at();

  // @@protoc_insertion_point(class_scope:clarifai.api.AppDuplication)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_app_name_;
  ::clarifai::api::status::Status* status_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_modified_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Collector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Collector) */ {
 public:
  inline Collector() : Collector(nullptr) {}
  virtual ~Collector();

  Collector(const Collector& from);
  Collector(Collector&& from) noexcept
    : Collector() {
    *this = ::std::move(from);
  }

  inline Collector& operator=(const Collector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collector& operator=(Collector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Collector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Collector* internal_default_instance() {
    return reinterpret_cast<const Collector*>(
               &_Collector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(Collector& a, Collector& b) {
    a.Swap(&b);
  }
  inline void Swap(Collector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Collector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collector* New() const final {
    return CreateMaybeMessage<Collector>(nullptr);
  }

  Collector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Collector& from);
  void MergeFrom(const Collector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Collector";
  }
  protected:
  explicit Collector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kPreQueueWorkflowIdFieldNumber = 4,
    kPostQueueWorkflowIdFieldNumber = 5,
    kCreatedAtFieldNumber = 3,
    kCollectorSourceFieldNumber = 6,
    kStatusFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string pre_queue_workflow_id = 4;
  void clear_pre_queue_workflow_id();
  const std::string& pre_queue_workflow_id() const;
  void set_pre_queue_workflow_id(const std::string& value);
  void set_pre_queue_workflow_id(std::string&& value);
  void set_pre_queue_workflow_id(const char* value);
  void set_pre_queue_workflow_id(const char* value, size_t size);
  std::string* mutable_pre_queue_workflow_id();
  std::string* release_pre_queue_workflow_id();
  void set_allocated_pre_queue_workflow_id(std::string* pre_queue_workflow_id);
  private:
  const std::string& _internal_pre_queue_workflow_id() const;
  void _internal_set_pre_queue_workflow_id(const std::string& value);
  std::string* _internal_mutable_pre_queue_workflow_id();
  public:

  // string post_queue_workflow_id = 5;
  void clear_post_queue_workflow_id();
  const std::string& post_queue_workflow_id() const;
  void set_post_queue_workflow_id(const std::string& value);
  void set_post_queue_workflow_id(std::string&& value);
  void set_post_queue_workflow_id(const char* value);
  void set_post_queue_workflow_id(const char* value, size_t size);
  std::string* mutable_post_queue_workflow_id();
  std::string* release_post_queue_workflow_id();
  void set_allocated_post_queue_workflow_id(std::string* post_queue_workflow_id);
  private:
  const std::string& _internal_post_queue_workflow_id() const;
  void _internal_set_post_queue_workflow_id(const std::string& value);
  std::string* _internal_mutable_post_queue_workflow_id();
  public:

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .clarifai.api.CollectorSource collector_source = 6;
  bool has_collector_source() const;
  private:
  bool _internal_has_collector_source() const;
  public:
  void clear_collector_source();
  const ::clarifai::api::CollectorSource& collector_source() const;
  ::clarifai::api::CollectorSource* release_collector_source();
  ::clarifai::api::CollectorSource* mutable_collector_source();
  void set_allocated_collector_source(::clarifai::api::CollectorSource* collector_source);
  private:
  const ::clarifai::api::CollectorSource& _internal_collector_source() const;
  ::clarifai::api::CollectorSource* _internal_mutable_collector_source();
  public:
  void unsafe_arena_set_allocated_collector_source(
      ::clarifai::api::CollectorSource* collector_source);
  ::clarifai::api::CollectorSource* unsafe_arena_release_collector_source();

  // .clarifai.api.status.Status status = 7;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.Collector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre_queue_workflow_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_queue_workflow_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::clarifai::api::CollectorSource* collector_source_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class CollectorSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.CollectorSource) */ {
 public:
  inline CollectorSource() : CollectorSource(nullptr) {}
  virtual ~CollectorSource();

  CollectorSource(const CollectorSource& from);
  CollectorSource(CollectorSource&& from) noexcept
    : CollectorSource() {
    *this = ::std::move(from);
  }

  inline CollectorSource& operator=(const CollectorSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectorSource& operator=(CollectorSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectorSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollectorSource* internal_default_instance() {
    return reinterpret_cast<const CollectorSource*>(
               &_CollectorSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(CollectorSource& a, CollectorSource& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectorSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectorSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectorSource* New() const final {
    return CreateMaybeMessage<CollectorSource>(nullptr);
  }

  CollectorSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectorSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectorSource& from);
  void MergeFrom(const CollectorSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectorSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.CollectorSource";
  }
  protected:
  explicit CollectorSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiPostModelOutputsCollectorSourceFieldNumber = 2,
  };
  // .clarifai.api.APIPostModelOutputsCollectorSource api_post_model_outputs_collector_source = 2;
  bool has_api_post_model_outputs_collector_source() const;
  private:
  bool _internal_has_api_post_model_outputs_collector_source() const;
  public:
  void clear_api_post_model_outputs_collector_source();
  const ::clarifai::api::APIPostModelOutputsCollectorSource& api_post_model_outputs_collector_source() const;
  ::clarifai::api::APIPostModelOutputsCollectorSource* release_api_post_model_outputs_collector_source();
  ::clarifai::api::APIPostModelOutputsCollectorSource* mutable_api_post_model_outputs_collector_source();
  void set_allocated_api_post_model_outputs_collector_source(::clarifai::api::APIPostModelOutputsCollectorSource* api_post_model_outputs_collector_source);
  private:
  const ::clarifai::api::APIPostModelOutputsCollectorSource& _internal_api_post_model_outputs_collector_source() const;
  ::clarifai::api::APIPostModelOutputsCollectorSource* _internal_mutable_api_post_model_outputs_collector_source();
  public:
  void unsafe_arena_set_allocated_api_post_model_outputs_collector_source(
      ::clarifai::api::APIPostModelOutputsCollectorSource* api_post_model_outputs_collector_source);
  ::clarifai::api::APIPostModelOutputsCollectorSource* unsafe_arena_release_api_post_model_outputs_collector_source();

  // @@protoc_insertion_point(class_scope:clarifai.api.CollectorSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::APIPostModelOutputsCollectorSource* api_post_model_outputs_collector_source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class APIPostModelOutputsCollectorSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.APIPostModelOutputsCollectorSource) */ {
 public:
  inline APIPostModelOutputsCollectorSource() : APIPostModelOutputsCollectorSource(nullptr) {}
  virtual ~APIPostModelOutputsCollectorSource();

  APIPostModelOutputsCollectorSource(const APIPostModelOutputsCollectorSource& from);
  APIPostModelOutputsCollectorSource(APIPostModelOutputsCollectorSource&& from) noexcept
    : APIPostModelOutputsCollectorSource() {
    *this = ::std::move(from);
  }

  inline APIPostModelOutputsCollectorSource& operator=(const APIPostModelOutputsCollectorSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline APIPostModelOutputsCollectorSource& operator=(APIPostModelOutputsCollectorSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const APIPostModelOutputsCollectorSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const APIPostModelOutputsCollectorSource* internal_default_instance() {
    return reinterpret_cast<const APIPostModelOutputsCollectorSource*>(
               &_APIPostModelOutputsCollectorSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(APIPostModelOutputsCollectorSource& a, APIPostModelOutputsCollectorSource& b) {
    a.Swap(&b);
  }
  inline void Swap(APIPostModelOutputsCollectorSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(APIPostModelOutputsCollectorSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline APIPostModelOutputsCollectorSource* New() const final {
    return CreateMaybeMessage<APIPostModelOutputsCollectorSource>(nullptr);
  }

  APIPostModelOutputsCollectorSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<APIPostModelOutputsCollectorSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const APIPostModelOutputsCollectorSource& from);
  void MergeFrom(const APIPostModelOutputsCollectorSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APIPostModelOutputsCollectorSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.APIPostModelOutputsCollectorSource";
  }
  protected:
  explicit APIPostModelOutputsCollectorSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelUserIdFieldNumber = 1,
    kModelAppIdFieldNumber = 2,
    kModelIdFieldNumber = 3,
    kModelVersionIdFieldNumber = 4,
    kPostInputsKeyIdFieldNumber = 5,
    kCallerUserIdFieldNumber = 6,
  };
  // string model_user_id = 1;
  void clear_model_user_id();
  const std::string& model_user_id() const;
  void set_model_user_id(const std::string& value);
  void set_model_user_id(std::string&& value);
  void set_model_user_id(const char* value);
  void set_model_user_id(const char* value, size_t size);
  std::string* mutable_model_user_id();
  std::string* release_model_user_id();
  void set_allocated_model_user_id(std::string* model_user_id);
  private:
  const std::string& _internal_model_user_id() const;
  void _internal_set_model_user_id(const std::string& value);
  std::string* _internal_mutable_model_user_id();
  public:

  // string model_app_id = 2;
  void clear_model_app_id();
  const std::string& model_app_id() const;
  void set_model_app_id(const std::string& value);
  void set_model_app_id(std::string&& value);
  void set_model_app_id(const char* value);
  void set_model_app_id(const char* value, size_t size);
  std::string* mutable_model_app_id();
  std::string* release_model_app_id();
  void set_allocated_model_app_id(std::string* model_app_id);
  private:
  const std::string& _internal_model_app_id() const;
  void _internal_set_model_app_id(const std::string& value);
  std::string* _internal_mutable_model_app_id();
  public:

  // string model_id = 3;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string model_version_id = 4;
  void clear_model_version_id();
  const std::string& model_version_id() const;
  void set_model_version_id(const std::string& value);
  void set_model_version_id(std::string&& value);
  void set_model_version_id(const char* value);
  void set_model_version_id(const char* value, size_t size);
  std::string* mutable_model_version_id();
  std::string* release_model_version_id();
  void set_allocated_model_version_id(std::string* model_version_id);
  private:
  const std::string& _internal_model_version_id() const;
  void _internal_set_model_version_id(const std::string& value);
  std::string* _internal_mutable_model_version_id();
  public:

  // string post_inputs_key_id = 5;
  void clear_post_inputs_key_id();
  const std::string& post_inputs_key_id() const;
  void set_post_inputs_key_id(const std::string& value);
  void set_post_inputs_key_id(std::string&& value);
  void set_post_inputs_key_id(const char* value);
  void set_post_inputs_key_id(const char* value, size_t size);
  std::string* mutable_post_inputs_key_id();
  std::string* release_post_inputs_key_id();
  void set_allocated_post_inputs_key_id(std::string* post_inputs_key_id);
  private:
  const std::string& _internal_post_inputs_key_id() const;
  void _internal_set_post_inputs_key_id(const std::string& value);
  std::string* _internal_mutable_post_inputs_key_id();
  public:

  // string caller_user_id = 6 [(.clarifai.auth.util.cl_private_field) = true];
  void clear_caller_user_id();
  const std::string& caller_user_id() const;
  void set_caller_user_id(const std::string& value);
  void set_caller_user_id(std::string&& value);
  void set_caller_user_id(const char* value);
  void set_caller_user_id(const char* value, size_t size);
  std::string* mutable_caller_user_id();
  std::string* release_caller_user_id();
  void set_allocated_caller_user_id(std::string* caller_user_id);
  private:
  const std::string& _internal_caller_user_id() const;
  void _internal_set_caller_user_id(const std::string& value);
  std::string* _internal_mutable_caller_user_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.APIPostModelOutputsCollectorSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_inputs_key_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caller_user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Annotation

// string id = 1;
inline void Annotation::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Annotation::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.id)
  return _internal_id();
}
inline void Annotation::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.id)
}
inline std::string* Annotation::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.id)
  return _internal_mutable_id();
}
inline const std::string& Annotation::_internal_id() const {
  return id_.Get();
}
inline void Annotation::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Annotation::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Annotation.id)
}
inline void Annotation::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Annotation.id)
}
inline void Annotation::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Annotation.id)
}
inline std::string* Annotation::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Annotation::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Annotation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.id)
}

// string input_id = 2;
inline void Annotation::clear_input_id() {
  input_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Annotation::input_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.input_id)
  return _internal_input_id();
}
inline void Annotation::set_input_id(const std::string& value) {
  _internal_set_input_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.input_id)
}
inline std::string* Annotation::mutable_input_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.input_id)
  return _internal_mutable_input_id();
}
inline const std::string& Annotation::_internal_input_id() const {
  return input_id_.Get();
}
inline void Annotation::_internal_set_input_id(const std::string& value) {
  
  input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Annotation::set_input_id(std::string&& value) {
  
  input_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Annotation.input_id)
}
inline void Annotation::set_input_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Annotation.input_id)
}
inline void Annotation::set_input_id(const char* value,
    size_t size) {
  
  input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Annotation.input_id)
}
inline std::string* Annotation::_internal_mutable_input_id() {
  
  return input_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Annotation::release_input_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.input_id)
  return input_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Annotation::set_allocated_input_id(std::string* input_id) {
  if (input_id != nullptr) {
    
  } else {
    
  }
  input_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.input_id)
}

// .clarifai.api.Data data = 3;
inline bool Annotation::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Annotation::has_data() const {
  return _internal_has_data();
}
inline void Annotation::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::clarifai::api::Data& Annotation::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& Annotation::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.data)
  return _internal_data();
}
inline void Annotation::unsafe_arena_set_allocated_data(
    ::clarifai::api::Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Annotation.data)
}
inline ::clarifai::api::Data* Annotation::release_data() {
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Data* Annotation::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* Annotation::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* Annotation::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.data)
  return _internal_mutable_data();
}
inline void Annotation::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.data)
}

// .google.protobuf.Struct annotation_info = 13;
inline bool Annotation::_internal_has_annotation_info() const {
  return this != internal_default_instance() && annotation_info_ != nullptr;
}
inline bool Annotation::has_annotation_info() const {
  return _internal_has_annotation_info();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Annotation::_internal_annotation_info() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = annotation_info_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Annotation::annotation_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.annotation_info)
  return _internal_annotation_info();
}
inline void Annotation::unsafe_arena_set_allocated_annotation_info(
    PROTOBUF_NAMESPACE_ID::Struct* annotation_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_info_);
  }
  annotation_info_ = annotation_info;
  if (annotation_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Annotation.annotation_info)
}
inline PROTOBUF_NAMESPACE_ID::Struct* Annotation::release_annotation_info() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = annotation_info_;
  annotation_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Annotation::unsafe_arena_release_annotation_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.annotation_info)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = annotation_info_;
  annotation_info_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Annotation::_internal_mutable_annotation_info() {
  
  if (annotation_info_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    annotation_info_ = p;
  }
  return annotation_info_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Annotation::mutable_annotation_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.annotation_info)
  return _internal_mutable_annotation_info();
}
inline void Annotation::set_allocated_annotation_info(PROTOBUF_NAMESPACE_ID::Struct* annotation_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_info_);
  }
  if (annotation_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_info)->GetArena();
    if (message_arena != submessage_arena) {
      annotation_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation_info, submessage_arena);
    }
    
  } else {
    
  }
  annotation_info_ = annotation_info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.annotation_info)
}

// string worker_id = 4;
inline void Annotation::clear_worker_id() {
  worker_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Annotation::worker_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.worker_id)
  return _internal_worker_id();
}
inline void Annotation::set_worker_id(const std::string& value) {
  _internal_set_worker_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.worker_id)
}
inline std::string* Annotation::mutable_worker_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.worker_id)
  return _internal_mutable_worker_id();
}
inline const std::string& Annotation::_internal_worker_id() const {
  return worker_id_.Get();
}
inline void Annotation::_internal_set_worker_id(const std::string& value) {
  
  worker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Annotation::set_worker_id(std::string&& value) {
  
  worker_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Annotation.worker_id)
}
inline void Annotation::set_worker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Annotation.worker_id)
}
inline void Annotation::set_worker_id(const char* value,
    size_t size) {
  
  worker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Annotation.worker_id)
}
inline std::string* Annotation::_internal_mutable_worker_id() {
  
  return worker_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Annotation::release_worker_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.worker_id)
  return worker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Annotation::set_allocated_worker_id(std::string* worker_id) {
  if (worker_id != nullptr) {
    
  } else {
    
  }
  worker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.worker_id)
}

// string embed_version_id = 5 [deprecated = true];
inline void Annotation::clear_embed_version_id() {
  embed_version_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Annotation::embed_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.embed_version_id)
  return _internal_embed_version_id();
}
inline void Annotation::set_embed_version_id(const std::string& value) {
  _internal_set_embed_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.embed_version_id)
}
inline std::string* Annotation::mutable_embed_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.embed_version_id)
  return _internal_mutable_embed_version_id();
}
inline const std::string& Annotation::_internal_embed_version_id() const {
  return embed_version_id_.Get();
}
inline void Annotation::_internal_set_embed_version_id(const std::string& value) {
  
  embed_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Annotation::set_embed_version_id(std::string&& value) {
  
  embed_version_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Annotation.embed_version_id)
}
inline void Annotation::set_embed_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  embed_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Annotation.embed_version_id)
}
inline void Annotation::set_embed_version_id(const char* value,
    size_t size) {
  
  embed_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Annotation.embed_version_id)
}
inline std::string* Annotation::_internal_mutable_embed_version_id() {
  
  return embed_version_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Annotation::release_embed_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.embed_version_id)
  return embed_version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Annotation::set_allocated_embed_version_id(std::string* embed_version_id) {
  if (embed_version_id != nullptr) {
    
  } else {
    
  }
  embed_version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), embed_version_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.embed_version_id)
}

// string embed_model_version_id = 14;
inline void Annotation::clear_embed_model_version_id() {
  embed_model_version_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Annotation::embed_model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.embed_model_version_id)
  return _internal_embed_model_version_id();
}
inline void Annotation::set_embed_model_version_id(const std::string& value) {
  _internal_set_embed_model_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.embed_model_version_id)
}
inline std::string* Annotation::mutable_embed_model_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.embed_model_version_id)
  return _internal_mutable_embed_model_version_id();
}
inline const std::string& Annotation::_internal_embed_model_version_id() const {
  return embed_model_version_id_.Get();
}
inline void Annotation::_internal_set_embed_model_version_id(const std::string& value) {
  
  embed_model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Annotation::set_embed_model_version_id(std::string&& value) {
  
  embed_model_version_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Annotation.embed_model_version_id)
}
inline void Annotation::set_embed_model_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  embed_model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Annotation.embed_model_version_id)
}
inline void Annotation::set_embed_model_version_id(const char* value,
    size_t size) {
  
  embed_model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Annotation.embed_model_version_id)
}
inline std::string* Annotation::_internal_mutable_embed_model_version_id() {
  
  return embed_model_version_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Annotation::release_embed_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.embed_model_version_id)
  return embed_model_version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Annotation::set_allocated_embed_model_version_id(std::string* embed_model_version_id) {
  if (embed_model_version_id != nullptr) {
    
  } else {
    
  }
  embed_model_version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), embed_model_version_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.embed_model_version_id)
}

// string parent_annotation_id = 6;
inline void Annotation::clear_parent_annotation_id() {
  parent_annotation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Annotation::parent_annotation_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.parent_annotation_id)
  return _internal_parent_annotation_id();
}
inline void Annotation::set_parent_annotation_id(const std::string& value) {
  _internal_set_parent_annotation_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.parent_annotation_id)
}
inline std::string* Annotation::mutable_parent_annotation_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.parent_annotation_id)
  return _internal_mutable_parent_annotation_id();
}
inline const std::string& Annotation::_internal_parent_annotation_id() const {
  return parent_annotation_id_.Get();
}
inline void Annotation::_internal_set_parent_annotation_id(const std::string& value) {
  
  parent_annotation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Annotation::set_parent_annotation_id(std::string&& value) {
  
  parent_annotation_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Annotation.parent_annotation_id)
}
inline void Annotation::set_parent_annotation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_annotation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Annotation.parent_annotation_id)
}
inline void Annotation::set_parent_annotation_id(const char* value,
    size_t size) {
  
  parent_annotation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Annotation.parent_annotation_id)
}
inline std::string* Annotation::_internal_mutable_parent_annotation_id() {
  
  return parent_annotation_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Annotation::release_parent_annotation_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.parent_annotation_id)
  return parent_annotation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Annotation::set_allocated_parent_annotation_id(std::string* parent_annotation_id) {
  if (parent_annotation_id != nullptr) {
    
  } else {
    
  }
  parent_annotation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_annotation_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.parent_annotation_id)
}

// .clarifai.api.status.Status status = 7;
inline bool Annotation::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Annotation::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& Annotation::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& Annotation::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.status)
  return _internal_status();
}
inline void Annotation::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Annotation.status)
}
inline ::clarifai::api::status::Status* Annotation::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::status::Status* Annotation::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* Annotation::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* Annotation::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.status)
  return _internal_mutable_status();
}
inline void Annotation::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.status)
}

// .google.protobuf.Timestamp created_at = 8;
inline bool Annotation::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Annotation::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Annotation::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Annotation::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.created_at)
  return _internal_created_at();
}
inline void Annotation::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Annotation.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Annotation::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Annotation::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Annotation::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Annotation::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.created_at)
  return _internal_mutable_created_at();
}
inline void Annotation::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.created_at)
}

// .google.protobuf.Timestamp modified_at = 9;
inline bool Annotation::_internal_has_modified_at() const {
  return this != internal_default_instance() && modified_at_ != nullptr;
}
inline bool Annotation::has_modified_at() const {
  return _internal_has_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Annotation::_internal_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Annotation::modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.modified_at)
  return _internal_modified_at();
}
inline void Annotation::unsafe_arena_set_allocated_modified_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  modified_at_ = modified_at;
  if (modified_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Annotation.modified_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Annotation::release_modified_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Annotation::unsafe_arena_release_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Annotation::_internal_mutable_modified_at() {
  
  if (modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    modified_at_ = p;
  }
  return modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Annotation::mutable_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.modified_at)
  return _internal_mutable_modified_at();
}
inline void Annotation::set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  if (modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_at, submessage_arena);
    }
    
  } else {
    
  }
  modified_at_ = modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.modified_at)
}

// bool trusted = 10;
inline void Annotation::clear_trusted() {
  trusted_ = false;
}
inline bool Annotation::_internal_trusted() const {
  return trusted_;
}
inline bool Annotation::trusted() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.trusted)
  return _internal_trusted();
}
inline void Annotation::_internal_set_trusted(bool value) {
  
  trusted_ = value;
}
inline void Annotation::set_trusted(bool value) {
  _internal_set_trusted(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.trusted)
}

// bool default = 12;
inline void Annotation::clear_default_() {
  default__ = false;
}
inline bool Annotation::_internal_default_() const {
  return default__;
}
inline bool Annotation::default_() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.default)
  return _internal_default_();
}
inline void Annotation::_internal_set_default_(bool value) {
  
  default__ = value;
}
inline void Annotation::set_default_(bool value) {
  _internal_set_default_(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.default)
}

// -------------------------------------------------------------------

// App

// string id = 1;
inline void App::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& App::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.id)
  return _internal_id();
}
inline void App::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.App.id)
}
inline std::string* App::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.id)
  return _internal_mutable_id();
}
inline const std::string& App::_internal_id() const {
  return id_.Get();
}
inline void App::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void App::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.App.id)
}
inline void App::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.App.id)
}
inline void App::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.App.id)
}
inline std::string* App::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* App::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void App::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.id)
}

// string name = 2;
inline void App::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& App::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.name)
  return _internal_name();
}
inline void App::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.App.name)
}
inline std::string* App::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.name)
  return _internal_mutable_name();
}
inline const std::string& App::_internal_name() const {
  return name_.Get();
}
inline void App::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void App::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.App.name)
}
inline void App::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.App.name)
}
inline void App::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.App.name)
}
inline std::string* App::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* App::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void App::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.name)
}

// string default_language = 3;
inline void App::clear_default_language() {
  default_language_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& App::default_language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.default_language)
  return _internal_default_language();
}
inline void App::set_default_language(const std::string& value) {
  _internal_set_default_language(value);
  // @@protoc_insertion_point(field_set:clarifai.api.App.default_language)
}
inline std::string* App::mutable_default_language() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.default_language)
  return _internal_mutable_default_language();
}
inline const std::string& App::_internal_default_language() const {
  return default_language_.Get();
}
inline void App::_internal_set_default_language(const std::string& value) {
  
  default_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void App::set_default_language(std::string&& value) {
  
  default_language_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.App.default_language)
}
inline void App::set_default_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.App.default_language)
}
inline void App::set_default_language(const char* value,
    size_t size) {
  
  default_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.App.default_language)
}
inline std::string* App::_internal_mutable_default_language() {
  
  return default_language_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* App::release_default_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.default_language)
  return default_language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void App::set_allocated_default_language(std::string* default_language) {
  if (default_language != nullptr) {
    
  } else {
    
  }
  default_language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.default_language)
}

// string default_workflow_id = 4;
inline void App::clear_default_workflow_id() {
  default_workflow_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& App::default_workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.default_workflow_id)
  return _internal_default_workflow_id();
}
inline void App::set_default_workflow_id(const std::string& value) {
  _internal_set_default_workflow_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.App.default_workflow_id)
}
inline std::string* App::mutable_default_workflow_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.default_workflow_id)
  return _internal_mutable_default_workflow_id();
}
inline const std::string& App::_internal_default_workflow_id() const {
  return default_workflow_id_.Get();
}
inline void App::_internal_set_default_workflow_id(const std::string& value) {
  
  default_workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void App::set_default_workflow_id(std::string&& value) {
  
  default_workflow_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.App.default_workflow_id)
}
inline void App::set_default_workflow_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.App.default_workflow_id)
}
inline void App::set_default_workflow_id(const char* value,
    size_t size) {
  
  default_workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.App.default_workflow_id)
}
inline std::string* App::_internal_mutable_default_workflow_id() {
  
  return default_workflow_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* App::release_default_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.default_workflow_id)
  return default_workflow_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void App::set_allocated_default_workflow_id(std::string* default_workflow_id) {
  if (default_workflow_id != nullptr) {
    
  } else {
    
  }
  default_workflow_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_workflow_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.default_workflow_id)
}

// string user_id = 5;
inline void App::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& App::user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.user_id)
  return _internal_user_id();
}
inline void App::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.App.user_id)
}
inline std::string* App::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& App::_internal_user_id() const {
  return user_id_.Get();
}
inline void App::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void App::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.App.user_id)
}
inline void App::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.App.user_id)
}
inline void App::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.App.user_id)
}
inline std::string* App::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* App::release_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void App::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.user_id)
}

// .google.protobuf.Timestamp created_at = 6;
inline bool App::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool App::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& App::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& App::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.created_at)
  return _internal_created_at();
}
inline void App::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.App.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* App::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* App::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* App::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* App::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.created_at)
  return _internal_mutable_created_at();
}
inline void App::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.created_at)
}

// uint32 legal_consent_status = 7;
inline void App::clear_legal_consent_status() {
  legal_consent_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 App::_internal_legal_consent_status() const {
  return legal_consent_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 App::legal_consent_status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.legal_consent_status)
  return _internal_legal_consent_status();
}
inline void App::_internal_set_legal_consent_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  legal_consent_status_ = value;
}
inline void App::set_legal_consent_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_legal_consent_status(value);
  // @@protoc_insertion_point(field_set:clarifai.api.App.legal_consent_status)
}

// .clarifai.api.Input last_input_added = 10;
inline bool App::_internal_has_last_input_added() const {
  return this != internal_default_instance() && last_input_added_ != nullptr;
}
inline bool App::has_last_input_added() const {
  return _internal_has_last_input_added();
}
inline void App::clear_last_input_added() {
  if (GetArena() == nullptr && last_input_added_ != nullptr) {
    delete last_input_added_;
  }
  last_input_added_ = nullptr;
}
inline const ::clarifai::api::Input& App::_internal_last_input_added() const {
  const ::clarifai::api::Input* p = last_input_added_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Input*>(
      &::clarifai::api::_Input_default_instance_);
}
inline const ::clarifai::api::Input& App::last_input_added() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.last_input_added)
  return _internal_last_input_added();
}
inline void App::unsafe_arena_set_allocated_last_input_added(
    ::clarifai::api::Input* last_input_added) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_input_added_);
  }
  last_input_added_ = last_input_added;
  if (last_input_added) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.App.last_input_added)
}
inline ::clarifai::api::Input* App::release_last_input_added() {
  
  ::clarifai::api::Input* temp = last_input_added_;
  last_input_added_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Input* App::unsafe_arena_release_last_input_added() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.last_input_added)
  
  ::clarifai::api::Input* temp = last_input_added_;
  last_input_added_ = nullptr;
  return temp;
}
inline ::clarifai::api::Input* App::_internal_mutable_last_input_added() {
  
  if (last_input_added_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Input>(GetArena());
    last_input_added_ = p;
  }
  return last_input_added_;
}
inline ::clarifai::api::Input* App::mutable_last_input_added() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.last_input_added)
  return _internal_mutable_last_input_added();
}
inline void App::set_allocated_last_input_added(::clarifai::api::Input* last_input_added) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete last_input_added_;
  }
  if (last_input_added) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(last_input_added);
    if (message_arena != submessage_arena) {
      last_input_added = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_input_added, submessage_arena);
    }
    
  } else {
    
  }
  last_input_added_ = last_input_added;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.last_input_added)
}

// .clarifai.api.InputCount input_count = 11;
inline bool App::_internal_has_input_count() const {
  return this != internal_default_instance() && input_count_ != nullptr;
}
inline bool App::has_input_count() const {
  return _internal_has_input_count();
}
inline void App::clear_input_count() {
  if (GetArena() == nullptr && input_count_ != nullptr) {
    delete input_count_;
  }
  input_count_ = nullptr;
}
inline const ::clarifai::api::InputCount& App::_internal_input_count() const {
  const ::clarifai::api::InputCount* p = input_count_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::InputCount*>(
      &::clarifai::api::_InputCount_default_instance_);
}
inline const ::clarifai::api::InputCount& App::input_count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.input_count)
  return _internal_input_count();
}
inline void App::unsafe_arena_set_allocated_input_count(
    ::clarifai::api::InputCount* input_count) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_count_);
  }
  input_count_ = input_count;
  if (input_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.App.input_count)
}
inline ::clarifai::api::InputCount* App::release_input_count() {
  
  ::clarifai::api::InputCount* temp = input_count_;
  input_count_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::InputCount* App::unsafe_arena_release_input_count() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.input_count)
  
  ::clarifai::api::InputCount* temp = input_count_;
  input_count_ = nullptr;
  return temp;
}
inline ::clarifai::api::InputCount* App::_internal_mutable_input_count() {
  
  if (input_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::InputCount>(GetArena());
    input_count_ = p;
  }
  return input_count_;
}
inline ::clarifai::api::InputCount* App::mutable_input_count() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.input_count)
  return _internal_mutable_input_count();
}
inline void App::set_allocated_input_count(::clarifai::api::InputCount* input_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_count_;
  }
  if (input_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input_count);
    if (message_arena != submessage_arena) {
      input_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_count, submessage_arena);
    }
    
  } else {
    
  }
  input_count_ = input_count;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.input_count)
}

// uint32 active_concept_count = 12 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void App::clear_active_concept_count() {
  active_concept_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 App::_internal_active_concept_count() const {
  return active_concept_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 App::active_concept_count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.active_concept_count)
  return _internal_active_concept_count();
}
inline void App::_internal_set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  active_concept_count_ = value;
}
inline void App::set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_active_concept_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.App.active_concept_count)
}

// .google.protobuf.Struct metadata = 13;
inline bool App::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool App::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& App::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& App::metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.metadata)
  return _internal_metadata();
}
inline void App::unsafe_arena_set_allocated_metadata(
    PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.App.metadata)
}
inline PROTOBUF_NAMESPACE_ID::Struct* App::release_metadata() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* App::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* App::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* App::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.metadata)
  return _internal_mutable_metadata();
}
inline void App::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.metadata)
}

// -------------------------------------------------------------------

// Collaborator

// string id = 1;
inline void Collaborator::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Collaborator::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaborator.id)
  return _internal_id();
}
inline void Collaborator::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Collaborator.id)
}
inline std::string* Collaborator::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaborator.id)
  return _internal_mutable_id();
}
inline const std::string& Collaborator::_internal_id() const {
  return id_.Get();
}
inline void Collaborator::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Collaborator::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Collaborator.id)
}
inline void Collaborator::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collaborator.id)
}
inline void Collaborator::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collaborator.id)
}
inline std::string* Collaborator::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Collaborator::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaborator.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collaborator::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaborator.id)
}

// .clarifai.api.App app = 2;
inline bool Collaborator::_internal_has_app() const {
  return this != internal_default_instance() && app_ != nullptr;
}
inline bool Collaborator::has_app() const {
  return _internal_has_app();
}
inline void Collaborator::clear_app() {
  if (GetArena() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
}
inline const ::clarifai::api::App& Collaborator::_internal_app() const {
  const ::clarifai::api::App* p = app_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::App*>(
      &::clarifai::api::_App_default_instance_);
}
inline const ::clarifai::api::App& Collaborator::app() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaborator.app)
  return _internal_app();
}
inline void Collaborator::unsafe_arena_set_allocated_app(
    ::clarifai::api::App* app) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_);
  }
  app_ = app;
  if (app) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Collaborator.app)
}
inline ::clarifai::api::App* Collaborator::release_app() {
  
  ::clarifai::api::App* temp = app_;
  app_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::App* Collaborator::unsafe_arena_release_app() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaborator.app)
  
  ::clarifai::api::App* temp = app_;
  app_ = nullptr;
  return temp;
}
inline ::clarifai::api::App* Collaborator::_internal_mutable_app() {
  
  if (app_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::App>(GetArena());
    app_ = p;
  }
  return app_;
}
inline ::clarifai::api::App* Collaborator::mutable_app() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaborator.app)
  return _internal_mutable_app();
}
inline void Collaborator::set_allocated_app(::clarifai::api::App* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete app_;
  }
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(app);
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    
  } else {
    
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaborator.app)
}

// .clarifai.api.User user = 3;
inline bool Collaborator::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool Collaborator::has_user() const {
  return _internal_has_user();
}
inline void Collaborator::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::clarifai::api::User& Collaborator::_internal_user() const {
  const ::clarifai::api::User* p = user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::User*>(
      &::clarifai::api::_User_default_instance_);
}
inline const ::clarifai::api::User& Collaborator::user() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaborator.user)
  return _internal_user();
}
inline void Collaborator::unsafe_arena_set_allocated_user(
    ::clarifai::api::User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Collaborator.user)
}
inline ::clarifai::api::User* Collaborator::release_user() {
  
  ::clarifai::api::User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::User* Collaborator::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaborator.user)
  
  ::clarifai::api::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::clarifai::api::User* Collaborator::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::clarifai::api::User* Collaborator::mutable_user() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaborator.user)
  return _internal_mutable_user();
}
inline void Collaborator::set_allocated_user(::clarifai::api::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaborator.user)
}

// repeated string scopes = 4;
inline int Collaborator::_internal_scopes_size() const {
  return scopes_.size();
}
inline int Collaborator::scopes_size() const {
  return _internal_scopes_size();
}
inline void Collaborator::clear_scopes() {
  scopes_.Clear();
}
inline std::string* Collaborator::add_scopes() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.Collaborator.scopes)
  return _internal_add_scopes();
}
inline const std::string& Collaborator::_internal_scopes(int index) const {
  return scopes_.Get(index);
}
inline const std::string& Collaborator::scopes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaborator.scopes)
  return _internal_scopes(index);
}
inline std::string* Collaborator::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaborator.scopes)
  return scopes_.Mutable(index);
}
inline void Collaborator::set_scopes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaborator.scopes)
  scopes_.Mutable(index)->assign(value);
}
inline void Collaborator::set_scopes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaborator.scopes)
  scopes_.Mutable(index)->assign(std::move(value));
}
inline void Collaborator::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collaborator.scopes)
}
inline void Collaborator::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collaborator.scopes)
}
inline std::string* Collaborator::_internal_add_scopes() {
  return scopes_.Add();
}
inline void Collaborator::add_scopes(const std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Collaborator.scopes)
}
inline void Collaborator::add_scopes(std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.Collaborator.scopes)
}
inline void Collaborator::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.Collaborator.scopes)
}
inline void Collaborator::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.Collaborator.scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Collaborator::scopes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Collaborator.scopes)
  return scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Collaborator::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Collaborator.scopes)
  return &scopes_;
}

// repeated string endpoints = 5;
inline int Collaborator::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int Collaborator::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void Collaborator::clear_endpoints() {
  endpoints_.Clear();
}
inline std::string* Collaborator::add_endpoints() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.Collaborator.endpoints)
  return _internal_add_endpoints();
}
inline const std::string& Collaborator::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const std::string& Collaborator::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaborator.endpoints)
  return _internal_endpoints(index);
}
inline std::string* Collaborator::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaborator.endpoints)
  return endpoints_.Mutable(index);
}
inline void Collaborator::set_endpoints(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaborator.endpoints)
  endpoints_.Mutable(index)->assign(value);
}
inline void Collaborator::set_endpoints(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaborator.endpoints)
  endpoints_.Mutable(index)->assign(std::move(value));
}
inline void Collaborator::set_endpoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collaborator.endpoints)
}
inline void Collaborator::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collaborator.endpoints)
}
inline std::string* Collaborator::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline void Collaborator::add_endpoints(const std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Collaborator.endpoints)
}
inline void Collaborator::add_endpoints(std::string&& value) {
  endpoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.Collaborator.endpoints)
}
inline void Collaborator::add_endpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.Collaborator.endpoints)
}
inline void Collaborator::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.Collaborator.endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Collaborator::endpoints() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Collaborator.endpoints)
  return endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Collaborator::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Collaborator.endpoints)
  return &endpoints_;
}

// .google.protobuf.Timestamp created_at = 6;
inline bool Collaborator::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Collaborator::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collaborator::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collaborator::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaborator.created_at)
  return _internal_created_at();
}
inline void Collaborator::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Collaborator.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaborator::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaborator::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaborator.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaborator::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaborator::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaborator.created_at)
  return _internal_mutable_created_at();
}
inline void Collaborator::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaborator.created_at)
}

// -------------------------------------------------------------------

// Collaboration

// .clarifai.api.App app = 1;
inline bool Collaboration::_internal_has_app() const {
  return this != internal_default_instance() && app_ != nullptr;
}
inline bool Collaboration::has_app() const {
  return _internal_has_app();
}
inline void Collaboration::clear_app() {
  if (GetArena() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
}
inline const ::clarifai::api::App& Collaboration::_internal_app() const {
  const ::clarifai::api::App* p = app_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::App*>(
      &::clarifai::api::_App_default_instance_);
}
inline const ::clarifai::api::App& Collaboration::app() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaboration.app)
  return _internal_app();
}
inline void Collaboration::unsafe_arena_set_allocated_app(
    ::clarifai::api::App* app) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_);
  }
  app_ = app;
  if (app) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Collaboration.app)
}
inline ::clarifai::api::App* Collaboration::release_app() {
  
  ::clarifai::api::App* temp = app_;
  app_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::App* Collaboration::unsafe_arena_release_app() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaboration.app)
  
  ::clarifai::api::App* temp = app_;
  app_ = nullptr;
  return temp;
}
inline ::clarifai::api::App* Collaboration::_internal_mutable_app() {
  
  if (app_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::App>(GetArena());
    app_ = p;
  }
  return app_;
}
inline ::clarifai::api::App* Collaboration::mutable_app() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaboration.app)
  return _internal_mutable_app();
}
inline void Collaboration::set_allocated_app(::clarifai::api::App* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete app_;
  }
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(app);
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    
  } else {
    
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaboration.app)
}

// .clarifai.api.User app_owner = 2;
inline bool Collaboration::_internal_has_app_owner() const {
  return this != internal_default_instance() && app_owner_ != nullptr;
}
inline bool Collaboration::has_app_owner() const {
  return _internal_has_app_owner();
}
inline void Collaboration::clear_app_owner() {
  if (GetArena() == nullptr && app_owner_ != nullptr) {
    delete app_owner_;
  }
  app_owner_ = nullptr;
}
inline const ::clarifai::api::User& Collaboration::_internal_app_owner() const {
  const ::clarifai::api::User* p = app_owner_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::User*>(
      &::clarifai::api::_User_default_instance_);
}
inline const ::clarifai::api::User& Collaboration::app_owner() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaboration.app_owner)
  return _internal_app_owner();
}
inline void Collaboration::unsafe_arena_set_allocated_app_owner(
    ::clarifai::api::User* app_owner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_owner_);
  }
  app_owner_ = app_owner;
  if (app_owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Collaboration.app_owner)
}
inline ::clarifai::api::User* Collaboration::release_app_owner() {
  
  ::clarifai::api::User* temp = app_owner_;
  app_owner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::User* Collaboration::unsafe_arena_release_app_owner() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaboration.app_owner)
  
  ::clarifai::api::User* temp = app_owner_;
  app_owner_ = nullptr;
  return temp;
}
inline ::clarifai::api::User* Collaboration::_internal_mutable_app_owner() {
  
  if (app_owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::User>(GetArena());
    app_owner_ = p;
  }
  return app_owner_;
}
inline ::clarifai::api::User* Collaboration::mutable_app_owner() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaboration.app_owner)
  return _internal_mutable_app_owner();
}
inline void Collaboration::set_allocated_app_owner(::clarifai::api::User* app_owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete app_owner_;
  }
  if (app_owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(app_owner);
    if (message_arena != submessage_arena) {
      app_owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_owner, submessage_arena);
    }
    
  } else {
    
  }
  app_owner_ = app_owner;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaboration.app_owner)
}

// repeated string scopes = 3;
inline int Collaboration::_internal_scopes_size() const {
  return scopes_.size();
}
inline int Collaboration::scopes_size() const {
  return _internal_scopes_size();
}
inline void Collaboration::clear_scopes() {
  scopes_.Clear();
}
inline std::string* Collaboration::add_scopes() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.Collaboration.scopes)
  return _internal_add_scopes();
}
inline const std::string& Collaboration::_internal_scopes(int index) const {
  return scopes_.Get(index);
}
inline const std::string& Collaboration::scopes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaboration.scopes)
  return _internal_scopes(index);
}
inline std::string* Collaboration::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaboration.scopes)
  return scopes_.Mutable(index);
}
inline void Collaboration::set_scopes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaboration.scopes)
  scopes_.Mutable(index)->assign(value);
}
inline void Collaboration::set_scopes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaboration.scopes)
  scopes_.Mutable(index)->assign(std::move(value));
}
inline void Collaboration::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collaboration.scopes)
}
inline void Collaboration::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collaboration.scopes)
}
inline std::string* Collaboration::_internal_add_scopes() {
  return scopes_.Add();
}
inline void Collaboration::add_scopes(const std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Collaboration.scopes)
}
inline void Collaboration::add_scopes(std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.Collaboration.scopes)
}
inline void Collaboration::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.Collaboration.scopes)
}
inline void Collaboration::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.Collaboration.scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Collaboration::scopes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Collaboration.scopes)
  return scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Collaboration::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Collaboration.scopes)
  return &scopes_;
}

// repeated string endpoints = 4;
inline int Collaboration::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int Collaboration::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void Collaboration::clear_endpoints() {
  endpoints_.Clear();
}
inline std::string* Collaboration::add_endpoints() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.Collaboration.endpoints)
  return _internal_add_endpoints();
}
inline const std::string& Collaboration::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const std::string& Collaboration::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaboration.endpoints)
  return _internal_endpoints(index);
}
inline std::string* Collaboration::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaboration.endpoints)
  return endpoints_.Mutable(index);
}
inline void Collaboration::set_endpoints(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaboration.endpoints)
  endpoints_.Mutable(index)->assign(value);
}
inline void Collaboration::set_endpoints(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaboration.endpoints)
  endpoints_.Mutable(index)->assign(std::move(value));
}
inline void Collaboration::set_endpoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collaboration.endpoints)
}
inline void Collaboration::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collaboration.endpoints)
}
inline std::string* Collaboration::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline void Collaboration::add_endpoints(const std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Collaboration.endpoints)
}
inline void Collaboration::add_endpoints(std::string&& value) {
  endpoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.Collaboration.endpoints)
}
inline void Collaboration::add_endpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.Collaboration.endpoints)
}
inline void Collaboration::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.Collaboration.endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Collaboration::endpoints() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Collaboration.endpoints)
  return endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Collaboration::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Collaboration.endpoints)
  return &endpoints_;
}

// .google.protobuf.Timestamp created_at = 5;
inline bool Collaboration::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Collaboration::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collaboration::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collaboration::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaboration.created_at)
  return _internal_created_at();
}
inline void Collaboration::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Collaboration.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaboration::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaboration::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaboration.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaboration::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaboration::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaboration.created_at)
  return _internal_mutable_created_at();
}
inline void Collaboration::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaboration.created_at)
}

// -------------------------------------------------------------------

// Audio

// string url = 1;
inline void Audio::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Audio::url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Audio.url)
  return _internal_url();
}
inline void Audio::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Audio.url)
}
inline std::string* Audio::mutable_url() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Audio.url)
  return _internal_mutable_url();
}
inline const std::string& Audio::_internal_url() const {
  return url_.Get();
}
inline void Audio::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Audio::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Audio.url)
}
inline void Audio::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Audio.url)
}
inline void Audio::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Audio.url)
}
inline std::string* Audio::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Audio::release_url() {
  // @@protoc_insertion_point(field_release:clarifai.api.Audio.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Audio::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Audio.url)
}

// bytes base64 = 2;
inline void Audio::clear_base64() {
  base64_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Audio::base64() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Audio.base64)
  return _internal_base64();
}
inline void Audio::set_base64(const std::string& value) {
  _internal_set_base64(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Audio.base64)
}
inline std::string* Audio::mutable_base64() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Audio.base64)
  return _internal_mutable_base64();
}
inline const std::string& Audio::_internal_base64() const {
  return base64_.Get();
}
inline void Audio::_internal_set_base64(const std::string& value) {
  
  base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Audio::set_base64(std::string&& value) {
  
  base64_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Audio.base64)
}
inline void Audio::set_base64(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Audio.base64)
}
inline void Audio::set_base64(const void* value,
    size_t size) {
  
  base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Audio.base64)
}
inline std::string* Audio::_internal_mutable_base64() {
  
  return base64_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Audio::release_base64() {
  // @@protoc_insertion_point(field_release:clarifai.api.Audio.base64)
  return base64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Audio::set_allocated_base64(std::string* base64) {
  if (base64 != nullptr) {
    
  } else {
    
  }
  base64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base64,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Audio.base64)
}

// bool allow_duplicate_url = 4;
inline void Audio::clear_allow_duplicate_url() {
  allow_duplicate_url_ = false;
}
inline bool Audio::_internal_allow_duplicate_url() const {
  return allow_duplicate_url_;
}
inline bool Audio::allow_duplicate_url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Audio.allow_duplicate_url)
  return _internal_allow_duplicate_url();
}
inline void Audio::_internal_set_allow_duplicate_url(bool value) {
  
  allow_duplicate_url_ = value;
}
inline void Audio::set_allow_duplicate_url(bool value) {
  _internal_set_allow_duplicate_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Audio.allow_duplicate_url)
}

// -------------------------------------------------------------------

// BillingCycle

// .google.protobuf.Timestamp start_date = 1;
inline bool BillingCycle::_internal_has_start_date() const {
  return this != internal_default_instance() && start_date_ != nullptr;
}
inline bool BillingCycle::has_start_date() const {
  return _internal_has_start_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BillingCycle::_internal_start_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BillingCycle::start_date() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BillingCycle.start_date)
  return _internal_start_date();
}
inline void BillingCycle::unsafe_arena_set_allocated_start_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  start_date_ = start_date;
  if (start_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.BillingCycle.start_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BillingCycle::release_start_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_date_;
  start_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BillingCycle::unsafe_arena_release_start_date() {
  // @@protoc_insertion_point(field_release:clarifai.api.BillingCycle.start_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_date_;
  start_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BillingCycle::_internal_mutable_start_date() {
  
  if (start_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_date_ = p;
  }
  return start_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BillingCycle::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.BillingCycle.start_date)
  return _internal_mutable_start_date();
}
inline void BillingCycle::set_allocated_start_date(PROTOBUF_NAMESPACE_ID::Timestamp* start_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  if (start_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date)->GetArena();
    if (message_arena != submessage_arena) {
      start_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_date, submessage_arena);
    }
    
  } else {
    
  }
  start_date_ = start_date;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.BillingCycle.start_date)
}

// .google.protobuf.Timestamp end_date = 2;
inline bool BillingCycle::_internal_has_end_date() const {
  return this != internal_default_instance() && end_date_ != nullptr;
}
inline bool BillingCycle::has_end_date() const {
  return _internal_has_end_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BillingCycle::_internal_end_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BillingCycle::end_date() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BillingCycle.end_date)
  return _internal_end_date();
}
inline void BillingCycle::unsafe_arena_set_allocated_end_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  end_date_ = end_date;
  if (end_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.BillingCycle.end_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BillingCycle::release_end_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_date_;
  end_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BillingCycle::unsafe_arena_release_end_date() {
  // @@protoc_insertion_point(field_release:clarifai.api.BillingCycle.end_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_date_;
  end_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BillingCycle::_internal_mutable_end_date() {
  
  if (end_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_date_ = p;
  }
  return end_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BillingCycle::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.BillingCycle.end_date)
  return _internal_mutable_end_date();
}
inline void BillingCycle::set_allocated_end_date(PROTOBUF_NAMESPACE_ID::Timestamp* end_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  if (end_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date)->GetArena();
    if (message_arena != submessage_arena) {
      end_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_date, submessage_arena);
    }
    
  } else {
    
  }
  end_date_ = end_date;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.BillingCycle.end_date)
}

// int32 cycle_id = 3;
inline void BillingCycle::clear_cycle_id() {
  cycle_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BillingCycle::_internal_cycle_id() const {
  return cycle_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BillingCycle::cycle_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BillingCycle.cycle_id)
  return _internal_cycle_id();
}
inline void BillingCycle::_internal_set_cycle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cycle_id_ = value;
}
inline void BillingCycle::set_cycle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cycle_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BillingCycle.cycle_id)
}

// -------------------------------------------------------------------

// InvoiceItem

// string op_type = 1;
inline void InvoiceItem::clear_op_type() {
  op_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvoiceItem::op_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InvoiceItem.op_type)
  return _internal_op_type();
}
inline void InvoiceItem::set_op_type(const std::string& value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InvoiceItem.op_type)
}
inline std::string* InvoiceItem::mutable_op_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.InvoiceItem.op_type)
  return _internal_mutable_op_type();
}
inline const std::string& InvoiceItem::_internal_op_type() const {
  return op_type_.Get();
}
inline void InvoiceItem::_internal_set_op_type(const std::string& value) {
  
  op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvoiceItem::set_op_type(std::string&& value) {
  
  op_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.InvoiceItem.op_type)
}
inline void InvoiceItem::set_op_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.InvoiceItem.op_type)
}
inline void InvoiceItem::set_op_type(const char* value,
    size_t size) {
  
  op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.InvoiceItem.op_type)
}
inline std::string* InvoiceItem::_internal_mutable_op_type() {
  
  return op_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvoiceItem::release_op_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.InvoiceItem.op_type)
  return op_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvoiceItem::set_allocated_op_type(std::string* op_type) {
  if (op_type != nullptr) {
    
  } else {
    
  }
  op_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.InvoiceItem.op_type)
}

// string bill_type = 2;
inline void InvoiceItem::clear_bill_type() {
  bill_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvoiceItem::bill_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InvoiceItem.bill_type)
  return _internal_bill_type();
}
inline void InvoiceItem::set_bill_type(const std::string& value) {
  _internal_set_bill_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InvoiceItem.bill_type)
}
inline std::string* InvoiceItem::mutable_bill_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.InvoiceItem.bill_type)
  return _internal_mutable_bill_type();
}
inline const std::string& InvoiceItem::_internal_bill_type() const {
  return bill_type_.Get();
}
inline void InvoiceItem::_internal_set_bill_type(const std::string& value) {
  
  bill_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvoiceItem::set_bill_type(std::string&& value) {
  
  bill_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.InvoiceItem.bill_type)
}
inline void InvoiceItem::set_bill_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bill_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.InvoiceItem.bill_type)
}
inline void InvoiceItem::set_bill_type(const char* value,
    size_t size) {
  
  bill_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.InvoiceItem.bill_type)
}
inline std::string* InvoiceItem::_internal_mutable_bill_type() {
  
  return bill_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvoiceItem::release_bill_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.InvoiceItem.bill_type)
  return bill_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvoiceItem::set_allocated_bill_type(std::string* bill_type) {
  if (bill_type != nullptr) {
    
  } else {
    
  }
  bill_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bill_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.InvoiceItem.bill_type)
}

// double price_per_op = 3;
inline void InvoiceItem::clear_price_per_op() {
  price_per_op_ = 0;
}
inline double InvoiceItem::_internal_price_per_op() const {
  return price_per_op_;
}
inline double InvoiceItem::price_per_op() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InvoiceItem.price_per_op)
  return _internal_price_per_op();
}
inline void InvoiceItem::_internal_set_price_per_op(double value) {
  
  price_per_op_ = value;
}
inline void InvoiceItem::set_price_per_op(double value) {
  _internal_set_price_per_op(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InvoiceItem.price_per_op)
}

// double count = 4;
inline void InvoiceItem::clear_count() {
  count_ = 0;
}
inline double InvoiceItem::_internal_count() const {
  return count_;
}
inline double InvoiceItem::count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InvoiceItem.count)
  return _internal_count();
}
inline void InvoiceItem::_internal_set_count(double value) {
  
  count_ = value;
}
inline void InvoiceItem::set_count(double value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InvoiceItem.count)
}

// double dollars = 5;
inline void InvoiceItem::clear_dollars() {
  dollars_ = 0;
}
inline double InvoiceItem::_internal_dollars() const {
  return dollars_;
}
inline double InvoiceItem::dollars() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InvoiceItem.dollars)
  return _internal_dollars();
}
inline void InvoiceItem::_internal_set_dollars(double value) {
  
  dollars_ = value;
}
inline void InvoiceItem::set_dollars(double value) {
  _internal_set_dollars(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InvoiceItem.dollars)
}

// string notes = 6;
inline void InvoiceItem::clear_notes() {
  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvoiceItem::notes() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InvoiceItem.notes)
  return _internal_notes();
}
inline void InvoiceItem::set_notes(const std::string& value) {
  _internal_set_notes(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InvoiceItem.notes)
}
inline std::string* InvoiceItem::mutable_notes() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.InvoiceItem.notes)
  return _internal_mutable_notes();
}
inline const std::string& InvoiceItem::_internal_notes() const {
  return notes_.Get();
}
inline void InvoiceItem::_internal_set_notes(const std::string& value) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvoiceItem::set_notes(std::string&& value) {
  
  notes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.InvoiceItem.notes)
}
inline void InvoiceItem::set_notes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.InvoiceItem.notes)
}
inline void InvoiceItem::set_notes(const char* value,
    size_t size) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.InvoiceItem.notes)
}
inline std::string* InvoiceItem::_internal_mutable_notes() {
  
  return notes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvoiceItem::release_notes() {
  // @@protoc_insertion_point(field_release:clarifai.api.InvoiceItem.notes)
  return notes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvoiceItem::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.InvoiceItem.notes)
}

// -------------------------------------------------------------------

// Cluster

// string id = 1;
inline void Cluster::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Cluster::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Cluster.id)
  return _internal_id();
}
inline void Cluster::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Cluster.id)
}
inline std::string* Cluster::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Cluster.id)
  return _internal_mutable_id();
}
inline const std::string& Cluster::_internal_id() const {
  return id_.Get();
}
inline void Cluster::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cluster::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Cluster.id)
}
inline void Cluster::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Cluster.id)
}
inline void Cluster::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Cluster.id)
}
inline std::string* Cluster::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cluster::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Cluster.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cluster::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Cluster.id)
}

// uint32 count = 2;
inline void Cluster::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cluster::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cluster::count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Cluster.count)
  return _internal_count();
}
inline void Cluster::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void Cluster::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Cluster.count)
}

// float score = 3;
inline void Cluster::clear_score() {
  score_ = 0;
}
inline float Cluster::_internal_score() const {
  return score_;
}
inline float Cluster::score() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Cluster.score)
  return _internal_score();
}
inline void Cluster::_internal_set_score(float value) {
  
  score_ = value;
}
inline void Cluster::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Cluster.score)
}

// repeated .clarifai.api.Hit hits = 4;
inline int Cluster::_internal_hits_size() const {
  return hits_.size();
}
inline int Cluster::hits_size() const {
  return _internal_hits_size();
}
inline void Cluster::clear_hits() {
  hits_.Clear();
}
inline ::clarifai::api::Hit* Cluster::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Cluster.hits)
  return hits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >*
Cluster::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Cluster.hits)
  return &hits_;
}
inline const ::clarifai::api::Hit& Cluster::_internal_hits(int index) const {
  return hits_.Get(index);
}
inline const ::clarifai::api::Hit& Cluster::hits(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Cluster.hits)
  return _internal_hits(index);
}
inline ::clarifai::api::Hit* Cluster::_internal_add_hits() {
  return hits_.Add();
}
inline ::clarifai::api::Hit* Cluster::add_hits() {
  // @@protoc_insertion_point(field_add:clarifai.api.Cluster.hits)
  return _internal_add_hits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >&
Cluster::hits() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Cluster.hits)
  return hits_;
}

// -------------------------------------------------------------------

// Color

// string raw_hex = 1;
inline void Color::clear_raw_hex() {
  raw_hex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Color::raw_hex() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Color.raw_hex)
  return _internal_raw_hex();
}
inline void Color::set_raw_hex(const std::string& value) {
  _internal_set_raw_hex(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Color.raw_hex)
}
inline std::string* Color::mutable_raw_hex() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Color.raw_hex)
  return _internal_mutable_raw_hex();
}
inline const std::string& Color::_internal_raw_hex() const {
  return raw_hex_.Get();
}
inline void Color::_internal_set_raw_hex(const std::string& value) {
  
  raw_hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Color::set_raw_hex(std::string&& value) {
  
  raw_hex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Color.raw_hex)
}
inline void Color::set_raw_hex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Color.raw_hex)
}
inline void Color::set_raw_hex(const char* value,
    size_t size) {
  
  raw_hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Color.raw_hex)
}
inline std::string* Color::_internal_mutable_raw_hex() {
  
  return raw_hex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Color::release_raw_hex() {
  // @@protoc_insertion_point(field_release:clarifai.api.Color.raw_hex)
  return raw_hex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Color::set_allocated_raw_hex(std::string* raw_hex) {
  if (raw_hex != nullptr) {
    
  } else {
    
  }
  raw_hex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_hex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Color.raw_hex)
}

// .clarifai.api.W3C w3c = 2;
inline bool Color::_internal_has_w3c() const {
  return this != internal_default_instance() && w3c_ != nullptr;
}
inline bool Color::has_w3c() const {
  return _internal_has_w3c();
}
inline void Color::clear_w3c() {
  if (GetArena() == nullptr && w3c_ != nullptr) {
    delete w3c_;
  }
  w3c_ = nullptr;
}
inline const ::clarifai::api::W3C& Color::_internal_w3c() const {
  const ::clarifai::api::W3C* p = w3c_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::W3C*>(
      &::clarifai::api::_W3C_default_instance_);
}
inline const ::clarifai::api::W3C& Color::w3c() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Color.w3c)
  return _internal_w3c();
}
inline void Color::unsafe_arena_set_allocated_w3c(
    ::clarifai::api::W3C* w3c) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(w3c_);
  }
  w3c_ = w3c;
  if (w3c) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Color.w3c)
}
inline ::clarifai::api::W3C* Color::release_w3c() {
  
  ::clarifai::api::W3C* temp = w3c_;
  w3c_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::W3C* Color::unsafe_arena_release_w3c() {
  // @@protoc_insertion_point(field_release:clarifai.api.Color.w3c)
  
  ::clarifai::api::W3C* temp = w3c_;
  w3c_ = nullptr;
  return temp;
}
inline ::clarifai::api::W3C* Color::_internal_mutable_w3c() {
  
  if (w3c_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::W3C>(GetArena());
    w3c_ = p;
  }
  return w3c_;
}
inline ::clarifai::api::W3C* Color::mutable_w3c() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Color.w3c)
  return _internal_mutable_w3c();
}
inline void Color::set_allocated_w3c(::clarifai::api::W3C* w3c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete w3c_;
  }
  if (w3c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(w3c);
    if (message_arena != submessage_arena) {
      w3c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, w3c, submessage_arena);
    }
    
  } else {
    
  }
  w3c_ = w3c;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Color.w3c)
}

// float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void Color::clear_value() {
  value_ = 0;
}
inline float Color::_internal_value() const {
  return value_;
}
inline float Color::value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Color.value)
  return _internal_value();
}
inline void Color::_internal_set_value(float value) {
  
  value_ = value;
}
inline void Color::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Color.value)
}

// -------------------------------------------------------------------

// W3C

// string hex = 1;
inline void W3C::clear_hex() {
  hex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& W3C::hex() const {
  // @@protoc_insertion_point(field_get:clarifai.api.W3C.hex)
  return _internal_hex();
}
inline void W3C::set_hex(const std::string& value) {
  _internal_set_hex(value);
  // @@protoc_insertion_point(field_set:clarifai.api.W3C.hex)
}
inline std::string* W3C::mutable_hex() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.W3C.hex)
  return _internal_mutable_hex();
}
inline const std::string& W3C::_internal_hex() const {
  return hex_.Get();
}
inline void W3C::_internal_set_hex(const std::string& value) {
  
  hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void W3C::set_hex(std::string&& value) {
  
  hex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.W3C.hex)
}
inline void W3C::set_hex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.W3C.hex)
}
inline void W3C::set_hex(const char* value,
    size_t size) {
  
  hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.W3C.hex)
}
inline std::string* W3C::_internal_mutable_hex() {
  
  return hex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* W3C::release_hex() {
  // @@protoc_insertion_point(field_release:clarifai.api.W3C.hex)
  return hex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void W3C::set_allocated_hex(std::string* hex) {
  if (hex != nullptr) {
    
  } else {
    
  }
  hex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.W3C.hex)
}

// string name = 2;
inline void W3C::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& W3C::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.W3C.name)
  return _internal_name();
}
inline void W3C::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.W3C.name)
}
inline std::string* W3C::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.W3C.name)
  return _internal_mutable_name();
}
inline const std::string& W3C::_internal_name() const {
  return name_.Get();
}
inline void W3C::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void W3C::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.W3C.name)
}
inline void W3C::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.W3C.name)
}
inline void W3C::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.W3C.name)
}
inline std::string* W3C::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* W3C::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.W3C.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void W3C::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.W3C.name)
}

// -------------------------------------------------------------------

// UserAppIDSet

// string user_id = 1;
inline void UserAppIDSet::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserAppIDSet::user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserAppIDSet.user_id)
  return _internal_user_id();
}
inline void UserAppIDSet::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UserAppIDSet.user_id)
}
inline std::string* UserAppIDSet::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserAppIDSet.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& UserAppIDSet::_internal_user_id() const {
  return user_id_.Get();
}
inline void UserAppIDSet::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserAppIDSet::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.UserAppIDSet.user_id)
}
inline void UserAppIDSet::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.UserAppIDSet.user_id)
}
inline void UserAppIDSet::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.UserAppIDSet.user_id)
}
inline std::string* UserAppIDSet::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserAppIDSet::release_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.UserAppIDSet.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserAppIDSet::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UserAppIDSet.user_id)
}

// string app_id = 2;
inline void UserAppIDSet::clear_app_id() {
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserAppIDSet::app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserAppIDSet.app_id)
  return _internal_app_id();
}
inline void UserAppIDSet::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UserAppIDSet.app_id)
}
inline std::string* UserAppIDSet::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserAppIDSet.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& UserAppIDSet::_internal_app_id() const {
  return app_id_.Get();
}
inline void UserAppIDSet::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserAppIDSet::set_app_id(std::string&& value) {
  
  app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.UserAppIDSet.app_id)
}
inline void UserAppIDSet::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.UserAppIDSet.app_id)
}
inline void UserAppIDSet::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.UserAppIDSet.app_id)
}
inline std::string* UserAppIDSet::_internal_mutable_app_id() {
  
  return app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserAppIDSet::release_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.UserAppIDSet.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserAppIDSet::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UserAppIDSet.app_id)
}

// -------------------------------------------------------------------

// PatchAction

// string op = 1;
inline void PatchAction::clear_op() {
  op_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PatchAction::op() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAction.op)
  return _internal_op();
}
inline void PatchAction::set_op(const std::string& value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAction.op)
}
inline std::string* PatchAction::mutable_op() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAction.op)
  return _internal_mutable_op();
}
inline const std::string& PatchAction::_internal_op() const {
  return op_.Get();
}
inline void PatchAction::_internal_set_op(const std::string& value) {
  
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PatchAction::set_op(std::string&& value) {
  
  op_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchAction.op)
}
inline void PatchAction::set_op(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchAction.op)
}
inline void PatchAction::set_op(const char* value,
    size_t size) {
  
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchAction.op)
}
inline std::string* PatchAction::_internal_mutable_op() {
  
  return op_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PatchAction::release_op() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAction.op)
  return op_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PatchAction::set_allocated_op(std::string* op) {
  if (op != nullptr) {
    
  } else {
    
  }
  op_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAction.op)
}

// string merge_conflict_resolution = 2;
inline void PatchAction::clear_merge_conflict_resolution() {
  merge_conflict_resolution_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PatchAction::merge_conflict_resolution() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAction.merge_conflict_resolution)
  return _internal_merge_conflict_resolution();
}
inline void PatchAction::set_merge_conflict_resolution(const std::string& value) {
  _internal_set_merge_conflict_resolution(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAction.merge_conflict_resolution)
}
inline std::string* PatchAction::mutable_merge_conflict_resolution() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAction.merge_conflict_resolution)
  return _internal_mutable_merge_conflict_resolution();
}
inline const std::string& PatchAction::_internal_merge_conflict_resolution() const {
  return merge_conflict_resolution_.Get();
}
inline void PatchAction::_internal_set_merge_conflict_resolution(const std::string& value) {
  
  merge_conflict_resolution_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PatchAction::set_merge_conflict_resolution(std::string&& value) {
  
  merge_conflict_resolution_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchAction.merge_conflict_resolution)
}
inline void PatchAction::set_merge_conflict_resolution(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merge_conflict_resolution_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchAction.merge_conflict_resolution)
}
inline void PatchAction::set_merge_conflict_resolution(const char* value,
    size_t size) {
  
  merge_conflict_resolution_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchAction.merge_conflict_resolution)
}
inline std::string* PatchAction::_internal_mutable_merge_conflict_resolution() {
  
  return merge_conflict_resolution_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PatchAction::release_merge_conflict_resolution() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAction.merge_conflict_resolution)
  return merge_conflict_resolution_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PatchAction::set_allocated_merge_conflict_resolution(std::string* merge_conflict_resolution) {
  if (merge_conflict_resolution != nullptr) {
    
  } else {
    
  }
  merge_conflict_resolution_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merge_conflict_resolution,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAction.merge_conflict_resolution)
}

// string path = 3;
inline void PatchAction::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PatchAction::path() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAction.path)
  return _internal_path();
}
inline void PatchAction::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAction.path)
}
inline std::string* PatchAction::mutable_path() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAction.path)
  return _internal_mutable_path();
}
inline const std::string& PatchAction::_internal_path() const {
  return path_.Get();
}
inline void PatchAction::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PatchAction::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchAction.path)
}
inline void PatchAction::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchAction.path)
}
inline void PatchAction::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchAction.path)
}
inline std::string* PatchAction::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PatchAction::release_path() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAction.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PatchAction::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAction.path)
}

// -------------------------------------------------------------------

// Concept

// string id = 1;
inline void Concept::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Concept::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.id)
  return _internal_id();
}
inline void Concept::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Concept.id)
}
inline std::string* Concept::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Concept.id)
  return _internal_mutable_id();
}
inline const std::string& Concept::_internal_id() const {
  return id_.Get();
}
inline void Concept::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Concept::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Concept.id)
}
inline void Concept::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Concept.id)
}
inline void Concept::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Concept.id)
}
inline std::string* Concept::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Concept::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Concept.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Concept::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Concept.id)
}

// string name = 2;
inline void Concept::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Concept::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.name)
  return _internal_name();
}
inline void Concept::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Concept.name)
}
inline std::string* Concept::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Concept.name)
  return _internal_mutable_name();
}
inline const std::string& Concept::_internal_name() const {
  return name_.Get();
}
inline void Concept::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Concept::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Concept.name)
}
inline void Concept::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Concept.name)
}
inline void Concept::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Concept.name)
}
inline std::string* Concept::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Concept::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.Concept.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Concept::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Concept.name)
}

// float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_default_float) = 1];
inline void Concept::clear_value() {
  value_ = 0;
}
inline float Concept::_internal_value() const {
  return value_;
}
inline float Concept::value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.value)
  return _internal_value();
}
inline void Concept::_internal_set_value(float value) {
  
  value_ = value;
}
inline void Concept::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Concept.value)
}

// .google.protobuf.Timestamp created_at = 4;
inline bool Concept::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Concept::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Concept::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Concept::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.created_at)
  return _internal_created_at();
}
inline void Concept::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Concept.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Concept::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Concept::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Concept.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Concept::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Concept::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Concept.created_at)
  return _internal_mutable_created_at();
}
inline void Concept::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Concept.created_at)
}

// string language = 5;
inline void Concept::clear_language() {
  language_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Concept::language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.language)
  return _internal_language();
}
inline void Concept::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Concept.language)
}
inline std::string* Concept::mutable_language() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Concept.language)
  return _internal_mutable_language();
}
inline const std::string& Concept::_internal_language() const {
  return language_.Get();
}
inline void Concept::_internal_set_language(const std::string& value) {
  
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Concept::set_language(std::string&& value) {
  
  language_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Concept.language)
}
inline void Concept::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Concept.language)
}
inline void Concept::set_language(const char* value,
    size_t size) {
  
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Concept.language)
}
inline std::string* Concept::_internal_mutable_language() {
  
  return language_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Concept::release_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.Concept.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Concept::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Concept.language)
}

// string app_id = 6;
inline void Concept::clear_app_id() {
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Concept::app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.app_id)
  return _internal_app_id();
}
inline void Concept::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Concept.app_id)
}
inline std::string* Concept::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Concept.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& Concept::_internal_app_id() const {
  return app_id_.Get();
}
inline void Concept::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Concept::set_app_id(std::string&& value) {
  
  app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Concept.app_id)
}
inline void Concept::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Concept.app_id)
}
inline void Concept::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Concept.app_id)
}
inline std::string* Concept::_internal_mutable_app_id() {
  
  return app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Concept::release_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Concept.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Concept::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Concept.app_id)
}

// string definition = 7;
inline void Concept::clear_definition() {
  definition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Concept::definition() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.definition)
  return _internal_definition();
}
inline void Concept::set_definition(const std::string& value) {
  _internal_set_definition(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Concept.definition)
}
inline std::string* Concept::mutable_definition() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Concept.definition)
  return _internal_mutable_definition();
}
inline const std::string& Concept::_internal_definition() const {
  return definition_.Get();
}
inline void Concept::_internal_set_definition(const std::string& value) {
  
  definition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Concept::set_definition(std::string&& value) {
  
  definition_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Concept.definition)
}
inline void Concept::set_definition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  definition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Concept.definition)
}
inline void Concept::set_definition(const char* value,
    size_t size) {
  
  definition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Concept.definition)
}
inline std::string* Concept::_internal_mutable_definition() {
  
  return definition_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Concept::release_definition() {
  // @@protoc_insertion_point(field_release:clarifai.api.Concept.definition)
  return definition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Concept::set_allocated_definition(std::string* definition) {
  if (definition != nullptr) {
    
  } else {
    
  }
  definition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), definition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Concept.definition)
}

// bool is_virtual = 8;
inline void Concept::clear_is_virtual() {
  is_virtual_ = false;
}
inline bool Concept::_internal_is_virtual() const {
  return is_virtual_;
}
inline bool Concept::is_virtual() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.is_virtual)
  return _internal_is_virtual();
}
inline void Concept::_internal_set_is_virtual(bool value) {
  
  is_virtual_ = value;
}
inline void Concept::set_is_virtual(bool value) {
  _internal_set_is_virtual(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Concept.is_virtual)
}

// -------------------------------------------------------------------

// ConceptCount

// string id = 1;
inline void ConceptCount::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptCount::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptCount.id)
  return _internal_id();
}
inline void ConceptCount::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptCount.id)
}
inline std::string* ConceptCount::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptCount.id)
  return _internal_mutable_id();
}
inline const std::string& ConceptCount::_internal_id() const {
  return id_.Get();
}
inline void ConceptCount::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptCount::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptCount.id)
}
inline void ConceptCount::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptCount.id)
}
inline void ConceptCount::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptCount.id)
}
inline std::string* ConceptCount::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptCount::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptCount.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptCount::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptCount.id)
}

// string name = 2;
inline void ConceptCount::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptCount::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptCount.name)
  return _internal_name();
}
inline void ConceptCount::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptCount.name)
}
inline std::string* ConceptCount::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptCount.name)
  return _internal_mutable_name();
}
inline const std::string& ConceptCount::_internal_name() const {
  return name_.Get();
}
inline void ConceptCount::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptCount::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptCount.name)
}
inline void ConceptCount::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptCount.name)
}
inline void ConceptCount::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptCount.name)
}
inline std::string* ConceptCount::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptCount::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptCount.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptCount::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptCount.name)
}

// .clarifai.api.ConceptTypeCount concept_type_count = 3;
inline bool ConceptCount::_internal_has_concept_type_count() const {
  return this != internal_default_instance() && concept_type_count_ != nullptr;
}
inline bool ConceptCount::has_concept_type_count() const {
  return _internal_has_concept_type_count();
}
inline void ConceptCount::clear_concept_type_count() {
  if (GetArena() == nullptr && concept_type_count_ != nullptr) {
    delete concept_type_count_;
  }
  concept_type_count_ = nullptr;
}
inline const ::clarifai::api::ConceptTypeCount& ConceptCount::_internal_concept_type_count() const {
  const ::clarifai::api::ConceptTypeCount* p = concept_type_count_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConceptTypeCount*>(
      &::clarifai::api::_ConceptTypeCount_default_instance_);
}
inline const ::clarifai::api::ConceptTypeCount& ConceptCount::concept_type_count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptCount.concept_type_count)
  return _internal_concept_type_count();
}
inline void ConceptCount::unsafe_arena_set_allocated_concept_type_count(
    ::clarifai::api::ConceptTypeCount* concept_type_count) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_type_count_);
  }
  concept_type_count_ = concept_type_count;
  if (concept_type_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ConceptCount.concept_type_count)
}
inline ::clarifai::api::ConceptTypeCount* ConceptCount::release_concept_type_count() {
  
  ::clarifai::api::ConceptTypeCount* temp = concept_type_count_;
  concept_type_count_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::ConceptTypeCount* ConceptCount::unsafe_arena_release_concept_type_count() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptCount.concept_type_count)
  
  ::clarifai::api::ConceptTypeCount* temp = concept_type_count_;
  concept_type_count_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptTypeCount* ConceptCount::_internal_mutable_concept_type_count() {
  
  if (concept_type_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptTypeCount>(GetArena());
    concept_type_count_ = p;
  }
  return concept_type_count_;
}
inline ::clarifai::api::ConceptTypeCount* ConceptCount::mutable_concept_type_count() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptCount.concept_type_count)
  return _internal_mutable_concept_type_count();
}
inline void ConceptCount::set_allocated_concept_type_count(::clarifai::api::ConceptTypeCount* concept_type_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete concept_type_count_;
  }
  if (concept_type_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(concept_type_count);
    if (message_arena != submessage_arena) {
      concept_type_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept_type_count, submessage_arena);
    }
    
  } else {
    
  }
  concept_type_count_ = concept_type_count;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptCount.concept_type_count)
}

// .clarifai.api.DetailConceptCount detail_concept_count = 4;
inline bool ConceptCount::_internal_has_detail_concept_count() const {
  return this != internal_default_instance() && detail_concept_count_ != nullptr;
}
inline bool ConceptCount::has_detail_concept_count() const {
  return _internal_has_detail_concept_count();
}
inline void ConceptCount::clear_detail_concept_count() {
  if (GetArena() == nullptr && detail_concept_count_ != nullptr) {
    delete detail_concept_count_;
  }
  detail_concept_count_ = nullptr;
}
inline const ::clarifai::api::DetailConceptCount& ConceptCount::_internal_detail_concept_count() const {
  const ::clarifai::api::DetailConceptCount* p = detail_concept_count_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::DetailConceptCount*>(
      &::clarifai::api::_DetailConceptCount_default_instance_);
}
inline const ::clarifai::api::DetailConceptCount& ConceptCount::detail_concept_count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptCount.detail_concept_count)
  return _internal_detail_concept_count();
}
inline void ConceptCount::unsafe_arena_set_allocated_detail_concept_count(
    ::clarifai::api::DetailConceptCount* detail_concept_count) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_concept_count_);
  }
  detail_concept_count_ = detail_concept_count;
  if (detail_concept_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ConceptCount.detail_concept_count)
}
inline ::clarifai::api::DetailConceptCount* ConceptCount::release_detail_concept_count() {
  
  ::clarifai::api::DetailConceptCount* temp = detail_concept_count_;
  detail_concept_count_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::DetailConceptCount* ConceptCount::unsafe_arena_release_detail_concept_count() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptCount.detail_concept_count)
  
  ::clarifai::api::DetailConceptCount* temp = detail_concept_count_;
  detail_concept_count_ = nullptr;
  return temp;
}
inline ::clarifai::api::DetailConceptCount* ConceptCount::_internal_mutable_detail_concept_count() {
  
  if (detail_concept_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::DetailConceptCount>(GetArena());
    detail_concept_count_ = p;
  }
  return detail_concept_count_;
}
inline ::clarifai::api::DetailConceptCount* ConceptCount::mutable_detail_concept_count() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptCount.detail_concept_count)
  return _internal_mutable_detail_concept_count();
}
inline void ConceptCount::set_allocated_detail_concept_count(::clarifai::api::DetailConceptCount* detail_concept_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete detail_concept_count_;
  }
  if (detail_concept_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(detail_concept_count);
    if (message_arena != submessage_arena) {
      detail_concept_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail_concept_count, submessage_arena);
    }
    
  } else {
    
  }
  detail_concept_count_ = detail_concept_count;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptCount.detail_concept_count)
}

// -------------------------------------------------------------------

// ConceptTypeCount

// uint32 positive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void ConceptTypeCount::clear_positive() {
  positive_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConceptTypeCount::_internal_positive() const {
  return positive_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConceptTypeCount::positive() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptTypeCount.positive)
  return _internal_positive();
}
inline void ConceptTypeCount::_internal_set_positive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  positive_ = value;
}
inline void ConceptTypeCount::set_positive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_positive(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptTypeCount.positive)
}

// uint32 negative = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void ConceptTypeCount::clear_negative() {
  negative_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConceptTypeCount::_internal_negative() const {
  return negative_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConceptTypeCount::negative() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptTypeCount.negative)
  return _internal_negative();
}
inline void ConceptTypeCount::_internal_set_negative(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  negative_ = value;
}
inline void ConceptTypeCount::set_negative(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_negative(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptTypeCount.negative)
}

// -------------------------------------------------------------------

// DetailConceptCount

// .clarifai.api.ConceptTypeCount processed = 1;
inline bool DetailConceptCount::_internal_has_processed() const {
  return this != internal_default_instance() && processed_ != nullptr;
}
inline bool DetailConceptCount::has_processed() const {
  return _internal_has_processed();
}
inline void DetailConceptCount::clear_processed() {
  if (GetArena() == nullptr && processed_ != nullptr) {
    delete processed_;
  }
  processed_ = nullptr;
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::_internal_processed() const {
  const ::clarifai::api::ConceptTypeCount* p = processed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConceptTypeCount*>(
      &::clarifai::api::_ConceptTypeCount_default_instance_);
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::processed() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DetailConceptCount.processed)
  return _internal_processed();
}
inline void DetailConceptCount::unsafe_arena_set_allocated_processed(
    ::clarifai::api::ConceptTypeCount* processed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(processed_);
  }
  processed_ = processed;
  if (processed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DetailConceptCount.processed)
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::release_processed() {
  
  ::clarifai::api::ConceptTypeCount* temp = processed_;
  processed_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::unsafe_arena_release_processed() {
  // @@protoc_insertion_point(field_release:clarifai.api.DetailConceptCount.processed)
  
  ::clarifai::api::ConceptTypeCount* temp = processed_;
  processed_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::_internal_mutable_processed() {
  
  if (processed_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptTypeCount>(GetArena());
    processed_ = p;
  }
  return processed_;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::mutable_processed() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DetailConceptCount.processed)
  return _internal_mutable_processed();
}
inline void DetailConceptCount::set_allocated_processed(::clarifai::api::ConceptTypeCount* processed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete processed_;
  }
  if (processed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(processed);
    if (message_arena != submessage_arena) {
      processed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processed, submessage_arena);
    }
    
  } else {
    
  }
  processed_ = processed;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DetailConceptCount.processed)
}

// .clarifai.api.ConceptTypeCount to_process = 2;
inline bool DetailConceptCount::_internal_has_to_process() const {
  return this != internal_default_instance() && to_process_ != nullptr;
}
inline bool DetailConceptCount::has_to_process() const {
  return _internal_has_to_process();
}
inline void DetailConceptCount::clear_to_process() {
  if (GetArena() == nullptr && to_process_ != nullptr) {
    delete to_process_;
  }
  to_process_ = nullptr;
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::_internal_to_process() const {
  const ::clarifai::api::ConceptTypeCount* p = to_process_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConceptTypeCount*>(
      &::clarifai::api::_ConceptTypeCount_default_instance_);
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::to_process() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DetailConceptCount.to_process)
  return _internal_to_process();
}
inline void DetailConceptCount::unsafe_arena_set_allocated_to_process(
    ::clarifai::api::ConceptTypeCount* to_process) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_process_);
  }
  to_process_ = to_process;
  if (to_process) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DetailConceptCount.to_process)
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::release_to_process() {
  
  ::clarifai::api::ConceptTypeCount* temp = to_process_;
  to_process_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::unsafe_arena_release_to_process() {
  // @@protoc_insertion_point(field_release:clarifai.api.DetailConceptCount.to_process)
  
  ::clarifai::api::ConceptTypeCount* temp = to_process_;
  to_process_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::_internal_mutable_to_process() {
  
  if (to_process_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptTypeCount>(GetArena());
    to_process_ = p;
  }
  return to_process_;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::mutable_to_process() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DetailConceptCount.to_process)
  return _internal_mutable_to_process();
}
inline void DetailConceptCount::set_allocated_to_process(::clarifai::api::ConceptTypeCount* to_process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete to_process_;
  }
  if (to_process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(to_process);
    if (message_arena != submessage_arena) {
      to_process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_process, submessage_arena);
    }
    
  } else {
    
  }
  to_process_ = to_process;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DetailConceptCount.to_process)
}

// .clarifai.api.ConceptTypeCount errors = 3;
inline bool DetailConceptCount::_internal_has_errors() const {
  return this != internal_default_instance() && errors_ != nullptr;
}
inline bool DetailConceptCount::has_errors() const {
  return _internal_has_errors();
}
inline void DetailConceptCount::clear_errors() {
  if (GetArena() == nullptr && errors_ != nullptr) {
    delete errors_;
  }
  errors_ = nullptr;
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::_internal_errors() const {
  const ::clarifai::api::ConceptTypeCount* p = errors_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConceptTypeCount*>(
      &::clarifai::api::_ConceptTypeCount_default_instance_);
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::errors() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DetailConceptCount.errors)
  return _internal_errors();
}
inline void DetailConceptCount::unsafe_arena_set_allocated_errors(
    ::clarifai::api::ConceptTypeCount* errors) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errors_);
  }
  errors_ = errors;
  if (errors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DetailConceptCount.errors)
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::release_errors() {
  
  ::clarifai::api::ConceptTypeCount* temp = errors_;
  errors_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::unsafe_arena_release_errors() {
  // @@protoc_insertion_point(field_release:clarifai.api.DetailConceptCount.errors)
  
  ::clarifai::api::ConceptTypeCount* temp = errors_;
  errors_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::_internal_mutable_errors() {
  
  if (errors_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptTypeCount>(GetArena());
    errors_ = p;
  }
  return errors_;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::mutable_errors() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DetailConceptCount.errors)
  return _internal_mutable_errors();
}
inline void DetailConceptCount::set_allocated_errors(::clarifai::api::ConceptTypeCount* errors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete errors_;
  }
  if (errors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(errors);
    if (message_arena != submessage_arena) {
      errors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errors, submessage_arena);
    }
    
  } else {
    
  }
  errors_ = errors;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DetailConceptCount.errors)
}

// .clarifai.api.ConceptTypeCount processing = 4;
inline bool DetailConceptCount::_internal_has_processing() const {
  return this != internal_default_instance() && processing_ != nullptr;
}
inline bool DetailConceptCount::has_processing() const {
  return _internal_has_processing();
}
inline void DetailConceptCount::clear_processing() {
  if (GetArena() == nullptr && processing_ != nullptr) {
    delete processing_;
  }
  processing_ = nullptr;
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::_internal_processing() const {
  const ::clarifai::api::ConceptTypeCount* p = processing_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConceptTypeCount*>(
      &::clarifai::api::_ConceptTypeCount_default_instance_);
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::processing() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DetailConceptCount.processing)
  return _internal_processing();
}
inline void DetailConceptCount::unsafe_arena_set_allocated_processing(
    ::clarifai::api::ConceptTypeCount* processing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(processing_);
  }
  processing_ = processing;
  if (processing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DetailConceptCount.processing)
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::release_processing() {
  
  ::clarifai::api::ConceptTypeCount* temp = processing_;
  processing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::unsafe_arena_release_processing() {
  // @@protoc_insertion_point(field_release:clarifai.api.DetailConceptCount.processing)
  
  ::clarifai::api::ConceptTypeCount* temp = processing_;
  processing_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::_internal_mutable_processing() {
  
  if (processing_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptTypeCount>(GetArena());
    processing_ = p;
  }
  return processing_;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::mutable_processing() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DetailConceptCount.processing)
  return _internal_mutable_processing();
}
inline void DetailConceptCount::set_allocated_processing(::clarifai::api::ConceptTypeCount* processing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete processing_;
  }
  if (processing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(processing);
    if (message_arena != submessage_arena) {
      processing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processing, submessage_arena);
    }
    
  } else {
    
  }
  processing_ = processing;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DetailConceptCount.processing)
}

// -------------------------------------------------------------------

// ConceptQuery

// string name = 1;
inline void ConceptQuery::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptQuery::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptQuery.name)
  return _internal_name();
}
inline void ConceptQuery::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptQuery.name)
}
inline std::string* ConceptQuery::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptQuery.name)
  return _internal_mutable_name();
}
inline const std::string& ConceptQuery::_internal_name() const {
  return name_.Get();
}
inline void ConceptQuery::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptQuery::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptQuery.name)
}
inline void ConceptQuery::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptQuery.name)
}
inline void ConceptQuery::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptQuery.name)
}
inline std::string* ConceptQuery::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptQuery::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptQuery.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptQuery::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptQuery.name)
}

// string language = 2;
inline void ConceptQuery::clear_language() {
  language_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptQuery::language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptQuery.language)
  return _internal_language();
}
inline void ConceptQuery::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptQuery.language)
}
inline std::string* ConceptQuery::mutable_language() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptQuery.language)
  return _internal_mutable_language();
}
inline const std::string& ConceptQuery::_internal_language() const {
  return language_.Get();
}
inline void ConceptQuery::_internal_set_language(const std::string& value) {
  
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptQuery::set_language(std::string&& value) {
  
  language_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptQuery.language)
}
inline void ConceptQuery::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptQuery.language)
}
inline void ConceptQuery::set_language(const char* value,
    size_t size) {
  
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptQuery.language)
}
inline std::string* ConceptQuery::_internal_mutable_language() {
  
  return language_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptQuery::release_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptQuery.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptQuery::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptQuery.language)
}

// -------------------------------------------------------------------

// ConceptRelation

// string id = 1;
inline void ConceptRelation::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptRelation::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptRelation.id)
  return _internal_id();
}
inline void ConceptRelation::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptRelation.id)
}
inline std::string* ConceptRelation::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptRelation.id)
  return _internal_mutable_id();
}
inline const std::string& ConceptRelation::_internal_id() const {
  return id_.Get();
}
inline void ConceptRelation::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptRelation::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptRelation.id)
}
inline void ConceptRelation::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptRelation.id)
}
inline void ConceptRelation::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptRelation.id)
}
inline std::string* ConceptRelation::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptRelation::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptRelation.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptRelation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptRelation.id)
}

// .clarifai.api.Concept subject_concept = 2;
inline bool ConceptRelation::_internal_has_subject_concept() const {
  return this != internal_default_instance() && subject_concept_ != nullptr;
}
inline bool ConceptRelation::has_subject_concept() const {
  return _internal_has_subject_concept();
}
inline void ConceptRelation::clear_subject_concept() {
  if (GetArena() == nullptr && subject_concept_ != nullptr) {
    delete subject_concept_;
  }
  subject_concept_ = nullptr;
}
inline const ::clarifai::api::Concept& ConceptRelation::_internal_subject_concept() const {
  const ::clarifai::api::Concept* p = subject_concept_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Concept*>(
      &::clarifai::api::_Concept_default_instance_);
}
inline const ::clarifai::api::Concept& ConceptRelation::subject_concept() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptRelation.subject_concept)
  return _internal_subject_concept();
}
inline void ConceptRelation::unsafe_arena_set_allocated_subject_concept(
    ::clarifai::api::Concept* subject_concept) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subject_concept_);
  }
  subject_concept_ = subject_concept;
  if (subject_concept) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ConceptRelation.subject_concept)
}
inline ::clarifai::api::Concept* ConceptRelation::release_subject_concept() {
  
  ::clarifai::api::Concept* temp = subject_concept_;
  subject_concept_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Concept* ConceptRelation::unsafe_arena_release_subject_concept() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptRelation.subject_concept)
  
  ::clarifai::api::Concept* temp = subject_concept_;
  subject_concept_ = nullptr;
  return temp;
}
inline ::clarifai::api::Concept* ConceptRelation::_internal_mutable_subject_concept() {
  
  if (subject_concept_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Concept>(GetArena());
    subject_concept_ = p;
  }
  return subject_concept_;
}
inline ::clarifai::api::Concept* ConceptRelation::mutable_subject_concept() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptRelation.subject_concept)
  return _internal_mutable_subject_concept();
}
inline void ConceptRelation::set_allocated_subject_concept(::clarifai::api::Concept* subject_concept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete subject_concept_;
  }
  if (subject_concept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subject_concept);
    if (message_arena != submessage_arena) {
      subject_concept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject_concept, submessage_arena);
    }
    
  } else {
    
  }
  subject_concept_ = subject_concept;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptRelation.subject_concept)
}

// .clarifai.api.Concept object_concept = 3;
inline bool ConceptRelation::_internal_has_object_concept() const {
  return this != internal_default_instance() && object_concept_ != nullptr;
}
inline bool ConceptRelation::has_object_concept() const {
  return _internal_has_object_concept();
}
inline void ConceptRelation::clear_object_concept() {
  if (GetArena() == nullptr && object_concept_ != nullptr) {
    delete object_concept_;
  }
  object_concept_ = nullptr;
}
inline const ::clarifai::api::Concept& ConceptRelation::_internal_object_concept() const {
  const ::clarifai::api::Concept* p = object_concept_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Concept*>(
      &::clarifai::api::_Concept_default_instance_);
}
inline const ::clarifai::api::Concept& ConceptRelation::object_concept() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptRelation.object_concept)
  return _internal_object_concept();
}
inline void ConceptRelation::unsafe_arena_set_allocated_object_concept(
    ::clarifai::api::Concept* object_concept) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_concept_);
  }
  object_concept_ = object_concept;
  if (object_concept) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ConceptRelation.object_concept)
}
inline ::clarifai::api::Concept* ConceptRelation::release_object_concept() {
  
  ::clarifai::api::Concept* temp = object_concept_;
  object_concept_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Concept* ConceptRelation::unsafe_arena_release_object_concept() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptRelation.object_concept)
  
  ::clarifai::api::Concept* temp = object_concept_;
  object_concept_ = nullptr;
  return temp;
}
inline ::clarifai::api::Concept* ConceptRelation::_internal_mutable_object_concept() {
  
  if (object_concept_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Concept>(GetArena());
    object_concept_ = p;
  }
  return object_concept_;
}
inline ::clarifai::api::Concept* ConceptRelation::mutable_object_concept() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptRelation.object_concept)
  return _internal_mutable_object_concept();
}
inline void ConceptRelation::set_allocated_object_concept(::clarifai::api::Concept* object_concept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete object_concept_;
  }
  if (object_concept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object_concept);
    if (message_arena != submessage_arena) {
      object_concept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_concept, submessage_arena);
    }
    
  } else {
    
  }
  object_concept_ = object_concept;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptRelation.object_concept)
}

// string predicate = 4;
inline void ConceptRelation::clear_predicate() {
  predicate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptRelation::predicate() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptRelation.predicate)
  return _internal_predicate();
}
inline void ConceptRelation::set_predicate(const std::string& value) {
  _internal_set_predicate(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptRelation.predicate)
}
inline std::string* ConceptRelation::mutable_predicate() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptRelation.predicate)
  return _internal_mutable_predicate();
}
inline const std::string& ConceptRelation::_internal_predicate() const {
  return predicate_.Get();
}
inline void ConceptRelation::_internal_set_predicate(const std::string& value) {
  
  predicate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptRelation::set_predicate(std::string&& value) {
  
  predicate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptRelation.predicate)
}
inline void ConceptRelation::set_predicate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  predicate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptRelation.predicate)
}
inline void ConceptRelation::set_predicate(const char* value,
    size_t size) {
  
  predicate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptRelation.predicate)
}
inline std::string* ConceptRelation::_internal_mutable_predicate() {
  
  return predicate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptRelation::release_predicate() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptRelation.predicate)
  return predicate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptRelation::set_allocated_predicate(std::string* predicate) {
  if (predicate != nullptr) {
    
  } else {
    
  }
  predicate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), predicate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptRelation.predicate)
}

// string knowledge_graph_id = 5;
inline void ConceptRelation::clear_knowledge_graph_id() {
  knowledge_graph_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptRelation::knowledge_graph_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptRelation.knowledge_graph_id)
  return _internal_knowledge_graph_id();
}
inline void ConceptRelation::set_knowledge_graph_id(const std::string& value) {
  _internal_set_knowledge_graph_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptRelation.knowledge_graph_id)
}
inline std::string* ConceptRelation::mutable_knowledge_graph_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptRelation.knowledge_graph_id)
  return _internal_mutable_knowledge_graph_id();
}
inline const std::string& ConceptRelation::_internal_knowledge_graph_id() const {
  return knowledge_graph_id_.Get();
}
inline void ConceptRelation::_internal_set_knowledge_graph_id(const std::string& value) {
  
  knowledge_graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptRelation::set_knowledge_graph_id(std::string&& value) {
  
  knowledge_graph_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptRelation.knowledge_graph_id)
}
inline void ConceptRelation::set_knowledge_graph_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  knowledge_graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptRelation.knowledge_graph_id)
}
inline void ConceptRelation::set_knowledge_graph_id(const char* value,
    size_t size) {
  
  knowledge_graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptRelation.knowledge_graph_id)
}
inline std::string* ConceptRelation::_internal_mutable_knowledge_graph_id() {
  
  return knowledge_graph_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptRelation::release_knowledge_graph_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptRelation.knowledge_graph_id)
  return knowledge_graph_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptRelation::set_allocated_knowledge_graph_id(std::string* knowledge_graph_id) {
  if (knowledge_graph_id != nullptr) {
    
  } else {
    
  }
  knowledge_graph_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), knowledge_graph_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptRelation.knowledge_graph_id)
}

// -------------------------------------------------------------------

// KnowledgeGraph

// string id = 1;
inline void KnowledgeGraph::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KnowledgeGraph::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.KnowledgeGraph.id)
  return _internal_id();
}
inline void KnowledgeGraph::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.KnowledgeGraph.id)
}
inline std::string* KnowledgeGraph::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.KnowledgeGraph.id)
  return _internal_mutable_id();
}
inline const std::string& KnowledgeGraph::_internal_id() const {
  return id_.Get();
}
inline void KnowledgeGraph::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KnowledgeGraph::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.KnowledgeGraph.id)
}
inline void KnowledgeGraph::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.KnowledgeGraph.id)
}
inline void KnowledgeGraph::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.KnowledgeGraph.id)
}
inline std::string* KnowledgeGraph::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KnowledgeGraph::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.KnowledgeGraph.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KnowledgeGraph::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.KnowledgeGraph.id)
}

// string name = 2;
inline void KnowledgeGraph::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KnowledgeGraph::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.KnowledgeGraph.name)
  return _internal_name();
}
inline void KnowledgeGraph::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.KnowledgeGraph.name)
}
inline std::string* KnowledgeGraph::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.KnowledgeGraph.name)
  return _internal_mutable_name();
}
inline const std::string& KnowledgeGraph::_internal_name() const {
  return name_.Get();
}
inline void KnowledgeGraph::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KnowledgeGraph::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.KnowledgeGraph.name)
}
inline void KnowledgeGraph::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.KnowledgeGraph.name)
}
inline void KnowledgeGraph::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.KnowledgeGraph.name)
}
inline std::string* KnowledgeGraph::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KnowledgeGraph::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.KnowledgeGraph.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KnowledgeGraph::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.KnowledgeGraph.name)
}

// string description = 3;
inline void KnowledgeGraph::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KnowledgeGraph::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.KnowledgeGraph.description)
  return _internal_description();
}
inline void KnowledgeGraph::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:clarifai.api.KnowledgeGraph.description)
}
inline std::string* KnowledgeGraph::mutable_description() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.KnowledgeGraph.description)
  return _internal_mutable_description();
}
inline const std::string& KnowledgeGraph::_internal_description() const {
  return description_.Get();
}
inline void KnowledgeGraph::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KnowledgeGraph::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.KnowledgeGraph.description)
}
inline void KnowledgeGraph::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.KnowledgeGraph.description)
}
inline void KnowledgeGraph::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.KnowledgeGraph.description)
}
inline std::string* KnowledgeGraph::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KnowledgeGraph::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.KnowledgeGraph.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KnowledgeGraph::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.KnowledgeGraph.description)
}

// string examples_app_id = 4;
inline void KnowledgeGraph::clear_examples_app_id() {
  examples_app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KnowledgeGraph::examples_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.KnowledgeGraph.examples_app_id)
  return _internal_examples_app_id();
}
inline void KnowledgeGraph::set_examples_app_id(const std::string& value) {
  _internal_set_examples_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.KnowledgeGraph.examples_app_id)
}
inline std::string* KnowledgeGraph::mutable_examples_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.KnowledgeGraph.examples_app_id)
  return _internal_mutable_examples_app_id();
}
inline const std::string& KnowledgeGraph::_internal_examples_app_id() const {
  return examples_app_id_.Get();
}
inline void KnowledgeGraph::_internal_set_examples_app_id(const std::string& value) {
  
  examples_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KnowledgeGraph::set_examples_app_id(std::string&& value) {
  
  examples_app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.KnowledgeGraph.examples_app_id)
}
inline void KnowledgeGraph::set_examples_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  examples_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.KnowledgeGraph.examples_app_id)
}
inline void KnowledgeGraph::set_examples_app_id(const char* value,
    size_t size) {
  
  examples_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.KnowledgeGraph.examples_app_id)
}
inline std::string* KnowledgeGraph::_internal_mutable_examples_app_id() {
  
  return examples_app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KnowledgeGraph::release_examples_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.KnowledgeGraph.examples_app_id)
  return examples_app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KnowledgeGraph::set_allocated_examples_app_id(std::string* examples_app_id) {
  if (examples_app_id != nullptr) {
    
  } else {
    
  }
  examples_app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), examples_app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.KnowledgeGraph.examples_app_id)
}

// string sampled_examples_app_id = 5;
inline void KnowledgeGraph::clear_sampled_examples_app_id() {
  sampled_examples_app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KnowledgeGraph::sampled_examples_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
  return _internal_sampled_examples_app_id();
}
inline void KnowledgeGraph::set_sampled_examples_app_id(const std::string& value) {
  _internal_set_sampled_examples_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
}
inline std::string* KnowledgeGraph::mutable_sampled_examples_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
  return _internal_mutable_sampled_examples_app_id();
}
inline const std::string& KnowledgeGraph::_internal_sampled_examples_app_id() const {
  return sampled_examples_app_id_.Get();
}
inline void KnowledgeGraph::_internal_set_sampled_examples_app_id(const std::string& value) {
  
  sampled_examples_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KnowledgeGraph::set_sampled_examples_app_id(std::string&& value) {
  
  sampled_examples_app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
}
inline void KnowledgeGraph::set_sampled_examples_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sampled_examples_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
}
inline void KnowledgeGraph::set_sampled_examples_app_id(const char* value,
    size_t size) {
  
  sampled_examples_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
}
inline std::string* KnowledgeGraph::_internal_mutable_sampled_examples_app_id() {
  
  return sampled_examples_app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KnowledgeGraph::release_sampled_examples_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
  return sampled_examples_app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KnowledgeGraph::set_allocated_sampled_examples_app_id(std::string* sampled_examples_app_id) {
  if (sampled_examples_app_id != nullptr) {
    
  } else {
    
  }
  sampled_examples_app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sampled_examples_app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
}

// -------------------------------------------------------------------

// ConceptMapping

// .clarifai.api.Concept concept = 1;
inline bool ConceptMapping::_internal_has_concept() const {
  return this != internal_default_instance() && concept_ != nullptr;
}
inline bool ConceptMapping::has_concept() const {
  return _internal_has_concept();
}
inline void ConceptMapping::clear_concept() {
  if (GetArena() == nullptr && concept_ != nullptr) {
    delete concept_;
  }
  concept_ = nullptr;
}
inline const ::clarifai::api::Concept& ConceptMapping::_internal_concept() const {
  const ::clarifai::api::Concept* p = concept_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Concept*>(
      &::clarifai::api::_Concept_default_instance_);
}
inline const ::clarifai::api::Concept& ConceptMapping::concept() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptMapping.concept)
  return _internal_concept();
}
inline void ConceptMapping::unsafe_arena_set_allocated_concept(
    ::clarifai::api::Concept* concept) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_);
  }
  concept_ = concept;
  if (concept) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ConceptMapping.concept)
}
inline ::clarifai::api::Concept* ConceptMapping::release_concept() {
  
  ::clarifai::api::Concept* temp = concept_;
  concept_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Concept* ConceptMapping::unsafe_arena_release_concept() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptMapping.concept)
  
  ::clarifai::api::Concept* temp = concept_;
  concept_ = nullptr;
  return temp;
}
inline ::clarifai::api::Concept* ConceptMapping::_internal_mutable_concept() {
  
  if (concept_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Concept>(GetArena());
    concept_ = p;
  }
  return concept_;
}
inline ::clarifai::api::Concept* ConceptMapping::mutable_concept() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptMapping.concept)
  return _internal_mutable_concept();
}
inline void ConceptMapping::set_allocated_concept(::clarifai::api::Concept* concept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete concept_;
  }
  if (concept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(concept);
    if (message_arena != submessage_arena) {
      concept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept, submessage_arena);
    }
    
  } else {
    
  }
  concept_ = concept;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptMapping.concept)
}

// .clarifai.api.Concept suggested_concept = 2;
inline bool ConceptMapping::_internal_has_suggested_concept() const {
  return this != internal_default_instance() && suggested_concept_ != nullptr;
}
inline bool ConceptMapping::has_suggested_concept() const {
  return _internal_has_suggested_concept();
}
inline void ConceptMapping::clear_suggested_concept() {
  if (GetArena() == nullptr && suggested_concept_ != nullptr) {
    delete suggested_concept_;
  }
  suggested_concept_ = nullptr;
}
inline const ::clarifai::api::Concept& ConceptMapping::_internal_suggested_concept() const {
  const ::clarifai::api::Concept* p = suggested_concept_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Concept*>(
      &::clarifai::api::_Concept_default_instance_);
}
inline const ::clarifai::api::Concept& ConceptMapping::suggested_concept() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptMapping.suggested_concept)
  return _internal_suggested_concept();
}
inline void ConceptMapping::unsafe_arena_set_allocated_suggested_concept(
    ::clarifai::api::Concept* suggested_concept) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(suggested_concept_);
  }
  suggested_concept_ = suggested_concept;
  if (suggested_concept) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ConceptMapping.suggested_concept)
}
inline ::clarifai::api::Concept* ConceptMapping::release_suggested_concept() {
  
  ::clarifai::api::Concept* temp = suggested_concept_;
  suggested_concept_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Concept* ConceptMapping::unsafe_arena_release_suggested_concept() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptMapping.suggested_concept)
  
  ::clarifai::api::Concept* temp = suggested_concept_;
  suggested_concept_ = nullptr;
  return temp;
}
inline ::clarifai::api::Concept* ConceptMapping::_internal_mutable_suggested_concept() {
  
  if (suggested_concept_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Concept>(GetArena());
    suggested_concept_ = p;
  }
  return suggested_concept_;
}
inline ::clarifai::api::Concept* ConceptMapping::mutable_suggested_concept() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptMapping.suggested_concept)
  return _internal_mutable_suggested_concept();
}
inline void ConceptMapping::set_allocated_suggested_concept(::clarifai::api::Concept* suggested_concept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete suggested_concept_;
  }
  if (suggested_concept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(suggested_concept);
    if (message_arena != submessage_arena) {
      suggested_concept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suggested_concept, submessage_arena);
    }
    
  } else {
    
  }
  suggested_concept_ = suggested_concept;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptMapping.suggested_concept)
}

// bool customer_confirmed = 3;
inline void ConceptMapping::clear_customer_confirmed() {
  customer_confirmed_ = false;
}
inline bool ConceptMapping::_internal_customer_confirmed() const {
  return customer_confirmed_;
}
inline bool ConceptMapping::customer_confirmed() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptMapping.customer_confirmed)
  return _internal_customer_confirmed();
}
inline void ConceptMapping::_internal_set_customer_confirmed(bool value) {
  
  customer_confirmed_ = value;
}
inline void ConceptMapping::set_customer_confirmed(bool value) {
  _internal_set_customer_confirmed(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptMapping.customer_confirmed)
}

// .google.protobuf.Timestamp created_at = 4;
inline bool ConceptMapping::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool ConceptMapping::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ConceptMapping::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ConceptMapping::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptMapping.created_at)
  return _internal_created_at();
}
inline void ConceptMapping::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ConceptMapping.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ConceptMapping::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ConceptMapping::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptMapping.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ConceptMapping::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ConceptMapping::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptMapping.created_at)
  return _internal_mutable_created_at();
}
inline void ConceptMapping::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptMapping.created_at)
}

// -------------------------------------------------------------------

// ConceptMappingJob

// string knowledge_graph_id = 1;
inline void ConceptMappingJob::clear_knowledge_graph_id() {
  knowledge_graph_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptMappingJob::knowledge_graph_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptMappingJob.knowledge_graph_id)
  return _internal_knowledge_graph_id();
}
inline void ConceptMappingJob::set_knowledge_graph_id(const std::string& value) {
  _internal_set_knowledge_graph_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptMappingJob.knowledge_graph_id)
}
inline std::string* ConceptMappingJob::mutable_knowledge_graph_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptMappingJob.knowledge_graph_id)
  return _internal_mutable_knowledge_graph_id();
}
inline const std::string& ConceptMappingJob::_internal_knowledge_graph_id() const {
  return knowledge_graph_id_.Get();
}
inline void ConceptMappingJob::_internal_set_knowledge_graph_id(const std::string& value) {
  
  knowledge_graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptMappingJob::set_knowledge_graph_id(std::string&& value) {
  
  knowledge_graph_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptMappingJob.knowledge_graph_id)
}
inline void ConceptMappingJob::set_knowledge_graph_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  knowledge_graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptMappingJob.knowledge_graph_id)
}
inline void ConceptMappingJob::set_knowledge_graph_id(const char* value,
    size_t size) {
  
  knowledge_graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptMappingJob.knowledge_graph_id)
}
inline std::string* ConceptMappingJob::_internal_mutable_knowledge_graph_id() {
  
  return knowledge_graph_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptMappingJob::release_knowledge_graph_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptMappingJob.knowledge_graph_id)
  return knowledge_graph_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptMappingJob::set_allocated_knowledge_graph_id(std::string* knowledge_graph_id) {
  if (knowledge_graph_id != nullptr) {
    
  } else {
    
  }
  knowledge_graph_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), knowledge_graph_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptMappingJob.knowledge_graph_id)
}

// repeated string concept_ids = 2;
inline int ConceptMappingJob::_internal_concept_ids_size() const {
  return concept_ids_.size();
}
inline int ConceptMappingJob::concept_ids_size() const {
  return _internal_concept_ids_size();
}
inline void ConceptMappingJob::clear_concept_ids() {
  concept_ids_.Clear();
}
inline std::string* ConceptMappingJob::add_concept_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ConceptMappingJob.concept_ids)
  return _internal_add_concept_ids();
}
inline const std::string& ConceptMappingJob::_internal_concept_ids(int index) const {
  return concept_ids_.Get(index);
}
inline const std::string& ConceptMappingJob::concept_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptMappingJob.concept_ids)
  return _internal_concept_ids(index);
}
inline std::string* ConceptMappingJob::mutable_concept_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptMappingJob.concept_ids)
  return concept_ids_.Mutable(index);
}
inline void ConceptMappingJob::set_concept_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptMappingJob.concept_ids)
  concept_ids_.Mutable(index)->assign(value);
}
inline void ConceptMappingJob::set_concept_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptMappingJob.concept_ids)
  concept_ids_.Mutable(index)->assign(std::move(value));
}
inline void ConceptMappingJob::set_concept_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptMappingJob.concept_ids)
}
inline void ConceptMappingJob::set_concept_ids(int index, const char* value, size_t size) {
  concept_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptMappingJob.concept_ids)
}
inline std::string* ConceptMappingJob::_internal_add_concept_ids() {
  return concept_ids_.Add();
}
inline void ConceptMappingJob::add_concept_ids(const std::string& value) {
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ConceptMappingJob.concept_ids)
}
inline void ConceptMappingJob::add_concept_ids(std::string&& value) {
  concept_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ConceptMappingJob.concept_ids)
}
inline void ConceptMappingJob::add_concept_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ConceptMappingJob.concept_ids)
}
inline void ConceptMappingJob::add_concept_ids(const char* value, size_t size) {
  concept_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ConceptMappingJob.concept_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConceptMappingJob::concept_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ConceptMappingJob.concept_ids)
  return concept_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConceptMappingJob::mutable_concept_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ConceptMappingJob.concept_ids)
  return &concept_ids_;
}

// -------------------------------------------------------------------

// ConceptLanguage

// string id = 1;
inline void ConceptLanguage::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptLanguage::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptLanguage.id)
  return _internal_id();
}
inline void ConceptLanguage::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptLanguage.id)
}
inline std::string* ConceptLanguage::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptLanguage.id)
  return _internal_mutable_id();
}
inline const std::string& ConceptLanguage::_internal_id() const {
  return id_.Get();
}
inline void ConceptLanguage::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptLanguage::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptLanguage.id)
}
inline void ConceptLanguage::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptLanguage.id)
}
inline void ConceptLanguage::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptLanguage.id)
}
inline std::string* ConceptLanguage::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptLanguage::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptLanguage.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptLanguage::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptLanguage.id)
}

// string name = 2;
inline void ConceptLanguage::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptLanguage::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptLanguage.name)
  return _internal_name();
}
inline void ConceptLanguage::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptLanguage.name)
}
inline std::string* ConceptLanguage::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptLanguage.name)
  return _internal_mutable_name();
}
inline const std::string& ConceptLanguage::_internal_name() const {
  return name_.Get();
}
inline void ConceptLanguage::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptLanguage::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptLanguage.name)
}
inline void ConceptLanguage::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptLanguage.name)
}
inline void ConceptLanguage::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptLanguage.name)
}
inline std::string* ConceptLanguage::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptLanguage::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptLanguage.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptLanguage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptLanguage.name)
}

// string definition = 3;
inline void ConceptLanguage::clear_definition() {
  definition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptLanguage::definition() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptLanguage.definition)
  return _internal_definition();
}
inline void ConceptLanguage::set_definition(const std::string& value) {
  _internal_set_definition(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptLanguage.definition)
}
inline std::string* ConceptLanguage::mutable_definition() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptLanguage.definition)
  return _internal_mutable_definition();
}
inline const std::string& ConceptLanguage::_internal_definition() const {
  return definition_.Get();
}
inline void ConceptLanguage::_internal_set_definition(const std::string& value) {
  
  definition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptLanguage::set_definition(std::string&& value) {
  
  definition_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptLanguage.definition)
}
inline void ConceptLanguage::set_definition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  definition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptLanguage.definition)
}
inline void ConceptLanguage::set_definition(const char* value,
    size_t size) {
  
  definition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptLanguage.definition)
}
inline std::string* ConceptLanguage::_internal_mutable_definition() {
  
  return definition_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptLanguage::release_definition() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptLanguage.definition)
  return definition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptLanguage::set_allocated_definition(std::string* definition) {
  if (definition != nullptr) {
    
  } else {
    
  }
  definition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), definition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptLanguage.definition)
}

// -------------------------------------------------------------------

// ConceptReference

// string id = 1;
inline void ConceptReference::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptReference::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptReference.id)
  return _internal_id();
}
inline void ConceptReference::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptReference.id)
}
inline std::string* ConceptReference::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptReference.id)
  return _internal_mutable_id();
}
inline const std::string& ConceptReference::_internal_id() const {
  return id_.Get();
}
inline void ConceptReference::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptReference::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptReference.id)
}
inline void ConceptReference::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptReference.id)
}
inline void ConceptReference::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptReference.id)
}
inline std::string* ConceptReference::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptReference::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptReference.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptReference::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptReference.id)
}

// string source = 2;
inline void ConceptReference::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptReference::source() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptReference.source)
  return _internal_source();
}
inline void ConceptReference::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptReference.source)
}
inline std::string* ConceptReference::mutable_source() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptReference.source)
  return _internal_mutable_source();
}
inline const std::string& ConceptReference::_internal_source() const {
  return source_.Get();
}
inline void ConceptReference::_internal_set_source(const std::string& value) {
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptReference::set_source(std::string&& value) {
  
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptReference.source)
}
inline void ConceptReference::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptReference.source)
}
inline void ConceptReference::set_source(const char* value,
    size_t size) {
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptReference.source)
}
inline std::string* ConceptReference::_internal_mutable_source() {
  
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptReference::release_source() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptReference.source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptReference::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptReference.source)
}

// string source_id = 3;
inline void ConceptReference::clear_source_id() {
  source_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptReference::source_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptReference.source_id)
  return _internal_source_id();
}
inline void ConceptReference::set_source_id(const std::string& value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptReference.source_id)
}
inline std::string* ConceptReference::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptReference.source_id)
  return _internal_mutable_source_id();
}
inline const std::string& ConceptReference::_internal_source_id() const {
  return source_id_.Get();
}
inline void ConceptReference::_internal_set_source_id(const std::string& value) {
  
  source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptReference::set_source_id(std::string&& value) {
  
  source_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptReference.source_id)
}
inline void ConceptReference::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptReference.source_id)
}
inline void ConceptReference::set_source_id(const char* value,
    size_t size) {
  
  source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptReference.source_id)
}
inline std::string* ConceptReference::_internal_mutable_source_id() {
  
  return source_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptReference::release_source_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptReference.source_id)
  return source_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptReference::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptReference.source_id)
}

// string source_url = 4;
inline void ConceptReference::clear_source_url() {
  source_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptReference::source_url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptReference.source_url)
  return _internal_source_url();
}
inline void ConceptReference::set_source_url(const std::string& value) {
  _internal_set_source_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptReference.source_url)
}
inline std::string* ConceptReference::mutable_source_url() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptReference.source_url)
  return _internal_mutable_source_url();
}
inline const std::string& ConceptReference::_internal_source_url() const {
  return source_url_.Get();
}
inline void ConceptReference::_internal_set_source_url(const std::string& value) {
  
  source_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptReference::set_source_url(std::string&& value) {
  
  source_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptReference.source_url)
}
inline void ConceptReference::set_source_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptReference.source_url)
}
inline void ConceptReference::set_source_url(const char* value,
    size_t size) {
  
  source_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptReference.source_url)
}
inline std::string* ConceptReference::_internal_mutable_source_url() {
  
  return source_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptReference::release_source_url() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptReference.source_url)
  return source_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptReference::set_allocated_source_url(std::string* source_url) {
  if (source_url != nullptr) {
    
  } else {
    
  }
  source_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptReference.source_url)
}

// -------------------------------------------------------------------

// Data

// .clarifai.api.Image image = 1;
inline bool Data::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool Data::has_image() const {
  return _internal_has_image();
}
inline void Data::clear_image() {
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::clarifai::api::Image& Data::_internal_image() const {
  const ::clarifai::api::Image* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Image*>(
      &::clarifai::api::_Image_default_instance_);
}
inline const ::clarifai::api::Image& Data::image() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.image)
  return _internal_image();
}
inline void Data::unsafe_arena_set_allocated_image(
    ::clarifai::api::Image* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Data.image)
}
inline ::clarifai::api::Image* Data::release_image() {
  
  ::clarifai::api::Image* temp = image_;
  image_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Image* Data::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:clarifai.api.Data.image)
  
  ::clarifai::api::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::clarifai::api::Image* Data::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Image>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::clarifai::api::Image* Data::mutable_image() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.image)
  return _internal_mutable_image();
}
inline void Data::set_allocated_image(::clarifai::api::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Data.image)
}

// .clarifai.api.Video video = 2;
inline bool Data::_internal_has_video() const {
  return this != internal_default_instance() && video_ != nullptr;
}
inline bool Data::has_video() const {
  return _internal_has_video();
}
inline void Data::clear_video() {
  if (GetArena() == nullptr && video_ != nullptr) {
    delete video_;
  }
  video_ = nullptr;
}
inline const ::clarifai::api::Video& Data::_internal_video() const {
  const ::clarifai::api::Video* p = video_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Video*>(
      &::clarifai::api::_Video_default_instance_);
}
inline const ::clarifai::api::Video& Data::video() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.video)
  return _internal_video();
}
inline void Data::unsafe_arena_set_allocated_video(
    ::clarifai::api::Video* video) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(video_);
  }
  video_ = video;
  if (video) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Data.video)
}
inline ::clarifai::api::Video* Data::release_video() {
  
  ::clarifai::api::Video* temp = video_;
  video_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Video* Data::unsafe_arena_release_video() {
  // @@protoc_insertion_point(field_release:clarifai.api.Data.video)
  
  ::clarifai::api::Video* temp = video_;
  video_ = nullptr;
  return temp;
}
inline ::clarifai::api::Video* Data::_internal_mutable_video() {
  
  if (video_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Video>(GetArena());
    video_ = p;
  }
  return video_;
}
inline ::clarifai::api::Video* Data::mutable_video() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.video)
  return _internal_mutable_video();
}
inline void Data::set_allocated_video(::clarifai::api::Video* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete video_;
  }
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(video);
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    
  } else {
    
  }
  video_ = video;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Data.video)
}

// repeated .clarifai.api.Concept concepts = 3;
inline int Data::_internal_concepts_size() const {
  return concepts_.size();
}
inline int Data::concepts_size() const {
  return _internal_concepts_size();
}
inline void Data::clear_concepts() {
  concepts_.Clear();
}
inline ::clarifai::api::Concept* Data::mutable_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.concepts)
  return concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
Data::mutable_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Data.concepts)
  return &concepts_;
}
inline const ::clarifai::api::Concept& Data::_internal_concepts(int index) const {
  return concepts_.Get(index);
}
inline const ::clarifai::api::Concept& Data::concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.concepts)
  return _internal_concepts(index);
}
inline ::clarifai::api::Concept* Data::_internal_add_concepts() {
  return concepts_.Add();
}
inline ::clarifai::api::Concept* Data::add_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.Data.concepts)
  return _internal_add_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
Data::concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Data.concepts)
  return concepts_;
}

// .clarifai.api.Face face = 4;
inline bool Data::_internal_has_face() const {
  return this != internal_default_instance() && face_ != nullptr;
}
inline bool Data::has_face() const {
  return _internal_has_face();
}
inline void Data::clear_face() {
  if (GetArena() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
}
inline const ::clarifai::api::Face& Data::_internal_face() const {
  const ::clarifai::api::Face* p = face_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Face*>(
      &::clarifai::api::_Face_default_instance_);
}
inline const ::clarifai::api::Face& Data::face() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.face)
  return _internal_face();
}
inline void Data::unsafe_arena_set_allocated_face(
    ::clarifai::api::Face* face) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(face_);
  }
  face_ = face;
  if (face) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Data.face)
}
inline ::clarifai::api::Face* Data::release_face() {
  
  ::clarifai::api::Face* temp = face_;
  face_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Face* Data::unsafe_arena_release_face() {
  // @@protoc_insertion_point(field_release:clarifai.api.Data.face)
  
  ::clarifai::api::Face* temp = face_;
  face_ = nullptr;
  return temp;
}
inline ::clarifai::api::Face* Data::_internal_mutable_face() {
  
  if (face_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Face>(GetArena());
    face_ = p;
  }
  return face_;
}
inline ::clarifai::api::Face* Data::mutable_face() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.face)
  return _internal_mutable_face();
}
inline void Data::set_allocated_face(::clarifai::api::Face* face) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete face_;
  }
  if (face) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(face);
    if (message_arena != submessage_arena) {
      face = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face, submessage_arena);
    }
    
  } else {
    
  }
  face_ = face;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Data.face)
}

// .google.protobuf.Struct metadata = 5;
inline bool Data::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool Data::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Data::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Data::metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.metadata)
  return _internal_metadata();
}
inline void Data::unsafe_arena_set_allocated_metadata(
    PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Data.metadata)
}
inline PROTOBUF_NAMESPACE_ID::Struct* Data::release_metadata() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Data::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.Data.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Data::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Data::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.metadata)
  return _internal_mutable_metadata();
}
inline void Data::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Data.metadata)
}

// .clarifai.api.Geo geo = 6;
inline bool Data::_internal_has_geo() const {
  return this != internal_default_instance() && geo_ != nullptr;
}
inline bool Data::has_geo() const {
  return _internal_has_geo();
}
inline void Data::clear_geo() {
  if (GetArena() == nullptr && geo_ != nullptr) {
    delete geo_;
  }
  geo_ = nullptr;
}
inline const ::clarifai::api::Geo& Data::_internal_geo() const {
  const ::clarifai::api::Geo* p = geo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Geo*>(
      &::clarifai::api::_Geo_default_instance_);
}
inline const ::clarifai::api::Geo& Data::geo() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.geo)
  return _internal_geo();
}
inline void Data::unsafe_arena_set_allocated_geo(
    ::clarifai::api::Geo* geo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geo_);
  }
  geo_ = geo;
  if (geo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Data.geo)
}
inline ::clarifai::api::Geo* Data::release_geo() {
  
  ::clarifai::api::Geo* temp = geo_;
  geo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Geo* Data::unsafe_arena_release_geo() {
  // @@protoc_insertion_point(field_release:clarifai.api.Data.geo)
  
  ::clarifai::api::Geo* temp = geo_;
  geo_ = nullptr;
  return temp;
}
inline ::clarifai::api::Geo* Data::_internal_mutable_geo() {
  
  if (geo_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Geo>(GetArena());
    geo_ = p;
  }
  return geo_;
}
inline ::clarifai::api::Geo* Data::mutable_geo() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.geo)
  return _internal_mutable_geo();
}
inline void Data::set_allocated_geo(::clarifai::api::Geo* geo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete geo_;
  }
  if (geo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geo);
    if (message_arena != submessage_arena) {
      geo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo, submessage_arena);
    }
    
  } else {
    
  }
  geo_ = geo;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Data.geo)
}

// repeated .clarifai.api.Color colors = 7;
inline int Data::_internal_colors_size() const {
  return colors_.size();
}
inline int Data::colors_size() const {
  return _internal_colors_size();
}
inline void Data::clear_colors() {
  colors_.Clear();
}
inline ::clarifai::api::Color* Data::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.colors)
  return colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Color >*
Data::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Data.colors)
  return &colors_;
}
inline const ::clarifai::api::Color& Data::_internal_colors(int index) const {
  return colors_.Get(index);
}
inline const ::clarifai::api::Color& Data::colors(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.colors)
  return _internal_colors(index);
}
inline ::clarifai::api::Color* Data::_internal_add_colors() {
  return colors_.Add();
}
inline ::clarifai::api::Color* Data::add_colors() {
  // @@protoc_insertion_point(field_add:clarifai.api.Data.colors)
  return _internal_add_colors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Color >&
Data::colors() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Data.colors)
  return colors_;
}

// repeated .clarifai.api.Cluster clusters = 8;
inline int Data::_internal_clusters_size() const {
  return clusters_.size();
}
inline int Data::clusters_size() const {
  return _internal_clusters_size();
}
inline void Data::clear_clusters() {
  clusters_.Clear();
}
inline ::clarifai::api::Cluster* Data::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.clusters)
  return clusters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Cluster >*
Data::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Data.clusters)
  return &clusters_;
}
inline const ::clarifai::api::Cluster& Data::_internal_clusters(int index) const {
  return clusters_.Get(index);
}
inline const ::clarifai::api::Cluster& Data::clusters(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.clusters)
  return _internal_clusters(index);
}
inline ::clarifai::api::Cluster* Data::_internal_add_clusters() {
  return clusters_.Add();
}
inline ::clarifai::api::Cluster* Data::add_clusters() {
  // @@protoc_insertion_point(field_add:clarifai.api.Data.clusters)
  return _internal_add_clusters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Cluster >&
Data::clusters() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Data.clusters)
  return clusters_;
}

// repeated .clarifai.api.Embedding embeddings = 9;
inline int Data::_internal_embeddings_size() const {
  return embeddings_.size();
}
inline int Data::embeddings_size() const {
  return _internal_embeddings_size();
}
inline void Data::clear_embeddings() {
  embeddings_.Clear();
}
inline ::clarifai::api::Embedding* Data::mutable_embeddings(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.embeddings)
  return embeddings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Embedding >*
Data::mutable_embeddings() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Data.embeddings)
  return &embeddings_;
}
inline const ::clarifai::api::Embedding& Data::_internal_embeddings(int index) const {
  return embeddings_.Get(index);
}
inline const ::clarifai::api::Embedding& Data::embeddings(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.embeddings)
  return _internal_embeddings(index);
}
inline ::clarifai::api::Embedding* Data::_internal_add_embeddings() {
  return embeddings_.Add();
}
inline ::clarifai::api::Embedding* Data::add_embeddings() {
  // @@protoc_insertion_point(field_add:clarifai.api.Data.embeddings)
  return _internal_add_embeddings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Embedding >&
Data::embeddings() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Data.embeddings)
  return embeddings_;
}

// .clarifai.api.Focus focus = 10;
inline bool Data::_internal_has_focus() const {
  return this != internal_default_instance() && focus_ != nullptr;
}
inline bool Data::has_focus() const {
  return _internal_has_focus();
}
inline void Data::clear_focus() {
  if (GetArena() == nullptr && focus_ != nullptr) {
    delete focus_;
  }
  focus_ = nullptr;
}
inline const ::clarifai::api::Focus& Data::_internal_focus() const {
  const ::clarifai::api::Focus* p = focus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Focus*>(
      &::clarifai::api::_Focus_default_instance_);
}
inline const ::clarifai::api::Focus& Data::focus() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.focus)
  return _internal_focus();
}
inline void Data::unsafe_arena_set_allocated_focus(
    ::clarifai::api::Focus* focus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(focus_);
  }
  focus_ = focus;
  if (focus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Data.focus)
}
inline ::clarifai::api::Focus* Data::release_focus() {
  
  ::clarifai::api::Focus* temp = focus_;
  focus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Focus* Data::unsafe_arena_release_focus() {
  // @@protoc_insertion_point(field_release:clarifai.api.Data.focus)
  
  ::clarifai::api::Focus* temp = focus_;
  focus_ = nullptr;
  return temp;
}
inline ::clarifai::api::Focus* Data::_internal_mutable_focus() {
  
  if (focus_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Focus>(GetArena());
    focus_ = p;
  }
  return focus_;
}
inline ::clarifai::api::Focus* Data::mutable_focus() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.focus)
  return _internal_mutable_focus();
}
inline void Data::set_allocated_focus(::clarifai::api::Focus* focus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete focus_;
  }
  if (focus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(focus);
    if (message_arena != submessage_arena) {
      focus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, focus, submessage_arena);
    }
    
  } else {
    
  }
  focus_ = focus;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Data.focus)
}

// repeated .clarifai.api.Region regions = 11;
inline int Data::_internal_regions_size() const {
  return regions_.size();
}
inline int Data::regions_size() const {
  return _internal_regions_size();
}
inline void Data::clear_regions() {
  regions_.Clear();
}
inline ::clarifai::api::Region* Data::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.regions)
  return regions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Region >*
Data::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Data.regions)
  return &regions_;
}
inline const ::clarifai::api::Region& Data::_internal_regions(int index) const {
  return regions_.Get(index);
}
inline const ::clarifai::api::Region& Data::regions(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.regions)
  return _internal_regions(index);
}
inline ::clarifai::api::Region* Data::_internal_add_regions() {
  return regions_.Add();
}
inline ::clarifai::api::Region* Data::add_regions() {
  // @@protoc_insertion_point(field_add:clarifai.api.Data.regions)
  return _internal_add_regions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Region >&
Data::regions() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Data.regions)
  return regions_;
}

// repeated .clarifai.api.Frame frames = 12;
inline int Data::_internal_frames_size() const {
  return frames_.size();
}
inline int Data::frames_size() const {
  return _internal_frames_size();
}
inline void Data::clear_frames() {
  frames_.Clear();
}
inline ::clarifai::api::Frame* Data::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Frame >*
Data::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Data.frames)
  return &frames_;
}
inline const ::clarifai::api::Frame& Data::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::clarifai::api::Frame& Data::frames(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.frames)
  return _internal_frames(index);
}
inline ::clarifai::api::Frame* Data::_internal_add_frames() {
  return frames_.Add();
}
inline ::clarifai::api::Frame* Data::add_frames() {
  // @@protoc_insertion_point(field_add:clarifai.api.Data.frames)
  return _internal_add_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Frame >&
Data::frames() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Data.frames)
  return frames_;
}

// .clarifai.api.Text text = 13;
inline bool Data::_internal_has_text() const {
  return this != internal_default_instance() && text_ != nullptr;
}
inline bool Data::has_text() const {
  return _internal_has_text();
}
inline void Data::clear_text() {
  if (GetArena() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
}
inline const ::clarifai::api::Text& Data::_internal_text() const {
  const ::clarifai::api::Text* p = text_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Text*>(
      &::clarifai::api::_Text_default_instance_);
}
inline const ::clarifai::api::Text& Data::text() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.text)
  return _internal_text();
}
inline void Data::unsafe_arena_set_allocated_text(
    ::clarifai::api::Text* text) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Data.text)
}
inline ::clarifai::api::Text* Data::release_text() {
  
  ::clarifai::api::Text* temp = text_;
  text_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Text* Data::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:clarifai.api.Data.text)
  
  ::clarifai::api::Text* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::clarifai::api::Text* Data::_internal_mutable_text() {
  
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Text>(GetArena());
    text_ = p;
  }
  return text_;
}
inline ::clarifai::api::Text* Data::mutable_text() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.text)
  return _internal_mutable_text();
}
inline void Data::set_allocated_text(::clarifai::api::Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete text_;
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Data.text)
}

// .clarifai.api.Audio audio = 14;
inline bool Data::_internal_has_audio() const {
  return this != internal_default_instance() && audio_ != nullptr;
}
inline bool Data::has_audio() const {
  return _internal_has_audio();
}
inline void Data::clear_audio() {
  if (GetArena() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
}
inline const ::clarifai::api::Audio& Data::_internal_audio() const {
  const ::clarifai::api::Audio* p = audio_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Audio*>(
      &::clarifai::api::_Audio_default_instance_);
}
inline const ::clarifai::api::Audio& Data::audio() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.audio)
  return _internal_audio();
}
inline void Data::unsafe_arena_set_allocated_audio(
    ::clarifai::api::Audio* audio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_);
  }
  audio_ = audio;
  if (audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Data.audio)
}
inline ::clarifai::api::Audio* Data::release_audio() {
  
  ::clarifai::api::Audio* temp = audio_;
  audio_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Audio* Data::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_release:clarifai.api.Data.audio)
  
  ::clarifai::api::Audio* temp = audio_;
  audio_ = nullptr;
  return temp;
}
inline ::clarifai::api::Audio* Data::_internal_mutable_audio() {
  
  if (audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Audio>(GetArena());
    audio_ = p;
  }
  return audio_;
}
inline ::clarifai::api::Audio* Data::mutable_audio() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.audio)
  return _internal_mutable_audio();
}
inline void Data::set_allocated_audio(::clarifai::api::Audio* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete audio_;
  }
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    
  } else {
    
  }
  audio_ = audio;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Data.audio)
}

// -------------------------------------------------------------------

// Region

// string id = 1;
inline void Region::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Region::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Region.id)
  return _internal_id();
}
inline void Region::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Region.id)
}
inline std::string* Region::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Region.id)
  return _internal_mutable_id();
}
inline const std::string& Region::_internal_id() const {
  return id_.Get();
}
inline void Region::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Region::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Region.id)
}
inline void Region::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Region.id)
}
inline void Region::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Region.id)
}
inline std::string* Region::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Region::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Region.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Region::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Region.id)
}

// .clarifai.api.RegionInfo region_info = 2;
inline bool Region::_internal_has_region_info() const {
  return this != internal_default_instance() && region_info_ != nullptr;
}
inline bool Region::has_region_info() const {
  return _internal_has_region_info();
}
inline void Region::clear_region_info() {
  if (GetArena() == nullptr && region_info_ != nullptr) {
    delete region_info_;
  }
  region_info_ = nullptr;
}
inline const ::clarifai::api::RegionInfo& Region::_internal_region_info() const {
  const ::clarifai::api::RegionInfo* p = region_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::RegionInfo*>(
      &::clarifai::api::_RegionInfo_default_instance_);
}
inline const ::clarifai::api::RegionInfo& Region::region_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Region.region_info)
  return _internal_region_info();
}
inline void Region::unsafe_arena_set_allocated_region_info(
    ::clarifai::api::RegionInfo* region_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_info_);
  }
  region_info_ = region_info;
  if (region_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Region.region_info)
}
inline ::clarifai::api::RegionInfo* Region::release_region_info() {
  
  ::clarifai::api::RegionInfo* temp = region_info_;
  region_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::RegionInfo* Region::unsafe_arena_release_region_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.Region.region_info)
  
  ::clarifai::api::RegionInfo* temp = region_info_;
  region_info_ = nullptr;
  return temp;
}
inline ::clarifai::api::RegionInfo* Region::_internal_mutable_region_info() {
  
  if (region_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::RegionInfo>(GetArena());
    region_info_ = p;
  }
  return region_info_;
}
inline ::clarifai::api::RegionInfo* Region::mutable_region_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Region.region_info)
  return _internal_mutable_region_info();
}
inline void Region::set_allocated_region_info(::clarifai::api::RegionInfo* region_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete region_info_;
  }
  if (region_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(region_info);
    if (message_arena != submessage_arena) {
      region_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_info, submessage_arena);
    }
    
  } else {
    
  }
  region_info_ = region_info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Region.region_info)
}

// .clarifai.api.Data data = 3;
inline bool Region::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Region::has_data() const {
  return _internal_has_data();
}
inline void Region::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::clarifai::api::Data& Region::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& Region::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Region.data)
  return _internal_data();
}
inline void Region::unsafe_arena_set_allocated_data(
    ::clarifai::api::Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Region.data)
}
inline ::clarifai::api::Data* Region::release_data() {
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Data* Region::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.Region.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* Region::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* Region::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Region.data)
  return _internal_mutable_data();
}
inline void Region::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Region.data)
}

// -------------------------------------------------------------------

// RegionInfo

// .clarifai.api.BoundingBox bounding_box = 1;
inline bool RegionInfo::_internal_has_bounding_box() const {
  return this != internal_default_instance() && bounding_box_ != nullptr;
}
inline bool RegionInfo::has_bounding_box() const {
  return _internal_has_bounding_box();
}
inline void RegionInfo::clear_bounding_box() {
  if (GetArena() == nullptr && bounding_box_ != nullptr) {
    delete bounding_box_;
  }
  bounding_box_ = nullptr;
}
inline const ::clarifai::api::BoundingBox& RegionInfo::_internal_bounding_box() const {
  const ::clarifai::api::BoundingBox* p = bounding_box_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::BoundingBox*>(
      &::clarifai::api::_BoundingBox_default_instance_);
}
inline const ::clarifai::api::BoundingBox& RegionInfo::bounding_box() const {
  // @@protoc_insertion_point(field_get:clarifai.api.RegionInfo.bounding_box)
  return _internal_bounding_box();
}
inline void RegionInfo::unsafe_arena_set_allocated_bounding_box(
    ::clarifai::api::BoundingBox* bounding_box) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounding_box_);
  }
  bounding_box_ = bounding_box;
  if (bounding_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.RegionInfo.bounding_box)
}
inline ::clarifai::api::BoundingBox* RegionInfo::release_bounding_box() {
  
  ::clarifai::api::BoundingBox* temp = bounding_box_;
  bounding_box_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::BoundingBox* RegionInfo::unsafe_arena_release_bounding_box() {
  // @@protoc_insertion_point(field_release:clarifai.api.RegionInfo.bounding_box)
  
  ::clarifai::api::BoundingBox* temp = bounding_box_;
  bounding_box_ = nullptr;
  return temp;
}
inline ::clarifai::api::BoundingBox* RegionInfo::_internal_mutable_bounding_box() {
  
  if (bounding_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::BoundingBox>(GetArena());
    bounding_box_ = p;
  }
  return bounding_box_;
}
inline ::clarifai::api::BoundingBox* RegionInfo::mutable_bounding_box() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.RegionInfo.bounding_box)
  return _internal_mutable_bounding_box();
}
inline void RegionInfo::set_allocated_bounding_box(::clarifai::api::BoundingBox* bounding_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bounding_box_;
  }
  if (bounding_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bounding_box);
    if (message_arena != submessage_arena) {
      bounding_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounding_box, submessage_arena);
    }
    
  } else {
    
  }
  bounding_box_ = bounding_box;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.RegionInfo.bounding_box)
}

// float value = 2;
inline void RegionInfo::clear_value() {
  value_ = 0;
}
inline float RegionInfo::_internal_value() const {
  return value_;
}
inline float RegionInfo::value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.RegionInfo.value)
  return _internal_value();
}
inline void RegionInfo::_internal_set_value(float value) {
  
  value_ = value;
}
inline void RegionInfo::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.RegionInfo.value)
}

// .clarifai.api.Mask mask = 4;
inline bool RegionInfo::_internal_has_mask() const {
  return this != internal_default_instance() && mask_ != nullptr;
}
inline bool RegionInfo::has_mask() const {
  return _internal_has_mask();
}
inline void RegionInfo::clear_mask() {
  if (GetArena() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
inline const ::clarifai::api::Mask& RegionInfo::_internal_mask() const {
  const ::clarifai::api::Mask* p = mask_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Mask*>(
      &::clarifai::api::_Mask_default_instance_);
}
inline const ::clarifai::api::Mask& RegionInfo::mask() const {
  // @@protoc_insertion_point(field_get:clarifai.api.RegionInfo.mask)
  return _internal_mask();
}
inline void RegionInfo::unsafe_arena_set_allocated_mask(
    ::clarifai::api::Mask* mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  mask_ = mask;
  if (mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.RegionInfo.mask)
}
inline ::clarifai::api::Mask* RegionInfo::release_mask() {
  
  ::clarifai::api::Mask* temp = mask_;
  mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Mask* RegionInfo::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:clarifai.api.RegionInfo.mask)
  
  ::clarifai::api::Mask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline ::clarifai::api::Mask* RegionInfo::_internal_mutable_mask() {
  
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Mask>(GetArena());
    mask_ = p;
  }
  return mask_;
}
inline ::clarifai::api::Mask* RegionInfo::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.RegionInfo.mask)
  return _internal_mutable_mask();
}
inline void RegionInfo::set_allocated_mask(::clarifai::api::Mask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mask_;
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mask);
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    
  } else {
    
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.RegionInfo.mask)
}

// -------------------------------------------------------------------

// BoundingBox

// float top_row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BoundingBox::clear_top_row() {
  top_row_ = 0;
}
inline float BoundingBox::_internal_top_row() const {
  return top_row_;
}
inline float BoundingBox::top_row() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BoundingBox.top_row)
  return _internal_top_row();
}
inline void BoundingBox::_internal_set_top_row(float value) {
  
  top_row_ = value;
}
inline void BoundingBox::set_top_row(float value) {
  _internal_set_top_row(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BoundingBox.top_row)
}

// float left_col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BoundingBox::clear_left_col() {
  left_col_ = 0;
}
inline float BoundingBox::_internal_left_col() const {
  return left_col_;
}
inline float BoundingBox::left_col() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BoundingBox.left_col)
  return _internal_left_col();
}
inline void BoundingBox::_internal_set_left_col(float value) {
  
  left_col_ = value;
}
inline void BoundingBox::set_left_col(float value) {
  _internal_set_left_col(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BoundingBox.left_col)
}

// float bottom_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BoundingBox::clear_bottom_row() {
  bottom_row_ = 0;
}
inline float BoundingBox::_internal_bottom_row() const {
  return bottom_row_;
}
inline float BoundingBox::bottom_row() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BoundingBox.bottom_row)
  return _internal_bottom_row();
}
inline void BoundingBox::_internal_set_bottom_row(float value) {
  
  bottom_row_ = value;
}
inline void BoundingBox::set_bottom_row(float value) {
  _internal_set_bottom_row(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BoundingBox.bottom_row)
}

// float right_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BoundingBox::clear_right_col() {
  right_col_ = 0;
}
inline float BoundingBox::_internal_right_col() const {
  return right_col_;
}
inline float BoundingBox::right_col() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BoundingBox.right_col)
  return _internal_right_col();
}
inline void BoundingBox::_internal_set_right_col(float value) {
  
  right_col_ = value;
}
inline void BoundingBox::set_right_col(float value) {
  _internal_set_right_col(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BoundingBox.right_col)
}

// -------------------------------------------------------------------

// FrameInfo

// uint32 index = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void FrameInfo::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameInfo::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameInfo::index() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FrameInfo.index)
  return _internal_index();
}
inline void FrameInfo::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void FrameInfo::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FrameInfo.index)
}

// uint32 time = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void FrameInfo::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameInfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameInfo::time() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FrameInfo.time)
  return _internal_time();
}
inline void FrameInfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void FrameInfo::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FrameInfo.time)
}

// -------------------------------------------------------------------

// Frame

// .clarifai.api.FrameInfo frame_info = 1;
inline bool Frame::_internal_has_frame_info() const {
  return this != internal_default_instance() && frame_info_ != nullptr;
}
inline bool Frame::has_frame_info() const {
  return _internal_has_frame_info();
}
inline void Frame::clear_frame_info() {
  if (GetArena() == nullptr && frame_info_ != nullptr) {
    delete frame_info_;
  }
  frame_info_ = nullptr;
}
inline const ::clarifai::api::FrameInfo& Frame::_internal_frame_info() const {
  const ::clarifai::api::FrameInfo* p = frame_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::FrameInfo*>(
      &::clarifai::api::_FrameInfo_default_instance_);
}
inline const ::clarifai::api::FrameInfo& Frame::frame_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Frame.frame_info)
  return _internal_frame_info();
}
inline void Frame::unsafe_arena_set_allocated_frame_info(
    ::clarifai::api::FrameInfo* frame_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_info_);
  }
  frame_info_ = frame_info;
  if (frame_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Frame.frame_info)
}
inline ::clarifai::api::FrameInfo* Frame::release_frame_info() {
  
  ::clarifai::api::FrameInfo* temp = frame_info_;
  frame_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::FrameInfo* Frame::unsafe_arena_release_frame_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.Frame.frame_info)
  
  ::clarifai::api::FrameInfo* temp = frame_info_;
  frame_info_ = nullptr;
  return temp;
}
inline ::clarifai::api::FrameInfo* Frame::_internal_mutable_frame_info() {
  
  if (frame_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::FrameInfo>(GetArena());
    frame_info_ = p;
  }
  return frame_info_;
}
inline ::clarifai::api::FrameInfo* Frame::mutable_frame_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Frame.frame_info)
  return _internal_mutable_frame_info();
}
inline void Frame::set_allocated_frame_info(::clarifai::api::FrameInfo* frame_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete frame_info_;
  }
  if (frame_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(frame_info);
    if (message_arena != submessage_arena) {
      frame_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_info, submessage_arena);
    }
    
  } else {
    
  }
  frame_info_ = frame_info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Frame.frame_info)
}

// .clarifai.api.Data data = 2;
inline bool Frame::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Frame::has_data() const {
  return _internal_has_data();
}
inline void Frame::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::clarifai::api::Data& Frame::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& Frame::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Frame.data)
  return _internal_data();
}
inline void Frame::unsafe_arena_set_allocated_data(
    ::clarifai::api::Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Frame.data)
}
inline ::clarifai::api::Data* Frame::release_data() {
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Data* Frame::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.Frame.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* Frame::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* Frame::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Frame.data)
  return _internal_mutable_data();
}
inline void Frame::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Frame.data)
}

// -------------------------------------------------------------------

// Mask

// .clarifai.api.Color color = 1;
inline bool Mask::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool Mask::has_color() const {
  return _internal_has_color();
}
inline void Mask::clear_color() {
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::clarifai::api::Color& Mask::_internal_color() const {
  const ::clarifai::api::Color* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Color*>(
      &::clarifai::api::_Color_default_instance_);
}
inline const ::clarifai::api::Color& Mask::color() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Mask.color)
  return _internal_color();
}
inline void Mask::unsafe_arena_set_allocated_color(
    ::clarifai::api::Color* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Mask.color)
}
inline ::clarifai::api::Color* Mask::release_color() {
  
  ::clarifai::api::Color* temp = color_;
  color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Color* Mask::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:clarifai.api.Mask.color)
  
  ::clarifai::api::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::clarifai::api::Color* Mask::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Color>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::clarifai::api::Color* Mask::mutable_color() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Mask.color)
  return _internal_mutable_color();
}
inline void Mask::set_allocated_color(::clarifai::api::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Mask.color)
}

// .clarifai.api.Image image = 2;
inline bool Mask::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool Mask::has_image() const {
  return _internal_has_image();
}
inline void Mask::clear_image() {
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::clarifai::api::Image& Mask::_internal_image() const {
  const ::clarifai::api::Image* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Image*>(
      &::clarifai::api::_Image_default_instance_);
}
inline const ::clarifai::api::Image& Mask::image() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Mask.image)
  return _internal_image();
}
inline void Mask::unsafe_arena_set_allocated_image(
    ::clarifai::api::Image* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Mask.image)
}
inline ::clarifai::api::Image* Mask::release_image() {
  
  ::clarifai::api::Image* temp = image_;
  image_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Image* Mask::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:clarifai.api.Mask.image)
  
  ::clarifai::api::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::clarifai::api::Image* Mask::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Image>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::clarifai::api::Image* Mask::mutable_image() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Mask.image)
  return _internal_mutable_image();
}
inline void Mask::set_allocated_image(::clarifai::api::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Mask.image)
}

// -------------------------------------------------------------------

// Embedding

// repeated float vector = 1 [packed = true];
inline int Embedding::_internal_vector_size() const {
  return vector_.size();
}
inline int Embedding::vector_size() const {
  return _internal_vector_size();
}
inline void Embedding::clear_vector() {
  vector_.Clear();
}
inline float Embedding::_internal_vector(int index) const {
  return vector_.Get(index);
}
inline float Embedding::vector(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Embedding.vector)
  return _internal_vector(index);
}
inline void Embedding::set_vector(int index, float value) {
  vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.Embedding.vector)
}
inline void Embedding::_internal_add_vector(float value) {
  vector_.Add(value);
}
inline void Embedding::add_vector(float value) {
  _internal_add_vector(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Embedding.vector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Embedding::_internal_vector() const {
  return vector_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Embedding::vector() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Embedding.vector)
  return _internal_vector();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Embedding::_internal_mutable_vector() {
  return &vector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Embedding::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Embedding.vector)
  return _internal_mutable_vector();
}

// uint32 num_dimensions = 2;
inline void Embedding::clear_num_dimensions() {
  num_dimensions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Embedding::_internal_num_dimensions() const {
  return num_dimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Embedding::num_dimensions() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Embedding.num_dimensions)
  return _internal_num_dimensions();
}
inline void Embedding::_internal_set_num_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_dimensions_ = value;
}
inline void Embedding::set_num_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_dimensions(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Embedding.num_dimensions)
}

// -------------------------------------------------------------------

// FaceIdentity

// repeated .clarifai.api.Concept concepts = 1;
inline int FaceIdentity::_internal_concepts_size() const {
  return concepts_.size();
}
inline int FaceIdentity::concepts_size() const {
  return _internal_concepts_size();
}
inline void FaceIdentity::clear_concepts() {
  concepts_.Clear();
}
inline ::clarifai::api::Concept* FaceIdentity::mutable_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.FaceIdentity.concepts)
  return concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
FaceIdentity::mutable_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.FaceIdentity.concepts)
  return &concepts_;
}
inline const ::clarifai::api::Concept& FaceIdentity::_internal_concepts(int index) const {
  return concepts_.Get(index);
}
inline const ::clarifai::api::Concept& FaceIdentity::concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.FaceIdentity.concepts)
  return _internal_concepts(index);
}
inline ::clarifai::api::Concept* FaceIdentity::_internal_add_concepts() {
  return concepts_.Add();
}
inline ::clarifai::api::Concept* FaceIdentity::add_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.FaceIdentity.concepts)
  return _internal_add_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
FaceIdentity::concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.FaceIdentity.concepts)
  return concepts_;
}

// -------------------------------------------------------------------

// FaceAge

// repeated .clarifai.api.Concept concepts = 1;
inline int FaceAge::_internal_concepts_size() const {
  return concepts_.size();
}
inline int FaceAge::concepts_size() const {
  return _internal_concepts_size();
}
inline void FaceAge::clear_concepts() {
  concepts_.Clear();
}
inline ::clarifai::api::Concept* FaceAge::mutable_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.FaceAge.concepts)
  return concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
FaceAge::mutable_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.FaceAge.concepts)
  return &concepts_;
}
inline const ::clarifai::api::Concept& FaceAge::_internal_concepts(int index) const {
  return concepts_.Get(index);
}
inline const ::clarifai::api::Concept& FaceAge::concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.FaceAge.concepts)
  return _internal_concepts(index);
}
inline ::clarifai::api::Concept* FaceAge::_internal_add_concepts() {
  return concepts_.Add();
}
inline ::clarifai::api::Concept* FaceAge::add_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.FaceAge.concepts)
  return _internal_add_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
FaceAge::concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.FaceAge.concepts)
  return concepts_;
}

// -------------------------------------------------------------------

// FaceGenderIdentity

// repeated .clarifai.api.Concept concepts = 1;
inline int FaceGenderIdentity::_internal_concepts_size() const {
  return concepts_.size();
}
inline int FaceGenderIdentity::concepts_size() const {
  return _internal_concepts_size();
}
inline void FaceGenderIdentity::clear_concepts() {
  concepts_.Clear();
}
inline ::clarifai::api::Concept* FaceGenderIdentity::mutable_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.FaceGenderIdentity.concepts)
  return concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
FaceGenderIdentity::mutable_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.FaceGenderIdentity.concepts)
  return &concepts_;
}
inline const ::clarifai::api::Concept& FaceGenderIdentity::_internal_concepts(int index) const {
  return concepts_.Get(index);
}
inline const ::clarifai::api::Concept& FaceGenderIdentity::concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.FaceGenderIdentity.concepts)
  return _internal_concepts(index);
}
inline ::clarifai::api::Concept* FaceGenderIdentity::_internal_add_concepts() {
  return concepts_.Add();
}
inline ::clarifai::api::Concept* FaceGenderIdentity::add_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.FaceGenderIdentity.concepts)
  return _internal_add_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
FaceGenderIdentity::concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.FaceGenderIdentity.concepts)
  return concepts_;
}

// -------------------------------------------------------------------

// FaceMCAffinity

// repeated .clarifai.api.Concept concepts = 1;
inline int FaceMCAffinity::_internal_concepts_size() const {
  return concepts_.size();
}
inline int FaceMCAffinity::concepts_size() const {
  return _internal_concepts_size();
}
inline void FaceMCAffinity::clear_concepts() {
  concepts_.Clear();
}
inline ::clarifai::api::Concept* FaceMCAffinity::mutable_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.FaceMCAffinity.concepts)
  return concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
FaceMCAffinity::mutable_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.FaceMCAffinity.concepts)
  return &concepts_;
}
inline const ::clarifai::api::Concept& FaceMCAffinity::_internal_concepts(int index) const {
  return concepts_.Get(index);
}
inline const ::clarifai::api::Concept& FaceMCAffinity::concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.FaceMCAffinity.concepts)
  return _internal_concepts(index);
}
inline ::clarifai::api::Concept* FaceMCAffinity::_internal_add_concepts() {
  return concepts_.Add();
}
inline ::clarifai::api::Concept* FaceMCAffinity::add_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.FaceMCAffinity.concepts)
  return _internal_add_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
FaceMCAffinity::concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.FaceMCAffinity.concepts)
  return concepts_;
}

// -------------------------------------------------------------------

// Face

// .clarifai.api.FaceIdentity identity = 1;
inline bool Face::_internal_has_identity() const {
  return this != internal_default_instance() && identity_ != nullptr;
}
inline bool Face::has_identity() const {
  return _internal_has_identity();
}
inline void Face::clear_identity() {
  if (GetArena() == nullptr && identity_ != nullptr) {
    delete identity_;
  }
  identity_ = nullptr;
}
inline const ::clarifai::api::FaceIdentity& Face::_internal_identity() const {
  const ::clarifai::api::FaceIdentity* p = identity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::FaceIdentity*>(
      &::clarifai::api::_FaceIdentity_default_instance_);
}
inline const ::clarifai::api::FaceIdentity& Face::identity() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Face.identity)
  return _internal_identity();
}
inline void Face::unsafe_arena_set_allocated_identity(
    ::clarifai::api::FaceIdentity* identity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identity_);
  }
  identity_ = identity;
  if (identity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Face.identity)
}
inline ::clarifai::api::FaceIdentity* Face::release_identity() {
  
  ::clarifai::api::FaceIdentity* temp = identity_;
  identity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::FaceIdentity* Face::unsafe_arena_release_identity() {
  // @@protoc_insertion_point(field_release:clarifai.api.Face.identity)
  
  ::clarifai::api::FaceIdentity* temp = identity_;
  identity_ = nullptr;
  return temp;
}
inline ::clarifai::api::FaceIdentity* Face::_internal_mutable_identity() {
  
  if (identity_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::FaceIdentity>(GetArena());
    identity_ = p;
  }
  return identity_;
}
inline ::clarifai::api::FaceIdentity* Face::mutable_identity() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Face.identity)
  return _internal_mutable_identity();
}
inline void Face::set_allocated_identity(::clarifai::api::FaceIdentity* identity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete identity_;
  }
  if (identity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(identity);
    if (message_arena != submessage_arena) {
      identity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identity, submessage_arena);
    }
    
  } else {
    
  }
  identity_ = identity;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Face.identity)
}

// .clarifai.api.FaceAge age_appearance = 2;
inline bool Face::_internal_has_age_appearance() const {
  return this != internal_default_instance() && age_appearance_ != nullptr;
}
inline bool Face::has_age_appearance() const {
  return _internal_has_age_appearance();
}
inline void Face::clear_age_appearance() {
  if (GetArena() == nullptr && age_appearance_ != nullptr) {
    delete age_appearance_;
  }
  age_appearance_ = nullptr;
}
inline const ::clarifai::api::FaceAge& Face::_internal_age_appearance() const {
  const ::clarifai::api::FaceAge* p = age_appearance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::FaceAge*>(
      &::clarifai::api::_FaceAge_default_instance_);
}
inline const ::clarifai::api::FaceAge& Face::age_appearance() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Face.age_appearance)
  return _internal_age_appearance();
}
inline void Face::unsafe_arena_set_allocated_age_appearance(
    ::clarifai::api::FaceAge* age_appearance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(age_appearance_);
  }
  age_appearance_ = age_appearance;
  if (age_appearance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Face.age_appearance)
}
inline ::clarifai::api::FaceAge* Face::release_age_appearance() {
  
  ::clarifai::api::FaceAge* temp = age_appearance_;
  age_appearance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::FaceAge* Face::unsafe_arena_release_age_appearance() {
  // @@protoc_insertion_point(field_release:clarifai.api.Face.age_appearance)
  
  ::clarifai::api::FaceAge* temp = age_appearance_;
  age_appearance_ = nullptr;
  return temp;
}
inline ::clarifai::api::FaceAge* Face::_internal_mutable_age_appearance() {
  
  if (age_appearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::FaceAge>(GetArena());
    age_appearance_ = p;
  }
  return age_appearance_;
}
inline ::clarifai::api::FaceAge* Face::mutable_age_appearance() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Face.age_appearance)
  return _internal_mutable_age_appearance();
}
inline void Face::set_allocated_age_appearance(::clarifai::api::FaceAge* age_appearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete age_appearance_;
  }
  if (age_appearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(age_appearance);
    if (message_arena != submessage_arena) {
      age_appearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, age_appearance, submessage_arena);
    }
    
  } else {
    
  }
  age_appearance_ = age_appearance;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Face.age_appearance)
}

// .clarifai.api.FaceGenderIdentity gender_appearance = 3;
inline bool Face::_internal_has_gender_appearance() const {
  return this != internal_default_instance() && gender_appearance_ != nullptr;
}
inline bool Face::has_gender_appearance() const {
  return _internal_has_gender_appearance();
}
inline void Face::clear_gender_appearance() {
  if (GetArena() == nullptr && gender_appearance_ != nullptr) {
    delete gender_appearance_;
  }
  gender_appearance_ = nullptr;
}
inline const ::clarifai::api::FaceGenderIdentity& Face::_internal_gender_appearance() const {
  const ::clarifai::api::FaceGenderIdentity* p = gender_appearance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::FaceGenderIdentity*>(
      &::clarifai::api::_FaceGenderIdentity_default_instance_);
}
inline const ::clarifai::api::FaceGenderIdentity& Face::gender_appearance() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Face.gender_appearance)
  return _internal_gender_appearance();
}
inline void Face::unsafe_arena_set_allocated_gender_appearance(
    ::clarifai::api::FaceGenderIdentity* gender_appearance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gender_appearance_);
  }
  gender_appearance_ = gender_appearance;
  if (gender_appearance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Face.gender_appearance)
}
inline ::clarifai::api::FaceGenderIdentity* Face::release_gender_appearance() {
  
  ::clarifai::api::FaceGenderIdentity* temp = gender_appearance_;
  gender_appearance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::FaceGenderIdentity* Face::unsafe_arena_release_gender_appearance() {
  // @@protoc_insertion_point(field_release:clarifai.api.Face.gender_appearance)
  
  ::clarifai::api::FaceGenderIdentity* temp = gender_appearance_;
  gender_appearance_ = nullptr;
  return temp;
}
inline ::clarifai::api::FaceGenderIdentity* Face::_internal_mutable_gender_appearance() {
  
  if (gender_appearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::FaceGenderIdentity>(GetArena());
    gender_appearance_ = p;
  }
  return gender_appearance_;
}
inline ::clarifai::api::FaceGenderIdentity* Face::mutable_gender_appearance() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Face.gender_appearance)
  return _internal_mutable_gender_appearance();
}
inline void Face::set_allocated_gender_appearance(::clarifai::api::FaceGenderIdentity* gender_appearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gender_appearance_;
  }
  if (gender_appearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gender_appearance);
    if (message_arena != submessage_arena) {
      gender_appearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gender_appearance, submessage_arena);
    }
    
  } else {
    
  }
  gender_appearance_ = gender_appearance;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Face.gender_appearance)
}

// .clarifai.api.FaceMCAffinity multicultural_appearance = 4;
inline bool Face::_internal_has_multicultural_appearance() const {
  return this != internal_default_instance() && multicultural_appearance_ != nullptr;
}
inline bool Face::has_multicultural_appearance() const {
  return _internal_has_multicultural_appearance();
}
inline void Face::clear_multicultural_appearance() {
  if (GetArena() == nullptr && multicultural_appearance_ != nullptr) {
    delete multicultural_appearance_;
  }
  multicultural_appearance_ = nullptr;
}
inline const ::clarifai::api::FaceMCAffinity& Face::_internal_multicultural_appearance() const {
  const ::clarifai::api::FaceMCAffinity* p = multicultural_appearance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::FaceMCAffinity*>(
      &::clarifai::api::_FaceMCAffinity_default_instance_);
}
inline const ::clarifai::api::FaceMCAffinity& Face::multicultural_appearance() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Face.multicultural_appearance)
  return _internal_multicultural_appearance();
}
inline void Face::unsafe_arena_set_allocated_multicultural_appearance(
    ::clarifai::api::FaceMCAffinity* multicultural_appearance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(multicultural_appearance_);
  }
  multicultural_appearance_ = multicultural_appearance;
  if (multicultural_appearance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Face.multicultural_appearance)
}
inline ::clarifai::api::FaceMCAffinity* Face::release_multicultural_appearance() {
  
  ::clarifai::api::FaceMCAffinity* temp = multicultural_appearance_;
  multicultural_appearance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::FaceMCAffinity* Face::unsafe_arena_release_multicultural_appearance() {
  // @@protoc_insertion_point(field_release:clarifai.api.Face.multicultural_appearance)
  
  ::clarifai::api::FaceMCAffinity* temp = multicultural_appearance_;
  multicultural_appearance_ = nullptr;
  return temp;
}
inline ::clarifai::api::FaceMCAffinity* Face::_internal_mutable_multicultural_appearance() {
  
  if (multicultural_appearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::FaceMCAffinity>(GetArena());
    multicultural_appearance_ = p;
  }
  return multicultural_appearance_;
}
inline ::clarifai::api::FaceMCAffinity* Face::mutable_multicultural_appearance() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Face.multicultural_appearance)
  return _internal_mutable_multicultural_appearance();
}
inline void Face::set_allocated_multicultural_appearance(::clarifai::api::FaceMCAffinity* multicultural_appearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete multicultural_appearance_;
  }
  if (multicultural_appearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(multicultural_appearance);
    if (message_arena != submessage_arena) {
      multicultural_appearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multicultural_appearance, submessage_arena);
    }
    
  } else {
    
  }
  multicultural_appearance_ = multicultural_appearance;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Face.multicultural_appearance)
}

// -------------------------------------------------------------------

// Focus

// float density = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void Focus::clear_density() {
  density_ = 0;
}
inline float Focus::_internal_density() const {
  return density_;
}
inline float Focus::density() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Focus.density)
  return _internal_density();
}
inline void Focus::_internal_set_density(float value) {
  
  density_ = value;
}
inline void Focus::set_density(float value) {
  _internal_set_density(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Focus.density)
}

// float value = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void Focus::clear_value() {
  value_ = 0;
}
inline float Focus::_internal_value() const {
  return value_;
}
inline float Focus::value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Focus.value)
  return _internal_value();
}
inline void Focus::_internal_set_value(float value) {
  
  value_ = value;
}
inline void Focus::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Focus.value)
}

// -------------------------------------------------------------------

// GeoPoint

// float longitude = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void GeoPoint::clear_longitude() {
  longitude_ = 0;
}
inline float GeoPoint::_internal_longitude() const {
  return longitude_;
}
inline float GeoPoint::longitude() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GeoPoint.longitude)
  return _internal_longitude();
}
inline void GeoPoint::_internal_set_longitude(float value) {
  
  longitude_ = value;
}
inline void GeoPoint::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GeoPoint.longitude)
}

// float latitude = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void GeoPoint::clear_latitude() {
  latitude_ = 0;
}
inline float GeoPoint::_internal_latitude() const {
  return latitude_;
}
inline float GeoPoint::latitude() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GeoPoint.latitude)
  return _internal_latitude();
}
inline void GeoPoint::_internal_set_latitude(float value) {
  
  latitude_ = value;
}
inline void GeoPoint::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GeoPoint.latitude)
}

// -------------------------------------------------------------------

// GeoLimit

// string type = 1;
inline void GeoLimit::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GeoLimit::type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GeoLimit.type)
  return _internal_type();
}
inline void GeoLimit::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GeoLimit.type)
}
inline std::string* GeoLimit::mutable_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GeoLimit.type)
  return _internal_mutable_type();
}
inline const std::string& GeoLimit::_internal_type() const {
  return type_.Get();
}
inline void GeoLimit::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GeoLimit::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GeoLimit.type)
}
inline void GeoLimit::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.GeoLimit.type)
}
inline void GeoLimit::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GeoLimit.type)
}
inline std::string* GeoLimit::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GeoLimit::release_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.GeoLimit.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeoLimit::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GeoLimit.type)
}

// float value = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void GeoLimit::clear_value() {
  value_ = 0;
}
inline float GeoLimit::_internal_value() const {
  return value_;
}
inline float GeoLimit::value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GeoLimit.value)
  return _internal_value();
}
inline void GeoLimit::_internal_set_value(float value) {
  
  value_ = value;
}
inline void GeoLimit::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GeoLimit.value)
}

// -------------------------------------------------------------------

// GeoBoxedPoint

// .clarifai.api.GeoPoint geo_point = 1;
inline bool GeoBoxedPoint::_internal_has_geo_point() const {
  return this != internal_default_instance() && geo_point_ != nullptr;
}
inline bool GeoBoxedPoint::has_geo_point() const {
  return _internal_has_geo_point();
}
inline void GeoBoxedPoint::clear_geo_point() {
  if (GetArena() == nullptr && geo_point_ != nullptr) {
    delete geo_point_;
  }
  geo_point_ = nullptr;
}
inline const ::clarifai::api::GeoPoint& GeoBoxedPoint::_internal_geo_point() const {
  const ::clarifai::api::GeoPoint* p = geo_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::GeoPoint*>(
      &::clarifai::api::_GeoPoint_default_instance_);
}
inline const ::clarifai::api::GeoPoint& GeoBoxedPoint::geo_point() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GeoBoxedPoint.geo_point)
  return _internal_geo_point();
}
inline void GeoBoxedPoint::unsafe_arena_set_allocated_geo_point(
    ::clarifai::api::GeoPoint* geo_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geo_point_);
  }
  geo_point_ = geo_point;
  if (geo_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GeoBoxedPoint.geo_point)
}
inline ::clarifai::api::GeoPoint* GeoBoxedPoint::release_geo_point() {
  
  ::clarifai::api::GeoPoint* temp = geo_point_;
  geo_point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::GeoPoint* GeoBoxedPoint::unsafe_arena_release_geo_point() {
  // @@protoc_insertion_point(field_release:clarifai.api.GeoBoxedPoint.geo_point)
  
  ::clarifai::api::GeoPoint* temp = geo_point_;
  geo_point_ = nullptr;
  return temp;
}
inline ::clarifai::api::GeoPoint* GeoBoxedPoint::_internal_mutable_geo_point() {
  
  if (geo_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::GeoPoint>(GetArena());
    geo_point_ = p;
  }
  return geo_point_;
}
inline ::clarifai::api::GeoPoint* GeoBoxedPoint::mutable_geo_point() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GeoBoxedPoint.geo_point)
  return _internal_mutable_geo_point();
}
inline void GeoBoxedPoint::set_allocated_geo_point(::clarifai::api::GeoPoint* geo_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete geo_point_;
  }
  if (geo_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geo_point);
    if (message_arena != submessage_arena) {
      geo_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo_point, submessage_arena);
    }
    
  } else {
    
  }
  geo_point_ = geo_point;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GeoBoxedPoint.geo_point)
}

// -------------------------------------------------------------------

// Geo

// .clarifai.api.GeoPoint geo_point = 1;
inline bool Geo::_internal_has_geo_point() const {
  return this != internal_default_instance() && geo_point_ != nullptr;
}
inline bool Geo::has_geo_point() const {
  return _internal_has_geo_point();
}
inline void Geo::clear_geo_point() {
  if (GetArena() == nullptr && geo_point_ != nullptr) {
    delete geo_point_;
  }
  geo_point_ = nullptr;
}
inline const ::clarifai::api::GeoPoint& Geo::_internal_geo_point() const {
  const ::clarifai::api::GeoPoint* p = geo_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::GeoPoint*>(
      &::clarifai::api::_GeoPoint_default_instance_);
}
inline const ::clarifai::api::GeoPoint& Geo::geo_point() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Geo.geo_point)
  return _internal_geo_point();
}
inline void Geo::unsafe_arena_set_allocated_geo_point(
    ::clarifai::api::GeoPoint* geo_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geo_point_);
  }
  geo_point_ = geo_point;
  if (geo_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Geo.geo_point)
}
inline ::clarifai::api::GeoPoint* Geo::release_geo_point() {
  
  ::clarifai::api::GeoPoint* temp = geo_point_;
  geo_point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::GeoPoint* Geo::unsafe_arena_release_geo_point() {
  // @@protoc_insertion_point(field_release:clarifai.api.Geo.geo_point)
  
  ::clarifai::api::GeoPoint* temp = geo_point_;
  geo_point_ = nullptr;
  return temp;
}
inline ::clarifai::api::GeoPoint* Geo::_internal_mutable_geo_point() {
  
  if (geo_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::GeoPoint>(GetArena());
    geo_point_ = p;
  }
  return geo_point_;
}
inline ::clarifai::api::GeoPoint* Geo::mutable_geo_point() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Geo.geo_point)
  return _internal_mutable_geo_point();
}
inline void Geo::set_allocated_geo_point(::clarifai::api::GeoPoint* geo_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete geo_point_;
  }
  if (geo_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geo_point);
    if (message_arena != submessage_arena) {
      geo_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo_point, submessage_arena);
    }
    
  } else {
    
  }
  geo_point_ = geo_point;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Geo.geo_point)
}

// .clarifai.api.GeoLimit geo_limit = 2;
inline bool Geo::_internal_has_geo_limit() const {
  return this != internal_default_instance() && geo_limit_ != nullptr;
}
inline bool Geo::has_geo_limit() const {
  return _internal_has_geo_limit();
}
inline void Geo::clear_geo_limit() {
  if (GetArena() == nullptr && geo_limit_ != nullptr) {
    delete geo_limit_;
  }
  geo_limit_ = nullptr;
}
inline const ::clarifai::api::GeoLimit& Geo::_internal_geo_limit() const {
  const ::clarifai::api::GeoLimit* p = geo_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::GeoLimit*>(
      &::clarifai::api::_GeoLimit_default_instance_);
}
inline const ::clarifai::api::GeoLimit& Geo::geo_limit() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Geo.geo_limit)
  return _internal_geo_limit();
}
inline void Geo::unsafe_arena_set_allocated_geo_limit(
    ::clarifai::api::GeoLimit* geo_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geo_limit_);
  }
  geo_limit_ = geo_limit;
  if (geo_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Geo.geo_limit)
}
inline ::clarifai::api::GeoLimit* Geo::release_geo_limit() {
  
  ::clarifai::api::GeoLimit* temp = geo_limit_;
  geo_limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::GeoLimit* Geo::unsafe_arena_release_geo_limit() {
  // @@protoc_insertion_point(field_release:clarifai.api.Geo.geo_limit)
  
  ::clarifai::api::GeoLimit* temp = geo_limit_;
  geo_limit_ = nullptr;
  return temp;
}
inline ::clarifai::api::GeoLimit* Geo::_internal_mutable_geo_limit() {
  
  if (geo_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::GeoLimit>(GetArena());
    geo_limit_ = p;
  }
  return geo_limit_;
}
inline ::clarifai::api::GeoLimit* Geo::mutable_geo_limit() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Geo.geo_limit)
  return _internal_mutable_geo_limit();
}
inline void Geo::set_allocated_geo_limit(::clarifai::api::GeoLimit* geo_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete geo_limit_;
  }
  if (geo_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geo_limit);
    if (message_arena != submessage_arena) {
      geo_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo_limit, submessage_arena);
    }
    
  } else {
    
  }
  geo_limit_ = geo_limit;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Geo.geo_limit)
}

// repeated .clarifai.api.GeoBoxedPoint geo_box = 3;
inline int Geo::_internal_geo_box_size() const {
  return geo_box_.size();
}
inline int Geo::geo_box_size() const {
  return _internal_geo_box_size();
}
inline void Geo::clear_geo_box() {
  geo_box_.Clear();
}
inline ::clarifai::api::GeoBoxedPoint* Geo::mutable_geo_box(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Geo.geo_box)
  return geo_box_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::GeoBoxedPoint >*
Geo::mutable_geo_box() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Geo.geo_box)
  return &geo_box_;
}
inline const ::clarifai::api::GeoBoxedPoint& Geo::_internal_geo_box(int index) const {
  return geo_box_.Get(index);
}
inline const ::clarifai::api::GeoBoxedPoint& Geo::geo_box(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Geo.geo_box)
  return _internal_geo_box(index);
}
inline ::clarifai::api::GeoBoxedPoint* Geo::_internal_add_geo_box() {
  return geo_box_.Add();
}
inline ::clarifai::api::GeoBoxedPoint* Geo::add_geo_box() {
  // @@protoc_insertion_point(field_add:clarifai.api.Geo.geo_box)
  return _internal_add_geo_box();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::GeoBoxedPoint >&
Geo::geo_box() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Geo.geo_box)
  return geo_box_;
}

// -------------------------------------------------------------------

// Image

// string url = 1;
inline void Image::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Image::url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Image.url)
  return _internal_url();
}
inline void Image::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Image.url)
}
inline std::string* Image::mutable_url() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Image.url)
  return _internal_mutable_url();
}
inline const std::string& Image::_internal_url() const {
  return url_.Get();
}
inline void Image::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Image::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Image.url)
}
inline void Image::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Image.url)
}
inline void Image::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Image.url)
}
inline std::string* Image::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Image::release_url() {
  // @@protoc_insertion_point(field_release:clarifai.api.Image.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Image::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Image.url)
}

// bytes base64 = 2;
inline void Image::clear_base64() {
  base64_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Image::base64() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Image.base64)
  return _internal_base64();
}
inline void Image::set_base64(const std::string& value) {
  _internal_set_base64(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Image.base64)
}
inline std::string* Image::mutable_base64() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Image.base64)
  return _internal_mutable_base64();
}
inline const std::string& Image::_internal_base64() const {
  return base64_.Get();
}
inline void Image::_internal_set_base64(const std::string& value) {
  
  base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Image::set_base64(std::string&& value) {
  
  base64_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Image.base64)
}
inline void Image::set_base64(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Image.base64)
}
inline void Image::set_base64(const void* value,
    size_t size) {
  
  base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Image.base64)
}
inline std::string* Image::_internal_mutable_base64() {
  
  return base64_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Image::release_base64() {
  // @@protoc_insertion_point(field_release:clarifai.api.Image.base64)
  return base64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Image::set_allocated_base64(std::string* base64) {
  if (base64 != nullptr) {
    
  } else {
    
  }
  base64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base64,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Image.base64)
}

// bool allow_duplicate_url = 4;
inline void Image::clear_allow_duplicate_url() {
  allow_duplicate_url_ = false;
}
inline bool Image::_internal_allow_duplicate_url() const {
  return allow_duplicate_url_;
}
inline bool Image::allow_duplicate_url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Image.allow_duplicate_url)
  return _internal_allow_duplicate_url();
}
inline void Image::_internal_set_allow_duplicate_url(bool value) {
  
  allow_duplicate_url_ = value;
}
inline void Image::set_allow_duplicate_url(bool value) {
  _internal_set_allow_duplicate_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Image.allow_duplicate_url)
}

// .clarifai.api.HostedURL hosted = 5;
inline bool Image::_internal_has_hosted() const {
  return this != internal_default_instance() && hosted_ != nullptr;
}
inline bool Image::has_hosted() const {
  return _internal_has_hosted();
}
inline void Image::clear_hosted() {
  if (GetArena() == nullptr && hosted_ != nullptr) {
    delete hosted_;
  }
  hosted_ = nullptr;
}
inline const ::clarifai::api::HostedURL& Image::_internal_hosted() const {
  const ::clarifai::api::HostedURL* p = hosted_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::HostedURL*>(
      &::clarifai::api::_HostedURL_default_instance_);
}
inline const ::clarifai::api::HostedURL& Image::hosted() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Image.hosted)
  return _internal_hosted();
}
inline void Image::unsafe_arena_set_allocated_hosted(
    ::clarifai::api::HostedURL* hosted) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hosted_);
  }
  hosted_ = hosted;
  if (hosted) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Image.hosted)
}
inline ::clarifai::api::HostedURL* Image::release_hosted() {
  
  ::clarifai::api::HostedURL* temp = hosted_;
  hosted_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::HostedURL* Image::unsafe_arena_release_hosted() {
  // @@protoc_insertion_point(field_release:clarifai.api.Image.hosted)
  
  ::clarifai::api::HostedURL* temp = hosted_;
  hosted_ = nullptr;
  return temp;
}
inline ::clarifai::api::HostedURL* Image::_internal_mutable_hosted() {
  
  if (hosted_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::HostedURL>(GetArena());
    hosted_ = p;
  }
  return hosted_;
}
inline ::clarifai::api::HostedURL* Image::mutable_hosted() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Image.hosted)
  return _internal_mutable_hosted();
}
inline void Image::set_allocated_hosted(::clarifai::api::HostedURL* hosted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hosted_;
  }
  if (hosted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hosted);
    if (message_arena != submessage_arena) {
      hosted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hosted, submessage_arena);
    }
    
  } else {
    
  }
  hosted_ = hosted;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Image.hosted)
}

// -------------------------------------------------------------------

// HostedURL

// string prefix = 1;
inline void HostedURL::clear_prefix() {
  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostedURL::prefix() const {
  // @@protoc_insertion_point(field_get:clarifai.api.HostedURL.prefix)
  return _internal_prefix();
}
inline void HostedURL::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:clarifai.api.HostedURL.prefix)
}
inline std::string* HostedURL::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.HostedURL.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& HostedURL::_internal_prefix() const {
  return prefix_.Get();
}
inline void HostedURL::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostedURL::set_prefix(std::string&& value) {
  
  prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.HostedURL.prefix)
}
inline void HostedURL::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.HostedURL.prefix)
}
inline void HostedURL::set_prefix(const char* value,
    size_t size) {
  
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.HostedURL.prefix)
}
inline std::string* HostedURL::_internal_mutable_prefix() {
  
  return prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostedURL::release_prefix() {
  // @@protoc_insertion_point(field_release:clarifai.api.HostedURL.prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostedURL::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.HostedURL.prefix)
}

// string suffix = 2;
inline void HostedURL::clear_suffix() {
  suffix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostedURL::suffix() const {
  // @@protoc_insertion_point(field_get:clarifai.api.HostedURL.suffix)
  return _internal_suffix();
}
inline void HostedURL::set_suffix(const std::string& value) {
  _internal_set_suffix(value);
  // @@protoc_insertion_point(field_set:clarifai.api.HostedURL.suffix)
}
inline std::string* HostedURL::mutable_suffix() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.HostedURL.suffix)
  return _internal_mutable_suffix();
}
inline const std::string& HostedURL::_internal_suffix() const {
  return suffix_.Get();
}
inline void HostedURL::_internal_set_suffix(const std::string& value) {
  
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostedURL::set_suffix(std::string&& value) {
  
  suffix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.HostedURL.suffix)
}
inline void HostedURL::set_suffix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.HostedURL.suffix)
}
inline void HostedURL::set_suffix(const char* value,
    size_t size) {
  
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.HostedURL.suffix)
}
inline std::string* HostedURL::_internal_mutable_suffix() {
  
  return suffix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostedURL::release_suffix() {
  // @@protoc_insertion_point(field_release:clarifai.api.HostedURL.suffix)
  return suffix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostedURL::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    
  } else {
    
  }
  suffix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.HostedURL.suffix)
}

// repeated string sizes = 3;
inline int HostedURL::_internal_sizes_size() const {
  return sizes_.size();
}
inline int HostedURL::sizes_size() const {
  return _internal_sizes_size();
}
inline void HostedURL::clear_sizes() {
  sizes_.Clear();
}
inline std::string* HostedURL::add_sizes() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.HostedURL.sizes)
  return _internal_add_sizes();
}
inline const std::string& HostedURL::_internal_sizes(int index) const {
  return sizes_.Get(index);
}
inline const std::string& HostedURL::sizes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.HostedURL.sizes)
  return _internal_sizes(index);
}
inline std::string* HostedURL::mutable_sizes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.HostedURL.sizes)
  return sizes_.Mutable(index);
}
inline void HostedURL::set_sizes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.HostedURL.sizes)
  sizes_.Mutable(index)->assign(value);
}
inline void HostedURL::set_sizes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.HostedURL.sizes)
  sizes_.Mutable(index)->assign(std::move(value));
}
inline void HostedURL::set_sizes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sizes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.HostedURL.sizes)
}
inline void HostedURL::set_sizes(int index, const char* value, size_t size) {
  sizes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.HostedURL.sizes)
}
inline std::string* HostedURL::_internal_add_sizes() {
  return sizes_.Add();
}
inline void HostedURL::add_sizes(const std::string& value) {
  sizes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.HostedURL.sizes)
}
inline void HostedURL::add_sizes(std::string&& value) {
  sizes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.HostedURL.sizes)
}
inline void HostedURL::add_sizes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sizes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.HostedURL.sizes)
}
inline void HostedURL::add_sizes(const char* value, size_t size) {
  sizes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.HostedURL.sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HostedURL::sizes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.HostedURL.sizes)
  return sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HostedURL::mutable_sizes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.HostedURL.sizes)
  return &sizes_;
}

// -------------------------------------------------------------------

// Input

// string id = 1;
inline void Input::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Input::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Input.id)
  return _internal_id();
}
inline void Input::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Input.id)
}
inline std::string* Input::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Input.id)
  return _internal_mutable_id();
}
inline const std::string& Input::_internal_id() const {
  return id_.Get();
}
inline void Input::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Input::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Input.id)
}
inline void Input::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Input.id)
}
inline void Input::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Input.id)
}
inline std::string* Input::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Input::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Input.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Input::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Input.id)
}

// .clarifai.api.Data data = 2;
inline bool Input::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Input::has_data() const {
  return _internal_has_data();
}
inline void Input::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::clarifai::api::Data& Input::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& Input::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Input.data)
  return _internal_data();
}
inline void Input::unsafe_arena_set_allocated_data(
    ::clarifai::api::Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Input.data)
}
inline ::clarifai::api::Data* Input::release_data() {
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Data* Input::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.Input.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* Input::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* Input::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Input.data)
  return _internal_mutable_data();
}
inline void Input::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Input.data)
}

// .google.protobuf.Timestamp created_at = 4;
inline bool Input::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Input::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Input::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Input::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Input.created_at)
  return _internal_created_at();
}
inline void Input::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Input.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Input.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Input.created_at)
  return _internal_mutable_created_at();
}
inline void Input::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Input.created_at)
}

// .google.protobuf.Timestamp modified_at = 5;
inline bool Input::_internal_has_modified_at() const {
  return this != internal_default_instance() && modified_at_ != nullptr;
}
inline bool Input::has_modified_at() const {
  return _internal_has_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Input::_internal_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Input::modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Input.modified_at)
  return _internal_modified_at();
}
inline void Input::unsafe_arena_set_allocated_modified_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  modified_at_ = modified_at;
  if (modified_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Input.modified_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::release_modified_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::unsafe_arena_release_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Input.modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::_internal_mutable_modified_at() {
  
  if (modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    modified_at_ = p;
  }
  return modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::mutable_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Input.modified_at)
  return _internal_mutable_modified_at();
}
inline void Input::set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  if (modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_at, submessage_arena);
    }
    
  } else {
    
  }
  modified_at_ = modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Input.modified_at)
}

// .clarifai.api.status.Status status = 6;
inline bool Input::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Input::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& Input::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& Input::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Input.status)
  return _internal_status();
}
inline void Input::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Input.status)
}
inline ::clarifai::api::status::Status* Input::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::status::Status* Input::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.Input.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* Input::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* Input::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Input.status)
  return _internal_mutable_status();
}
inline void Input::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Input.status)
}

// -------------------------------------------------------------------

// InputCount

// uint32 processed = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_processed() {
  processed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_processed() const {
  return processed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::processed() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.processed)
  return _internal_processed();
}
inline void InputCount::_internal_set_processed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  processed_ = value;
}
inline void InputCount::set_processed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_processed(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.processed)
}

// uint32 to_process = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_to_process() {
  to_process_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_to_process() const {
  return to_process_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::to_process() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.to_process)
  return _internal_to_process();
}
inline void InputCount::_internal_set_to_process(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  to_process_ = value;
}
inline void InputCount::set_to_process(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to_process(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.to_process)
}

// uint32 errors = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_errors() {
  errors_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_errors() const {
  return errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::errors() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.errors)
  return _internal_errors();
}
inline void InputCount::_internal_set_errors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  errors_ = value;
}
inline void InputCount::set_errors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errors(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.errors)
}

// uint32 processing = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_processing() {
  processing_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_processing() const {
  return processing_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::processing() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.processing)
  return _internal_processing();
}
inline void InputCount::_internal_set_processing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  processing_ = value;
}
inline void InputCount::set_processing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_processing(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.processing)
}

// uint32 reindexed = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_reindexed() {
  reindexed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_reindexed() const {
  return reindexed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::reindexed() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.reindexed)
  return _internal_reindexed();
}
inline void InputCount::_internal_set_reindexed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reindexed_ = value;
}
inline void InputCount::set_reindexed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reindexed(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.reindexed)
}

// uint32 to_reindex = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_to_reindex() {
  to_reindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_to_reindex() const {
  return to_reindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::to_reindex() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.to_reindex)
  return _internal_to_reindex();
}
inline void InputCount::_internal_set_to_reindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  to_reindex_ = value;
}
inline void InputCount::set_to_reindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to_reindex(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.to_reindex)
}

// uint32 reindex_errors = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_reindex_errors() {
  reindex_errors_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_reindex_errors() const {
  return reindex_errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::reindex_errors() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.reindex_errors)
  return _internal_reindex_errors();
}
inline void InputCount::_internal_set_reindex_errors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reindex_errors_ = value;
}
inline void InputCount::set_reindex_errors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reindex_errors(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.reindex_errors)
}

// uint32 reindexing = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_reindexing() {
  reindexing_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_reindexing() const {
  return reindexing_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::reindexing() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.reindexing)
  return _internal_reindexing();
}
inline void InputCount::_internal_set_reindexing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reindexing_ = value;
}
inline void InputCount::set_reindexing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reindexing(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.reindexing)
}

// -------------------------------------------------------------------

// Key

// string id = 1;
inline void Key::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Key::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.id)
  return _internal_id();
}
inline void Key::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Key.id)
}
inline std::string* Key::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.id)
  return _internal_mutable_id();
}
inline const std::string& Key::_internal_id() const {
  return id_.Get();
}
inline void Key::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Key::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Key.id)
}
inline void Key::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Key.id)
}
inline void Key::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Key.id)
}
inline std::string* Key::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Key::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Key.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Key::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Key.id)
}

// string type = 8;
inline void Key::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Key::type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.type)
  return _internal_type();
}
inline void Key::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Key.type)
}
inline std::string* Key::mutable_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.type)
  return _internal_mutable_type();
}
inline const std::string& Key::_internal_type() const {
  return type_.Get();
}
inline void Key::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Key::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Key.type)
}
inline void Key::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Key.type)
}
inline void Key::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Key.type)
}
inline std::string* Key::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Key::release_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.Key.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Key::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Key.type)
}

// string description = 2;
inline void Key::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Key::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.description)
  return _internal_description();
}
inline void Key::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Key.description)
}
inline std::string* Key::mutable_description() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.description)
  return _internal_mutable_description();
}
inline const std::string& Key::_internal_description() const {
  return description_.Get();
}
inline void Key::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Key::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Key.description)
}
inline void Key::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Key.description)
}
inline void Key::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Key.description)
}
inline std::string* Key::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Key::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.Key.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Key::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Key.description)
}

// repeated string scopes = 3;
inline int Key::_internal_scopes_size() const {
  return scopes_.size();
}
inline int Key::scopes_size() const {
  return _internal_scopes_size();
}
inline void Key::clear_scopes() {
  scopes_.Clear();
}
inline std::string* Key::add_scopes() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.Key.scopes)
  return _internal_add_scopes();
}
inline const std::string& Key::_internal_scopes(int index) const {
  return scopes_.Get(index);
}
inline const std::string& Key::scopes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.scopes)
  return _internal_scopes(index);
}
inline std::string* Key::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.scopes)
  return scopes_.Mutable(index);
}
inline void Key::set_scopes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Key.scopes)
  scopes_.Mutable(index)->assign(value);
}
inline void Key::set_scopes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Key.scopes)
  scopes_.Mutable(index)->assign(std::move(value));
}
inline void Key::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.Key.scopes)
}
inline void Key::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Key.scopes)
}
inline std::string* Key::_internal_add_scopes() {
  return scopes_.Add();
}
inline void Key::add_scopes(const std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Key.scopes)
}
inline void Key::add_scopes(std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.Key.scopes)
}
inline void Key::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.Key.scopes)
}
inline void Key::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.Key.scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Key::scopes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Key.scopes)
  return scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Key::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Key.scopes)
  return &scopes_;
}

// repeated string endpoints = 7;
inline int Key::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int Key::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void Key::clear_endpoints() {
  endpoints_.Clear();
}
inline std::string* Key::add_endpoints() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.Key.endpoints)
  return _internal_add_endpoints();
}
inline const std::string& Key::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const std::string& Key::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.endpoints)
  return _internal_endpoints(index);
}
inline std::string* Key::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.endpoints)
  return endpoints_.Mutable(index);
}
inline void Key::set_endpoints(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Key.endpoints)
  endpoints_.Mutable(index)->assign(value);
}
inline void Key::set_endpoints(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Key.endpoints)
  endpoints_.Mutable(index)->assign(std::move(value));
}
inline void Key::set_endpoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.Key.endpoints)
}
inline void Key::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Key.endpoints)
}
inline std::string* Key::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline void Key::add_endpoints(const std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Key.endpoints)
}
inline void Key::add_endpoints(std::string&& value) {
  endpoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.Key.endpoints)
}
inline void Key::add_endpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.Key.endpoints)
}
inline void Key::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.Key.endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Key::endpoints() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Key.endpoints)
  return endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Key::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Key.endpoints)
  return &endpoints_;
}

// repeated .clarifai.api.App apps = 4;
inline int Key::_internal_apps_size() const {
  return apps_.size();
}
inline int Key::apps_size() const {
  return _internal_apps_size();
}
inline void Key::clear_apps() {
  apps_.Clear();
}
inline ::clarifai::api::App* Key::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
Key::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Key.apps)
  return &apps_;
}
inline const ::clarifai::api::App& Key::_internal_apps(int index) const {
  return apps_.Get(index);
}
inline const ::clarifai::api::App& Key::apps(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.apps)
  return _internal_apps(index);
}
inline ::clarifai::api::App* Key::_internal_add_apps() {
  return apps_.Add();
}
inline ::clarifai::api::App* Key::add_apps() {
  // @@protoc_insertion_point(field_add:clarifai.api.Key.apps)
  return _internal_add_apps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
Key::apps() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Key.apps)
  return apps_;
}

// .google.protobuf.Timestamp created_at = 5;
inline bool Key::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Key::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Key::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Key::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.created_at)
  return _internal_created_at();
}
inline void Key::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Key.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Key::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Key::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Key.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Key::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Key::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.created_at)
  return _internal_mutable_created_at();
}
inline void Key::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Key.created_at)
}

// .google.protobuf.Timestamp expires_at = 6;
inline bool Key::_internal_has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline bool Key::has_expires_at() const {
  return _internal_has_expires_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Key::_internal_expires_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expires_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Key::expires_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.expires_at)
  return _internal_expires_at();
}
inline void Key::unsafe_arena_set_allocated_expires_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  expires_at_ = expires_at;
  if (expires_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Key.expires_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Key::release_expires_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Key::unsafe_arena_release_expires_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Key.expires_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Key::_internal_mutable_expires_at() {
  
  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expires_at_ = p;
  }
  return expires_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Key::mutable_expires_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.expires_at)
  return _internal_mutable_expires_at();
}
inline void Key::set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at)->GetArena();
    if (message_arena != submessage_arena) {
      expires_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }
    
  } else {
    
  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Key.expires_at)
}

// -------------------------------------------------------------------

// LicenseLimit

// .clarifai.api.Model model = 1;
inline bool LicenseLimit::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool LicenseLimit::has_model() const {
  return _internal_has_model();
}
inline void LicenseLimit::clear_model() {
  if (GetArena() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
inline const ::clarifai::api::Model& LicenseLimit::_internal_model() const {
  const ::clarifai::api::Model* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Model*>(
      &::clarifai::api::_Model_default_instance_);
}
inline const ::clarifai::api::Model& LicenseLimit::model() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LicenseLimit.model)
  return _internal_model();
}
inline void LicenseLimit::unsafe_arena_set_allocated_model(
    ::clarifai::api::Model* model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.LicenseLimit.model)
}
inline ::clarifai::api::Model* LicenseLimit::release_model() {
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Model* LicenseLimit::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:clarifai.api.LicenseLimit.model)
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::api::Model* LicenseLimit::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Model>(GetArena());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::api::Model* LicenseLimit::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.LicenseLimit.model)
  return _internal_mutable_model();
}
inline void LicenseLimit::set_allocated_model(::clarifai::api::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete model_;
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model);
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.LicenseLimit.model)
}

// .google.protobuf.Timestamp expires_at = 2;
inline bool LicenseLimit::_internal_has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline bool LicenseLimit::has_expires_at() const {
  return _internal_has_expires_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LicenseLimit::_internal_expires_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expires_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LicenseLimit::expires_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LicenseLimit.expires_at)
  return _internal_expires_at();
}
inline void LicenseLimit::unsafe_arena_set_allocated_expires_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  expires_at_ = expires_at;
  if (expires_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.LicenseLimit.expires_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LicenseLimit::release_expires_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LicenseLimit::unsafe_arena_release_expires_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.LicenseLimit.expires_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LicenseLimit::_internal_mutable_expires_at() {
  
  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expires_at_ = p;
  }
  return expires_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LicenseLimit::mutable_expires_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.LicenseLimit.expires_at)
  return _internal_mutable_expires_at();
}
inline void LicenseLimit::set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at)->GetArena();
    if (message_arena != submessage_arena) {
      expires_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }
    
  } else {
    
  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.LicenseLimit.expires_at)
}

// int64 max_operation_count = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LicenseLimit::clear_max_operation_count() {
  max_operation_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LicenseLimit::_internal_max_operation_count() const {
  return max_operation_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LicenseLimit::max_operation_count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LicenseLimit.max_operation_count)
  return _internal_max_operation_count();
}
inline void LicenseLimit::_internal_set_max_operation_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_operation_count_ = value;
}
inline void LicenseLimit::set_max_operation_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_operation_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LicenseLimit.max_operation_count)
}

// .clarifai.api.status.Status status = 4;
inline bool LicenseLimit::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool LicenseLimit::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& LicenseLimit::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& LicenseLimit::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LicenseLimit.status)
  return _internal_status();
}
inline void LicenseLimit::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.LicenseLimit.status)
}
inline ::clarifai::api::status::Status* LicenseLimit::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::status::Status* LicenseLimit::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.LicenseLimit.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* LicenseLimit::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* LicenseLimit::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.LicenseLimit.status)
  return _internal_mutable_status();
}
inline void LicenseLimit::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.LicenseLimit.status)
}

// -------------------------------------------------------------------

// License

// string id = 1;
inline void License::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& License::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.License.id)
  return _internal_id();
}
inline void License::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.License.id)
}
inline std::string* License::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.License.id)
  return _internal_mutable_id();
}
inline const std::string& License::_internal_id() const {
  return id_.Get();
}
inline void License::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void License::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.License.id)
}
inline void License::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.License.id)
}
inline void License::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.License.id)
}
inline std::string* License::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* License::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.License.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void License::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.License.id)
}

// .clarifai.api.LicenseScope scope = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void License::clear_scope() {
  scope_ = 0;
}
inline ::clarifai::api::LicenseScope License::_internal_scope() const {
  return static_cast< ::clarifai::api::LicenseScope >(scope_);
}
inline ::clarifai::api::LicenseScope License::scope() const {
  // @@protoc_insertion_point(field_get:clarifai.api.License.scope)
  return _internal_scope();
}
inline void License::_internal_set_scope(::clarifai::api::LicenseScope value) {
  
  scope_ = value;
}
inline void License::set_scope(::clarifai::api::LicenseScope value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:clarifai.api.License.scope)
}

// .google.protobuf.Timestamp expires_at = 3;
inline bool License::_internal_has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline bool License::has_expires_at() const {
  return _internal_has_expires_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& License::_internal_expires_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expires_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& License::expires_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.License.expires_at)
  return _internal_expires_at();
}
inline void License::unsafe_arena_set_allocated_expires_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  expires_at_ = expires_at;
  if (expires_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.License.expires_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* License::release_expires_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* License::unsafe_arena_release_expires_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.License.expires_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* License::_internal_mutable_expires_at() {
  
  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expires_at_ = p;
  }
  return expires_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* License::mutable_expires_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.License.expires_at)
  return _internal_mutable_expires_at();
}
inline void License::set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at)->GetArena();
    if (message_arena != submessage_arena) {
      expires_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }
    
  } else {
    
  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.License.expires_at)
}

// .clarifai.api.ExpirationAction expiration_action = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void License::clear_expiration_action() {
  expiration_action_ = 0;
}
inline ::clarifai::api::ExpirationAction License::_internal_expiration_action() const {
  return static_cast< ::clarifai::api::ExpirationAction >(expiration_action_);
}
inline ::clarifai::api::ExpirationAction License::expiration_action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.License.expiration_action)
  return _internal_expiration_action();
}
inline void License::_internal_set_expiration_action(::clarifai::api::ExpirationAction value) {
  
  expiration_action_ = value;
}
inline void License::set_expiration_action(::clarifai::api::ExpirationAction value) {
  _internal_set_expiration_action(value);
  // @@protoc_insertion_point(field_set:clarifai.api.License.expiration_action)
}

// repeated .clarifai.api.LicenseLimit limits = 5;
inline int License::_internal_limits_size() const {
  return limits_.size();
}
inline int License::limits_size() const {
  return _internal_limits_size();
}
inline void License::clear_limits() {
  limits_.Clear();
}
inline ::clarifai::api::LicenseLimit* License::mutable_limits(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.License.limits)
  return limits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LicenseLimit >*
License::mutable_limits() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.License.limits)
  return &limits_;
}
inline const ::clarifai::api::LicenseLimit& License::_internal_limits(int index) const {
  return limits_.Get(index);
}
inline const ::clarifai::api::LicenseLimit& License::limits(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.License.limits)
  return _internal_limits(index);
}
inline ::clarifai::api::LicenseLimit* License::_internal_add_limits() {
  return limits_.Add();
}
inline ::clarifai::api::LicenseLimit* License::add_limits() {
  // @@protoc_insertion_point(field_add:clarifai.api.License.limits)
  return _internal_add_limits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LicenseLimit >&
License::limits() const {
  // @@protoc_insertion_point(field_list:clarifai.api.License.limits)
  return limits_;
}

// .clarifai.api.status.Status status = 6;
inline bool License::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool License::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& License::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& License::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.License.status)
  return _internal_status();
}
inline void License::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.License.status)
}
inline ::clarifai::api::status::Status* License::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::status::Status* License::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.License.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* License::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* License::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.License.status)
  return _internal_mutable_status();
}
inline void License::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.License.status)
}

// bool is_offline = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void License::clear_is_offline() {
  is_offline_ = false;
}
inline bool License::_internal_is_offline() const {
  return is_offline_;
}
inline bool License::is_offline() const {
  // @@protoc_insertion_point(field_get:clarifai.api.License.is_offline)
  return _internal_is_offline();
}
inline void License::_internal_set_is_offline(bool value) {
  
  is_offline_ = value;
}
inline void License::set_is_offline(bool value) {
  _internal_set_is_offline(value);
  // @@protoc_insertion_point(field_set:clarifai.api.License.is_offline)
}

// -------------------------------------------------------------------

// Model

// string id = 1;
inline void Model::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Model::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.id)
  return _internal_id();
}
inline void Model::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Model.id)
}
inline std::string* Model::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.id)
  return _internal_mutable_id();
}
inline const std::string& Model::_internal_id() const {
  return id_.Get();
}
inline void Model::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Model::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Model.id)
}
inline void Model::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Model.id)
}
inline void Model::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Model.id)
}
inline std::string* Model::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Model::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Model::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.id)
}

// string name = 2;
inline void Model::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Model::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.name)
  return _internal_name();
}
inline void Model::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Model.name)
}
inline std::string* Model::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.name)
  return _internal_mutable_name();
}
inline const std::string& Model::_internal_name() const {
  return name_.Get();
}
inline void Model::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Model::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Model.name)
}
inline void Model::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Model.name)
}
inline void Model::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Model.name)
}
inline std::string* Model::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Model::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Model::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.name)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool Model::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Model::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Model::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Model::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.created_at)
  return _internal_created_at();
}
inline void Model::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Model.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Model::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Model::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Model::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Model::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.created_at)
  return _internal_mutable_created_at();
}
inline void Model::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.created_at)
}

// string app_id = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void Model::clear_app_id() {
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Model::app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.app_id)
  return _internal_app_id();
}
inline void Model::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Model.app_id)
}
inline std::string* Model::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& Model::_internal_app_id() const {
  return app_id_.Get();
}
inline void Model::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Model::set_app_id(std::string&& value) {
  
  app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Model.app_id)
}
inline void Model::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Model.app_id)
}
inline void Model::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Model.app_id)
}
inline std::string* Model::_internal_mutable_app_id() {
  
  return app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Model::release_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Model::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.app_id)
}

// .clarifai.api.OutputInfo output_info = 5;
inline bool Model::_internal_has_output_info() const {
  return this != internal_default_instance() && output_info_ != nullptr;
}
inline bool Model::has_output_info() const {
  return _internal_has_output_info();
}
inline void Model::clear_output_info() {
  if (GetArena() == nullptr && output_info_ != nullptr) {
    delete output_info_;
  }
  output_info_ = nullptr;
}
inline const ::clarifai::api::OutputInfo& Model::_internal_output_info() const {
  const ::clarifai::api::OutputInfo* p = output_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::OutputInfo*>(
      &::clarifai::api::_OutputInfo_default_instance_);
}
inline const ::clarifai::api::OutputInfo& Model::output_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.output_info)
  return _internal_output_info();
}
inline void Model::unsafe_arena_set_allocated_output_info(
    ::clarifai::api::OutputInfo* output_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_info_);
  }
  output_info_ = output_info;
  if (output_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Model.output_info)
}
inline ::clarifai::api::OutputInfo* Model::release_output_info() {
  
  ::clarifai::api::OutputInfo* temp = output_info_;
  output_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::OutputInfo* Model::unsafe_arena_release_output_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.output_info)
  
  ::clarifai::api::OutputInfo* temp = output_info_;
  output_info_ = nullptr;
  return temp;
}
inline ::clarifai::api::OutputInfo* Model::_internal_mutable_output_info() {
  
  if (output_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::OutputInfo>(GetArena());
    output_info_ = p;
  }
  return output_info_;
}
inline ::clarifai::api::OutputInfo* Model::mutable_output_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.output_info)
  return _internal_mutable_output_info();
}
inline void Model::set_allocated_output_info(::clarifai::api::OutputInfo* output_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete output_info_;
  }
  if (output_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(output_info);
    if (message_arena != submessage_arena) {
      output_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_info, submessage_arena);
    }
    
  } else {
    
  }
  output_info_ = output_info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.output_info)
}

// .clarifai.api.ModelVersion model_version = 6;
inline bool Model::_internal_has_model_version() const {
  return this != internal_default_instance() && model_version_ != nullptr;
}
inline bool Model::has_model_version() const {
  return _internal_has_model_version();
}
inline void Model::clear_model_version() {
  if (GetArena() == nullptr && model_version_ != nullptr) {
    delete model_version_;
  }
  model_version_ = nullptr;
}
inline const ::clarifai::api::ModelVersion& Model::_internal_model_version() const {
  const ::clarifai::api::ModelVersion* p = model_version_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ModelVersion*>(
      &::clarifai::api::_ModelVersion_default_instance_);
}
inline const ::clarifai::api::ModelVersion& Model::model_version() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.model_version)
  return _internal_model_version();
}
inline void Model::unsafe_arena_set_allocated_model_version(
    ::clarifai::api::ModelVersion* model_version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_version_);
  }
  model_version_ = model_version;
  if (model_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Model.model_version)
}
inline ::clarifai::api::ModelVersion* Model::release_model_version() {
  
  ::clarifai::api::ModelVersion* temp = model_version_;
  model_version_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::ModelVersion* Model::unsafe_arena_release_model_version() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.model_version)
  
  ::clarifai::api::ModelVersion* temp = model_version_;
  model_version_ = nullptr;
  return temp;
}
inline ::clarifai::api::ModelVersion* Model::_internal_mutable_model_version() {
  
  if (model_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ModelVersion>(GetArena());
    model_version_ = p;
  }
  return model_version_;
}
inline ::clarifai::api::ModelVersion* Model::mutable_model_version() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.model_version)
  return _internal_mutable_model_version();
}
inline void Model::set_allocated_model_version(::clarifai::api::ModelVersion* model_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete model_version_;
  }
  if (model_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model_version);
    if (message_arena != submessage_arena) {
      model_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_version, submessage_arena);
    }
    
  } else {
    
  }
  model_version_ = model_version;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.model_version)
}

// string display_name = 7;
inline void Model::clear_display_name() {
  display_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Model::display_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.display_name)
  return _internal_display_name();
}
inline void Model::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Model.display_name)
}
inline std::string* Model::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& Model::_internal_display_name() const {
  return display_name_.Get();
}
inline void Model::_internal_set_display_name(const std::string& value) {
  
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Model::set_display_name(std::string&& value) {
  
  display_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Model.display_name)
}
inline void Model::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Model.display_name)
}
inline void Model::set_display_name(const char* value,
    size_t size) {
  
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Model.display_name)
}
inline std::string* Model::_internal_mutable_display_name() {
  
  return display_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Model::release_display_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.display_name)
  return display_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Model::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.display_name)
}

// string template_name = 8;
inline void Model::clear_template_name() {
  template_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Model::template_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.template_name)
  return _internal_template_name();
}
inline void Model::set_template_name(const std::string& value) {
  _internal_set_template_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Model.template_name)
}
inline std::string* Model::mutable_template_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.template_name)
  return _internal_mutable_template_name();
}
inline const std::string& Model::_internal_template_name() const {
  return template_name_.Get();
}
inline void Model::_internal_set_template_name(const std::string& value) {
  
  template_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Model::set_template_name(std::string&& value) {
  
  template_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Model.template_name)
}
inline void Model::set_template_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  template_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Model.template_name)
}
inline void Model::set_template_name(const char* value,
    size_t size) {
  
  template_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Model.template_name)
}
inline std::string* Model::_internal_mutable_template_name() {
  
  return template_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Model::release_template_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.template_name)
  return template_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Model::set_allocated_template_name(std::string* template_name) {
  if (template_name != nullptr) {
    
  } else {
    
  }
  template_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.template_name)
}

// string user_id = 9;
inline void Model::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Model::user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.user_id)
  return _internal_user_id();
}
inline void Model::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Model.user_id)
}
inline std::string* Model::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& Model::_internal_user_id() const {
  return user_id_.Get();
}
inline void Model::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Model::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Model.user_id)
}
inline void Model::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Model.user_id)
}
inline void Model::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Model.user_id)
}
inline std::string* Model::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Model::release_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Model::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.user_id)
}

// -------------------------------------------------------------------

// OutputInfo

// .clarifai.api.Data data = 1;
inline bool OutputInfo::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool OutputInfo::has_data() const {
  return _internal_has_data();
}
inline void OutputInfo::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::clarifai::api::Data& OutputInfo::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& OutputInfo::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputInfo.data)
  return _internal_data();
}
inline void OutputInfo::unsafe_arena_set_allocated_data(
    ::clarifai::api::Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.OutputInfo.data)
}
inline ::clarifai::api::Data* OutputInfo::release_data() {
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Data* OutputInfo::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputInfo.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* OutputInfo::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* OutputInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputInfo.data)
  return _internal_mutable_data();
}
inline void OutputInfo::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputInfo.data)
}

// .clarifai.api.OutputConfig output_config = 2;
inline bool OutputInfo::_internal_has_output_config() const {
  return this != internal_default_instance() && output_config_ != nullptr;
}
inline bool OutputInfo::has_output_config() const {
  return _internal_has_output_config();
}
inline void OutputInfo::clear_output_config() {
  if (GetArena() == nullptr && output_config_ != nullptr) {
    delete output_config_;
  }
  output_config_ = nullptr;
}
inline const ::clarifai::api::OutputConfig& OutputInfo::_internal_output_config() const {
  const ::clarifai::api::OutputConfig* p = output_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::OutputConfig*>(
      &::clarifai::api::_OutputConfig_default_instance_);
}
inline const ::clarifai::api::OutputConfig& OutputInfo::output_config() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputInfo.output_config)
  return _internal_output_config();
}
inline void OutputInfo::unsafe_arena_set_allocated_output_config(
    ::clarifai::api::OutputConfig* output_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_config_);
  }
  output_config_ = output_config;
  if (output_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.OutputInfo.output_config)
}
inline ::clarifai::api::OutputConfig* OutputInfo::release_output_config() {
  
  ::clarifai::api::OutputConfig* temp = output_config_;
  output_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::OutputConfig* OutputInfo::unsafe_arena_release_output_config() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputInfo.output_config)
  
  ::clarifai::api::OutputConfig* temp = output_config_;
  output_config_ = nullptr;
  return temp;
}
inline ::clarifai::api::OutputConfig* OutputInfo::_internal_mutable_output_config() {
  
  if (output_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::OutputConfig>(GetArena());
    output_config_ = p;
  }
  return output_config_;
}
inline ::clarifai::api::OutputConfig* OutputInfo::mutable_output_config() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputInfo.output_config)
  return _internal_mutable_output_config();
}
inline void OutputInfo::set_allocated_output_config(::clarifai::api::OutputConfig* output_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete output_config_;
  }
  if (output_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(output_config);
    if (message_arena != submessage_arena) {
      output_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_config, submessage_arena);
    }
    
  } else {
    
  }
  output_config_ = output_config;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputInfo.output_config)
}

// string message = 3;
inline void OutputInfo::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OutputInfo::message() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputInfo.message)
  return _internal_message();
}
inline void OutputInfo::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputInfo.message)
}
inline std::string* OutputInfo::mutable_message() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputInfo.message)
  return _internal_mutable_message();
}
inline const std::string& OutputInfo::_internal_message() const {
  return message_.Get();
}
inline void OutputInfo::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OutputInfo::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.OutputInfo.message)
}
inline void OutputInfo::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.OutputInfo.message)
}
inline void OutputInfo::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.OutputInfo.message)
}
inline std::string* OutputInfo::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OutputInfo::release_message() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputInfo.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputInfo::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputInfo.message)
}

// string type = 4;
inline void OutputInfo::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OutputInfo::type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputInfo.type)
  return _internal_type();
}
inline void OutputInfo::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputInfo.type)
}
inline std::string* OutputInfo::mutable_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputInfo.type)
  return _internal_mutable_type();
}
inline const std::string& OutputInfo::_internal_type() const {
  return type_.Get();
}
inline void OutputInfo::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OutputInfo::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.OutputInfo.type)
}
inline void OutputInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.OutputInfo.type)
}
inline void OutputInfo::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.OutputInfo.type)
}
inline std::string* OutputInfo::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OutputInfo::release_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputInfo.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputInfo.type)
}

// string type_ext = 5;
inline void OutputInfo::clear_type_ext() {
  type_ext_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OutputInfo::type_ext() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputInfo.type_ext)
  return _internal_type_ext();
}
inline void OutputInfo::set_type_ext(const std::string& value) {
  _internal_set_type_ext(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputInfo.type_ext)
}
inline std::string* OutputInfo::mutable_type_ext() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputInfo.type_ext)
  return _internal_mutable_type_ext();
}
inline const std::string& OutputInfo::_internal_type_ext() const {
  return type_ext_.Get();
}
inline void OutputInfo::_internal_set_type_ext(const std::string& value) {
  
  type_ext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OutputInfo::set_type_ext(std::string&& value) {
  
  type_ext_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.OutputInfo.type_ext)
}
inline void OutputInfo::set_type_ext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_ext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.OutputInfo.type_ext)
}
inline void OutputInfo::set_type_ext(const char* value,
    size_t size) {
  
  type_ext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.OutputInfo.type_ext)
}
inline std::string* OutputInfo::_internal_mutable_type_ext() {
  
  return type_ext_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OutputInfo::release_type_ext() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputInfo.type_ext)
  return type_ext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputInfo::set_allocated_type_ext(std::string* type_ext) {
  if (type_ext != nullptr) {
    
  } else {
    
  }
  type_ext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_ext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputInfo.type_ext)
}

// -------------------------------------------------------------------

// OutputConfig

// bool concepts_mutually_exclusive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void OutputConfig::clear_concepts_mutually_exclusive() {
  concepts_mutually_exclusive_ = false;
}
inline bool OutputConfig::_internal_concepts_mutually_exclusive() const {
  return concepts_mutually_exclusive_;
}
inline bool OutputConfig::concepts_mutually_exclusive() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.concepts_mutually_exclusive)
  return _internal_concepts_mutually_exclusive();
}
inline void OutputConfig::_internal_set_concepts_mutually_exclusive(bool value) {
  
  concepts_mutually_exclusive_ = value;
}
inline void OutputConfig::set_concepts_mutually_exclusive(bool value) {
  _internal_set_concepts_mutually_exclusive(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.concepts_mutually_exclusive)
}

// bool closed_environment = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void OutputConfig::clear_closed_environment() {
  closed_environment_ = false;
}
inline bool OutputConfig::_internal_closed_environment() const {
  return closed_environment_;
}
inline bool OutputConfig::closed_environment() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.closed_environment)
  return _internal_closed_environment();
}
inline void OutputConfig::_internal_set_closed_environment(bool value) {
  
  closed_environment_ = value;
}
inline void OutputConfig::set_closed_environment(bool value) {
  _internal_set_closed_environment(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.closed_environment)
}

// string existing_model_id = 3 [deprecated = true];
inline void OutputConfig::clear_existing_model_id() {
  existing_model_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OutputConfig::existing_model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.existing_model_id)
  return _internal_existing_model_id();
}
inline void OutputConfig::set_existing_model_id(const std::string& value) {
  _internal_set_existing_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.existing_model_id)
}
inline std::string* OutputConfig::mutable_existing_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputConfig.existing_model_id)
  return _internal_mutable_existing_model_id();
}
inline const std::string& OutputConfig::_internal_existing_model_id() const {
  return existing_model_id_.Get();
}
inline void OutputConfig::_internal_set_existing_model_id(const std::string& value) {
  
  existing_model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OutputConfig::set_existing_model_id(std::string&& value) {
  
  existing_model_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.OutputConfig.existing_model_id)
}
inline void OutputConfig::set_existing_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  existing_model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.OutputConfig.existing_model_id)
}
inline void OutputConfig::set_existing_model_id(const char* value,
    size_t size) {
  
  existing_model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.OutputConfig.existing_model_id)
}
inline std::string* OutputConfig::_internal_mutable_existing_model_id() {
  
  return existing_model_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OutputConfig::release_existing_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputConfig.existing_model_id)
  return existing_model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputConfig::set_allocated_existing_model_id(std::string* existing_model_id) {
  if (existing_model_id != nullptr) {
    
  } else {
    
  }
  existing_model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), existing_model_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputConfig.existing_model_id)
}

// string language = 4;
inline void OutputConfig::clear_language() {
  language_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OutputConfig::language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.language)
  return _internal_language();
}
inline void OutputConfig::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.language)
}
inline std::string* OutputConfig::mutable_language() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputConfig.language)
  return _internal_mutable_language();
}
inline const std::string& OutputConfig::_internal_language() const {
  return language_.Get();
}
inline void OutputConfig::_internal_set_language(const std::string& value) {
  
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OutputConfig::set_language(std::string&& value) {
  
  language_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.OutputConfig.language)
}
inline void OutputConfig::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.OutputConfig.language)
}
inline void OutputConfig::set_language(const char* value,
    size_t size) {
  
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.OutputConfig.language)
}
inline std::string* OutputConfig::_internal_mutable_language() {
  
  return language_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OutputConfig::release_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputConfig.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputConfig::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputConfig.language)
}

// string hyper_parameters = 5 [deprecated = true];
inline void OutputConfig::clear_hyper_parameters() {
  hyper_parameters_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OutputConfig::hyper_parameters() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.hyper_parameters)
  return _internal_hyper_parameters();
}
inline void OutputConfig::set_hyper_parameters(const std::string& value) {
  _internal_set_hyper_parameters(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.hyper_parameters)
}
inline std::string* OutputConfig::mutable_hyper_parameters() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputConfig.hyper_parameters)
  return _internal_mutable_hyper_parameters();
}
inline const std::string& OutputConfig::_internal_hyper_parameters() const {
  return hyper_parameters_.Get();
}
inline void OutputConfig::_internal_set_hyper_parameters(const std::string& value) {
  
  hyper_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OutputConfig::set_hyper_parameters(std::string&& value) {
  
  hyper_parameters_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.OutputConfig.hyper_parameters)
}
inline void OutputConfig::set_hyper_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hyper_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.OutputConfig.hyper_parameters)
}
inline void OutputConfig::set_hyper_parameters(const char* value,
    size_t size) {
  
  hyper_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.OutputConfig.hyper_parameters)
}
inline std::string* OutputConfig::_internal_mutable_hyper_parameters() {
  
  return hyper_parameters_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OutputConfig::release_hyper_parameters() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputConfig.hyper_parameters)
  return hyper_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputConfig::set_allocated_hyper_parameters(std::string* hyper_parameters) {
  if (hyper_parameters != nullptr) {
    
  } else {
    
  }
  hyper_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hyper_parameters,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputConfig.hyper_parameters)
}

// uint32 max_concepts = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void OutputConfig::clear_max_concepts() {
  max_concepts_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputConfig::_internal_max_concepts() const {
  return max_concepts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputConfig::max_concepts() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.max_concepts)
  return _internal_max_concepts();
}
inline void OutputConfig::_internal_set_max_concepts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_concepts_ = value;
}
inline void OutputConfig::set_max_concepts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_concepts(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.max_concepts)
}

// float min_value = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void OutputConfig::clear_min_value() {
  min_value_ = 0;
}
inline float OutputConfig::_internal_min_value() const {
  return min_value_;
}
inline float OutputConfig::min_value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.min_value)
  return _internal_min_value();
}
inline void OutputConfig::_internal_set_min_value(float value) {
  
  min_value_ = value;
}
inline void OutputConfig::set_min_value(float value) {
  _internal_set_min_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.min_value)
}

// repeated .clarifai.api.Concept select_concepts = 8;
inline int OutputConfig::_internal_select_concepts_size() const {
  return select_concepts_.size();
}
inline int OutputConfig::select_concepts_size() const {
  return _internal_select_concepts_size();
}
inline void OutputConfig::clear_select_concepts() {
  select_concepts_.Clear();
}
inline ::clarifai::api::Concept* OutputConfig::mutable_select_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputConfig.select_concepts)
  return select_concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
OutputConfig::mutable_select_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.OutputConfig.select_concepts)
  return &select_concepts_;
}
inline const ::clarifai::api::Concept& OutputConfig::_internal_select_concepts(int index) const {
  return select_concepts_.Get(index);
}
inline const ::clarifai::api::Concept& OutputConfig::select_concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.select_concepts)
  return _internal_select_concepts(index);
}
inline ::clarifai::api::Concept* OutputConfig::_internal_add_select_concepts() {
  return select_concepts_.Add();
}
inline ::clarifai::api::Concept* OutputConfig::add_select_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.OutputConfig.select_concepts)
  return _internal_add_select_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
OutputConfig::select_concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.OutputConfig.select_concepts)
  return select_concepts_;
}

// uint32 training_timeout = 9;
inline void OutputConfig::clear_training_timeout() {
  training_timeout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputConfig::_internal_training_timeout() const {
  return training_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputConfig::training_timeout() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.training_timeout)
  return _internal_training_timeout();
}
inline void OutputConfig::_internal_set_training_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  training_timeout_ = value;
}
inline void OutputConfig::set_training_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_training_timeout(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.training_timeout)
}

// uint32 sample_ms = 10;
inline void OutputConfig::clear_sample_ms() {
  sample_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputConfig::_internal_sample_ms() const {
  return sample_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputConfig::sample_ms() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.sample_ms)
  return _internal_sample_ms();
}
inline void OutputConfig::_internal_set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sample_ms_ = value;
}
inline void OutputConfig::set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sample_ms(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.sample_ms)
}

// uint32 test_split_percent = 11;
inline void OutputConfig::clear_test_split_percent() {
  test_split_percent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputConfig::_internal_test_split_percent() const {
  return test_split_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputConfig::test_split_percent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.test_split_percent)
  return _internal_test_split_percent();
}
inline void OutputConfig::_internal_set_test_split_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  test_split_percent_ = value;
}
inline void OutputConfig::set_test_split_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_test_split_percent(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.test_split_percent)
}

// .google.protobuf.Struct hyper_params = 13;
inline bool OutputConfig::_internal_has_hyper_params() const {
  return this != internal_default_instance() && hyper_params_ != nullptr;
}
inline bool OutputConfig::has_hyper_params() const {
  return _internal_has_hyper_params();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& OutputConfig::_internal_hyper_params() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = hyper_params_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& OutputConfig::hyper_params() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.hyper_params)
  return _internal_hyper_params();
}
inline void OutputConfig::unsafe_arena_set_allocated_hyper_params(
    PROTOBUF_NAMESPACE_ID::Struct* hyper_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hyper_params_);
  }
  hyper_params_ = hyper_params;
  if (hyper_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.OutputConfig.hyper_params)
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputConfig::release_hyper_params() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = hyper_params_;
  hyper_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputConfig::unsafe_arena_release_hyper_params() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputConfig.hyper_params)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = hyper_params_;
  hyper_params_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputConfig::_internal_mutable_hyper_params() {
  
  if (hyper_params_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    hyper_params_ = p;
  }
  return hyper_params_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputConfig::mutable_hyper_params() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputConfig.hyper_params)
  return _internal_mutable_hyper_params();
}
inline void OutputConfig::set_allocated_hyper_params(PROTOBUF_NAMESPACE_ID::Struct* hyper_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hyper_params_);
  }
  if (hyper_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hyper_params)->GetArena();
    if (message_arena != submessage_arena) {
      hyper_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hyper_params, submessage_arena);
    }
    
  } else {
    
  }
  hyper_params_ = hyper_params;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputConfig.hyper_params)
}

// string embed_model_version_id = 14;
inline void OutputConfig::clear_embed_model_version_id() {
  embed_model_version_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OutputConfig::embed_model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.embed_model_version_id)
  return _internal_embed_model_version_id();
}
inline void OutputConfig::set_embed_model_version_id(const std::string& value) {
  _internal_set_embed_model_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.embed_model_version_id)
}
inline std::string* OutputConfig::mutable_embed_model_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputConfig.embed_model_version_id)
  return _internal_mutable_embed_model_version_id();
}
inline const std::string& OutputConfig::_internal_embed_model_version_id() const {
  return embed_model_version_id_.Get();
}
inline void OutputConfig::_internal_set_embed_model_version_id(const std::string& value) {
  
  embed_model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OutputConfig::set_embed_model_version_id(std::string&& value) {
  
  embed_model_version_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.OutputConfig.embed_model_version_id)
}
inline void OutputConfig::set_embed_model_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  embed_model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.OutputConfig.embed_model_version_id)
}
inline void OutputConfig::set_embed_model_version_id(const char* value,
    size_t size) {
  
  embed_model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.OutputConfig.embed_model_version_id)
}
inline std::string* OutputConfig::_internal_mutable_embed_model_version_id() {
  
  return embed_model_version_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OutputConfig::release_embed_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputConfig.embed_model_version_id)
  return embed_model_version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputConfig::set_allocated_embed_model_version_id(std::string* embed_model_version_id) {
  if (embed_model_version_id != nullptr) {
    
  } else {
    
  }
  embed_model_version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), embed_model_version_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputConfig.embed_model_version_id)
}

// bool fail_on_missing_positive_examples = 15;
inline void OutputConfig::clear_fail_on_missing_positive_examples() {
  fail_on_missing_positive_examples_ = false;
}
inline bool OutputConfig::_internal_fail_on_missing_positive_examples() const {
  return fail_on_missing_positive_examples_;
}
inline bool OutputConfig::fail_on_missing_positive_examples() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.fail_on_missing_positive_examples)
  return _internal_fail_on_missing_positive_examples();
}
inline void OutputConfig::_internal_set_fail_on_missing_positive_examples(bool value) {
  
  fail_on_missing_positive_examples_ = value;
}
inline void OutputConfig::set_fail_on_missing_positive_examples(bool value) {
  _internal_set_fail_on_missing_positive_examples(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.fail_on_missing_positive_examples)
}

// .clarifai.api.ValueComparator concept_threshold_type = 16;
inline void OutputConfig::clear_concept_threshold_type() {
  concept_threshold_type_ = 0;
}
inline ::clarifai::api::ValueComparator OutputConfig::_internal_concept_threshold_type() const {
  return static_cast< ::clarifai::api::ValueComparator >(concept_threshold_type_);
}
inline ::clarifai::api::ValueComparator OutputConfig::concept_threshold_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.concept_threshold_type)
  return _internal_concept_threshold_type();
}
inline void OutputConfig::_internal_set_concept_threshold_type(::clarifai::api::ValueComparator value) {
  
  concept_threshold_type_ = value;
}
inline void OutputConfig::set_concept_threshold_type(::clarifai::api::ValueComparator value) {
  _internal_set_concept_threshold_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.concept_threshold_type)
}

// .google.protobuf.Struct model_metadata = 17;
inline bool OutputConfig::_internal_has_model_metadata() const {
  return this != internal_default_instance() && model_metadata_ != nullptr;
}
inline bool OutputConfig::has_model_metadata() const {
  return _internal_has_model_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& OutputConfig::_internal_model_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = model_metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& OutputConfig::model_metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.model_metadata)
  return _internal_model_metadata();
}
inline void OutputConfig::unsafe_arena_set_allocated_model_metadata(
    PROTOBUF_NAMESPACE_ID::Struct* model_metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_metadata_);
  }
  model_metadata_ = model_metadata;
  if (model_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.OutputConfig.model_metadata)
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputConfig::release_model_metadata() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = model_metadata_;
  model_metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputConfig::unsafe_arena_release_model_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputConfig.model_metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = model_metadata_;
  model_metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputConfig::_internal_mutable_model_metadata() {
  
  if (model_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    model_metadata_ = p;
  }
  return model_metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputConfig::mutable_model_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputConfig.model_metadata)
  return _internal_mutable_model_metadata();
}
inline void OutputConfig::set_allocated_model_metadata(PROTOBUF_NAMESPACE_ID::Struct* model_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_metadata_);
  }
  if (model_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_metadata)->GetArena();
    if (message_arena != submessage_arena) {
      model_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_metadata, submessage_arena);
    }
    
  } else {
    
  }
  model_metadata_ = model_metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputConfig.model_metadata)
}

// -------------------------------------------------------------------

// ModelQuery

// string name = 1;
inline void ModelQuery::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelQuery::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelQuery.name)
  return _internal_name();
}
inline void ModelQuery::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelQuery.name)
}
inline std::string* ModelQuery::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelQuery.name)
  return _internal_mutable_name();
}
inline const std::string& ModelQuery::_internal_name() const {
  return name_.Get();
}
inline void ModelQuery::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelQuery::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelQuery.name)
}
inline void ModelQuery::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelQuery.name)
}
inline void ModelQuery::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelQuery.name)
}
inline std::string* ModelQuery::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelQuery::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelQuery.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelQuery::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelQuery.name)
}

// string type = 2;
inline void ModelQuery::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelQuery::type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelQuery.type)
  return _internal_type();
}
inline void ModelQuery::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelQuery.type)
}
inline std::string* ModelQuery::mutable_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelQuery.type)
  return _internal_mutable_type();
}
inline const std::string& ModelQuery::_internal_type() const {
  return type_.Get();
}
inline void ModelQuery::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelQuery::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelQuery.type)
}
inline void ModelQuery::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelQuery.type)
}
inline void ModelQuery::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelQuery.type)
}
inline std::string* ModelQuery::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelQuery::release_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelQuery.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelQuery::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelQuery.type)
}

// -------------------------------------------------------------------

// ModelVersion

// string id = 1;
inline void ModelVersion::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelVersion::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.id)
  return _internal_id();
}
inline void ModelVersion::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersion.id)
}
inline std::string* ModelVersion::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.id)
  return _internal_mutable_id();
}
inline const std::string& ModelVersion::_internal_id() const {
  return id_.Get();
}
inline void ModelVersion::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelVersion::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelVersion.id)
}
inline void ModelVersion::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelVersion.id)
}
inline void ModelVersion::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelVersion.id)
}
inline std::string* ModelVersion::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelVersion::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelVersion::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.id)
}

// .google.protobuf.Timestamp created_at = 2;
inline bool ModelVersion::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool ModelVersion::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ModelVersion::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ModelVersion::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.created_at)
  return _internal_created_at();
}
inline void ModelVersion::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ModelVersion.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.created_at)
  return _internal_mutable_created_at();
}
inline void ModelVersion::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.created_at)
}

// .clarifai.api.status.Status status = 3;
inline bool ModelVersion::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ModelVersion::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& ModelVersion::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& ModelVersion::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.status)
  return _internal_status();
}
inline void ModelVersion::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ModelVersion.status)
}
inline ::clarifai::api::status::Status* ModelVersion::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::status::Status* ModelVersion::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* ModelVersion::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* ModelVersion::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.status)
  return _internal_mutable_status();
}
inline void ModelVersion::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.status)
}

// uint32 active_concept_count = 4;
inline void ModelVersion::clear_active_concept_count() {
  active_concept_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelVersion::_internal_active_concept_count() const {
  return active_concept_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelVersion::active_concept_count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.active_concept_count)
  return _internal_active_concept_count();
}
inline void ModelVersion::_internal_set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  active_concept_count_ = value;
}
inline void ModelVersion::set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_active_concept_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersion.active_concept_count)
}

// .clarifai.api.EvalMetrics metrics = 5;
inline bool ModelVersion::_internal_has_metrics() const {
  return this != internal_default_instance() && metrics_ != nullptr;
}
inline bool ModelVersion::has_metrics() const {
  return _internal_has_metrics();
}
inline void ModelVersion::clear_metrics() {
  if (GetArena() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
}
inline const ::clarifai::api::EvalMetrics& ModelVersion::_internal_metrics() const {
  const ::clarifai::api::EvalMetrics* p = metrics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::EvalMetrics*>(
      &::clarifai::api::_EvalMetrics_default_instance_);
}
inline const ::clarifai::api::EvalMetrics& ModelVersion::metrics() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.metrics)
  return _internal_metrics();
}
inline void ModelVersion::unsafe_arena_set_allocated_metrics(
    ::clarifai::api::EvalMetrics* metrics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metrics_);
  }
  metrics_ = metrics;
  if (metrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ModelVersion.metrics)
}
inline ::clarifai::api::EvalMetrics* ModelVersion::release_metrics() {
  
  ::clarifai::api::EvalMetrics* temp = metrics_;
  metrics_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::EvalMetrics* ModelVersion::unsafe_arena_release_metrics() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.metrics)
  
  ::clarifai::api::EvalMetrics* temp = metrics_;
  metrics_ = nullptr;
  return temp;
}
inline ::clarifai::api::EvalMetrics* ModelVersion::_internal_mutable_metrics() {
  
  if (metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::EvalMetrics>(GetArena());
    metrics_ = p;
  }
  return metrics_;
}
inline ::clarifai::api::EvalMetrics* ModelVersion::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.metrics)
  return _internal_mutable_metrics();
}
inline void ModelVersion::set_allocated_metrics(::clarifai::api::EvalMetrics* metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metrics_;
  }
  if (metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metrics);
    if (message_arena != submessage_arena) {
      metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metrics, submessage_arena);
    }
    
  } else {
    
  }
  metrics_ = metrics;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.metrics)
}

// uint32 total_input_count = 6;
inline void ModelVersion::clear_total_input_count() {
  total_input_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelVersion::_internal_total_input_count() const {
  return total_input_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelVersion::total_input_count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.total_input_count)
  return _internal_total_input_count();
}
inline void ModelVersion::_internal_set_total_input_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_input_count_ = value;
}
inline void ModelVersion::set_total_input_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_input_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersion.total_input_count)
}

// .clarifai.api.PretrainedModelConfig pretrained_model_config = 7 [(.clarifai.auth.util.cl_private_field) = true];
inline bool ModelVersion::_internal_has_pretrained_model_config() const {
  return this != internal_default_instance() && pretrained_model_config_ != nullptr;
}
inline bool ModelVersion::has_pretrained_model_config() const {
  return _internal_has_pretrained_model_config();
}
inline void ModelVersion::clear_pretrained_model_config() {
  if (GetArena() == nullptr && pretrained_model_config_ != nullptr) {
    delete pretrained_model_config_;
  }
  pretrained_model_config_ = nullptr;
}
inline const ::clarifai::api::PretrainedModelConfig& ModelVersion::_internal_pretrained_model_config() const {
  const ::clarifai::api::PretrainedModelConfig* p = pretrained_model_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::PretrainedModelConfig*>(
      &::clarifai::api::_PretrainedModelConfig_default_instance_);
}
inline const ::clarifai::api::PretrainedModelConfig& ModelVersion::pretrained_model_config() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.pretrained_model_config)
  return _internal_pretrained_model_config();
}
inline void ModelVersion::unsafe_arena_set_allocated_pretrained_model_config(
    ::clarifai::api::PretrainedModelConfig* pretrained_model_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pretrained_model_config_);
  }
  pretrained_model_config_ = pretrained_model_config;
  if (pretrained_model_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ModelVersion.pretrained_model_config)
}
inline ::clarifai::api::PretrainedModelConfig* ModelVersion::release_pretrained_model_config() {
  
  ::clarifai::api::PretrainedModelConfig* temp = pretrained_model_config_;
  pretrained_model_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::PretrainedModelConfig* ModelVersion::unsafe_arena_release_pretrained_model_config() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.pretrained_model_config)
  
  ::clarifai::api::PretrainedModelConfig* temp = pretrained_model_config_;
  pretrained_model_config_ = nullptr;
  return temp;
}
inline ::clarifai::api::PretrainedModelConfig* ModelVersion::_internal_mutable_pretrained_model_config() {
  
  if (pretrained_model_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::PretrainedModelConfig>(GetArena());
    pretrained_model_config_ = p;
  }
  return pretrained_model_config_;
}
inline ::clarifai::api::PretrainedModelConfig* ModelVersion::mutable_pretrained_model_config() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.pretrained_model_config)
  return _internal_mutable_pretrained_model_config();
}
inline void ModelVersion::set_allocated_pretrained_model_config(::clarifai::api::PretrainedModelConfig* pretrained_model_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pretrained_model_config_;
  }
  if (pretrained_model_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pretrained_model_config);
    if (message_arena != submessage_arena) {
      pretrained_model_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pretrained_model_config, submessage_arena);
    }
    
  } else {
    
  }
  pretrained_model_config_ = pretrained_model_config;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.pretrained_model_config)
}

// .clarifai.api.TrainStats train_stats = 8 [(.clarifai.auth.util.cl_private_field) = true];
inline bool ModelVersion::_internal_has_train_stats() const {
  return this != internal_default_instance() && train_stats_ != nullptr;
}
inline bool ModelVersion::has_train_stats() const {
  return _internal_has_train_stats();
}
inline void ModelVersion::clear_train_stats() {
  if (GetArena() == nullptr && train_stats_ != nullptr) {
    delete train_stats_;
  }
  train_stats_ = nullptr;
}
inline const ::clarifai::api::TrainStats& ModelVersion::_internal_train_stats() const {
  const ::clarifai::api::TrainStats* p = train_stats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::TrainStats*>(
      &::clarifai::api::_TrainStats_default_instance_);
}
inline const ::clarifai::api::TrainStats& ModelVersion::train_stats() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.train_stats)
  return _internal_train_stats();
}
inline void ModelVersion::unsafe_arena_set_allocated_train_stats(
    ::clarifai::api::TrainStats* train_stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(train_stats_);
  }
  train_stats_ = train_stats;
  if (train_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ModelVersion.train_stats)
}
inline ::clarifai::api::TrainStats* ModelVersion::release_train_stats() {
  
  ::clarifai::api::TrainStats* temp = train_stats_;
  train_stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::TrainStats* ModelVersion::unsafe_arena_release_train_stats() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.train_stats)
  
  ::clarifai::api::TrainStats* temp = train_stats_;
  train_stats_ = nullptr;
  return temp;
}
inline ::clarifai::api::TrainStats* ModelVersion::_internal_mutable_train_stats() {
  
  if (train_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::TrainStats>(GetArena());
    train_stats_ = p;
  }
  return train_stats_;
}
inline ::clarifai::api::TrainStats* ModelVersion::mutable_train_stats() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.train_stats)
  return _internal_mutable_train_stats();
}
inline void ModelVersion::set_allocated_train_stats(::clarifai::api::TrainStats* train_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete train_stats_;
  }
  if (train_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(train_stats);
    if (message_arena != submessage_arena) {
      train_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, train_stats, submessage_arena);
    }
    
  } else {
    
  }
  train_stats_ = train_stats;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.train_stats)
}

// string worker_id = 9;
inline void ModelVersion::clear_worker_id() {
  worker_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelVersion::worker_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.worker_id)
  return _internal_worker_id();
}
inline void ModelVersion::set_worker_id(const std::string& value) {
  _internal_set_worker_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersion.worker_id)
}
inline std::string* ModelVersion::mutable_worker_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.worker_id)
  return _internal_mutable_worker_id();
}
inline const std::string& ModelVersion::_internal_worker_id() const {
  return worker_id_.Get();
}
inline void ModelVersion::_internal_set_worker_id(const std::string& value) {
  
  worker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelVersion::set_worker_id(std::string&& value) {
  
  worker_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelVersion.worker_id)
}
inline void ModelVersion::set_worker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelVersion.worker_id)
}
inline void ModelVersion::set_worker_id(const char* value,
    size_t size) {
  
  worker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelVersion.worker_id)
}
inline std::string* ModelVersion::_internal_mutable_worker_id() {
  
  return worker_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelVersion::release_worker_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.worker_id)
  return worker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelVersion::set_allocated_worker_id(std::string* worker_id) {
  if (worker_id != nullptr) {
    
  } else {
    
  }
  worker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.worker_id)
}

// .google.protobuf.Timestamp completed_at = 10;
inline bool ModelVersion::_internal_has_completed_at() const {
  return this != internal_default_instance() && completed_at_ != nullptr;
}
inline bool ModelVersion::has_completed_at() const {
  return _internal_has_completed_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ModelVersion::_internal_completed_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = completed_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ModelVersion::completed_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.completed_at)
  return _internal_completed_at();
}
inline void ModelVersion::unsafe_arena_set_allocated_completed_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* completed_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(completed_at_);
  }
  completed_at_ = completed_at;
  if (completed_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ModelVersion.completed_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::release_completed_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = completed_at_;
  completed_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::unsafe_arena_release_completed_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.completed_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = completed_at_;
  completed_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::_internal_mutable_completed_at() {
  
  if (completed_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    completed_at_ = p;
  }
  return completed_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::mutable_completed_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.completed_at)
  return _internal_mutable_completed_at();
}
inline void ModelVersion::set_allocated_completed_at(PROTOBUF_NAMESPACE_ID::Timestamp* completed_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(completed_at_);
  }
  if (completed_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(completed_at)->GetArena();
    if (message_arena != submessage_arena) {
      completed_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, completed_at, submessage_arena);
    }
    
  } else {
    
  }
  completed_at_ = completed_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.completed_at)
}

// -------------------------------------------------------------------

// PretrainedModelConfig

// string id = 1;
inline void PretrainedModelConfig::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PretrainedModelConfig::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PretrainedModelConfig.id)
  return _internal_id();
}
inline void PretrainedModelConfig::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PretrainedModelConfig.id)
}
inline std::string* PretrainedModelConfig::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PretrainedModelConfig.id)
  return _internal_mutable_id();
}
inline const std::string& PretrainedModelConfig::_internal_id() const {
  return id_.Get();
}
inline void PretrainedModelConfig::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PretrainedModelConfig::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PretrainedModelConfig.id)
}
inline void PretrainedModelConfig::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.PretrainedModelConfig.id)
}
inline void PretrainedModelConfig::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PretrainedModelConfig.id)
}
inline std::string* PretrainedModelConfig::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PretrainedModelConfig::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PretrainedModelConfig.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PretrainedModelConfig::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PretrainedModelConfig.id)
}

// string type = 2;
inline void PretrainedModelConfig::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PretrainedModelConfig::type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PretrainedModelConfig.type)
  return _internal_type();
}
inline void PretrainedModelConfig::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PretrainedModelConfig.type)
}
inline std::string* PretrainedModelConfig::mutable_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PretrainedModelConfig.type)
  return _internal_mutable_type();
}
inline const std::string& PretrainedModelConfig::_internal_type() const {
  return type_.Get();
}
inline void PretrainedModelConfig::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PretrainedModelConfig::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PretrainedModelConfig.type)
}
inline void PretrainedModelConfig::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.PretrainedModelConfig.type)
}
inline void PretrainedModelConfig::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PretrainedModelConfig.type)
}
inline std::string* PretrainedModelConfig::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PretrainedModelConfig::release_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.PretrainedModelConfig.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PretrainedModelConfig::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PretrainedModelConfig.type)
}

// -------------------------------------------------------------------

// TrainStats

// repeated .clarifai.api.LossCurveEntry loss_curve = 1;
inline int TrainStats::_internal_loss_curve_size() const {
  return loss_curve_.size();
}
inline int TrainStats::loss_curve_size() const {
  return _internal_loss_curve_size();
}
inline void TrainStats::clear_loss_curve() {
  loss_curve_.Clear();
}
inline ::clarifai::api::LossCurveEntry* TrainStats::mutable_loss_curve(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TrainStats.loss_curve)
  return loss_curve_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LossCurveEntry >*
TrainStats::mutable_loss_curve() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.TrainStats.loss_curve)
  return &loss_curve_;
}
inline const ::clarifai::api::LossCurveEntry& TrainStats::_internal_loss_curve(int index) const {
  return loss_curve_.Get(index);
}
inline const ::clarifai::api::LossCurveEntry& TrainStats::loss_curve(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.TrainStats.loss_curve)
  return _internal_loss_curve(index);
}
inline ::clarifai::api::LossCurveEntry* TrainStats::_internal_add_loss_curve() {
  return loss_curve_.Add();
}
inline ::clarifai::api::LossCurveEntry* TrainStats::add_loss_curve() {
  // @@protoc_insertion_point(field_add:clarifai.api.TrainStats.loss_curve)
  return _internal_add_loss_curve();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LossCurveEntry >&
TrainStats::loss_curve() const {
  // @@protoc_insertion_point(field_list:clarifai.api.TrainStats.loss_curve)
  return loss_curve_;
}

// -------------------------------------------------------------------

// LossCurveEntry

// uint32 epoch = 1;
inline void LossCurveEntry::clear_epoch() {
  epoch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LossCurveEntry::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LossCurveEntry::epoch() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LossCurveEntry.epoch)
  return _internal_epoch();
}
inline void LossCurveEntry::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  epoch_ = value;
}
inline void LossCurveEntry::set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LossCurveEntry.epoch)
}

// uint32 global_step = 2;
inline void LossCurveEntry::clear_global_step() {
  global_step_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LossCurveEntry::_internal_global_step() const {
  return global_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LossCurveEntry::global_step() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LossCurveEntry.global_step)
  return _internal_global_step();
}
inline void LossCurveEntry::_internal_set_global_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  global_step_ = value;
}
inline void LossCurveEntry::set_global_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_global_step(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LossCurveEntry.global_step)
}

// float cost = 3;
inline void LossCurveEntry::clear_cost() {
  cost_ = 0;
}
inline float LossCurveEntry::_internal_cost() const {
  return cost_;
}
inline float LossCurveEntry::cost() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LossCurveEntry.cost)
  return _internal_cost();
}
inline void LossCurveEntry::_internal_set_cost(float value) {
  
  cost_ = value;
}
inline void LossCurveEntry::set_cost(float value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LossCurveEntry.cost)
}

// -------------------------------------------------------------------

// LabelCount

// string concept_name = 1;
inline void LabelCount::clear_concept_name() {
  concept_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabelCount::concept_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LabelCount.concept_name)
  return _internal_concept_name();
}
inline void LabelCount::set_concept_name(const std::string& value) {
  _internal_set_concept_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LabelCount.concept_name)
}
inline std::string* LabelCount::mutable_concept_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.LabelCount.concept_name)
  return _internal_mutable_concept_name();
}
inline const std::string& LabelCount::_internal_concept_name() const {
  return concept_name_.Get();
}
inline void LabelCount::_internal_set_concept_name(const std::string& value) {
  
  concept_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabelCount::set_concept_name(std::string&& value) {
  
  concept_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.LabelCount.concept_name)
}
inline void LabelCount::set_concept_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concept_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.LabelCount.concept_name)
}
inline void LabelCount::set_concept_name(const char* value,
    size_t size) {
  
  concept_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.LabelCount.concept_name)
}
inline std::string* LabelCount::_internal_mutable_concept_name() {
  
  return concept_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabelCount::release_concept_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.LabelCount.concept_name)
  return concept_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelCount::set_allocated_concept_name(std::string* concept_name) {
  if (concept_name != nullptr) {
    
  } else {
    
  }
  concept_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.LabelCount.concept_name)
}

// uint32 count = 2;
inline void LabelCount::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabelCount::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabelCount::count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LabelCount.count)
  return _internal_count();
}
inline void LabelCount::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void LabelCount::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LabelCount.count)
}

// -------------------------------------------------------------------

// LabelDistribution

// repeated .clarifai.api.LabelCount positive_label_counts = 1;
inline int LabelDistribution::_internal_positive_label_counts_size() const {
  return positive_label_counts_.size();
}
inline int LabelDistribution::positive_label_counts_size() const {
  return _internal_positive_label_counts_size();
}
inline void LabelDistribution::clear_positive_label_counts() {
  positive_label_counts_.Clear();
}
inline ::clarifai::api::LabelCount* LabelDistribution::mutable_positive_label_counts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.LabelDistribution.positive_label_counts)
  return positive_label_counts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelCount >*
LabelDistribution::mutable_positive_label_counts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.LabelDistribution.positive_label_counts)
  return &positive_label_counts_;
}
inline const ::clarifai::api::LabelCount& LabelDistribution::_internal_positive_label_counts(int index) const {
  return positive_label_counts_.Get(index);
}
inline const ::clarifai::api::LabelCount& LabelDistribution::positive_label_counts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.LabelDistribution.positive_label_counts)
  return _internal_positive_label_counts(index);
}
inline ::clarifai::api::LabelCount* LabelDistribution::_internal_add_positive_label_counts() {
  return positive_label_counts_.Add();
}
inline ::clarifai::api::LabelCount* LabelDistribution::add_positive_label_counts() {
  // @@protoc_insertion_point(field_add:clarifai.api.LabelDistribution.positive_label_counts)
  return _internal_add_positive_label_counts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelCount >&
LabelDistribution::positive_label_counts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.LabelDistribution.positive_label_counts)
  return positive_label_counts_;
}

// -------------------------------------------------------------------

// CooccurrenceMatrixEntry

// string row = 1;
inline void CooccurrenceMatrixEntry::clear_row() {
  row_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CooccurrenceMatrixEntry::row() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CooccurrenceMatrixEntry.row)
  return _internal_row();
}
inline void CooccurrenceMatrixEntry::set_row(const std::string& value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CooccurrenceMatrixEntry.row)
}
inline std::string* CooccurrenceMatrixEntry::mutable_row() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CooccurrenceMatrixEntry.row)
  return _internal_mutable_row();
}
inline const std::string& CooccurrenceMatrixEntry::_internal_row() const {
  return row_.Get();
}
inline void CooccurrenceMatrixEntry::_internal_set_row(const std::string& value) {
  
  row_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CooccurrenceMatrixEntry::set_row(std::string&& value) {
  
  row_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CooccurrenceMatrixEntry.row)
}
inline void CooccurrenceMatrixEntry::set_row(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CooccurrenceMatrixEntry.row)
}
inline void CooccurrenceMatrixEntry::set_row(const char* value,
    size_t size) {
  
  row_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CooccurrenceMatrixEntry.row)
}
inline std::string* CooccurrenceMatrixEntry::_internal_mutable_row() {
  
  return row_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CooccurrenceMatrixEntry::release_row() {
  // @@protoc_insertion_point(field_release:clarifai.api.CooccurrenceMatrixEntry.row)
  return row_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CooccurrenceMatrixEntry::set_allocated_row(std::string* row) {
  if (row != nullptr) {
    
  } else {
    
  }
  row_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CooccurrenceMatrixEntry.row)
}

// string col = 2;
inline void CooccurrenceMatrixEntry::clear_col() {
  col_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CooccurrenceMatrixEntry::col() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CooccurrenceMatrixEntry.col)
  return _internal_col();
}
inline void CooccurrenceMatrixEntry::set_col(const std::string& value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CooccurrenceMatrixEntry.col)
}
inline std::string* CooccurrenceMatrixEntry::mutable_col() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CooccurrenceMatrixEntry.col)
  return _internal_mutable_col();
}
inline const std::string& CooccurrenceMatrixEntry::_internal_col() const {
  return col_.Get();
}
inline void CooccurrenceMatrixEntry::_internal_set_col(const std::string& value) {
  
  col_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CooccurrenceMatrixEntry::set_col(std::string&& value) {
  
  col_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CooccurrenceMatrixEntry.col)
}
inline void CooccurrenceMatrixEntry::set_col(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  col_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CooccurrenceMatrixEntry.col)
}
inline void CooccurrenceMatrixEntry::set_col(const char* value,
    size_t size) {
  
  col_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CooccurrenceMatrixEntry.col)
}
inline std::string* CooccurrenceMatrixEntry::_internal_mutable_col() {
  
  return col_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CooccurrenceMatrixEntry::release_col() {
  // @@protoc_insertion_point(field_release:clarifai.api.CooccurrenceMatrixEntry.col)
  return col_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CooccurrenceMatrixEntry::set_allocated_col(std::string* col) {
  if (col != nullptr) {
    
  } else {
    
  }
  col_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), col,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CooccurrenceMatrixEntry.col)
}

// uint32 count = 3;
inline void CooccurrenceMatrixEntry::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CooccurrenceMatrixEntry::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CooccurrenceMatrixEntry::count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CooccurrenceMatrixEntry.count)
  return _internal_count();
}
inline void CooccurrenceMatrixEntry::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void CooccurrenceMatrixEntry::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CooccurrenceMatrixEntry.count)
}

// -------------------------------------------------------------------

// CooccurrenceMatrix

// repeated .clarifai.api.CooccurrenceMatrixEntry matrix = 1;
inline int CooccurrenceMatrix::_internal_matrix_size() const {
  return matrix_.size();
}
inline int CooccurrenceMatrix::matrix_size() const {
  return _internal_matrix_size();
}
inline void CooccurrenceMatrix::clear_matrix() {
  matrix_.Clear();
}
inline ::clarifai::api::CooccurrenceMatrixEntry* CooccurrenceMatrix::mutable_matrix(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CooccurrenceMatrix.matrix)
  return matrix_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CooccurrenceMatrixEntry >*
CooccurrenceMatrix::mutable_matrix() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.CooccurrenceMatrix.matrix)
  return &matrix_;
}
inline const ::clarifai::api::CooccurrenceMatrixEntry& CooccurrenceMatrix::_internal_matrix(int index) const {
  return matrix_.Get(index);
}
inline const ::clarifai::api::CooccurrenceMatrixEntry& CooccurrenceMatrix::matrix(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.CooccurrenceMatrix.matrix)
  return _internal_matrix(index);
}
inline ::clarifai::api::CooccurrenceMatrixEntry* CooccurrenceMatrix::_internal_add_matrix() {
  return matrix_.Add();
}
inline ::clarifai::api::CooccurrenceMatrixEntry* CooccurrenceMatrix::add_matrix() {
  // @@protoc_insertion_point(field_add:clarifai.api.CooccurrenceMatrix.matrix)
  return _internal_add_matrix();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CooccurrenceMatrixEntry >&
CooccurrenceMatrix::matrix() const {
  // @@protoc_insertion_point(field_list:clarifai.api.CooccurrenceMatrix.matrix)
  return matrix_;
}

// repeated string concept_ids = 2;
inline int CooccurrenceMatrix::_internal_concept_ids_size() const {
  return concept_ids_.size();
}
inline int CooccurrenceMatrix::concept_ids_size() const {
  return _internal_concept_ids_size();
}
inline void CooccurrenceMatrix::clear_concept_ids() {
  concept_ids_.Clear();
}
inline std::string* CooccurrenceMatrix::add_concept_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.CooccurrenceMatrix.concept_ids)
  return _internal_add_concept_ids();
}
inline const std::string& CooccurrenceMatrix::_internal_concept_ids(int index) const {
  return concept_ids_.Get(index);
}
inline const std::string& CooccurrenceMatrix::concept_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.CooccurrenceMatrix.concept_ids)
  return _internal_concept_ids(index);
}
inline std::string* CooccurrenceMatrix::mutable_concept_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CooccurrenceMatrix.concept_ids)
  return concept_ids_.Mutable(index);
}
inline void CooccurrenceMatrix::set_concept_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.CooccurrenceMatrix.concept_ids)
  concept_ids_.Mutable(index)->assign(value);
}
inline void CooccurrenceMatrix::set_concept_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.CooccurrenceMatrix.concept_ids)
  concept_ids_.Mutable(index)->assign(std::move(value));
}
inline void CooccurrenceMatrix::set_concept_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.CooccurrenceMatrix.concept_ids)
}
inline void CooccurrenceMatrix::set_concept_ids(int index, const char* value, size_t size) {
  concept_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CooccurrenceMatrix.concept_ids)
}
inline std::string* CooccurrenceMatrix::_internal_add_concept_ids() {
  return concept_ids_.Add();
}
inline void CooccurrenceMatrix::add_concept_ids(const std::string& value) {
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.CooccurrenceMatrix.concept_ids)
}
inline void CooccurrenceMatrix::add_concept_ids(std::string&& value) {
  concept_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.CooccurrenceMatrix.concept_ids)
}
inline void CooccurrenceMatrix::add_concept_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.CooccurrenceMatrix.concept_ids)
}
inline void CooccurrenceMatrix::add_concept_ids(const char* value, size_t size) {
  concept_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.CooccurrenceMatrix.concept_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CooccurrenceMatrix::concept_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.CooccurrenceMatrix.concept_ids)
  return concept_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CooccurrenceMatrix::mutable_concept_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.CooccurrenceMatrix.concept_ids)
  return &concept_ids_;
}

// -------------------------------------------------------------------

// ConfusionMatrixEntry

// string predicted = 1;
inline void ConfusionMatrixEntry::clear_predicted() {
  predicted_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfusionMatrixEntry::predicted() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConfusionMatrixEntry.predicted)
  return _internal_predicted();
}
inline void ConfusionMatrixEntry::set_predicted(const std::string& value) {
  _internal_set_predicted(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConfusionMatrixEntry.predicted)
}
inline std::string* ConfusionMatrixEntry::mutable_predicted() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConfusionMatrixEntry.predicted)
  return _internal_mutable_predicted();
}
inline const std::string& ConfusionMatrixEntry::_internal_predicted() const {
  return predicted_.Get();
}
inline void ConfusionMatrixEntry::_internal_set_predicted(const std::string& value) {
  
  predicted_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfusionMatrixEntry::set_predicted(std::string&& value) {
  
  predicted_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConfusionMatrixEntry.predicted)
}
inline void ConfusionMatrixEntry::set_predicted(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  predicted_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConfusionMatrixEntry.predicted)
}
inline void ConfusionMatrixEntry::set_predicted(const char* value,
    size_t size) {
  
  predicted_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConfusionMatrixEntry.predicted)
}
inline std::string* ConfusionMatrixEntry::_internal_mutable_predicted() {
  
  return predicted_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfusionMatrixEntry::release_predicted() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConfusionMatrixEntry.predicted)
  return predicted_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfusionMatrixEntry::set_allocated_predicted(std::string* predicted) {
  if (predicted != nullptr) {
    
  } else {
    
  }
  predicted_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), predicted,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConfusionMatrixEntry.predicted)
}

// string actual = 2;
inline void ConfusionMatrixEntry::clear_actual() {
  actual_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfusionMatrixEntry::actual() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConfusionMatrixEntry.actual)
  return _internal_actual();
}
inline void ConfusionMatrixEntry::set_actual(const std::string& value) {
  _internal_set_actual(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConfusionMatrixEntry.actual)
}
inline std::string* ConfusionMatrixEntry::mutable_actual() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConfusionMatrixEntry.actual)
  return _internal_mutable_actual();
}
inline const std::string& ConfusionMatrixEntry::_internal_actual() const {
  return actual_.Get();
}
inline void ConfusionMatrixEntry::_internal_set_actual(const std::string& value) {
  
  actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfusionMatrixEntry::set_actual(std::string&& value) {
  
  actual_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConfusionMatrixEntry.actual)
}
inline void ConfusionMatrixEntry::set_actual(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConfusionMatrixEntry.actual)
}
inline void ConfusionMatrixEntry::set_actual(const char* value,
    size_t size) {
  
  actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConfusionMatrixEntry.actual)
}
inline std::string* ConfusionMatrixEntry::_internal_mutable_actual() {
  
  return actual_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfusionMatrixEntry::release_actual() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConfusionMatrixEntry.actual)
  return actual_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfusionMatrixEntry::set_allocated_actual(std::string* actual) {
  if (actual != nullptr) {
    
  } else {
    
  }
  actual_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actual,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConfusionMatrixEntry.actual)
}

// float value = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void ConfusionMatrixEntry::clear_value() {
  value_ = 0;
}
inline float ConfusionMatrixEntry::_internal_value() const {
  return value_;
}
inline float ConfusionMatrixEntry::value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConfusionMatrixEntry.value)
  return _internal_value();
}
inline void ConfusionMatrixEntry::_internal_set_value(float value) {
  
  value_ = value;
}
inline void ConfusionMatrixEntry::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConfusionMatrixEntry.value)
}

// -------------------------------------------------------------------

// ConfusionMatrix

// repeated .clarifai.api.ConfusionMatrixEntry matrix = 1;
inline int ConfusionMatrix::_internal_matrix_size() const {
  return matrix_.size();
}
inline int ConfusionMatrix::matrix_size() const {
  return _internal_matrix_size();
}
inline void ConfusionMatrix::clear_matrix() {
  matrix_.Clear();
}
inline ::clarifai::api::ConfusionMatrixEntry* ConfusionMatrix::mutable_matrix(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConfusionMatrix.matrix)
  return matrix_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConfusionMatrixEntry >*
ConfusionMatrix::mutable_matrix() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ConfusionMatrix.matrix)
  return &matrix_;
}
inline const ::clarifai::api::ConfusionMatrixEntry& ConfusionMatrix::_internal_matrix(int index) const {
  return matrix_.Get(index);
}
inline const ::clarifai::api::ConfusionMatrixEntry& ConfusionMatrix::matrix(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConfusionMatrix.matrix)
  return _internal_matrix(index);
}
inline ::clarifai::api::ConfusionMatrixEntry* ConfusionMatrix::_internal_add_matrix() {
  return matrix_.Add();
}
inline ::clarifai::api::ConfusionMatrixEntry* ConfusionMatrix::add_matrix() {
  // @@protoc_insertion_point(field_add:clarifai.api.ConfusionMatrix.matrix)
  return _internal_add_matrix();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConfusionMatrixEntry >&
ConfusionMatrix::matrix() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ConfusionMatrix.matrix)
  return matrix_;
}

// repeated string concept_ids = 2;
inline int ConfusionMatrix::_internal_concept_ids_size() const {
  return concept_ids_.size();
}
inline int ConfusionMatrix::concept_ids_size() const {
  return _internal_concept_ids_size();
}
inline void ConfusionMatrix::clear_concept_ids() {
  concept_ids_.Clear();
}
inline std::string* ConfusionMatrix::add_concept_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ConfusionMatrix.concept_ids)
  return _internal_add_concept_ids();
}
inline const std::string& ConfusionMatrix::_internal_concept_ids(int index) const {
  return concept_ids_.Get(index);
}
inline const std::string& ConfusionMatrix::concept_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConfusionMatrix.concept_ids)
  return _internal_concept_ids(index);
}
inline std::string* ConfusionMatrix::mutable_concept_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConfusionMatrix.concept_ids)
  return concept_ids_.Mutable(index);
}
inline void ConfusionMatrix::set_concept_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ConfusionMatrix.concept_ids)
  concept_ids_.Mutable(index)->assign(value);
}
inline void ConfusionMatrix::set_concept_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ConfusionMatrix.concept_ids)
  concept_ids_.Mutable(index)->assign(std::move(value));
}
inline void ConfusionMatrix::set_concept_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConfusionMatrix.concept_ids)
}
inline void ConfusionMatrix::set_concept_ids(int index, const char* value, size_t size) {
  concept_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConfusionMatrix.concept_ids)
}
inline std::string* ConfusionMatrix::_internal_add_concept_ids() {
  return concept_ids_.Add();
}
inline void ConfusionMatrix::add_concept_ids(const std::string& value) {
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ConfusionMatrix.concept_ids)
}
inline void ConfusionMatrix::add_concept_ids(std::string&& value) {
  concept_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ConfusionMatrix.concept_ids)
}
inline void ConfusionMatrix::add_concept_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ConfusionMatrix.concept_ids)
}
inline void ConfusionMatrix::add_concept_ids(const char* value, size_t size) {
  concept_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ConfusionMatrix.concept_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConfusionMatrix::concept_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ConfusionMatrix.concept_ids)
  return concept_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConfusionMatrix::mutable_concept_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ConfusionMatrix.concept_ids)
  return &concept_ids_;
}

// -------------------------------------------------------------------

// ROC

// repeated float fpr = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int ROC::_internal_fpr_size() const {
  return fpr_.size();
}
inline int ROC::fpr_size() const {
  return _internal_fpr_size();
}
inline void ROC::clear_fpr() {
  fpr_.Clear();
}
inline float ROC::_internal_fpr(int index) const {
  return fpr_.Get(index);
}
inline float ROC::fpr(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ROC.fpr)
  return _internal_fpr(index);
}
inline void ROC::set_fpr(int index, float value) {
  fpr_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.ROC.fpr)
}
inline void ROC::_internal_add_fpr(float value) {
  fpr_.Add(value);
}
inline void ROC::add_fpr(float value) {
  _internal_add_fpr(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ROC.fpr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::_internal_fpr() const {
  return fpr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::fpr() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ROC.fpr)
  return _internal_fpr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::_internal_mutable_fpr() {
  return &fpr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::mutable_fpr() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ROC.fpr)
  return _internal_mutable_fpr();
}

// repeated float tpr = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int ROC::_internal_tpr_size() const {
  return tpr_.size();
}
inline int ROC::tpr_size() const {
  return _internal_tpr_size();
}
inline void ROC::clear_tpr() {
  tpr_.Clear();
}
inline float ROC::_internal_tpr(int index) const {
  return tpr_.Get(index);
}
inline float ROC::tpr(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ROC.tpr)
  return _internal_tpr(index);
}
inline void ROC::set_tpr(int index, float value) {
  tpr_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.ROC.tpr)
}
inline void ROC::_internal_add_tpr(float value) {
  tpr_.Add(value);
}
inline void ROC::add_tpr(float value) {
  _internal_add_tpr(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ROC.tpr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::_internal_tpr() const {
  return tpr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::tpr() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ROC.tpr)
  return _internal_tpr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::_internal_mutable_tpr() {
  return &tpr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::mutable_tpr() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ROC.tpr)
  return _internal_mutable_tpr();
}

// repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int ROC::_internal_thresholds_size() const {
  return thresholds_.size();
}
inline int ROC::thresholds_size() const {
  return _internal_thresholds_size();
}
inline void ROC::clear_thresholds() {
  thresholds_.Clear();
}
inline float ROC::_internal_thresholds(int index) const {
  return thresholds_.Get(index);
}
inline float ROC::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ROC.thresholds)
  return _internal_thresholds(index);
}
inline void ROC::set_thresholds(int index, float value) {
  thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.ROC.thresholds)
}
inline void ROC::_internal_add_thresholds(float value) {
  thresholds_.Add(value);
}
inline void ROC::add_thresholds(float value) {
  _internal_add_thresholds(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ROC.thresholds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::_internal_thresholds() const {
  return thresholds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::thresholds() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ROC.thresholds)
  return _internal_thresholds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::_internal_mutable_thresholds() {
  return &thresholds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ROC.thresholds)
  return _internal_mutable_thresholds();
}

// repeated float fpr_per_image = 4;
inline int ROC::_internal_fpr_per_image_size() const {
  return fpr_per_image_.size();
}
inline int ROC::fpr_per_image_size() const {
  return _internal_fpr_per_image_size();
}
inline void ROC::clear_fpr_per_image() {
  fpr_per_image_.Clear();
}
inline float ROC::_internal_fpr_per_image(int index) const {
  return fpr_per_image_.Get(index);
}
inline float ROC::fpr_per_image(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ROC.fpr_per_image)
  return _internal_fpr_per_image(index);
}
inline void ROC::set_fpr_per_image(int index, float value) {
  fpr_per_image_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.ROC.fpr_per_image)
}
inline void ROC::_internal_add_fpr_per_image(float value) {
  fpr_per_image_.Add(value);
}
inline void ROC::add_fpr_per_image(float value) {
  _internal_add_fpr_per_image(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ROC.fpr_per_image)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::_internal_fpr_per_image() const {
  return fpr_per_image_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::fpr_per_image() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ROC.fpr_per_image)
  return _internal_fpr_per_image();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::_internal_mutable_fpr_per_image() {
  return &fpr_per_image_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::mutable_fpr_per_image() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ROC.fpr_per_image)
  return _internal_mutable_fpr_per_image();
}

// repeated float fpr_per_object = 5;
inline int ROC::_internal_fpr_per_object_size() const {
  return fpr_per_object_.size();
}
inline int ROC::fpr_per_object_size() const {
  return _internal_fpr_per_object_size();
}
inline void ROC::clear_fpr_per_object() {
  fpr_per_object_.Clear();
}
inline float ROC::_internal_fpr_per_object(int index) const {
  return fpr_per_object_.Get(index);
}
inline float ROC::fpr_per_object(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ROC.fpr_per_object)
  return _internal_fpr_per_object(index);
}
inline void ROC::set_fpr_per_object(int index, float value) {
  fpr_per_object_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.ROC.fpr_per_object)
}
inline void ROC::_internal_add_fpr_per_object(float value) {
  fpr_per_object_.Add(value);
}
inline void ROC::add_fpr_per_object(float value) {
  _internal_add_fpr_per_object(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ROC.fpr_per_object)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::_internal_fpr_per_object() const {
  return fpr_per_object_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::fpr_per_object() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ROC.fpr_per_object)
  return _internal_fpr_per_object();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::_internal_mutable_fpr_per_object() {
  return &fpr_per_object_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::mutable_fpr_per_object() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ROC.fpr_per_object)
  return _internal_mutable_fpr_per_object();
}

// -------------------------------------------------------------------

// PrecisionRecallCurve

// repeated float recall = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int PrecisionRecallCurve::_internal_recall_size() const {
  return recall_.size();
}
inline int PrecisionRecallCurve::recall_size() const {
  return _internal_recall_size();
}
inline void PrecisionRecallCurve::clear_recall() {
  recall_.Clear();
}
inline float PrecisionRecallCurve::_internal_recall(int index) const {
  return recall_.Get(index);
}
inline float PrecisionRecallCurve::recall(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PrecisionRecallCurve.recall)
  return _internal_recall(index);
}
inline void PrecisionRecallCurve::set_recall(int index, float value) {
  recall_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.PrecisionRecallCurve.recall)
}
inline void PrecisionRecallCurve::_internal_add_recall(float value) {
  recall_.Add(value);
}
inline void PrecisionRecallCurve::add_recall(float value) {
  _internal_add_recall(value);
  // @@protoc_insertion_point(field_add:clarifai.api.PrecisionRecallCurve.recall)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::_internal_recall() const {
  return recall_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::recall() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PrecisionRecallCurve.recall)
  return _internal_recall();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::_internal_mutable_recall() {
  return &recall_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::mutable_recall() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PrecisionRecallCurve.recall)
  return _internal_mutable_recall();
}

// repeated float precision = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int PrecisionRecallCurve::_internal_precision_size() const {
  return precision_.size();
}
inline int PrecisionRecallCurve::precision_size() const {
  return _internal_precision_size();
}
inline void PrecisionRecallCurve::clear_precision() {
  precision_.Clear();
}
inline float PrecisionRecallCurve::_internal_precision(int index) const {
  return precision_.Get(index);
}
inline float PrecisionRecallCurve::precision(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PrecisionRecallCurve.precision)
  return _internal_precision(index);
}
inline void PrecisionRecallCurve::set_precision(int index, float value) {
  precision_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.PrecisionRecallCurve.precision)
}
inline void PrecisionRecallCurve::_internal_add_precision(float value) {
  precision_.Add(value);
}
inline void PrecisionRecallCurve::add_precision(float value) {
  _internal_add_precision(value);
  // @@protoc_insertion_point(field_add:clarifai.api.PrecisionRecallCurve.precision)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::_internal_precision() const {
  return precision_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::precision() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PrecisionRecallCurve.precision)
  return _internal_precision();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::_internal_mutable_precision() {
  return &precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::mutable_precision() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PrecisionRecallCurve.precision)
  return _internal_mutable_precision();
}

// repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int PrecisionRecallCurve::_internal_thresholds_size() const {
  return thresholds_.size();
}
inline int PrecisionRecallCurve::thresholds_size() const {
  return _internal_thresholds_size();
}
inline void PrecisionRecallCurve::clear_thresholds() {
  thresholds_.Clear();
}
inline float PrecisionRecallCurve::_internal_thresholds(int index) const {
  return thresholds_.Get(index);
}
inline float PrecisionRecallCurve::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PrecisionRecallCurve.thresholds)
  return _internal_thresholds(index);
}
inline void PrecisionRecallCurve::set_thresholds(int index, float value) {
  thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.PrecisionRecallCurve.thresholds)
}
inline void PrecisionRecallCurve::_internal_add_thresholds(float value) {
  thresholds_.Add(value);
}
inline void PrecisionRecallCurve::add_thresholds(float value) {
  _internal_add_thresholds(value);
  // @@protoc_insertion_point(field_add:clarifai.api.PrecisionRecallCurve.thresholds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::_internal_thresholds() const {
  return thresholds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::thresholds() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PrecisionRecallCurve.thresholds)
  return _internal_thresholds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::_internal_mutable_thresholds() {
  return &thresholds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PrecisionRecallCurve.thresholds)
  return _internal_mutable_thresholds();
}

// -------------------------------------------------------------------

// BinaryMetrics

// uint32 num_pos = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BinaryMetrics::clear_num_pos() {
  num_pos_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinaryMetrics::_internal_num_pos() const {
  return num_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinaryMetrics::num_pos() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.num_pos)
  return _internal_num_pos();
}
inline void BinaryMetrics::_internal_set_num_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_pos_ = value;
}
inline void BinaryMetrics::set_num_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_pos(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.num_pos)
}

// uint32 num_neg = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BinaryMetrics::clear_num_neg() {
  num_neg_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinaryMetrics::_internal_num_neg() const {
  return num_neg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinaryMetrics::num_neg() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.num_neg)
  return _internal_num_neg();
}
inline void BinaryMetrics::_internal_set_num_neg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_neg_ = value;
}
inline void BinaryMetrics::set_num_neg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_neg(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.num_neg)
}

// uint32 num_tot = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BinaryMetrics::clear_num_tot() {
  num_tot_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinaryMetrics::_internal_num_tot() const {
  return num_tot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinaryMetrics::num_tot() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.num_tot)
  return _internal_num_tot();
}
inline void BinaryMetrics::_internal_set_num_tot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_tot_ = value;
}
inline void BinaryMetrics::set_num_tot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_tot(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.num_tot)
}

// float roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BinaryMetrics::clear_roc_auc() {
  roc_auc_ = 0;
}
inline float BinaryMetrics::_internal_roc_auc() const {
  return roc_auc_;
}
inline float BinaryMetrics::roc_auc() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.roc_auc)
  return _internal_roc_auc();
}
inline void BinaryMetrics::_internal_set_roc_auc(float value) {
  
  roc_auc_ = value;
}
inline void BinaryMetrics::set_roc_auc(float value) {
  _internal_set_roc_auc(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.roc_auc)
}

// float f1 = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BinaryMetrics::clear_f1() {
  f1_ = 0;
}
inline float BinaryMetrics::_internal_f1() const {
  return f1_;
}
inline float BinaryMetrics::f1() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.f1)
  return _internal_f1();
}
inline void BinaryMetrics::_internal_set_f1(float value) {
  
  f1_ = value;
}
inline void BinaryMetrics::set_f1(float value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.f1)
}

// .clarifai.api.Concept concept = 6;
inline bool BinaryMetrics::_internal_has_concept() const {
  return this != internal_default_instance() && concept_ != nullptr;
}
inline bool BinaryMetrics::has_concept() const {
  return _internal_has_concept();
}
inline void BinaryMetrics::clear_concept() {
  if (GetArena() == nullptr && concept_ != nullptr) {
    delete concept_;
  }
  concept_ = nullptr;
}
inline const ::clarifai::api::Concept& BinaryMetrics::_internal_concept() const {
  const ::clarifai::api::Concept* p = concept_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Concept*>(
      &::clarifai::api::_Concept_default_instance_);
}
inline const ::clarifai::api::Concept& BinaryMetrics::concept() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.concept)
  return _internal_concept();
}
inline void BinaryMetrics::unsafe_arena_set_allocated_concept(
    ::clarifai::api::Concept* concept) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_);
  }
  concept_ = concept;
  if (concept) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.BinaryMetrics.concept)
}
inline ::clarifai::api::Concept* BinaryMetrics::release_concept() {
  
  ::clarifai::api::Concept* temp = concept_;
  concept_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Concept* BinaryMetrics::unsafe_arena_release_concept() {
  // @@protoc_insertion_point(field_release:clarifai.api.BinaryMetrics.concept)
  
  ::clarifai::api::Concept* temp = concept_;
  concept_ = nullptr;
  return temp;
}
inline ::clarifai::api::Concept* BinaryMetrics::_internal_mutable_concept() {
  
  if (concept_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Concept>(GetArena());
    concept_ = p;
  }
  return concept_;
}
inline ::clarifai::api::Concept* BinaryMetrics::mutable_concept() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.BinaryMetrics.concept)
  return _internal_mutable_concept();
}
inline void BinaryMetrics::set_allocated_concept(::clarifai::api::Concept* concept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete concept_;
  }
  if (concept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(concept);
    if (message_arena != submessage_arena) {
      concept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept, submessage_arena);
    }
    
  } else {
    
  }
  concept_ = concept;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.BinaryMetrics.concept)
}

// .clarifai.api.ROC roc_curve = 7;
inline bool BinaryMetrics::_internal_has_roc_curve() const {
  return this != internal_default_instance() && roc_curve_ != nullptr;
}
inline bool BinaryMetrics::has_roc_curve() const {
  return _internal_has_roc_curve();
}
inline void BinaryMetrics::clear_roc_curve() {
  if (GetArena() == nullptr && roc_curve_ != nullptr) {
    delete roc_curve_;
  }
  roc_curve_ = nullptr;
}
inline const ::clarifai::api::ROC& BinaryMetrics::_internal_roc_curve() const {
  const ::clarifai::api::ROC* p = roc_curve_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ROC*>(
      &::clarifai::api::_ROC_default_instance_);
}
inline const ::clarifai::api::ROC& BinaryMetrics::roc_curve() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.roc_curve)
  return _internal_roc_curve();
}
inline void BinaryMetrics::unsafe_arena_set_allocated_roc_curve(
    ::clarifai::api::ROC* roc_curve) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roc_curve_);
  }
  roc_curve_ = roc_curve;
  if (roc_curve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.BinaryMetrics.roc_curve)
}
inline ::clarifai::api::ROC* BinaryMetrics::release_roc_curve() {
  
  ::clarifai::api::ROC* temp = roc_curve_;
  roc_curve_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::ROC* BinaryMetrics::unsafe_arena_release_roc_curve() {
  // @@protoc_insertion_point(field_release:clarifai.api.BinaryMetrics.roc_curve)
  
  ::clarifai::api::ROC* temp = roc_curve_;
  roc_curve_ = nullptr;
  return temp;
}
inline ::clarifai::api::ROC* BinaryMetrics::_internal_mutable_roc_curve() {
  
  if (roc_curve_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ROC>(GetArena());
    roc_curve_ = p;
  }
  return roc_curve_;
}
inline ::clarifai::api::ROC* BinaryMetrics::mutable_roc_curve() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.BinaryMetrics.roc_curve)
  return _internal_mutable_roc_curve();
}
inline void BinaryMetrics::set_allocated_roc_curve(::clarifai::api::ROC* roc_curve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roc_curve_;
  }
  if (roc_curve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roc_curve);
    if (message_arena != submessage_arena) {
      roc_curve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roc_curve, submessage_arena);
    }
    
  } else {
    
  }
  roc_curve_ = roc_curve;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.BinaryMetrics.roc_curve)
}

// .clarifai.api.PrecisionRecallCurve precision_recall_curve = 8;
inline bool BinaryMetrics::_internal_has_precision_recall_curve() const {
  return this != internal_default_instance() && precision_recall_curve_ != nullptr;
}
inline bool BinaryMetrics::has_precision_recall_curve() const {
  return _internal_has_precision_recall_curve();
}
inline void BinaryMetrics::clear_precision_recall_curve() {
  if (GetArena() == nullptr && precision_recall_curve_ != nullptr) {
    delete precision_recall_curve_;
  }
  precision_recall_curve_ = nullptr;
}
inline const ::clarifai::api::PrecisionRecallCurve& BinaryMetrics::_internal_precision_recall_curve() const {
  const ::clarifai::api::PrecisionRecallCurve* p = precision_recall_curve_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::PrecisionRecallCurve*>(
      &::clarifai::api::_PrecisionRecallCurve_default_instance_);
}
inline const ::clarifai::api::PrecisionRecallCurve& BinaryMetrics::precision_recall_curve() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.precision_recall_curve)
  return _internal_precision_recall_curve();
}
inline void BinaryMetrics::unsafe_arena_set_allocated_precision_recall_curve(
    ::clarifai::api::PrecisionRecallCurve* precision_recall_curve) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(precision_recall_curve_);
  }
  precision_recall_curve_ = precision_recall_curve;
  if (precision_recall_curve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.BinaryMetrics.precision_recall_curve)
}
inline ::clarifai::api::PrecisionRecallCurve* BinaryMetrics::release_precision_recall_curve() {
  
  ::clarifai::api::PrecisionRecallCurve* temp = precision_recall_curve_;
  precision_recall_curve_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::PrecisionRecallCurve* BinaryMetrics::unsafe_arena_release_precision_recall_curve() {
  // @@protoc_insertion_point(field_release:clarifai.api.BinaryMetrics.precision_recall_curve)
  
  ::clarifai::api::PrecisionRecallCurve* temp = precision_recall_curve_;
  precision_recall_curve_ = nullptr;
  return temp;
}
inline ::clarifai::api::PrecisionRecallCurve* BinaryMetrics::_internal_mutable_precision_recall_curve() {
  
  if (precision_recall_curve_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::PrecisionRecallCurve>(GetArena());
    precision_recall_curve_ = p;
  }
  return precision_recall_curve_;
}
inline ::clarifai::api::PrecisionRecallCurve* BinaryMetrics::mutable_precision_recall_curve() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.BinaryMetrics.precision_recall_curve)
  return _internal_mutable_precision_recall_curve();
}
inline void BinaryMetrics::set_allocated_precision_recall_curve(::clarifai::api::PrecisionRecallCurve* precision_recall_curve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete precision_recall_curve_;
  }
  if (precision_recall_curve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(precision_recall_curve);
    if (message_arena != submessage_arena) {
      precision_recall_curve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, precision_recall_curve, submessage_arena);
    }
    
  } else {
    
  }
  precision_recall_curve_ = precision_recall_curve;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.BinaryMetrics.precision_recall_curve)
}

// float avg_precision = 9;
inline void BinaryMetrics::clear_avg_precision() {
  avg_precision_ = 0;
}
inline float BinaryMetrics::_internal_avg_precision() const {
  return avg_precision_;
}
inline float BinaryMetrics::avg_precision() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.avg_precision)
  return _internal_avg_precision();
}
inline void BinaryMetrics::_internal_set_avg_precision(float value) {
  
  avg_precision_ = value;
}
inline void BinaryMetrics::set_avg_precision(float value) {
  _internal_set_avg_precision(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.avg_precision)
}

// string area_name = 10;
inline void BinaryMetrics::clear_area_name() {
  area_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BinaryMetrics::area_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.area_name)
  return _internal_area_name();
}
inline void BinaryMetrics::set_area_name(const std::string& value) {
  _internal_set_area_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.area_name)
}
inline std::string* BinaryMetrics::mutable_area_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.BinaryMetrics.area_name)
  return _internal_mutable_area_name();
}
inline const std::string& BinaryMetrics::_internal_area_name() const {
  return area_name_.Get();
}
inline void BinaryMetrics::_internal_set_area_name(const std::string& value) {
  
  area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BinaryMetrics::set_area_name(std::string&& value) {
  
  area_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.BinaryMetrics.area_name)
}
inline void BinaryMetrics::set_area_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.BinaryMetrics.area_name)
}
inline void BinaryMetrics::set_area_name(const char* value,
    size_t size) {
  
  area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.BinaryMetrics.area_name)
}
inline std::string* BinaryMetrics::_internal_mutable_area_name() {
  
  return area_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BinaryMetrics::release_area_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.BinaryMetrics.area_name)
  return area_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BinaryMetrics::set_allocated_area_name(std::string* area_name) {
  if (area_name != nullptr) {
    
  } else {
    
  }
  area_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), area_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.BinaryMetrics.area_name)
}

// double area_min = 11;
inline void BinaryMetrics::clear_area_min() {
  area_min_ = 0;
}
inline double BinaryMetrics::_internal_area_min() const {
  return area_min_;
}
inline double BinaryMetrics::area_min() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.area_min)
  return _internal_area_min();
}
inline void BinaryMetrics::_internal_set_area_min(double value) {
  
  area_min_ = value;
}
inline void BinaryMetrics::set_area_min(double value) {
  _internal_set_area_min(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.area_min)
}

// double area_max = 12;
inline void BinaryMetrics::clear_area_max() {
  area_max_ = 0;
}
inline double BinaryMetrics::_internal_area_max() const {
  return area_max_;
}
inline double BinaryMetrics::area_max() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.area_max)
  return _internal_area_max();
}
inline void BinaryMetrics::_internal_set_area_max(double value) {
  
  area_max_ = value;
}
inline void BinaryMetrics::set_area_max(double value) {
  _internal_set_area_max(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.area_max)
}

// float iou = 13;
inline void BinaryMetrics::clear_iou() {
  iou_ = 0;
}
inline float BinaryMetrics::_internal_iou() const {
  return iou_;
}
inline float BinaryMetrics::iou() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.iou)
  return _internal_iou();
}
inline void BinaryMetrics::_internal_set_iou(float value) {
  
  iou_ = value;
}
inline void BinaryMetrics::set_iou(float value) {
  _internal_set_iou(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.iou)
}

// -------------------------------------------------------------------

// EvalTestSetEntry

// string id = 1;
inline void EvalTestSetEntry::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EvalTestSetEntry::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalTestSetEntry.id)
  return _internal_id();
}
inline void EvalTestSetEntry::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.EvalTestSetEntry.id)
}
inline std::string* EvalTestSetEntry::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalTestSetEntry.id)
  return _internal_mutable_id();
}
inline const std::string& EvalTestSetEntry::_internal_id() const {
  return id_.Get();
}
inline void EvalTestSetEntry::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EvalTestSetEntry::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.EvalTestSetEntry.id)
}
inline void EvalTestSetEntry::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.EvalTestSetEntry.id)
}
inline void EvalTestSetEntry::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.EvalTestSetEntry.id)
}
inline std::string* EvalTestSetEntry::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EvalTestSetEntry::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalTestSetEntry.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EvalTestSetEntry::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalTestSetEntry.id)
}

// string url = 2;
inline void EvalTestSetEntry::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EvalTestSetEntry::url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalTestSetEntry.url)
  return _internal_url();
}
inline void EvalTestSetEntry::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.EvalTestSetEntry.url)
}
inline std::string* EvalTestSetEntry::mutable_url() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalTestSetEntry.url)
  return _internal_mutable_url();
}
inline const std::string& EvalTestSetEntry::_internal_url() const {
  return url_.Get();
}
inline void EvalTestSetEntry::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EvalTestSetEntry::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.EvalTestSetEntry.url)
}
inline void EvalTestSetEntry::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.EvalTestSetEntry.url)
}
inline void EvalTestSetEntry::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.EvalTestSetEntry.url)
}
inline std::string* EvalTestSetEntry::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EvalTestSetEntry::release_url() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalTestSetEntry.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EvalTestSetEntry::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalTestSetEntry.url)
}

// repeated .clarifai.api.Concept predicted_concepts = 3;
inline int EvalTestSetEntry::_internal_predicted_concepts_size() const {
  return predicted_concepts_.size();
}
inline int EvalTestSetEntry::predicted_concepts_size() const {
  return _internal_predicted_concepts_size();
}
inline void EvalTestSetEntry::clear_predicted_concepts() {
  predicted_concepts_.Clear();
}
inline ::clarifai::api::Concept* EvalTestSetEntry::mutable_predicted_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalTestSetEntry.predicted_concepts)
  return predicted_concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
EvalTestSetEntry::mutable_predicted_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EvalTestSetEntry.predicted_concepts)
  return &predicted_concepts_;
}
inline const ::clarifai::api::Concept& EvalTestSetEntry::_internal_predicted_concepts(int index) const {
  return predicted_concepts_.Get(index);
}
inline const ::clarifai::api::Concept& EvalTestSetEntry::predicted_concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalTestSetEntry.predicted_concepts)
  return _internal_predicted_concepts(index);
}
inline ::clarifai::api::Concept* EvalTestSetEntry::_internal_add_predicted_concepts() {
  return predicted_concepts_.Add();
}
inline ::clarifai::api::Concept* EvalTestSetEntry::add_predicted_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.EvalTestSetEntry.predicted_concepts)
  return _internal_add_predicted_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
EvalTestSetEntry::predicted_concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EvalTestSetEntry.predicted_concepts)
  return predicted_concepts_;
}

// repeated .clarifai.api.Concept ground_truth_concepts = 4;
inline int EvalTestSetEntry::_internal_ground_truth_concepts_size() const {
  return ground_truth_concepts_.size();
}
inline int EvalTestSetEntry::ground_truth_concepts_size() const {
  return _internal_ground_truth_concepts_size();
}
inline void EvalTestSetEntry::clear_ground_truth_concepts() {
  ground_truth_concepts_.Clear();
}
inline ::clarifai::api::Concept* EvalTestSetEntry::mutable_ground_truth_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalTestSetEntry.ground_truth_concepts)
  return ground_truth_concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
EvalTestSetEntry::mutable_ground_truth_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EvalTestSetEntry.ground_truth_concepts)
  return &ground_truth_concepts_;
}
inline const ::clarifai::api::Concept& EvalTestSetEntry::_internal_ground_truth_concepts(int index) const {
  return ground_truth_concepts_.Get(index);
}
inline const ::clarifai::api::Concept& EvalTestSetEntry::ground_truth_concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalTestSetEntry.ground_truth_concepts)
  return _internal_ground_truth_concepts(index);
}
inline ::clarifai::api::Concept* EvalTestSetEntry::_internal_add_ground_truth_concepts() {
  return ground_truth_concepts_.Add();
}
inline ::clarifai::api::Concept* EvalTestSetEntry::add_ground_truth_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.EvalTestSetEntry.ground_truth_concepts)
  return _internal_add_ground_truth_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
EvalTestSetEntry::ground_truth_concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EvalTestSetEntry.ground_truth_concepts)
  return ground_truth_concepts_;
}

// .clarifai.api.Annotation annotation = 5;
inline bool EvalTestSetEntry::_internal_has_annotation() const {
  return this != internal_default_instance() && annotation_ != nullptr;
}
inline bool EvalTestSetEntry::has_annotation() const {
  return _internal_has_annotation();
}
inline void EvalTestSetEntry::clear_annotation() {
  if (GetArena() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
inline const ::clarifai::api::Annotation& EvalTestSetEntry::_internal_annotation() const {
  const ::clarifai::api::Annotation* p = annotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Annotation*>(
      &::clarifai::api::_Annotation_default_instance_);
}
inline const ::clarifai::api::Annotation& EvalTestSetEntry::annotation() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalTestSetEntry.annotation)
  return _internal_annotation();
}
inline void EvalTestSetEntry::unsafe_arena_set_allocated_annotation(
    ::clarifai::api::Annotation* annotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_);
  }
  annotation_ = annotation;
  if (annotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.EvalTestSetEntry.annotation)
}
inline ::clarifai::api::Annotation* EvalTestSetEntry::release_annotation() {
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Annotation* EvalTestSetEntry::unsafe_arena_release_annotation() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalTestSetEntry.annotation)
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  return temp;
}
inline ::clarifai::api::Annotation* EvalTestSetEntry::_internal_mutable_annotation() {
  
  if (annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Annotation>(GetArena());
    annotation_ = p;
  }
  return annotation_;
}
inline ::clarifai::api::Annotation* EvalTestSetEntry::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalTestSetEntry.annotation)
  return _internal_mutable_annotation();
}
inline void EvalTestSetEntry::set_allocated_annotation(::clarifai::api::Annotation* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete annotation_;
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(annotation);
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    
  } else {
    
  }
  annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalTestSetEntry.annotation)
}

// -------------------------------------------------------------------

// LOPQEvalResult

// int32 k = 1;
inline void LOPQEvalResult::clear_k() {
  k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQEvalResult::_internal_k() const {
  return k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQEvalResult::k() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LOPQEvalResult.k)
  return _internal_k();
}
inline void LOPQEvalResult::_internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  k_ = value;
}
inline void LOPQEvalResult::set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LOPQEvalResult.k)
}

// float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LOPQEvalResult::clear_recall_vs_brute_force() {
  recall_vs_brute_force_ = 0;
}
inline float LOPQEvalResult::_internal_recall_vs_brute_force() const {
  return recall_vs_brute_force_;
}
inline float LOPQEvalResult::recall_vs_brute_force() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LOPQEvalResult.recall_vs_brute_force)
  return _internal_recall_vs_brute_force();
}
inline void LOPQEvalResult::_internal_set_recall_vs_brute_force(float value) {
  
  recall_vs_brute_force_ = value;
}
inline void LOPQEvalResult::set_recall_vs_brute_force(float value) {
  _internal_set_recall_vs_brute_force(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LOPQEvalResult.recall_vs_brute_force)
}

// float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LOPQEvalResult::clear_kendall_tau_vs_brute_force() {
  kendall_tau_vs_brute_force_ = 0;
}
inline float LOPQEvalResult::_internal_kendall_tau_vs_brute_force() const {
  return kendall_tau_vs_brute_force_;
}
inline float LOPQEvalResult::kendall_tau_vs_brute_force() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LOPQEvalResult.kendall_tau_vs_brute_force)
  return _internal_kendall_tau_vs_brute_force();
}
inline void LOPQEvalResult::_internal_set_kendall_tau_vs_brute_force(float value) {
  
  kendall_tau_vs_brute_force_ = value;
}
inline void LOPQEvalResult::set_kendall_tau_vs_brute_force(float value) {
  _internal_set_kendall_tau_vs_brute_force(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LOPQEvalResult.kendall_tau_vs_brute_force)
}

// float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LOPQEvalResult::clear_most_frequent_code_percent() {
  most_frequent_code_percent_ = 0;
}
inline float LOPQEvalResult::_internal_most_frequent_code_percent() const {
  return most_frequent_code_percent_;
}
inline float LOPQEvalResult::most_frequent_code_percent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LOPQEvalResult.most_frequent_code_percent)
  return _internal_most_frequent_code_percent();
}
inline void LOPQEvalResult::_internal_set_most_frequent_code_percent(float value) {
  
  most_frequent_code_percent_ = value;
}
inline void LOPQEvalResult::set_most_frequent_code_percent(float value) {
  _internal_set_most_frequent_code_percent(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LOPQEvalResult.most_frequent_code_percent)
}

// float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LOPQEvalResult::clear_lopq_ndcg() {
  lopq_ndcg_ = 0;
}
inline float LOPQEvalResult::_internal_lopq_ndcg() const {
  return lopq_ndcg_;
}
inline float LOPQEvalResult::lopq_ndcg() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LOPQEvalResult.lopq_ndcg)
  return _internal_lopq_ndcg();
}
inline void LOPQEvalResult::_internal_set_lopq_ndcg(float value) {
  
  lopq_ndcg_ = value;
}
inline void LOPQEvalResult::set_lopq_ndcg(float value) {
  _internal_set_lopq_ndcg(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LOPQEvalResult.lopq_ndcg)
}

// float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LOPQEvalResult::clear_brute_force_ndcg() {
  brute_force_ndcg_ = 0;
}
inline float LOPQEvalResult::_internal_brute_force_ndcg() const {
  return brute_force_ndcg_;
}
inline float LOPQEvalResult::brute_force_ndcg() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LOPQEvalResult.brute_force_ndcg)
  return _internal_brute_force_ndcg();
}
inline void LOPQEvalResult::_internal_set_brute_force_ndcg(float value) {
  
  brute_force_ndcg_ = value;
}
inline void LOPQEvalResult::set_brute_force_ndcg(float value) {
  _internal_set_brute_force_ndcg(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LOPQEvalResult.brute_force_ndcg)
}

// -------------------------------------------------------------------

// MetricsSummary

// float top1_accuracy = 1 [deprecated = true];
inline void MetricsSummary::clear_top1_accuracy() {
  top1_accuracy_ = 0;
}
inline float MetricsSummary::_internal_top1_accuracy() const {
  return top1_accuracy_;
}
inline float MetricsSummary::top1_accuracy() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.top1_accuracy)
  return _internal_top1_accuracy();
}
inline void MetricsSummary::_internal_set_top1_accuracy(float value) {
  
  top1_accuracy_ = value;
}
inline void MetricsSummary::set_top1_accuracy(float value) {
  _internal_set_top1_accuracy(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.top1_accuracy)
}

// float top5_accuracy = 2 [deprecated = true];
inline void MetricsSummary::clear_top5_accuracy() {
  top5_accuracy_ = 0;
}
inline float MetricsSummary::_internal_top5_accuracy() const {
  return top5_accuracy_;
}
inline float MetricsSummary::top5_accuracy() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.top5_accuracy)
  return _internal_top5_accuracy();
}
inline void MetricsSummary::_internal_set_top5_accuracy(float value) {
  
  top5_accuracy_ = value;
}
inline void MetricsSummary::set_top5_accuracy(float value) {
  _internal_set_top5_accuracy(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.top5_accuracy)
}

// float macro_avg_roc_auc = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void MetricsSummary::clear_macro_avg_roc_auc() {
  macro_avg_roc_auc_ = 0;
}
inline float MetricsSummary::_internal_macro_avg_roc_auc() const {
  return macro_avg_roc_auc_;
}
inline float MetricsSummary::macro_avg_roc_auc() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.macro_avg_roc_auc)
  return _internal_macro_avg_roc_auc();
}
inline void MetricsSummary::_internal_set_macro_avg_roc_auc(float value) {
  
  macro_avg_roc_auc_ = value;
}
inline void MetricsSummary::set_macro_avg_roc_auc(float value) {
  _internal_set_macro_avg_roc_auc(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.macro_avg_roc_auc)
}

// float macro_std_roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void MetricsSummary::clear_macro_std_roc_auc() {
  macro_std_roc_auc_ = 0;
}
inline float MetricsSummary::_internal_macro_std_roc_auc() const {
  return macro_std_roc_auc_;
}
inline float MetricsSummary::macro_std_roc_auc() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.macro_std_roc_auc)
  return _internal_macro_std_roc_auc();
}
inline void MetricsSummary::_internal_set_macro_std_roc_auc(float value) {
  
  macro_std_roc_auc_ = value;
}
inline void MetricsSummary::set_macro_std_roc_auc(float value) {
  _internal_set_macro_std_roc_auc(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.macro_std_roc_auc)
}

// float macro_avg_f1_score = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void MetricsSummary::clear_macro_avg_f1_score() {
  macro_avg_f1_score_ = 0;
}
inline float MetricsSummary::_internal_macro_avg_f1_score() const {
  return macro_avg_f1_score_;
}
inline float MetricsSummary::macro_avg_f1_score() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.macro_avg_f1_score)
  return _internal_macro_avg_f1_score();
}
inline void MetricsSummary::_internal_set_macro_avg_f1_score(float value) {
  
  macro_avg_f1_score_ = value;
}
inline void MetricsSummary::set_macro_avg_f1_score(float value) {
  _internal_set_macro_avg_f1_score(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.macro_avg_f1_score)
}

// float macro_std_f1_score = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void MetricsSummary::clear_macro_std_f1_score() {
  macro_std_f1_score_ = 0;
}
inline float MetricsSummary::_internal_macro_std_f1_score() const {
  return macro_std_f1_score_;
}
inline float MetricsSummary::macro_std_f1_score() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.macro_std_f1_score)
  return _internal_macro_std_f1_score();
}
inline void MetricsSummary::_internal_set_macro_std_f1_score(float value) {
  
  macro_std_f1_score_ = value;
}
inline void MetricsSummary::set_macro_std_f1_score(float value) {
  _internal_set_macro_std_f1_score(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.macro_std_f1_score)
}

// float macro_avg_precision = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void MetricsSummary::clear_macro_avg_precision() {
  macro_avg_precision_ = 0;
}
inline float MetricsSummary::_internal_macro_avg_precision() const {
  return macro_avg_precision_;
}
inline float MetricsSummary::macro_avg_precision() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.macro_avg_precision)
  return _internal_macro_avg_precision();
}
inline void MetricsSummary::_internal_set_macro_avg_precision(float value) {
  
  macro_avg_precision_ = value;
}
inline void MetricsSummary::set_macro_avg_precision(float value) {
  _internal_set_macro_avg_precision(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.macro_avg_precision)
}

// float macro_avg_recall = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void MetricsSummary::clear_macro_avg_recall() {
  macro_avg_recall_ = 0;
}
inline float MetricsSummary::_internal_macro_avg_recall() const {
  return macro_avg_recall_;
}
inline float MetricsSummary::macro_avg_recall() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.macro_avg_recall)
  return _internal_macro_avg_recall();
}
inline void MetricsSummary::_internal_set_macro_avg_recall(float value) {
  
  macro_avg_recall_ = value;
}
inline void MetricsSummary::set_macro_avg_recall(float value) {
  _internal_set_macro_avg_recall(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.macro_avg_recall)
}

// float mean_avg_precision_iou_50 = 10;
inline void MetricsSummary::clear_mean_avg_precision_iou_50() {
  mean_avg_precision_iou_50_ = 0;
}
inline float MetricsSummary::_internal_mean_avg_precision_iou_50() const {
  return mean_avg_precision_iou_50_;
}
inline float MetricsSummary::mean_avg_precision_iou_50() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.mean_avg_precision_iou_50)
  return _internal_mean_avg_precision_iou_50();
}
inline void MetricsSummary::_internal_set_mean_avg_precision_iou_50(float value) {
  
  mean_avg_precision_iou_50_ = value;
}
inline void MetricsSummary::set_mean_avg_precision_iou_50(float value) {
  _internal_set_mean_avg_precision_iou_50(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.mean_avg_precision_iou_50)
}

// float mean_avg_precision_iou_range = 11;
inline void MetricsSummary::clear_mean_avg_precision_iou_range() {
  mean_avg_precision_iou_range_ = 0;
}
inline float MetricsSummary::_internal_mean_avg_precision_iou_range() const {
  return mean_avg_precision_iou_range_;
}
inline float MetricsSummary::mean_avg_precision_iou_range() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.mean_avg_precision_iou_range)
  return _internal_mean_avg_precision_iou_range();
}
inline void MetricsSummary::_internal_set_mean_avg_precision_iou_range(float value) {
  
  mean_avg_precision_iou_range_ = value;
}
inline void MetricsSummary::set_mean_avg_precision_iou_range(float value) {
  _internal_set_mean_avg_precision_iou_range(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.mean_avg_precision_iou_range)
}

// repeated .clarifai.api.LOPQEvalResult lopq_metrics = 9;
inline int MetricsSummary::_internal_lopq_metrics_size() const {
  return lopq_metrics_.size();
}
inline int MetricsSummary::lopq_metrics_size() const {
  return _internal_lopq_metrics_size();
}
inline void MetricsSummary::clear_lopq_metrics() {
  lopq_metrics_.Clear();
}
inline ::clarifai::api::LOPQEvalResult* MetricsSummary::mutable_lopq_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MetricsSummary.lopq_metrics)
  return lopq_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LOPQEvalResult >*
MetricsSummary::mutable_lopq_metrics() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MetricsSummary.lopq_metrics)
  return &lopq_metrics_;
}
inline const ::clarifai::api::LOPQEvalResult& MetricsSummary::_internal_lopq_metrics(int index) const {
  return lopq_metrics_.Get(index);
}
inline const ::clarifai::api::LOPQEvalResult& MetricsSummary::lopq_metrics(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.lopq_metrics)
  return _internal_lopq_metrics(index);
}
inline ::clarifai::api::LOPQEvalResult* MetricsSummary::_internal_add_lopq_metrics() {
  return lopq_metrics_.Add();
}
inline ::clarifai::api::LOPQEvalResult* MetricsSummary::add_lopq_metrics() {
  // @@protoc_insertion_point(field_add:clarifai.api.MetricsSummary.lopq_metrics)
  return _internal_add_lopq_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LOPQEvalResult >&
MetricsSummary::lopq_metrics() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MetricsSummary.lopq_metrics)
  return lopq_metrics_;
}

// -------------------------------------------------------------------

// EvalMetrics

// .clarifai.api.status.Status status = 1;
inline bool EvalMetrics::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool EvalMetrics::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& EvalMetrics::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& EvalMetrics::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.status)
  return _internal_status();
}
inline void EvalMetrics::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.EvalMetrics.status)
}
inline ::clarifai::api::status::Status* EvalMetrics::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::status::Status* EvalMetrics::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalMetrics.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* EvalMetrics::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* EvalMetrics::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.status)
  return _internal_mutable_status();
}
inline void EvalMetrics::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalMetrics.status)
}

// .clarifai.api.MetricsSummary summary = 2;
inline bool EvalMetrics::_internal_has_summary() const {
  return this != internal_default_instance() && summary_ != nullptr;
}
inline bool EvalMetrics::has_summary() const {
  return _internal_has_summary();
}
inline void EvalMetrics::clear_summary() {
  if (GetArena() == nullptr && summary_ != nullptr) {
    delete summary_;
  }
  summary_ = nullptr;
}
inline const ::clarifai::api::MetricsSummary& EvalMetrics::_internal_summary() const {
  const ::clarifai::api::MetricsSummary* p = summary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::MetricsSummary*>(
      &::clarifai::api::_MetricsSummary_default_instance_);
}
inline const ::clarifai::api::MetricsSummary& EvalMetrics::summary() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.summary)
  return _internal_summary();
}
inline void EvalMetrics::unsafe_arena_set_allocated_summary(
    ::clarifai::api::MetricsSummary* summary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_);
  }
  summary_ = summary;
  if (summary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.EvalMetrics.summary)
}
inline ::clarifai::api::MetricsSummary* EvalMetrics::release_summary() {
  
  ::clarifai::api::MetricsSummary* temp = summary_;
  summary_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::MetricsSummary* EvalMetrics::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalMetrics.summary)
  
  ::clarifai::api::MetricsSummary* temp = summary_;
  summary_ = nullptr;
  return temp;
}
inline ::clarifai::api::MetricsSummary* EvalMetrics::_internal_mutable_summary() {
  
  if (summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::MetricsSummary>(GetArena());
    summary_ = p;
  }
  return summary_;
}
inline ::clarifai::api::MetricsSummary* EvalMetrics::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.summary)
  return _internal_mutable_summary();
}
inline void EvalMetrics::set_allocated_summary(::clarifai::api::MetricsSummary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete summary_;
  }
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary);
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    
  } else {
    
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalMetrics.summary)
}

// .clarifai.api.ConfusionMatrix confusion_matrix = 3;
inline bool EvalMetrics::_internal_has_confusion_matrix() const {
  return this != internal_default_instance() && confusion_matrix_ != nullptr;
}
inline bool EvalMetrics::has_confusion_matrix() const {
  return _internal_has_confusion_matrix();
}
inline void EvalMetrics::clear_confusion_matrix() {
  if (GetArena() == nullptr && confusion_matrix_ != nullptr) {
    delete confusion_matrix_;
  }
  confusion_matrix_ = nullptr;
}
inline const ::clarifai::api::ConfusionMatrix& EvalMetrics::_internal_confusion_matrix() const {
  const ::clarifai::api::ConfusionMatrix* p = confusion_matrix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConfusionMatrix*>(
      &::clarifai::api::_ConfusionMatrix_default_instance_);
}
inline const ::clarifai::api::ConfusionMatrix& EvalMetrics::confusion_matrix() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.confusion_matrix)
  return _internal_confusion_matrix();
}
inline void EvalMetrics::unsafe_arena_set_allocated_confusion_matrix(
    ::clarifai::api::ConfusionMatrix* confusion_matrix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(confusion_matrix_);
  }
  confusion_matrix_ = confusion_matrix;
  if (confusion_matrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.EvalMetrics.confusion_matrix)
}
inline ::clarifai::api::ConfusionMatrix* EvalMetrics::release_confusion_matrix() {
  
  ::clarifai::api::ConfusionMatrix* temp = confusion_matrix_;
  confusion_matrix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::ConfusionMatrix* EvalMetrics::unsafe_arena_release_confusion_matrix() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalMetrics.confusion_matrix)
  
  ::clarifai::api::ConfusionMatrix* temp = confusion_matrix_;
  confusion_matrix_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConfusionMatrix* EvalMetrics::_internal_mutable_confusion_matrix() {
  
  if (confusion_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConfusionMatrix>(GetArena());
    confusion_matrix_ = p;
  }
  return confusion_matrix_;
}
inline ::clarifai::api::ConfusionMatrix* EvalMetrics::mutable_confusion_matrix() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.confusion_matrix)
  return _internal_mutable_confusion_matrix();
}
inline void EvalMetrics::set_allocated_confusion_matrix(::clarifai::api::ConfusionMatrix* confusion_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete confusion_matrix_;
  }
  if (confusion_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(confusion_matrix);
    if (message_arena != submessage_arena) {
      confusion_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confusion_matrix, submessage_arena);
    }
    
  } else {
    
  }
  confusion_matrix_ = confusion_matrix;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalMetrics.confusion_matrix)
}

// .clarifai.api.CooccurrenceMatrix cooccurrence_matrix = 4;
inline bool EvalMetrics::_internal_has_cooccurrence_matrix() const {
  return this != internal_default_instance() && cooccurrence_matrix_ != nullptr;
}
inline bool EvalMetrics::has_cooccurrence_matrix() const {
  return _internal_has_cooccurrence_matrix();
}
inline void EvalMetrics::clear_cooccurrence_matrix() {
  if (GetArena() == nullptr && cooccurrence_matrix_ != nullptr) {
    delete cooccurrence_matrix_;
  }
  cooccurrence_matrix_ = nullptr;
}
inline const ::clarifai::api::CooccurrenceMatrix& EvalMetrics::_internal_cooccurrence_matrix() const {
  const ::clarifai::api::CooccurrenceMatrix* p = cooccurrence_matrix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::CooccurrenceMatrix*>(
      &::clarifai::api::_CooccurrenceMatrix_default_instance_);
}
inline const ::clarifai::api::CooccurrenceMatrix& EvalMetrics::cooccurrence_matrix() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.cooccurrence_matrix)
  return _internal_cooccurrence_matrix();
}
inline void EvalMetrics::unsafe_arena_set_allocated_cooccurrence_matrix(
    ::clarifai::api::CooccurrenceMatrix* cooccurrence_matrix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cooccurrence_matrix_);
  }
  cooccurrence_matrix_ = cooccurrence_matrix;
  if (cooccurrence_matrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.EvalMetrics.cooccurrence_matrix)
}
inline ::clarifai::api::CooccurrenceMatrix* EvalMetrics::release_cooccurrence_matrix() {
  
  ::clarifai::api::CooccurrenceMatrix* temp = cooccurrence_matrix_;
  cooccurrence_matrix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::CooccurrenceMatrix* EvalMetrics::unsafe_arena_release_cooccurrence_matrix() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalMetrics.cooccurrence_matrix)
  
  ::clarifai::api::CooccurrenceMatrix* temp = cooccurrence_matrix_;
  cooccurrence_matrix_ = nullptr;
  return temp;
}
inline ::clarifai::api::CooccurrenceMatrix* EvalMetrics::_internal_mutable_cooccurrence_matrix() {
  
  if (cooccurrence_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::CooccurrenceMatrix>(GetArena());
    cooccurrence_matrix_ = p;
  }
  return cooccurrence_matrix_;
}
inline ::clarifai::api::CooccurrenceMatrix* EvalMetrics::mutable_cooccurrence_matrix() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.cooccurrence_matrix)
  return _internal_mutable_cooccurrence_matrix();
}
inline void EvalMetrics::set_allocated_cooccurrence_matrix(::clarifai::api::CooccurrenceMatrix* cooccurrence_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cooccurrence_matrix_;
  }
  if (cooccurrence_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cooccurrence_matrix);
    if (message_arena != submessage_arena) {
      cooccurrence_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cooccurrence_matrix, submessage_arena);
    }
    
  } else {
    
  }
  cooccurrence_matrix_ = cooccurrence_matrix;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalMetrics.cooccurrence_matrix)
}

// .clarifai.api.LabelDistribution label_counts = 5;
inline bool EvalMetrics::_internal_has_label_counts() const {
  return this != internal_default_instance() && label_counts_ != nullptr;
}
inline bool EvalMetrics::has_label_counts() const {
  return _internal_has_label_counts();
}
inline void EvalMetrics::clear_label_counts() {
  if (GetArena() == nullptr && label_counts_ != nullptr) {
    delete label_counts_;
  }
  label_counts_ = nullptr;
}
inline const ::clarifai::api::LabelDistribution& EvalMetrics::_internal_label_counts() const {
  const ::clarifai::api::LabelDistribution* p = label_counts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::LabelDistribution*>(
      &::clarifai::api::_LabelDistribution_default_instance_);
}
inline const ::clarifai::api::LabelDistribution& EvalMetrics::label_counts() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.label_counts)
  return _internal_label_counts();
}
inline void EvalMetrics::unsafe_arena_set_allocated_label_counts(
    ::clarifai::api::LabelDistribution* label_counts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_counts_);
  }
  label_counts_ = label_counts;
  if (label_counts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.EvalMetrics.label_counts)
}
inline ::clarifai::api::LabelDistribution* EvalMetrics::release_label_counts() {
  
  ::clarifai::api::LabelDistribution* temp = label_counts_;
  label_counts_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::LabelDistribution* EvalMetrics::unsafe_arena_release_label_counts() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalMetrics.label_counts)
  
  ::clarifai::api::LabelDistribution* temp = label_counts_;
  label_counts_ = nullptr;
  return temp;
}
inline ::clarifai::api::LabelDistribution* EvalMetrics::_internal_mutable_label_counts() {
  
  if (label_counts_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::LabelDistribution>(GetArena());
    label_counts_ = p;
  }
  return label_counts_;
}
inline ::clarifai::api::LabelDistribution* EvalMetrics::mutable_label_counts() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.label_counts)
  return _internal_mutable_label_counts();
}
inline void EvalMetrics::set_allocated_label_counts(::clarifai::api::LabelDistribution* label_counts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete label_counts_;
  }
  if (label_counts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(label_counts);
    if (message_arena != submessage_arena) {
      label_counts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_counts, submessage_arena);
    }
    
  } else {
    
  }
  label_counts_ = label_counts;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalMetrics.label_counts)
}

// repeated .clarifai.api.BinaryMetrics binary_metrics = 6;
inline int EvalMetrics::_internal_binary_metrics_size() const {
  return binary_metrics_.size();
}
inline int EvalMetrics::binary_metrics_size() const {
  return _internal_binary_metrics_size();
}
inline void EvalMetrics::clear_binary_metrics() {
  binary_metrics_.Clear();
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::mutable_binary_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.binary_metrics)
  return binary_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >*
EvalMetrics::mutable_binary_metrics() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EvalMetrics.binary_metrics)
  return &binary_metrics_;
}
inline const ::clarifai::api::BinaryMetrics& EvalMetrics::_internal_binary_metrics(int index) const {
  return binary_metrics_.Get(index);
}
inline const ::clarifai::api::BinaryMetrics& EvalMetrics::binary_metrics(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.binary_metrics)
  return _internal_binary_metrics(index);
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::_internal_add_binary_metrics() {
  return binary_metrics_.Add();
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::add_binary_metrics() {
  // @@protoc_insertion_point(field_add:clarifai.api.EvalMetrics.binary_metrics)
  return _internal_add_binary_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >&
EvalMetrics::binary_metrics() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EvalMetrics.binary_metrics)
  return binary_metrics_;
}

// repeated .clarifai.api.EvalTestSetEntry test_set = 7;
inline int EvalMetrics::_internal_test_set_size() const {
  return test_set_.size();
}
inline int EvalMetrics::test_set_size() const {
  return _internal_test_set_size();
}
inline void EvalMetrics::clear_test_set() {
  test_set_.Clear();
}
inline ::clarifai::api::EvalTestSetEntry* EvalMetrics::mutable_test_set(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.test_set)
  return test_set_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EvalTestSetEntry >*
EvalMetrics::mutable_test_set() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EvalMetrics.test_set)
  return &test_set_;
}
inline const ::clarifai::api::EvalTestSetEntry& EvalMetrics::_internal_test_set(int index) const {
  return test_set_.Get(index);
}
inline const ::clarifai::api::EvalTestSetEntry& EvalMetrics::test_set(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.test_set)
  return _internal_test_set(index);
}
inline ::clarifai::api::EvalTestSetEntry* EvalMetrics::_internal_add_test_set() {
  return test_set_.Add();
}
inline ::clarifai::api::EvalTestSetEntry* EvalMetrics::add_test_set() {
  // @@protoc_insertion_point(field_add:clarifai.api.EvalMetrics.test_set)
  return _internal_add_test_set();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EvalTestSetEntry >&
EvalMetrics::test_set() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EvalMetrics.test_set)
  return test_set_;
}

// repeated .clarifai.api.BinaryMetrics metrics_by_area = 8;
inline int EvalMetrics::_internal_metrics_by_area_size() const {
  return metrics_by_area_.size();
}
inline int EvalMetrics::metrics_by_area_size() const {
  return _internal_metrics_by_area_size();
}
inline void EvalMetrics::clear_metrics_by_area() {
  metrics_by_area_.Clear();
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::mutable_metrics_by_area(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.metrics_by_area)
  return metrics_by_area_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >*
EvalMetrics::mutable_metrics_by_area() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EvalMetrics.metrics_by_area)
  return &metrics_by_area_;
}
inline const ::clarifai::api::BinaryMetrics& EvalMetrics::_internal_metrics_by_area(int index) const {
  return metrics_by_area_.Get(index);
}
inline const ::clarifai::api::BinaryMetrics& EvalMetrics::metrics_by_area(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.metrics_by_area)
  return _internal_metrics_by_area(index);
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::_internal_add_metrics_by_area() {
  return metrics_by_area_.Add();
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::add_metrics_by_area() {
  // @@protoc_insertion_point(field_add:clarifai.api.EvalMetrics.metrics_by_area)
  return _internal_add_metrics_by_area();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >&
EvalMetrics::metrics_by_area() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EvalMetrics.metrics_by_area)
  return metrics_by_area_;
}

// repeated .clarifai.api.BinaryMetrics metrics_by_class = 9;
inline int EvalMetrics::_internal_metrics_by_class_size() const {
  return metrics_by_class_.size();
}
inline int EvalMetrics::metrics_by_class_size() const {
  return _internal_metrics_by_class_size();
}
inline void EvalMetrics::clear_metrics_by_class() {
  metrics_by_class_.Clear();
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::mutable_metrics_by_class(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.metrics_by_class)
  return metrics_by_class_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >*
EvalMetrics::mutable_metrics_by_class() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EvalMetrics.metrics_by_class)
  return &metrics_by_class_;
}
inline const ::clarifai::api::BinaryMetrics& EvalMetrics::_internal_metrics_by_class(int index) const {
  return metrics_by_class_.Get(index);
}
inline const ::clarifai::api::BinaryMetrics& EvalMetrics::metrics_by_class(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.metrics_by_class)
  return _internal_metrics_by_class(index);
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::_internal_add_metrics_by_class() {
  return metrics_by_class_.Add();
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::add_metrics_by_class() {
  // @@protoc_insertion_point(field_add:clarifai.api.EvalMetrics.metrics_by_class)
  return _internal_add_metrics_by_class();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >&
EvalMetrics::metrics_by_class() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EvalMetrics.metrics_by_class)
  return metrics_by_class_;
}

// -------------------------------------------------------------------

// FieldsValue

// bool confusion_matrix = 1;
inline void FieldsValue::clear_confusion_matrix() {
  confusion_matrix_ = false;
}
inline bool FieldsValue::_internal_confusion_matrix() const {
  return confusion_matrix_;
}
inline bool FieldsValue::confusion_matrix() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FieldsValue.confusion_matrix)
  return _internal_confusion_matrix();
}
inline void FieldsValue::_internal_set_confusion_matrix(bool value) {
  
  confusion_matrix_ = value;
}
inline void FieldsValue::set_confusion_matrix(bool value) {
  _internal_set_confusion_matrix(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FieldsValue.confusion_matrix)
}

// bool cooccurrence_matrix = 2;
inline void FieldsValue::clear_cooccurrence_matrix() {
  cooccurrence_matrix_ = false;
}
inline bool FieldsValue::_internal_cooccurrence_matrix() const {
  return cooccurrence_matrix_;
}
inline bool FieldsValue::cooccurrence_matrix() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FieldsValue.cooccurrence_matrix)
  return _internal_cooccurrence_matrix();
}
inline void FieldsValue::_internal_set_cooccurrence_matrix(bool value) {
  
  cooccurrence_matrix_ = value;
}
inline void FieldsValue::set_cooccurrence_matrix(bool value) {
  _internal_set_cooccurrence_matrix(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FieldsValue.cooccurrence_matrix)
}

// bool label_counts = 3;
inline void FieldsValue::clear_label_counts() {
  label_counts_ = false;
}
inline bool FieldsValue::_internal_label_counts() const {
  return label_counts_;
}
inline bool FieldsValue::label_counts() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FieldsValue.label_counts)
  return _internal_label_counts();
}
inline void FieldsValue::_internal_set_label_counts(bool value) {
  
  label_counts_ = value;
}
inline void FieldsValue::set_label_counts(bool value) {
  _internal_set_label_counts(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FieldsValue.label_counts)
}

// bool binary_metrics = 4;
inline void FieldsValue::clear_binary_metrics() {
  binary_metrics_ = false;
}
inline bool FieldsValue::_internal_binary_metrics() const {
  return binary_metrics_;
}
inline bool FieldsValue::binary_metrics() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FieldsValue.binary_metrics)
  return _internal_binary_metrics();
}
inline void FieldsValue::_internal_set_binary_metrics(bool value) {
  
  binary_metrics_ = value;
}
inline void FieldsValue::set_binary_metrics(bool value) {
  _internal_set_binary_metrics(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FieldsValue.binary_metrics)
}

// bool test_set = 5;
inline void FieldsValue::clear_test_set() {
  test_set_ = false;
}
inline bool FieldsValue::_internal_test_set() const {
  return test_set_;
}
inline bool FieldsValue::test_set() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FieldsValue.test_set)
  return _internal_test_set();
}
inline void FieldsValue::_internal_set_test_set(bool value) {
  
  test_set_ = value;
}
inline void FieldsValue::set_test_set(bool value) {
  _internal_set_test_set(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FieldsValue.test_set)
}

// bool metrics_by_area = 6;
inline void FieldsValue::clear_metrics_by_area() {
  metrics_by_area_ = false;
}
inline bool FieldsValue::_internal_metrics_by_area() const {
  return metrics_by_area_;
}
inline bool FieldsValue::metrics_by_area() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FieldsValue.metrics_by_area)
  return _internal_metrics_by_area();
}
inline void FieldsValue::_internal_set_metrics_by_area(bool value) {
  
  metrics_by_area_ = value;
}
inline void FieldsValue::set_metrics_by_area(bool value) {
  _internal_set_metrics_by_area(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FieldsValue.metrics_by_area)
}

// bool metrics_by_class = 7;
inline void FieldsValue::clear_metrics_by_class() {
  metrics_by_class_ = false;
}
inline bool FieldsValue::_internal_metrics_by_class() const {
  return metrics_by_class_;
}
inline bool FieldsValue::metrics_by_class() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FieldsValue.metrics_by_class)
  return _internal_metrics_by_class();
}
inline void FieldsValue::_internal_set_metrics_by_class(bool value) {
  
  metrics_by_class_ = value;
}
inline void FieldsValue::set_metrics_by_class(bool value) {
  _internal_set_metrics_by_class(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FieldsValue.metrics_by_class)
}

// -------------------------------------------------------------------

// Output

// string id = 1;
inline void Output::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Output::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Output.id)
  return _internal_id();
}
inline void Output::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Output.id)
}
inline std::string* Output::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Output.id)
  return _internal_mutable_id();
}
inline const std::string& Output::_internal_id() const {
  return id_.Get();
}
inline void Output::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Output::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Output.id)
}
inline void Output::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Output.id)
}
inline void Output::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Output.id)
}
inline std::string* Output::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Output::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Output.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Output::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Output.id)
}

// .clarifai.api.status.Status status = 2;
inline bool Output::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Output::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& Output::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& Output::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Output.status)
  return _internal_status();
}
inline void Output::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Output.status)
}
inline ::clarifai::api::status::Status* Output::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::status::Status* Output::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.Output.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* Output::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* Output::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Output.status)
  return _internal_mutable_status();
}
inline void Output::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Output.status)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool Output::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Output::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Output::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Output::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Output.created_at)
  return _internal_created_at();
}
inline void Output::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Output.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Output::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Output::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Output.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Output::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Output::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Output.created_at)
  return _internal_mutable_created_at();
}
inline void Output::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Output.created_at)
}

// .clarifai.api.Model model = 4;
inline bool Output::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool Output::has_model() const {
  return _internal_has_model();
}
inline void Output::clear_model() {
  if (GetArena() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
inline const ::clarifai::api::Model& Output::_internal_model() const {
  const ::clarifai::api::Model* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Model*>(
      &::clarifai::api::_Model_default_instance_);
}
inline const ::clarifai::api::Model& Output::model() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Output.model)
  return _internal_model();
}
inline void Output::unsafe_arena_set_allocated_model(
    ::clarifai::api::Model* model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Output.model)
}
inline ::clarifai::api::Model* Output::release_model() {
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Model* Output::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:clarifai.api.Output.model)
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::api::Model* Output::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Model>(GetArena());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::api::Model* Output::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Output.model)
  return _internal_mutable_model();
}
inline void Output::set_allocated_model(::clarifai::api::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete model_;
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model);
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Output.model)
}

// .clarifai.api.Input input = 5;
inline bool Output::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool Output::has_input() const {
  return _internal_has_input();
}
inline void Output::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::clarifai::api::Input& Output::_internal_input() const {
  const ::clarifai::api::Input* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Input*>(
      &::clarifai::api::_Input_default_instance_);
}
inline const ::clarifai::api::Input& Output::input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Output.input)
  return _internal_input();
}
inline void Output::unsafe_arena_set_allocated_input(
    ::clarifai::api::Input* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Output.input)
}
inline ::clarifai::api::Input* Output::release_input() {
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Input* Output::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:clarifai.api.Output.input)
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::clarifai::api::Input* Output::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Input>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::clarifai::api::Input* Output::mutable_input() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Output.input)
  return _internal_mutable_input();
}
inline void Output::set_allocated_input(::clarifai::api::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Output.input)
}

// .clarifai.api.Data data = 6;
inline bool Output::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Output::has_data() const {
  return _internal_has_data();
}
inline void Output::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::clarifai::api::Data& Output::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& Output::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Output.data)
  return _internal_data();
}
inline void Output::unsafe_arena_set_allocated_data(
    ::clarifai::api::Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Output.data)
}
inline ::clarifai::api::Data* Output::release_data() {
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Data* Output::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.Output.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* Output::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* Output::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Output.data)
  return _internal_mutable_data();
}
inline void Output::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Output.data)
}

// -------------------------------------------------------------------

// ScopeDeps

// string scope = 1;
inline void ScopeDeps::clear_scope() {
  scope_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ScopeDeps::scope() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ScopeDeps.scope)
  return _internal_scope();
}
inline void ScopeDeps::set_scope(const std::string& value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ScopeDeps.scope)
}
inline std::string* ScopeDeps::mutable_scope() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ScopeDeps.scope)
  return _internal_mutable_scope();
}
inline const std::string& ScopeDeps::_internal_scope() const {
  return scope_.Get();
}
inline void ScopeDeps::_internal_set_scope(const std::string& value) {
  
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ScopeDeps::set_scope(std::string&& value) {
  
  scope_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ScopeDeps.scope)
}
inline void ScopeDeps::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.ScopeDeps.scope)
}
inline void ScopeDeps::set_scope(const char* value,
    size_t size) {
  
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ScopeDeps.scope)
}
inline std::string* ScopeDeps::_internal_mutable_scope() {
  
  return scope_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ScopeDeps::release_scope() {
  // @@protoc_insertion_point(field_release:clarifai.api.ScopeDeps.scope)
  return scope_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScopeDeps::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    
  } else {
    
  }
  scope_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ScopeDeps.scope)
}

// repeated string depending_scopes = 2;
inline int ScopeDeps::_internal_depending_scopes_size() const {
  return depending_scopes_.size();
}
inline int ScopeDeps::depending_scopes_size() const {
  return _internal_depending_scopes_size();
}
inline void ScopeDeps::clear_depending_scopes() {
  depending_scopes_.Clear();
}
inline std::string* ScopeDeps::add_depending_scopes() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ScopeDeps.depending_scopes)
  return _internal_add_depending_scopes();
}
inline const std::string& ScopeDeps::_internal_depending_scopes(int index) const {
  return depending_scopes_.Get(index);
}
inline const std::string& ScopeDeps::depending_scopes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ScopeDeps.depending_scopes)
  return _internal_depending_scopes(index);
}
inline std::string* ScopeDeps::mutable_depending_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ScopeDeps.depending_scopes)
  return depending_scopes_.Mutable(index);
}
inline void ScopeDeps::set_depending_scopes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ScopeDeps.depending_scopes)
  depending_scopes_.Mutable(index)->assign(value);
}
inline void ScopeDeps::set_depending_scopes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ScopeDeps.depending_scopes)
  depending_scopes_.Mutable(index)->assign(std::move(value));
}
inline void ScopeDeps::set_depending_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  depending_scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ScopeDeps.depending_scopes)
}
inline void ScopeDeps::set_depending_scopes(int index, const char* value, size_t size) {
  depending_scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ScopeDeps.depending_scopes)
}
inline std::string* ScopeDeps::_internal_add_depending_scopes() {
  return depending_scopes_.Add();
}
inline void ScopeDeps::add_depending_scopes(const std::string& value) {
  depending_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ScopeDeps.depending_scopes)
}
inline void ScopeDeps::add_depending_scopes(std::string&& value) {
  depending_scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ScopeDeps.depending_scopes)
}
inline void ScopeDeps::add_depending_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  depending_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ScopeDeps.depending_scopes)
}
inline void ScopeDeps::add_depending_scopes(const char* value, size_t size) {
  depending_scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ScopeDeps.depending_scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ScopeDeps::depending_scopes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ScopeDeps.depending_scopes)
  return depending_scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ScopeDeps::mutable_depending_scopes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ScopeDeps.depending_scopes)
  return &depending_scopes_;
}

// -------------------------------------------------------------------

// EndpointDeps

// string endpoint = 1;
inline void EndpointDeps::clear_endpoint() {
  endpoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EndpointDeps::endpoint() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EndpointDeps.endpoint)
  return _internal_endpoint();
}
inline void EndpointDeps::set_endpoint(const std::string& value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:clarifai.api.EndpointDeps.endpoint)
}
inline std::string* EndpointDeps::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EndpointDeps.endpoint)
  return _internal_mutable_endpoint();
}
inline const std::string& EndpointDeps::_internal_endpoint() const {
  return endpoint_.Get();
}
inline void EndpointDeps::_internal_set_endpoint(const std::string& value) {
  
  endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EndpointDeps::set_endpoint(std::string&& value) {
  
  endpoint_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.EndpointDeps.endpoint)
}
inline void EndpointDeps::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.EndpointDeps.endpoint)
}
inline void EndpointDeps::set_endpoint(const char* value,
    size_t size) {
  
  endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.EndpointDeps.endpoint)
}
inline std::string* EndpointDeps::_internal_mutable_endpoint() {
  
  return endpoint_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EndpointDeps::release_endpoint() {
  // @@protoc_insertion_point(field_release:clarifai.api.EndpointDeps.endpoint)
  return endpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndpointDeps::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EndpointDeps.endpoint)
}

// repeated string depending_scopes = 2;
inline int EndpointDeps::_internal_depending_scopes_size() const {
  return depending_scopes_.size();
}
inline int EndpointDeps::depending_scopes_size() const {
  return _internal_depending_scopes_size();
}
inline void EndpointDeps::clear_depending_scopes() {
  depending_scopes_.Clear();
}
inline std::string* EndpointDeps::add_depending_scopes() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.EndpointDeps.depending_scopes)
  return _internal_add_depending_scopes();
}
inline const std::string& EndpointDeps::_internal_depending_scopes(int index) const {
  return depending_scopes_.Get(index);
}
inline const std::string& EndpointDeps::depending_scopes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EndpointDeps.depending_scopes)
  return _internal_depending_scopes(index);
}
inline std::string* EndpointDeps::mutable_depending_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EndpointDeps.depending_scopes)
  return depending_scopes_.Mutable(index);
}
inline void EndpointDeps::set_depending_scopes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.EndpointDeps.depending_scopes)
  depending_scopes_.Mutable(index)->assign(value);
}
inline void EndpointDeps::set_depending_scopes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.EndpointDeps.depending_scopes)
  depending_scopes_.Mutable(index)->assign(std::move(value));
}
inline void EndpointDeps::set_depending_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  depending_scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.EndpointDeps.depending_scopes)
}
inline void EndpointDeps::set_depending_scopes(int index, const char* value, size_t size) {
  depending_scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.EndpointDeps.depending_scopes)
}
inline std::string* EndpointDeps::_internal_add_depending_scopes() {
  return depending_scopes_.Add();
}
inline void EndpointDeps::add_depending_scopes(const std::string& value) {
  depending_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.EndpointDeps.depending_scopes)
}
inline void EndpointDeps::add_depending_scopes(std::string&& value) {
  depending_scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.EndpointDeps.depending_scopes)
}
inline void EndpointDeps::add_depending_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  depending_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.EndpointDeps.depending_scopes)
}
inline void EndpointDeps::add_depending_scopes(const char* value, size_t size) {
  depending_scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.EndpointDeps.depending_scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EndpointDeps::depending_scopes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EndpointDeps.depending_scopes)
  return depending_scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EndpointDeps::mutable_depending_scopes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EndpointDeps.depending_scopes)
  return &depending_scopes_;
}

// -------------------------------------------------------------------

// Hit

// float score = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void Hit::clear_score() {
  score_ = 0;
}
inline float Hit::_internal_score() const {
  return score_;
}
inline float Hit::score() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Hit.score)
  return _internal_score();
}
inline void Hit::_internal_set_score(float value) {
  
  score_ = value;
}
inline void Hit::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Hit.score)
}

// .clarifai.api.Input input = 2;
inline bool Hit::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool Hit::has_input() const {
  return _internal_has_input();
}
inline void Hit::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::clarifai::api::Input& Hit::_internal_input() const {
  const ::clarifai::api::Input* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Input*>(
      &::clarifai::api::_Input_default_instance_);
}
inline const ::clarifai::api::Input& Hit::input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Hit.input)
  return _internal_input();
}
inline void Hit::unsafe_arena_set_allocated_input(
    ::clarifai::api::Input* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Hit.input)
}
inline ::clarifai::api::Input* Hit::release_input() {
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Input* Hit::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:clarifai.api.Hit.input)
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::clarifai::api::Input* Hit::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Input>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::clarifai::api::Input* Hit::mutable_input() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Hit.input)
  return _internal_mutable_input();
}
inline void Hit::set_allocated_input(::clarifai::api::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Hit.input)
}

// .clarifai.api.Annotation annotation = 3;
inline bool Hit::_internal_has_annotation() const {
  return this != internal_default_instance() && annotation_ != nullptr;
}
inline bool Hit::has_annotation() const {
  return _internal_has_annotation();
}
inline void Hit::clear_annotation() {
  if (GetArena() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
inline const ::clarifai::api::Annotation& Hit::_internal_annotation() const {
  const ::clarifai::api::Annotation* p = annotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Annotation*>(
      &::clarifai::api::_Annotation_default_instance_);
}
inline const ::clarifai::api::Annotation& Hit::annotation() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Hit.annotation)
  return _internal_annotation();
}
inline void Hit::unsafe_arena_set_allocated_annotation(
    ::clarifai::api::Annotation* annotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_);
  }
  annotation_ = annotation;
  if (annotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Hit.annotation)
}
inline ::clarifai::api::Annotation* Hit::release_annotation() {
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Annotation* Hit::unsafe_arena_release_annotation() {
  // @@protoc_insertion_point(field_release:clarifai.api.Hit.annotation)
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  return temp;
}
inline ::clarifai::api::Annotation* Hit::_internal_mutable_annotation() {
  
  if (annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Annotation>(GetArena());
    annotation_ = p;
  }
  return annotation_;
}
inline ::clarifai::api::Annotation* Hit::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Hit.annotation)
  return _internal_mutable_annotation();
}
inline void Hit::set_allocated_annotation(::clarifai::api::Annotation* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete annotation_;
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(annotation);
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    
  } else {
    
  }
  annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Hit.annotation)
}

// -------------------------------------------------------------------

// And

// .clarifai.api.Input input = 1;
inline bool And::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool And::has_input() const {
  return _internal_has_input();
}
inline void And::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::clarifai::api::Input& And::_internal_input() const {
  const ::clarifai::api::Input* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Input*>(
      &::clarifai::api::_Input_default_instance_);
}
inline const ::clarifai::api::Input& And::input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.And.input)
  return _internal_input();
}
inline void And::unsafe_arena_set_allocated_input(
    ::clarifai::api::Input* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.And.input)
}
inline ::clarifai::api::Input* And::release_input() {
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Input* And::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:clarifai.api.And.input)
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::clarifai::api::Input* And::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Input>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::clarifai::api::Input* And::mutable_input() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.And.input)
  return _internal_mutable_input();
}
inline void And::set_allocated_input(::clarifai::api::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.And.input)
}

// .clarifai.api.Output output = 2;
inline bool And::_internal_has_output() const {
  return this != internal_default_instance() && output_ != nullptr;
}
inline bool And::has_output() const {
  return _internal_has_output();
}
inline void And::clear_output() {
  if (GetArena() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
}
inline const ::clarifai::api::Output& And::_internal_output() const {
  const ::clarifai::api::Output* p = output_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Output*>(
      &::clarifai::api::_Output_default_instance_);
}
inline const ::clarifai::api::Output& And::output() const {
  // @@protoc_insertion_point(field_get:clarifai.api.And.output)
  return _internal_output();
}
inline void And::unsafe_arena_set_allocated_output(
    ::clarifai::api::Output* output) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.And.output)
}
inline ::clarifai::api::Output* And::release_output() {
  
  ::clarifai::api::Output* temp = output_;
  output_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Output* And::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:clarifai.api.And.output)
  
  ::clarifai::api::Output* temp = output_;
  output_ = nullptr;
  return temp;
}
inline ::clarifai::api::Output* And::_internal_mutable_output() {
  
  if (output_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Output>(GetArena());
    output_ = p;
  }
  return output_;
}
inline ::clarifai::api::Output* And::mutable_output() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.And.output)
  return _internal_mutable_output();
}
inline void And::set_allocated_output(::clarifai::api::Output* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete output_;
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(output);
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.And.output)
}

// bool negate = 3;
inline void And::clear_negate() {
  negate_ = false;
}
inline bool And::_internal_negate() const {
  return negate_;
}
inline bool And::negate() const {
  // @@protoc_insertion_point(field_get:clarifai.api.And.negate)
  return _internal_negate();
}
inline void And::_internal_set_negate(bool value) {
  
  negate_ = value;
}
inline void And::set_negate(bool value) {
  _internal_set_negate(value);
  // @@protoc_insertion_point(field_set:clarifai.api.And.negate)
}

// .clarifai.api.Annotation annotation = 4;
inline bool And::_internal_has_annotation() const {
  return this != internal_default_instance() && annotation_ != nullptr;
}
inline bool And::has_annotation() const {
  return _internal_has_annotation();
}
inline void And::clear_annotation() {
  if (GetArena() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
inline const ::clarifai::api::Annotation& And::_internal_annotation() const {
  const ::clarifai::api::Annotation* p = annotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Annotation*>(
      &::clarifai::api::_Annotation_default_instance_);
}
inline const ::clarifai::api::Annotation& And::annotation() const {
  // @@protoc_insertion_point(field_get:clarifai.api.And.annotation)
  return _internal_annotation();
}
inline void And::unsafe_arena_set_allocated_annotation(
    ::clarifai::api::Annotation* annotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_);
  }
  annotation_ = annotation;
  if (annotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.And.annotation)
}
inline ::clarifai::api::Annotation* And::release_annotation() {
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Annotation* And::unsafe_arena_release_annotation() {
  // @@protoc_insertion_point(field_release:clarifai.api.And.annotation)
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  return temp;
}
inline ::clarifai::api::Annotation* And::_internal_mutable_annotation() {
  
  if (annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Annotation>(GetArena());
    annotation_ = p;
  }
  return annotation_;
}
inline ::clarifai::api::Annotation* And::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.And.annotation)
  return _internal_mutable_annotation();
}
inline void And::set_allocated_annotation(::clarifai::api::Annotation* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete annotation_;
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(annotation);
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    
  } else {
    
  }
  annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.And.annotation)
}

// -------------------------------------------------------------------

// AttributeMixIn

// string version_id = 1;
inline void AttributeMixIn::clear_version_id() {
  version_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AttributeMixIn::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AttributeMixIn.version_id)
  return _internal_version_id();
}
inline void AttributeMixIn::set_version_id(const std::string& value) {
  _internal_set_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AttributeMixIn.version_id)
}
inline std::string* AttributeMixIn::mutable_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AttributeMixIn.version_id)
  return _internal_mutable_version_id();
}
inline const std::string& AttributeMixIn::_internal_version_id() const {
  return version_id_.Get();
}
inline void AttributeMixIn::_internal_set_version_id(const std::string& value) {
  
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AttributeMixIn::set_version_id(std::string&& value) {
  
  version_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.AttributeMixIn.version_id)
}
inline void AttributeMixIn::set_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.AttributeMixIn.version_id)
}
inline void AttributeMixIn::set_version_id(const char* value,
    size_t size) {
  
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.AttributeMixIn.version_id)
}
inline std::string* AttributeMixIn::_internal_mutable_version_id() {
  
  return version_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AttributeMixIn::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.AttributeMixIn.version_id)
  return version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeMixIn::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AttributeMixIn.version_id)
}

// float mix_in_coefficient = 2;
inline void AttributeMixIn::clear_mix_in_coefficient() {
  mix_in_coefficient_ = 0;
}
inline float AttributeMixIn::_internal_mix_in_coefficient() const {
  return mix_in_coefficient_;
}
inline float AttributeMixIn::mix_in_coefficient() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AttributeMixIn.mix_in_coefficient)
  return _internal_mix_in_coefficient();
}
inline void AttributeMixIn::_internal_set_mix_in_coefficient(float value) {
  
  mix_in_coefficient_ = value;
}
inline void AttributeMixIn::set_mix_in_coefficient(float value) {
  _internal_set_mix_in_coefficient(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AttributeMixIn.mix_in_coefficient)
}

// .clarifai.api.Concept concept_override = 3;
inline bool AttributeMixIn::_internal_has_concept_override() const {
  return this != internal_default_instance() && concept_override_ != nullptr;
}
inline bool AttributeMixIn::has_concept_override() const {
  return _internal_has_concept_override();
}
inline void AttributeMixIn::clear_concept_override() {
  if (GetArena() == nullptr && concept_override_ != nullptr) {
    delete concept_override_;
  }
  concept_override_ = nullptr;
}
inline const ::clarifai::api::Concept& AttributeMixIn::_internal_concept_override() const {
  const ::clarifai::api::Concept* p = concept_override_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Concept*>(
      &::clarifai::api::_Concept_default_instance_);
}
inline const ::clarifai::api::Concept& AttributeMixIn::concept_override() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AttributeMixIn.concept_override)
  return _internal_concept_override();
}
inline void AttributeMixIn::unsafe_arena_set_allocated_concept_override(
    ::clarifai::api::Concept* concept_override) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_override_);
  }
  concept_override_ = concept_override;
  if (concept_override) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.AttributeMixIn.concept_override)
}
inline ::clarifai::api::Concept* AttributeMixIn::release_concept_override() {
  
  ::clarifai::api::Concept* temp = concept_override_;
  concept_override_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Concept* AttributeMixIn::unsafe_arena_release_concept_override() {
  // @@protoc_insertion_point(field_release:clarifai.api.AttributeMixIn.concept_override)
  
  ::clarifai::api::Concept* temp = concept_override_;
  concept_override_ = nullptr;
  return temp;
}
inline ::clarifai::api::Concept* AttributeMixIn::_internal_mutable_concept_override() {
  
  if (concept_override_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Concept>(GetArena());
    concept_override_ = p;
  }
  return concept_override_;
}
inline ::clarifai::api::Concept* AttributeMixIn::mutable_concept_override() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AttributeMixIn.concept_override)
  return _internal_mutable_concept_override();
}
inline void AttributeMixIn::set_allocated_concept_override(::clarifai::api::Concept* concept_override) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete concept_override_;
  }
  if (concept_override) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(concept_override);
    if (message_arena != submessage_arena) {
      concept_override = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept_override, submessage_arena);
    }
    
  } else {
    
  }
  concept_override_ = concept_override;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AttributeMixIn.concept_override)
}

// -------------------------------------------------------------------

// AttributeQuery

// .clarifai.api.Input input = 1;
inline bool AttributeQuery::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool AttributeQuery::has_input() const {
  return _internal_has_input();
}
inline void AttributeQuery::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::clarifai::api::Input& AttributeQuery::_internal_input() const {
  const ::clarifai::api::Input* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Input*>(
      &::clarifai::api::_Input_default_instance_);
}
inline const ::clarifai::api::Input& AttributeQuery::input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AttributeQuery.input)
  return _internal_input();
}
inline void AttributeQuery::unsafe_arena_set_allocated_input(
    ::clarifai::api::Input* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.AttributeQuery.input)
}
inline ::clarifai::api::Input* AttributeQuery::release_input() {
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Input* AttributeQuery::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:clarifai.api.AttributeQuery.input)
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::clarifai::api::Input* AttributeQuery::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Input>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::clarifai::api::Input* AttributeQuery::mutable_input() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AttributeQuery.input)
  return _internal_mutable_input();
}
inline void AttributeQuery::set_allocated_input(::clarifai::api::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AttributeQuery.input)
}

// repeated .clarifai.api.AttributeMixIn attribute_mix_in = 2;
inline int AttributeQuery::_internal_attribute_mix_in_size() const {
  return attribute_mix_in_.size();
}
inline int AttributeQuery::attribute_mix_in_size() const {
  return _internal_attribute_mix_in_size();
}
inline void AttributeQuery::clear_attribute_mix_in() {
  attribute_mix_in_.Clear();
}
inline ::clarifai::api::AttributeMixIn* AttributeQuery::mutable_attribute_mix_in(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AttributeQuery.attribute_mix_in)
  return attribute_mix_in_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AttributeMixIn >*
AttributeQuery::mutable_attribute_mix_in() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.AttributeQuery.attribute_mix_in)
  return &attribute_mix_in_;
}
inline const ::clarifai::api::AttributeMixIn& AttributeQuery::_internal_attribute_mix_in(int index) const {
  return attribute_mix_in_.Get(index);
}
inline const ::clarifai::api::AttributeMixIn& AttributeQuery::attribute_mix_in(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.AttributeQuery.attribute_mix_in)
  return _internal_attribute_mix_in(index);
}
inline ::clarifai::api::AttributeMixIn* AttributeQuery::_internal_add_attribute_mix_in() {
  return attribute_mix_in_.Add();
}
inline ::clarifai::api::AttributeMixIn* AttributeQuery::add_attribute_mix_in() {
  // @@protoc_insertion_point(field_add:clarifai.api.AttributeQuery.attribute_mix_in)
  return _internal_add_attribute_mix_in();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AttributeMixIn >&
AttributeQuery::attribute_mix_in() const {
  // @@protoc_insertion_point(field_list:clarifai.api.AttributeQuery.attribute_mix_in)
  return attribute_mix_in_;
}

// -------------------------------------------------------------------

// Query

// repeated .clarifai.api.And ands = 1;
inline int Query::_internal_ands_size() const {
  return ands_.size();
}
inline int Query::ands_size() const {
  return _internal_ands_size();
}
inline void Query::clear_ands() {
  ands_.Clear();
}
inline ::clarifai::api::And* Query::mutable_ands(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Query.ands)
  return ands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::And >*
Query::mutable_ands() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Query.ands)
  return &ands_;
}
inline const ::clarifai::api::And& Query::_internal_ands(int index) const {
  return ands_.Get(index);
}
inline const ::clarifai::api::And& Query::ands(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Query.ands)
  return _internal_ands(index);
}
inline ::clarifai::api::And* Query::_internal_add_ands() {
  return ands_.Add();
}
inline ::clarifai::api::And* Query::add_ands() {
  // @@protoc_insertion_point(field_add:clarifai.api.Query.ands)
  return _internal_add_ands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::And >&
Query::ands() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Query.ands)
  return ands_;
}

// string language = 2;
inline void Query::clear_language() {
  language_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Query::language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Query.language)
  return _internal_language();
}
inline void Query::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Query.language)
}
inline std::string* Query::mutable_language() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Query.language)
  return _internal_mutable_language();
}
inline const std::string& Query::_internal_language() const {
  return language_.Get();
}
inline void Query::_internal_set_language(const std::string& value) {
  
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Query::set_language(std::string&& value) {
  
  language_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Query.language)
}
inline void Query::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Query.language)
}
inline void Query::set_language(const char* value,
    size_t size) {
  
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Query.language)
}
inline std::string* Query::_internal_mutable_language() {
  
  return language_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Query::release_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.Query.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Query::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Query.language)
}

// repeated .clarifai.api.Filter filters = 3;
inline int Query::_internal_filters_size() const {
  return filters_.size();
}
inline int Query::filters_size() const {
  return _internal_filters_size();
}
inline void Query::clear_filters() {
  filters_.Clear();
}
inline ::clarifai::api::Filter* Query::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Query.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Filter >*
Query::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Query.filters)
  return &filters_;
}
inline const ::clarifai::api::Filter& Query::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const ::clarifai::api::Filter& Query::filters(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Query.filters)
  return _internal_filters(index);
}
inline ::clarifai::api::Filter* Query::_internal_add_filters() {
  return filters_.Add();
}
inline ::clarifai::api::Filter* Query::add_filters() {
  // @@protoc_insertion_point(field_add:clarifai.api.Query.filters)
  return _internal_add_filters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Filter >&
Query::filters() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Query.filters)
  return filters_;
}

// repeated .clarifai.api.Rank ranks = 4;
inline int Query::_internal_ranks_size() const {
  return ranks_.size();
}
inline int Query::ranks_size() const {
  return _internal_ranks_size();
}
inline void Query::clear_ranks() {
  ranks_.Clear();
}
inline ::clarifai::api::Rank* Query::mutable_ranks(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Query.ranks)
  return ranks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Rank >*
Query::mutable_ranks() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Query.ranks)
  return &ranks_;
}
inline const ::clarifai::api::Rank& Query::_internal_ranks(int index) const {
  return ranks_.Get(index);
}
inline const ::clarifai::api::Rank& Query::ranks(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Query.ranks)
  return _internal_ranks(index);
}
inline ::clarifai::api::Rank* Query::_internal_add_ranks() {
  return ranks_.Add();
}
inline ::clarifai::api::Rank* Query::add_ranks() {
  // @@protoc_insertion_point(field_add:clarifai.api.Query.ranks)
  return _internal_add_ranks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Rank >&
Query::ranks() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Query.ranks)
  return ranks_;
}

// -------------------------------------------------------------------

// Search

// .clarifai.api.Query query = 1;
inline bool Search::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool Search::has_query() const {
  return _internal_has_query();
}
inline void Search::clear_query() {
  if (GetArena() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
inline const ::clarifai::api::Query& Search::_internal_query() const {
  const ::clarifai::api::Query* p = query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Query*>(
      &::clarifai::api::_Query_default_instance_);
}
inline const ::clarifai::api::Query& Search::query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.query)
  return _internal_query();
}
inline void Search::unsafe_arena_set_allocated_query(
    ::clarifai::api::Query* query) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_);
  }
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Search.query)
}
inline ::clarifai::api::Query* Search::release_query() {
  
  ::clarifai::api::Query* temp = query_;
  query_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Query* Search::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.query)
  
  ::clarifai::api::Query* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::clarifai::api::Query* Search::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Query>(GetArena());
    query_ = p;
  }
  return query_;
}
inline ::clarifai::api::Query* Search::mutable_query() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.query)
  return _internal_mutable_query();
}
inline void Search::set_allocated_query(::clarifai::api::Query* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.query)
}

// string id = 2;
inline void Search::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Search::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.id)
  return _internal_id();
}
inline void Search::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Search.id)
}
inline std::string* Search::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.id)
  return _internal_mutable_id();
}
inline const std::string& Search::_internal_id() const {
  return id_.Get();
}
inline void Search::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Search::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Search.id)
}
inline void Search::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Search.id)
}
inline void Search::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Search.id)
}
inline std::string* Search::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Search::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Search::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.id)
}

// string application_id = 3;
inline void Search::clear_application_id() {
  application_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Search::application_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.application_id)
  return _internal_application_id();
}
inline void Search::set_application_id(const std::string& value) {
  _internal_set_application_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Search.application_id)
}
inline std::string* Search::mutable_application_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.application_id)
  return _internal_mutable_application_id();
}
inline const std::string& Search::_internal_application_id() const {
  return application_id_.Get();
}
inline void Search::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Search::set_application_id(std::string&& value) {
  
  application_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Search.application_id)
}
inline void Search::set_application_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Search.application_id)
}
inline void Search::set_application_id(const char* value,
    size_t size) {
  
  application_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Search.application_id)
}
inline std::string* Search::_internal_mutable_application_id() {
  
  return application_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Search::release_application_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Search::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.application_id)
}

// string name = 4;
inline void Search::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Search::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.name)
  return _internal_name();
}
inline void Search::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Search.name)
}
inline std::string* Search::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.name)
  return _internal_mutable_name();
}
inline const std::string& Search::_internal_name() const {
  return name_.Get();
}
inline void Search::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Search::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Search.name)
}
inline void Search::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Search.name)
}
inline void Search::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Search.name)
}
inline std::string* Search::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Search::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Search::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.name)
}

// .google.protobuf.Timestamp as_of = 5;
inline bool Search::_internal_has_as_of() const {
  return this != internal_default_instance() && as_of_ != nullptr;
}
inline bool Search::has_as_of() const {
  return _internal_has_as_of();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Search::_internal_as_of() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = as_of_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Search::as_of() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.as_of)
  return _internal_as_of();
}
inline void Search::unsafe_arena_set_allocated_as_of(
    PROTOBUF_NAMESPACE_ID::Timestamp* as_of) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(as_of_);
  }
  as_of_ = as_of;
  if (as_of) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Search.as_of)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::release_as_of() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = as_of_;
  as_of_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::unsafe_arena_release_as_of() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.as_of)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = as_of_;
  as_of_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::_internal_mutable_as_of() {
  
  if (as_of_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    as_of_ = p;
  }
  return as_of_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::mutable_as_of() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.as_of)
  return _internal_mutable_as_of();
}
inline void Search::set_allocated_as_of(PROTOBUF_NAMESPACE_ID::Timestamp* as_of) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(as_of_);
  }
  if (as_of) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(as_of)->GetArena();
    if (message_arena != submessage_arena) {
      as_of = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, as_of, submessage_arena);
    }
    
  } else {
    
  }
  as_of_ = as_of;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.as_of)
}

// string git_hash = 6;
inline void Search::clear_git_hash() {
  git_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Search::git_hash() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.git_hash)
  return _internal_git_hash();
}
inline void Search::set_git_hash(const std::string& value) {
  _internal_set_git_hash(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Search.git_hash)
}
inline std::string* Search::mutable_git_hash() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.git_hash)
  return _internal_mutable_git_hash();
}
inline const std::string& Search::_internal_git_hash() const {
  return git_hash_.Get();
}
inline void Search::_internal_set_git_hash(const std::string& value) {
  
  git_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Search::set_git_hash(std::string&& value) {
  
  git_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Search.git_hash)
}
inline void Search::set_git_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  git_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Search.git_hash)
}
inline void Search::set_git_hash(const char* value,
    size_t size) {
  
  git_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Search.git_hash)
}
inline std::string* Search::_internal_mutable_git_hash() {
  
  return git_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Search::release_git_hash() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.git_hash)
  return git_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Search::set_allocated_git_hash(std::string* git_hash) {
  if (git_hash != nullptr) {
    
  } else {
    
  }
  git_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), git_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.git_hash)
}

// .google.protobuf.Timestamp created_at = 7;
inline bool Search::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Search::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Search::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Search::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.created_at)
  return _internal_created_at();
}
inline void Search::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Search.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.created_at)
  return _internal_mutable_created_at();
}
inline void Search::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.created_at)
}

// .google.protobuf.Timestamp modified_at = 8;
inline bool Search::_internal_has_modified_at() const {
  return this != internal_default_instance() && modified_at_ != nullptr;
}
inline bool Search::has_modified_at() const {
  return _internal_has_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Search::_internal_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Search::modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.modified_at)
  return _internal_modified_at();
}
inline void Search::unsafe_arena_set_allocated_modified_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  modified_at_ = modified_at;
  if (modified_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Search.modified_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::release_modified_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::unsafe_arena_release_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::_internal_mutable_modified_at() {
  
  if (modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    modified_at_ = p;
  }
  return modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::mutable_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.modified_at)
  return _internal_mutable_modified_at();
}
inline void Search::set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  if (modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_at, submessage_arena);
    }
    
  } else {
    
  }
  modified_at_ = modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.modified_at)
}

// string algorithm = 9;
inline void Search::clear_algorithm() {
  algorithm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Search::algorithm() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.algorithm)
  return _internal_algorithm();
}
inline void Search::set_algorithm(const std::string& value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Search.algorithm)
}
inline std::string* Search::mutable_algorithm() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.algorithm)
  return _internal_mutable_algorithm();
}
inline const std::string& Search::_internal_algorithm() const {
  return algorithm_.Get();
}
inline void Search::_internal_set_algorithm(const std::string& value) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Search::set_algorithm(std::string&& value) {
  
  algorithm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Search.algorithm)
}
inline void Search::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Search.algorithm)
}
inline void Search::set_algorithm(const char* value,
    size_t size) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Search.algorithm)
}
inline std::string* Search::_internal_mutable_algorithm() {
  
  return algorithm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Search::release_algorithm() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.algorithm)
  return algorithm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Search::set_allocated_algorithm(std::string* algorithm) {
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.algorithm)
}

// bool save = 10;
inline void Search::clear_save() {
  save_ = false;
}
inline bool Search::_internal_save() const {
  return save_;
}
inline bool Search::save() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.save)
  return _internal_save();
}
inline void Search::_internal_set_save(bool value) {
  
  save_ = value;
}
inline void Search::set_save(bool value) {
  _internal_set_save(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Search.save)
}

// -------------------------------------------------------------------

// Filter

// bool negate = 3;
inline void Filter::clear_negate() {
  negate_ = false;
}
inline bool Filter::_internal_negate() const {
  return negate_;
}
inline bool Filter::negate() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Filter.negate)
  return _internal_negate();
}
inline void Filter::_internal_set_negate(bool value) {
  
  negate_ = value;
}
inline void Filter::set_negate(bool value) {
  _internal_set_negate(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Filter.negate)
}

// .clarifai.api.Annotation annotation = 4;
inline bool Filter::_internal_has_annotation() const {
  return this != internal_default_instance() && annotation_ != nullptr;
}
inline bool Filter::has_annotation() const {
  return _internal_has_annotation();
}
inline void Filter::clear_annotation() {
  if (GetArena() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
inline const ::clarifai::api::Annotation& Filter::_internal_annotation() const {
  const ::clarifai::api::Annotation* p = annotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Annotation*>(
      &::clarifai::api::_Annotation_default_instance_);
}
inline const ::clarifai::api::Annotation& Filter::annotation() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Filter.annotation)
  return _internal_annotation();
}
inline void Filter::unsafe_arena_set_allocated_annotation(
    ::clarifai::api::Annotation* annotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_);
  }
  annotation_ = annotation;
  if (annotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Filter.annotation)
}
inline ::clarifai::api::Annotation* Filter::release_annotation() {
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Annotation* Filter::unsafe_arena_release_annotation() {
  // @@protoc_insertion_point(field_release:clarifai.api.Filter.annotation)
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  return temp;
}
inline ::clarifai::api::Annotation* Filter::_internal_mutable_annotation() {
  
  if (annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Annotation>(GetArena());
    annotation_ = p;
  }
  return annotation_;
}
inline ::clarifai::api::Annotation* Filter::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Filter.annotation)
  return _internal_mutable_annotation();
}
inline void Filter::set_allocated_annotation(::clarifai::api::Annotation* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete annotation_;
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(annotation);
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    
  } else {
    
  }
  annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Filter.annotation)
}

// -------------------------------------------------------------------

// Rank

// bool negate = 3;
inline void Rank::clear_negate() {
  negate_ = false;
}
inline bool Rank::_internal_negate() const {
  return negate_;
}
inline bool Rank::negate() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Rank.negate)
  return _internal_negate();
}
inline void Rank::_internal_set_negate(bool value) {
  
  negate_ = value;
}
inline void Rank::set_negate(bool value) {
  _internal_set_negate(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Rank.negate)
}

// .clarifai.api.Annotation annotation = 4;
inline bool Rank::_internal_has_annotation() const {
  return this != internal_default_instance() && annotation_ != nullptr;
}
inline bool Rank::has_annotation() const {
  return _internal_has_annotation();
}
inline void Rank::clear_annotation() {
  if (GetArena() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
inline const ::clarifai::api::Annotation& Rank::_internal_annotation() const {
  const ::clarifai::api::Annotation* p = annotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Annotation*>(
      &::clarifai::api::_Annotation_default_instance_);
}
inline const ::clarifai::api::Annotation& Rank::annotation() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Rank.annotation)
  return _internal_annotation();
}
inline void Rank::unsafe_arena_set_allocated_annotation(
    ::clarifai::api::Annotation* annotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_);
  }
  annotation_ = annotation;
  if (annotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Rank.annotation)
}
inline ::clarifai::api::Annotation* Rank::release_annotation() {
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Annotation* Rank::unsafe_arena_release_annotation() {
  // @@protoc_insertion_point(field_release:clarifai.api.Rank.annotation)
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  return temp;
}
inline ::clarifai::api::Annotation* Rank::_internal_mutable_annotation() {
  
  if (annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Annotation>(GetArena());
    annotation_ = p;
  }
  return annotation_;
}
inline ::clarifai::api::Annotation* Rank::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Rank.annotation)
  return _internal_mutable_annotation();
}
inline void Rank::set_allocated_annotation(::clarifai::api::Annotation* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete annotation_;
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(annotation);
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    
  } else {
    
  }
  annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Rank.annotation)
}

// -------------------------------------------------------------------

// Plan

// string name = 1;
inline void Plan::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Plan::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Plan.name)
  return _internal_name();
}
inline void Plan::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Plan.name)
}
inline std::string* Plan::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Plan.name)
  return _internal_mutable_name();
}
inline const std::string& Plan::_internal_name() const {
  return name_.Get();
}
inline void Plan::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Plan::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Plan.name)
}
inline void Plan::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Plan.name)
}
inline void Plan::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Plan.name)
}
inline std::string* Plan::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Plan::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.Plan.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Plan::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Plan.name)
}

// -------------------------------------------------------------------

// CreditCard

// string number = 1;
inline void CreditCard::clear_number() {
  number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::number() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.number)
  return _internal_number();
}
inline void CreditCard::set_number(const std::string& value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.number)
}
inline std::string* CreditCard::mutable_number() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.number)
  return _internal_mutable_number();
}
inline const std::string& CreditCard::_internal_number() const {
  return number_.Get();
}
inline void CreditCard::_internal_set_number(const std::string& value) {
  
  number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_number(std::string&& value) {
  
  number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.number)
}
inline void CreditCard::set_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.number)
}
inline void CreditCard::set_number(const char* value,
    size_t size) {
  
  number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.number)
}
inline std::string* CreditCard::_internal_mutable_number() {
  
  return number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_number() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.number)
  return number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.number)
}

// string four_digits = 2;
inline void CreditCard::clear_four_digits() {
  four_digits_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::four_digits() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.four_digits)
  return _internal_four_digits();
}
inline void CreditCard::set_four_digits(const std::string& value) {
  _internal_set_four_digits(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.four_digits)
}
inline std::string* CreditCard::mutable_four_digits() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.four_digits)
  return _internal_mutable_four_digits();
}
inline const std::string& CreditCard::_internal_four_digits() const {
  return four_digits_.Get();
}
inline void CreditCard::_internal_set_four_digits(const std::string& value) {
  
  four_digits_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_four_digits(std::string&& value) {
  
  four_digits_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.four_digits)
}
inline void CreditCard::set_four_digits(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  four_digits_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.four_digits)
}
inline void CreditCard::set_four_digits(const char* value,
    size_t size) {
  
  four_digits_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.four_digits)
}
inline std::string* CreditCard::_internal_mutable_four_digits() {
  
  return four_digits_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_four_digits() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.four_digits)
  return four_digits_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_four_digits(std::string* four_digits) {
  if (four_digits != nullptr) {
    
  } else {
    
  }
  four_digits_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), four_digits,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.four_digits)
}

// string exp_month = 3;
inline void CreditCard::clear_exp_month() {
  exp_month_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::exp_month() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.exp_month)
  return _internal_exp_month();
}
inline void CreditCard::set_exp_month(const std::string& value) {
  _internal_set_exp_month(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.exp_month)
}
inline std::string* CreditCard::mutable_exp_month() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.exp_month)
  return _internal_mutable_exp_month();
}
inline const std::string& CreditCard::_internal_exp_month() const {
  return exp_month_.Get();
}
inline void CreditCard::_internal_set_exp_month(const std::string& value) {
  
  exp_month_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_exp_month(std::string&& value) {
  
  exp_month_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.exp_month)
}
inline void CreditCard::set_exp_month(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exp_month_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.exp_month)
}
inline void CreditCard::set_exp_month(const char* value,
    size_t size) {
  
  exp_month_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.exp_month)
}
inline std::string* CreditCard::_internal_mutable_exp_month() {
  
  return exp_month_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_exp_month() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.exp_month)
  return exp_month_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_exp_month(std::string* exp_month) {
  if (exp_month != nullptr) {
    
  } else {
    
  }
  exp_month_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exp_month,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.exp_month)
}

// string exp_year = 4;
inline void CreditCard::clear_exp_year() {
  exp_year_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::exp_year() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.exp_year)
  return _internal_exp_year();
}
inline void CreditCard::set_exp_year(const std::string& value) {
  _internal_set_exp_year(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.exp_year)
}
inline std::string* CreditCard::mutable_exp_year() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.exp_year)
  return _internal_mutable_exp_year();
}
inline const std::string& CreditCard::_internal_exp_year() const {
  return exp_year_.Get();
}
inline void CreditCard::_internal_set_exp_year(const std::string& value) {
  
  exp_year_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_exp_year(std::string&& value) {
  
  exp_year_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.exp_year)
}
inline void CreditCard::set_exp_year(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exp_year_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.exp_year)
}
inline void CreditCard::set_exp_year(const char* value,
    size_t size) {
  
  exp_year_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.exp_year)
}
inline std::string* CreditCard::_internal_mutable_exp_year() {
  
  return exp_year_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_exp_year() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.exp_year)
  return exp_year_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_exp_year(std::string* exp_year) {
  if (exp_year != nullptr) {
    
  } else {
    
  }
  exp_year_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exp_year,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.exp_year)
}

// string cvc = 5;
inline void CreditCard::clear_cvc() {
  cvc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::cvc() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.cvc)
  return _internal_cvc();
}
inline void CreditCard::set_cvc(const std::string& value) {
  _internal_set_cvc(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.cvc)
}
inline std::string* CreditCard::mutable_cvc() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.cvc)
  return _internal_mutable_cvc();
}
inline const std::string& CreditCard::_internal_cvc() const {
  return cvc_.Get();
}
inline void CreditCard::_internal_set_cvc(const std::string& value) {
  
  cvc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_cvc(std::string&& value) {
  
  cvc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.cvc)
}
inline void CreditCard::set_cvc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cvc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.cvc)
}
inline void CreditCard::set_cvc(const char* value,
    size_t size) {
  
  cvc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.cvc)
}
inline std::string* CreditCard::_internal_mutable_cvc() {
  
  return cvc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_cvc() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.cvc)
  return cvc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_cvc(std::string* cvc) {
  if (cvc != nullptr) {
    
  } else {
    
  }
  cvc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cvc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.cvc)
}

// string name = 6;
inline void CreditCard::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.name)
  return _internal_name();
}
inline void CreditCard::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.name)
}
inline std::string* CreditCard::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.name)
  return _internal_mutable_name();
}
inline const std::string& CreditCard::_internal_name() const {
  return name_.Get();
}
inline void CreditCard::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.name)
}
inline void CreditCard::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.name)
}
inline void CreditCard::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.name)
}
inline std::string* CreditCard::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.name)
}

// string address_line_1 = 7;
inline void CreditCard::clear_address_line_1() {
  address_line_1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::address_line_1() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.address_line_1)
  return _internal_address_line_1();
}
inline void CreditCard::set_address_line_1(const std::string& value) {
  _internal_set_address_line_1(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.address_line_1)
}
inline std::string* CreditCard::mutable_address_line_1() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.address_line_1)
  return _internal_mutable_address_line_1();
}
inline const std::string& CreditCard::_internal_address_line_1() const {
  return address_line_1_.Get();
}
inline void CreditCard::_internal_set_address_line_1(const std::string& value) {
  
  address_line_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_address_line_1(std::string&& value) {
  
  address_line_1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.address_line_1)
}
inline void CreditCard::set_address_line_1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_line_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.address_line_1)
}
inline void CreditCard::set_address_line_1(const char* value,
    size_t size) {
  
  address_line_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.address_line_1)
}
inline std::string* CreditCard::_internal_mutable_address_line_1() {
  
  return address_line_1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_address_line_1() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.address_line_1)
  return address_line_1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_address_line_1(std::string* address_line_1) {
  if (address_line_1 != nullptr) {
    
  } else {
    
  }
  address_line_1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_line_1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.address_line_1)
}

// string address_line_2 = 8;
inline void CreditCard::clear_address_line_2() {
  address_line_2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::address_line_2() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.address_line_2)
  return _internal_address_line_2();
}
inline void CreditCard::set_address_line_2(const std::string& value) {
  _internal_set_address_line_2(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.address_line_2)
}
inline std::string* CreditCard::mutable_address_line_2() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.address_line_2)
  return _internal_mutable_address_line_2();
}
inline const std::string& CreditCard::_internal_address_line_2() const {
  return address_line_2_.Get();
}
inline void CreditCard::_internal_set_address_line_2(const std::string& value) {
  
  address_line_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_address_line_2(std::string&& value) {
  
  address_line_2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.address_line_2)
}
inline void CreditCard::set_address_line_2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_line_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.address_line_2)
}
inline void CreditCard::set_address_line_2(const char* value,
    size_t size) {
  
  address_line_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.address_line_2)
}
inline std::string* CreditCard::_internal_mutable_address_line_2() {
  
  return address_line_2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_address_line_2() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.address_line_2)
  return address_line_2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_address_line_2(std::string* address_line_2) {
  if (address_line_2 != nullptr) {
    
  } else {
    
  }
  address_line_2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_line_2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.address_line_2)
}

// string address_zip = 9;
inline void CreditCard::clear_address_zip() {
  address_zip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::address_zip() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.address_zip)
  return _internal_address_zip();
}
inline void CreditCard::set_address_zip(const std::string& value) {
  _internal_set_address_zip(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.address_zip)
}
inline std::string* CreditCard::mutable_address_zip() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.address_zip)
  return _internal_mutable_address_zip();
}
inline const std::string& CreditCard::_internal_address_zip() const {
  return address_zip_.Get();
}
inline void CreditCard::_internal_set_address_zip(const std::string& value) {
  
  address_zip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_address_zip(std::string&& value) {
  
  address_zip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.address_zip)
}
inline void CreditCard::set_address_zip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_zip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.address_zip)
}
inline void CreditCard::set_address_zip(const char* value,
    size_t size) {
  
  address_zip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.address_zip)
}
inline std::string* CreditCard::_internal_mutable_address_zip() {
  
  return address_zip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_address_zip() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.address_zip)
  return address_zip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_address_zip(std::string* address_zip) {
  if (address_zip != nullptr) {
    
  } else {
    
  }
  address_zip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_zip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.address_zip)
}

// string address_country = 10;
inline void CreditCard::clear_address_country() {
  address_country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::address_country() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.address_country)
  return _internal_address_country();
}
inline void CreditCard::set_address_country(const std::string& value) {
  _internal_set_address_country(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.address_country)
}
inline std::string* CreditCard::mutable_address_country() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.address_country)
  return _internal_mutable_address_country();
}
inline const std::string& CreditCard::_internal_address_country() const {
  return address_country_.Get();
}
inline void CreditCard::_internal_set_address_country(const std::string& value) {
  
  address_country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_address_country(std::string&& value) {
  
  address_country_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.address_country)
}
inline void CreditCard::set_address_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.address_country)
}
inline void CreditCard::set_address_country(const char* value,
    size_t size) {
  
  address_country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.address_country)
}
inline std::string* CreditCard::_internal_mutable_address_country() {
  
  return address_country_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_address_country() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.address_country)
  return address_country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_address_country(std::string* address_country) {
  if (address_country != nullptr) {
    
  } else {
    
  }
  address_country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.address_country)
}

// string address_city = 11;
inline void CreditCard::clear_address_city() {
  address_city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::address_city() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.address_city)
  return _internal_address_city();
}
inline void CreditCard::set_address_city(const std::string& value) {
  _internal_set_address_city(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.address_city)
}
inline std::string* CreditCard::mutable_address_city() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.address_city)
  return _internal_mutable_address_city();
}
inline const std::string& CreditCard::_internal_address_city() const {
  return address_city_.Get();
}
inline void CreditCard::_internal_set_address_city(const std::string& value) {
  
  address_city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_address_city(std::string&& value) {
  
  address_city_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.address_city)
}
inline void CreditCard::set_address_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.address_city)
}
inline void CreditCard::set_address_city(const char* value,
    size_t size) {
  
  address_city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.address_city)
}
inline std::string* CreditCard::_internal_mutable_address_city() {
  
  return address_city_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_address_city() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.address_city)
  return address_city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_address_city(std::string* address_city) {
  if (address_city != nullptr) {
    
  } else {
    
  }
  address_city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.address_city)
}

// string address_state = 12;
inline void CreditCard::clear_address_state() {
  address_state_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::address_state() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.address_state)
  return _internal_address_state();
}
inline void CreditCard::set_address_state(const std::string& value) {
  _internal_set_address_state(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.address_state)
}
inline std::string* CreditCard::mutable_address_state() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.address_state)
  return _internal_mutable_address_state();
}
inline const std::string& CreditCard::_internal_address_state() const {
  return address_state_.Get();
}
inline void CreditCard::_internal_set_address_state(const std::string& value) {
  
  address_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_address_state(std::string&& value) {
  
  address_state_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.address_state)
}
inline void CreditCard::set_address_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.address_state)
}
inline void CreditCard::set_address_state(const char* value,
    size_t size) {
  
  address_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.address_state)
}
inline std::string* CreditCard::_internal_mutable_address_state() {
  
  return address_state_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_address_state() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.address_state)
  return address_state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_address_state(std::string* address_state) {
  if (address_state != nullptr) {
    
  } else {
    
  }
  address_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.address_state)
}

// string id = 13;
inline void CreditCard::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.id)
  return _internal_id();
}
inline void CreditCard::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.id)
}
inline std::string* CreditCard::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.id)
  return _internal_mutable_id();
}
inline const std::string& CreditCard::_internal_id() const {
  return id_.Get();
}
inline void CreditCard::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.id)
}
inline void CreditCard::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.id)
}
inline void CreditCard::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.id)
}
inline std::string* CreditCard::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.id)
}

// string brand = 14;
inline void CreditCard::clear_brand() {
  brand_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::brand() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.brand)
  return _internal_brand();
}
inline void CreditCard::set_brand(const std::string& value) {
  _internal_set_brand(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.brand)
}
inline std::string* CreditCard::mutable_brand() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.brand)
  return _internal_mutable_brand();
}
inline const std::string& CreditCard::_internal_brand() const {
  return brand_.Get();
}
inline void CreditCard::_internal_set_brand(const std::string& value) {
  
  brand_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_brand(std::string&& value) {
  
  brand_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.brand)
}
inline void CreditCard::set_brand(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brand_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.brand)
}
inline void CreditCard::set_brand(const char* value,
    size_t size) {
  
  brand_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.brand)
}
inline std::string* CreditCard::_internal_mutable_brand() {
  
  return brand_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_brand() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.brand)
  return brand_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_brand(std::string* brand) {
  if (brand != nullptr) {
    
  } else {
    
  }
  brand_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brand,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.brand)
}

// string funding = 15;
inline void CreditCard::clear_funding() {
  funding_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::funding() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.funding)
  return _internal_funding();
}
inline void CreditCard::set_funding(const std::string& value) {
  _internal_set_funding(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.funding)
}
inline std::string* CreditCard::mutable_funding() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.funding)
  return _internal_mutable_funding();
}
inline const std::string& CreditCard::_internal_funding() const {
  return funding_.Get();
}
inline void CreditCard::_internal_set_funding(const std::string& value) {
  
  funding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_funding(std::string&& value) {
  
  funding_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.funding)
}
inline void CreditCard::set_funding(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  funding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.funding)
}
inline void CreditCard::set_funding(const char* value,
    size_t size) {
  
  funding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.funding)
}
inline std::string* CreditCard::_internal_mutable_funding() {
  
  return funding_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_funding() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.funding)
  return funding_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_funding(std::string* funding) {
  if (funding != nullptr) {
    
  } else {
    
  }
  funding_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), funding,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.funding)
}

// bool default = 16 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void CreditCard::clear_default_() {
  default__ = false;
}
inline bool CreditCard::_internal_default_() const {
  return default__;
}
inline bool CreditCard::default_() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.default)
  return _internal_default_();
}
inline void CreditCard::_internal_set_default_(bool value) {
  
  default__ = value;
}
inline void CreditCard::set_default_(bool value) {
  _internal_set_default_(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.default)
}

// string cvc_check = 17;
inline void CreditCard::clear_cvc_check() {
  cvc_check_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCard::cvc_check() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CreditCard.cvc_check)
  return _internal_cvc_check();
}
inline void CreditCard::set_cvc_check(const std::string& value) {
  _internal_set_cvc_check(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CreditCard.cvc_check)
}
inline std::string* CreditCard::mutable_cvc_check() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CreditCard.cvc_check)
  return _internal_mutable_cvc_check();
}
inline const std::string& CreditCard::_internal_cvc_check() const {
  return cvc_check_.Get();
}
inline void CreditCard::_internal_set_cvc_check(const std::string& value) {
  
  cvc_check_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCard::set_cvc_check(std::string&& value) {
  
  cvc_check_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CreditCard.cvc_check)
}
inline void CreditCard::set_cvc_check(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cvc_check_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.CreditCard.cvc_check)
}
inline void CreditCard::set_cvc_check(const char* value,
    size_t size) {
  
  cvc_check_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CreditCard.cvc_check)
}
inline std::string* CreditCard::_internal_mutable_cvc_check() {
  
  return cvc_check_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCard::release_cvc_check() {
  // @@protoc_insertion_point(field_release:clarifai.api.CreditCard.cvc_check)
  return cvc_check_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCard::set_allocated_cvc_check(std::string* cvc_check) {
  if (cvc_check != nullptr) {
    
  } else {
    
  }
  cvc_check_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cvc_check,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CreditCard.cvc_check)
}

// -------------------------------------------------------------------

// Text

// string raw = 1;
inline void Text::clear_raw() {
  raw_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Text::raw() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Text.raw)
  return _internal_raw();
}
inline void Text::set_raw(const std::string& value) {
  _internal_set_raw(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Text.raw)
}
inline std::string* Text::mutable_raw() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Text.raw)
  return _internal_mutable_raw();
}
inline const std::string& Text::_internal_raw() const {
  return raw_.Get();
}
inline void Text::_internal_set_raw(const std::string& value) {
  
  raw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Text::set_raw(std::string&& value) {
  
  raw_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Text.raw)
}
inline void Text::set_raw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Text.raw)
}
inline void Text::set_raw(const char* value,
    size_t size) {
  
  raw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Text.raw)
}
inline std::string* Text::_internal_mutable_raw() {
  
  return raw_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Text::release_raw() {
  // @@protoc_insertion_point(field_release:clarifai.api.Text.raw)
  return raw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Text::set_allocated_raw(std::string* raw) {
  if (raw != nullptr) {
    
  } else {
    
  }
  raw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Text.raw)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DimensionList

// map<string, string> dimension = 1;
inline int DimensionList::_internal_dimension_size() const {
  return dimension_.size();
}
inline int DimensionList::dimension_size() const {
  return _internal_dimension_size();
}
inline void DimensionList::clear_dimension() {
  dimension_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DimensionList::_internal_dimension() const {
  return dimension_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DimensionList::dimension() const {
  // @@protoc_insertion_point(field_map:clarifai.api.DimensionList.dimension)
  return _internal_dimension();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DimensionList::_internal_mutable_dimension() {
  return dimension_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DimensionList::mutable_dimension() {
  // @@protoc_insertion_point(field_mutable_map:clarifai.api.DimensionList.dimension)
  return _internal_mutable_dimension();
}

// repeated int64 int_value_list = 2;
inline int DimensionList::_internal_int_value_list_size() const {
  return int_value_list_.size();
}
inline int DimensionList::int_value_list_size() const {
  return _internal_int_value_list_size();
}
inline void DimensionList::clear_int_value_list() {
  int_value_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DimensionList::_internal_int_value_list(int index) const {
  return int_value_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DimensionList::int_value_list(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DimensionList.int_value_list)
  return _internal_int_value_list(index);
}
inline void DimensionList::set_int_value_list(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  int_value_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.DimensionList.int_value_list)
}
inline void DimensionList::_internal_add_int_value_list(::PROTOBUF_NAMESPACE_ID::int64 value) {
  int_value_list_.Add(value);
}
inline void DimensionList::add_int_value_list(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_int_value_list(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DimensionList.int_value_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DimensionList::_internal_int_value_list() const {
  return int_value_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DimensionList::int_value_list() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DimensionList.int_value_list)
  return _internal_int_value_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DimensionList::_internal_mutable_int_value_list() {
  return &int_value_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DimensionList::mutable_int_value_list() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DimensionList.int_value_list)
  return _internal_mutable_int_value_list();
}

// .google.protobuf.Timestamp start_date = 3;
inline bool DimensionList::_internal_has_start_date() const {
  return this != internal_default_instance() && start_date_ != nullptr;
}
inline bool DimensionList::has_start_date() const {
  return _internal_has_start_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DimensionList::_internal_start_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DimensionList::start_date() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DimensionList.start_date)
  return _internal_start_date();
}
inline void DimensionList::unsafe_arena_set_allocated_start_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  start_date_ = start_date;
  if (start_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DimensionList.start_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DimensionList::release_start_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_date_;
  start_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DimensionList::unsafe_arena_release_start_date() {
  // @@protoc_insertion_point(field_release:clarifai.api.DimensionList.start_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_date_;
  start_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DimensionList::_internal_mutable_start_date() {
  
  if (start_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_date_ = p;
  }
  return start_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DimensionList::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DimensionList.start_date)
  return _internal_mutable_start_date();
}
inline void DimensionList::set_allocated_start_date(PROTOBUF_NAMESPACE_ID::Timestamp* start_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  if (start_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date)->GetArena();
    if (message_arena != submessage_arena) {
      start_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_date, submessage_arena);
    }
    
  } else {
    
  }
  start_date_ = start_date;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DimensionList.start_date)
}

// .google.protobuf.Timestamp end_date = 4;
inline bool DimensionList::_internal_has_end_date() const {
  return this != internal_default_instance() && end_date_ != nullptr;
}
inline bool DimensionList::has_end_date() const {
  return _internal_has_end_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DimensionList::_internal_end_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DimensionList::end_date() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DimensionList.end_date)
  return _internal_end_date();
}
inline void DimensionList::unsafe_arena_set_allocated_end_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  end_date_ = end_date;
  if (end_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DimensionList.end_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DimensionList::release_end_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_date_;
  end_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DimensionList::unsafe_arena_release_end_date() {
  // @@protoc_insertion_point(field_release:clarifai.api.DimensionList.end_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_date_;
  end_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DimensionList::_internal_mutable_end_date() {
  
  if (end_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_date_ = p;
  }
  return end_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DimensionList::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DimensionList.end_date)
  return _internal_mutable_end_date();
}
inline void DimensionList::set_allocated_end_date(PROTOBUF_NAMESPACE_ID::Timestamp* end_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  if (end_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date)->GetArena();
    if (message_arena != submessage_arena) {
      end_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_date, submessage_arena);
    }
    
  } else {
    
  }
  end_date_ = end_date;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DimensionList.end_date)
}

// -------------------------------------------------------------------

// UsageInterval

// string interval = 1;
inline void UsageInterval::clear_interval() {
  interval_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UsageInterval::interval() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UsageInterval.interval)
  return _internal_interval();
}
inline void UsageInterval::set_interval(const std::string& value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UsageInterval.interval)
}
inline std::string* UsageInterval::mutable_interval() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UsageInterval.interval)
  return _internal_mutable_interval();
}
inline const std::string& UsageInterval::_internal_interval() const {
  return interval_.Get();
}
inline void UsageInterval::_internal_set_interval(const std::string& value) {
  
  interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UsageInterval::set_interval(std::string&& value) {
  
  interval_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.UsageInterval.interval)
}
inline void UsageInterval::set_interval(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.UsageInterval.interval)
}
inline void UsageInterval::set_interval(const char* value,
    size_t size) {
  
  interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.UsageInterval.interval)
}
inline std::string* UsageInterval::_internal_mutable_interval() {
  
  return interval_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UsageInterval::release_interval() {
  // @@protoc_insertion_point(field_release:clarifai.api.UsageInterval.interval)
  return interval_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UsageInterval::set_allocated_interval(std::string* interval) {
  if (interval != nullptr) {
    
  } else {
    
  }
  interval_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interval,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UsageInterval.interval)
}

// int32 range = 2;
inline void UsageInterval::clear_range() {
  range_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UsageInterval::_internal_range() const {
  return range_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UsageInterval::range() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UsageInterval.range)
  return _internal_range();
}
inline void UsageInterval::_internal_set_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  range_ = value;
}
inline void UsageInterval::set_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UsageInterval.range)
}

// -------------------------------------------------------------------

// RealtimeCount

// string op_type = 1;
inline void RealtimeCount::clear_op_type() {
  op_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RealtimeCount::op_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.RealtimeCount.op_type)
  return _internal_op_type();
}
inline void RealtimeCount::set_op_type(const std::string& value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.RealtimeCount.op_type)
}
inline std::string* RealtimeCount::mutable_op_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.RealtimeCount.op_type)
  return _internal_mutable_op_type();
}
inline const std::string& RealtimeCount::_internal_op_type() const {
  return op_type_.Get();
}
inline void RealtimeCount::_internal_set_op_type(const std::string& value) {
  
  op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RealtimeCount::set_op_type(std::string&& value) {
  
  op_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.RealtimeCount.op_type)
}
inline void RealtimeCount::set_op_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.RealtimeCount.op_type)
}
inline void RealtimeCount::set_op_type(const char* value,
    size_t size) {
  
  op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.RealtimeCount.op_type)
}
inline std::string* RealtimeCount::_internal_mutable_op_type() {
  
  return op_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RealtimeCount::release_op_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.RealtimeCount.op_type)
  return op_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RealtimeCount::set_allocated_op_type(std::string* op_type) {
  if (op_type != nullptr) {
    
  } else {
    
  }
  op_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.RealtimeCount.op_type)
}

// int64 count = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void RealtimeCount::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RealtimeCount::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RealtimeCount::count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.RealtimeCount.count)
  return _internal_count();
}
inline void RealtimeCount::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void RealtimeCount::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.RealtimeCount.count)
}

// -------------------------------------------------------------------

// EventSummary

// .clarifai.api.APIEventType event_type = 1;
inline void EventSummary::clear_event_type() {
  event_type_ = 0;
}
inline ::clarifai::api::APIEventType EventSummary::_internal_event_type() const {
  return static_cast< ::clarifai::api::APIEventType >(event_type_);
}
inline ::clarifai::api::APIEventType EventSummary::event_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EventSummary.event_type)
  return _internal_event_type();
}
inline void EventSummary::_internal_set_event_type(::clarifai::api::APIEventType value) {
  
  event_type_ = value;
}
inline void EventSummary::set_event_type(::clarifai::api::APIEventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.EventSummary.event_type)
}

// .clarifai.api.Model model = 2;
inline bool EventSummary::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool EventSummary::has_model() const {
  return _internal_has_model();
}
inline void EventSummary::clear_model() {
  if (GetArena() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
inline const ::clarifai::api::Model& EventSummary::_internal_model() const {
  const ::clarifai::api::Model* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Model*>(
      &::clarifai::api::_Model_default_instance_);
}
inline const ::clarifai::api::Model& EventSummary::model() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EventSummary.model)
  return _internal_model();
}
inline void EventSummary::unsafe_arena_set_allocated_model(
    ::clarifai::api::Model* model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.EventSummary.model)
}
inline ::clarifai::api::Model* EventSummary::release_model() {
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Model* EventSummary::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:clarifai.api.EventSummary.model)
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::api::Model* EventSummary::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Model>(GetArena());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::api::Model* EventSummary::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EventSummary.model)
  return _internal_mutable_model();
}
inline void EventSummary::set_allocated_model(::clarifai::api::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete model_;
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model);
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EventSummary.model)
}

// uint64 count = 3;
inline void EventSummary::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EventSummary::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EventSummary::count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EventSummary.count)
  return _internal_count();
}
inline void EventSummary::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void EventSummary::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.EventSummary.count)
}

// -------------------------------------------------------------------

// EventsCollection

// .google.protobuf.Timestamp start_time = 1;
inline bool EventsCollection::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool EventsCollection::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventsCollection::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventsCollection::start_time() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EventsCollection.start_time)
  return _internal_start_time();
}
inline void EventsCollection::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.EventsCollection.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::release_start_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:clarifai.api.EventsCollection.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EventsCollection.start_time)
  return _internal_mutable_start_time();
}
inline void EventsCollection::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EventsCollection.start_time)
}

// .google.protobuf.Timestamp end_time = 2;
inline bool EventsCollection::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool EventsCollection::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventsCollection::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventsCollection::end_time() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EventsCollection.end_time)
  return _internal_end_time();
}
inline void EventsCollection::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.EventsCollection.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:clarifai.api.EventsCollection.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EventsCollection.end_time)
  return _internal_mutable_end_time();
}
inline void EventsCollection::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EventsCollection.end_time)
}

// repeated .clarifai.api.EventSummary event_summaries = 3;
inline int EventsCollection::_internal_event_summaries_size() const {
  return event_summaries_.size();
}
inline int EventsCollection::event_summaries_size() const {
  return _internal_event_summaries_size();
}
inline void EventsCollection::clear_event_summaries() {
  event_summaries_.Clear();
}
inline ::clarifai::api::EventSummary* EventsCollection::mutable_event_summaries(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EventsCollection.event_summaries)
  return event_summaries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EventSummary >*
EventsCollection::mutable_event_summaries() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EventsCollection.event_summaries)
  return &event_summaries_;
}
inline const ::clarifai::api::EventSummary& EventsCollection::_internal_event_summaries(int index) const {
  return event_summaries_.Get(index);
}
inline const ::clarifai::api::EventSummary& EventsCollection::event_summaries(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EventsCollection.event_summaries)
  return _internal_event_summaries(index);
}
inline ::clarifai::api::EventSummary* EventsCollection::_internal_add_event_summaries() {
  return event_summaries_.Add();
}
inline ::clarifai::api::EventSummary* EventsCollection::add_event_summaries() {
  // @@protoc_insertion_point(field_add:clarifai.api.EventsCollection.event_summaries)
  return _internal_add_event_summaries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EventSummary >&
EventsCollection::event_summaries() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EventsCollection.event_summaries)
  return event_summaries_;
}

// -------------------------------------------------------------------

// User

// string id = 1;
inline void User::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.id)
  return _internal_id();
}
inline void User::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.id)
}
inline std::string* User::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.id)
  return _internal_mutable_id();
}
inline const std::string& User::_internal_id() const {
  return id_.Get();
}
inline void User::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.User.id)
}
inline void User::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.User.id)
}
inline void User::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.User.id)
}
inline std::string* User::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.id)
}

// string primary_email = 2;
inline void User::clear_primary_email() {
  primary_email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::primary_email() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.primary_email)
  return _internal_primary_email();
}
inline void User::set_primary_email(const std::string& value) {
  _internal_set_primary_email(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.primary_email)
}
inline std::string* User::mutable_primary_email() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.primary_email)
  return _internal_mutable_primary_email();
}
inline const std::string& User::_internal_primary_email() const {
  return primary_email_.Get();
}
inline void User::_internal_set_primary_email(const std::string& value) {
  
  primary_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_primary_email(std::string&& value) {
  
  primary_email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.User.primary_email)
}
inline void User::set_primary_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  primary_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.User.primary_email)
}
inline void User::set_primary_email(const char* value,
    size_t size) {
  
  primary_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.User.primary_email)
}
inline std::string* User::_internal_mutable_primary_email() {
  
  return primary_email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_primary_email() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.primary_email)
  return primary_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_primary_email(std::string* primary_email) {
  if (primary_email != nullptr) {
    
  } else {
    
  }
  primary_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primary_email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.primary_email)
}

// string first_name = 3;
inline void User::clear_first_name() {
  first_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::first_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.first_name)
  return _internal_first_name();
}
inline void User::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.first_name)
}
inline std::string* User::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& User::_internal_first_name() const {
  return first_name_.Get();
}
inline void User::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_first_name(std::string&& value) {
  
  first_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.User.first_name)
}
inline void User::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.User.first_name)
}
inline void User::set_first_name(const char* value,
    size_t size) {
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.User.first_name)
}
inline std::string* User::_internal_mutable_first_name() {
  
  return first_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_first_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.first_name)
}

// string last_name = 4;
inline void User::clear_last_name() {
  last_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::last_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.last_name)
  return _internal_last_name();
}
inline void User::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.last_name)
}
inline std::string* User::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& User::_internal_last_name() const {
  return last_name_.Get();
}
inline void User::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_last_name(std::string&& value) {
  
  last_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.User.last_name)
}
inline void User::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.User.last_name)
}
inline void User::set_last_name(const char* value,
    size_t size) {
  
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.User.last_name)
}
inline std::string* User::_internal_mutable_last_name() {
  
  return last_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_last_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.last_name)
}

// string company_name = 5;
inline void User::clear_company_name() {
  company_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::company_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.company_name)
  return _internal_company_name();
}
inline void User::set_company_name(const std::string& value) {
  _internal_set_company_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.company_name)
}
inline std::string* User::mutable_company_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.company_name)
  return _internal_mutable_company_name();
}
inline const std::string& User::_internal_company_name() const {
  return company_name_.Get();
}
inline void User::_internal_set_company_name(const std::string& value) {
  
  company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_company_name(std::string&& value) {
  
  company_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.User.company_name)
}
inline void User::set_company_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.User.company_name)
}
inline void User::set_company_name(const char* value,
    size_t size) {
  
  company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.User.company_name)
}
inline std::string* User::_internal_mutable_company_name() {
  
  return company_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_company_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.company_name)
  return company_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_company_name(std::string* company_name) {
  if (company_name != nullptr) {
    
  } else {
    
  }
  company_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.company_name)
}

// string bill_type = 7;
inline void User::clear_bill_type() {
  bill_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::bill_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.bill_type)
  return _internal_bill_type();
}
inline void User::set_bill_type(const std::string& value) {
  _internal_set_bill_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.bill_type)
}
inline std::string* User::mutable_bill_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.bill_type)
  return _internal_mutable_bill_type();
}
inline const std::string& User::_internal_bill_type() const {
  return bill_type_.Get();
}
inline void User::_internal_set_bill_type(const std::string& value) {
  
  bill_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_bill_type(std::string&& value) {
  
  bill_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.User.bill_type)
}
inline void User::set_bill_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bill_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.User.bill_type)
}
inline void User::set_bill_type(const char* value,
    size_t size) {
  
  bill_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.User.bill_type)
}
inline std::string* User::_internal_mutable_bill_type() {
  
  return bill_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_bill_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.bill_type)
  return bill_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_bill_type(std::string* bill_type) {
  if (bill_type != nullptr) {
    
  } else {
    
  }
  bill_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bill_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.bill_type)
}

// .google.protobuf.Timestamp created_at = 6;
inline bool User::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool User::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.created_at)
  return _internal_created_at();
}
inline void User::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.User.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.created_at)
  return _internal_mutable_created_at();
}
inline void User::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.created_at)
}

// .google.protobuf.Timestamp date_gdpr_consent = 8;
inline bool User::_internal_has_date_gdpr_consent() const {
  return this != internal_default_instance() && date_gdpr_consent_ != nullptr;
}
inline bool User::has_date_gdpr_consent() const {
  return _internal_has_date_gdpr_consent();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::_internal_date_gdpr_consent() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = date_gdpr_consent_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::date_gdpr_consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.date_gdpr_consent)
  return _internal_date_gdpr_consent();
}
inline void User::unsafe_arena_set_allocated_date_gdpr_consent(
    PROTOBUF_NAMESPACE_ID::Timestamp* date_gdpr_consent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_gdpr_consent_);
  }
  date_gdpr_consent_ = date_gdpr_consent;
  if (date_gdpr_consent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.User.date_gdpr_consent)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::release_date_gdpr_consent() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_gdpr_consent_;
  date_gdpr_consent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::unsafe_arena_release_date_gdpr_consent() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.date_gdpr_consent)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_gdpr_consent_;
  date_gdpr_consent_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::_internal_mutable_date_gdpr_consent() {
  
  if (date_gdpr_consent_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    date_gdpr_consent_ = p;
  }
  return date_gdpr_consent_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::mutable_date_gdpr_consent() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.date_gdpr_consent)
  return _internal_mutable_date_gdpr_consent();
}
inline void User::set_allocated_date_gdpr_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_gdpr_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_gdpr_consent_);
  }
  if (date_gdpr_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_gdpr_consent)->GetArena();
    if (message_arena != submessage_arena) {
      date_gdpr_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_gdpr_consent, submessage_arena);
    }
    
  } else {
    
  }
  date_gdpr_consent_ = date_gdpr_consent;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.date_gdpr_consent)
}

// .google.protobuf.Timestamp date_tos_consent = 9;
inline bool User::_internal_has_date_tos_consent() const {
  return this != internal_default_instance() && date_tos_consent_ != nullptr;
}
inline bool User::has_date_tos_consent() const {
  return _internal_has_date_tos_consent();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::_internal_date_tos_consent() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = date_tos_consent_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::date_tos_consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.date_tos_consent)
  return _internal_date_tos_consent();
}
inline void User::unsafe_arena_set_allocated_date_tos_consent(
    PROTOBUF_NAMESPACE_ID::Timestamp* date_tos_consent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_tos_consent_);
  }
  date_tos_consent_ = date_tos_consent;
  if (date_tos_consent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.User.date_tos_consent)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::release_date_tos_consent() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_tos_consent_;
  date_tos_consent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::unsafe_arena_release_date_tos_consent() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.date_tos_consent)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_tos_consent_;
  date_tos_consent_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::_internal_mutable_date_tos_consent() {
  
  if (date_tos_consent_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    date_tos_consent_ = p;
  }
  return date_tos_consent_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::mutable_date_tos_consent() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.date_tos_consent)
  return _internal_mutable_date_tos_consent();
}
inline void User::set_allocated_date_tos_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_tos_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_tos_consent_);
  }
  if (date_tos_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_tos_consent)->GetArena();
    if (message_arena != submessage_arena) {
      date_tos_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_tos_consent, submessage_arena);
    }
    
  } else {
    
  }
  date_tos_consent_ = date_tos_consent;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.date_tos_consent)
}

// .google.protobuf.Timestamp date_marketing_consent = 10;
inline bool User::_internal_has_date_marketing_consent() const {
  return this != internal_default_instance() && date_marketing_consent_ != nullptr;
}
inline bool User::has_date_marketing_consent() const {
  return _internal_has_date_marketing_consent();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::_internal_date_marketing_consent() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = date_marketing_consent_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::date_marketing_consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.date_marketing_consent)
  return _internal_date_marketing_consent();
}
inline void User::unsafe_arena_set_allocated_date_marketing_consent(
    PROTOBUF_NAMESPACE_ID::Timestamp* date_marketing_consent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_marketing_consent_);
  }
  date_marketing_consent_ = date_marketing_consent;
  if (date_marketing_consent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.User.date_marketing_consent)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::release_date_marketing_consent() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_marketing_consent_;
  date_marketing_consent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::unsafe_arena_release_date_marketing_consent() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.date_marketing_consent)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_marketing_consent_;
  date_marketing_consent_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::_internal_mutable_date_marketing_consent() {
  
  if (date_marketing_consent_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    date_marketing_consent_ = p;
  }
  return date_marketing_consent_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::mutable_date_marketing_consent() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.date_marketing_consent)
  return _internal_mutable_date_marketing_consent();
}
inline void User::set_allocated_date_marketing_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_marketing_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_marketing_consent_);
  }
  if (date_marketing_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_marketing_consent)->GetArena();
    if (message_arena != submessage_arena) {
      date_marketing_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_marketing_consent, submessage_arena);
    }
    
  } else {
    
  }
  date_marketing_consent_ = date_marketing_consent;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.date_marketing_consent)
}

// .google.protobuf.Struct metadata = 11;
inline bool User::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool User::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& User::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& User::metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.metadata)
  return _internal_metadata();
}
inline void User::unsafe_arena_set_allocated_metadata(
    PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.User.metadata)
}
inline PROTOBUF_NAMESPACE_ID::Struct* User::release_metadata() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* User::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* User::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* User::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.metadata)
  return _internal_mutable_metadata();
}
inline void User::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.metadata)
}

// repeated .clarifai.api.EmailAddress email_addresses = 12;
inline int User::_internal_email_addresses_size() const {
  return email_addresses_.size();
}
inline int User::email_addresses_size() const {
  return _internal_email_addresses_size();
}
inline void User::clear_email_addresses() {
  email_addresses_.Clear();
}
inline ::clarifai::api::EmailAddress* User::mutable_email_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.email_addresses)
  return email_addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >*
User::mutable_email_addresses() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.User.email_addresses)
  return &email_addresses_;
}
inline const ::clarifai::api::EmailAddress& User::_internal_email_addresses(int index) const {
  return email_addresses_.Get(index);
}
inline const ::clarifai::api::EmailAddress& User::email_addresses(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.email_addresses)
  return _internal_email_addresses(index);
}
inline ::clarifai::api::EmailAddress* User::_internal_add_email_addresses() {
  return email_addresses_.Add();
}
inline ::clarifai::api::EmailAddress* User::add_email_addresses() {
  // @@protoc_insertion_point(field_add:clarifai.api.User.email_addresses)
  return _internal_add_email_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >&
User::email_addresses() const {
  // @@protoc_insertion_point(field_list:clarifai.api.User.email_addresses)
  return email_addresses_;
}

// string worker_id = 13;
inline void User::clear_worker_id() {
  worker_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::worker_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.worker_id)
  return _internal_worker_id();
}
inline void User::set_worker_id(const std::string& value) {
  _internal_set_worker_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.worker_id)
}
inline std::string* User::mutable_worker_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.worker_id)
  return _internal_mutable_worker_id();
}
inline const std::string& User::_internal_worker_id() const {
  return worker_id_.Get();
}
inline void User::_internal_set_worker_id(const std::string& value) {
  
  worker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_worker_id(std::string&& value) {
  
  worker_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.User.worker_id)
}
inline void User::set_worker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.User.worker_id)
}
inline void User::set_worker_id(const char* value,
    size_t size) {
  
  worker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.User.worker_id)
}
inline std::string* User::_internal_mutable_worker_id() {
  
  return worker_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_worker_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.worker_id)
  return worker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_worker_id(std::string* worker_id) {
  if (worker_id != nullptr) {
    
  } else {
    
  }
  worker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.worker_id)
}

// -------------------------------------------------------------------

// EmailAddress

// string email = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void EmailAddress::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EmailAddress::email() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EmailAddress.email)
  return _internal_email();
}
inline void EmailAddress::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:clarifai.api.EmailAddress.email)
}
inline std::string* EmailAddress::mutable_email() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EmailAddress.email)
  return _internal_mutable_email();
}
inline const std::string& EmailAddress::_internal_email() const {
  return email_.Get();
}
inline void EmailAddress::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EmailAddress::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.EmailAddress.email)
}
inline void EmailAddress::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.EmailAddress.email)
}
inline void EmailAddress::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.EmailAddress.email)
}
inline std::string* EmailAddress::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EmailAddress::release_email() {
  // @@protoc_insertion_point(field_release:clarifai.api.EmailAddress.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmailAddress::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EmailAddress.email)
}

// bool primary = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void EmailAddress::clear_primary() {
  primary_ = false;
}
inline bool EmailAddress::_internal_primary() const {
  return primary_;
}
inline bool EmailAddress::primary() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EmailAddress.primary)
  return _internal_primary();
}
inline void EmailAddress::_internal_set_primary(bool value) {
  
  primary_ = value;
}
inline void EmailAddress::set_primary(bool value) {
  _internal_set_primary(value);
  // @@protoc_insertion_point(field_set:clarifai.api.EmailAddress.primary)
}

// bool verified = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void EmailAddress::clear_verified() {
  verified_ = false;
}
inline bool EmailAddress::_internal_verified() const {
  return verified_;
}
inline bool EmailAddress::verified() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EmailAddress.verified)
  return _internal_verified();
}
inline void EmailAddress::_internal_set_verified(bool value) {
  
  verified_ = value;
}
inline void EmailAddress::set_verified(bool value) {
  _internal_set_verified(value);
  // @@protoc_insertion_point(field_set:clarifai.api.EmailAddress.verified)
}

// -------------------------------------------------------------------

// UserPassword

// string old_password = 1;
inline void UserPassword::clear_old_password() {
  old_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserPassword::old_password() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserPassword.old_password)
  return _internal_old_password();
}
inline void UserPassword::set_old_password(const std::string& value) {
  _internal_set_old_password(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UserPassword.old_password)
}
inline std::string* UserPassword::mutable_old_password() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserPassword.old_password)
  return _internal_mutable_old_password();
}
inline const std::string& UserPassword::_internal_old_password() const {
  return old_password_.Get();
}
inline void UserPassword::_internal_set_old_password(const std::string& value) {
  
  old_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserPassword::set_old_password(std::string&& value) {
  
  old_password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.UserPassword.old_password)
}
inline void UserPassword::set_old_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  old_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.UserPassword.old_password)
}
inline void UserPassword::set_old_password(const char* value,
    size_t size) {
  
  old_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.UserPassword.old_password)
}
inline std::string* UserPassword::_internal_mutable_old_password() {
  
  return old_password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserPassword::release_old_password() {
  // @@protoc_insertion_point(field_release:clarifai.api.UserPassword.old_password)
  return old_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserPassword::set_allocated_old_password(std::string* old_password) {
  if (old_password != nullptr) {
    
  } else {
    
  }
  old_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UserPassword.old_password)
}

// string password = 2;
inline void UserPassword::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserPassword::password() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserPassword.password)
  return _internal_password();
}
inline void UserPassword::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UserPassword.password)
}
inline std::string* UserPassword::mutable_password() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserPassword.password)
  return _internal_mutable_password();
}
inline const std::string& UserPassword::_internal_password() const {
  return password_.Get();
}
inline void UserPassword::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserPassword::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.UserPassword.password)
}
inline void UserPassword::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.UserPassword.password)
}
inline void UserPassword::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.UserPassword.password)
}
inline std::string* UserPassword::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserPassword::release_password() {
  // @@protoc_insertion_point(field_release:clarifai.api.UserPassword.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserPassword::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UserPassword.password)
}

// -------------------------------------------------------------------

// UserInfo

// string company_name = 1;
inline void UserInfo::clear_company_name() {
  company_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::company_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserInfo.company_name)
  return _internal_company_name();
}
inline void UserInfo::set_company_name(const std::string& value) {
  _internal_set_company_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UserInfo.company_name)
}
inline std::string* UserInfo::mutable_company_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserInfo.company_name)
  return _internal_mutable_company_name();
}
inline const std::string& UserInfo::_internal_company_name() const {
  return company_name_.Get();
}
inline void UserInfo::_internal_set_company_name(const std::string& value) {
  
  company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_company_name(std::string&& value) {
  
  company_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.UserInfo.company_name)
}
inline void UserInfo::set_company_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.UserInfo.company_name)
}
inline void UserInfo::set_company_name(const char* value,
    size_t size) {
  
  company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.UserInfo.company_name)
}
inline std::string* UserInfo::_internal_mutable_company_name() {
  
  return company_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_company_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.UserInfo.company_name)
  return company_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_company_name(std::string* company_name) {
  if (company_name != nullptr) {
    
  } else {
    
  }
  company_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UserInfo.company_name)
}

// string first_name = 2;
inline void UserInfo::clear_first_name() {
  first_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::first_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserInfo.first_name)
  return _internal_first_name();
}
inline void UserInfo::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UserInfo.first_name)
}
inline std::string* UserInfo::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserInfo.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& UserInfo::_internal_first_name() const {
  return first_name_.Get();
}
inline void UserInfo::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_first_name(std::string&& value) {
  
  first_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.UserInfo.first_name)
}
inline void UserInfo::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.UserInfo.first_name)
}
inline void UserInfo::set_first_name(const char* value,
    size_t size) {
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.UserInfo.first_name)
}
inline std::string* UserInfo::_internal_mutable_first_name() {
  
  return first_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_first_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.UserInfo.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UserInfo.first_name)
}

// string last_name = 3;
inline void UserInfo::clear_last_name() {
  last_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::last_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserInfo.last_name)
  return _internal_last_name();
}
inline void UserInfo::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UserInfo.last_name)
}
inline std::string* UserInfo::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserInfo.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& UserInfo::_internal_last_name() const {
  return last_name_.Get();
}
inline void UserInfo::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_last_name(std::string&& value) {
  
  last_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.UserInfo.last_name)
}
inline void UserInfo::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.UserInfo.last_name)
}
inline void UserInfo::set_last_name(const char* value,
    size_t size) {
  
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.UserInfo.last_name)
}
inline std::string* UserInfo::_internal_mutable_last_name() {
  
  return last_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_last_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.UserInfo.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UserInfo.last_name)
}

// -------------------------------------------------------------------

// Video

// string url = 1;
inline void Video::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Video::url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Video.url)
  return _internal_url();
}
inline void Video::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Video.url)
}
inline std::string* Video::mutable_url() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Video.url)
  return _internal_mutable_url();
}
inline const std::string& Video::_internal_url() const {
  return url_.Get();
}
inline void Video::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Video::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Video.url)
}
inline void Video::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Video.url)
}
inline void Video::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Video.url)
}
inline std::string* Video::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Video::release_url() {
  // @@protoc_insertion_point(field_release:clarifai.api.Video.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Video::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Video.url)
}

// bytes base64 = 2;
inline void Video::clear_base64() {
  base64_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Video::base64() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Video.base64)
  return _internal_base64();
}
inline void Video::set_base64(const std::string& value) {
  _internal_set_base64(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Video.base64)
}
inline std::string* Video::mutable_base64() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Video.base64)
  return _internal_mutable_base64();
}
inline const std::string& Video::_internal_base64() const {
  return base64_.Get();
}
inline void Video::_internal_set_base64(const std::string& value) {
  
  base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Video::set_base64(std::string&& value) {
  
  base64_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Video.base64)
}
inline void Video::set_base64(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Video.base64)
}
inline void Video::set_base64(const void* value,
    size_t size) {
  
  base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Video.base64)
}
inline std::string* Video::_internal_mutable_base64() {
  
  return base64_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Video::release_base64() {
  // @@protoc_insertion_point(field_release:clarifai.api.Video.base64)
  return base64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Video::set_allocated_base64(std::string* base64) {
  if (base64 != nullptr) {
    
  } else {
    
  }
  base64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base64,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Video.base64)
}

// bool allow_duplicate_url = 4;
inline void Video::clear_allow_duplicate_url() {
  allow_duplicate_url_ = false;
}
inline bool Video::_internal_allow_duplicate_url() const {
  return allow_duplicate_url_;
}
inline bool Video::allow_duplicate_url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Video.allow_duplicate_url)
  return _internal_allow_duplicate_url();
}
inline void Video::_internal_set_allow_duplicate_url(bool value) {
  
  allow_duplicate_url_ = value;
}
inline void Video::set_allow_duplicate_url(bool value) {
  _internal_set_allow_duplicate_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Video.allow_duplicate_url)
}

// string thumbnail_url = 5;
inline void Video::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Video::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Video.thumbnail_url)
  return _internal_thumbnail_url();
}
inline void Video::set_thumbnail_url(const std::string& value) {
  _internal_set_thumbnail_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Video.thumbnail_url)
}
inline std::string* Video::mutable_thumbnail_url() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Video.thumbnail_url)
  return _internal_mutable_thumbnail_url();
}
inline const std::string& Video::_internal_thumbnail_url() const {
  return thumbnail_url_.Get();
}
inline void Video::_internal_set_thumbnail_url(const std::string& value) {
  
  thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Video::set_thumbnail_url(std::string&& value) {
  
  thumbnail_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Video.thumbnail_url)
}
inline void Video::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Video.thumbnail_url)
}
inline void Video::set_thumbnail_url(const char* value,
    size_t size) {
  
  thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Video.thumbnail_url)
}
inline std::string* Video::_internal_mutable_thumbnail_url() {
  
  return thumbnail_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Video::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:clarifai.api.Video.thumbnail_url)
  return thumbnail_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Video::set_allocated_thumbnail_url(std::string* thumbnail_url) {
  if (thumbnail_url != nullptr) {
    
  } else {
    
  }
  thumbnail_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnail_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Video.thumbnail_url)
}

// .clarifai.api.HostedURL hosted = 6;
inline bool Video::_internal_has_hosted() const {
  return this != internal_default_instance() && hosted_ != nullptr;
}
inline bool Video::has_hosted() const {
  return _internal_has_hosted();
}
inline void Video::clear_hosted() {
  if (GetArena() == nullptr && hosted_ != nullptr) {
    delete hosted_;
  }
  hosted_ = nullptr;
}
inline const ::clarifai::api::HostedURL& Video::_internal_hosted() const {
  const ::clarifai::api::HostedURL* p = hosted_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::HostedURL*>(
      &::clarifai::api::_HostedURL_default_instance_);
}
inline const ::clarifai::api::HostedURL& Video::hosted() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Video.hosted)
  return _internal_hosted();
}
inline void Video::unsafe_arena_set_allocated_hosted(
    ::clarifai::api::HostedURL* hosted) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hosted_);
  }
  hosted_ = hosted;
  if (hosted) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Video.hosted)
}
inline ::clarifai::api::HostedURL* Video::release_hosted() {
  
  ::clarifai::api::HostedURL* temp = hosted_;
  hosted_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::HostedURL* Video::unsafe_arena_release_hosted() {
  // @@protoc_insertion_point(field_release:clarifai.api.Video.hosted)
  
  ::clarifai::api::HostedURL* temp = hosted_;
  hosted_ = nullptr;
  return temp;
}
inline ::clarifai::api::HostedURL* Video::_internal_mutable_hosted() {
  
  if (hosted_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::HostedURL>(GetArena());
    hosted_ = p;
  }
  return hosted_;
}
inline ::clarifai::api::HostedURL* Video::mutable_hosted() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Video.hosted)
  return _internal_mutable_hosted();
}
inline void Video::set_allocated_hosted(::clarifai::api::HostedURL* hosted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hosted_;
  }
  if (hosted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hosted);
    if (message_arena != submessage_arena) {
      hosted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hosted, submessage_arena);
    }
    
  } else {
    
  }
  hosted_ = hosted;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Video.hosted)
}

// -------------------------------------------------------------------

// Vocab

// string id = 1;
inline void Vocab::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vocab::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Vocab.id)
  return _internal_id();
}
inline void Vocab::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Vocab.id)
}
inline std::string* Vocab::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Vocab.id)
  return _internal_mutable_id();
}
inline const std::string& Vocab::_internal_id() const {
  return id_.Get();
}
inline void Vocab::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vocab::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Vocab.id)
}
inline void Vocab::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Vocab.id)
}
inline void Vocab::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Vocab.id)
}
inline std::string* Vocab::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vocab::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Vocab.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vocab::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Vocab.id)
}

// string name = 2;
inline void Vocab::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vocab::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Vocab.name)
  return _internal_name();
}
inline void Vocab::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Vocab.name)
}
inline std::string* Vocab::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Vocab.name)
  return _internal_mutable_name();
}
inline const std::string& Vocab::_internal_name() const {
  return name_.Get();
}
inline void Vocab::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vocab::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Vocab.name)
}
inline void Vocab::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Vocab.name)
}
inline void Vocab::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Vocab.name)
}
inline std::string* Vocab::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vocab::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.Vocab.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vocab::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Vocab.name)
}

// string description = 3;
inline void Vocab::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vocab::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Vocab.description)
  return _internal_description();
}
inline void Vocab::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Vocab.description)
}
inline std::string* Vocab::mutable_description() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Vocab.description)
  return _internal_mutable_description();
}
inline const std::string& Vocab::_internal_description() const {
  return description_.Get();
}
inline void Vocab::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vocab::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Vocab.description)
}
inline void Vocab::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Vocab.description)
}
inline void Vocab::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Vocab.description)
}
inline std::string* Vocab::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vocab::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.Vocab.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vocab::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Vocab.description)
}

// string app_id = 4;
inline void Vocab::clear_app_id() {
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vocab::app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Vocab.app_id)
  return _internal_app_id();
}
inline void Vocab::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Vocab.app_id)
}
inline std::string* Vocab::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Vocab.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& Vocab::_internal_app_id() const {
  return app_id_.Get();
}
inline void Vocab::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vocab::set_app_id(std::string&& value) {
  
  app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Vocab.app_id)
}
inline void Vocab::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Vocab.app_id)
}
inline void Vocab::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Vocab.app_id)
}
inline std::string* Vocab::_internal_mutable_app_id() {
  
  return app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vocab::release_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Vocab.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vocab::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Vocab.app_id)
}

// .google.protobuf.Timestamp created_at = 5;
inline bool Vocab::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Vocab::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Vocab::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Vocab::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Vocab.created_at)
  return _internal_created_at();
}
inline void Vocab::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Vocab.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Vocab::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Vocab::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Vocab.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Vocab::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Vocab::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Vocab.created_at)
  return _internal_mutable_created_at();
}
inline void Vocab::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Vocab.created_at)
}

// -------------------------------------------------------------------

// Worker

// string id = 1;
inline void Worker::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Worker::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Worker.id)
  return _internal_id();
}
inline void Worker::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Worker.id)
}
inline std::string* Worker::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Worker.id)
  return _internal_mutable_id();
}
inline const std::string& Worker::_internal_id() const {
  return id_.Get();
}
inline void Worker::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Worker::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Worker.id)
}
inline void Worker::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Worker.id)
}
inline void Worker::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Worker.id)
}
inline std::string* Worker::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Worker::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Worker.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Worker::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Worker.id)
}

// string worker_type = 2;
inline void Worker::clear_worker_type() {
  worker_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Worker::worker_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Worker.worker_type)
  return _internal_worker_type();
}
inline void Worker::set_worker_type(const std::string& value) {
  _internal_set_worker_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Worker.worker_type)
}
inline std::string* Worker::mutable_worker_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Worker.worker_type)
  return _internal_mutable_worker_type();
}
inline const std::string& Worker::_internal_worker_type() const {
  return worker_type_.Get();
}
inline void Worker::_internal_set_worker_type(const std::string& value) {
  
  worker_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Worker::set_worker_type(std::string&& value) {
  
  worker_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Worker.worker_type)
}
inline void Worker::set_worker_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Worker.worker_type)
}
inline void Worker::set_worker_type(const char* value,
    size_t size) {
  
  worker_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Worker.worker_type)
}
inline std::string* Worker::_internal_mutable_worker_type() {
  
  return worker_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Worker::release_worker_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.Worker.worker_type)
  return worker_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Worker::set_allocated_worker_type(std::string* worker_type) {
  if (worker_type != nullptr) {
    
  } else {
    
  }
  worker_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Worker.worker_type)
}

// .clarifai.api.User user = 3;
inline bool Worker::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool Worker::has_user() const {
  return _internal_has_user();
}
inline void Worker::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::clarifai::api::User& Worker::_internal_user() const {
  const ::clarifai::api::User* p = user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::User*>(
      &::clarifai::api::_User_default_instance_);
}
inline const ::clarifai::api::User& Worker::user() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Worker.user)
  return _internal_user();
}
inline void Worker::unsafe_arena_set_allocated_user(
    ::clarifai::api::User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Worker.user)
}
inline ::clarifai::api::User* Worker::release_user() {
  
  ::clarifai::api::User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::User* Worker::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:clarifai.api.Worker.user)
  
  ::clarifai::api::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::clarifai::api::User* Worker::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::clarifai::api::User* Worker::mutable_user() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Worker.user)
  return _internal_mutable_user();
}
inline void Worker::set_allocated_user(::clarifai::api::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Worker.user)
}

// .clarifai.api.Model model = 4;
inline bool Worker::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool Worker::has_model() const {
  return _internal_has_model();
}
inline void Worker::clear_model() {
  if (GetArena() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
inline const ::clarifai::api::Model& Worker::_internal_model() const {
  const ::clarifai::api::Model* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Model*>(
      &::clarifai::api::_Model_default_instance_);
}
inline const ::clarifai::api::Model& Worker::model() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Worker.model)
  return _internal_model();
}
inline void Worker::unsafe_arena_set_allocated_model(
    ::clarifai::api::Model* model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Worker.model)
}
inline ::clarifai::api::Model* Worker::release_model() {
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Model* Worker::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:clarifai.api.Worker.model)
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::api::Model* Worker::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Model>(GetArena());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::api::Model* Worker::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Worker.model)
  return _internal_mutable_model();
}
inline void Worker::set_allocated_model(::clarifai::api::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete model_;
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model);
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Worker.model)
}

// .google.protobuf.Timestamp created_at = 5;
inline bool Worker::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Worker::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Worker::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Worker::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Worker.created_at)
  return _internal_created_at();
}
inline void Worker::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Worker.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Worker::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Worker::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Worker.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Worker::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Worker::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Worker.created_at)
  return _internal_mutable_created_at();
}
inline void Worker::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Worker.created_at)
}

// -------------------------------------------------------------------

// AnnotationSummary

// uint32 total_assigned = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void AnnotationSummary::clear_total_assigned() {
  total_assigned_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnnotationSummary::_internal_total_assigned() const {
  return total_assigned_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnnotationSummary::total_assigned() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AnnotationSummary.total_assigned)
  return _internal_total_assigned();
}
inline void AnnotationSummary::_internal_set_total_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_assigned_ = value;
}
inline void AnnotationSummary::set_total_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_assigned(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AnnotationSummary.total_assigned)
}

// uint32 total_annotated = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void AnnotationSummary::clear_total_annotated() {
  total_annotated_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnnotationSummary::_internal_total_annotated() const {
  return total_annotated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnnotationSummary::total_annotated() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AnnotationSummary.total_annotated)
  return _internal_total_annotated();
}
inline void AnnotationSummary::_internal_set_total_annotated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_annotated_ = value;
}
inline void AnnotationSummary::set_total_annotated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_annotated(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AnnotationSummary.total_annotated)
}

// .google.protobuf.Timestamp last_annotated_at = 3;
inline bool AnnotationSummary::_internal_has_last_annotated_at() const {
  return this != internal_default_instance() && last_annotated_at_ != nullptr;
}
inline bool AnnotationSummary::has_last_annotated_at() const {
  return _internal_has_last_annotated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AnnotationSummary::_internal_last_annotated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_annotated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AnnotationSummary::last_annotated_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AnnotationSummary.last_annotated_at)
  return _internal_last_annotated_at();
}
inline void AnnotationSummary::unsafe_arena_set_allocated_last_annotated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* last_annotated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_annotated_at_);
  }
  last_annotated_at_ = last_annotated_at;
  if (last_annotated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.AnnotationSummary.last_annotated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AnnotationSummary::release_last_annotated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_annotated_at_;
  last_annotated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AnnotationSummary::unsafe_arena_release_last_annotated_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.AnnotationSummary.last_annotated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_annotated_at_;
  last_annotated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AnnotationSummary::_internal_mutable_last_annotated_at() {
  
  if (last_annotated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    last_annotated_at_ = p;
  }
  return last_annotated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AnnotationSummary::mutable_last_annotated_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AnnotationSummary.last_annotated_at)
  return _internal_mutable_last_annotated_at();
}
inline void AnnotationSummary::set_allocated_last_annotated_at(PROTOBUF_NAMESPACE_ID::Timestamp* last_annotated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_annotated_at_);
  }
  if (last_annotated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_annotated_at)->GetArena();
    if (message_arena != submessage_arena) {
      last_annotated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_annotated_at, submessage_arena);
    }
    
  } else {
    
  }
  last_annotated_at_ = last_annotated_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AnnotationSummary.last_annotated_at)
}

// -------------------------------------------------------------------

// Workflow

// string id = 1;
inline void Workflow::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Workflow::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Workflow.id)
  return _internal_id();
}
inline void Workflow::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Workflow.id)
}
inline std::string* Workflow::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Workflow.id)
  return _internal_mutable_id();
}
inline const std::string& Workflow::_internal_id() const {
  return id_.Get();
}
inline void Workflow::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Workflow::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Workflow.id)
}
inline void Workflow::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Workflow.id)
}
inline void Workflow::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Workflow.id)
}
inline std::string* Workflow::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Workflow::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Workflow.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Workflow::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Workflow.id)
}

// string app_id = 2;
inline void Workflow::clear_app_id() {
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Workflow::app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Workflow.app_id)
  return _internal_app_id();
}
inline void Workflow::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Workflow.app_id)
}
inline std::string* Workflow::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Workflow.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& Workflow::_internal_app_id() const {
  return app_id_.Get();
}
inline void Workflow::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Workflow::set_app_id(std::string&& value) {
  
  app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Workflow.app_id)
}
inline void Workflow::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Workflow.app_id)
}
inline void Workflow::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Workflow.app_id)
}
inline std::string* Workflow::_internal_mutable_app_id() {
  
  return app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Workflow::release_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Workflow.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Workflow::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Workflow.app_id)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool Workflow::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Workflow::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Workflow::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Workflow::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Workflow.created_at)
  return _internal_created_at();
}
inline void Workflow::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Workflow.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Workflow::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Workflow::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Workflow.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Workflow::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Workflow::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Workflow.created_at)
  return _internal_mutable_created_at();
}
inline void Workflow::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Workflow.created_at)
}

// repeated .clarifai.api.WorkflowNode nodes = 4;
inline int Workflow::_internal_nodes_size() const {
  return nodes_.size();
}
inline int Workflow::nodes_size() const {
  return _internal_nodes_size();
}
inline void Workflow::clear_nodes() {
  nodes_.Clear();
}
inline ::clarifai::api::WorkflowNode* Workflow::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Workflow.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowNode >*
Workflow::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Workflow.nodes)
  return &nodes_;
}
inline const ::clarifai::api::WorkflowNode& Workflow::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::clarifai::api::WorkflowNode& Workflow::nodes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Workflow.nodes)
  return _internal_nodes(index);
}
inline ::clarifai::api::WorkflowNode* Workflow::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::clarifai::api::WorkflowNode* Workflow::add_nodes() {
  // @@protoc_insertion_point(field_add:clarifai.api.Workflow.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowNode >&
Workflow::nodes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Workflow.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// WorkflowNode

// string id = 1;
inline void WorkflowNode::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WorkflowNode::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowNode.id)
  return _internal_id();
}
inline void WorkflowNode::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.WorkflowNode.id)
}
inline std::string* WorkflowNode::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowNode.id)
  return _internal_mutable_id();
}
inline const std::string& WorkflowNode::_internal_id() const {
  return id_.Get();
}
inline void WorkflowNode::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorkflowNode::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.WorkflowNode.id)
}
inline void WorkflowNode::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.WorkflowNode.id)
}
inline void WorkflowNode::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.WorkflowNode.id)
}
inline std::string* WorkflowNode::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorkflowNode::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowNode.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkflowNode::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowNode.id)
}

// .clarifai.api.Model model = 2;
inline bool WorkflowNode::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool WorkflowNode::has_model() const {
  return _internal_has_model();
}
inline void WorkflowNode::clear_model() {
  if (GetArena() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
inline const ::clarifai::api::Model& WorkflowNode::_internal_model() const {
  const ::clarifai::api::Model* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Model*>(
      &::clarifai::api::_Model_default_instance_);
}
inline const ::clarifai::api::Model& WorkflowNode::model() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowNode.model)
  return _internal_model();
}
inline void WorkflowNode::unsafe_arena_set_allocated_model(
    ::clarifai::api::Model* model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.WorkflowNode.model)
}
inline ::clarifai::api::Model* WorkflowNode::release_model() {
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Model* WorkflowNode::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowNode.model)
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::api::Model* WorkflowNode::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Model>(GetArena());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::api::Model* WorkflowNode::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowNode.model)
  return _internal_mutable_model();
}
inline void WorkflowNode::set_allocated_model(::clarifai::api::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete model_;
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model);
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowNode.model)
}

// repeated .clarifai.api.NodeInput node_inputs = 3;
inline int WorkflowNode::_internal_node_inputs_size() const {
  return node_inputs_.size();
}
inline int WorkflowNode::node_inputs_size() const {
  return _internal_node_inputs_size();
}
inline void WorkflowNode::clear_node_inputs() {
  node_inputs_.Clear();
}
inline ::clarifai::api::NodeInput* WorkflowNode::mutable_node_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowNode.node_inputs)
  return node_inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::NodeInput >*
WorkflowNode::mutable_node_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.WorkflowNode.node_inputs)
  return &node_inputs_;
}
inline const ::clarifai::api::NodeInput& WorkflowNode::_internal_node_inputs(int index) const {
  return node_inputs_.Get(index);
}
inline const ::clarifai::api::NodeInput& WorkflowNode::node_inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowNode.node_inputs)
  return _internal_node_inputs(index);
}
inline ::clarifai::api::NodeInput* WorkflowNode::_internal_add_node_inputs() {
  return node_inputs_.Add();
}
inline ::clarifai::api::NodeInput* WorkflowNode::add_node_inputs() {
  // @@protoc_insertion_point(field_add:clarifai.api.WorkflowNode.node_inputs)
  return _internal_add_node_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::NodeInput >&
WorkflowNode::node_inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.WorkflowNode.node_inputs)
  return node_inputs_;
}

// -------------------------------------------------------------------

// NodeInput

// string node_id = 1;
inline void NodeInput::clear_node_id() {
  node_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NodeInput::node_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.NodeInput.node_id)
  return _internal_node_id();
}
inline void NodeInput::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.NodeInput.node_id)
}
inline std::string* NodeInput::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.NodeInput.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& NodeInput::_internal_node_id() const {
  return node_id_.Get();
}
inline void NodeInput::_internal_set_node_id(const std::string& value) {
  
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NodeInput::set_node_id(std::string&& value) {
  
  node_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.NodeInput.node_id)
}
inline void NodeInput::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.NodeInput.node_id)
}
inline void NodeInput::set_node_id(const char* value,
    size_t size) {
  
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.NodeInput.node_id)
}
inline std::string* NodeInput::_internal_mutable_node_id() {
  
  return node_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NodeInput::release_node_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.NodeInput.node_id)
  return node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeInput::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.NodeInput.node_id)
}

// -------------------------------------------------------------------

// WorkflowResult

// string id = 1;
inline void WorkflowResult::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WorkflowResult::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowResult.id)
  return _internal_id();
}
inline void WorkflowResult::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.WorkflowResult.id)
}
inline std::string* WorkflowResult::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowResult.id)
  return _internal_mutable_id();
}
inline const std::string& WorkflowResult::_internal_id() const {
  return id_.Get();
}
inline void WorkflowResult::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorkflowResult::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.WorkflowResult.id)
}
inline void WorkflowResult::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.WorkflowResult.id)
}
inline void WorkflowResult::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.WorkflowResult.id)
}
inline std::string* WorkflowResult::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorkflowResult::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowResult.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkflowResult::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowResult.id)
}

// .clarifai.api.status.Status status = 2;
inline bool WorkflowResult::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool WorkflowResult::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& WorkflowResult::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& WorkflowResult::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowResult.status)
  return _internal_status();
}
inline void WorkflowResult::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.WorkflowResult.status)
}
inline ::clarifai::api::status::Status* WorkflowResult::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::status::Status* WorkflowResult::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowResult.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* WorkflowResult::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* WorkflowResult::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowResult.status)
  return _internal_mutable_status();
}
inline void WorkflowResult::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowResult.status)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool WorkflowResult::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool WorkflowResult::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& WorkflowResult::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& WorkflowResult::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowResult.created_at)
  return _internal_created_at();
}
inline void WorkflowResult::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.WorkflowResult.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowResult::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowResult::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowResult.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowResult::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowResult::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowResult.created_at)
  return _internal_mutable_created_at();
}
inline void WorkflowResult::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowResult.created_at)
}

// .clarifai.api.Model model = 4;
inline bool WorkflowResult::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool WorkflowResult::has_model() const {
  return _internal_has_model();
}
inline void WorkflowResult::clear_model() {
  if (GetArena() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
inline const ::clarifai::api::Model& WorkflowResult::_internal_model() const {
  const ::clarifai::api::Model* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Model*>(
      &::clarifai::api::_Model_default_instance_);
}
inline const ::clarifai::api::Model& WorkflowResult::model() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowResult.model)
  return _internal_model();
}
inline void WorkflowResult::unsafe_arena_set_allocated_model(
    ::clarifai::api::Model* model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.WorkflowResult.model)
}
inline ::clarifai::api::Model* WorkflowResult::release_model() {
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Model* WorkflowResult::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowResult.model)
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::api::Model* WorkflowResult::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Model>(GetArena());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::api::Model* WorkflowResult::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowResult.model)
  return _internal_mutable_model();
}
inline void WorkflowResult::set_allocated_model(::clarifai::api::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete model_;
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model);
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowResult.model)
}

// .clarifai.api.Input input = 5;
inline bool WorkflowResult::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool WorkflowResult::has_input() const {
  return _internal_has_input();
}
inline void WorkflowResult::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::clarifai::api::Input& WorkflowResult::_internal_input() const {
  const ::clarifai::api::Input* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Input*>(
      &::clarifai::api::_Input_default_instance_);
}
inline const ::clarifai::api::Input& WorkflowResult::input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowResult.input)
  return _internal_input();
}
inline void WorkflowResult::unsafe_arena_set_allocated_input(
    ::clarifai::api::Input* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.WorkflowResult.input)
}
inline ::clarifai::api::Input* WorkflowResult::release_input() {
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Input* WorkflowResult::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowResult.input)
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::clarifai::api::Input* WorkflowResult::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Input>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::clarifai::api::Input* WorkflowResult::mutable_input() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowResult.input)
  return _internal_mutable_input();
}
inline void WorkflowResult::set_allocated_input(::clarifai::api::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowResult.input)
}

// repeated .clarifai.api.Output outputs = 6;
inline int WorkflowResult::_internal_outputs_size() const {
  return outputs_.size();
}
inline int WorkflowResult::outputs_size() const {
  return _internal_outputs_size();
}
inline void WorkflowResult::clear_outputs() {
  outputs_.Clear();
}
inline ::clarifai::api::Output* WorkflowResult::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowResult.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >*
WorkflowResult::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.WorkflowResult.outputs)
  return &outputs_;
}
inline const ::clarifai::api::Output& WorkflowResult::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::clarifai::api::Output& WorkflowResult::outputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowResult.outputs)
  return _internal_outputs(index);
}
inline ::clarifai::api::Output* WorkflowResult::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::clarifai::api::Output* WorkflowResult::add_outputs() {
  // @@protoc_insertion_point(field_add:clarifai.api.WorkflowResult.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >&
WorkflowResult::outputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.WorkflowResult.outputs)
  return outputs_;
}

// -------------------------------------------------------------------

// AppDuplication

// string id = 1;
inline void AppDuplication::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppDuplication::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplication.id)
  return _internal_id();
}
inline void AppDuplication::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AppDuplication.id)
}
inline std::string* AppDuplication::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AppDuplication.id)
  return _internal_mutable_id();
}
inline const std::string& AppDuplication::_internal_id() const {
  return id_.Get();
}
inline void AppDuplication::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppDuplication::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.AppDuplication.id)
}
inline void AppDuplication::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.AppDuplication.id)
}
inline void AppDuplication::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.AppDuplication.id)
}
inline std::string* AppDuplication::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppDuplication::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.AppDuplication.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppDuplication::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AppDuplication.id)
}

// string new_app_id = 2;
inline void AppDuplication::clear_new_app_id() {
  new_app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppDuplication::new_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplication.new_app_id)
  return _internal_new_app_id();
}
inline void AppDuplication::set_new_app_id(const std::string& value) {
  _internal_set_new_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AppDuplication.new_app_id)
}
inline std::string* AppDuplication::mutable_new_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AppDuplication.new_app_id)
  return _internal_mutable_new_app_id();
}
inline const std::string& AppDuplication::_internal_new_app_id() const {
  return new_app_id_.Get();
}
inline void AppDuplication::_internal_set_new_app_id(const std::string& value) {
  
  new_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppDuplication::set_new_app_id(std::string&& value) {
  
  new_app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.AppDuplication.new_app_id)
}
inline void AppDuplication::set_new_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.AppDuplication.new_app_id)
}
inline void AppDuplication::set_new_app_id(const char* value,
    size_t size) {
  
  new_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.AppDuplication.new_app_id)
}
inline std::string* AppDuplication::_internal_mutable_new_app_id() {
  
  return new_app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppDuplication::release_new_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.AppDuplication.new_app_id)
  return new_app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppDuplication::set_allocated_new_app_id(std::string* new_app_id) {
  if (new_app_id != nullptr) {
    
  } else {
    
  }
  new_app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AppDuplication.new_app_id)
}

// string new_app_name = 3;
inline void AppDuplication::clear_new_app_name() {
  new_app_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppDuplication::new_app_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplication.new_app_name)
  return _internal_new_app_name();
}
inline void AppDuplication::set_new_app_name(const std::string& value) {
  _internal_set_new_app_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AppDuplication.new_app_name)
}
inline std::string* AppDuplication::mutable_new_app_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AppDuplication.new_app_name)
  return _internal_mutable_new_app_name();
}
inline const std::string& AppDuplication::_internal_new_app_name() const {
  return new_app_name_.Get();
}
inline void AppDuplication::_internal_set_new_app_name(const std::string& value) {
  
  new_app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppDuplication::set_new_app_name(std::string&& value) {
  
  new_app_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.AppDuplication.new_app_name)
}
inline void AppDuplication::set_new_app_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.AppDuplication.new_app_name)
}
inline void AppDuplication::set_new_app_name(const char* value,
    size_t size) {
  
  new_app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.AppDuplication.new_app_name)
}
inline std::string* AppDuplication::_internal_mutable_new_app_name() {
  
  return new_app_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppDuplication::release_new_app_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.AppDuplication.new_app_name)
  return new_app_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppDuplication::set_allocated_new_app_name(std::string* new_app_name) {
  if (new_app_name != nullptr) {
    
  } else {
    
  }
  new_app_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_app_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AppDuplication.new_app_name)
}

// .clarifai.api.status.Status status = 4;
inline bool AppDuplication::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AppDuplication::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& AppDuplication::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& AppDuplication::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplication.status)
  return _internal_status();
}
inline void AppDuplication::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.AppDuplication.status)
}
inline ::clarifai::api::status::Status* AppDuplication::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::status::Status* AppDuplication::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.AppDuplication.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* AppDuplication::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* AppDuplication::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AppDuplication.status)
  return _internal_mutable_status();
}
inline void AppDuplication::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AppDuplication.status)
}

// .google.protobuf.Timestamp created_at = 5;
inline bool AppDuplication::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool AppDuplication::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AppDuplication::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AppDuplication::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplication.created_at)
  return _internal_created_at();
}
inline void AppDuplication::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.AppDuplication.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AppDuplication::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AppDuplication::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.AppDuplication.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AppDuplication::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AppDuplication::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AppDuplication.created_at)
  return _internal_mutable_created_at();
}
inline void AppDuplication::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AppDuplication.created_at)
}

// .google.protobuf.Timestamp last_modified_at = 6;
inline bool AppDuplication::_internal_has_last_modified_at() const {
  return this != internal_default_instance() && last_modified_at_ != nullptr;
}
inline bool AppDuplication::has_last_modified_at() const {
  return _internal_has_last_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AppDuplication::_internal_last_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AppDuplication::last_modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplication.last_modified_at)
  return _internal_last_modified_at();
}
inline void AppDuplication::unsafe_arena_set_allocated_last_modified_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* last_modified_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_modified_at_);
  }
  last_modified_at_ = last_modified_at;
  if (last_modified_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.AppDuplication.last_modified_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AppDuplication::release_last_modified_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_modified_at_;
  last_modified_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AppDuplication::unsafe_arena_release_last_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.AppDuplication.last_modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_modified_at_;
  last_modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AppDuplication::_internal_mutable_last_modified_at() {
  
  if (last_modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    last_modified_at_ = p;
  }
  return last_modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AppDuplication::mutable_last_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AppDuplication.last_modified_at)
  return _internal_mutable_last_modified_at();
}
inline void AppDuplication::set_allocated_last_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* last_modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_modified_at_);
  }
  if (last_modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      last_modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_modified_at, submessage_arena);
    }
    
  } else {
    
  }
  last_modified_at_ = last_modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AppDuplication.last_modified_at)
}

// -------------------------------------------------------------------

// Collector

// string id = 1;
inline void Collector::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Collector::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collector.id)
  return _internal_id();
}
inline void Collector::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Collector.id)
}
inline std::string* Collector::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collector.id)
  return _internal_mutable_id();
}
inline const std::string& Collector::_internal_id() const {
  return id_.Get();
}
inline void Collector::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Collector::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Collector.id)
}
inline void Collector::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collector.id)
}
inline void Collector::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collector.id)
}
inline std::string* Collector::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Collector::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collector.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collector::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collector.id)
}

// string description = 2;
inline void Collector::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Collector::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collector.description)
  return _internal_description();
}
inline void Collector::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Collector.description)
}
inline std::string* Collector::mutable_description() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collector.description)
  return _internal_mutable_description();
}
inline const std::string& Collector::_internal_description() const {
  return description_.Get();
}
inline void Collector::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Collector::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Collector.description)
}
inline void Collector::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collector.description)
}
inline void Collector::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collector.description)
}
inline std::string* Collector::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Collector::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collector.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collector::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collector.description)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool Collector::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Collector::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collector::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collector::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collector.created_at)
  return _internal_created_at();
}
inline void Collector::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Collector.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collector::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collector::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collector.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collector::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collector::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collector.created_at)
  return _internal_mutable_created_at();
}
inline void Collector::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collector.created_at)
}

// string pre_queue_workflow_id = 4;
inline void Collector::clear_pre_queue_workflow_id() {
  pre_queue_workflow_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Collector::pre_queue_workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collector.pre_queue_workflow_id)
  return _internal_pre_queue_workflow_id();
}
inline void Collector::set_pre_queue_workflow_id(const std::string& value) {
  _internal_set_pre_queue_workflow_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Collector.pre_queue_workflow_id)
}
inline std::string* Collector::mutable_pre_queue_workflow_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collector.pre_queue_workflow_id)
  return _internal_mutable_pre_queue_workflow_id();
}
inline const std::string& Collector::_internal_pre_queue_workflow_id() const {
  return pre_queue_workflow_id_.Get();
}
inline void Collector::_internal_set_pre_queue_workflow_id(const std::string& value) {
  
  pre_queue_workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Collector::set_pre_queue_workflow_id(std::string&& value) {
  
  pre_queue_workflow_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Collector.pre_queue_workflow_id)
}
inline void Collector::set_pre_queue_workflow_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pre_queue_workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collector.pre_queue_workflow_id)
}
inline void Collector::set_pre_queue_workflow_id(const char* value,
    size_t size) {
  
  pre_queue_workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collector.pre_queue_workflow_id)
}
inline std::string* Collector::_internal_mutable_pre_queue_workflow_id() {
  
  return pre_queue_workflow_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Collector::release_pre_queue_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collector.pre_queue_workflow_id)
  return pre_queue_workflow_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collector::set_allocated_pre_queue_workflow_id(std::string* pre_queue_workflow_id) {
  if (pre_queue_workflow_id != nullptr) {
    
  } else {
    
  }
  pre_queue_workflow_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre_queue_workflow_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collector.pre_queue_workflow_id)
}

// string post_queue_workflow_id = 5;
inline void Collector::clear_post_queue_workflow_id() {
  post_queue_workflow_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Collector::post_queue_workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collector.post_queue_workflow_id)
  return _internal_post_queue_workflow_id();
}
inline void Collector::set_post_queue_workflow_id(const std::string& value) {
  _internal_set_post_queue_workflow_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Collector.post_queue_workflow_id)
}
inline std::string* Collector::mutable_post_queue_workflow_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collector.post_queue_workflow_id)
  return _internal_mutable_post_queue_workflow_id();
}
inline const std::string& Collector::_internal_post_queue_workflow_id() const {
  return post_queue_workflow_id_.Get();
}
inline void Collector::_internal_set_post_queue_workflow_id(const std::string& value) {
  
  post_queue_workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Collector::set_post_queue_workflow_id(std::string&& value) {
  
  post_queue_workflow_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Collector.post_queue_workflow_id)
}
inline void Collector::set_post_queue_workflow_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_queue_workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collector.post_queue_workflow_id)
}
inline void Collector::set_post_queue_workflow_id(const char* value,
    size_t size) {
  
  post_queue_workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collector.post_queue_workflow_id)
}
inline std::string* Collector::_internal_mutable_post_queue_workflow_id() {
  
  return post_queue_workflow_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Collector::release_post_queue_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collector.post_queue_workflow_id)
  return post_queue_workflow_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collector::set_allocated_post_queue_workflow_id(std::string* post_queue_workflow_id) {
  if (post_queue_workflow_id != nullptr) {
    
  } else {
    
  }
  post_queue_workflow_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_queue_workflow_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collector.post_queue_workflow_id)
}

// .clarifai.api.CollectorSource collector_source = 6;
inline bool Collector::_internal_has_collector_source() const {
  return this != internal_default_instance() && collector_source_ != nullptr;
}
inline bool Collector::has_collector_source() const {
  return _internal_has_collector_source();
}
inline void Collector::clear_collector_source() {
  if (GetArena() == nullptr && collector_source_ != nullptr) {
    delete collector_source_;
  }
  collector_source_ = nullptr;
}
inline const ::clarifai::api::CollectorSource& Collector::_internal_collector_source() const {
  const ::clarifai::api::CollectorSource* p = collector_source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::CollectorSource*>(
      &::clarifai::api::_CollectorSource_default_instance_);
}
inline const ::clarifai::api::CollectorSource& Collector::collector_source() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collector.collector_source)
  return _internal_collector_source();
}
inline void Collector::unsafe_arena_set_allocated_collector_source(
    ::clarifai::api::CollectorSource* collector_source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collector_source_);
  }
  collector_source_ = collector_source;
  if (collector_source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Collector.collector_source)
}
inline ::clarifai::api::CollectorSource* Collector::release_collector_source() {
  
  ::clarifai::api::CollectorSource* temp = collector_source_;
  collector_source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::CollectorSource* Collector::unsafe_arena_release_collector_source() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collector.collector_source)
  
  ::clarifai::api::CollectorSource* temp = collector_source_;
  collector_source_ = nullptr;
  return temp;
}
inline ::clarifai::api::CollectorSource* Collector::_internal_mutable_collector_source() {
  
  if (collector_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::CollectorSource>(GetArena());
    collector_source_ = p;
  }
  return collector_source_;
}
inline ::clarifai::api::CollectorSource* Collector::mutable_collector_source() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collector.collector_source)
  return _internal_mutable_collector_source();
}
inline void Collector::set_allocated_collector_source(::clarifai::api::CollectorSource* collector_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete collector_source_;
  }
  if (collector_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(collector_source);
    if (message_arena != submessage_arena) {
      collector_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collector_source, submessage_arena);
    }
    
  } else {
    
  }
  collector_source_ = collector_source;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collector.collector_source)
}

// .clarifai.api.status.Status status = 7;
inline bool Collector::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Collector::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& Collector::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& Collector::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collector.status)
  return _internal_status();
}
inline void Collector::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.Collector.status)
}
inline ::clarifai::api::status::Status* Collector::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::status::Status* Collector::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collector.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* Collector::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* Collector::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collector.status)
  return _internal_mutable_status();
}
inline void Collector::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collector.status)
}

// -------------------------------------------------------------------

// CollectorSource

// .clarifai.api.APIPostModelOutputsCollectorSource api_post_model_outputs_collector_source = 2;
inline bool CollectorSource::_internal_has_api_post_model_outputs_collector_source() const {
  return this != internal_default_instance() && api_post_model_outputs_collector_source_ != nullptr;
}
inline bool CollectorSource::has_api_post_model_outputs_collector_source() const {
  return _internal_has_api_post_model_outputs_collector_source();
}
inline void CollectorSource::clear_api_post_model_outputs_collector_source() {
  if (GetArena() == nullptr && api_post_model_outputs_collector_source_ != nullptr) {
    delete api_post_model_outputs_collector_source_;
  }
  api_post_model_outputs_collector_source_ = nullptr;
}
inline const ::clarifai::api::APIPostModelOutputsCollectorSource& CollectorSource::_internal_api_post_model_outputs_collector_source() const {
  const ::clarifai::api::APIPostModelOutputsCollectorSource* p = api_post_model_outputs_collector_source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::APIPostModelOutputsCollectorSource*>(
      &::clarifai::api::_APIPostModelOutputsCollectorSource_default_instance_);
}
inline const ::clarifai::api::APIPostModelOutputsCollectorSource& CollectorSource::api_post_model_outputs_collector_source() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CollectorSource.api_post_model_outputs_collector_source)
  return _internal_api_post_model_outputs_collector_source();
}
inline void CollectorSource::unsafe_arena_set_allocated_api_post_model_outputs_collector_source(
    ::clarifai::api::APIPostModelOutputsCollectorSource* api_post_model_outputs_collector_source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(api_post_model_outputs_collector_source_);
  }
  api_post_model_outputs_collector_source_ = api_post_model_outputs_collector_source;
  if (api_post_model_outputs_collector_source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.CollectorSource.api_post_model_outputs_collector_source)
}
inline ::clarifai::api::APIPostModelOutputsCollectorSource* CollectorSource::release_api_post_model_outputs_collector_source() {
  
  ::clarifai::api::APIPostModelOutputsCollectorSource* temp = api_post_model_outputs_collector_source_;
  api_post_model_outputs_collector_source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::APIPostModelOutputsCollectorSource* CollectorSource::unsafe_arena_release_api_post_model_outputs_collector_source() {
  // @@protoc_insertion_point(field_release:clarifai.api.CollectorSource.api_post_model_outputs_collector_source)
  
  ::clarifai::api::APIPostModelOutputsCollectorSource* temp = api_post_model_outputs_collector_source_;
  api_post_model_outputs_collector_source_ = nullptr;
  return temp;
}
inline ::clarifai::api::APIPostModelOutputsCollectorSource* CollectorSource::_internal_mutable_api_post_model_outputs_collector_source() {
  
  if (api_post_model_outputs_collector_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::APIPostModelOutputsCollectorSource>(GetArena());
    api_post_model_outputs_collector_source_ = p;
  }
  return api_post_model_outputs_collector_source_;
}
inline ::clarifai::api::APIPostModelOutputsCollectorSource* CollectorSource::mutable_api_post_model_outputs_collector_source() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CollectorSource.api_post_model_outputs_collector_source)
  return _internal_mutable_api_post_model_outputs_collector_source();
}
inline void CollectorSource::set_allocated_api_post_model_outputs_collector_source(::clarifai::api::APIPostModelOutputsCollectorSource* api_post_model_outputs_collector_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete api_post_model_outputs_collector_source_;
  }
  if (api_post_model_outputs_collector_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(api_post_model_outputs_collector_source);
    if (message_arena != submessage_arena) {
      api_post_model_outputs_collector_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, api_post_model_outputs_collector_source, submessage_arena);
    }
    
  } else {
    
  }
  api_post_model_outputs_collector_source_ = api_post_model_outputs_collector_source;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CollectorSource.api_post_model_outputs_collector_source)
}

// -------------------------------------------------------------------

// APIPostModelOutputsCollectorSource

// string model_user_id = 1;
inline void APIPostModelOutputsCollectorSource::clear_model_user_id() {
  model_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& APIPostModelOutputsCollectorSource::model_user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
  return _internal_model_user_id();
}
inline void APIPostModelOutputsCollectorSource::set_model_user_id(const std::string& value) {
  _internal_set_model_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
}
inline std::string* APIPostModelOutputsCollectorSource::mutable_model_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
  return _internal_mutable_model_user_id();
}
inline const std::string& APIPostModelOutputsCollectorSource::_internal_model_user_id() const {
  return model_user_id_.Get();
}
inline void APIPostModelOutputsCollectorSource::_internal_set_model_user_id(const std::string& value) {
  
  model_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void APIPostModelOutputsCollectorSource::set_model_user_id(std::string&& value) {
  
  model_user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_user_id(const char* value,
    size_t size) {
  
  model_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
}
inline std::string* APIPostModelOutputsCollectorSource::_internal_mutable_model_user_id() {
  
  return model_user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* APIPostModelOutputsCollectorSource::release_model_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
  return model_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void APIPostModelOutputsCollectorSource::set_allocated_model_user_id(std::string* model_user_id) {
  if (model_user_id != nullptr) {
    
  } else {
    
  }
  model_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
}

// string model_app_id = 2;
inline void APIPostModelOutputsCollectorSource::clear_model_app_id() {
  model_app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& APIPostModelOutputsCollectorSource::model_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
  return _internal_model_app_id();
}
inline void APIPostModelOutputsCollectorSource::set_model_app_id(const std::string& value) {
  _internal_set_model_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
}
inline std::string* APIPostModelOutputsCollectorSource::mutable_model_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
  return _internal_mutable_model_app_id();
}
inline const std::string& APIPostModelOutputsCollectorSource::_internal_model_app_id() const {
  return model_app_id_.Get();
}
inline void APIPostModelOutputsCollectorSource::_internal_set_model_app_id(const std::string& value) {
  
  model_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void APIPostModelOutputsCollectorSource::set_model_app_id(std::string&& value) {
  
  model_app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_app_id(const char* value,
    size_t size) {
  
  model_app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
}
inline std::string* APIPostModelOutputsCollectorSource::_internal_mutable_model_app_id() {
  
  return model_app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* APIPostModelOutputsCollectorSource::release_model_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
  return model_app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void APIPostModelOutputsCollectorSource::set_allocated_model_app_id(std::string* model_app_id) {
  if (model_app_id != nullptr) {
    
  } else {
    
  }
  model_app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
}

// string model_id = 3;
inline void APIPostModelOutputsCollectorSource::clear_model_id() {
  model_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& APIPostModelOutputsCollectorSource::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
  return _internal_model_id();
}
inline void APIPostModelOutputsCollectorSource::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
}
inline std::string* APIPostModelOutputsCollectorSource::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& APIPostModelOutputsCollectorSource::_internal_model_id() const {
  return model_id_.Get();
}
inline void APIPostModelOutputsCollectorSource::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void APIPostModelOutputsCollectorSource::set_model_id(std::string&& value) {
  
  model_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_id(const char* value,
    size_t size) {
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
}
inline std::string* APIPostModelOutputsCollectorSource::_internal_mutable_model_id() {
  
  return model_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* APIPostModelOutputsCollectorSource::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void APIPostModelOutputsCollectorSource::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
}

// string model_version_id = 4;
inline void APIPostModelOutputsCollectorSource::clear_model_version_id() {
  model_version_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& APIPostModelOutputsCollectorSource::model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
  return _internal_model_version_id();
}
inline void APIPostModelOutputsCollectorSource::set_model_version_id(const std::string& value) {
  _internal_set_model_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
}
inline std::string* APIPostModelOutputsCollectorSource::mutable_model_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
  return _internal_mutable_model_version_id();
}
inline const std::string& APIPostModelOutputsCollectorSource::_internal_model_version_id() const {
  return model_version_id_.Get();
}
inline void APIPostModelOutputsCollectorSource::_internal_set_model_version_id(const std::string& value) {
  
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void APIPostModelOutputsCollectorSource::set_model_version_id(std::string&& value) {
  
  model_version_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_version_id(const char* value,
    size_t size) {
  
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
}
inline std::string* APIPostModelOutputsCollectorSource::_internal_mutable_model_version_id() {
  
  return model_version_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* APIPostModelOutputsCollectorSource::release_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
  return model_version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void APIPostModelOutputsCollectorSource::set_allocated_model_version_id(std::string* model_version_id) {
  if (model_version_id != nullptr) {
    
  } else {
    
  }
  model_version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
}

// string post_inputs_key_id = 5;
inline void APIPostModelOutputsCollectorSource::clear_post_inputs_key_id() {
  post_inputs_key_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& APIPostModelOutputsCollectorSource::post_inputs_key_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
  return _internal_post_inputs_key_id();
}
inline void APIPostModelOutputsCollectorSource::set_post_inputs_key_id(const std::string& value) {
  _internal_set_post_inputs_key_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
}
inline std::string* APIPostModelOutputsCollectorSource::mutable_post_inputs_key_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
  return _internal_mutable_post_inputs_key_id();
}
inline const std::string& APIPostModelOutputsCollectorSource::_internal_post_inputs_key_id() const {
  return post_inputs_key_id_.Get();
}
inline void APIPostModelOutputsCollectorSource::_internal_set_post_inputs_key_id(const std::string& value) {
  
  post_inputs_key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void APIPostModelOutputsCollectorSource::set_post_inputs_key_id(std::string&& value) {
  
  post_inputs_key_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
}
inline void APIPostModelOutputsCollectorSource::set_post_inputs_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_inputs_key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
}
inline void APIPostModelOutputsCollectorSource::set_post_inputs_key_id(const char* value,
    size_t size) {
  
  post_inputs_key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
}
inline std::string* APIPostModelOutputsCollectorSource::_internal_mutable_post_inputs_key_id() {
  
  return post_inputs_key_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* APIPostModelOutputsCollectorSource::release_post_inputs_key_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
  return post_inputs_key_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void APIPostModelOutputsCollectorSource::set_allocated_post_inputs_key_id(std::string* post_inputs_key_id) {
  if (post_inputs_key_id != nullptr) {
    
  } else {
    
  }
  post_inputs_key_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_inputs_key_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
}

// string caller_user_id = 6 [(.clarifai.auth.util.cl_private_field) = true];
inline void APIPostModelOutputsCollectorSource::clear_caller_user_id() {
  caller_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& APIPostModelOutputsCollectorSource::caller_user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.APIPostModelOutputsCollectorSource.caller_user_id)
  return _internal_caller_user_id();
}
inline void APIPostModelOutputsCollectorSource::set_caller_user_id(const std::string& value) {
  _internal_set_caller_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.APIPostModelOutputsCollectorSource.caller_user_id)
}
inline std::string* APIPostModelOutputsCollectorSource::mutable_caller_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.APIPostModelOutputsCollectorSource.caller_user_id)
  return _internal_mutable_caller_user_id();
}
inline const std::string& APIPostModelOutputsCollectorSource::_internal_caller_user_id() const {
  return caller_user_id_.Get();
}
inline void APIPostModelOutputsCollectorSource::_internal_set_caller_user_id(const std::string& value) {
  
  caller_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void APIPostModelOutputsCollectorSource::set_caller_user_id(std::string&& value) {
  
  caller_user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.APIPostModelOutputsCollectorSource.caller_user_id)
}
inline void APIPostModelOutputsCollectorSource::set_caller_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  caller_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.api.APIPostModelOutputsCollectorSource.caller_user_id)
}
inline void APIPostModelOutputsCollectorSource::set_caller_user_id(const char* value,
    size_t size) {
  
  caller_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.APIPostModelOutputsCollectorSource.caller_user_id)
}
inline std::string* APIPostModelOutputsCollectorSource::_internal_mutable_caller_user_id() {
  
  return caller_user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* APIPostModelOutputsCollectorSource::release_caller_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.APIPostModelOutputsCollectorSource.caller_user_id)
  return caller_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void APIPostModelOutputsCollectorSource::set_allocated_caller_user_id(std::string* caller_user_id) {
  if (caller_user_id != nullptr) {
    
  } else {
    
  }
  caller_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caller_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.APIPostModelOutputsCollectorSource.caller_user_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace clarifai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::clarifai::api::ExpirationAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::ExpirationAction>() {
  return ::clarifai::api::ExpirationAction_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::LicenseScope> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::LicenseScope>() {
  return ::clarifai::api::LicenseScope_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::ValueComparator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::ValueComparator>() {
  return ::clarifai::api::ValueComparator_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::APIEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::APIEventType>() {
  return ::clarifai::api::APIEventType_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::UsageIntervalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::UsageIntervalType>() {
  return ::clarifai::api::UsageIntervalType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fapi_2fresources_2eproto
