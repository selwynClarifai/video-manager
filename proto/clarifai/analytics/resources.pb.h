// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/analytics/resources.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fanalytics_2fresources_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fanalytics_2fresources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fanalytics_2fresources_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fclarifai_2fanalytics_2fresources_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto;
namespace clarifai {
namespace analytics {
class Analytics;
class AnalyticsDefaultTypeInternal;
extern AnalyticsDefaultTypeInternal _Analytics_default_instance_;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventSummary;
class EventSummaryDefaultTypeInternal;
extern EventSummaryDefaultTypeInternal _EventSummary_default_instance_;
class EventsCollection;
class EventsCollectionDefaultTypeInternal;
extern EventsCollectionDefaultTypeInternal _EventsCollection_default_instance_;
class HostAppInfo;
class HostAppInfoDefaultTypeInternal;
extern HostAppInfoDefaultTypeInternal _HostAppInfo_default_instance_;
class OperatingSystem;
class OperatingSystemDefaultTypeInternal;
extern OperatingSystemDefaultTypeInternal _OperatingSystem_default_instance_;
class SDK;
class SDKDefaultTypeInternal;
extern SDKDefaultTypeInternal _SDK_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
}  // namespace analytics
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> ::clarifai::analytics::Analytics* Arena::CreateMaybeMessage<::clarifai::analytics::Analytics>(Arena*);
template<> ::clarifai::analytics::DeviceInfo* Arena::CreateMaybeMessage<::clarifai::analytics::DeviceInfo>(Arena*);
template<> ::clarifai::analytics::Event* Arena::CreateMaybeMessage<::clarifai::analytics::Event>(Arena*);
template<> ::clarifai::analytics::EventSummary* Arena::CreateMaybeMessage<::clarifai::analytics::EventSummary>(Arena*);
template<> ::clarifai::analytics::EventsCollection* Arena::CreateMaybeMessage<::clarifai::analytics::EventsCollection>(Arena*);
template<> ::clarifai::analytics::HostAppInfo* Arena::CreateMaybeMessage<::clarifai::analytics::HostAppInfo>(Arena*);
template<> ::clarifai::analytics::OperatingSystem* Arena::CreateMaybeMessage<::clarifai::analytics::OperatingSystem>(Arena*);
template<> ::clarifai::analytics::SDK* Arena::CreateMaybeMessage<::clarifai::analytics::SDK>(Arena*);
template<> ::clarifai::analytics::State* Arena::CreateMaybeMessage<::clarifai::analytics::State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clarifai {
namespace analytics {

enum AnalyticsEventType : int {
  UNKNOWN_EVENT_TYPE = 0,
  SAVE_MODEL = 1,
  TRAIN = 2,
  PREDICT = 3,
  SAVE_CONCEPT = 4,
  DELETE_CONCEPT = 5,
  SAVE_INPUT = 6,
  LOAD_INPUT = 7,
  VISUAL_SIMILARITY = 8,
  LOAD_CONCEPT = 9,
  DELETE_INPUT = 10,
  DELETE_MODEL = 11,
  LOAD_MODEL = 12,
  WARNING = 13,
  ERROR = 14,
  LAUNCH = 15,
  FOREGROUND = 16,
  BACKGROUND = 17,
  TERMINATION = 18,
  AUTHENTICATION_GRANTED = 19,
  AUTHENTICATION_DENIED = 20,
  MODEL_DOWNLOAD = 21,
  AnalyticsEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AnalyticsEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AnalyticsEventType_IsValid(int value);
constexpr AnalyticsEventType AnalyticsEventType_MIN = UNKNOWN_EVENT_TYPE;
constexpr AnalyticsEventType AnalyticsEventType_MAX = MODEL_DOWNLOAD;
constexpr int AnalyticsEventType_ARRAYSIZE = AnalyticsEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnalyticsEventType_descriptor();
template<typename T>
inline const std::string& AnalyticsEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnalyticsEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnalyticsEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnalyticsEventType_descriptor(), enum_t_value);
}
inline bool AnalyticsEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnalyticsEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnalyticsEventType>(
    AnalyticsEventType_descriptor(), name, value);
}
enum NetworkConnectivity : int {
  NO_CONNECTIVITY = 0,
  WIFI = 1,
  CELLULAR = 2,
  WIRED = 3,
  NetworkConnectivity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NetworkConnectivity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NetworkConnectivity_IsValid(int value);
constexpr NetworkConnectivity NetworkConnectivity_MIN = NO_CONNECTIVITY;
constexpr NetworkConnectivity NetworkConnectivity_MAX = WIRED;
constexpr int NetworkConnectivity_ARRAYSIZE = NetworkConnectivity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkConnectivity_descriptor();
template<typename T>
inline const std::string& NetworkConnectivity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkConnectivity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkConnectivity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkConnectivity_descriptor(), enum_t_value);
}
inline bool NetworkConnectivity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetworkConnectivity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkConnectivity>(
    NetworkConnectivity_descriptor(), name, value);
}
enum RunningMode : int {
  UNKNOWN_RUNNING_MODE = 0,
  LOCAL = 1,
  REMOTE = 2,
  RunningMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RunningMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RunningMode_IsValid(int value);
constexpr RunningMode RunningMode_MIN = UNKNOWN_RUNNING_MODE;
constexpr RunningMode RunningMode_MAX = REMOTE;
constexpr int RunningMode_ARRAYSIZE = RunningMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RunningMode_descriptor();
template<typename T>
inline const std::string& RunningMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RunningMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RunningMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RunningMode_descriptor(), enum_t_value);
}
inline bool RunningMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RunningMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RunningMode>(
    RunningMode_descriptor(), name, value);
}
enum RunningEnvironment : int {
  UNKNOWN_RUNNING_ENVIRONMENT = 0,
  DEVELOPMENT = 1,
  PRODUCTION = 2,
  RunningEnvironment_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RunningEnvironment_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RunningEnvironment_IsValid(int value);
constexpr RunningEnvironment RunningEnvironment_MIN = UNKNOWN_RUNNING_ENVIRONMENT;
constexpr RunningEnvironment RunningEnvironment_MAX = PRODUCTION;
constexpr int RunningEnvironment_ARRAYSIZE = RunningEnvironment_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RunningEnvironment_descriptor();
template<typename T>
inline const std::string& RunningEnvironment_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RunningEnvironment>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RunningEnvironment_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RunningEnvironment_descriptor(), enum_t_value);
}
inline bool RunningEnvironment_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RunningEnvironment* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RunningEnvironment>(
    RunningEnvironment_descriptor(), name, value);
}
// ===================================================================

class DeviceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.analytics.DeviceInfo) */ {
 public:
  inline DeviceInfo() : DeviceInfo(nullptr) {}
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(nullptr);
  }

  DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.analytics.DeviceInfo";
  }
  protected:
  explicit DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrandFieldNumber = 1,
    kModelFieldNumber = 2,
  };
  // string brand = 1;
  void clear_brand();
  const std::string& brand() const;
  void set_brand(const std::string& value);
  void set_brand(std::string&& value);
  void set_brand(const char* value);
  void set_brand(const char* value, size_t size);
  std::string* mutable_brand();
  std::string* release_brand();
  void set_allocated_brand(std::string* brand);
  private:
  const std::string& _internal_brand() const;
  void _internal_set_brand(const std::string& value);
  std::string* _internal_mutable_brand();
  public:

  // string model = 2;
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.analytics.DeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fanalytics_2fresources_2eproto;
};
// -------------------------------------------------------------------

class EventSummary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.analytics.EventSummary) */ {
 public:
  inline EventSummary() : EventSummary(nullptr) {}
  virtual ~EventSummary();

  EventSummary(const EventSummary& from);
  EventSummary(EventSummary&& from) noexcept
    : EventSummary() {
    *this = ::std::move(from);
  }

  inline EventSummary& operator=(const EventSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSummary& operator=(EventSummary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventSummary* internal_default_instance() {
    return reinterpret_cast<const EventSummary*>(
               &_EventSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EventSummary& a, EventSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(EventSummary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventSummary* New() const final {
    return CreateMaybeMessage<EventSummary>(nullptr);
  }

  EventSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventSummary& from);
  void MergeFrom(const EventSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.analytics.EventSummary";
  }
  protected:
  explicit EventSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kModelIdFieldNumber = 6,
    kModelVersionIdFieldNumber = 7,
    kCountFieldNumber = 1,
    kEventTypeFieldNumber = 3,
    kNetworkConnectivityFieldNumber = 4,
    kRunningModeFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string model_id = 6;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string model_version_id = 7;
  void clear_model_version_id();
  const std::string& model_version_id() const;
  void set_model_version_id(const std::string& value);
  void set_model_version_id(std::string&& value);
  void set_model_version_id(const char* value);
  void set_model_version_id(const char* value, size_t size);
  std::string* mutable_model_version_id();
  std::string* release_model_version_id();
  void set_allocated_model_version_id(std::string* model_version_id);
  private:
  const std::string& _internal_model_version_id() const;
  void _internal_set_model_version_id(const std::string& value);
  std::string* _internal_mutable_model_version_id();
  public:

  // uint32 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .clarifai.analytics.AnalyticsEventType event_type = 3;
  void clear_event_type();
  ::clarifai::analytics::AnalyticsEventType event_type() const;
  void set_event_type(::clarifai::analytics::AnalyticsEventType value);
  private:
  ::clarifai::analytics::AnalyticsEventType _internal_event_type() const;
  void _internal_set_event_type(::clarifai::analytics::AnalyticsEventType value);
  public:

  // .clarifai.analytics.NetworkConnectivity network_connectivity = 4;
  void clear_network_connectivity();
  ::clarifai::analytics::NetworkConnectivity network_connectivity() const;
  void set_network_connectivity(::clarifai::analytics::NetworkConnectivity value);
  private:
  ::clarifai::analytics::NetworkConnectivity _internal_network_connectivity() const;
  void _internal_set_network_connectivity(::clarifai::analytics::NetworkConnectivity value);
  public:

  // .clarifai.analytics.RunningMode running_mode = 5;
  void clear_running_mode();
  ::clarifai::analytics::RunningMode running_mode() const;
  void set_running_mode(::clarifai::analytics::RunningMode value);
  private:
  ::clarifai::analytics::RunningMode _internal_running_mode() const;
  void _internal_set_running_mode(::clarifai::analytics::RunningMode value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.analytics.EventSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  int event_type_;
  int network_connectivity_;
  int running_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fanalytics_2fresources_2eproto;
};
// -------------------------------------------------------------------

class EventsCollection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.analytics.EventsCollection) */ {
 public:
  inline EventsCollection() : EventsCollection(nullptr) {}
  virtual ~EventsCollection();

  EventsCollection(const EventsCollection& from);
  EventsCollection(EventsCollection&& from) noexcept
    : EventsCollection() {
    *this = ::std::move(from);
  }

  inline EventsCollection& operator=(const EventsCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventsCollection& operator=(EventsCollection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventsCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventsCollection* internal_default_instance() {
    return reinterpret_cast<const EventsCollection*>(
               &_EventsCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EventsCollection& a, EventsCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(EventsCollection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventsCollection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventsCollection* New() const final {
    return CreateMaybeMessage<EventsCollection>(nullptr);
  }

  EventsCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventsCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventsCollection& from);
  void MergeFrom(const EventsCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventsCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.analytics.EventsCollection";
  }
  protected:
  explicit EventsCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventSummaryFieldNumber = 3,
    kTimeRangeBeginFieldNumber = 1,
    kTimeRangeEndFieldNumber = 2,
  };
  // repeated .clarifai.analytics.EventSummary event_summary = 3;
  int event_summary_size() const;
  private:
  int _internal_event_summary_size() const;
  public:
  void clear_event_summary();
  ::clarifai::analytics::EventSummary* mutable_event_summary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::analytics::EventSummary >*
      mutable_event_summary();
  private:
  const ::clarifai::analytics::EventSummary& _internal_event_summary(int index) const;
  ::clarifai::analytics::EventSummary* _internal_add_event_summary();
  public:
  const ::clarifai::analytics::EventSummary& event_summary(int index) const;
  ::clarifai::analytics::EventSummary* add_event_summary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::analytics::EventSummary >&
      event_summary() const;

  // .google.protobuf.Timestamp time_range_begin = 1;
  bool has_time_range_begin() const;
  private:
  bool _internal_has_time_range_begin() const;
  public:
  void clear_time_range_begin();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time_range_begin() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time_range_begin();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_range_begin();
  void set_allocated_time_range_begin(PROTOBUF_NAMESPACE_ID::Timestamp* time_range_begin);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_range_begin() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_range_begin();
  public:
  void unsafe_arena_set_allocated_time_range_begin(
      PROTOBUF_NAMESPACE_ID::Timestamp* time_range_begin);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time_range_begin();

  // .google.protobuf.Timestamp time_range_end = 2;
  bool has_time_range_end() const;
  private:
  bool _internal_has_time_range_end() const;
  public:
  void clear_time_range_end();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time_range_end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time_range_end();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_range_end();
  void set_allocated_time_range_end(PROTOBUF_NAMESPACE_ID::Timestamp* time_range_end);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_range_end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_range_end();
  public:
  void unsafe_arena_set_allocated_time_range_end(
      PROTOBUF_NAMESPACE_ID::Timestamp* time_range_end);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time_range_end();

  // @@protoc_insertion_point(class_scope:clarifai.analytics.EventsCollection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::analytics::EventSummary > event_summary_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_range_begin_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_range_end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fanalytics_2fresources_2eproto;
};
// -------------------------------------------------------------------

class HostAppInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.analytics.HostAppInfo) */ {
 public:
  inline HostAppInfo() : HostAppInfo(nullptr) {}
  virtual ~HostAppInfo();

  HostAppInfo(const HostAppInfo& from);
  HostAppInfo(HostAppInfo&& from) noexcept
    : HostAppInfo() {
    *this = ::std::move(from);
  }

  inline HostAppInfo& operator=(const HostAppInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostAppInfo& operator=(HostAppInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostAppInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostAppInfo* internal_default_instance() {
    return reinterpret_cast<const HostAppInfo*>(
               &_HostAppInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HostAppInfo& a, HostAppInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HostAppInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostAppInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostAppInfo* New() const final {
    return CreateMaybeMessage<HostAppInfo>(nullptr);
  }

  HostAppInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostAppInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostAppInfo& from);
  void MergeFrom(const HostAppInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostAppInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.analytics.HostAppInfo";
  }
  protected:
  explicit HostAppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildNumberFieldNumber = 1,
    kApiKeyFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // string build_number = 1;
  void clear_build_number();
  const std::string& build_number() const;
  void set_build_number(const std::string& value);
  void set_build_number(std::string&& value);
  void set_build_number(const char* value);
  void set_build_number(const char* value, size_t size);
  std::string* mutable_build_number();
  std::string* release_build_number();
  void set_allocated_build_number(std::string* build_number);
  private:
  const std::string& _internal_build_number() const;
  void _internal_set_build_number(const std::string& value);
  std::string* _internal_mutable_build_number();
  public:

  // string api_key = 2;
  void clear_api_key();
  const std::string& api_key() const;
  void set_api_key(const std::string& value);
  void set_api_key(std::string&& value);
  void set_api_key(const char* value);
  void set_api_key(const char* value, size_t size);
  std::string* mutable_api_key();
  std::string* release_api_key();
  void set_allocated_api_key(std::string* api_key);
  private:
  const std::string& _internal_api_key() const;
  void _internal_set_api_key(const std::string& value);
  std::string* _internal_mutable_api_key();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.analytics.HostAppInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fanalytics_2fresources_2eproto;
};
// -------------------------------------------------------------------

class OperatingSystem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.analytics.OperatingSystem) */ {
 public:
  inline OperatingSystem() : OperatingSystem(nullptr) {}
  virtual ~OperatingSystem();

  OperatingSystem(const OperatingSystem& from);
  OperatingSystem(OperatingSystem&& from) noexcept
    : OperatingSystem() {
    *this = ::std::move(from);
  }

  inline OperatingSystem& operator=(const OperatingSystem& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperatingSystem& operator=(OperatingSystem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperatingSystem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperatingSystem* internal_default_instance() {
    return reinterpret_cast<const OperatingSystem*>(
               &_OperatingSystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OperatingSystem& a, OperatingSystem& b) {
    a.Swap(&b);
  }
  inline void Swap(OperatingSystem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperatingSystem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperatingSystem* New() const final {
    return CreateMaybeMessage<OperatingSystem>(nullptr);
  }

  OperatingSystem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperatingSystem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperatingSystem& from);
  void MergeFrom(const OperatingSystem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperatingSystem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.analytics.OperatingSystem";
  }
  protected:
  explicit OperatingSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.analytics.OperatingSystem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fanalytics_2fresources_2eproto;
};
// -------------------------------------------------------------------

class SDK PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.analytics.SDK) */ {
 public:
  inline SDK() : SDK(nullptr) {}
  virtual ~SDK();

  SDK(const SDK& from);
  SDK(SDK&& from) noexcept
    : SDK() {
    *this = ::std::move(from);
  }

  inline SDK& operator=(const SDK& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDK& operator=(SDK&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDK* internal_default_instance() {
    return reinterpret_cast<const SDK*>(
               &_SDK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SDK& a, SDK& b) {
    a.Swap(&b);
  }
  inline void Swap(SDK* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SDK* New() const final {
    return CreateMaybeMessage<SDK>(nullptr);
  }

  SDK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDK& from);
  void MergeFrom(const SDK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.analytics.SDK";
  }
  protected:
  explicit SDK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kBuildFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string build = 2;
  void clear_build();
  const std::string& build() const;
  void set_build(const std::string& value);
  void set_build(std::string&& value);
  void set_build(const char* value);
  void set_build(const char* value, size_t size);
  std::string* mutable_build();
  std::string* release_build();
  void set_allocated_build(std::string* build);
  private:
  const std::string& _internal_build() const;
  void _internal_set_build(const std::string& value);
  std::string* _internal_mutable_build();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.analytics.SDK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fanalytics_2fresources_2eproto;
};
// -------------------------------------------------------------------

class State PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.analytics.State) */ {
 public:
  inline State() : State(nullptr) {}
  virtual ~State();

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.analytics.State";
  }
  protected:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 1,
    kLanguageCodeFieldNumber = 3,
    kTimeZoneAbbreviationFieldNumber = 6,
    kLaunchCountFieldNumber = 2,
    kTimeZoneOffsetFieldNumber = 5,
    kTokenCountFieldNumber = 4,
    kRunningEnvironmentFieldNumber = 7,
  };
  // string country_code = 1;
  void clear_country_code();
  const std::string& country_code() const;
  void set_country_code(const std::string& value);
  void set_country_code(std::string&& value);
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  std::string* mutable_country_code();
  std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // string language_code = 3;
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // string time_zone_abbreviation = 6;
  void clear_time_zone_abbreviation();
  const std::string& time_zone_abbreviation() const;
  void set_time_zone_abbreviation(const std::string& value);
  void set_time_zone_abbreviation(std::string&& value);
  void set_time_zone_abbreviation(const char* value);
  void set_time_zone_abbreviation(const char* value, size_t size);
  std::string* mutable_time_zone_abbreviation();
  std::string* release_time_zone_abbreviation();
  void set_allocated_time_zone_abbreviation(std::string* time_zone_abbreviation);
  private:
  const std::string& _internal_time_zone_abbreviation() const;
  void _internal_set_time_zone_abbreviation(const std::string& value);
  std::string* _internal_mutable_time_zone_abbreviation();
  public:

  // uint32 launch_count = 2;
  void clear_launch_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 launch_count() const;
  void set_launch_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_launch_count() const;
  void _internal_set_launch_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 time_zone_offset = 5;
  void clear_time_zone_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 time_zone_offset() const;
  void set_time_zone_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_zone_offset() const;
  void _internal_set_time_zone_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 token_count = 4;
  void clear_token_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 token_count() const;
  void set_token_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_token_count() const;
  void _internal_set_token_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .clarifai.analytics.RunningEnvironment running_environment = 7;
  void clear_running_environment();
  ::clarifai::analytics::RunningEnvironment running_environment() const;
  void set_running_environment(::clarifai::analytics::RunningEnvironment value);
  private:
  ::clarifai::analytics::RunningEnvironment _internal_running_environment() const;
  void _internal_set_running_environment(::clarifai::analytics::RunningEnvironment value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.analytics.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_zone_abbreviation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 launch_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_zone_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 token_count_;
  int running_environment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fanalytics_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Analytics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.analytics.Analytics) */ {
 public:
  inline Analytics() : Analytics(nullptr) {}
  virtual ~Analytics();

  Analytics(const Analytics& from);
  Analytics(Analytics&& from) noexcept
    : Analytics() {
    *this = ::std::move(from);
  }

  inline Analytics& operator=(const Analytics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Analytics& operator=(Analytics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Analytics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Analytics* internal_default_instance() {
    return reinterpret_cast<const Analytics*>(
               &_Analytics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Analytics& a, Analytics& b) {
    a.Swap(&b);
  }
  inline void Swap(Analytics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Analytics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Analytics* New() const final {
    return CreateMaybeMessage<Analytics>(nullptr);
  }

  Analytics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Analytics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Analytics& from);
  void MergeFrom(const Analytics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Analytics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.analytics.Analytics";
  }
  protected:
  explicit Analytics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsCollectionFieldNumber = 3,
    kBatchUniqueIdentifierFieldNumber = 1,
    kSystemUuidFieldNumber = 7,
    kDeviceInfoFieldNumber = 2,
    kHostAppInfoFieldNumber = 4,
    kOperatingSystemFieldNumber = 5,
    kStateFieldNumber = 6,
    kTimestampFieldNumber = 8,
    kSdkFieldNumber = 9,
  };
  // repeated .clarifai.analytics.EventsCollection events_collection = 3;
  int events_collection_size() const;
  private:
  int _internal_events_collection_size() const;
  public:
  void clear_events_collection();
  ::clarifai::analytics::EventsCollection* mutable_events_collection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::analytics::EventsCollection >*
      mutable_events_collection();
  private:
  const ::clarifai::analytics::EventsCollection& _internal_events_collection(int index) const;
  ::clarifai::analytics::EventsCollection* _internal_add_events_collection();
  public:
  const ::clarifai::analytics::EventsCollection& events_collection(int index) const;
  ::clarifai::analytics::EventsCollection* add_events_collection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::analytics::EventsCollection >&
      events_collection() const;

  // string batch_unique_identifier = 1;
  void clear_batch_unique_identifier();
  const std::string& batch_unique_identifier() const;
  void set_batch_unique_identifier(const std::string& value);
  void set_batch_unique_identifier(std::string&& value);
  void set_batch_unique_identifier(const char* value);
  void set_batch_unique_identifier(const char* value, size_t size);
  std::string* mutable_batch_unique_identifier();
  std::string* release_batch_unique_identifier();
  void set_allocated_batch_unique_identifier(std::string* batch_unique_identifier);
  private:
  const std::string& _internal_batch_unique_identifier() const;
  void _internal_set_batch_unique_identifier(const std::string& value);
  std::string* _internal_mutable_batch_unique_identifier();
  public:

  // string system_uuid = 7;
  void clear_system_uuid();
  const std::string& system_uuid() const;
  void set_system_uuid(const std::string& value);
  void set_system_uuid(std::string&& value);
  void set_system_uuid(const char* value);
  void set_system_uuid(const char* value, size_t size);
  std::string* mutable_system_uuid();
  std::string* release_system_uuid();
  void set_allocated_system_uuid(std::string* system_uuid);
  private:
  const std::string& _internal_system_uuid() const;
  void _internal_set_system_uuid(const std::string& value);
  std::string* _internal_mutable_system_uuid();
  public:

  // .clarifai.analytics.DeviceInfo device_info = 2;
  bool has_device_info() const;
  private:
  bool _internal_has_device_info() const;
  public:
  void clear_device_info();
  const ::clarifai::analytics::DeviceInfo& device_info() const;
  ::clarifai::analytics::DeviceInfo* release_device_info();
  ::clarifai::analytics::DeviceInfo* mutable_device_info();
  void set_allocated_device_info(::clarifai::analytics::DeviceInfo* device_info);
  private:
  const ::clarifai::analytics::DeviceInfo& _internal_device_info() const;
  ::clarifai::analytics::DeviceInfo* _internal_mutable_device_info();
  public:
  void unsafe_arena_set_allocated_device_info(
      ::clarifai::analytics::DeviceInfo* device_info);
  ::clarifai::analytics::DeviceInfo* unsafe_arena_release_device_info();

  // .clarifai.analytics.HostAppInfo host_app_info = 4;
  bool has_host_app_info() const;
  private:
  bool _internal_has_host_app_info() const;
  public:
  void clear_host_app_info();
  const ::clarifai::analytics::HostAppInfo& host_app_info() const;
  ::clarifai::analytics::HostAppInfo* release_host_app_info();
  ::clarifai::analytics::HostAppInfo* mutable_host_app_info();
  void set_allocated_host_app_info(::clarifai::analytics::HostAppInfo* host_app_info);
  private:
  const ::clarifai::analytics::HostAppInfo& _internal_host_app_info() const;
  ::clarifai::analytics::HostAppInfo* _internal_mutable_host_app_info();
  public:
  void unsafe_arena_set_allocated_host_app_info(
      ::clarifai::analytics::HostAppInfo* host_app_info);
  ::clarifai::analytics::HostAppInfo* unsafe_arena_release_host_app_info();

  // .clarifai.analytics.OperatingSystem operating_system = 5;
  bool has_operating_system() const;
  private:
  bool _internal_has_operating_system() const;
  public:
  void clear_operating_system();
  const ::clarifai::analytics::OperatingSystem& operating_system() const;
  ::clarifai::analytics::OperatingSystem* release_operating_system();
  ::clarifai::analytics::OperatingSystem* mutable_operating_system();
  void set_allocated_operating_system(::clarifai::analytics::OperatingSystem* operating_system);
  private:
  const ::clarifai::analytics::OperatingSystem& _internal_operating_system() const;
  ::clarifai::analytics::OperatingSystem* _internal_mutable_operating_system();
  public:
  void unsafe_arena_set_allocated_operating_system(
      ::clarifai::analytics::OperatingSystem* operating_system);
  ::clarifai::analytics::OperatingSystem* unsafe_arena_release_operating_system();

  // .clarifai.analytics.State state = 6;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::clarifai::analytics::State& state() const;
  ::clarifai::analytics::State* release_state();
  ::clarifai::analytics::State* mutable_state();
  void set_allocated_state(::clarifai::analytics::State* state);
  private:
  const ::clarifai::analytics::State& _internal_state() const;
  ::clarifai::analytics::State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::clarifai::analytics::State* state);
  ::clarifai::analytics::State* unsafe_arena_release_state();

  // .google.protobuf.Timestamp timestamp = 8;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .clarifai.analytics.SDK sdk = 9;
  bool has_sdk() const;
  private:
  bool _internal_has_sdk() const;
  public:
  void clear_sdk();
  const ::clarifai::analytics::SDK& sdk() const;
  ::clarifai::analytics::SDK* release_sdk();
  ::clarifai::analytics::SDK* mutable_sdk();
  void set_allocated_sdk(::clarifai::analytics::SDK* sdk);
  private:
  const ::clarifai::analytics::SDK& _internal_sdk() const;
  ::clarifai::analytics::SDK* _internal_mutable_sdk();
  public:
  void unsafe_arena_set_allocated_sdk(
      ::clarifai::analytics::SDK* sdk);
  ::clarifai::analytics::SDK* unsafe_arena_release_sdk();

  // @@protoc_insertion_point(class_scope:clarifai.analytics.Analytics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::analytics::EventsCollection > events_collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr batch_unique_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_uuid_;
  ::clarifai::analytics::DeviceInfo* device_info_;
  ::clarifai::analytics::HostAppInfo* host_app_info_;
  ::clarifai::analytics::OperatingSystem* operating_system_;
  ::clarifai::analytics::State* state_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::clarifai::analytics::SDK* sdk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fanalytics_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.analytics.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.analytics.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kModelIdFieldNumber = 7,
    kModelVersionIdFieldNumber = 8,
    kTimestampFieldNumber = 6,
    kTypeFieldNumber = 3,
    kRunningModeFieldNumber = 4,
    kNetworkConnectivityFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string model_id = 7;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string model_version_id = 8;
  void clear_model_version_id();
  const std::string& model_version_id() const;
  void set_model_version_id(const std::string& value);
  void set_model_version_id(std::string&& value);
  void set_model_version_id(const char* value);
  void set_model_version_id(const char* value, size_t size);
  std::string* mutable_model_version_id();
  std::string* release_model_version_id();
  void set_allocated_model_version_id(std::string* model_version_id);
  private:
  const std::string& _internal_model_version_id() const;
  void _internal_set_model_version_id(const std::string& value);
  std::string* _internal_mutable_model_version_id();
  public:

  // .google.protobuf.Timestamp timestamp = 6;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .clarifai.analytics.AnalyticsEventType type = 3;
  void clear_type();
  ::clarifai::analytics::AnalyticsEventType type() const;
  void set_type(::clarifai::analytics::AnalyticsEventType value);
  private:
  ::clarifai::analytics::AnalyticsEventType _internal_type() const;
  void _internal_set_type(::clarifai::analytics::AnalyticsEventType value);
  public:

  // .clarifai.analytics.RunningMode running_mode = 4;
  void clear_running_mode();
  ::clarifai::analytics::RunningMode running_mode() const;
  void set_running_mode(::clarifai::analytics::RunningMode value);
  private:
  ::clarifai::analytics::RunningMode _internal_running_mode() const;
  void _internal_set_running_mode(::clarifai::analytics::RunningMode value);
  public:

  // .clarifai.analytics.NetworkConnectivity network_connectivity = 5;
  void clear_network_connectivity();
  ::clarifai::analytics::NetworkConnectivity network_connectivity() const;
  void set_network_connectivity(::clarifai::analytics::NetworkConnectivity value);
  private:
  ::clarifai::analytics::NetworkConnectivity _internal_network_connectivity() const;
  void _internal_set_network_connectivity(::clarifai::analytics::NetworkConnectivity value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.analytics.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  int type_;
  int running_mode_;
  int network_connectivity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fanalytics_2fresources_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceInfo

// string brand = 1;
inline void DeviceInfo::clear_brand() {
  brand_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceInfo::brand() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.DeviceInfo.brand)
  return _internal_brand();
}
inline void DeviceInfo::set_brand(const std::string& value) {
  _internal_set_brand(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.DeviceInfo.brand)
}
inline std::string* DeviceInfo::mutable_brand() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.DeviceInfo.brand)
  return _internal_mutable_brand();
}
inline const std::string& DeviceInfo::_internal_brand() const {
  return brand_.Get();
}
inline void DeviceInfo::_internal_set_brand(const std::string& value) {
  
  brand_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceInfo::set_brand(std::string&& value) {
  
  brand_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.DeviceInfo.brand)
}
inline void DeviceInfo::set_brand(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brand_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.DeviceInfo.brand)
}
inline void DeviceInfo::set_brand(const char* value,
    size_t size) {
  
  brand_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.DeviceInfo.brand)
}
inline std::string* DeviceInfo::_internal_mutable_brand() {
  
  return brand_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceInfo::release_brand() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.DeviceInfo.brand)
  return brand_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceInfo::set_allocated_brand(std::string* brand) {
  if (brand != nullptr) {
    
  } else {
    
  }
  brand_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brand,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.DeviceInfo.brand)
}

// string model = 2;
inline void DeviceInfo::clear_model() {
  model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceInfo::model() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.DeviceInfo.model)
  return _internal_model();
}
inline void DeviceInfo::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.DeviceInfo.model)
}
inline std::string* DeviceInfo::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.DeviceInfo.model)
  return _internal_mutable_model();
}
inline const std::string& DeviceInfo::_internal_model() const {
  return model_.Get();
}
inline void DeviceInfo::_internal_set_model(const std::string& value) {
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceInfo::set_model(std::string&& value) {
  
  model_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.DeviceInfo.model)
}
inline void DeviceInfo::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.DeviceInfo.model)
}
inline void DeviceInfo::set_model(const char* value,
    size_t size) {
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.DeviceInfo.model)
}
inline std::string* DeviceInfo::_internal_mutable_model() {
  
  return model_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceInfo::release_model() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.DeviceInfo.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceInfo::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.DeviceInfo.model)
}

// -------------------------------------------------------------------

// EventSummary

// uint32 count = 1;
inline void EventSummary::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EventSummary::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EventSummary::count() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.EventSummary.count)
  return _internal_count();
}
inline void EventSummary::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void EventSummary::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.EventSummary.count)
}

// string name = 2;
inline void EventSummary::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EventSummary::name() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.EventSummary.name)
  return _internal_name();
}
inline void EventSummary::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.EventSummary.name)
}
inline std::string* EventSummary::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.EventSummary.name)
  return _internal_mutable_name();
}
inline const std::string& EventSummary::_internal_name() const {
  return name_.Get();
}
inline void EventSummary::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EventSummary::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.EventSummary.name)
}
inline void EventSummary::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.EventSummary.name)
}
inline void EventSummary::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.EventSummary.name)
}
inline std::string* EventSummary::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EventSummary::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.EventSummary.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventSummary::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.EventSummary.name)
}

// .clarifai.analytics.AnalyticsEventType event_type = 3;
inline void EventSummary::clear_event_type() {
  event_type_ = 0;
}
inline ::clarifai::analytics::AnalyticsEventType EventSummary::_internal_event_type() const {
  return static_cast< ::clarifai::analytics::AnalyticsEventType >(event_type_);
}
inline ::clarifai::analytics::AnalyticsEventType EventSummary::event_type() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.EventSummary.event_type)
  return _internal_event_type();
}
inline void EventSummary::_internal_set_event_type(::clarifai::analytics::AnalyticsEventType value) {
  
  event_type_ = value;
}
inline void EventSummary::set_event_type(::clarifai::analytics::AnalyticsEventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.EventSummary.event_type)
}

// .clarifai.analytics.NetworkConnectivity network_connectivity = 4;
inline void EventSummary::clear_network_connectivity() {
  network_connectivity_ = 0;
}
inline ::clarifai::analytics::NetworkConnectivity EventSummary::_internal_network_connectivity() const {
  return static_cast< ::clarifai::analytics::NetworkConnectivity >(network_connectivity_);
}
inline ::clarifai::analytics::NetworkConnectivity EventSummary::network_connectivity() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.EventSummary.network_connectivity)
  return _internal_network_connectivity();
}
inline void EventSummary::_internal_set_network_connectivity(::clarifai::analytics::NetworkConnectivity value) {
  
  network_connectivity_ = value;
}
inline void EventSummary::set_network_connectivity(::clarifai::analytics::NetworkConnectivity value) {
  _internal_set_network_connectivity(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.EventSummary.network_connectivity)
}

// .clarifai.analytics.RunningMode running_mode = 5;
inline void EventSummary::clear_running_mode() {
  running_mode_ = 0;
}
inline ::clarifai::analytics::RunningMode EventSummary::_internal_running_mode() const {
  return static_cast< ::clarifai::analytics::RunningMode >(running_mode_);
}
inline ::clarifai::analytics::RunningMode EventSummary::running_mode() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.EventSummary.running_mode)
  return _internal_running_mode();
}
inline void EventSummary::_internal_set_running_mode(::clarifai::analytics::RunningMode value) {
  
  running_mode_ = value;
}
inline void EventSummary::set_running_mode(::clarifai::analytics::RunningMode value) {
  _internal_set_running_mode(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.EventSummary.running_mode)
}

// string model_id = 6;
inline void EventSummary::clear_model_id() {
  model_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EventSummary::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.EventSummary.model_id)
  return _internal_model_id();
}
inline void EventSummary::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.EventSummary.model_id)
}
inline std::string* EventSummary::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.EventSummary.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& EventSummary::_internal_model_id() const {
  return model_id_.Get();
}
inline void EventSummary::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EventSummary::set_model_id(std::string&& value) {
  
  model_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.EventSummary.model_id)
}
inline void EventSummary::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.EventSummary.model_id)
}
inline void EventSummary::set_model_id(const char* value,
    size_t size) {
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.EventSummary.model_id)
}
inline std::string* EventSummary::_internal_mutable_model_id() {
  
  return model_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EventSummary::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.EventSummary.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventSummary::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.EventSummary.model_id)
}

// string model_version_id = 7;
inline void EventSummary::clear_model_version_id() {
  model_version_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EventSummary::model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.EventSummary.model_version_id)
  return _internal_model_version_id();
}
inline void EventSummary::set_model_version_id(const std::string& value) {
  _internal_set_model_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.EventSummary.model_version_id)
}
inline std::string* EventSummary::mutable_model_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.EventSummary.model_version_id)
  return _internal_mutable_model_version_id();
}
inline const std::string& EventSummary::_internal_model_version_id() const {
  return model_version_id_.Get();
}
inline void EventSummary::_internal_set_model_version_id(const std::string& value) {
  
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EventSummary::set_model_version_id(std::string&& value) {
  
  model_version_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.EventSummary.model_version_id)
}
inline void EventSummary::set_model_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.EventSummary.model_version_id)
}
inline void EventSummary::set_model_version_id(const char* value,
    size_t size) {
  
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.EventSummary.model_version_id)
}
inline std::string* EventSummary::_internal_mutable_model_version_id() {
  
  return model_version_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EventSummary::release_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.EventSummary.model_version_id)
  return model_version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventSummary::set_allocated_model_version_id(std::string* model_version_id) {
  if (model_version_id != nullptr) {
    
  } else {
    
  }
  model_version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.EventSummary.model_version_id)
}

// -------------------------------------------------------------------

// EventsCollection

// .google.protobuf.Timestamp time_range_begin = 1;
inline bool EventsCollection::_internal_has_time_range_begin() const {
  return this != internal_default_instance() && time_range_begin_ != nullptr;
}
inline bool EventsCollection::has_time_range_begin() const {
  return _internal_has_time_range_begin();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventsCollection::_internal_time_range_begin() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_range_begin_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventsCollection::time_range_begin() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.EventsCollection.time_range_begin)
  return _internal_time_range_begin();
}
inline void EventsCollection::unsafe_arena_set_allocated_time_range_begin(
    PROTOBUF_NAMESPACE_ID::Timestamp* time_range_begin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_range_begin_);
  }
  time_range_begin_ = time_range_begin;
  if (time_range_begin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.analytics.EventsCollection.time_range_begin)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::release_time_range_begin() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_range_begin_;
  time_range_begin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::unsafe_arena_release_time_range_begin() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.EventsCollection.time_range_begin)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_range_begin_;
  time_range_begin_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::_internal_mutable_time_range_begin() {
  
  if (time_range_begin_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_range_begin_ = p;
  }
  return time_range_begin_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::mutable_time_range_begin() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.EventsCollection.time_range_begin)
  return _internal_mutable_time_range_begin();
}
inline void EventsCollection::set_allocated_time_range_begin(PROTOBUF_NAMESPACE_ID::Timestamp* time_range_begin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_range_begin_);
  }
  if (time_range_begin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_range_begin)->GetArena();
    if (message_arena != submessage_arena) {
      time_range_begin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_range_begin, submessage_arena);
    }
    
  } else {
    
  }
  time_range_begin_ = time_range_begin;
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.EventsCollection.time_range_begin)
}

// .google.protobuf.Timestamp time_range_end = 2;
inline bool EventsCollection::_internal_has_time_range_end() const {
  return this != internal_default_instance() && time_range_end_ != nullptr;
}
inline bool EventsCollection::has_time_range_end() const {
  return _internal_has_time_range_end();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventsCollection::_internal_time_range_end() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_range_end_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventsCollection::time_range_end() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.EventsCollection.time_range_end)
  return _internal_time_range_end();
}
inline void EventsCollection::unsafe_arena_set_allocated_time_range_end(
    PROTOBUF_NAMESPACE_ID::Timestamp* time_range_end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_range_end_);
  }
  time_range_end_ = time_range_end;
  if (time_range_end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.analytics.EventsCollection.time_range_end)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::release_time_range_end() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_range_end_;
  time_range_end_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::unsafe_arena_release_time_range_end() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.EventsCollection.time_range_end)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_range_end_;
  time_range_end_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::_internal_mutable_time_range_end() {
  
  if (time_range_end_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_range_end_ = p;
  }
  return time_range_end_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventsCollection::mutable_time_range_end() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.EventsCollection.time_range_end)
  return _internal_mutable_time_range_end();
}
inline void EventsCollection::set_allocated_time_range_end(PROTOBUF_NAMESPACE_ID::Timestamp* time_range_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_range_end_);
  }
  if (time_range_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_range_end)->GetArena();
    if (message_arena != submessage_arena) {
      time_range_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_range_end, submessage_arena);
    }
    
  } else {
    
  }
  time_range_end_ = time_range_end;
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.EventsCollection.time_range_end)
}

// repeated .clarifai.analytics.EventSummary event_summary = 3;
inline int EventsCollection::_internal_event_summary_size() const {
  return event_summary_.size();
}
inline int EventsCollection::event_summary_size() const {
  return _internal_event_summary_size();
}
inline void EventsCollection::clear_event_summary() {
  event_summary_.Clear();
}
inline ::clarifai::analytics::EventSummary* EventsCollection::mutable_event_summary(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.EventsCollection.event_summary)
  return event_summary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::analytics::EventSummary >*
EventsCollection::mutable_event_summary() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.analytics.EventsCollection.event_summary)
  return &event_summary_;
}
inline const ::clarifai::analytics::EventSummary& EventsCollection::_internal_event_summary(int index) const {
  return event_summary_.Get(index);
}
inline const ::clarifai::analytics::EventSummary& EventsCollection::event_summary(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.EventsCollection.event_summary)
  return _internal_event_summary(index);
}
inline ::clarifai::analytics::EventSummary* EventsCollection::_internal_add_event_summary() {
  return event_summary_.Add();
}
inline ::clarifai::analytics::EventSummary* EventsCollection::add_event_summary() {
  // @@protoc_insertion_point(field_add:clarifai.analytics.EventsCollection.event_summary)
  return _internal_add_event_summary();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::analytics::EventSummary >&
EventsCollection::event_summary() const {
  // @@protoc_insertion_point(field_list:clarifai.analytics.EventsCollection.event_summary)
  return event_summary_;
}

// -------------------------------------------------------------------

// HostAppInfo

// string build_number = 1;
inline void HostAppInfo::clear_build_number() {
  build_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostAppInfo::build_number() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.HostAppInfo.build_number)
  return _internal_build_number();
}
inline void HostAppInfo::set_build_number(const std::string& value) {
  _internal_set_build_number(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.HostAppInfo.build_number)
}
inline std::string* HostAppInfo::mutable_build_number() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.HostAppInfo.build_number)
  return _internal_mutable_build_number();
}
inline const std::string& HostAppInfo::_internal_build_number() const {
  return build_number_.Get();
}
inline void HostAppInfo::_internal_set_build_number(const std::string& value) {
  
  build_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostAppInfo::set_build_number(std::string&& value) {
  
  build_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.HostAppInfo.build_number)
}
inline void HostAppInfo::set_build_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  build_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.HostAppInfo.build_number)
}
inline void HostAppInfo::set_build_number(const char* value,
    size_t size) {
  
  build_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.HostAppInfo.build_number)
}
inline std::string* HostAppInfo::_internal_mutable_build_number() {
  
  return build_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostAppInfo::release_build_number() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.HostAppInfo.build_number)
  return build_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostAppInfo::set_allocated_build_number(std::string* build_number) {
  if (build_number != nullptr) {
    
  } else {
    
  }
  build_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.HostAppInfo.build_number)
}

// string api_key = 2;
inline void HostAppInfo::clear_api_key() {
  api_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostAppInfo::api_key() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.HostAppInfo.api_key)
  return _internal_api_key();
}
inline void HostAppInfo::set_api_key(const std::string& value) {
  _internal_set_api_key(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.HostAppInfo.api_key)
}
inline std::string* HostAppInfo::mutable_api_key() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.HostAppInfo.api_key)
  return _internal_mutable_api_key();
}
inline const std::string& HostAppInfo::_internal_api_key() const {
  return api_key_.Get();
}
inline void HostAppInfo::_internal_set_api_key(const std::string& value) {
  
  api_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostAppInfo::set_api_key(std::string&& value) {
  
  api_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.HostAppInfo.api_key)
}
inline void HostAppInfo::set_api_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  api_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.HostAppInfo.api_key)
}
inline void HostAppInfo::set_api_key(const char* value,
    size_t size) {
  
  api_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.HostAppInfo.api_key)
}
inline std::string* HostAppInfo::_internal_mutable_api_key() {
  
  return api_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostAppInfo::release_api_key() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.HostAppInfo.api_key)
  return api_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostAppInfo::set_allocated_api_key(std::string* api_key) {
  if (api_key != nullptr) {
    
  } else {
    
  }
  api_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.HostAppInfo.api_key)
}

// string version = 3;
inline void HostAppInfo::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostAppInfo::version() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.HostAppInfo.version)
  return _internal_version();
}
inline void HostAppInfo::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.HostAppInfo.version)
}
inline std::string* HostAppInfo::mutable_version() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.HostAppInfo.version)
  return _internal_mutable_version();
}
inline const std::string& HostAppInfo::_internal_version() const {
  return version_.Get();
}
inline void HostAppInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostAppInfo::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.HostAppInfo.version)
}
inline void HostAppInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.HostAppInfo.version)
}
inline void HostAppInfo::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.HostAppInfo.version)
}
inline std::string* HostAppInfo::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostAppInfo::release_version() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.HostAppInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostAppInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.HostAppInfo.version)
}

// -------------------------------------------------------------------

// OperatingSystem

// string name = 1;
inline void OperatingSystem::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OperatingSystem::name() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.OperatingSystem.name)
  return _internal_name();
}
inline void OperatingSystem::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.OperatingSystem.name)
}
inline std::string* OperatingSystem::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.OperatingSystem.name)
  return _internal_mutable_name();
}
inline const std::string& OperatingSystem::_internal_name() const {
  return name_.Get();
}
inline void OperatingSystem::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OperatingSystem::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.OperatingSystem.name)
}
inline void OperatingSystem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.OperatingSystem.name)
}
inline void OperatingSystem::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.OperatingSystem.name)
}
inline std::string* OperatingSystem::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OperatingSystem::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.OperatingSystem.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OperatingSystem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.OperatingSystem.name)
}

// string version = 2;
inline void OperatingSystem::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OperatingSystem::version() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.OperatingSystem.version)
  return _internal_version();
}
inline void OperatingSystem::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.OperatingSystem.version)
}
inline std::string* OperatingSystem::mutable_version() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.OperatingSystem.version)
  return _internal_mutable_version();
}
inline const std::string& OperatingSystem::_internal_version() const {
  return version_.Get();
}
inline void OperatingSystem::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OperatingSystem::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.OperatingSystem.version)
}
inline void OperatingSystem::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.OperatingSystem.version)
}
inline void OperatingSystem::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.OperatingSystem.version)
}
inline std::string* OperatingSystem::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OperatingSystem::release_version() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.OperatingSystem.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OperatingSystem::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.OperatingSystem.version)
}

// -------------------------------------------------------------------

// SDK

// string version = 1;
inline void SDK::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SDK::version() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.SDK.version)
  return _internal_version();
}
inline void SDK::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.SDK.version)
}
inline std::string* SDK::mutable_version() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.SDK.version)
  return _internal_mutable_version();
}
inline const std::string& SDK::_internal_version() const {
  return version_.Get();
}
inline void SDK::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SDK::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.SDK.version)
}
inline void SDK::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.SDK.version)
}
inline void SDK::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.SDK.version)
}
inline std::string* SDK::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SDK::release_version() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.SDK.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SDK::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.SDK.version)
}

// string build = 2;
inline void SDK::clear_build() {
  build_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SDK::build() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.SDK.build)
  return _internal_build();
}
inline void SDK::set_build(const std::string& value) {
  _internal_set_build(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.SDK.build)
}
inline std::string* SDK::mutable_build() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.SDK.build)
  return _internal_mutable_build();
}
inline const std::string& SDK::_internal_build() const {
  return build_.Get();
}
inline void SDK::_internal_set_build(const std::string& value) {
  
  build_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SDK::set_build(std::string&& value) {
  
  build_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.SDK.build)
}
inline void SDK::set_build(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  build_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.SDK.build)
}
inline void SDK::set_build(const char* value,
    size_t size) {
  
  build_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.SDK.build)
}
inline std::string* SDK::_internal_mutable_build() {
  
  return build_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SDK::release_build() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.SDK.build)
  return build_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SDK::set_allocated_build(std::string* build) {
  if (build != nullptr) {
    
  } else {
    
  }
  build_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.SDK.build)
}

// -------------------------------------------------------------------

// State

// string country_code = 1;
inline void State::clear_country_code() {
  country_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& State::country_code() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.State.country_code)
  return _internal_country_code();
}
inline void State::set_country_code(const std::string& value) {
  _internal_set_country_code(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.State.country_code)
}
inline std::string* State::mutable_country_code() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.State.country_code)
  return _internal_mutable_country_code();
}
inline const std::string& State::_internal_country_code() const {
  return country_code_.Get();
}
inline void State::_internal_set_country_code(const std::string& value) {
  
  country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void State::set_country_code(std::string&& value) {
  
  country_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.State.country_code)
}
inline void State::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.State.country_code)
}
inline void State::set_country_code(const char* value,
    size_t size) {
  
  country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.State.country_code)
}
inline std::string* State::_internal_mutable_country_code() {
  
  return country_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* State::release_country_code() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.State.country_code)
  return country_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void State::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    
  } else {
    
  }
  country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.State.country_code)
}

// uint32 launch_count = 2;
inline void State::clear_launch_count() {
  launch_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::_internal_launch_count() const {
  return launch_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::launch_count() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.State.launch_count)
  return _internal_launch_count();
}
inline void State::_internal_set_launch_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  launch_count_ = value;
}
inline void State::set_launch_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_launch_count(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.State.launch_count)
}

// string language_code = 3;
inline void State::clear_language_code() {
  language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& State::language_code() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.State.language_code)
  return _internal_language_code();
}
inline void State::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.State.language_code)
}
inline std::string* State::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.State.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& State::_internal_language_code() const {
  return language_code_.Get();
}
inline void State::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void State::set_language_code(std::string&& value) {
  
  language_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.State.language_code)
}
inline void State::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.State.language_code)
}
inline void State::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.State.language_code)
}
inline std::string* State::_internal_mutable_language_code() {
  
  return language_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* State::release_language_code() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.State.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void State::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.State.language_code)
}

// uint64 token_count = 4;
inline void State::clear_token_count() {
  token_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 State::_internal_token_count() const {
  return token_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 State::token_count() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.State.token_count)
  return _internal_token_count();
}
inline void State::_internal_set_token_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  token_count_ = value;
}
inline void State::set_token_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_token_count(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.State.token_count)
}

// int32 time_zone_offset = 5;
inline void State::clear_time_zone_offset() {
  time_zone_offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 State::_internal_time_zone_offset() const {
  return time_zone_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 State::time_zone_offset() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.State.time_zone_offset)
  return _internal_time_zone_offset();
}
inline void State::_internal_set_time_zone_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_zone_offset_ = value;
}
inline void State::set_time_zone_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_zone_offset(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.State.time_zone_offset)
}

// string time_zone_abbreviation = 6;
inline void State::clear_time_zone_abbreviation() {
  time_zone_abbreviation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& State::time_zone_abbreviation() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.State.time_zone_abbreviation)
  return _internal_time_zone_abbreviation();
}
inline void State::set_time_zone_abbreviation(const std::string& value) {
  _internal_set_time_zone_abbreviation(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.State.time_zone_abbreviation)
}
inline std::string* State::mutable_time_zone_abbreviation() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.State.time_zone_abbreviation)
  return _internal_mutable_time_zone_abbreviation();
}
inline const std::string& State::_internal_time_zone_abbreviation() const {
  return time_zone_abbreviation_.Get();
}
inline void State::_internal_set_time_zone_abbreviation(const std::string& value) {
  
  time_zone_abbreviation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void State::set_time_zone_abbreviation(std::string&& value) {
  
  time_zone_abbreviation_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.State.time_zone_abbreviation)
}
inline void State::set_time_zone_abbreviation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_zone_abbreviation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.State.time_zone_abbreviation)
}
inline void State::set_time_zone_abbreviation(const char* value,
    size_t size) {
  
  time_zone_abbreviation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.State.time_zone_abbreviation)
}
inline std::string* State::_internal_mutable_time_zone_abbreviation() {
  
  return time_zone_abbreviation_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* State::release_time_zone_abbreviation() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.State.time_zone_abbreviation)
  return time_zone_abbreviation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void State::set_allocated_time_zone_abbreviation(std::string* time_zone_abbreviation) {
  if (time_zone_abbreviation != nullptr) {
    
  } else {
    
  }
  time_zone_abbreviation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_zone_abbreviation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.State.time_zone_abbreviation)
}

// .clarifai.analytics.RunningEnvironment running_environment = 7;
inline void State::clear_running_environment() {
  running_environment_ = 0;
}
inline ::clarifai::analytics::RunningEnvironment State::_internal_running_environment() const {
  return static_cast< ::clarifai::analytics::RunningEnvironment >(running_environment_);
}
inline ::clarifai::analytics::RunningEnvironment State::running_environment() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.State.running_environment)
  return _internal_running_environment();
}
inline void State::_internal_set_running_environment(::clarifai::analytics::RunningEnvironment value) {
  
  running_environment_ = value;
}
inline void State::set_running_environment(::clarifai::analytics::RunningEnvironment value) {
  _internal_set_running_environment(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.State.running_environment)
}

// -------------------------------------------------------------------

// Analytics

// string batch_unique_identifier = 1;
inline void Analytics::clear_batch_unique_identifier() {
  batch_unique_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Analytics::batch_unique_identifier() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Analytics.batch_unique_identifier)
  return _internal_batch_unique_identifier();
}
inline void Analytics::set_batch_unique_identifier(const std::string& value) {
  _internal_set_batch_unique_identifier(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.Analytics.batch_unique_identifier)
}
inline std::string* Analytics::mutable_batch_unique_identifier() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.Analytics.batch_unique_identifier)
  return _internal_mutable_batch_unique_identifier();
}
inline const std::string& Analytics::_internal_batch_unique_identifier() const {
  return batch_unique_identifier_.Get();
}
inline void Analytics::_internal_set_batch_unique_identifier(const std::string& value) {
  
  batch_unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Analytics::set_batch_unique_identifier(std::string&& value) {
  
  batch_unique_identifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.Analytics.batch_unique_identifier)
}
inline void Analytics::set_batch_unique_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  batch_unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.Analytics.batch_unique_identifier)
}
inline void Analytics::set_batch_unique_identifier(const char* value,
    size_t size) {
  
  batch_unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.Analytics.batch_unique_identifier)
}
inline std::string* Analytics::_internal_mutable_batch_unique_identifier() {
  
  return batch_unique_identifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Analytics::release_batch_unique_identifier() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.Analytics.batch_unique_identifier)
  return batch_unique_identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Analytics::set_allocated_batch_unique_identifier(std::string* batch_unique_identifier) {
  if (batch_unique_identifier != nullptr) {
    
  } else {
    
  }
  batch_unique_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), batch_unique_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.Analytics.batch_unique_identifier)
}

// .clarifai.analytics.DeviceInfo device_info = 2;
inline bool Analytics::_internal_has_device_info() const {
  return this != internal_default_instance() && device_info_ != nullptr;
}
inline bool Analytics::has_device_info() const {
  return _internal_has_device_info();
}
inline void Analytics::clear_device_info() {
  if (GetArena() == nullptr && device_info_ != nullptr) {
    delete device_info_;
  }
  device_info_ = nullptr;
}
inline const ::clarifai::analytics::DeviceInfo& Analytics::_internal_device_info() const {
  const ::clarifai::analytics::DeviceInfo* p = device_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::analytics::DeviceInfo*>(
      &::clarifai::analytics::_DeviceInfo_default_instance_);
}
inline const ::clarifai::analytics::DeviceInfo& Analytics::device_info() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Analytics.device_info)
  return _internal_device_info();
}
inline void Analytics::unsafe_arena_set_allocated_device_info(
    ::clarifai::analytics::DeviceInfo* device_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_info_);
  }
  device_info_ = device_info;
  if (device_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.analytics.Analytics.device_info)
}
inline ::clarifai::analytics::DeviceInfo* Analytics::release_device_info() {
  
  ::clarifai::analytics::DeviceInfo* temp = device_info_;
  device_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::analytics::DeviceInfo* Analytics::unsafe_arena_release_device_info() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.Analytics.device_info)
  
  ::clarifai::analytics::DeviceInfo* temp = device_info_;
  device_info_ = nullptr;
  return temp;
}
inline ::clarifai::analytics::DeviceInfo* Analytics::_internal_mutable_device_info() {
  
  if (device_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::analytics::DeviceInfo>(GetArena());
    device_info_ = p;
  }
  return device_info_;
}
inline ::clarifai::analytics::DeviceInfo* Analytics::mutable_device_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.Analytics.device_info)
  return _internal_mutable_device_info();
}
inline void Analytics::set_allocated_device_info(::clarifai::analytics::DeviceInfo* device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_info_;
  }
  if (device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_info);
    if (message_arena != submessage_arena) {
      device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_info, submessage_arena);
    }
    
  } else {
    
  }
  device_info_ = device_info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.Analytics.device_info)
}

// repeated .clarifai.analytics.EventsCollection events_collection = 3;
inline int Analytics::_internal_events_collection_size() const {
  return events_collection_.size();
}
inline int Analytics::events_collection_size() const {
  return _internal_events_collection_size();
}
inline void Analytics::clear_events_collection() {
  events_collection_.Clear();
}
inline ::clarifai::analytics::EventsCollection* Analytics::mutable_events_collection(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.Analytics.events_collection)
  return events_collection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::analytics::EventsCollection >*
Analytics::mutable_events_collection() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.analytics.Analytics.events_collection)
  return &events_collection_;
}
inline const ::clarifai::analytics::EventsCollection& Analytics::_internal_events_collection(int index) const {
  return events_collection_.Get(index);
}
inline const ::clarifai::analytics::EventsCollection& Analytics::events_collection(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Analytics.events_collection)
  return _internal_events_collection(index);
}
inline ::clarifai::analytics::EventsCollection* Analytics::_internal_add_events_collection() {
  return events_collection_.Add();
}
inline ::clarifai::analytics::EventsCollection* Analytics::add_events_collection() {
  // @@protoc_insertion_point(field_add:clarifai.analytics.Analytics.events_collection)
  return _internal_add_events_collection();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::analytics::EventsCollection >&
Analytics::events_collection() const {
  // @@protoc_insertion_point(field_list:clarifai.analytics.Analytics.events_collection)
  return events_collection_;
}

// .clarifai.analytics.HostAppInfo host_app_info = 4;
inline bool Analytics::_internal_has_host_app_info() const {
  return this != internal_default_instance() && host_app_info_ != nullptr;
}
inline bool Analytics::has_host_app_info() const {
  return _internal_has_host_app_info();
}
inline void Analytics::clear_host_app_info() {
  if (GetArena() == nullptr && host_app_info_ != nullptr) {
    delete host_app_info_;
  }
  host_app_info_ = nullptr;
}
inline const ::clarifai::analytics::HostAppInfo& Analytics::_internal_host_app_info() const {
  const ::clarifai::analytics::HostAppInfo* p = host_app_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::analytics::HostAppInfo*>(
      &::clarifai::analytics::_HostAppInfo_default_instance_);
}
inline const ::clarifai::analytics::HostAppInfo& Analytics::host_app_info() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Analytics.host_app_info)
  return _internal_host_app_info();
}
inline void Analytics::unsafe_arena_set_allocated_host_app_info(
    ::clarifai::analytics::HostAppInfo* host_app_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_app_info_);
  }
  host_app_info_ = host_app_info;
  if (host_app_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.analytics.Analytics.host_app_info)
}
inline ::clarifai::analytics::HostAppInfo* Analytics::release_host_app_info() {
  
  ::clarifai::analytics::HostAppInfo* temp = host_app_info_;
  host_app_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::analytics::HostAppInfo* Analytics::unsafe_arena_release_host_app_info() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.Analytics.host_app_info)
  
  ::clarifai::analytics::HostAppInfo* temp = host_app_info_;
  host_app_info_ = nullptr;
  return temp;
}
inline ::clarifai::analytics::HostAppInfo* Analytics::_internal_mutable_host_app_info() {
  
  if (host_app_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::analytics::HostAppInfo>(GetArena());
    host_app_info_ = p;
  }
  return host_app_info_;
}
inline ::clarifai::analytics::HostAppInfo* Analytics::mutable_host_app_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.Analytics.host_app_info)
  return _internal_mutable_host_app_info();
}
inline void Analytics::set_allocated_host_app_info(::clarifai::analytics::HostAppInfo* host_app_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete host_app_info_;
  }
  if (host_app_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(host_app_info);
    if (message_arena != submessage_arena) {
      host_app_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_app_info, submessage_arena);
    }
    
  } else {
    
  }
  host_app_info_ = host_app_info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.Analytics.host_app_info)
}

// .clarifai.analytics.OperatingSystem operating_system = 5;
inline bool Analytics::_internal_has_operating_system() const {
  return this != internal_default_instance() && operating_system_ != nullptr;
}
inline bool Analytics::has_operating_system() const {
  return _internal_has_operating_system();
}
inline void Analytics::clear_operating_system() {
  if (GetArena() == nullptr && operating_system_ != nullptr) {
    delete operating_system_;
  }
  operating_system_ = nullptr;
}
inline const ::clarifai::analytics::OperatingSystem& Analytics::_internal_operating_system() const {
  const ::clarifai::analytics::OperatingSystem* p = operating_system_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::analytics::OperatingSystem*>(
      &::clarifai::analytics::_OperatingSystem_default_instance_);
}
inline const ::clarifai::analytics::OperatingSystem& Analytics::operating_system() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Analytics.operating_system)
  return _internal_operating_system();
}
inline void Analytics::unsafe_arena_set_allocated_operating_system(
    ::clarifai::analytics::OperatingSystem* operating_system) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operating_system_);
  }
  operating_system_ = operating_system;
  if (operating_system) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.analytics.Analytics.operating_system)
}
inline ::clarifai::analytics::OperatingSystem* Analytics::release_operating_system() {
  
  ::clarifai::analytics::OperatingSystem* temp = operating_system_;
  operating_system_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::analytics::OperatingSystem* Analytics::unsafe_arena_release_operating_system() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.Analytics.operating_system)
  
  ::clarifai::analytics::OperatingSystem* temp = operating_system_;
  operating_system_ = nullptr;
  return temp;
}
inline ::clarifai::analytics::OperatingSystem* Analytics::_internal_mutable_operating_system() {
  
  if (operating_system_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::analytics::OperatingSystem>(GetArena());
    operating_system_ = p;
  }
  return operating_system_;
}
inline ::clarifai::analytics::OperatingSystem* Analytics::mutable_operating_system() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.Analytics.operating_system)
  return _internal_mutable_operating_system();
}
inline void Analytics::set_allocated_operating_system(::clarifai::analytics::OperatingSystem* operating_system) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete operating_system_;
  }
  if (operating_system) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(operating_system);
    if (message_arena != submessage_arena) {
      operating_system = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operating_system, submessage_arena);
    }
    
  } else {
    
  }
  operating_system_ = operating_system;
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.Analytics.operating_system)
}

// .clarifai.analytics.State state = 6;
inline bool Analytics::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Analytics::has_state() const {
  return _internal_has_state();
}
inline void Analytics::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::clarifai::analytics::State& Analytics::_internal_state() const {
  const ::clarifai::analytics::State* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::analytics::State*>(
      &::clarifai::analytics::_State_default_instance_);
}
inline const ::clarifai::analytics::State& Analytics::state() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Analytics.state)
  return _internal_state();
}
inline void Analytics::unsafe_arena_set_allocated_state(
    ::clarifai::analytics::State* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.analytics.Analytics.state)
}
inline ::clarifai::analytics::State* Analytics::release_state() {
  
  ::clarifai::analytics::State* temp = state_;
  state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::analytics::State* Analytics::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.Analytics.state)
  
  ::clarifai::analytics::State* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::clarifai::analytics::State* Analytics::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::analytics::State>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::clarifai::analytics::State* Analytics::mutable_state() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.Analytics.state)
  return _internal_mutable_state();
}
inline void Analytics::set_allocated_state(::clarifai::analytics::State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.Analytics.state)
}

// string system_uuid = 7;
inline void Analytics::clear_system_uuid() {
  system_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Analytics::system_uuid() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Analytics.system_uuid)
  return _internal_system_uuid();
}
inline void Analytics::set_system_uuid(const std::string& value) {
  _internal_set_system_uuid(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.Analytics.system_uuid)
}
inline std::string* Analytics::mutable_system_uuid() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.Analytics.system_uuid)
  return _internal_mutable_system_uuid();
}
inline const std::string& Analytics::_internal_system_uuid() const {
  return system_uuid_.Get();
}
inline void Analytics::_internal_set_system_uuid(const std::string& value) {
  
  system_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Analytics::set_system_uuid(std::string&& value) {
  
  system_uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.Analytics.system_uuid)
}
inline void Analytics::set_system_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  system_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.Analytics.system_uuid)
}
inline void Analytics::set_system_uuid(const char* value,
    size_t size) {
  
  system_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.Analytics.system_uuid)
}
inline std::string* Analytics::_internal_mutable_system_uuid() {
  
  return system_uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Analytics::release_system_uuid() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.Analytics.system_uuid)
  return system_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Analytics::set_allocated_system_uuid(std::string* system_uuid) {
  if (system_uuid != nullptr) {
    
  } else {
    
  }
  system_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), system_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.Analytics.system_uuid)
}

// .google.protobuf.Timestamp timestamp = 8;
inline bool Analytics::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Analytics::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Analytics::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Analytics::timestamp() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Analytics.timestamp)
  return _internal_timestamp();
}
inline void Analytics::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.analytics.Analytics.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Analytics::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Analytics::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.Analytics.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Analytics::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Analytics::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.Analytics.timestamp)
  return _internal_mutable_timestamp();
}
inline void Analytics::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.Analytics.timestamp)
}

// .clarifai.analytics.SDK sdk = 9;
inline bool Analytics::_internal_has_sdk() const {
  return this != internal_default_instance() && sdk_ != nullptr;
}
inline bool Analytics::has_sdk() const {
  return _internal_has_sdk();
}
inline void Analytics::clear_sdk() {
  if (GetArena() == nullptr && sdk_ != nullptr) {
    delete sdk_;
  }
  sdk_ = nullptr;
}
inline const ::clarifai::analytics::SDK& Analytics::_internal_sdk() const {
  const ::clarifai::analytics::SDK* p = sdk_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::analytics::SDK*>(
      &::clarifai::analytics::_SDK_default_instance_);
}
inline const ::clarifai::analytics::SDK& Analytics::sdk() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Analytics.sdk)
  return _internal_sdk();
}
inline void Analytics::unsafe_arena_set_allocated_sdk(
    ::clarifai::analytics::SDK* sdk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sdk_);
  }
  sdk_ = sdk;
  if (sdk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.analytics.Analytics.sdk)
}
inline ::clarifai::analytics::SDK* Analytics::release_sdk() {
  
  ::clarifai::analytics::SDK* temp = sdk_;
  sdk_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::analytics::SDK* Analytics::unsafe_arena_release_sdk() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.Analytics.sdk)
  
  ::clarifai::analytics::SDK* temp = sdk_;
  sdk_ = nullptr;
  return temp;
}
inline ::clarifai::analytics::SDK* Analytics::_internal_mutable_sdk() {
  
  if (sdk_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::analytics::SDK>(GetArena());
    sdk_ = p;
  }
  return sdk_;
}
inline ::clarifai::analytics::SDK* Analytics::mutable_sdk() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.Analytics.sdk)
  return _internal_mutable_sdk();
}
inline void Analytics::set_allocated_sdk(::clarifai::analytics::SDK* sdk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sdk_;
  }
  if (sdk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sdk);
    if (message_arena != submessage_arena) {
      sdk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sdk, submessage_arena);
    }
    
  } else {
    
  }
  sdk_ = sdk;
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.Analytics.sdk)
}

// -------------------------------------------------------------------

// Event

// string id = 1;
inline void Event::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event::id() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Event.id)
  return _internal_id();
}
inline void Event::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.Event.id)
}
inline std::string* Event::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.Event.id)
  return _internal_mutable_id();
}
inline const std::string& Event::_internal_id() const {
  return id_.Get();
}
inline void Event::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.Event.id)
}
inline void Event::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.Event.id)
}
inline void Event::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.Event.id)
}
inline std::string* Event::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.Event.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.Event.id)
}

// string name = 2;
inline void Event::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event::name() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Event.name)
  return _internal_name();
}
inline void Event::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.Event.name)
}
inline std::string* Event::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.Event.name)
  return _internal_mutable_name();
}
inline const std::string& Event::_internal_name() const {
  return name_.Get();
}
inline void Event::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.Event.name)
}
inline void Event::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.Event.name)
}
inline void Event::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.Event.name)
}
inline std::string* Event::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.Event.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.Event.name)
}

// .clarifai.analytics.AnalyticsEventType type = 3;
inline void Event::clear_type() {
  type_ = 0;
}
inline ::clarifai::analytics::AnalyticsEventType Event::_internal_type() const {
  return static_cast< ::clarifai::analytics::AnalyticsEventType >(type_);
}
inline ::clarifai::analytics::AnalyticsEventType Event::type() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Event.type)
  return _internal_type();
}
inline void Event::_internal_set_type(::clarifai::analytics::AnalyticsEventType value) {
  
  type_ = value;
}
inline void Event::set_type(::clarifai::analytics::AnalyticsEventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.Event.type)
}

// .clarifai.analytics.RunningMode running_mode = 4;
inline void Event::clear_running_mode() {
  running_mode_ = 0;
}
inline ::clarifai::analytics::RunningMode Event::_internal_running_mode() const {
  return static_cast< ::clarifai::analytics::RunningMode >(running_mode_);
}
inline ::clarifai::analytics::RunningMode Event::running_mode() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Event.running_mode)
  return _internal_running_mode();
}
inline void Event::_internal_set_running_mode(::clarifai::analytics::RunningMode value) {
  
  running_mode_ = value;
}
inline void Event::set_running_mode(::clarifai::analytics::RunningMode value) {
  _internal_set_running_mode(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.Event.running_mode)
}

// .clarifai.analytics.NetworkConnectivity network_connectivity = 5;
inline void Event::clear_network_connectivity() {
  network_connectivity_ = 0;
}
inline ::clarifai::analytics::NetworkConnectivity Event::_internal_network_connectivity() const {
  return static_cast< ::clarifai::analytics::NetworkConnectivity >(network_connectivity_);
}
inline ::clarifai::analytics::NetworkConnectivity Event::network_connectivity() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Event.network_connectivity)
  return _internal_network_connectivity();
}
inline void Event::_internal_set_network_connectivity(::clarifai::analytics::NetworkConnectivity value) {
  
  network_connectivity_ = value;
}
inline void Event::set_network_connectivity(::clarifai::analytics::NetworkConnectivity value) {
  _internal_set_network_connectivity(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.Event.network_connectivity)
}

// .google.protobuf.Timestamp timestamp = 6;
inline bool Event::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Event::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Event::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Event::timestamp() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Event.timestamp)
  return _internal_timestamp();
}
inline void Event::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.analytics.Event.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.Event.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.Event.timestamp)
  return _internal_mutable_timestamp();
}
inline void Event::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.Event.timestamp)
}

// string model_id = 7;
inline void Event::clear_model_id() {
  model_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Event.model_id)
  return _internal_model_id();
}
inline void Event::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.Event.model_id)
}
inline std::string* Event::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.Event.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& Event::_internal_model_id() const {
  return model_id_.Get();
}
inline void Event::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event::set_model_id(std::string&& value) {
  
  model_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.Event.model_id)
}
inline void Event::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.Event.model_id)
}
inline void Event::set_model_id(const char* value,
    size_t size) {
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.Event.model_id)
}
inline std::string* Event::_internal_mutable_model_id() {
  
  return model_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.Event.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.Event.model_id)
}

// string model_version_id = 8;
inline void Event::clear_model_version_id() {
  model_version_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event::model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.analytics.Event.model_version_id)
  return _internal_model_version_id();
}
inline void Event::set_model_version_id(const std::string& value) {
  _internal_set_model_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.analytics.Event.model_version_id)
}
inline std::string* Event::mutable_model_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.analytics.Event.model_version_id)
  return _internal_mutable_model_version_id();
}
inline const std::string& Event::_internal_model_version_id() const {
  return model_version_id_.Get();
}
inline void Event::_internal_set_model_version_id(const std::string& value) {
  
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event::set_model_version_id(std::string&& value) {
  
  model_version_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.analytics.Event.model_version_id)
}
inline void Event::set_model_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.analytics.Event.model_version_id)
}
inline void Event::set_model_version_id(const char* value,
    size_t size) {
  
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.analytics.Event.model_version_id)
}
inline std::string* Event::_internal_mutable_model_version_id() {
  
  return model_version_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event::release_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.analytics.Event.model_version_id)
  return model_version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_model_version_id(std::string* model_version_id) {
  if (model_version_id != nullptr) {
    
  } else {
    
  }
  model_version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.analytics.Event.model_version_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace analytics
}  // namespace clarifai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::clarifai::analytics::AnalyticsEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::analytics::AnalyticsEventType>() {
  return ::clarifai::analytics::AnalyticsEventType_descriptor();
}
template <> struct is_proto_enum< ::clarifai::analytics::NetworkConnectivity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::analytics::NetworkConnectivity>() {
  return ::clarifai::analytics::NetworkConnectivity_descriptor();
}
template <> struct is_proto_enum< ::clarifai::analytics::RunningMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::analytics::RunningMode>() {
  return ::clarifai::analytics::RunningMode_descriptor();
}
template <> struct is_proto_enum< ::clarifai::analytics::RunningEnvironment> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::analytics::RunningEnvironment>() {
  return ::clarifai::analytics::RunningEnvironment_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fanalytics_2fresources_2eproto
