// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/analytics/resources.proto

#include "proto/clarifai/analytics/resources.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fanalytics_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fanalytics_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventSummary_proto_2fclarifai_2fanalytics_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fanalytics_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EventsCollection_proto_2fclarifai_2fanalytics_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fanalytics_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostAppInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fanalytics_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperatingSystem_proto_2fclarifai_2fanalytics_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fanalytics_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SDK_proto_2fclarifai_2fanalytics_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fanalytics_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_State_proto_2fclarifai_2fanalytics_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace clarifai {
namespace analytics {
class DeviceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceInfo> _instance;
} _DeviceInfo_default_instance_;
class EventSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventSummary> _instance;
} _EventSummary_default_instance_;
class EventsCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventsCollection> _instance;
} _EventsCollection_default_instance_;
class HostAppInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostAppInfo> _instance;
} _HostAppInfo_default_instance_;
class OperatingSystemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperatingSystem> _instance;
} _OperatingSystem_default_instance_;
class SDKDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SDK> _instance;
} _SDK_default_instance_;
class StateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<State> _instance;
} _State_default_instance_;
class AnalyticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Analytics> _instance;
} _Analytics_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
} _Event_default_instance_;
}  // namespace analytics
}  // namespace clarifai
static void InitDefaultsscc_info_Analytics_proto_2fclarifai_2fanalytics_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::analytics::_Analytics_default_instance_;
    new (ptr) ::clarifai::analytics::Analytics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::analytics::Analytics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Analytics_proto_2fclarifai_2fanalytics_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Analytics_proto_2fclarifai_2fanalytics_2fresources_2eproto}, {
      &scc_info_DeviceInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
      &scc_info_EventsCollection_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
      &scc_info_HostAppInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
      &scc_info_OperatingSystem_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
      &scc_info_State_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_SDK_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeviceInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::analytics::_DeviceInfo_default_instance_;
    new (ptr) ::clarifai::analytics::DeviceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::analytics::DeviceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_Event_proto_2fclarifai_2fanalytics_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::analytics::_Event_default_instance_;
    new (ptr) ::clarifai::analytics::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::analytics::Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_proto_2fclarifai_2fanalytics_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Event_proto_2fclarifai_2fanalytics_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_EventSummary_proto_2fclarifai_2fanalytics_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::analytics::_EventSummary_default_instance_;
    new (ptr) ::clarifai::analytics::EventSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::analytics::EventSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventSummary_proto_2fclarifai_2fanalytics_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EventSummary_proto_2fclarifai_2fanalytics_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_EventsCollection_proto_2fclarifai_2fanalytics_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::analytics::_EventsCollection_default_instance_;
    new (ptr) ::clarifai::analytics::EventsCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::analytics::EventsCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EventsCollection_proto_2fclarifai_2fanalytics_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EventsCollection_proto_2fclarifai_2fanalytics_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_EventSummary_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_HostAppInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::analytics::_HostAppInfo_default_instance_;
    new (ptr) ::clarifai::analytics::HostAppInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::analytics::HostAppInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostAppInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostAppInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_OperatingSystem_proto_2fclarifai_2fanalytics_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::analytics::_OperatingSystem_default_instance_;
    new (ptr) ::clarifai::analytics::OperatingSystem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::analytics::OperatingSystem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperatingSystem_proto_2fclarifai_2fanalytics_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OperatingSystem_proto_2fclarifai_2fanalytics_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_SDK_proto_2fclarifai_2fanalytics_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::analytics::_SDK_default_instance_;
    new (ptr) ::clarifai::analytics::SDK();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::analytics::SDK::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SDK_proto_2fclarifai_2fanalytics_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SDK_proto_2fclarifai_2fanalytics_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_State_proto_2fclarifai_2fanalytics_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::analytics::_State_default_instance_;
    new (ptr) ::clarifai::analytics::State();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::analytics::State::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_State_proto_2fclarifai_2fanalytics_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_State_proto_2fclarifai_2fanalytics_2fresources_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fanalytics_2fresources_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fclarifai_2fanalytics_2fresources_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fanalytics_2fresources_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fclarifai_2fanalytics_2fresources_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::DeviceInfo, brand_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::DeviceInfo, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::EventSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::EventSummary, count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::EventSummary, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::EventSummary, event_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::EventSummary, network_connectivity_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::EventSummary, running_mode_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::EventSummary, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::EventSummary, model_version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::EventsCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::EventsCollection, time_range_begin_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::EventsCollection, time_range_end_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::EventsCollection, event_summary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::HostAppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::HostAppInfo, build_number_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::HostAppInfo, api_key_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::HostAppInfo, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::OperatingSystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::OperatingSystem, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::OperatingSystem, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::SDK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::SDK, version_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::SDK, build_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::State, country_code_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::State, launch_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::State, language_code_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::State, token_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::State, time_zone_offset_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::State, time_zone_abbreviation_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::State, running_environment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Analytics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Analytics, batch_unique_identifier_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Analytics, device_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Analytics, events_collection_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Analytics, host_app_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Analytics, operating_system_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Analytics, state_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Analytics, system_uuid_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Analytics, timestamp_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Analytics, sdk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Event, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Event, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Event, type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Event, running_mode_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Event, network_connectivity_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Event, timestamp_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Event, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::Event, model_version_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clarifai::analytics::DeviceInfo)},
  { 7, -1, sizeof(::clarifai::analytics::EventSummary)},
  { 19, -1, sizeof(::clarifai::analytics::EventsCollection)},
  { 27, -1, sizeof(::clarifai::analytics::HostAppInfo)},
  { 35, -1, sizeof(::clarifai::analytics::OperatingSystem)},
  { 42, -1, sizeof(::clarifai::analytics::SDK)},
  { 49, -1, sizeof(::clarifai::analytics::State)},
  { 61, -1, sizeof(::clarifai::analytics::Analytics)},
  { 75, -1, sizeof(::clarifai::analytics::Event)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::analytics::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::analytics::_EventSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::analytics::_EventsCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::analytics::_HostAppInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::analytics::_OperatingSystem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::analytics::_SDK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::analytics::_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::analytics::_Analytics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::analytics::_Event_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fanalytics_2fresources_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(proto/clarifai/analytics/resources.pro"
  "to\022\022clarifai.analytics\032\037google/protobuf/"
  "timestamp.proto\"*\n\nDeviceInfo\022\r\n\005brand\030\001"
  " \001(\t\022\r\n\005model\030\002 \001(\t\"\221\002\n\014EventSummary\022\r\n\005"
  "count\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022:\n\nevent_type\030"
  "\003 \001(\0162&.clarifai.analytics.AnalyticsEven"
  "tType\022E\n\024network_connectivity\030\004 \001(\0162\'.cl"
  "arifai.analytics.NetworkConnectivity\0225\n\014"
  "running_mode\030\005 \001(\0162\037.clarifai.analytics."
  "RunningMode\022\020\n\010model_id\030\006 \001(\t\022\030\n\020model_v"
  "ersion_id\030\007 \001(\t\"\265\001\n\020EventsCollection\0224\n\020"
  "time_range_begin\030\001 \001(\0132\032.google.protobuf"
  ".Timestamp\0222\n\016time_range_end\030\002 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\0227\n\revent_summary\030"
  "\003 \003(\0132 .clarifai.analytics.EventSummary\""
  "E\n\013HostAppInfo\022\024\n\014build_number\030\001 \001(\t\022\017\n\007"
  "api_key\030\002 \001(\t\022\017\n\007version\030\003 \001(\t\"0\n\017Operat"
  "ingSystem\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001(\t"
  "\"%\n\003SDK\022\017\n\007version\030\001 \001(\t\022\r\n\005build\030\002 \001(\t\""
  "\336\001\n\005State\022\024\n\014country_code\030\001 \001(\t\022\024\n\014launc"
  "h_count\030\002 \001(\r\022\025\n\rlanguage_code\030\003 \001(\t\022\023\n\013"
  "token_count\030\004 \001(\004\022\030\n\020time_zone_offset\030\005 "
  "\001(\005\022\036\n\026time_zone_abbreviation\030\006 \001(\t\022C\n\023r"
  "unning_environment\030\007 \001(\0162&.clarifai.anal"
  "ytics.RunningEnvironment\"\255\003\n\tAnalytics\022\037"
  "\n\027batch_unique_identifier\030\001 \001(\t\0223\n\013devic"
  "e_info\030\002 \001(\0132\036.clarifai.analytics.Device"
  "Info\022\?\n\021events_collection\030\003 \003(\0132$.clarif"
  "ai.analytics.EventsCollection\0226\n\rhost_ap"
  "p_info\030\004 \001(\0132\037.clarifai.analytics.HostAp"
  "pInfo\022=\n\020operating_system\030\005 \001(\0132#.clarif"
  "ai.analytics.OperatingSystem\022(\n\005state\030\006 "
  "\001(\0132\031.clarifai.analytics.State\022\023\n\013system"
  "_uuid\030\007 \001(\t\022-\n\ttimestamp\030\010 \001(\0132\032.google."
  "protobuf.Timestamp\022$\n\003sdk\030\t \001(\0132\027.clarif"
  "ai.analytics.SDK\"\260\002\n\005Event\022\n\n\002id\030\001 \001(\t\022\014"
  "\n\004name\030\002 \001(\t\0224\n\004type\030\003 \001(\0162&.clarifai.an"
  "alytics.AnalyticsEventType\0225\n\014running_mo"
  "de\030\004 \001(\0162\037.clarifai.analytics.RunningMod"
  "e\022E\n\024network_connectivity\030\005 \001(\0162\'.clarif"
  "ai.analytics.NetworkConnectivity\022-\n\ttime"
  "stamp\030\006 \001(\0132\032.google.protobuf.Timestamp\022"
  "\020\n\010model_id\030\007 \001(\t\022\030\n\020model_version_id\030\010 "
  "\001(\t*\227\003\n\022AnalyticsEventType\022\026\n\022UNKNOWN_EV"
  "ENT_TYPE\020\000\022\016\n\nSAVE_MODEL\020\001\022\t\n\005TRAIN\020\002\022\013\n"
  "\007PREDICT\020\003\022\020\n\014SAVE_CONCEPT\020\004\022\022\n\016DELETE_C"
  "ONCEPT\020\005\022\016\n\nSAVE_INPUT\020\006\022\016\n\nLOAD_INPUT\020\007"
  "\022\025\n\021VISUAL_SIMILARITY\020\010\022\020\n\014LOAD_CONCEPT\020"
  "\t\022\020\n\014DELETE_INPUT\020\n\022\020\n\014DELETE_MODEL\020\013\022\016\n"
  "\nLOAD_MODEL\020\014\022\013\n\007WARNING\020\r\022\t\n\005ERROR\020\016\022\n\n"
  "\006LAUNCH\020\017\022\016\n\nFOREGROUND\020\020\022\016\n\nBACKGROUND\020"
  "\021\022\017\n\013TERMINATION\020\022\022\032\n\026AUTHENTICATION_GRA"
  "NTED\020\023\022\031\n\025AUTHENTICATION_DENIED\020\024\022\022\n\016MOD"
  "EL_DOWNLOAD\020\025*M\n\023NetworkConnectivity\022\023\n\017"
  "NO_CONNECTIVITY\020\000\022\010\n\004WIFI\020\001\022\014\n\010CELLULAR\020"
  "\002\022\t\n\005WIRED\020\003*>\n\013RunningMode\022\030\n\024UNKNOWN_R"
  "UNNING_MODE\020\000\022\t\n\005LOCAL\020\001\022\n\n\006REMOTE\020\002*V\n\022"
  "RunningEnvironment\022\037\n\033UNKNOWN_RUNNING_EN"
  "VIRONMENT\020\000\022\017\n\013DEVELOPMENT\020\001\022\016\n\nPRODUCTI"
  "ON\020\002B,\n\026com.clarifai.analyticsP\001Z\tanalyt"
  "ics\242\002\004CAIPb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto_sccs[9] = {
  &scc_info_Analytics_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
  &scc_info_DeviceInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
  &scc_info_Event_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
  &scc_info_EventSummary_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
  &scc_info_EventsCollection_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
  &scc_info_HostAppInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
  &scc_info_OperatingSystem_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
  &scc_info_SDK_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
  &scc_info_State_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto = {
  false, false, descriptor_table_protodef_proto_2fclarifai_2fanalytics_2fresources_2eproto, "proto/clarifai/analytics/resources.proto", 2418,
  &descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto_once, descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto_sccs, descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fanalytics_2fresources_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fanalytics_2fresources_2eproto, 9, file_level_enum_descriptors_proto_2fclarifai_2fanalytics_2fresources_2eproto, file_level_service_descriptors_proto_2fclarifai_2fanalytics_2fresources_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fclarifai_2fanalytics_2fresources_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto)), true);
namespace clarifai {
namespace analytics {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnalyticsEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fanalytics_2fresources_2eproto[0];
}
bool AnalyticsEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkConnectivity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fanalytics_2fresources_2eproto[1];
}
bool NetworkConnectivity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RunningMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fanalytics_2fresources_2eproto[2];
}
bool RunningMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RunningEnvironment_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fanalytics_2fresources_2eproto[3];
}
bool RunningEnvironment_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DeviceInfo::InitAsDefaultInstance() {
}
class DeviceInfo::_Internal {
 public:
};

DeviceInfo::DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.analytics.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brand().empty()) {
    brand_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_brand(),
      GetArena());
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model().empty()) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.analytics.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:clarifai.analytics.DeviceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  brand_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::ArenaDtor(void* object) {
  DeviceInfo* _this = reinterpret_cast< DeviceInfo* >(object);
  (void)_this;
}
void DeviceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceInfo& DeviceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  return *internal_default_instance();
}


void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.analytics.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brand_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string brand = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_brand();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.DeviceInfo.brand"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.DeviceInfo.model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.analytics.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string brand = 1;
  if (this->brand().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brand().data(), static_cast<int>(this->_internal_brand().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.DeviceInfo.brand");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_brand(), target);
  }

  // string model = 2;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.DeviceInfo.model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.analytics.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.analytics.DeviceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string brand = 1;
  if (this->brand().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brand());
  }

  // string model = 2;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.analytics.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.analytics.DeviceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.analytics.DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.analytics.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.brand().size() > 0) {
    _internal_set_brand(from._internal_brand());
  }
  if (from.model().size() > 0) {
    _internal_set_model(from._internal_model());
  }
}

void DeviceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.analytics.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.analytics.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  brand_.Swap(&other->brand_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventSummary::InitAsDefaultInstance() {
}
class EventSummary::_Internal {
 public:
};

EventSummary::EventSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.analytics.EventSummary)
}
EventSummary::EventSummary(const EventSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_id(),
      GetArena());
  }
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_version_id(),
      GetArena());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&running_mode_) -
    reinterpret_cast<char*>(&count_)) + sizeof(running_mode_));
  // @@protoc_insertion_point(copy_constructor:clarifai.analytics.EventSummary)
}

void EventSummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventSummary_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&running_mode_) -
      reinterpret_cast<char*>(&count_)) + sizeof(running_mode_));
}

EventSummary::~EventSummary() {
  // @@protoc_insertion_point(destructor:clarifai.analytics.EventSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventSummary::ArenaDtor(void* object) {
  EventSummary* _this = reinterpret_cast< EventSummary* >(object);
  (void)_this;
}
void EventSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventSummary& EventSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventSummary_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  return *internal_default_instance();
}


void EventSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.analytics.EventSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_version_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&running_mode_) -
      reinterpret_cast<char*>(&count_)) + sizeof(running_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.EventSummary.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.AnalyticsEventType event_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::clarifai::analytics::AnalyticsEventType>(val));
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.NetworkConnectivity network_connectivity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_network_connectivity(static_cast<::clarifai::analytics::NetworkConnectivity>(val));
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.RunningMode running_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_running_mode(static_cast<::clarifai::analytics::RunningMode>(val));
        } else goto handle_unusual;
        continue;
      // string model_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.EventSummary.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_version_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.EventSummary.model_version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.analytics.EventSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.EventSummary.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .clarifai.analytics.AnalyticsEventType event_type = 3;
  if (this->event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_event_type(), target);
  }

  // .clarifai.analytics.NetworkConnectivity network_connectivity = 4;
  if (this->network_connectivity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_network_connectivity(), target);
  }

  // .clarifai.analytics.RunningMode running_mode = 5;
  if (this->running_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_running_mode(), target);
  }

  // string model_id = 6;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.EventSummary.model_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_model_id(), target);
  }

  // string model_version_id = 7;
  if (this->model_version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.EventSummary.model_version_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_model_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.analytics.EventSummary)
  return target;
}

size_t EventSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.analytics.EventSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string model_id = 6;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_version_id = 7;
  if (this->model_version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // uint32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  // .clarifai.analytics.AnalyticsEventType event_type = 3;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  // .clarifai.analytics.NetworkConnectivity network_connectivity = 4;
  if (this->network_connectivity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_network_connectivity());
  }

  // .clarifai.analytics.RunningMode running_mode = 5;
  if (this->running_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_running_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.analytics.EventSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const EventSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.analytics.EventSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.analytics.EventSummary)
    MergeFrom(*source);
  }
}

void EventSummary::MergeFrom(const EventSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.analytics.EventSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.model_id().size() > 0) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (from.model_version_id().size() > 0) {
    _internal_set_model_version_id(from._internal_model_version_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.event_type() != 0) {
    _internal_set_event_type(from._internal_event_type());
  }
  if (from.network_connectivity() != 0) {
    _internal_set_network_connectivity(from._internal_network_connectivity());
  }
  if (from.running_mode() != 0) {
    _internal_set_running_mode(from._internal_running_mode());
  }
}

void EventSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.analytics.EventSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSummary::CopyFrom(const EventSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.analytics.EventSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSummary::IsInitialized() const {
  return true;
}

void EventSummary::InternalSwap(EventSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_version_id_.Swap(&other->model_version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventSummary, running_mode_)
      + sizeof(EventSummary::running_mode_)
      - PROTOBUF_FIELD_OFFSET(EventSummary, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventsCollection::InitAsDefaultInstance() {
  ::clarifai::analytics::_EventsCollection_default_instance_._instance.get_mutable()->time_range_begin_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::analytics::_EventsCollection_default_instance_._instance.get_mutable()->time_range_end_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class EventsCollection::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time_range_begin(const EventsCollection* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time_range_end(const EventsCollection* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
EventsCollection::_Internal::time_range_begin(const EventsCollection* msg) {
  return *msg->time_range_begin_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
EventsCollection::_Internal::time_range_end(const EventsCollection* msg) {
  return *msg->time_range_end_;
}
void EventsCollection::clear_time_range_begin() {
  if (GetArena() == nullptr && time_range_begin_ != nullptr) {
    delete time_range_begin_;
  }
  time_range_begin_ = nullptr;
}
void EventsCollection::clear_time_range_end() {
  if (GetArena() == nullptr && time_range_end_ != nullptr) {
    delete time_range_end_;
  }
  time_range_end_ = nullptr;
}
EventsCollection::EventsCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  event_summary_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.analytics.EventsCollection)
}
EventsCollection::EventsCollection(const EventsCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      event_summary_(from.event_summary_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_range_begin()) {
    time_range_begin_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_range_begin_);
  } else {
    time_range_begin_ = nullptr;
  }
  if (from._internal_has_time_range_end()) {
    time_range_end_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_range_end_);
  } else {
    time_range_end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.analytics.EventsCollection)
}

void EventsCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventsCollection_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  ::memset(&time_range_begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_range_end_) -
      reinterpret_cast<char*>(&time_range_begin_)) + sizeof(time_range_end_));
}

EventsCollection::~EventsCollection() {
  // @@protoc_insertion_point(destructor:clarifai.analytics.EventsCollection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventsCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete time_range_begin_;
  if (this != internal_default_instance()) delete time_range_end_;
}

void EventsCollection::ArenaDtor(void* object) {
  EventsCollection* _this = reinterpret_cast< EventsCollection* >(object);
  (void)_this;
}
void EventsCollection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventsCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventsCollection& EventsCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventsCollection_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  return *internal_default_instance();
}


void EventsCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.analytics.EventsCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_summary_.Clear();
  if (GetArena() == nullptr && time_range_begin_ != nullptr) {
    delete time_range_begin_;
  }
  time_range_begin_ = nullptr;
  if (GetArena() == nullptr && time_range_end_ != nullptr) {
    delete time_range_end_;
  }
  time_range_end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventsCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_range_begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_range_begin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_range_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_range_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.analytics.EventSummary event_summary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event_summary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventsCollection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.analytics.EventsCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_range_begin = 1;
  if (this->has_time_range_begin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time_range_begin(this), target, stream);
  }

  // .google.protobuf.Timestamp time_range_end = 2;
  if (this->has_time_range_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::time_range_end(this), target, stream);
  }

  // repeated .clarifai.analytics.EventSummary event_summary = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_event_summary_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_event_summary(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.analytics.EventsCollection)
  return target;
}

size_t EventsCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.analytics.EventsCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.analytics.EventSummary event_summary = 3;
  total_size += 1UL * this->_internal_event_summary_size();
  for (const auto& msg : this->event_summary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp time_range_begin = 1;
  if (this->has_time_range_begin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_range_begin_);
  }

  // .google.protobuf.Timestamp time_range_end = 2;
  if (this->has_time_range_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_range_end_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventsCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.analytics.EventsCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const EventsCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventsCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.analytics.EventsCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.analytics.EventsCollection)
    MergeFrom(*source);
  }
}

void EventsCollection::MergeFrom(const EventsCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.analytics.EventsCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_summary_.MergeFrom(from.event_summary_);
  if (from.has_time_range_begin()) {
    _internal_mutable_time_range_begin()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time_range_begin());
  }
  if (from.has_time_range_end()) {
    _internal_mutable_time_range_end()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time_range_end());
  }
}

void EventsCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.analytics.EventsCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventsCollection::CopyFrom(const EventsCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.analytics.EventsCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsCollection::IsInitialized() const {
  return true;
}

void EventsCollection::InternalSwap(EventsCollection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  event_summary_.InternalSwap(&other->event_summary_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventsCollection, time_range_end_)
      + sizeof(EventsCollection::time_range_end_)
      - PROTOBUF_FIELD_OFFSET(EventsCollection, time_range_begin_)>(
          reinterpret_cast<char*>(&time_range_begin_),
          reinterpret_cast<char*>(&other->time_range_begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventsCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostAppInfo::InitAsDefaultInstance() {
}
class HostAppInfo::_Internal {
 public:
};

HostAppInfo::HostAppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.analytics.HostAppInfo)
}
HostAppInfo::HostAppInfo(const HostAppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  build_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_build_number().empty()) {
    build_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_build_number(),
      GetArena());
  }
  api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_api_key().empty()) {
    api_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_api_key(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.analytics.HostAppInfo)
}

void HostAppInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostAppInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  build_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HostAppInfo::~HostAppInfo() {
  // @@protoc_insertion_point(destructor:clarifai.analytics.HostAppInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HostAppInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  build_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostAppInfo::ArenaDtor(void* object) {
  HostAppInfo* _this = reinterpret_cast< HostAppInfo* >(object);
  (void)_this;
}
void HostAppInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostAppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostAppInfo& HostAppInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostAppInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  return *internal_default_instance();
}


void HostAppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.analytics.HostAppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  build_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  api_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostAppInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string build_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_build_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.HostAppInfo.build_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string api_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_api_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.HostAppInfo.api_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.HostAppInfo.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostAppInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.analytics.HostAppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string build_number = 1;
  if (this->build_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_build_number().data(), static_cast<int>(this->_internal_build_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.HostAppInfo.build_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_build_number(), target);
  }

  // string api_key = 2;
  if (this->api_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_key().data(), static_cast<int>(this->_internal_api_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.HostAppInfo.api_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_api_key(), target);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.HostAppInfo.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.analytics.HostAppInfo)
  return target;
}

size_t HostAppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.analytics.HostAppInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string build_number = 1;
  if (this->build_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_build_number());
  }

  // string api_key = 2;
  if (this->api_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_key());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostAppInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.analytics.HostAppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HostAppInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostAppInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.analytics.HostAppInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.analytics.HostAppInfo)
    MergeFrom(*source);
  }
}

void HostAppInfo::MergeFrom(const HostAppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.analytics.HostAppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.build_number().size() > 0) {
    _internal_set_build_number(from._internal_build_number());
  }
  if (from.api_key().size() > 0) {
    _internal_set_api_key(from._internal_api_key());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
}

void HostAppInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.analytics.HostAppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostAppInfo::CopyFrom(const HostAppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.analytics.HostAppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostAppInfo::IsInitialized() const {
  return true;
}

void HostAppInfo::InternalSwap(HostAppInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  build_number_.Swap(&other->build_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  api_key_.Swap(&other->api_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HostAppInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OperatingSystem::InitAsDefaultInstance() {
}
class OperatingSystem::_Internal {
 public:
};

OperatingSystem::OperatingSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.analytics.OperatingSystem)
}
OperatingSystem::OperatingSystem(const OperatingSystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.analytics.OperatingSystem)
}

void OperatingSystem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperatingSystem_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OperatingSystem::~OperatingSystem() {
  // @@protoc_insertion_point(destructor:clarifai.analytics.OperatingSystem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperatingSystem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OperatingSystem::ArenaDtor(void* object) {
  OperatingSystem* _this = reinterpret_cast< OperatingSystem* >(object);
  (void)_this;
}
void OperatingSystem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperatingSystem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperatingSystem& OperatingSystem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperatingSystem_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  return *internal_default_instance();
}


void OperatingSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.analytics.OperatingSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperatingSystem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.OperatingSystem.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.OperatingSystem.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperatingSystem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.analytics.OperatingSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.OperatingSystem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.OperatingSystem.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.analytics.OperatingSystem)
  return target;
}

size_t OperatingSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.analytics.OperatingSystem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperatingSystem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.analytics.OperatingSystem)
  GOOGLE_DCHECK_NE(&from, this);
  const OperatingSystem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperatingSystem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.analytics.OperatingSystem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.analytics.OperatingSystem)
    MergeFrom(*source);
  }
}

void OperatingSystem::MergeFrom(const OperatingSystem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.analytics.OperatingSystem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
}

void OperatingSystem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.analytics.OperatingSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatingSystem::CopyFrom(const OperatingSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.analytics.OperatingSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatingSystem::IsInitialized() const {
  return true;
}

void OperatingSystem::InternalSwap(OperatingSystem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OperatingSystem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SDK::InitAsDefaultInstance() {
}
class SDK::_Internal {
 public:
};

SDK::SDK(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.analytics.SDK)
}
SDK::SDK(const SDK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_build().empty()) {
    build_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_build(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.analytics.SDK)
}

void SDK::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SDK_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SDK::~SDK() {
  // @@protoc_insertion_point(destructor:clarifai.analytics.SDK)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SDK::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SDK::ArenaDtor(void* object) {
  SDK* _this = reinterpret_cast< SDK* >(object);
  (void)_this;
}
void SDK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SDK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SDK& SDK::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SDK_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  return *internal_default_instance();
}


void SDK::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.analytics.SDK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  build_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.SDK.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string build = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_build();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.SDK.build"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SDK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.analytics.SDK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.SDK.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string build = 2;
  if (this->build().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_build().data(), static_cast<int>(this->_internal_build().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.SDK.build");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_build(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.analytics.SDK)
  return target;
}

size_t SDK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.analytics.SDK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string build = 2;
  if (this->build().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_build());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SDK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.analytics.SDK)
  GOOGLE_DCHECK_NE(&from, this);
  const SDK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SDK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.analytics.SDK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.analytics.SDK)
    MergeFrom(*source);
  }
}

void SDK::MergeFrom(const SDK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.analytics.SDK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.build().size() > 0) {
    _internal_set_build(from._internal_build());
  }
}

void SDK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.analytics.SDK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDK::CopyFrom(const SDK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.analytics.SDK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDK::IsInitialized() const {
  return true;
}

void SDK::InternalSwap(SDK* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  build_.Swap(&other->build_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SDK::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void State::InitAsDefaultInstance() {
}
class State::_Internal {
 public:
};

State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.analytics.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country_code().empty()) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_country_code(),
      GetArena());
  }
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language_code().empty()) {
    language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_code(),
      GetArena());
  }
  time_zone_abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_zone_abbreviation().empty()) {
    time_zone_abbreviation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_time_zone_abbreviation(),
      GetArena());
  }
  ::memcpy(&launch_count_, &from.launch_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&running_environment_) -
    reinterpret_cast<char*>(&launch_count_)) + sizeof(running_environment_));
  // @@protoc_insertion_point(copy_constructor:clarifai.analytics.State)
}

void State::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_State_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_zone_abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&launch_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&running_environment_) -
      reinterpret_cast<char*>(&launch_count_)) + sizeof(running_environment_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:clarifai.analytics.State)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void State::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_zone_abbreviation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void State::ArenaDtor(void* object) {
  State* _this = reinterpret_cast< State* >(object);
  (void)_this;
}
void State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const State& State::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_State_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.analytics.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  country_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_zone_abbreviation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&launch_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&running_environment_) -
      reinterpret_cast<char*>(&launch_count_)) + sizeof(running_environment_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string country_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.State.country_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 launch_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          launch_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.State.language_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 token_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          token_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time_zone_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          time_zone_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time_zone_abbreviation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_time_zone_abbreviation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.State.time_zone_abbreviation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.RunningEnvironment running_environment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_running_environment(static_cast<::clarifai::analytics::RunningEnvironment>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* State::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.analytics.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string country_code = 1;
  if (this->country_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.State.country_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country_code(), target);
  }

  // uint32 launch_count = 2;
  if (this->launch_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_launch_count(), target);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.State.language_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_code(), target);
  }

  // uint64 token_count = 4;
  if (this->token_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_token_count(), target);
  }

  // int32 time_zone_offset = 5;
  if (this->time_zone_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_time_zone_offset(), target);
  }

  // string time_zone_abbreviation = 6;
  if (this->time_zone_abbreviation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_zone_abbreviation().data(), static_cast<int>(this->_internal_time_zone_abbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.State.time_zone_abbreviation");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_time_zone_abbreviation(), target);
  }

  // .clarifai.analytics.RunningEnvironment running_environment = 7;
  if (this->running_environment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_running_environment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.analytics.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.analytics.State)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string country_code = 1;
  if (this->country_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_code());
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  // string time_zone_abbreviation = 6;
  if (this->time_zone_abbreviation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_zone_abbreviation());
  }

  // uint32 launch_count = 2;
  if (this->launch_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_launch_count());
  }

  // int32 time_zone_offset = 5;
  if (this->time_zone_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_zone_offset());
  }

  // uint64 token_count = 4;
  if (this->token_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_token_count());
  }

  // .clarifai.analytics.RunningEnvironment running_environment = 7;
  if (this->running_environment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_running_environment());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.analytics.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<State>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.analytics.State)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.analytics.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.analytics.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.country_code().size() > 0) {
    _internal_set_country_code(from._internal_country_code());
  }
  if (from.language_code().size() > 0) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (from.time_zone_abbreviation().size() > 0) {
    _internal_set_time_zone_abbreviation(from._internal_time_zone_abbreviation());
  }
  if (from.launch_count() != 0) {
    _internal_set_launch_count(from._internal_launch_count());
  }
  if (from.time_zone_offset() != 0) {
    _internal_set_time_zone_offset(from._internal_time_zone_offset());
  }
  if (from.token_count() != 0) {
    _internal_set_token_count(from._internal_token_count());
  }
  if (from.running_environment() != 0) {
    _internal_set_running_environment(from._internal_running_environment());
  }
}

void State::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.analytics.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.analytics.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_zone_abbreviation_.Swap(&other->time_zone_abbreviation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(State, running_environment_)
      + sizeof(State::running_environment_)
      - PROTOBUF_FIELD_OFFSET(State, launch_count_)>(
          reinterpret_cast<char*>(&launch_count_),
          reinterpret_cast<char*>(&other->launch_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Analytics::InitAsDefaultInstance() {
  ::clarifai::analytics::_Analytics_default_instance_._instance.get_mutable()->device_info_ = const_cast< ::clarifai::analytics::DeviceInfo*>(
      ::clarifai::analytics::DeviceInfo::internal_default_instance());
  ::clarifai::analytics::_Analytics_default_instance_._instance.get_mutable()->host_app_info_ = const_cast< ::clarifai::analytics::HostAppInfo*>(
      ::clarifai::analytics::HostAppInfo::internal_default_instance());
  ::clarifai::analytics::_Analytics_default_instance_._instance.get_mutable()->operating_system_ = const_cast< ::clarifai::analytics::OperatingSystem*>(
      ::clarifai::analytics::OperatingSystem::internal_default_instance());
  ::clarifai::analytics::_Analytics_default_instance_._instance.get_mutable()->state_ = const_cast< ::clarifai::analytics::State*>(
      ::clarifai::analytics::State::internal_default_instance());
  ::clarifai::analytics::_Analytics_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::analytics::_Analytics_default_instance_._instance.get_mutable()->sdk_ = const_cast< ::clarifai::analytics::SDK*>(
      ::clarifai::analytics::SDK::internal_default_instance());
}
class Analytics::_Internal {
 public:
  static const ::clarifai::analytics::DeviceInfo& device_info(const Analytics* msg);
  static const ::clarifai::analytics::HostAppInfo& host_app_info(const Analytics* msg);
  static const ::clarifai::analytics::OperatingSystem& operating_system(const Analytics* msg);
  static const ::clarifai::analytics::State& state(const Analytics* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Analytics* msg);
  static const ::clarifai::analytics::SDK& sdk(const Analytics* msg);
};

const ::clarifai::analytics::DeviceInfo&
Analytics::_Internal::device_info(const Analytics* msg) {
  return *msg->device_info_;
}
const ::clarifai::analytics::HostAppInfo&
Analytics::_Internal::host_app_info(const Analytics* msg) {
  return *msg->host_app_info_;
}
const ::clarifai::analytics::OperatingSystem&
Analytics::_Internal::operating_system(const Analytics* msg) {
  return *msg->operating_system_;
}
const ::clarifai::analytics::State&
Analytics::_Internal::state(const Analytics* msg) {
  return *msg->state_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Analytics::_Internal::timestamp(const Analytics* msg) {
  return *msg->timestamp_;
}
const ::clarifai::analytics::SDK&
Analytics::_Internal::sdk(const Analytics* msg) {
  return *msg->sdk_;
}
void Analytics::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Analytics::Analytics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_collection_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.analytics.Analytics)
}
Analytics::Analytics(const Analytics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_collection_(from.events_collection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  batch_unique_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_unique_identifier().empty()) {
    batch_unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_batch_unique_identifier(),
      GetArena());
  }
  system_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system_uuid().empty()) {
    system_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_system_uuid(),
      GetArena());
  }
  if (from._internal_has_device_info()) {
    device_info_ = new ::clarifai::analytics::DeviceInfo(*from.device_info_);
  } else {
    device_info_ = nullptr;
  }
  if (from._internal_has_host_app_info()) {
    host_app_info_ = new ::clarifai::analytics::HostAppInfo(*from.host_app_info_);
  } else {
    host_app_info_ = nullptr;
  }
  if (from._internal_has_operating_system()) {
    operating_system_ = new ::clarifai::analytics::OperatingSystem(*from.operating_system_);
  } else {
    operating_system_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::clarifai::analytics::State(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_sdk()) {
    sdk_ = new ::clarifai::analytics::SDK(*from.sdk_);
  } else {
    sdk_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.analytics.Analytics)
}

void Analytics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Analytics_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  batch_unique_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sdk_) -
      reinterpret_cast<char*>(&device_info_)) + sizeof(sdk_));
}

Analytics::~Analytics() {
  // @@protoc_insertion_point(destructor:clarifai.analytics.Analytics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Analytics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  batch_unique_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_info_;
  if (this != internal_default_instance()) delete host_app_info_;
  if (this != internal_default_instance()) delete operating_system_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete sdk_;
}

void Analytics::ArenaDtor(void* object) {
  Analytics* _this = reinterpret_cast< Analytics* >(object);
  (void)_this;
}
void Analytics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Analytics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Analytics& Analytics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Analytics_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Analytics::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.analytics.Analytics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_collection_.Clear();
  batch_unique_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  system_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && device_info_ != nullptr) {
    delete device_info_;
  }
  device_info_ = nullptr;
  if (GetArena() == nullptr && host_app_info_ != nullptr) {
    delete host_app_info_;
  }
  host_app_info_ = nullptr;
  if (GetArena() == nullptr && operating_system_ != nullptr) {
    delete operating_system_;
  }
  operating_system_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArena() == nullptr && sdk_ != nullptr) {
    delete sdk_;
  }
  sdk_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Analytics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string batch_unique_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_batch_unique_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.Analytics.batch_unique_identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.DeviceInfo device_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.analytics.EventsCollection events_collection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events_collection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.HostAppInfo host_app_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_app_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.OperatingSystem operating_system = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_operating_system(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.State state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string system_uuid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_system_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.Analytics.system_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.SDK sdk = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sdk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Analytics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.analytics.Analytics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string batch_unique_identifier = 1;
  if (this->batch_unique_identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batch_unique_identifier().data(), static_cast<int>(this->_internal_batch_unique_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.Analytics.batch_unique_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_batch_unique_identifier(), target);
  }

  // .clarifai.analytics.DeviceInfo device_info = 2;
  if (this->has_device_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::device_info(this), target, stream);
  }

  // repeated .clarifai.analytics.EventsCollection events_collection = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_collection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_events_collection(i), target, stream);
  }

  // .clarifai.analytics.HostAppInfo host_app_info = 4;
  if (this->has_host_app_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::host_app_info(this), target, stream);
  }

  // .clarifai.analytics.OperatingSystem operating_system = 5;
  if (this->has_operating_system()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::operating_system(this), target, stream);
  }

  // .clarifai.analytics.State state = 6;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::state(this), target, stream);
  }

  // string system_uuid = 7;
  if (this->system_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system_uuid().data(), static_cast<int>(this->_internal_system_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.Analytics.system_uuid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_system_uuid(), target);
  }

  // .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::timestamp(this), target, stream);
  }

  // .clarifai.analytics.SDK sdk = 9;
  if (this->has_sdk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sdk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.analytics.Analytics)
  return target;
}

size_t Analytics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.analytics.Analytics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.analytics.EventsCollection events_collection = 3;
  total_size += 1UL * this->_internal_events_collection_size();
  for (const auto& msg : this->events_collection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string batch_unique_identifier = 1;
  if (this->batch_unique_identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batch_unique_identifier());
  }

  // string system_uuid = 7;
  if (this->system_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system_uuid());
  }

  // .clarifai.analytics.DeviceInfo device_info = 2;
  if (this->has_device_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_info_);
  }

  // .clarifai.analytics.HostAppInfo host_app_info = 4;
  if (this->has_host_app_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_app_info_);
  }

  // .clarifai.analytics.OperatingSystem operating_system = 5;
  if (this->has_operating_system()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *operating_system_);
  }

  // .clarifai.analytics.State state = 6;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .clarifai.analytics.SDK sdk = 9;
  if (this->has_sdk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sdk_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Analytics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.analytics.Analytics)
  GOOGLE_DCHECK_NE(&from, this);
  const Analytics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Analytics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.analytics.Analytics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.analytics.Analytics)
    MergeFrom(*source);
  }
}

void Analytics::MergeFrom(const Analytics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.analytics.Analytics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_collection_.MergeFrom(from.events_collection_);
  if (from.batch_unique_identifier().size() > 0) {
    _internal_set_batch_unique_identifier(from._internal_batch_unique_identifier());
  }
  if (from.system_uuid().size() > 0) {
    _internal_set_system_uuid(from._internal_system_uuid());
  }
  if (from.has_device_info()) {
    _internal_mutable_device_info()->::clarifai::analytics::DeviceInfo::MergeFrom(from._internal_device_info());
  }
  if (from.has_host_app_info()) {
    _internal_mutable_host_app_info()->::clarifai::analytics::HostAppInfo::MergeFrom(from._internal_host_app_info());
  }
  if (from.has_operating_system()) {
    _internal_mutable_operating_system()->::clarifai::analytics::OperatingSystem::MergeFrom(from._internal_operating_system());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::clarifai::analytics::State::MergeFrom(from._internal_state());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.has_sdk()) {
    _internal_mutable_sdk()->::clarifai::analytics::SDK::MergeFrom(from._internal_sdk());
  }
}

void Analytics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.analytics.Analytics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Analytics::CopyFrom(const Analytics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.analytics.Analytics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Analytics::IsInitialized() const {
  return true;
}

void Analytics::InternalSwap(Analytics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  events_collection_.InternalSwap(&other->events_collection_);
  batch_unique_identifier_.Swap(&other->batch_unique_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  system_uuid_.Swap(&other->system_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Analytics, sdk_)
      + sizeof(Analytics::sdk_)
      - PROTOBUF_FIELD_OFFSET(Analytics, device_info_)>(
          reinterpret_cast<char*>(&device_info_),
          reinterpret_cast<char*>(&other->device_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Analytics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event::InitAsDefaultInstance() {
  ::clarifai::analytics::_Event_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Event::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Event* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Event::_Internal::timestamp(const Event* msg) {
  return *msg->timestamp_;
}
void Event::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.analytics.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_id(),
      GetArena());
  }
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_version_id(),
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_connectivity_) -
    reinterpret_cast<char*>(&type_)) + sizeof(network_connectivity_));
  // @@protoc_insertion_point(copy_constructor:clarifai.analytics.Event)
}

void Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_connectivity_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(network_connectivity_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:clarifai.analytics.Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_proto_2fclarifai_2fanalytics_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.analytics.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_version_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_connectivity_) -
      reinterpret_cast<char*>(&type_)) + sizeof(network_connectivity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.Event.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.Event.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.AnalyticsEventType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::clarifai::analytics::AnalyticsEventType>(val));
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.RunningMode running_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_running_mode(static_cast<::clarifai::analytics::RunningMode>(val));
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.NetworkConnectivity network_connectivity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_network_connectivity(static_cast<::clarifai::analytics::NetworkConnectivity>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.Event.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_version_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.Event.model_version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.analytics.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.Event.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.Event.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .clarifai.analytics.AnalyticsEventType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .clarifai.analytics.RunningMode running_mode = 4;
  if (this->running_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_running_mode(), target);
  }

  // .clarifai.analytics.NetworkConnectivity network_connectivity = 5;
  if (this->network_connectivity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_network_connectivity(), target);
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timestamp(this), target, stream);
  }

  // string model_id = 7;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.Event.model_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_model_id(), target);
  }

  // string model_version_id = 8;
  if (this->model_version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.Event.model_version_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_model_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.analytics.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.analytics.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string model_id = 7;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_version_id = 8;
  if (this->model_version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .clarifai.analytics.AnalyticsEventType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .clarifai.analytics.RunningMode running_mode = 4;
  if (this->running_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_running_mode());
  }

  // .clarifai.analytics.NetworkConnectivity network_connectivity = 5;
  if (this->network_connectivity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_network_connectivity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.analytics.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.analytics.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.analytics.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.analytics.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.model_id().size() > 0) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (from.model_version_id().size() > 0) {
    _internal_set_model_version_id(from._internal_model_version_id());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.running_mode() != 0) {
    _internal_set_running_mode(from._internal_running_mode());
  }
  if (from.network_connectivity() != 0) {
    _internal_set_network_connectivity(from._internal_network_connectivity());
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.analytics.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.analytics.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_version_id_.Swap(&other->model_version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, network_connectivity_)
      + sizeof(Event::network_connectivity_)
      - PROTOBUF_FIELD_OFFSET(Event, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace analytics
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::analytics::DeviceInfo* Arena::CreateMaybeMessage< ::clarifai::analytics::DeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::analytics::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::analytics::EventSummary* Arena::CreateMaybeMessage< ::clarifai::analytics::EventSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::analytics::EventSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::analytics::EventsCollection* Arena::CreateMaybeMessage< ::clarifai::analytics::EventsCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::analytics::EventsCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::analytics::HostAppInfo* Arena::CreateMaybeMessage< ::clarifai::analytics::HostAppInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::analytics::HostAppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::analytics::OperatingSystem* Arena::CreateMaybeMessage< ::clarifai::analytics::OperatingSystem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::analytics::OperatingSystem >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::analytics::SDK* Arena::CreateMaybeMessage< ::clarifai::analytics::SDK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::analytics::SDK >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::analytics::State* Arena::CreateMaybeMessage< ::clarifai::analytics::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::analytics::State >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::analytics::Analytics* Arena::CreateMaybeMessage< ::clarifai::analytics::Analytics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::analytics::Analytics >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::analytics::Event* Arena::CreateMaybeMessage< ::clarifai::analytics::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::analytics::Event >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
