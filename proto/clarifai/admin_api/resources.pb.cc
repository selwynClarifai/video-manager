// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/admin_api/resources.proto

#include "proto/clarifai/admin_api/resources.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Email_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonthlyCharge_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PricingTiers_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tier_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto;
namespace clarifai {
namespace admin_api {
class CycleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cycle> _instance;
} _Cycle_default_instance_;
class OnetimeChargeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnetimeCharge> _instance;
} _OnetimeCharge_default_instance_;
class CreditDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Credit> _instance;
} _Credit_default_instance_;
class TierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tier> _instance;
} _Tier_default_instance_;
class PricingTiersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PricingTiers> _instance;
} _PricingTiers_default_instance_;
class MonthlyChargeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonthlyCharge> _instance;
} _MonthlyCharge_default_instance_;
class PlanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Plan> _instance;
} _Plan_default_instance_;
class RuntimeConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuntimeConfig> _instance;
} _RuntimeConfig_default_instance_;
class SignupCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignupCode> _instance;
} _SignupCode_default_instance_;
class ScheduleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Schedule> _instance;
} _Schedule_default_instance_;
class ScheduledPlansDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScheduledPlans> _instance;
} _ScheduledPlans_default_instance_;
class ThrottleByPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThrottleByPath> _instance;
} _ThrottleByPath_default_instance_;
class EmailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Email> _instance;
} _Email_default_instance_;
class UserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<User> _instance;
} _User_default_instance_;
}  // namespace admin_api
}  // namespace clarifai
static void InitDefaultsscc_info_Credit_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::admin_api::_Credit_default_instance_;
    new (ptr) ::clarifai::admin_api::Credit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::admin_api::Credit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Credit_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Credit_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_Cycle_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::admin_api::_Cycle_default_instance_;
    new (ptr) ::clarifai::admin_api::Cycle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::admin_api::Cycle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Cycle_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Cycle_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto}, {
      &scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_Email_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::admin_api::_Email_default_instance_;
    new (ptr) ::clarifai::admin_api::Email();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::admin_api::Email::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Email_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Email_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto}, {
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_MonthlyCharge_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::admin_api::_MonthlyCharge_default_instance_;
    new (ptr) ::clarifai::admin_api::MonthlyCharge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::admin_api::MonthlyCharge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonthlyCharge_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MonthlyCharge_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_OnetimeCharge_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::admin_api::_OnetimeCharge_default_instance_;
    new (ptr) ::clarifai::admin_api::OnetimeCharge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::admin_api::OnetimeCharge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OnetimeCharge_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OnetimeCharge_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_Plan_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::admin_api::_Plan_default_instance_;
    new (ptr) ::clarifai::admin_api::Plan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::admin_api::Plan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Plan_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Plan_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto}, {
      &scc_info_PricingTiers_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
      &scc_info_MonthlyCharge_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PricingTiers_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::admin_api::_PricingTiers_default_instance_;
    new (ptr) ::clarifai::admin_api::PricingTiers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::admin_api::PricingTiers::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PricingTiers_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PricingTiers_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto}, {
      &scc_info_Tier_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_RuntimeConfig_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::admin_api::_RuntimeConfig_default_instance_;
    new (ptr) ::clarifai::admin_api::RuntimeConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::admin_api::RuntimeConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RuntimeConfig_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RuntimeConfig_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_Schedule_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::admin_api::_Schedule_default_instance_;
    new (ptr) ::clarifai::admin_api::Schedule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::admin_api::Schedule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Schedule_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Schedule_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ScheduledPlans_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::admin_api::_ScheduledPlans_default_instance_;
    new (ptr) ::clarifai::admin_api::ScheduledPlans();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::admin_api::ScheduledPlans::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScheduledPlans_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScheduledPlans_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_SignupCode_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::admin_api::_SignupCode_default_instance_;
    new (ptr) ::clarifai::admin_api::SignupCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::admin_api::SignupCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignupCode_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SignupCode_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ThrottleByPath_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::admin_api::_ThrottleByPath_default_instance_;
    new (ptr) ::clarifai::admin_api::ThrottleByPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::admin_api::ThrottleByPath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ThrottleByPath_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ThrottleByPath_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_Tier_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::admin_api::_Tier_default_instance_;
    new (ptr) ::clarifai::admin_api::Tier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::admin_api::Tier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tier_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Tier_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto}, {}};

static void InitDefaultsscc_info_User_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::admin_api::_User_default_instance_;
    new (ptr) ::clarifai::admin_api::User();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::admin_api::User::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_User_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_User_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto}, {
      &scc_info_Email_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Cycle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Cycle, cycle_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Cycle, start_date_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Cycle, end_date_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Cycle, reset_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::OnetimeCharge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::OnetimeCharge, charge_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::OnetimeCharge, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::OnetimeCharge, invoice_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::OnetimeCharge, dollars_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::OnetimeCharge, bill_immediately_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::OnetimeCharge, notes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Credit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Credit, op_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Credit, number_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Credit, notes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Credit, op_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Tier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Tier, number_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Tier, price_per_op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::PricingTiers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::PricingTiers, op_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::PricingTiers, monthly_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::PricingTiers, lifetime_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::PricingTiers, op_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::MonthlyCharge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::MonthlyCharge, price_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::MonthlyCharge, notes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Plan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Plan, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Plan, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Plan, pricing_tiers_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Plan, monthly_charges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::RuntimeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::RuntimeConfig, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::RuntimeConfig, plan_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::RuntimeConfig, user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::RuntimeConfig, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::RuntimeConfig, modified_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::RuntimeConfig, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::SignupCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::SignupCode, plan_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::SignupCode, code_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::SignupCode, expires_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Schedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Schedule, time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Schedule, notes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::ScheduledPlans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::ScheduledPlans, plan_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::ScheduledPlans, time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::ScheduledPlans, notes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::ScheduledPlans, plan_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::ThrottleByPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::ThrottleByPath, v2_path_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::ThrottleByPath, throttle_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::ThrottleByPath, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::ThrottleByPath, modified_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Email, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Email, email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Email, primary_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::Email, verified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::User, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::User, v2_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::User, first_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::User, last_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::User, company_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::User, bill_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::User, emails_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::User, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::admin_api::User, recent_apps_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clarifai::admin_api::Cycle)},
  { 9, -1, sizeof(::clarifai::admin_api::OnetimeCharge)},
  { 20, -1, sizeof(::clarifai::admin_api::Credit)},
  { 29, -1, sizeof(::clarifai::admin_api::Tier)},
  { 36, -1, sizeof(::clarifai::admin_api::PricingTiers)},
  { 45, -1, sizeof(::clarifai::admin_api::MonthlyCharge)},
  { 52, -1, sizeof(::clarifai::admin_api::Plan)},
  { 61, -1, sizeof(::clarifai::admin_api::RuntimeConfig)},
  { 72, -1, sizeof(::clarifai::admin_api::SignupCode)},
  { 80, -1, sizeof(::clarifai::admin_api::Schedule)},
  { 87, -1, sizeof(::clarifai::admin_api::ScheduledPlans)},
  { 96, -1, sizeof(::clarifai::admin_api::ThrottleByPath)},
  { 105, -1, sizeof(::clarifai::admin_api::Email)},
  { 113, -1, sizeof(::clarifai::admin_api::User)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::admin_api::_Cycle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::admin_api::_OnetimeCharge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::admin_api::_Credit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::admin_api::_Tier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::admin_api::_PricingTiers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::admin_api::_MonthlyCharge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::admin_api::_Plan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::admin_api::_RuntimeConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::admin_api::_SignupCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::admin_api::_Schedule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::admin_api::_ScheduledPlans_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::admin_api::_ThrottleByPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::admin_api::_Email_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::admin_api::_User_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(proto/clarifai/admin_api/resources.pro"
  "to\022\022clarifai.admin_api\032\"proto/clarifai/a"
  "pi/resources.proto\032)proto/clarifai/api/u"
  "tils/extensions.proto\032\034google/protobuf/s"
  "truct.proto\032\037google/protobuf/timestamp.p"
  "roto\032\036google/protobuf/wrappers.proto\"\303\001\n"
  "\005Cycle\022.\n\010cycle_id\030\001 \001(\0132\034.google.protob"
  "uf.UInt32Value\022.\n\nstart_date\030\002 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\022,\n\010end_date\030\003 \001(\013"
  "2\032.google.protobuf.Timestamp\022,\n\010reset_at"
  "\030\004 \001(\0132\032.google.protobuf.Timestamp\"\274\001\n\rO"
  "netimeCharge\022\021\n\tcharge_id\030\001 \001(\t\022.\n\ncreat"
  "ed_at\030\002 \001(\0132\032.google.protobuf.Timestamp\022"
  "\022\n\ninvoice_id\030\003 \001(\t\022\017\n\007dollars\030\004 \001(\001\0224\n\020"
  "bill_immediately\030\005 \001(\0132\032.google.protobuf"
  ".BoolValue\022\r\n\005notes\030\006 \001(\t\"e\n\006Credit\022+\n\007o"
  "p_type\030\001 \001(\0162\032.clarifai.admin_api.OpType"
  "\022\016\n\006number\030\002 \001(\005\022\r\n\005notes\030\003 \001(\t\022\017\n\007op_na"
  "me\030\004 \001(\t\",\n\004Tier\022\016\n\006number\030\001 \001(\005\022\024\n\014pric"
  "e_per_op\030\002 \001(\001\"\243\001\n\014PricingTiers\022+\n\007op_ty"
  "pe\030\001 \001(\0162\032.clarifai.admin_api.OpType\022)\n\007"
  "monthly\030\002 \003(\0132\030.clarifai.admin_api.Tier\022"
  "*\n\010lifetime\030\003 \003(\0132\030.clarifai.admin_api.T"
  "ier\022\017\n\007op_name\030\004 \001(\t\"-\n\rMonthlyCharge\022\r\n"
  "\005price\030\001 \001(\001\022\r\n\005notes\030\002 \001(\t\"\225\001\n\004Plan\022\n\n\002"
  "id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\0227\n\rpricing_tiers\030"
  "\003 \003(\0132 .clarifai.admin_api.PricingTiers\022"
  ":\n\017monthly_charges\030\004 \003(\0132!.clarifai.admi"
  "n_api.MonthlyCharge\"\307\001\n\rRuntimeConfig\022\n\n"
  "\002id\030\001 \001(\t\022\017\n\007plan_id\030\002 \001(\t\022\017\n\007user_id\030\003 "
  "\001(\t\022.\n\ncreated_at\030\004 \001(\0132\032.google.protobu"
  "f.Timestamp\022/\n\013modified_at\030\005 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022\'\n\006config\030\006 \001(\0132\027.g"
  "oogle.protobuf.Struct\"]\n\nSignupCode\022\021\n\tp"
  "lan_name\030\001 \001(\t\022\014\n\004code\030\002 \001(\t\022.\n\nexpires_"
  "at\030\003 \001(\0132\032.google.protobuf.Timestamp\"C\n\010"
  "Schedule\022(\n\004time\030\001 \001(\0132\032.google.protobuf"
  ".Timestamp\022\r\n\005notes\030\002 \001(\t\"m\n\016ScheduledPl"
  "ans\022\021\n\tplan_name\030\001 \001(\t\022(\n\004time\030\002 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\022\r\n\005notes\030\003 \001(\t\022"
  "\017\n\007plan_id\030\004 \001(\t\"\224\001\n\016ThrottleByPath\022\017\n\007v"
  "2_path\030\001 \001(\t\022\020\n\010throttle\030\002 \001(\005\022.\n\ncreate"
  "d_at\030\003 \001(\0132\032.google.protobuf.Timestamp\022/"
  "\n\013modified_at\030\004 \001(\0132\032.google.protobuf.Ti"
  "mestamp\"q\n\005Email\022\r\n\005email\030\001 \001(\t\022+\n\007prima"
  "ry\030\002 \001(\0132\032.google.protobuf.BoolValue\022,\n\010"
  "verified\030\003 \001(\0132\032.google.protobuf.BoolVal"
  "ue\"\372\001\n\004User\022\n\n\002id\030\001 \001(\t\022\r\n\005v2_id\030\002 \001(\t\022\022"
  "\n\nfirst_name\030\004 \001(\t\022\021\n\tlast_name\030\005 \001(\t\022\024\n"
  "\014company_name\030\006 \001(\t\022\021\n\tbill_type\030\t \001(\t\022)"
  "\n\006emails\030\007 \003(\0132\031.clarifai.admin_api.Emai"
  "l\022.\n\ncreated_at\030\010 \001(\0132\032.google.protobuf."
  "Timestamp\022,\n\013recent_apps\030\n \003(\0132\021.clarifa"
  "i.api.AppB\004\200\265\030\001*c\n\006OpType\022\t\n\005undef\020\000\022\n\n\006"
  "billed\020\001\022\026\n\022search_and_predict\020\002\022\022\n\016cust"
  "om_predict\020\003\022\t\n\005input\020\004\022\013\n\007concept\020\005B,\n\026"
  "com.clarifai.admin_apiP\001Z\tadmin_api\242\002\004CA"
  "IPb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto_deps[5] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2futils_2fextensions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto_sccs[14] = {
  &scc_info_Credit_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
  &scc_info_Cycle_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
  &scc_info_Email_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
  &scc_info_MonthlyCharge_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
  &scc_info_OnetimeCharge_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
  &scc_info_Plan_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
  &scc_info_PricingTiers_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
  &scc_info_RuntimeConfig_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
  &scc_info_Schedule_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
  &scc_info_ScheduledPlans_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
  &scc_info_SignupCode_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
  &scc_info_ThrottleByPath_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
  &scc_info_Tier_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
  &scc_info_User_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto = {
  false, false, descriptor_table_protodef_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto, "proto/clarifai/admin_api/resources.proto", 2290,
  &descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto_once, descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto_sccs, descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto_deps, 14, 5,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto, 14, file_level_enum_descriptors_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto, file_level_service_descriptors_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto)), true);
namespace clarifai {
namespace admin_api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto[0];
}
bool OpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Cycle::InitAsDefaultInstance() {
  ::clarifai::admin_api::_Cycle_default_instance_._instance.get_mutable()->cycle_id_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::clarifai::admin_api::_Cycle_default_instance_._instance.get_mutable()->start_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::admin_api::_Cycle_default_instance_._instance.get_mutable()->end_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::admin_api::_Cycle_default_instance_._instance.get_mutable()->reset_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Cycle::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& cycle_id(const Cycle* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_date(const Cycle* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_date(const Cycle* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& reset_at(const Cycle* msg);
};

const PROTOBUF_NAMESPACE_ID::UInt32Value&
Cycle::_Internal::cycle_id(const Cycle* msg) {
  return *msg->cycle_id_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Cycle::_Internal::start_date(const Cycle* msg) {
  return *msg->start_date_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Cycle::_Internal::end_date(const Cycle* msg) {
  return *msg->end_date_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Cycle::_Internal::reset_at(const Cycle* msg) {
  return *msg->reset_at_;
}
void Cycle::clear_cycle_id() {
  if (GetArena() == nullptr && cycle_id_ != nullptr) {
    delete cycle_id_;
  }
  cycle_id_ = nullptr;
}
void Cycle::clear_start_date() {
  if (GetArena() == nullptr && start_date_ != nullptr) {
    delete start_date_;
  }
  start_date_ = nullptr;
}
void Cycle::clear_end_date() {
  if (GetArena() == nullptr && end_date_ != nullptr) {
    delete end_date_;
  }
  end_date_ = nullptr;
}
void Cycle::clear_reset_at() {
  if (GetArena() == nullptr && reset_at_ != nullptr) {
    delete reset_at_;
  }
  reset_at_ = nullptr;
}
Cycle::Cycle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.admin_api.Cycle)
}
Cycle::Cycle(const Cycle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cycle_id()) {
    cycle_id_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.cycle_id_);
  } else {
    cycle_id_ = nullptr;
  }
  if (from._internal_has_start_date()) {
    start_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_date_);
  } else {
    start_date_ = nullptr;
  }
  if (from._internal_has_end_date()) {
    end_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_date_);
  } else {
    end_date_ = nullptr;
  }
  if (from._internal_has_reset_at()) {
    reset_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.reset_at_);
  } else {
    reset_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.admin_api.Cycle)
}

void Cycle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Cycle_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  ::memset(&cycle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_at_) -
      reinterpret_cast<char*>(&cycle_id_)) + sizeof(reset_at_));
}

Cycle::~Cycle() {
  // @@protoc_insertion_point(destructor:clarifai.admin_api.Cycle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Cycle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cycle_id_;
  if (this != internal_default_instance()) delete start_date_;
  if (this != internal_default_instance()) delete end_date_;
  if (this != internal_default_instance()) delete reset_at_;
}

void Cycle::ArenaDtor(void* object) {
  Cycle* _this = reinterpret_cast< Cycle* >(object);
  (void)_this;
}
void Cycle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cycle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cycle& Cycle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cycle_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Cycle::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.admin_api.Cycle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && cycle_id_ != nullptr) {
    delete cycle_id_;
  }
  cycle_id_ = nullptr;
  if (GetArena() == nullptr && start_date_ != nullptr) {
    delete start_date_;
  }
  start_date_ = nullptr;
  if (GetArena() == nullptr && end_date_ != nullptr) {
    delete end_date_;
  }
  end_date_ = nullptr;
  if (GetArena() == nullptr && reset_at_ != nullptr) {
    delete reset_at_;
  }
  reset_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cycle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.UInt32Value cycle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cycle_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp reset_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cycle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.admin_api.Cycle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value cycle_id = 1;
  if (this->has_cycle_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cycle_id(this), target, stream);
  }

  // .google.protobuf.Timestamp start_date = 2;
  if (this->has_start_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_date(this), target, stream);
  }

  // .google.protobuf.Timestamp end_date = 3;
  if (this->has_end_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_date(this), target, stream);
  }

  // .google.protobuf.Timestamp reset_at = 4;
  if (this->has_reset_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reset_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.admin_api.Cycle)
  return target;
}

size_t Cycle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.admin_api.Cycle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value cycle_id = 1;
  if (this->has_cycle_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cycle_id_);
  }

  // .google.protobuf.Timestamp start_date = 2;
  if (this->has_start_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_date_);
  }

  // .google.protobuf.Timestamp end_date = 3;
  if (this->has_end_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_date_);
  }

  // .google.protobuf.Timestamp reset_at = 4;
  if (this->has_reset_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reset_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cycle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.admin_api.Cycle)
  GOOGLE_DCHECK_NE(&from, this);
  const Cycle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cycle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.admin_api.Cycle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.admin_api.Cycle)
    MergeFrom(*source);
  }
}

void Cycle::MergeFrom(const Cycle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.admin_api.Cycle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cycle_id()) {
    _internal_mutable_cycle_id()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_cycle_id());
  }
  if (from.has_start_date()) {
    _internal_mutable_start_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_date());
  }
  if (from.has_end_date()) {
    _internal_mutable_end_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_date());
  }
  if (from.has_reset_at()) {
    _internal_mutable_reset_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_reset_at());
  }
}

void Cycle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.admin_api.Cycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cycle::CopyFrom(const Cycle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.admin_api.Cycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cycle::IsInitialized() const {
  return true;
}

void Cycle::InternalSwap(Cycle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cycle, reset_at_)
      + sizeof(Cycle::reset_at_)
      - PROTOBUF_FIELD_OFFSET(Cycle, cycle_id_)>(
          reinterpret_cast<char*>(&cycle_id_),
          reinterpret_cast<char*>(&other->cycle_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cycle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OnetimeCharge::InitAsDefaultInstance() {
  ::clarifai::admin_api::_OnetimeCharge_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::admin_api::_OnetimeCharge_default_instance_._instance.get_mutable()->bill_immediately_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
}
class OnetimeCharge::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const OnetimeCharge* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& bill_immediately(const OnetimeCharge* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
OnetimeCharge::_Internal::created_at(const OnetimeCharge* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
OnetimeCharge::_Internal::bill_immediately(const OnetimeCharge* msg) {
  return *msg->bill_immediately_;
}
void OnetimeCharge::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void OnetimeCharge::clear_bill_immediately() {
  if (GetArena() == nullptr && bill_immediately_ != nullptr) {
    delete bill_immediately_;
  }
  bill_immediately_ = nullptr;
}
OnetimeCharge::OnetimeCharge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.admin_api.OnetimeCharge)
}
OnetimeCharge::OnetimeCharge(const OnetimeCharge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  charge_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_charge_id().empty()) {
    charge_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_charge_id(),
      GetArena());
  }
  invoice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invoice_id().empty()) {
    invoice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_invoice_id(),
      GetArena());
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notes().empty()) {
    notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notes(),
      GetArena());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_bill_immediately()) {
    bill_immediately_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.bill_immediately_);
  } else {
    bill_immediately_ = nullptr;
  }
  dollars_ = from.dollars_;
  // @@protoc_insertion_point(copy_constructor:clarifai.admin_api.OnetimeCharge)
}

void OnetimeCharge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnetimeCharge_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  charge_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invoice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dollars_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(dollars_));
}

OnetimeCharge::~OnetimeCharge() {
  // @@protoc_insertion_point(destructor:clarifai.admin_api.OnetimeCharge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnetimeCharge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  charge_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invoice_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete bill_immediately_;
}

void OnetimeCharge::ArenaDtor(void* object) {
  OnetimeCharge* _this = reinterpret_cast< OnetimeCharge* >(object);
  (void)_this;
}
void OnetimeCharge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnetimeCharge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnetimeCharge& OnetimeCharge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnetimeCharge_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void OnetimeCharge::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.admin_api.OnetimeCharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charge_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  invoice_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArena() == nullptr && bill_immediately_ != nullptr) {
    delete bill_immediately_;
  }
  bill_immediately_ = nullptr;
  dollars_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnetimeCharge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string charge_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_charge_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.OnetimeCharge.charge_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string invoice_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_invoice_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.OnetimeCharge.invoice_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dollars = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          dollars_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue bill_immediately = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bill_immediately(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.OnetimeCharge.notes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnetimeCharge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.admin_api.OnetimeCharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string charge_id = 1;
  if (this->charge_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_charge_id().data(), static_cast<int>(this->_internal_charge_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.OnetimeCharge.charge_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_charge_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // string invoice_id = 3;
  if (this->invoice_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invoice_id().data(), static_cast<int>(this->_internal_invoice_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.OnetimeCharge.invoice_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_invoice_id(), target);
  }

  // double dollars = 4;
  if (!(this->dollars() <= 0 && this->dollars() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_dollars(), target);
  }

  // .google.protobuf.BoolValue bill_immediately = 5;
  if (this->has_bill_immediately()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bill_immediately(this), target, stream);
  }

  // string notes = 6;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.OnetimeCharge.notes");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_notes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.admin_api.OnetimeCharge)
  return target;
}

size_t OnetimeCharge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.admin_api.OnetimeCharge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string charge_id = 1;
  if (this->charge_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_charge_id());
  }

  // string invoice_id = 3;
  if (this->invoice_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invoice_id());
  }

  // string notes = 6;
  if (this->notes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.BoolValue bill_immediately = 5;
  if (this->has_bill_immediately()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bill_immediately_);
  }

  // double dollars = 4;
  if (!(this->dollars() <= 0 && this->dollars() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnetimeCharge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.admin_api.OnetimeCharge)
  GOOGLE_DCHECK_NE(&from, this);
  const OnetimeCharge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnetimeCharge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.admin_api.OnetimeCharge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.admin_api.OnetimeCharge)
    MergeFrom(*source);
  }
}

void OnetimeCharge::MergeFrom(const OnetimeCharge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.admin_api.OnetimeCharge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.charge_id().size() > 0) {
    _internal_set_charge_id(from._internal_charge_id());
  }
  if (from.invoice_id().size() > 0) {
    _internal_set_invoice_id(from._internal_invoice_id());
  }
  if (from.notes().size() > 0) {
    _internal_set_notes(from._internal_notes());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_bill_immediately()) {
    _internal_mutable_bill_immediately()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_bill_immediately());
  }
  if (!(from.dollars() <= 0 && from.dollars() >= 0)) {
    _internal_set_dollars(from._internal_dollars());
  }
}

void OnetimeCharge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.admin_api.OnetimeCharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnetimeCharge::CopyFrom(const OnetimeCharge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.admin_api.OnetimeCharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnetimeCharge::IsInitialized() const {
  return true;
}

void OnetimeCharge::InternalSwap(OnetimeCharge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  charge_id_.Swap(&other->charge_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  invoice_id_.Swap(&other->invoice_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OnetimeCharge, dollars_)
      + sizeof(OnetimeCharge::dollars_)
      - PROTOBUF_FIELD_OFFSET(OnetimeCharge, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OnetimeCharge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Credit::InitAsDefaultInstance() {
}
class Credit::_Internal {
 public:
};

Credit::Credit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.admin_api.Credit)
}
Credit::Credit(const Credit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notes().empty()) {
    notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notes(),
      GetArena());
  }
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op_name().empty()) {
    op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_op_name(),
      GetArena());
  }
  ::memcpy(&op_type_, &from.op_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&op_type_)) + sizeof(number_));
  // @@protoc_insertion_point(copy_constructor:clarifai.admin_api.Credit)
}

void Credit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Credit_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&op_type_)) + sizeof(number_));
}

Credit::~Credit() {
  // @@protoc_insertion_point(destructor:clarifai.admin_api.Credit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Credit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Credit::ArenaDtor(void* object) {
  Credit* _this = reinterpret_cast< Credit* >(object);
  (void)_this;
}
void Credit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Credit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Credit& Credit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Credit_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Credit::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.admin_api.Credit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  op_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&op_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&op_type_)) + sizeof(number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Credit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.admin_api.OpType op_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op_type(static_cast<::clarifai::admin_api::OpType>(val));
        } else goto handle_unusual;
        continue;
      // int32 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.Credit.notes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string op_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_op_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.Credit.op_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Credit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.admin_api.Credit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.admin_api.OpType op_type = 1;
  if (this->op_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op_type(), target);
  }

  // int32 number = 2;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_number(), target);
  }

  // string notes = 3;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.Credit.notes");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_notes(), target);
  }

  // string op_name = 4;
  if (this->op_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_name().data(), static_cast<int>(this->_internal_op_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.Credit.op_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_op_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.admin_api.Credit)
  return target;
}

size_t Credit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.admin_api.Credit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string notes = 3;
  if (this->notes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // string op_name = 4;
  if (this->op_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_name());
  }

  // .clarifai.admin_api.OpType op_type = 1;
  if (this->op_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op_type());
  }

  // int32 number = 2;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Credit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.admin_api.Credit)
  GOOGLE_DCHECK_NE(&from, this);
  const Credit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Credit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.admin_api.Credit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.admin_api.Credit)
    MergeFrom(*source);
  }
}

void Credit::MergeFrom(const Credit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.admin_api.Credit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.notes().size() > 0) {
    _internal_set_notes(from._internal_notes());
  }
  if (from.op_name().size() > 0) {
    _internal_set_op_name(from._internal_op_name());
  }
  if (from.op_type() != 0) {
    _internal_set_op_type(from._internal_op_type());
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
}

void Credit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.admin_api.Credit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Credit::CopyFrom(const Credit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.admin_api.Credit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Credit::IsInitialized() const {
  return true;
}

void Credit::InternalSwap(Credit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  op_name_.Swap(&other->op_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Credit, number_)
      + sizeof(Credit::number_)
      - PROTOBUF_FIELD_OFFSET(Credit, op_type_)>(
          reinterpret_cast<char*>(&op_type_),
          reinterpret_cast<char*>(&other->op_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Credit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tier::InitAsDefaultInstance() {
}
class Tier::_Internal {
 public:
};

Tier::Tier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.admin_api.Tier)
}
Tier::Tier(const Tier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_per_op_, &from.price_per_op_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&price_per_op_)) + sizeof(number_));
  // @@protoc_insertion_point(copy_constructor:clarifai.admin_api.Tier)
}

void Tier::SharedCtor() {
  ::memset(&price_per_op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&price_per_op_)) + sizeof(number_));
}

Tier::~Tier() {
  // @@protoc_insertion_point(destructor:clarifai.admin_api.Tier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Tier::ArenaDtor(void* object) {
  Tier* _this = reinterpret_cast< Tier* >(object);
  (void)_this;
}
void Tier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tier& Tier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tier_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Tier::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.admin_api.Tier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_per_op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&price_per_op_)) + sizeof(number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price_per_op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          price_per_op_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.admin_api.Tier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_number(), target);
  }

  // double price_per_op = 2;
  if (!(this->price_per_op() <= 0 && this->price_per_op() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_price_per_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.admin_api.Tier)
  return target;
}

size_t Tier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.admin_api.Tier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double price_per_op = 2;
  if (!(this->price_per_op() <= 0 && this->price_per_op() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.admin_api.Tier)
  GOOGLE_DCHECK_NE(&from, this);
  const Tier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.admin_api.Tier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.admin_api.Tier)
    MergeFrom(*source);
  }
}

void Tier::MergeFrom(const Tier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.admin_api.Tier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.price_per_op() <= 0 && from.price_per_op() >= 0)) {
    _internal_set_price_per_op(from._internal_price_per_op());
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
}

void Tier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.admin_api.Tier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tier::CopyFrom(const Tier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.admin_api.Tier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tier::IsInitialized() const {
  return true;
}

void Tier::InternalSwap(Tier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tier, number_)
      + sizeof(Tier::number_)
      - PROTOBUF_FIELD_OFFSET(Tier, price_per_op_)>(
          reinterpret_cast<char*>(&price_per_op_),
          reinterpret_cast<char*>(&other->price_per_op_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PricingTiers::InitAsDefaultInstance() {
}
class PricingTiers::_Internal {
 public:
};

PricingTiers::PricingTiers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  monthly_(arena),
  lifetime_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.admin_api.PricingTiers)
}
PricingTiers::PricingTiers(const PricingTiers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      monthly_(from.monthly_),
      lifetime_(from.lifetime_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op_name().empty()) {
    op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_op_name(),
      GetArena());
  }
  op_type_ = from.op_type_;
  // @@protoc_insertion_point(copy_constructor:clarifai.admin_api.PricingTiers)
}

void PricingTiers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PricingTiers_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_type_ = 0;
}

PricingTiers::~PricingTiers() {
  // @@protoc_insertion_point(destructor:clarifai.admin_api.PricingTiers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PricingTiers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  op_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PricingTiers::ArenaDtor(void* object) {
  PricingTiers* _this = reinterpret_cast< PricingTiers* >(object);
  (void)_this;
}
void PricingTiers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PricingTiers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PricingTiers& PricingTiers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PricingTiers_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void PricingTiers::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.admin_api.PricingTiers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monthly_.Clear();
  lifetime_.Clear();
  op_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  op_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PricingTiers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.admin_api.OpType op_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op_type(static_cast<::clarifai::admin_api::OpType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.admin_api.Tier monthly = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_monthly(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.admin_api.Tier lifetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lifetime(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string op_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_op_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.PricingTiers.op_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PricingTiers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.admin_api.PricingTiers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.admin_api.OpType op_type = 1;
  if (this->op_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op_type(), target);
  }

  // repeated .clarifai.admin_api.Tier monthly = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_monthly_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_monthly(i), target, stream);
  }

  // repeated .clarifai.admin_api.Tier lifetime = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lifetime_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_lifetime(i), target, stream);
  }

  // string op_name = 4;
  if (this->op_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_name().data(), static_cast<int>(this->_internal_op_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.PricingTiers.op_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_op_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.admin_api.PricingTiers)
  return target;
}

size_t PricingTiers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.admin_api.PricingTiers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.admin_api.Tier monthly = 2;
  total_size += 1UL * this->_internal_monthly_size();
  for (const auto& msg : this->monthly_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.admin_api.Tier lifetime = 3;
  total_size += 1UL * this->_internal_lifetime_size();
  for (const auto& msg : this->lifetime_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string op_name = 4;
  if (this->op_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_name());
  }

  // .clarifai.admin_api.OpType op_type = 1;
  if (this->op_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PricingTiers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.admin_api.PricingTiers)
  GOOGLE_DCHECK_NE(&from, this);
  const PricingTiers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PricingTiers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.admin_api.PricingTiers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.admin_api.PricingTiers)
    MergeFrom(*source);
  }
}

void PricingTiers::MergeFrom(const PricingTiers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.admin_api.PricingTiers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  monthly_.MergeFrom(from.monthly_);
  lifetime_.MergeFrom(from.lifetime_);
  if (from.op_name().size() > 0) {
    _internal_set_op_name(from._internal_op_name());
  }
  if (from.op_type() != 0) {
    _internal_set_op_type(from._internal_op_type());
  }
}

void PricingTiers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.admin_api.PricingTiers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PricingTiers::CopyFrom(const PricingTiers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.admin_api.PricingTiers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PricingTiers::IsInitialized() const {
  return true;
}

void PricingTiers::InternalSwap(PricingTiers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  monthly_.InternalSwap(&other->monthly_);
  lifetime_.InternalSwap(&other->lifetime_);
  op_name_.Swap(&other->op_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(op_type_, other->op_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PricingTiers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonthlyCharge::InitAsDefaultInstance() {
}
class MonthlyCharge::_Internal {
 public:
};

MonthlyCharge::MonthlyCharge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.admin_api.MonthlyCharge)
}
MonthlyCharge::MonthlyCharge(const MonthlyCharge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notes().empty()) {
    notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notes(),
      GetArena());
  }
  price_ = from.price_;
  // @@protoc_insertion_point(copy_constructor:clarifai.admin_api.MonthlyCharge)
}

void MonthlyCharge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MonthlyCharge_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
}

MonthlyCharge::~MonthlyCharge() {
  // @@protoc_insertion_point(destructor:clarifai.admin_api.MonthlyCharge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MonthlyCharge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MonthlyCharge::ArenaDtor(void* object) {
  MonthlyCharge* _this = reinterpret_cast< MonthlyCharge* >(object);
  (void)_this;
}
void MonthlyCharge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MonthlyCharge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonthlyCharge& MonthlyCharge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonthlyCharge_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void MonthlyCharge::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.admin_api.MonthlyCharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  price_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonthlyCharge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string notes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.MonthlyCharge.notes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonthlyCharge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.admin_api.MonthlyCharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_price(), target);
  }

  // string notes = 2;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.MonthlyCharge.notes");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_notes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.admin_api.MonthlyCharge)
  return target;
}

size_t MonthlyCharge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.admin_api.MonthlyCharge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string notes = 2;
  if (this->notes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonthlyCharge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.admin_api.MonthlyCharge)
  GOOGLE_DCHECK_NE(&from, this);
  const MonthlyCharge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonthlyCharge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.admin_api.MonthlyCharge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.admin_api.MonthlyCharge)
    MergeFrom(*source);
  }
}

void MonthlyCharge::MergeFrom(const MonthlyCharge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.admin_api.MonthlyCharge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.notes().size() > 0) {
    _internal_set_notes(from._internal_notes());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
}

void MonthlyCharge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.admin_api.MonthlyCharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonthlyCharge::CopyFrom(const MonthlyCharge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.admin_api.MonthlyCharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthlyCharge::IsInitialized() const {
  return true;
}

void MonthlyCharge::InternalSwap(MonthlyCharge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(price_, other->price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonthlyCharge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Plan::InitAsDefaultInstance() {
}
class Plan::_Internal {
 public:
};

Plan::Plan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pricing_tiers_(arena),
  monthly_charges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.admin_api.Plan)
}
Plan::Plan(const Plan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pricing_tiers_(from.pricing_tiers_),
      monthly_charges_(from.monthly_charges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.admin_api.Plan)
}

void Plan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Plan_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Plan::~Plan() {
  // @@protoc_insertion_point(destructor:clarifai.admin_api.Plan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Plan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Plan::ArenaDtor(void* object) {
  Plan* _this = reinterpret_cast< Plan* >(object);
  (void)_this;
}
void Plan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Plan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Plan& Plan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Plan_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Plan::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.admin_api.Plan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pricing_tiers_.Clear();
  monthly_charges_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Plan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.Plan.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.Plan.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.admin_api.PricingTiers pricing_tiers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pricing_tiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.admin_api.MonthlyCharge monthly_charges = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_monthly_charges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Plan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.admin_api.Plan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.Plan.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.Plan.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .clarifai.admin_api.PricingTiers pricing_tiers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pricing_tiers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pricing_tiers(i), target, stream);
  }

  // repeated .clarifai.admin_api.MonthlyCharge monthly_charges = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_monthly_charges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_monthly_charges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.admin_api.Plan)
  return target;
}

size_t Plan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.admin_api.Plan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.admin_api.PricingTiers pricing_tiers = 3;
  total_size += 1UL * this->_internal_pricing_tiers_size();
  for (const auto& msg : this->pricing_tiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.admin_api.MonthlyCharge monthly_charges = 4;
  total_size += 1UL * this->_internal_monthly_charges_size();
  for (const auto& msg : this->monthly_charges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Plan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.admin_api.Plan)
  GOOGLE_DCHECK_NE(&from, this);
  const Plan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Plan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.admin_api.Plan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.admin_api.Plan)
    MergeFrom(*source);
  }
}

void Plan::MergeFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.admin_api.Plan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pricing_tiers_.MergeFrom(from.pricing_tiers_);
  monthly_charges_.MergeFrom(from.monthly_charges_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void Plan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.admin_api.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plan::CopyFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.admin_api.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plan::IsInitialized() const {
  return true;
}

void Plan::InternalSwap(Plan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pricing_tiers_.InternalSwap(&other->pricing_tiers_);
  monthly_charges_.InternalSwap(&other->monthly_charges_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Plan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuntimeConfig::InitAsDefaultInstance() {
  ::clarifai::admin_api::_RuntimeConfig_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::admin_api::_RuntimeConfig_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::admin_api::_RuntimeConfig_default_instance_._instance.get_mutable()->config_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class RuntimeConfig::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const RuntimeConfig* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const RuntimeConfig* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& config(const RuntimeConfig* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
RuntimeConfig::_Internal::created_at(const RuntimeConfig* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
RuntimeConfig::_Internal::modified_at(const RuntimeConfig* msg) {
  return *msg->modified_at_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
RuntimeConfig::_Internal::config(const RuntimeConfig* msg) {
  return *msg->config_;
}
void RuntimeConfig::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void RuntimeConfig::clear_modified_at() {
  if (GetArena() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
void RuntimeConfig::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
RuntimeConfig::RuntimeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.admin_api.RuntimeConfig)
}
RuntimeConfig::RuntimeConfig(const RuntimeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  plan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_plan_id().empty()) {
    plan_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_plan_id(),
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.admin_api.RuntimeConfig)
}

void RuntimeConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuntimeConfig_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(config_));
}

RuntimeConfig::~RuntimeConfig() {
  // @@protoc_insertion_point(destructor:clarifai.admin_api.RuntimeConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuntimeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plan_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
  if (this != internal_default_instance()) delete config_;
}

void RuntimeConfig::ArenaDtor(void* object) {
  RuntimeConfig* _this = reinterpret_cast< RuntimeConfig* >(object);
  (void)_this;
}
void RuntimeConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuntimeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuntimeConfig& RuntimeConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuntimeConfig_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void RuntimeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.admin_api.RuntimeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  plan_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArena() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuntimeConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.RuntimeConfig.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string plan_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_plan_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.RuntimeConfig.plan_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.RuntimeConfig.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuntimeConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.admin_api.RuntimeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.RuntimeConfig.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string plan_id = 2;
  if (this->plan_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plan_id().data(), static_cast<int>(this->_internal_plan_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.RuntimeConfig.plan_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_plan_id(), target);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.RuntimeConfig.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 5;
  if (this->has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::modified_at(this), target, stream);
  }

  // .google.protobuf.Struct config = 6;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.admin_api.RuntimeConfig)
  return target;
}

size_t RuntimeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.admin_api.RuntimeConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string plan_id = 2;
  if (this->plan_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plan_id());
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 5;
  if (this->has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .google.protobuf.Struct config = 6;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuntimeConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.admin_api.RuntimeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RuntimeConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuntimeConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.admin_api.RuntimeConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.admin_api.RuntimeConfig)
    MergeFrom(*source);
  }
}

void RuntimeConfig::MergeFrom(const RuntimeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.admin_api.RuntimeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.plan_id().size() > 0) {
    _internal_set_plan_id(from._internal_plan_id());
  }
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_modified_at()) {
    _internal_mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from.has_config()) {
    _internal_mutable_config()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_config());
  }
}

void RuntimeConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.admin_api.RuntimeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeConfig::CopyFrom(const RuntimeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.admin_api.RuntimeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeConfig::IsInitialized() const {
  return true;
}

void RuntimeConfig::InternalSwap(RuntimeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  plan_id_.Swap(&other->plan_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuntimeConfig, config_)
      + sizeof(RuntimeConfig::config_)
      - PROTOBUF_FIELD_OFFSET(RuntimeConfig, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignupCode::InitAsDefaultInstance() {
  ::clarifai::admin_api::_SignupCode_default_instance_._instance.get_mutable()->expires_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class SignupCode::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at(const SignupCode* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
SignupCode::_Internal::expires_at(const SignupCode* msg) {
  return *msg->expires_at_;
}
void SignupCode::clear_expires_at() {
  if (GetArena() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
}
SignupCode::SignupCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.admin_api.SignupCode)
}
SignupCode::SignupCode(const SignupCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  plan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_plan_name().empty()) {
    plan_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_plan_name(),
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_code(),
      GetArena());
  }
  if (from._internal_has_expires_at()) {
    expires_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expires_at_);
  } else {
    expires_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.admin_api.SignupCode)
}

void SignupCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignupCode_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  plan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expires_at_ = nullptr;
}

SignupCode::~SignupCode() {
  // @@protoc_insertion_point(destructor:clarifai.admin_api.SignupCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignupCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  plan_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expires_at_;
}

void SignupCode::ArenaDtor(void* object) {
  SignupCode* _this = reinterpret_cast< SignupCode* >(object);
  (void)_this;
}
void SignupCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignupCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignupCode& SignupCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignupCode_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void SignupCode::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.admin_api.SignupCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plan_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignupCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string plan_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_plan_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.SignupCode.plan_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.SignupCode.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expires_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignupCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.admin_api.SignupCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string plan_name = 1;
  if (this->plan_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plan_name().data(), static_cast<int>(this->_internal_plan_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.SignupCode.plan_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_plan_name(), target);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.SignupCode.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // .google.protobuf.Timestamp expires_at = 3;
  if (this->has_expires_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::expires_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.admin_api.SignupCode)
  return target;
}

size_t SignupCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.admin_api.SignupCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string plan_name = 1;
  if (this->plan_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plan_name());
  }

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp expires_at = 3;
  if (this->has_expires_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expires_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignupCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.admin_api.SignupCode)
  GOOGLE_DCHECK_NE(&from, this);
  const SignupCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignupCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.admin_api.SignupCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.admin_api.SignupCode)
    MergeFrom(*source);
  }
}

void SignupCode::MergeFrom(const SignupCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.admin_api.SignupCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plan_name().size() > 0) {
    _internal_set_plan_name(from._internal_plan_name());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.has_expires_at()) {
    _internal_mutable_expires_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expires_at());
  }
}

void SignupCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.admin_api.SignupCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignupCode::CopyFrom(const SignupCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.admin_api.SignupCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignupCode::IsInitialized() const {
  return true;
}

void SignupCode::InternalSwap(SignupCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  plan_name_.Swap(&other->plan_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(expires_at_, other->expires_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignupCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Schedule::InitAsDefaultInstance() {
  ::clarifai::admin_api::_Schedule_default_instance_._instance.get_mutable()->time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Schedule::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const Schedule* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Schedule::_Internal::time(const Schedule* msg) {
  return *msg->time_;
}
void Schedule::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
Schedule::Schedule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.admin_api.Schedule)
}
Schedule::Schedule(const Schedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notes().empty()) {
    notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notes(),
      GetArena());
  }
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.admin_api.Schedule)
}

void Schedule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Schedule_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_ = nullptr;
}

Schedule::~Schedule() {
  // @@protoc_insertion_point(destructor:clarifai.admin_api.Schedule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Schedule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
}

void Schedule::ArenaDtor(void* object) {
  Schedule* _this = reinterpret_cast< Schedule* >(object);
  (void)_this;
}
void Schedule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Schedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Schedule& Schedule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Schedule_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Schedule::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.admin_api.Schedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Schedule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.Schedule.notes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Schedule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.admin_api.Schedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // string notes = 2;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.Schedule.notes");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_notes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.admin_api.Schedule)
  return target;
}

size_t Schedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.admin_api.Schedule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string notes = 2;
  if (this->notes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Schedule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.admin_api.Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  const Schedule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Schedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.admin_api.Schedule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.admin_api.Schedule)
    MergeFrom(*source);
  }
}

void Schedule::MergeFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.admin_api.Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.notes().size() > 0) {
    _internal_set_notes(from._internal_notes());
  }
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
}

void Schedule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.admin_api.Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schedule::CopyFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.admin_api.Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schedule::IsInitialized() const {
  return true;
}

void Schedule::InternalSwap(Schedule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Schedule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScheduledPlans::InitAsDefaultInstance() {
  ::clarifai::admin_api::_ScheduledPlans_default_instance_._instance.get_mutable()->time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class ScheduledPlans::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const ScheduledPlans* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ScheduledPlans::_Internal::time(const ScheduledPlans* msg) {
  return *msg->time_;
}
void ScheduledPlans::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
ScheduledPlans::ScheduledPlans(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.admin_api.ScheduledPlans)
}
ScheduledPlans::ScheduledPlans(const ScheduledPlans& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  plan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_plan_name().empty()) {
    plan_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_plan_name(),
      GetArena());
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notes().empty()) {
    notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notes(),
      GetArena());
  }
  plan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_plan_id().empty()) {
    plan_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_plan_id(),
      GetArena());
  }
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.admin_api.ScheduledPlans)
}

void ScheduledPlans::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScheduledPlans_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  plan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_ = nullptr;
}

ScheduledPlans::~ScheduledPlans() {
  // @@protoc_insertion_point(destructor:clarifai.admin_api.ScheduledPlans)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScheduledPlans::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  plan_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plan_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
}

void ScheduledPlans::ArenaDtor(void* object) {
  ScheduledPlans* _this = reinterpret_cast< ScheduledPlans* >(object);
  (void)_this;
}
void ScheduledPlans::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScheduledPlans::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScheduledPlans& ScheduledPlans::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScheduledPlans_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ScheduledPlans::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.admin_api.ScheduledPlans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plan_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  plan_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduledPlans::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string plan_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_plan_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.ScheduledPlans.plan_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.ScheduledPlans.notes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string plan_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_plan_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.ScheduledPlans.plan_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScheduledPlans::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.admin_api.ScheduledPlans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string plan_name = 1;
  if (this->plan_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plan_name().data(), static_cast<int>(this->_internal_plan_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.ScheduledPlans.plan_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_plan_name(), target);
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::time(this), target, stream);
  }

  // string notes = 3;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.ScheduledPlans.notes");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_notes(), target);
  }

  // string plan_id = 4;
  if (this->plan_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plan_id().data(), static_cast<int>(this->_internal_plan_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.ScheduledPlans.plan_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_plan_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.admin_api.ScheduledPlans)
  return target;
}

size_t ScheduledPlans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.admin_api.ScheduledPlans)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string plan_name = 1;
  if (this->plan_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plan_name());
  }

  // string notes = 3;
  if (this->notes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // string plan_id = 4;
  if (this->plan_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plan_id());
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScheduledPlans::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.admin_api.ScheduledPlans)
  GOOGLE_DCHECK_NE(&from, this);
  const ScheduledPlans* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScheduledPlans>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.admin_api.ScheduledPlans)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.admin_api.ScheduledPlans)
    MergeFrom(*source);
  }
}

void ScheduledPlans::MergeFrom(const ScheduledPlans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.admin_api.ScheduledPlans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plan_name().size() > 0) {
    _internal_set_plan_name(from._internal_plan_name());
  }
  if (from.notes().size() > 0) {
    _internal_set_notes(from._internal_notes());
  }
  if (from.plan_id().size() > 0) {
    _internal_set_plan_id(from._internal_plan_id());
  }
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
}

void ScheduledPlans::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.admin_api.ScheduledPlans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScheduledPlans::CopyFrom(const ScheduledPlans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.admin_api.ScheduledPlans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduledPlans::IsInitialized() const {
  return true;
}

void ScheduledPlans::InternalSwap(ScheduledPlans* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  plan_name_.Swap(&other->plan_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  plan_id_.Swap(&other->plan_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduledPlans::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThrottleByPath::InitAsDefaultInstance() {
  ::clarifai::admin_api::_ThrottleByPath_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::admin_api::_ThrottleByPath_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class ThrottleByPath::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const ThrottleByPath* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const ThrottleByPath* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ThrottleByPath::_Internal::created_at(const ThrottleByPath* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ThrottleByPath::_Internal::modified_at(const ThrottleByPath* msg) {
  return *msg->modified_at_;
}
void ThrottleByPath::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void ThrottleByPath::clear_modified_at() {
  if (GetArena() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
ThrottleByPath::ThrottleByPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.admin_api.ThrottleByPath)
}
ThrottleByPath::ThrottleByPath(const ThrottleByPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v2_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v2_path().empty()) {
    v2_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_v2_path(),
      GetArena());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  throttle_ = from.throttle_;
  // @@protoc_insertion_point(copy_constructor:clarifai.admin_api.ThrottleByPath)
}

void ThrottleByPath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThrottleByPath_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  v2_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&throttle_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(throttle_));
}

ThrottleByPath::~ThrottleByPath() {
  // @@protoc_insertion_point(destructor:clarifai.admin_api.ThrottleByPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThrottleByPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  v2_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
}

void ThrottleByPath::ArenaDtor(void* object) {
  ThrottleByPath* _this = reinterpret_cast< ThrottleByPath* >(object);
  (void)_this;
}
void ThrottleByPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThrottleByPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThrottleByPath& ThrottleByPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThrottleByPath_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ThrottleByPath::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.admin_api.ThrottleByPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v2_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArena() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  throttle_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThrottleByPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string v2_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_v2_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.ThrottleByPath.v2_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 throttle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThrottleByPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.admin_api.ThrottleByPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string v2_path = 1;
  if (this->v2_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v2_path().data(), static_cast<int>(this->_internal_v2_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.ThrottleByPath.v2_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_v2_path(), target);
  }

  // int32 throttle = 2;
  if (this->throttle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_throttle(), target);
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp modified_at = 4;
  if (this->has_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::modified_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.admin_api.ThrottleByPath)
  return target;
}

size_t ThrottleByPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.admin_api.ThrottleByPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string v2_path = 1;
  if (this->v2_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v2_path());
  }

  // .google.protobuf.Timestamp created_at = 3;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 4;
  if (this->has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // int32 throttle = 2;
  if (this->throttle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_throttle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThrottleByPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.admin_api.ThrottleByPath)
  GOOGLE_DCHECK_NE(&from, this);
  const ThrottleByPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThrottleByPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.admin_api.ThrottleByPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.admin_api.ThrottleByPath)
    MergeFrom(*source);
  }
}

void ThrottleByPath::MergeFrom(const ThrottleByPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.admin_api.ThrottleByPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v2_path().size() > 0) {
    _internal_set_v2_path(from._internal_v2_path());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_modified_at()) {
    _internal_mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified_at());
  }
  if (from.throttle() != 0) {
    _internal_set_throttle(from._internal_throttle());
  }
}

void ThrottleByPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.admin_api.ThrottleByPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThrottleByPath::CopyFrom(const ThrottleByPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.admin_api.ThrottleByPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThrottleByPath::IsInitialized() const {
  return true;
}

void ThrottleByPath::InternalSwap(ThrottleByPath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v2_path_.Swap(&other->v2_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThrottleByPath, throttle_)
      + sizeof(ThrottleByPath::throttle_)
      - PROTOBUF_FIELD_OFFSET(ThrottleByPath, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThrottleByPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Email::InitAsDefaultInstance() {
  ::clarifai::admin_api::_Email_default_instance_._instance.get_mutable()->primary_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::clarifai::admin_api::_Email_default_instance_._instance.get_mutable()->verified_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
}
class Email::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& primary(const Email* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& verified(const Email* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
Email::_Internal::primary(const Email* msg) {
  return *msg->primary_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
Email::_Internal::verified(const Email* msg) {
  return *msg->verified_;
}
void Email::clear_primary() {
  if (GetArena() == nullptr && primary_ != nullptr) {
    delete primary_;
  }
  primary_ = nullptr;
}
void Email::clear_verified() {
  if (GetArena() == nullptr && verified_ != nullptr) {
    delete verified_;
  }
  verified_ = nullptr;
}
Email::Email(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.admin_api.Email)
}
Email::Email(const Email& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_email(),
      GetArena());
  }
  if (from._internal_has_primary()) {
    primary_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.primary_);
  } else {
    primary_ = nullptr;
  }
  if (from._internal_has_verified()) {
    verified_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.verified_);
  } else {
    verified_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.admin_api.Email)
}

void Email::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Email_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verified_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(verified_));
}

Email::~Email() {
  // @@protoc_insertion_point(destructor:clarifai.admin_api.Email)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Email::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete primary_;
  if (this != internal_default_instance()) delete verified_;
}

void Email::ArenaDtor(void* object) {
  Email* _this = reinterpret_cast< Email* >(object);
  (void)_this;
}
void Email::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Email::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Email& Email::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Email_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void Email::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.admin_api.Email)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && primary_ != nullptr) {
    delete primary_;
  }
  primary_ = nullptr;
  if (GetArena() == nullptr && verified_ != nullptr) {
    delete verified_;
  }
  verified_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Email::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.Email.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue primary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_primary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue verified = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_verified(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Email::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.admin_api.Email)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.Email.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // .google.protobuf.BoolValue primary = 2;
  if (this->has_primary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::primary(this), target, stream);
  }

  // .google.protobuf.BoolValue verified = 3;
  if (this->has_verified()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::verified(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.admin_api.Email)
  return target;
}

size_t Email::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.admin_api.Email)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // .google.protobuf.BoolValue primary = 2;
  if (this->has_primary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *primary_);
  }

  // .google.protobuf.BoolValue verified = 3;
  if (this->has_verified()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *verified_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Email::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.admin_api.Email)
  GOOGLE_DCHECK_NE(&from, this);
  const Email* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Email>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.admin_api.Email)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.admin_api.Email)
    MergeFrom(*source);
  }
}

void Email::MergeFrom(const Email& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.admin_api.Email)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.email().size() > 0) {
    _internal_set_email(from._internal_email());
  }
  if (from.has_primary()) {
    _internal_mutable_primary()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_primary());
  }
  if (from.has_verified()) {
    _internal_mutable_verified()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_verified());
  }
}

void Email::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.admin_api.Email)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Email::CopyFrom(const Email& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.admin_api.Email)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Email::IsInitialized() const {
  return true;
}

void Email::InternalSwap(Email* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Email, verified_)
      + sizeof(Email::verified_)
      - PROTOBUF_FIELD_OFFSET(Email, primary_)>(
          reinterpret_cast<char*>(&primary_),
          reinterpret_cast<char*>(&other->primary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Email::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void User::InitAsDefaultInstance() {
  ::clarifai::admin_api::_User_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class User::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const User* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::created_at(const User* msg) {
  return *msg->created_at_;
}
void User::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void User::clear_recent_apps() {
  recent_apps_.Clear();
}
User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  emails_(arena),
  recent_apps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.admin_api.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      emails_(from.emails_),
      recent_apps_(from.recent_apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  v2_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v2_id().empty()) {
    v2_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_v2_id(),
      GetArena());
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_first_name(),
      GetArena());
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_name(),
      GetArena());
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_name().empty()) {
    company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_company_name(),
      GetArena());
  }
  bill_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bill_type().empty()) {
    bill_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bill_type(),
      GetArena());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.admin_api.User)
}

void User::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_User_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v2_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bill_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_at_ = nullptr;
}

User::~User() {
  // @@protoc_insertion_point(destructor:clarifai.admin_api.User)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void User::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v2_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bill_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
}

void User::ArenaDtor(void* object) {
  User* _this = reinterpret_cast< User* >(object);
  (void)_this;
}
void User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const User& User::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_User_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.base);
  return *internal_default_instance();
}


void User::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.admin_api.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emails_.Clear();
  recent_apps_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  v2_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  first_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bill_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.User.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string v2_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_v2_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.User.v2_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.User.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.User.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.User.company_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.admin_api.Email emails = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_emails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bill_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_bill_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.admin_api.User.bill_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.App recent_apps = 10 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recent_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* User::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.admin_api.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.User.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string v2_id = 2;
  if (this->v2_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v2_id().data(), static_cast<int>(this->_internal_v2_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.User.v2_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_v2_id(), target);
  }

  // string first_name = 4;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.User.first_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_first_name(), target);
  }

  // string last_name = 5;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.User.last_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_last_name(), target);
  }

  // string company_name = 6;
  if (this->company_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.User.company_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_company_name(), target);
  }

  // repeated .clarifai.admin_api.Email emails = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_emails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_emails(i), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::created_at(this), target, stream);
  }

  // string bill_type = 9;
  if (this->bill_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bill_type().data(), static_cast<int>(this->_internal_bill_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.admin_api.User.bill_type");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_bill_type(), target);
  }

  // repeated .clarifai.api.App recent_apps = 10 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_recent_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_recent_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.admin_api.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.admin_api.User)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.admin_api.Email emails = 7;
  total_size += 1UL * this->_internal_emails_size();
  for (const auto& msg : this->emails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.App recent_apps = 10 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_recent_apps_size();
  for (const auto& msg : this->recent_apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string v2_id = 2;
  if (this->v2_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v2_id());
  }

  // string first_name = 4;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 5;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string company_name = 6;
  if (this->company_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  // string bill_type = 9;
  if (this->bill_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bill_type());
  }

  // .google.protobuf.Timestamp created_at = 8;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.admin_api.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.admin_api.User)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.admin_api.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.admin_api.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emails_.MergeFrom(from.emails_);
  recent_apps_.MergeFrom(from.recent_apps_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.v2_id().size() > 0) {
    _internal_set_v2_id(from._internal_v2_id());
  }
  if (from.first_name().size() > 0) {
    _internal_set_first_name(from._internal_first_name());
  }
  if (from.last_name().size() > 0) {
    _internal_set_last_name(from._internal_last_name());
  }
  if (from.company_name().size() > 0) {
    _internal_set_company_name(from._internal_company_name());
  }
  if (from.bill_type().size() > 0) {
    _internal_set_bill_type(from._internal_bill_type());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
}

void User::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.admin_api.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.admin_api.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  emails_.InternalSwap(&other->emails_);
  recent_apps_.InternalSwap(&other->recent_apps_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  v2_id_.Swap(&other->v2_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_name_.Swap(&other->company_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bill_type_.Swap(&other->bill_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(created_at_, other->created_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin_api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::admin_api::Cycle* Arena::CreateMaybeMessage< ::clarifai::admin_api::Cycle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::admin_api::Cycle >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::admin_api::OnetimeCharge* Arena::CreateMaybeMessage< ::clarifai::admin_api::OnetimeCharge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::admin_api::OnetimeCharge >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::admin_api::Credit* Arena::CreateMaybeMessage< ::clarifai::admin_api::Credit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::admin_api::Credit >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::admin_api::Tier* Arena::CreateMaybeMessage< ::clarifai::admin_api::Tier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::admin_api::Tier >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::admin_api::PricingTiers* Arena::CreateMaybeMessage< ::clarifai::admin_api::PricingTiers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::admin_api::PricingTiers >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::admin_api::MonthlyCharge* Arena::CreateMaybeMessage< ::clarifai::admin_api::MonthlyCharge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::admin_api::MonthlyCharge >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::admin_api::Plan* Arena::CreateMaybeMessage< ::clarifai::admin_api::Plan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::admin_api::Plan >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::admin_api::RuntimeConfig* Arena::CreateMaybeMessage< ::clarifai::admin_api::RuntimeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::admin_api::RuntimeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::admin_api::SignupCode* Arena::CreateMaybeMessage< ::clarifai::admin_api::SignupCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::admin_api::SignupCode >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::admin_api::Schedule* Arena::CreateMaybeMessage< ::clarifai::admin_api::Schedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::admin_api::Schedule >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::admin_api::ScheduledPlans* Arena::CreateMaybeMessage< ::clarifai::admin_api::ScheduledPlans >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::admin_api::ScheduledPlans >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::admin_api::ThrottleByPath* Arena::CreateMaybeMessage< ::clarifai::admin_api::ThrottleByPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::admin_api::ThrottleByPath >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::admin_api::Email* Arena::CreateMaybeMessage< ::clarifai::admin_api::Email >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::admin_api::Email >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::admin_api::User* Arena::CreateMaybeMessage< ::clarifai::admin_api::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::admin_api::User >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
