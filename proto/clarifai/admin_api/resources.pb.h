// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/admin_api/resources.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/clarifai/api/resources.pb.h"
#include "proto/clarifai/api/utils/extensions.pb.h"
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
namespace clarifai {
namespace admin_api {
class Credit;
class CreditDefaultTypeInternal;
extern CreditDefaultTypeInternal _Credit_default_instance_;
class Cycle;
class CycleDefaultTypeInternal;
extern CycleDefaultTypeInternal _Cycle_default_instance_;
class Email;
class EmailDefaultTypeInternal;
extern EmailDefaultTypeInternal _Email_default_instance_;
class MonthlyCharge;
class MonthlyChargeDefaultTypeInternal;
extern MonthlyChargeDefaultTypeInternal _MonthlyCharge_default_instance_;
class OnetimeCharge;
class OnetimeChargeDefaultTypeInternal;
extern OnetimeChargeDefaultTypeInternal _OnetimeCharge_default_instance_;
class Plan;
class PlanDefaultTypeInternal;
extern PlanDefaultTypeInternal _Plan_default_instance_;
class PricingTiers;
class PricingTiersDefaultTypeInternal;
extern PricingTiersDefaultTypeInternal _PricingTiers_default_instance_;
class RuntimeConfig;
class RuntimeConfigDefaultTypeInternal;
extern RuntimeConfigDefaultTypeInternal _RuntimeConfig_default_instance_;
class Schedule;
class ScheduleDefaultTypeInternal;
extern ScheduleDefaultTypeInternal _Schedule_default_instance_;
class ScheduledPlans;
class ScheduledPlansDefaultTypeInternal;
extern ScheduledPlansDefaultTypeInternal _ScheduledPlans_default_instance_;
class SignupCode;
class SignupCodeDefaultTypeInternal;
extern SignupCodeDefaultTypeInternal _SignupCode_default_instance_;
class ThrottleByPath;
class ThrottleByPathDefaultTypeInternal;
extern ThrottleByPathDefaultTypeInternal _ThrottleByPath_default_instance_;
class Tier;
class TierDefaultTypeInternal;
extern TierDefaultTypeInternal _Tier_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace admin_api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> ::clarifai::admin_api::Credit* Arena::CreateMaybeMessage<::clarifai::admin_api::Credit>(Arena*);
template<> ::clarifai::admin_api::Cycle* Arena::CreateMaybeMessage<::clarifai::admin_api::Cycle>(Arena*);
template<> ::clarifai::admin_api::Email* Arena::CreateMaybeMessage<::clarifai::admin_api::Email>(Arena*);
template<> ::clarifai::admin_api::MonthlyCharge* Arena::CreateMaybeMessage<::clarifai::admin_api::MonthlyCharge>(Arena*);
template<> ::clarifai::admin_api::OnetimeCharge* Arena::CreateMaybeMessage<::clarifai::admin_api::OnetimeCharge>(Arena*);
template<> ::clarifai::admin_api::Plan* Arena::CreateMaybeMessage<::clarifai::admin_api::Plan>(Arena*);
template<> ::clarifai::admin_api::PricingTiers* Arena::CreateMaybeMessage<::clarifai::admin_api::PricingTiers>(Arena*);
template<> ::clarifai::admin_api::RuntimeConfig* Arena::CreateMaybeMessage<::clarifai::admin_api::RuntimeConfig>(Arena*);
template<> ::clarifai::admin_api::Schedule* Arena::CreateMaybeMessage<::clarifai::admin_api::Schedule>(Arena*);
template<> ::clarifai::admin_api::ScheduledPlans* Arena::CreateMaybeMessage<::clarifai::admin_api::ScheduledPlans>(Arena*);
template<> ::clarifai::admin_api::SignupCode* Arena::CreateMaybeMessage<::clarifai::admin_api::SignupCode>(Arena*);
template<> ::clarifai::admin_api::ThrottleByPath* Arena::CreateMaybeMessage<::clarifai::admin_api::ThrottleByPath>(Arena*);
template<> ::clarifai::admin_api::Tier* Arena::CreateMaybeMessage<::clarifai::admin_api::Tier>(Arena*);
template<> ::clarifai::admin_api::User* Arena::CreateMaybeMessage<::clarifai::admin_api::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clarifai {
namespace admin_api {

enum OpType : int {
  undef = 0,
  billed = 1,
  search_and_predict = 2,
  custom_predict = 3,
  input = 4,
  concept = 5,
  OpType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OpType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OpType_IsValid(int value);
constexpr OpType OpType_MIN = undef;
constexpr OpType OpType_MAX = concept;
constexpr int OpType_ARRAYSIZE = OpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpType_descriptor();
template<typename T>
inline const std::string& OpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OpType_descriptor(), enum_t_value);
}
inline bool OpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OpType>(
    OpType_descriptor(), name, value);
}
// ===================================================================

class Cycle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.admin_api.Cycle) */ {
 public:
  inline Cycle() : Cycle(nullptr) {}
  virtual ~Cycle();

  Cycle(const Cycle& from);
  Cycle(Cycle&& from) noexcept
    : Cycle() {
    *this = ::std::move(from);
  }

  inline Cycle& operator=(const Cycle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cycle& operator=(Cycle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cycle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cycle* internal_default_instance() {
    return reinterpret_cast<const Cycle*>(
               &_Cycle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Cycle& a, Cycle& b) {
    a.Swap(&b);
  }
  inline void Swap(Cycle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cycle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cycle* New() const final {
    return CreateMaybeMessage<Cycle>(nullptr);
  }

  Cycle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cycle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cycle& from);
  void MergeFrom(const Cycle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cycle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.admin_api.Cycle";
  }
  protected:
  explicit Cycle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCycleIdFieldNumber = 1,
    kStartDateFieldNumber = 2,
    kEndDateFieldNumber = 3,
    kResetAtFieldNumber = 4,
  };
  // .google.protobuf.UInt32Value cycle_id = 1;
  bool has_cycle_id() const;
  private:
  bool _internal_has_cycle_id() const;
  public:
  void clear_cycle_id();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& cycle_id() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_cycle_id();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_cycle_id();
  void set_allocated_cycle_id(PROTOBUF_NAMESPACE_ID::UInt32Value* cycle_id);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_cycle_id() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_cycle_id();
  public:
  void unsafe_arena_set_allocated_cycle_id(
      PROTOBUF_NAMESPACE_ID::UInt32Value* cycle_id);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_cycle_id();

  // .google.protobuf.Timestamp start_date = 2;
  bool has_start_date() const;
  private:
  bool _internal_has_start_date() const;
  public:
  void clear_start_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_date();
  void set_allocated_start_date(PROTOBUF_NAMESPACE_ID::Timestamp* start_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_date();
  public:
  void unsafe_arena_set_allocated_start_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_date();

  // .google.protobuf.Timestamp end_date = 3;
  bool has_end_date() const;
  private:
  bool _internal_has_end_date() const;
  public:
  void clear_end_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_date();
  void set_allocated_end_date(PROTOBUF_NAMESPACE_ID::Timestamp* end_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_date();
  public:
  void unsafe_arena_set_allocated_end_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_date();

  // .google.protobuf.Timestamp reset_at = 4;
  bool has_reset_at() const;
  private:
  bool _internal_has_reset_at() const;
  public:
  void clear_reset_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& reset_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_reset_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_reset_at();
  void set_allocated_reset_at(PROTOBUF_NAMESPACE_ID::Timestamp* reset_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_reset_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_reset_at();
  public:
  void unsafe_arena_set_allocated_reset_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* reset_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_reset_at();

  // @@protoc_insertion_point(class_scope:clarifai.admin_api.Cycle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* cycle_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_date_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_date_;
  PROTOBUF_NAMESPACE_ID::Timestamp* reset_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class OnetimeCharge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.admin_api.OnetimeCharge) */ {
 public:
  inline OnetimeCharge() : OnetimeCharge(nullptr) {}
  virtual ~OnetimeCharge();

  OnetimeCharge(const OnetimeCharge& from);
  OnetimeCharge(OnetimeCharge&& from) noexcept
    : OnetimeCharge() {
    *this = ::std::move(from);
  }

  inline OnetimeCharge& operator=(const OnetimeCharge& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnetimeCharge& operator=(OnetimeCharge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnetimeCharge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnetimeCharge* internal_default_instance() {
    return reinterpret_cast<const OnetimeCharge*>(
               &_OnetimeCharge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OnetimeCharge& a, OnetimeCharge& b) {
    a.Swap(&b);
  }
  inline void Swap(OnetimeCharge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnetimeCharge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnetimeCharge* New() const final {
    return CreateMaybeMessage<OnetimeCharge>(nullptr);
  }

  OnetimeCharge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnetimeCharge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnetimeCharge& from);
  void MergeFrom(const OnetimeCharge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnetimeCharge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.admin_api.OnetimeCharge";
  }
  protected:
  explicit OnetimeCharge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChargeIdFieldNumber = 1,
    kInvoiceIdFieldNumber = 3,
    kNotesFieldNumber = 6,
    kCreatedAtFieldNumber = 2,
    kBillImmediatelyFieldNumber = 5,
    kDollarsFieldNumber = 4,
  };
  // string charge_id = 1;
  void clear_charge_id();
  const std::string& charge_id() const;
  void set_charge_id(const std::string& value);
  void set_charge_id(std::string&& value);
  void set_charge_id(const char* value);
  void set_charge_id(const char* value, size_t size);
  std::string* mutable_charge_id();
  std::string* release_charge_id();
  void set_allocated_charge_id(std::string* charge_id);
  private:
  const std::string& _internal_charge_id() const;
  void _internal_set_charge_id(const std::string& value);
  std::string* _internal_mutable_charge_id();
  public:

  // string invoice_id = 3;
  void clear_invoice_id();
  const std::string& invoice_id() const;
  void set_invoice_id(const std::string& value);
  void set_invoice_id(std::string&& value);
  void set_invoice_id(const char* value);
  void set_invoice_id(const char* value, size_t size);
  std::string* mutable_invoice_id();
  std::string* release_invoice_id();
  void set_allocated_invoice_id(std::string* invoice_id);
  private:
  const std::string& _internal_invoice_id() const;
  void _internal_set_invoice_id(const std::string& value);
  std::string* _internal_mutable_invoice_id();
  public:

  // string notes = 6;
  void clear_notes();
  const std::string& notes() const;
  void set_notes(const std::string& value);
  void set_notes(std::string&& value);
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  std::string* mutable_notes();
  std::string* release_notes();
  void set_allocated_notes(std::string* notes);
  private:
  const std::string& _internal_notes() const;
  void _internal_set_notes(const std::string& value);
  std::string* _internal_mutable_notes();
  public:

  // .google.protobuf.Timestamp created_at = 2;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.BoolValue bill_immediately = 5;
  bool has_bill_immediately() const;
  private:
  bool _internal_has_bill_immediately() const;
  public:
  void clear_bill_immediately();
  const PROTOBUF_NAMESPACE_ID::BoolValue& bill_immediately() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_bill_immediately();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_bill_immediately();
  void set_allocated_bill_immediately(PROTOBUF_NAMESPACE_ID::BoolValue* bill_immediately);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_bill_immediately() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_bill_immediately();
  public:
  void unsafe_arena_set_allocated_bill_immediately(
      PROTOBUF_NAMESPACE_ID::BoolValue* bill_immediately);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_bill_immediately();

  // double dollars = 4;
  void clear_dollars();
  double dollars() const;
  void set_dollars(double value);
  private:
  double _internal_dollars() const;
  void _internal_set_dollars(double value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.admin_api.OnetimeCharge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr charge_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invoice_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::BoolValue* bill_immediately_;
  double dollars_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Credit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.admin_api.Credit) */ {
 public:
  inline Credit() : Credit(nullptr) {}
  virtual ~Credit();

  Credit(const Credit& from);
  Credit(Credit&& from) noexcept
    : Credit() {
    *this = ::std::move(from);
  }

  inline Credit& operator=(const Credit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Credit& operator=(Credit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Credit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Credit* internal_default_instance() {
    return reinterpret_cast<const Credit*>(
               &_Credit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Credit& a, Credit& b) {
    a.Swap(&b);
  }
  inline void Swap(Credit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Credit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Credit* New() const final {
    return CreateMaybeMessage<Credit>(nullptr);
  }

  Credit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Credit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Credit& from);
  void MergeFrom(const Credit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Credit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.admin_api.Credit";
  }
  protected:
  explicit Credit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotesFieldNumber = 3,
    kOpNameFieldNumber = 4,
    kOpTypeFieldNumber = 1,
    kNumberFieldNumber = 2,
  };
  // string notes = 3;
  void clear_notes();
  const std::string& notes() const;
  void set_notes(const std::string& value);
  void set_notes(std::string&& value);
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  std::string* mutable_notes();
  std::string* release_notes();
  void set_allocated_notes(std::string* notes);
  private:
  const std::string& _internal_notes() const;
  void _internal_set_notes(const std::string& value);
  std::string* _internal_mutable_notes();
  public:

  // string op_name = 4;
  void clear_op_name();
  const std::string& op_name() const;
  void set_op_name(const std::string& value);
  void set_op_name(std::string&& value);
  void set_op_name(const char* value);
  void set_op_name(const char* value, size_t size);
  std::string* mutable_op_name();
  std::string* release_op_name();
  void set_allocated_op_name(std::string* op_name);
  private:
  const std::string& _internal_op_name() const;
  void _internal_set_op_name(const std::string& value);
  std::string* _internal_mutable_op_name();
  public:

  // .clarifai.admin_api.OpType op_type = 1;
  void clear_op_type();
  ::clarifai::admin_api::OpType op_type() const;
  void set_op_type(::clarifai::admin_api::OpType value);
  private:
  ::clarifai::admin_api::OpType _internal_op_type() const;
  void _internal_set_op_type(::clarifai::admin_api::OpType value);
  public:

  // int32 number = 2;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.admin_api.Credit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_name_;
  int op_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Tier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.admin_api.Tier) */ {
 public:
  inline Tier() : Tier(nullptr) {}
  virtual ~Tier();

  Tier(const Tier& from);
  Tier(Tier&& from) noexcept
    : Tier() {
    *this = ::std::move(from);
  }

  inline Tier& operator=(const Tier& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tier& operator=(Tier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tier* internal_default_instance() {
    return reinterpret_cast<const Tier*>(
               &_Tier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Tier& a, Tier& b) {
    a.Swap(&b);
  }
  inline void Swap(Tier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tier* New() const final {
    return CreateMaybeMessage<Tier>(nullptr);
  }

  Tier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tier& from);
  void MergeFrom(const Tier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.admin_api.Tier";
  }
  protected:
  explicit Tier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPricePerOpFieldNumber = 2,
    kNumberFieldNumber = 1,
  };
  // double price_per_op = 2;
  void clear_price_per_op();
  double price_per_op() const;
  void set_price_per_op(double value);
  private:
  double _internal_price_per_op() const;
  void _internal_set_price_per_op(double value);
  public:

  // int32 number = 1;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.admin_api.Tier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double price_per_op_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class PricingTiers PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.admin_api.PricingTiers) */ {
 public:
  inline PricingTiers() : PricingTiers(nullptr) {}
  virtual ~PricingTiers();

  PricingTiers(const PricingTiers& from);
  PricingTiers(PricingTiers&& from) noexcept
    : PricingTiers() {
    *this = ::std::move(from);
  }

  inline PricingTiers& operator=(const PricingTiers& from) {
    CopyFrom(from);
    return *this;
  }
  inline PricingTiers& operator=(PricingTiers&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PricingTiers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PricingTiers* internal_default_instance() {
    return reinterpret_cast<const PricingTiers*>(
               &_PricingTiers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PricingTiers& a, PricingTiers& b) {
    a.Swap(&b);
  }
  inline void Swap(PricingTiers* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PricingTiers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PricingTiers* New() const final {
    return CreateMaybeMessage<PricingTiers>(nullptr);
  }

  PricingTiers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PricingTiers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PricingTiers& from);
  void MergeFrom(const PricingTiers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PricingTiers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.admin_api.PricingTiers";
  }
  protected:
  explicit PricingTiers(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonthlyFieldNumber = 2,
    kLifetimeFieldNumber = 3,
    kOpNameFieldNumber = 4,
    kOpTypeFieldNumber = 1,
  };
  // repeated .clarifai.admin_api.Tier monthly = 2;
  int monthly_size() const;
  private:
  int _internal_monthly_size() const;
  public:
  void clear_monthly();
  ::clarifai::admin_api::Tier* mutable_monthly(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::Tier >*
      mutable_monthly();
  private:
  const ::clarifai::admin_api::Tier& _internal_monthly(int index) const;
  ::clarifai::admin_api::Tier* _internal_add_monthly();
  public:
  const ::clarifai::admin_api::Tier& monthly(int index) const;
  ::clarifai::admin_api::Tier* add_monthly();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::Tier >&
      monthly() const;

  // repeated .clarifai.admin_api.Tier lifetime = 3;
  int lifetime_size() const;
  private:
  int _internal_lifetime_size() const;
  public:
  void clear_lifetime();
  ::clarifai::admin_api::Tier* mutable_lifetime(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::Tier >*
      mutable_lifetime();
  private:
  const ::clarifai::admin_api::Tier& _internal_lifetime(int index) const;
  ::clarifai::admin_api::Tier* _internal_add_lifetime();
  public:
  const ::clarifai::admin_api::Tier& lifetime(int index) const;
  ::clarifai::admin_api::Tier* add_lifetime();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::Tier >&
      lifetime() const;

  // string op_name = 4;
  void clear_op_name();
  const std::string& op_name() const;
  void set_op_name(const std::string& value);
  void set_op_name(std::string&& value);
  void set_op_name(const char* value);
  void set_op_name(const char* value, size_t size);
  std::string* mutable_op_name();
  std::string* release_op_name();
  void set_allocated_op_name(std::string* op_name);
  private:
  const std::string& _internal_op_name() const;
  void _internal_set_op_name(const std::string& value);
  std::string* _internal_mutable_op_name();
  public:

  // .clarifai.admin_api.OpType op_type = 1;
  void clear_op_type();
  ::clarifai::admin_api::OpType op_type() const;
  void set_op_type(::clarifai::admin_api::OpType value);
  private:
  ::clarifai::admin_api::OpType _internal_op_type() const;
  void _internal_set_op_type(::clarifai::admin_api::OpType value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.admin_api.PricingTiers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::Tier > monthly_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::Tier > lifetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_name_;
  int op_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class MonthlyCharge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.admin_api.MonthlyCharge) */ {
 public:
  inline MonthlyCharge() : MonthlyCharge(nullptr) {}
  virtual ~MonthlyCharge();

  MonthlyCharge(const MonthlyCharge& from);
  MonthlyCharge(MonthlyCharge&& from) noexcept
    : MonthlyCharge() {
    *this = ::std::move(from);
  }

  inline MonthlyCharge& operator=(const MonthlyCharge& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonthlyCharge& operator=(MonthlyCharge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonthlyCharge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonthlyCharge* internal_default_instance() {
    return reinterpret_cast<const MonthlyCharge*>(
               &_MonthlyCharge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MonthlyCharge& a, MonthlyCharge& b) {
    a.Swap(&b);
  }
  inline void Swap(MonthlyCharge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonthlyCharge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonthlyCharge* New() const final {
    return CreateMaybeMessage<MonthlyCharge>(nullptr);
  }

  MonthlyCharge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonthlyCharge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonthlyCharge& from);
  void MergeFrom(const MonthlyCharge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonthlyCharge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.admin_api.MonthlyCharge";
  }
  protected:
  explicit MonthlyCharge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotesFieldNumber = 2,
    kPriceFieldNumber = 1,
  };
  // string notes = 2;
  void clear_notes();
  const std::string& notes() const;
  void set_notes(const std::string& value);
  void set_notes(std::string&& value);
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  std::string* mutable_notes();
  std::string* release_notes();
  void set_allocated_notes(std::string* notes);
  private:
  const std::string& _internal_notes() const;
  void _internal_set_notes(const std::string& value);
  std::string* _internal_mutable_notes();
  public:

  // double price = 1;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.admin_api.MonthlyCharge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  double price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Plan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.admin_api.Plan) */ {
 public:
  inline Plan() : Plan(nullptr) {}
  virtual ~Plan();

  Plan(const Plan& from);
  Plan(Plan&& from) noexcept
    : Plan() {
    *this = ::std::move(from);
  }

  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plan& operator=(Plan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Plan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Plan* internal_default_instance() {
    return reinterpret_cast<const Plan*>(
               &_Plan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Plan& a, Plan& b) {
    a.Swap(&b);
  }
  inline void Swap(Plan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Plan* New() const final {
    return CreateMaybeMessage<Plan>(nullptr);
  }

  Plan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Plan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Plan& from);
  void MergeFrom(const Plan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.admin_api.Plan";
  }
  protected:
  explicit Plan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPricingTiersFieldNumber = 3,
    kMonthlyChargesFieldNumber = 4,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated .clarifai.admin_api.PricingTiers pricing_tiers = 3;
  int pricing_tiers_size() const;
  private:
  int _internal_pricing_tiers_size() const;
  public:
  void clear_pricing_tiers();
  ::clarifai::admin_api::PricingTiers* mutable_pricing_tiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::PricingTiers >*
      mutable_pricing_tiers();
  private:
  const ::clarifai::admin_api::PricingTiers& _internal_pricing_tiers(int index) const;
  ::clarifai::admin_api::PricingTiers* _internal_add_pricing_tiers();
  public:
  const ::clarifai::admin_api::PricingTiers& pricing_tiers(int index) const;
  ::clarifai::admin_api::PricingTiers* add_pricing_tiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::PricingTiers >&
      pricing_tiers() const;

  // repeated .clarifai.admin_api.MonthlyCharge monthly_charges = 4;
  int monthly_charges_size() const;
  private:
  int _internal_monthly_charges_size() const;
  public:
  void clear_monthly_charges();
  ::clarifai::admin_api::MonthlyCharge* mutable_monthly_charges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::MonthlyCharge >*
      mutable_monthly_charges();
  private:
  const ::clarifai::admin_api::MonthlyCharge& _internal_monthly_charges(int index) const;
  ::clarifai::admin_api::MonthlyCharge* _internal_add_monthly_charges();
  public:
  const ::clarifai::admin_api::MonthlyCharge& monthly_charges(int index) const;
  ::clarifai::admin_api::MonthlyCharge* add_monthly_charges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::MonthlyCharge >&
      monthly_charges() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.admin_api.Plan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::PricingTiers > pricing_tiers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::MonthlyCharge > monthly_charges_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class RuntimeConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.admin_api.RuntimeConfig) */ {
 public:
  inline RuntimeConfig() : RuntimeConfig(nullptr) {}
  virtual ~RuntimeConfig();

  RuntimeConfig(const RuntimeConfig& from);
  RuntimeConfig(RuntimeConfig&& from) noexcept
    : RuntimeConfig() {
    *this = ::std::move(from);
  }

  inline RuntimeConfig& operator=(const RuntimeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeConfig& operator=(RuntimeConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuntimeConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeConfig* internal_default_instance() {
    return reinterpret_cast<const RuntimeConfig*>(
               &_RuntimeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RuntimeConfig& a, RuntimeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeConfig* New() const final {
    return CreateMaybeMessage<RuntimeConfig>(nullptr);
  }

  RuntimeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuntimeConfig& from);
  void MergeFrom(const RuntimeConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.admin_api.RuntimeConfig";
  }
  protected:
  explicit RuntimeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPlanIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kCreatedAtFieldNumber = 4,
    kModifiedAtFieldNumber = 5,
    kConfigFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string plan_id = 2;
  void clear_plan_id();
  const std::string& plan_id() const;
  void set_plan_id(const std::string& value);
  void set_plan_id(std::string&& value);
  void set_plan_id(const char* value);
  void set_plan_id(const char* value, size_t size);
  std::string* mutable_plan_id();
  std::string* release_plan_id();
  void set_allocated_plan_id(std::string* plan_id);
  private:
  const std::string& _internal_plan_id() const;
  void _internal_set_plan_id(const std::string& value);
  std::string* _internal_mutable_plan_id();
  public:

  // string user_id = 3;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .google.protobuf.Timestamp created_at = 4;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp modified_at = 5;
  bool has_modified_at() const;
  private:
  bool _internal_has_modified_at() const;
  public:
  void clear_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified_at();
  void set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified_at();
  public:
  void unsafe_arena_set_allocated_modified_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_modified_at();

  // .google.protobuf.Struct config = 6;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const PROTOBUF_NAMESPACE_ID::Struct& config() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_config();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_config();
  void set_allocated_config(PROTOBUF_NAMESPACE_ID::Struct* config);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_config() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      PROTOBUF_NAMESPACE_ID::Struct* config);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:clarifai.admin_api.RuntimeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plan_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_at_;
  PROTOBUF_NAMESPACE_ID::Struct* config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class SignupCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.admin_api.SignupCode) */ {
 public:
  inline SignupCode() : SignupCode(nullptr) {}
  virtual ~SignupCode();

  SignupCode(const SignupCode& from);
  SignupCode(SignupCode&& from) noexcept
    : SignupCode() {
    *this = ::std::move(from);
  }

  inline SignupCode& operator=(const SignupCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignupCode& operator=(SignupCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignupCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignupCode* internal_default_instance() {
    return reinterpret_cast<const SignupCode*>(
               &_SignupCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SignupCode& a, SignupCode& b) {
    a.Swap(&b);
  }
  inline void Swap(SignupCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignupCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignupCode* New() const final {
    return CreateMaybeMessage<SignupCode>(nullptr);
  }

  SignupCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignupCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignupCode& from);
  void MergeFrom(const SignupCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignupCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.admin_api.SignupCode";
  }
  protected:
  explicit SignupCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlanNameFieldNumber = 1,
    kCodeFieldNumber = 2,
    kExpiresAtFieldNumber = 3,
  };
  // string plan_name = 1;
  void clear_plan_name();
  const std::string& plan_name() const;
  void set_plan_name(const std::string& value);
  void set_plan_name(std::string&& value);
  void set_plan_name(const char* value);
  void set_plan_name(const char* value, size_t size);
  std::string* mutable_plan_name();
  std::string* release_plan_name();
  void set_allocated_plan_name(std::string* plan_name);
  private:
  const std::string& _internal_plan_name() const;
  void _internal_set_plan_name(const std::string& value);
  std::string* _internal_mutable_plan_name();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // .google.protobuf.Timestamp expires_at = 3;
  bool has_expires_at() const;
  private:
  bool _internal_has_expires_at() const;
  public:
  void clear_expires_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expires_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expires_at();
  public:
  void unsafe_arena_set_allocated_expires_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expires_at();

  // @@protoc_insertion_point(class_scope:clarifai.admin_api.SignupCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plan_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expires_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Schedule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.admin_api.Schedule) */ {
 public:
  inline Schedule() : Schedule(nullptr) {}
  virtual ~Schedule();

  Schedule(const Schedule& from);
  Schedule(Schedule&& from) noexcept
    : Schedule() {
    *this = ::std::move(from);
  }

  inline Schedule& operator=(const Schedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Schedule& operator=(Schedule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Schedule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Schedule* internal_default_instance() {
    return reinterpret_cast<const Schedule*>(
               &_Schedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Schedule& a, Schedule& b) {
    a.Swap(&b);
  }
  inline void Swap(Schedule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Schedule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Schedule* New() const final {
    return CreateMaybeMessage<Schedule>(nullptr);
  }

  Schedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Schedule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Schedule& from);
  void MergeFrom(const Schedule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Schedule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.admin_api.Schedule";
  }
  protected:
  explicit Schedule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotesFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // string notes = 2;
  void clear_notes();
  const std::string& notes() const;
  void set_notes(const std::string& value);
  void set_notes(std::string&& value);
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  std::string* mutable_notes();
  std::string* release_notes();
  void set_allocated_notes(std::string* notes);
  private:
  const std::string& _internal_notes() const;
  void _internal_set_notes(const std::string& value);
  std::string* _internal_mutable_notes();
  public:

  // .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // @@protoc_insertion_point(class_scope:clarifai.admin_api.Schedule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ScheduledPlans PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.admin_api.ScheduledPlans) */ {
 public:
  inline ScheduledPlans() : ScheduledPlans(nullptr) {}
  virtual ~ScheduledPlans();

  ScheduledPlans(const ScheduledPlans& from);
  ScheduledPlans(ScheduledPlans&& from) noexcept
    : ScheduledPlans() {
    *this = ::std::move(from);
  }

  inline ScheduledPlans& operator=(const ScheduledPlans& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduledPlans& operator=(ScheduledPlans&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScheduledPlans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScheduledPlans* internal_default_instance() {
    return reinterpret_cast<const ScheduledPlans*>(
               &_ScheduledPlans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ScheduledPlans& a, ScheduledPlans& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduledPlans* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduledPlans* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScheduledPlans* New() const final {
    return CreateMaybeMessage<ScheduledPlans>(nullptr);
  }

  ScheduledPlans* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScheduledPlans>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScheduledPlans& from);
  void MergeFrom(const ScheduledPlans& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduledPlans* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.admin_api.ScheduledPlans";
  }
  protected:
  explicit ScheduledPlans(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlanNameFieldNumber = 1,
    kNotesFieldNumber = 3,
    kPlanIdFieldNumber = 4,
    kTimeFieldNumber = 2,
  };
  // string plan_name = 1;
  void clear_plan_name();
  const std::string& plan_name() const;
  void set_plan_name(const std::string& value);
  void set_plan_name(std::string&& value);
  void set_plan_name(const char* value);
  void set_plan_name(const char* value, size_t size);
  std::string* mutable_plan_name();
  std::string* release_plan_name();
  void set_allocated_plan_name(std::string* plan_name);
  private:
  const std::string& _internal_plan_name() const;
  void _internal_set_plan_name(const std::string& value);
  std::string* _internal_mutable_plan_name();
  public:

  // string notes = 3;
  void clear_notes();
  const std::string& notes() const;
  void set_notes(const std::string& value);
  void set_notes(std::string&& value);
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  std::string* mutable_notes();
  std::string* release_notes();
  void set_allocated_notes(std::string* notes);
  private:
  const std::string& _internal_notes() const;
  void _internal_set_notes(const std::string& value);
  std::string* _internal_mutable_notes();
  public:

  // string plan_id = 4;
  void clear_plan_id();
  const std::string& plan_id() const;
  void set_plan_id(const std::string& value);
  void set_plan_id(std::string&& value);
  void set_plan_id(const char* value);
  void set_plan_id(const char* value, size_t size);
  std::string* mutable_plan_id();
  std::string* release_plan_id();
  void set_allocated_plan_id(std::string* plan_id);
  private:
  const std::string& _internal_plan_id() const;
  void _internal_set_plan_id(const std::string& value);
  std::string* _internal_mutable_plan_id();
  public:

  // .google.protobuf.Timestamp time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // @@protoc_insertion_point(class_scope:clarifai.admin_api.ScheduledPlans)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plan_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plan_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ThrottleByPath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.admin_api.ThrottleByPath) */ {
 public:
  inline ThrottleByPath() : ThrottleByPath(nullptr) {}
  virtual ~ThrottleByPath();

  ThrottleByPath(const ThrottleByPath& from);
  ThrottleByPath(ThrottleByPath&& from) noexcept
    : ThrottleByPath() {
    *this = ::std::move(from);
  }

  inline ThrottleByPath& operator=(const ThrottleByPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThrottleByPath& operator=(ThrottleByPath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThrottleByPath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThrottleByPath* internal_default_instance() {
    return reinterpret_cast<const ThrottleByPath*>(
               &_ThrottleByPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ThrottleByPath& a, ThrottleByPath& b) {
    a.Swap(&b);
  }
  inline void Swap(ThrottleByPath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThrottleByPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThrottleByPath* New() const final {
    return CreateMaybeMessage<ThrottleByPath>(nullptr);
  }

  ThrottleByPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThrottleByPath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThrottleByPath& from);
  void MergeFrom(const ThrottleByPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThrottleByPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.admin_api.ThrottleByPath";
  }
  protected:
  explicit ThrottleByPath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV2PathFieldNumber = 1,
    kCreatedAtFieldNumber = 3,
    kModifiedAtFieldNumber = 4,
    kThrottleFieldNumber = 2,
  };
  // string v2_path = 1;
  void clear_v2_path();
  const std::string& v2_path() const;
  void set_v2_path(const std::string& value);
  void set_v2_path(std::string&& value);
  void set_v2_path(const char* value);
  void set_v2_path(const char* value, size_t size);
  std::string* mutable_v2_path();
  std::string* release_v2_path();
  void set_allocated_v2_path(std::string* v2_path);
  private:
  const std::string& _internal_v2_path() const;
  void _internal_set_v2_path(const std::string& value);
  std::string* _internal_mutable_v2_path();
  public:

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp modified_at = 4;
  bool has_modified_at() const;
  private:
  bool _internal_has_modified_at() const;
  public:
  void clear_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified_at();
  void set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified_at();
  public:
  void unsafe_arena_set_allocated_modified_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_modified_at();

  // int32 throttle = 2;
  void clear_throttle();
  ::PROTOBUF_NAMESPACE_ID::int32 throttle() const;
  void set_throttle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_throttle() const;
  void _internal_set_throttle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.admin_api.ThrottleByPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v2_path_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 throttle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Email PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.admin_api.Email) */ {
 public:
  inline Email() : Email(nullptr) {}
  virtual ~Email();

  Email(const Email& from);
  Email(Email&& from) noexcept
    : Email() {
    *this = ::std::move(from);
  }

  inline Email& operator=(const Email& from) {
    CopyFrom(from);
    return *this;
  }
  inline Email& operator=(Email&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Email& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Email* internal_default_instance() {
    return reinterpret_cast<const Email*>(
               &_Email_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Email& a, Email& b) {
    a.Swap(&b);
  }
  inline void Swap(Email* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Email* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Email* New() const final {
    return CreateMaybeMessage<Email>(nullptr);
  }

  Email* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Email>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Email& from);
  void MergeFrom(const Email& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Email* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.admin_api.Email";
  }
  protected:
  explicit Email(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kPrimaryFieldNumber = 2,
    kVerifiedFieldNumber = 3,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // .google.protobuf.BoolValue primary = 2;
  bool has_primary() const;
  private:
  bool _internal_has_primary() const;
  public:
  void clear_primary();
  const PROTOBUF_NAMESPACE_ID::BoolValue& primary() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_primary();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_primary();
  void set_allocated_primary(PROTOBUF_NAMESPACE_ID::BoolValue* primary);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_primary() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_primary();
  public:
  void unsafe_arena_set_allocated_primary(
      PROTOBUF_NAMESPACE_ID::BoolValue* primary);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_primary();

  // .google.protobuf.BoolValue verified = 3;
  bool has_verified() const;
  private:
  bool _internal_has_verified() const;
  public:
  void clear_verified();
  const PROTOBUF_NAMESPACE_ID::BoolValue& verified() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_verified();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_verified();
  void set_allocated_verified(PROTOBUF_NAMESPACE_ID::BoolValue* verified);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_verified() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_verified();
  public:
  void unsafe_arena_set_allocated_verified(
      PROTOBUF_NAMESPACE_ID::BoolValue* verified);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_verified();

  // @@protoc_insertion_point(class_scope:clarifai.admin_api.Email)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  PROTOBUF_NAMESPACE_ID::BoolValue* primary_;
  PROTOBUF_NAMESPACE_ID::BoolValue* verified_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.admin_api.User) */ {
 public:
  inline User() : User(nullptr) {}
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.admin_api.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailsFieldNumber = 7,
    kRecentAppsFieldNumber = 10,
    kIdFieldNumber = 1,
    kV2IdFieldNumber = 2,
    kFirstNameFieldNumber = 4,
    kLastNameFieldNumber = 5,
    kCompanyNameFieldNumber = 6,
    kBillTypeFieldNumber = 9,
    kCreatedAtFieldNumber = 8,
  };
  // repeated .clarifai.admin_api.Email emails = 7;
  int emails_size() const;
  private:
  int _internal_emails_size() const;
  public:
  void clear_emails();
  ::clarifai::admin_api::Email* mutable_emails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::Email >*
      mutable_emails();
  private:
  const ::clarifai::admin_api::Email& _internal_emails(int index) const;
  ::clarifai::admin_api::Email* _internal_add_emails();
  public:
  const ::clarifai::admin_api::Email& emails(int index) const;
  ::clarifai::admin_api::Email* add_emails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::Email >&
      emails() const;

  // repeated .clarifai.api.App recent_apps = 10 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int recent_apps_size() const;
  private:
  int _internal_recent_apps_size() const;
  public:
  void clear_recent_apps();
  ::clarifai::api::App* mutable_recent_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
      mutable_recent_apps();
  private:
  const ::clarifai::api::App& _internal_recent_apps(int index) const;
  ::clarifai::api::App* _internal_add_recent_apps();
  public:
  const ::clarifai::api::App& recent_apps(int index) const;
  ::clarifai::api::App* add_recent_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
      recent_apps() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string v2_id = 2;
  void clear_v2_id();
  const std::string& v2_id() const;
  void set_v2_id(const std::string& value);
  void set_v2_id(std::string&& value);
  void set_v2_id(const char* value);
  void set_v2_id(const char* value, size_t size);
  std::string* mutable_v2_id();
  std::string* release_v2_id();
  void set_allocated_v2_id(std::string* v2_id);
  private:
  const std::string& _internal_v2_id() const;
  void _internal_set_v2_id(const std::string& value);
  std::string* _internal_mutable_v2_id();
  public:

  // string first_name = 4;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 5;
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string company_name = 6;
  void clear_company_name();
  const std::string& company_name() const;
  void set_company_name(const std::string& value);
  void set_company_name(std::string&& value);
  void set_company_name(const char* value);
  void set_company_name(const char* value, size_t size);
  std::string* mutable_company_name();
  std::string* release_company_name();
  void set_allocated_company_name(std::string* company_name);
  private:
  const std::string& _internal_company_name() const;
  void _internal_set_company_name(const std::string& value);
  std::string* _internal_mutable_company_name();
  public:

  // string bill_type = 9;
  void clear_bill_type();
  const std::string& bill_type() const;
  void set_bill_type(const std::string& value);
  void set_bill_type(std::string&& value);
  void set_bill_type(const char* value);
  void set_bill_type(const char* value, size_t size);
  std::string* mutable_bill_type();
  std::string* release_bill_type();
  void set_allocated_bill_type(std::string* bill_type);
  private:
  const std::string& _internal_bill_type() const;
  void _internal_set_bill_type(const std::string& value);
  std::string* _internal_mutable_bill_type();
  public:

  // .google.protobuf.Timestamp created_at = 8;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // @@protoc_insertion_point(class_scope:clarifai.admin_api.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::Email > emails_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App > recent_apps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v2_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bill_type_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cycle

// .google.protobuf.UInt32Value cycle_id = 1;
inline bool Cycle::_internal_has_cycle_id() const {
  return this != internal_default_instance() && cycle_id_ != nullptr;
}
inline bool Cycle::has_cycle_id() const {
  return _internal_has_cycle_id();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& Cycle::_internal_cycle_id() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = cycle_id_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& Cycle::cycle_id() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Cycle.cycle_id)
  return _internal_cycle_id();
}
inline void Cycle::unsafe_arena_set_allocated_cycle_id(
    PROTOBUF_NAMESPACE_ID::UInt32Value* cycle_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cycle_id_);
  }
  cycle_id_ = cycle_id;
  if (cycle_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.Cycle.cycle_id)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* Cycle::release_cycle_id() {
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = cycle_id_;
  cycle_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* Cycle::unsafe_arena_release_cycle_id() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.Cycle.cycle_id)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = cycle_id_;
  cycle_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* Cycle::_internal_mutable_cycle_id() {
  
  if (cycle_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    cycle_id_ = p;
  }
  return cycle_id_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* Cycle::mutable_cycle_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.Cycle.cycle_id)
  return _internal_mutable_cycle_id();
}
inline void Cycle::set_allocated_cycle_id(PROTOBUF_NAMESPACE_ID::UInt32Value* cycle_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cycle_id_);
  }
  if (cycle_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cycle_id)->GetArena();
    if (message_arena != submessage_arena) {
      cycle_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cycle_id, submessage_arena);
    }
    
  } else {
    
  }
  cycle_id_ = cycle_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.Cycle.cycle_id)
}

// .google.protobuf.Timestamp start_date = 2;
inline bool Cycle::_internal_has_start_date() const {
  return this != internal_default_instance() && start_date_ != nullptr;
}
inline bool Cycle::has_start_date() const {
  return _internal_has_start_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Cycle::_internal_start_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Cycle::start_date() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Cycle.start_date)
  return _internal_start_date();
}
inline void Cycle::unsafe_arena_set_allocated_start_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  start_date_ = start_date;
  if (start_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.Cycle.start_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cycle::release_start_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_date_;
  start_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cycle::unsafe_arena_release_start_date() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.Cycle.start_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_date_;
  start_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cycle::_internal_mutable_start_date() {
  
  if (start_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_date_ = p;
  }
  return start_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cycle::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.Cycle.start_date)
  return _internal_mutable_start_date();
}
inline void Cycle::set_allocated_start_date(PROTOBUF_NAMESPACE_ID::Timestamp* start_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  if (start_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date)->GetArena();
    if (message_arena != submessage_arena) {
      start_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_date, submessage_arena);
    }
    
  } else {
    
  }
  start_date_ = start_date;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.Cycle.start_date)
}

// .google.protobuf.Timestamp end_date = 3;
inline bool Cycle::_internal_has_end_date() const {
  return this != internal_default_instance() && end_date_ != nullptr;
}
inline bool Cycle::has_end_date() const {
  return _internal_has_end_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Cycle::_internal_end_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Cycle::end_date() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Cycle.end_date)
  return _internal_end_date();
}
inline void Cycle::unsafe_arena_set_allocated_end_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  end_date_ = end_date;
  if (end_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.Cycle.end_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cycle::release_end_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_date_;
  end_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cycle::unsafe_arena_release_end_date() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.Cycle.end_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_date_;
  end_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cycle::_internal_mutable_end_date() {
  
  if (end_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_date_ = p;
  }
  return end_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cycle::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.Cycle.end_date)
  return _internal_mutable_end_date();
}
inline void Cycle::set_allocated_end_date(PROTOBUF_NAMESPACE_ID::Timestamp* end_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  if (end_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date)->GetArena();
    if (message_arena != submessage_arena) {
      end_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_date, submessage_arena);
    }
    
  } else {
    
  }
  end_date_ = end_date;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.Cycle.end_date)
}

// .google.protobuf.Timestamp reset_at = 4;
inline bool Cycle::_internal_has_reset_at() const {
  return this != internal_default_instance() && reset_at_ != nullptr;
}
inline bool Cycle::has_reset_at() const {
  return _internal_has_reset_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Cycle::_internal_reset_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = reset_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Cycle::reset_at() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Cycle.reset_at)
  return _internal_reset_at();
}
inline void Cycle::unsafe_arena_set_allocated_reset_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* reset_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_at_);
  }
  reset_at_ = reset_at;
  if (reset_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.Cycle.reset_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cycle::release_reset_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = reset_at_;
  reset_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cycle::unsafe_arena_release_reset_at() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.Cycle.reset_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = reset_at_;
  reset_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cycle::_internal_mutable_reset_at() {
  
  if (reset_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    reset_at_ = p;
  }
  return reset_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cycle::mutable_reset_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.Cycle.reset_at)
  return _internal_mutable_reset_at();
}
inline void Cycle::set_allocated_reset_at(PROTOBUF_NAMESPACE_ID::Timestamp* reset_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_at_);
  }
  if (reset_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_at)->GetArena();
    if (message_arena != submessage_arena) {
      reset_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset_at, submessage_arena);
    }
    
  } else {
    
  }
  reset_at_ = reset_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.Cycle.reset_at)
}

// -------------------------------------------------------------------

// OnetimeCharge

// string charge_id = 1;
inline void OnetimeCharge::clear_charge_id() {
  charge_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnetimeCharge::charge_id() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.OnetimeCharge.charge_id)
  return _internal_charge_id();
}
inline void OnetimeCharge::set_charge_id(const std::string& value) {
  _internal_set_charge_id(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.OnetimeCharge.charge_id)
}
inline std::string* OnetimeCharge::mutable_charge_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.OnetimeCharge.charge_id)
  return _internal_mutable_charge_id();
}
inline const std::string& OnetimeCharge::_internal_charge_id() const {
  return charge_id_.Get();
}
inline void OnetimeCharge::_internal_set_charge_id(const std::string& value) {
  
  charge_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnetimeCharge::set_charge_id(std::string&& value) {
  
  charge_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.OnetimeCharge.charge_id)
}
inline void OnetimeCharge::set_charge_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  charge_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.OnetimeCharge.charge_id)
}
inline void OnetimeCharge::set_charge_id(const char* value,
    size_t size) {
  
  charge_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.OnetimeCharge.charge_id)
}
inline std::string* OnetimeCharge::_internal_mutable_charge_id() {
  
  return charge_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnetimeCharge::release_charge_id() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.OnetimeCharge.charge_id)
  return charge_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimeCharge::set_allocated_charge_id(std::string* charge_id) {
  if (charge_id != nullptr) {
    
  } else {
    
  }
  charge_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), charge_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.OnetimeCharge.charge_id)
}

// .google.protobuf.Timestamp created_at = 2;
inline bool OnetimeCharge::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool OnetimeCharge::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OnetimeCharge::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& OnetimeCharge::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.OnetimeCharge.created_at)
  return _internal_created_at();
}
inline void OnetimeCharge::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.OnetimeCharge.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OnetimeCharge::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OnetimeCharge::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.OnetimeCharge.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OnetimeCharge::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* OnetimeCharge::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.OnetimeCharge.created_at)
  return _internal_mutable_created_at();
}
inline void OnetimeCharge::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.OnetimeCharge.created_at)
}

// string invoice_id = 3;
inline void OnetimeCharge::clear_invoice_id() {
  invoice_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnetimeCharge::invoice_id() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.OnetimeCharge.invoice_id)
  return _internal_invoice_id();
}
inline void OnetimeCharge::set_invoice_id(const std::string& value) {
  _internal_set_invoice_id(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.OnetimeCharge.invoice_id)
}
inline std::string* OnetimeCharge::mutable_invoice_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.OnetimeCharge.invoice_id)
  return _internal_mutable_invoice_id();
}
inline const std::string& OnetimeCharge::_internal_invoice_id() const {
  return invoice_id_.Get();
}
inline void OnetimeCharge::_internal_set_invoice_id(const std::string& value) {
  
  invoice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnetimeCharge::set_invoice_id(std::string&& value) {
  
  invoice_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.OnetimeCharge.invoice_id)
}
inline void OnetimeCharge::set_invoice_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  invoice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.OnetimeCharge.invoice_id)
}
inline void OnetimeCharge::set_invoice_id(const char* value,
    size_t size) {
  
  invoice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.OnetimeCharge.invoice_id)
}
inline std::string* OnetimeCharge::_internal_mutable_invoice_id() {
  
  return invoice_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnetimeCharge::release_invoice_id() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.OnetimeCharge.invoice_id)
  return invoice_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimeCharge::set_allocated_invoice_id(std::string* invoice_id) {
  if (invoice_id != nullptr) {
    
  } else {
    
  }
  invoice_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invoice_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.OnetimeCharge.invoice_id)
}

// double dollars = 4;
inline void OnetimeCharge::clear_dollars() {
  dollars_ = 0;
}
inline double OnetimeCharge::_internal_dollars() const {
  return dollars_;
}
inline double OnetimeCharge::dollars() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.OnetimeCharge.dollars)
  return _internal_dollars();
}
inline void OnetimeCharge::_internal_set_dollars(double value) {
  
  dollars_ = value;
}
inline void OnetimeCharge::set_dollars(double value) {
  _internal_set_dollars(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.OnetimeCharge.dollars)
}

// .google.protobuf.BoolValue bill_immediately = 5;
inline bool OnetimeCharge::_internal_has_bill_immediately() const {
  return this != internal_default_instance() && bill_immediately_ != nullptr;
}
inline bool OnetimeCharge::has_bill_immediately() const {
  return _internal_has_bill_immediately();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& OnetimeCharge::_internal_bill_immediately() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = bill_immediately_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& OnetimeCharge::bill_immediately() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.OnetimeCharge.bill_immediately)
  return _internal_bill_immediately();
}
inline void OnetimeCharge::unsafe_arena_set_allocated_bill_immediately(
    PROTOBUF_NAMESPACE_ID::BoolValue* bill_immediately) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bill_immediately_);
  }
  bill_immediately_ = bill_immediately;
  if (bill_immediately) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.OnetimeCharge.bill_immediately)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* OnetimeCharge::release_bill_immediately() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = bill_immediately_;
  bill_immediately_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* OnetimeCharge::unsafe_arena_release_bill_immediately() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.OnetimeCharge.bill_immediately)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = bill_immediately_;
  bill_immediately_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* OnetimeCharge::_internal_mutable_bill_immediately() {
  
  if (bill_immediately_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    bill_immediately_ = p;
  }
  return bill_immediately_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* OnetimeCharge::mutable_bill_immediately() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.OnetimeCharge.bill_immediately)
  return _internal_mutable_bill_immediately();
}
inline void OnetimeCharge::set_allocated_bill_immediately(PROTOBUF_NAMESPACE_ID::BoolValue* bill_immediately) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bill_immediately_);
  }
  if (bill_immediately) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bill_immediately)->GetArena();
    if (message_arena != submessage_arena) {
      bill_immediately = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bill_immediately, submessage_arena);
    }
    
  } else {
    
  }
  bill_immediately_ = bill_immediately;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.OnetimeCharge.bill_immediately)
}

// string notes = 6;
inline void OnetimeCharge::clear_notes() {
  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnetimeCharge::notes() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.OnetimeCharge.notes)
  return _internal_notes();
}
inline void OnetimeCharge::set_notes(const std::string& value) {
  _internal_set_notes(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.OnetimeCharge.notes)
}
inline std::string* OnetimeCharge::mutable_notes() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.OnetimeCharge.notes)
  return _internal_mutable_notes();
}
inline const std::string& OnetimeCharge::_internal_notes() const {
  return notes_.Get();
}
inline void OnetimeCharge::_internal_set_notes(const std::string& value) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnetimeCharge::set_notes(std::string&& value) {
  
  notes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.OnetimeCharge.notes)
}
inline void OnetimeCharge::set_notes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.OnetimeCharge.notes)
}
inline void OnetimeCharge::set_notes(const char* value,
    size_t size) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.OnetimeCharge.notes)
}
inline std::string* OnetimeCharge::_internal_mutable_notes() {
  
  return notes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnetimeCharge::release_notes() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.OnetimeCharge.notes)
  return notes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimeCharge::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.OnetimeCharge.notes)
}

// -------------------------------------------------------------------

// Credit

// .clarifai.admin_api.OpType op_type = 1;
inline void Credit::clear_op_type() {
  op_type_ = 0;
}
inline ::clarifai::admin_api::OpType Credit::_internal_op_type() const {
  return static_cast< ::clarifai::admin_api::OpType >(op_type_);
}
inline ::clarifai::admin_api::OpType Credit::op_type() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Credit.op_type)
  return _internal_op_type();
}
inline void Credit::_internal_set_op_type(::clarifai::admin_api::OpType value) {
  
  op_type_ = value;
}
inline void Credit::set_op_type(::clarifai::admin_api::OpType value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.Credit.op_type)
}

// int32 number = 2;
inline void Credit::clear_number() {
  number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Credit::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Credit::number() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Credit.number)
  return _internal_number();
}
inline void Credit::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  number_ = value;
}
inline void Credit::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.Credit.number)
}

// string notes = 3;
inline void Credit::clear_notes() {
  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Credit::notes() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Credit.notes)
  return _internal_notes();
}
inline void Credit::set_notes(const std::string& value) {
  _internal_set_notes(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.Credit.notes)
}
inline std::string* Credit::mutable_notes() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.Credit.notes)
  return _internal_mutable_notes();
}
inline const std::string& Credit::_internal_notes() const {
  return notes_.Get();
}
inline void Credit::_internal_set_notes(const std::string& value) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Credit::set_notes(std::string&& value) {
  
  notes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.Credit.notes)
}
inline void Credit::set_notes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.Credit.notes)
}
inline void Credit::set_notes(const char* value,
    size_t size) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.Credit.notes)
}
inline std::string* Credit::_internal_mutable_notes() {
  
  return notes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Credit::release_notes() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.Credit.notes)
  return notes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Credit::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.Credit.notes)
}

// string op_name = 4;
inline void Credit::clear_op_name() {
  op_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Credit::op_name() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Credit.op_name)
  return _internal_op_name();
}
inline void Credit::set_op_name(const std::string& value) {
  _internal_set_op_name(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.Credit.op_name)
}
inline std::string* Credit::mutable_op_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.Credit.op_name)
  return _internal_mutable_op_name();
}
inline const std::string& Credit::_internal_op_name() const {
  return op_name_.Get();
}
inline void Credit::_internal_set_op_name(const std::string& value) {
  
  op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Credit::set_op_name(std::string&& value) {
  
  op_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.Credit.op_name)
}
inline void Credit::set_op_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.Credit.op_name)
}
inline void Credit::set_op_name(const char* value,
    size_t size) {
  
  op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.Credit.op_name)
}
inline std::string* Credit::_internal_mutable_op_name() {
  
  return op_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Credit::release_op_name() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.Credit.op_name)
  return op_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Credit::set_allocated_op_name(std::string* op_name) {
  if (op_name != nullptr) {
    
  } else {
    
  }
  op_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.Credit.op_name)
}

// -------------------------------------------------------------------

// Tier

// int32 number = 1;
inline void Tier::clear_number() {
  number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tier::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tier::number() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Tier.number)
  return _internal_number();
}
inline void Tier::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  number_ = value;
}
inline void Tier::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.Tier.number)
}

// double price_per_op = 2;
inline void Tier::clear_price_per_op() {
  price_per_op_ = 0;
}
inline double Tier::_internal_price_per_op() const {
  return price_per_op_;
}
inline double Tier::price_per_op() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Tier.price_per_op)
  return _internal_price_per_op();
}
inline void Tier::_internal_set_price_per_op(double value) {
  
  price_per_op_ = value;
}
inline void Tier::set_price_per_op(double value) {
  _internal_set_price_per_op(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.Tier.price_per_op)
}

// -------------------------------------------------------------------

// PricingTiers

// .clarifai.admin_api.OpType op_type = 1;
inline void PricingTiers::clear_op_type() {
  op_type_ = 0;
}
inline ::clarifai::admin_api::OpType PricingTiers::_internal_op_type() const {
  return static_cast< ::clarifai::admin_api::OpType >(op_type_);
}
inline ::clarifai::admin_api::OpType PricingTiers::op_type() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.PricingTiers.op_type)
  return _internal_op_type();
}
inline void PricingTiers::_internal_set_op_type(::clarifai::admin_api::OpType value) {
  
  op_type_ = value;
}
inline void PricingTiers::set_op_type(::clarifai::admin_api::OpType value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.PricingTiers.op_type)
}

// repeated .clarifai.admin_api.Tier monthly = 2;
inline int PricingTiers::_internal_monthly_size() const {
  return monthly_.size();
}
inline int PricingTiers::monthly_size() const {
  return _internal_monthly_size();
}
inline void PricingTiers::clear_monthly() {
  monthly_.Clear();
}
inline ::clarifai::admin_api::Tier* PricingTiers::mutable_monthly(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.PricingTiers.monthly)
  return monthly_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::Tier >*
PricingTiers::mutable_monthly() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.admin_api.PricingTiers.monthly)
  return &monthly_;
}
inline const ::clarifai::admin_api::Tier& PricingTiers::_internal_monthly(int index) const {
  return monthly_.Get(index);
}
inline const ::clarifai::admin_api::Tier& PricingTiers::monthly(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.PricingTiers.monthly)
  return _internal_monthly(index);
}
inline ::clarifai::admin_api::Tier* PricingTiers::_internal_add_monthly() {
  return monthly_.Add();
}
inline ::clarifai::admin_api::Tier* PricingTiers::add_monthly() {
  // @@protoc_insertion_point(field_add:clarifai.admin_api.PricingTiers.monthly)
  return _internal_add_monthly();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::Tier >&
PricingTiers::monthly() const {
  // @@protoc_insertion_point(field_list:clarifai.admin_api.PricingTiers.monthly)
  return monthly_;
}

// repeated .clarifai.admin_api.Tier lifetime = 3;
inline int PricingTiers::_internal_lifetime_size() const {
  return lifetime_.size();
}
inline int PricingTiers::lifetime_size() const {
  return _internal_lifetime_size();
}
inline void PricingTiers::clear_lifetime() {
  lifetime_.Clear();
}
inline ::clarifai::admin_api::Tier* PricingTiers::mutable_lifetime(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.PricingTiers.lifetime)
  return lifetime_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::Tier >*
PricingTiers::mutable_lifetime() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.admin_api.PricingTiers.lifetime)
  return &lifetime_;
}
inline const ::clarifai::admin_api::Tier& PricingTiers::_internal_lifetime(int index) const {
  return lifetime_.Get(index);
}
inline const ::clarifai::admin_api::Tier& PricingTiers::lifetime(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.PricingTiers.lifetime)
  return _internal_lifetime(index);
}
inline ::clarifai::admin_api::Tier* PricingTiers::_internal_add_lifetime() {
  return lifetime_.Add();
}
inline ::clarifai::admin_api::Tier* PricingTiers::add_lifetime() {
  // @@protoc_insertion_point(field_add:clarifai.admin_api.PricingTiers.lifetime)
  return _internal_add_lifetime();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::Tier >&
PricingTiers::lifetime() const {
  // @@protoc_insertion_point(field_list:clarifai.admin_api.PricingTiers.lifetime)
  return lifetime_;
}

// string op_name = 4;
inline void PricingTiers::clear_op_name() {
  op_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PricingTiers::op_name() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.PricingTiers.op_name)
  return _internal_op_name();
}
inline void PricingTiers::set_op_name(const std::string& value) {
  _internal_set_op_name(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.PricingTiers.op_name)
}
inline std::string* PricingTiers::mutable_op_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.PricingTiers.op_name)
  return _internal_mutable_op_name();
}
inline const std::string& PricingTiers::_internal_op_name() const {
  return op_name_.Get();
}
inline void PricingTiers::_internal_set_op_name(const std::string& value) {
  
  op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PricingTiers::set_op_name(std::string&& value) {
  
  op_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.PricingTiers.op_name)
}
inline void PricingTiers::set_op_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.PricingTiers.op_name)
}
inline void PricingTiers::set_op_name(const char* value,
    size_t size) {
  
  op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.PricingTiers.op_name)
}
inline std::string* PricingTiers::_internal_mutable_op_name() {
  
  return op_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PricingTiers::release_op_name() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.PricingTiers.op_name)
  return op_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PricingTiers::set_allocated_op_name(std::string* op_name) {
  if (op_name != nullptr) {
    
  } else {
    
  }
  op_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.PricingTiers.op_name)
}

// -------------------------------------------------------------------

// MonthlyCharge

// double price = 1;
inline void MonthlyCharge::clear_price() {
  price_ = 0;
}
inline double MonthlyCharge::_internal_price() const {
  return price_;
}
inline double MonthlyCharge::price() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.MonthlyCharge.price)
  return _internal_price();
}
inline void MonthlyCharge::_internal_set_price(double value) {
  
  price_ = value;
}
inline void MonthlyCharge::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.MonthlyCharge.price)
}

// string notes = 2;
inline void MonthlyCharge::clear_notes() {
  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MonthlyCharge::notes() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.MonthlyCharge.notes)
  return _internal_notes();
}
inline void MonthlyCharge::set_notes(const std::string& value) {
  _internal_set_notes(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.MonthlyCharge.notes)
}
inline std::string* MonthlyCharge::mutable_notes() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.MonthlyCharge.notes)
  return _internal_mutable_notes();
}
inline const std::string& MonthlyCharge::_internal_notes() const {
  return notes_.Get();
}
inline void MonthlyCharge::_internal_set_notes(const std::string& value) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MonthlyCharge::set_notes(std::string&& value) {
  
  notes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.MonthlyCharge.notes)
}
inline void MonthlyCharge::set_notes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.MonthlyCharge.notes)
}
inline void MonthlyCharge::set_notes(const char* value,
    size_t size) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.MonthlyCharge.notes)
}
inline std::string* MonthlyCharge::_internal_mutable_notes() {
  
  return notes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MonthlyCharge::release_notes() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.MonthlyCharge.notes)
  return notes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MonthlyCharge::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.MonthlyCharge.notes)
}

// -------------------------------------------------------------------

// Plan

// string id = 1;
inline void Plan::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Plan::id() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Plan.id)
  return _internal_id();
}
inline void Plan::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.Plan.id)
}
inline std::string* Plan::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.Plan.id)
  return _internal_mutable_id();
}
inline const std::string& Plan::_internal_id() const {
  return id_.Get();
}
inline void Plan::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Plan::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.Plan.id)
}
inline void Plan::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.Plan.id)
}
inline void Plan::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.Plan.id)
}
inline std::string* Plan::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Plan::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.Plan.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Plan::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.Plan.id)
}

// string name = 2;
inline void Plan::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Plan::name() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Plan.name)
  return _internal_name();
}
inline void Plan::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.Plan.name)
}
inline std::string* Plan::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.Plan.name)
  return _internal_mutable_name();
}
inline const std::string& Plan::_internal_name() const {
  return name_.Get();
}
inline void Plan::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Plan::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.Plan.name)
}
inline void Plan::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.Plan.name)
}
inline void Plan::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.Plan.name)
}
inline std::string* Plan::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Plan::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.Plan.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Plan::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.Plan.name)
}

// repeated .clarifai.admin_api.PricingTiers pricing_tiers = 3;
inline int Plan::_internal_pricing_tiers_size() const {
  return pricing_tiers_.size();
}
inline int Plan::pricing_tiers_size() const {
  return _internal_pricing_tiers_size();
}
inline void Plan::clear_pricing_tiers() {
  pricing_tiers_.Clear();
}
inline ::clarifai::admin_api::PricingTiers* Plan::mutable_pricing_tiers(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.Plan.pricing_tiers)
  return pricing_tiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::PricingTiers >*
Plan::mutable_pricing_tiers() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.admin_api.Plan.pricing_tiers)
  return &pricing_tiers_;
}
inline const ::clarifai::admin_api::PricingTiers& Plan::_internal_pricing_tiers(int index) const {
  return pricing_tiers_.Get(index);
}
inline const ::clarifai::admin_api::PricingTiers& Plan::pricing_tiers(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Plan.pricing_tiers)
  return _internal_pricing_tiers(index);
}
inline ::clarifai::admin_api::PricingTiers* Plan::_internal_add_pricing_tiers() {
  return pricing_tiers_.Add();
}
inline ::clarifai::admin_api::PricingTiers* Plan::add_pricing_tiers() {
  // @@protoc_insertion_point(field_add:clarifai.admin_api.Plan.pricing_tiers)
  return _internal_add_pricing_tiers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::PricingTiers >&
Plan::pricing_tiers() const {
  // @@protoc_insertion_point(field_list:clarifai.admin_api.Plan.pricing_tiers)
  return pricing_tiers_;
}

// repeated .clarifai.admin_api.MonthlyCharge monthly_charges = 4;
inline int Plan::_internal_monthly_charges_size() const {
  return monthly_charges_.size();
}
inline int Plan::monthly_charges_size() const {
  return _internal_monthly_charges_size();
}
inline void Plan::clear_monthly_charges() {
  monthly_charges_.Clear();
}
inline ::clarifai::admin_api::MonthlyCharge* Plan::mutable_monthly_charges(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.Plan.monthly_charges)
  return monthly_charges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::MonthlyCharge >*
Plan::mutable_monthly_charges() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.admin_api.Plan.monthly_charges)
  return &monthly_charges_;
}
inline const ::clarifai::admin_api::MonthlyCharge& Plan::_internal_monthly_charges(int index) const {
  return monthly_charges_.Get(index);
}
inline const ::clarifai::admin_api::MonthlyCharge& Plan::monthly_charges(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Plan.monthly_charges)
  return _internal_monthly_charges(index);
}
inline ::clarifai::admin_api::MonthlyCharge* Plan::_internal_add_monthly_charges() {
  return monthly_charges_.Add();
}
inline ::clarifai::admin_api::MonthlyCharge* Plan::add_monthly_charges() {
  // @@protoc_insertion_point(field_add:clarifai.admin_api.Plan.monthly_charges)
  return _internal_add_monthly_charges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::MonthlyCharge >&
Plan::monthly_charges() const {
  // @@protoc_insertion_point(field_list:clarifai.admin_api.Plan.monthly_charges)
  return monthly_charges_;
}

// -------------------------------------------------------------------

// RuntimeConfig

// string id = 1;
inline void RuntimeConfig::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuntimeConfig::id() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.RuntimeConfig.id)
  return _internal_id();
}
inline void RuntimeConfig::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.RuntimeConfig.id)
}
inline std::string* RuntimeConfig::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.RuntimeConfig.id)
  return _internal_mutable_id();
}
inline const std::string& RuntimeConfig::_internal_id() const {
  return id_.Get();
}
inline void RuntimeConfig::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuntimeConfig::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.RuntimeConfig.id)
}
inline void RuntimeConfig::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.RuntimeConfig.id)
}
inline void RuntimeConfig::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.RuntimeConfig.id)
}
inline std::string* RuntimeConfig::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuntimeConfig::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.RuntimeConfig.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuntimeConfig::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.RuntimeConfig.id)
}

// string plan_id = 2;
inline void RuntimeConfig::clear_plan_id() {
  plan_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuntimeConfig::plan_id() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.RuntimeConfig.plan_id)
  return _internal_plan_id();
}
inline void RuntimeConfig::set_plan_id(const std::string& value) {
  _internal_set_plan_id(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.RuntimeConfig.plan_id)
}
inline std::string* RuntimeConfig::mutable_plan_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.RuntimeConfig.plan_id)
  return _internal_mutable_plan_id();
}
inline const std::string& RuntimeConfig::_internal_plan_id() const {
  return plan_id_.Get();
}
inline void RuntimeConfig::_internal_set_plan_id(const std::string& value) {
  
  plan_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuntimeConfig::set_plan_id(std::string&& value) {
  
  plan_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.RuntimeConfig.plan_id)
}
inline void RuntimeConfig::set_plan_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plan_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.RuntimeConfig.plan_id)
}
inline void RuntimeConfig::set_plan_id(const char* value,
    size_t size) {
  
  plan_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.RuntimeConfig.plan_id)
}
inline std::string* RuntimeConfig::_internal_mutable_plan_id() {
  
  return plan_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuntimeConfig::release_plan_id() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.RuntimeConfig.plan_id)
  return plan_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuntimeConfig::set_allocated_plan_id(std::string* plan_id) {
  if (plan_id != nullptr) {
    
  } else {
    
  }
  plan_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plan_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.RuntimeConfig.plan_id)
}

// string user_id = 3;
inline void RuntimeConfig::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuntimeConfig::user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.RuntimeConfig.user_id)
  return _internal_user_id();
}
inline void RuntimeConfig::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.RuntimeConfig.user_id)
}
inline std::string* RuntimeConfig::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.RuntimeConfig.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& RuntimeConfig::_internal_user_id() const {
  return user_id_.Get();
}
inline void RuntimeConfig::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuntimeConfig::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.RuntimeConfig.user_id)
}
inline void RuntimeConfig::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.RuntimeConfig.user_id)
}
inline void RuntimeConfig::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.RuntimeConfig.user_id)
}
inline std::string* RuntimeConfig::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuntimeConfig::release_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.RuntimeConfig.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuntimeConfig::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.RuntimeConfig.user_id)
}

// .google.protobuf.Timestamp created_at = 4;
inline bool RuntimeConfig::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool RuntimeConfig::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RuntimeConfig::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RuntimeConfig::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.RuntimeConfig.created_at)
  return _internal_created_at();
}
inline void RuntimeConfig::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.RuntimeConfig.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RuntimeConfig::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RuntimeConfig::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.RuntimeConfig.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RuntimeConfig::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RuntimeConfig::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.RuntimeConfig.created_at)
  return _internal_mutable_created_at();
}
inline void RuntimeConfig::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.RuntimeConfig.created_at)
}

// .google.protobuf.Timestamp modified_at = 5;
inline bool RuntimeConfig::_internal_has_modified_at() const {
  return this != internal_default_instance() && modified_at_ != nullptr;
}
inline bool RuntimeConfig::has_modified_at() const {
  return _internal_has_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RuntimeConfig::_internal_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RuntimeConfig::modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.RuntimeConfig.modified_at)
  return _internal_modified_at();
}
inline void RuntimeConfig::unsafe_arena_set_allocated_modified_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  modified_at_ = modified_at;
  if (modified_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.RuntimeConfig.modified_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RuntimeConfig::release_modified_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RuntimeConfig::unsafe_arena_release_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.RuntimeConfig.modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RuntimeConfig::_internal_mutable_modified_at() {
  
  if (modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    modified_at_ = p;
  }
  return modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RuntimeConfig::mutable_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.RuntimeConfig.modified_at)
  return _internal_mutable_modified_at();
}
inline void RuntimeConfig::set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  if (modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_at, submessage_arena);
    }
    
  } else {
    
  }
  modified_at_ = modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.RuntimeConfig.modified_at)
}

// .google.protobuf.Struct config = 6;
inline bool RuntimeConfig::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool RuntimeConfig::has_config() const {
  return _internal_has_config();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& RuntimeConfig::_internal_config() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& RuntimeConfig::config() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.RuntimeConfig.config)
  return _internal_config();
}
inline void RuntimeConfig::unsafe_arena_set_allocated_config(
    PROTOBUF_NAMESPACE_ID::Struct* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.RuntimeConfig.config)
}
inline PROTOBUF_NAMESPACE_ID::Struct* RuntimeConfig::release_config() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = config_;
  config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* RuntimeConfig::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.RuntimeConfig.config)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = config_;
  config_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* RuntimeConfig::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    config_ = p;
  }
  return config_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* RuntimeConfig::mutable_config() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.RuntimeConfig.config)
  return _internal_mutable_config();
}
inline void RuntimeConfig::set_allocated_config(PROTOBUF_NAMESPACE_ID::Struct* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config)->GetArena();
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.RuntimeConfig.config)
}

// -------------------------------------------------------------------

// SignupCode

// string plan_name = 1;
inline void SignupCode::clear_plan_name() {
  plan_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SignupCode::plan_name() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.SignupCode.plan_name)
  return _internal_plan_name();
}
inline void SignupCode::set_plan_name(const std::string& value) {
  _internal_set_plan_name(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.SignupCode.plan_name)
}
inline std::string* SignupCode::mutable_plan_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.SignupCode.plan_name)
  return _internal_mutable_plan_name();
}
inline const std::string& SignupCode::_internal_plan_name() const {
  return plan_name_.Get();
}
inline void SignupCode::_internal_set_plan_name(const std::string& value) {
  
  plan_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SignupCode::set_plan_name(std::string&& value) {
  
  plan_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.SignupCode.plan_name)
}
inline void SignupCode::set_plan_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plan_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.SignupCode.plan_name)
}
inline void SignupCode::set_plan_name(const char* value,
    size_t size) {
  
  plan_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.SignupCode.plan_name)
}
inline std::string* SignupCode::_internal_mutable_plan_name() {
  
  return plan_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SignupCode::release_plan_name() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.SignupCode.plan_name)
  return plan_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignupCode::set_allocated_plan_name(std::string* plan_name) {
  if (plan_name != nullptr) {
    
  } else {
    
  }
  plan_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plan_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.SignupCode.plan_name)
}

// string code = 2;
inline void SignupCode::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SignupCode::code() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.SignupCode.code)
  return _internal_code();
}
inline void SignupCode::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.SignupCode.code)
}
inline std::string* SignupCode::mutable_code() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.SignupCode.code)
  return _internal_mutable_code();
}
inline const std::string& SignupCode::_internal_code() const {
  return code_.Get();
}
inline void SignupCode::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SignupCode::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.SignupCode.code)
}
inline void SignupCode::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.SignupCode.code)
}
inline void SignupCode::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.SignupCode.code)
}
inline std::string* SignupCode::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SignupCode::release_code() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.SignupCode.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignupCode::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.SignupCode.code)
}

// .google.protobuf.Timestamp expires_at = 3;
inline bool SignupCode::_internal_has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline bool SignupCode::has_expires_at() const {
  return _internal_has_expires_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SignupCode::_internal_expires_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expires_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SignupCode::expires_at() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.SignupCode.expires_at)
  return _internal_expires_at();
}
inline void SignupCode::unsafe_arena_set_allocated_expires_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  expires_at_ = expires_at;
  if (expires_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.SignupCode.expires_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SignupCode::release_expires_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SignupCode::unsafe_arena_release_expires_at() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.SignupCode.expires_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SignupCode::_internal_mutable_expires_at() {
  
  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expires_at_ = p;
  }
  return expires_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SignupCode::mutable_expires_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.SignupCode.expires_at)
  return _internal_mutable_expires_at();
}
inline void SignupCode::set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at)->GetArena();
    if (message_arena != submessage_arena) {
      expires_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }
    
  } else {
    
  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.SignupCode.expires_at)
}

// -------------------------------------------------------------------

// Schedule

// .google.protobuf.Timestamp time = 1;
inline bool Schedule::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool Schedule::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Schedule::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Schedule::time() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Schedule.time)
  return _internal_time();
}
inline void Schedule::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.Schedule.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Schedule::release_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Schedule::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.Schedule.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Schedule::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Schedule::mutable_time() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.Schedule.time)
  return _internal_mutable_time();
}
inline void Schedule::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.Schedule.time)
}

// string notes = 2;
inline void Schedule::clear_notes() {
  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Schedule::notes() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Schedule.notes)
  return _internal_notes();
}
inline void Schedule::set_notes(const std::string& value) {
  _internal_set_notes(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.Schedule.notes)
}
inline std::string* Schedule::mutable_notes() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.Schedule.notes)
  return _internal_mutable_notes();
}
inline const std::string& Schedule::_internal_notes() const {
  return notes_.Get();
}
inline void Schedule::_internal_set_notes(const std::string& value) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Schedule::set_notes(std::string&& value) {
  
  notes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.Schedule.notes)
}
inline void Schedule::set_notes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.Schedule.notes)
}
inline void Schedule::set_notes(const char* value,
    size_t size) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.Schedule.notes)
}
inline std::string* Schedule::_internal_mutable_notes() {
  
  return notes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Schedule::release_notes() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.Schedule.notes)
  return notes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Schedule::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.Schedule.notes)
}

// -------------------------------------------------------------------

// ScheduledPlans

// string plan_name = 1;
inline void ScheduledPlans::clear_plan_name() {
  plan_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ScheduledPlans::plan_name() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.ScheduledPlans.plan_name)
  return _internal_plan_name();
}
inline void ScheduledPlans::set_plan_name(const std::string& value) {
  _internal_set_plan_name(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.ScheduledPlans.plan_name)
}
inline std::string* ScheduledPlans::mutable_plan_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.ScheduledPlans.plan_name)
  return _internal_mutable_plan_name();
}
inline const std::string& ScheduledPlans::_internal_plan_name() const {
  return plan_name_.Get();
}
inline void ScheduledPlans::_internal_set_plan_name(const std::string& value) {
  
  plan_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ScheduledPlans::set_plan_name(std::string&& value) {
  
  plan_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.ScheduledPlans.plan_name)
}
inline void ScheduledPlans::set_plan_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plan_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.ScheduledPlans.plan_name)
}
inline void ScheduledPlans::set_plan_name(const char* value,
    size_t size) {
  
  plan_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.ScheduledPlans.plan_name)
}
inline std::string* ScheduledPlans::_internal_mutable_plan_name() {
  
  return plan_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ScheduledPlans::release_plan_name() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.ScheduledPlans.plan_name)
  return plan_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScheduledPlans::set_allocated_plan_name(std::string* plan_name) {
  if (plan_name != nullptr) {
    
  } else {
    
  }
  plan_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plan_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.ScheduledPlans.plan_name)
}

// .google.protobuf.Timestamp time = 2;
inline bool ScheduledPlans::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool ScheduledPlans::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ScheduledPlans::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ScheduledPlans::time() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.ScheduledPlans.time)
  return _internal_time();
}
inline void ScheduledPlans::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.ScheduledPlans.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ScheduledPlans::release_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ScheduledPlans::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.ScheduledPlans.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ScheduledPlans::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ScheduledPlans::mutable_time() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.ScheduledPlans.time)
  return _internal_mutable_time();
}
inline void ScheduledPlans::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.ScheduledPlans.time)
}

// string notes = 3;
inline void ScheduledPlans::clear_notes() {
  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ScheduledPlans::notes() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.ScheduledPlans.notes)
  return _internal_notes();
}
inline void ScheduledPlans::set_notes(const std::string& value) {
  _internal_set_notes(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.ScheduledPlans.notes)
}
inline std::string* ScheduledPlans::mutable_notes() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.ScheduledPlans.notes)
  return _internal_mutable_notes();
}
inline const std::string& ScheduledPlans::_internal_notes() const {
  return notes_.Get();
}
inline void ScheduledPlans::_internal_set_notes(const std::string& value) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ScheduledPlans::set_notes(std::string&& value) {
  
  notes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.ScheduledPlans.notes)
}
inline void ScheduledPlans::set_notes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.ScheduledPlans.notes)
}
inline void ScheduledPlans::set_notes(const char* value,
    size_t size) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.ScheduledPlans.notes)
}
inline std::string* ScheduledPlans::_internal_mutable_notes() {
  
  return notes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ScheduledPlans::release_notes() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.ScheduledPlans.notes)
  return notes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScheduledPlans::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.ScheduledPlans.notes)
}

// string plan_id = 4;
inline void ScheduledPlans::clear_plan_id() {
  plan_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ScheduledPlans::plan_id() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.ScheduledPlans.plan_id)
  return _internal_plan_id();
}
inline void ScheduledPlans::set_plan_id(const std::string& value) {
  _internal_set_plan_id(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.ScheduledPlans.plan_id)
}
inline std::string* ScheduledPlans::mutable_plan_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.ScheduledPlans.plan_id)
  return _internal_mutable_plan_id();
}
inline const std::string& ScheduledPlans::_internal_plan_id() const {
  return plan_id_.Get();
}
inline void ScheduledPlans::_internal_set_plan_id(const std::string& value) {
  
  plan_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ScheduledPlans::set_plan_id(std::string&& value) {
  
  plan_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.ScheduledPlans.plan_id)
}
inline void ScheduledPlans::set_plan_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plan_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.ScheduledPlans.plan_id)
}
inline void ScheduledPlans::set_plan_id(const char* value,
    size_t size) {
  
  plan_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.ScheduledPlans.plan_id)
}
inline std::string* ScheduledPlans::_internal_mutable_plan_id() {
  
  return plan_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ScheduledPlans::release_plan_id() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.ScheduledPlans.plan_id)
  return plan_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScheduledPlans::set_allocated_plan_id(std::string* plan_id) {
  if (plan_id != nullptr) {
    
  } else {
    
  }
  plan_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plan_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.ScheduledPlans.plan_id)
}

// -------------------------------------------------------------------

// ThrottleByPath

// string v2_path = 1;
inline void ThrottleByPath::clear_v2_path() {
  v2_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ThrottleByPath::v2_path() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.ThrottleByPath.v2_path)
  return _internal_v2_path();
}
inline void ThrottleByPath::set_v2_path(const std::string& value) {
  _internal_set_v2_path(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.ThrottleByPath.v2_path)
}
inline std::string* ThrottleByPath::mutable_v2_path() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.ThrottleByPath.v2_path)
  return _internal_mutable_v2_path();
}
inline const std::string& ThrottleByPath::_internal_v2_path() const {
  return v2_path_.Get();
}
inline void ThrottleByPath::_internal_set_v2_path(const std::string& value) {
  
  v2_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ThrottleByPath::set_v2_path(std::string&& value) {
  
  v2_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.ThrottleByPath.v2_path)
}
inline void ThrottleByPath::set_v2_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v2_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.ThrottleByPath.v2_path)
}
inline void ThrottleByPath::set_v2_path(const char* value,
    size_t size) {
  
  v2_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.ThrottleByPath.v2_path)
}
inline std::string* ThrottleByPath::_internal_mutable_v2_path() {
  
  return v2_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ThrottleByPath::release_v2_path() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.ThrottleByPath.v2_path)
  return v2_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThrottleByPath::set_allocated_v2_path(std::string* v2_path) {
  if (v2_path != nullptr) {
    
  } else {
    
  }
  v2_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v2_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.ThrottleByPath.v2_path)
}

// int32 throttle = 2;
inline void ThrottleByPath::clear_throttle() {
  throttle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThrottleByPath::_internal_throttle() const {
  return throttle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThrottleByPath::throttle() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.ThrottleByPath.throttle)
  return _internal_throttle();
}
inline void ThrottleByPath::_internal_set_throttle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  throttle_ = value;
}
inline void ThrottleByPath::set_throttle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_throttle(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.ThrottleByPath.throttle)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool ThrottleByPath::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool ThrottleByPath::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ThrottleByPath::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ThrottleByPath::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.ThrottleByPath.created_at)
  return _internal_created_at();
}
inline void ThrottleByPath::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.ThrottleByPath.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ThrottleByPath::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ThrottleByPath::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.ThrottleByPath.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ThrottleByPath::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ThrottleByPath::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.ThrottleByPath.created_at)
  return _internal_mutable_created_at();
}
inline void ThrottleByPath::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.ThrottleByPath.created_at)
}

// .google.protobuf.Timestamp modified_at = 4;
inline bool ThrottleByPath::_internal_has_modified_at() const {
  return this != internal_default_instance() && modified_at_ != nullptr;
}
inline bool ThrottleByPath::has_modified_at() const {
  return _internal_has_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ThrottleByPath::_internal_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ThrottleByPath::modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.ThrottleByPath.modified_at)
  return _internal_modified_at();
}
inline void ThrottleByPath::unsafe_arena_set_allocated_modified_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  modified_at_ = modified_at;
  if (modified_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.ThrottleByPath.modified_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ThrottleByPath::release_modified_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ThrottleByPath::unsafe_arena_release_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.ThrottleByPath.modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ThrottleByPath::_internal_mutable_modified_at() {
  
  if (modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    modified_at_ = p;
  }
  return modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ThrottleByPath::mutable_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.ThrottleByPath.modified_at)
  return _internal_mutable_modified_at();
}
inline void ThrottleByPath::set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  if (modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_at, submessage_arena);
    }
    
  } else {
    
  }
  modified_at_ = modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.ThrottleByPath.modified_at)
}

// -------------------------------------------------------------------

// Email

// string email = 1;
inline void Email::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Email::email() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Email.email)
  return _internal_email();
}
inline void Email::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.Email.email)
}
inline std::string* Email::mutable_email() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.Email.email)
  return _internal_mutable_email();
}
inline const std::string& Email::_internal_email() const {
  return email_.Get();
}
inline void Email::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Email::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.Email.email)
}
inline void Email::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.Email.email)
}
inline void Email::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.Email.email)
}
inline std::string* Email::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Email::release_email() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.Email.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Email::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.Email.email)
}

// .google.protobuf.BoolValue primary = 2;
inline bool Email::_internal_has_primary() const {
  return this != internal_default_instance() && primary_ != nullptr;
}
inline bool Email::has_primary() const {
  return _internal_has_primary();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& Email::_internal_primary() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = primary_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& Email::primary() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Email.primary)
  return _internal_primary();
}
inline void Email::unsafe_arena_set_allocated_primary(
    PROTOBUF_NAMESPACE_ID::BoolValue* primary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_);
  }
  primary_ = primary;
  if (primary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.Email.primary)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Email::release_primary() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = primary_;
  primary_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Email::unsafe_arena_release_primary() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.Email.primary)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = primary_;
  primary_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Email::_internal_mutable_primary() {
  
  if (primary_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    primary_ = p;
  }
  return primary_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Email::mutable_primary() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.Email.primary)
  return _internal_mutable_primary();
}
inline void Email::set_allocated_primary(PROTOBUF_NAMESPACE_ID::BoolValue* primary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_);
  }
  if (primary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary)->GetArena();
    if (message_arena != submessage_arena) {
      primary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primary, submessage_arena);
    }
    
  } else {
    
  }
  primary_ = primary;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.Email.primary)
}

// .google.protobuf.BoolValue verified = 3;
inline bool Email::_internal_has_verified() const {
  return this != internal_default_instance() && verified_ != nullptr;
}
inline bool Email::has_verified() const {
  return _internal_has_verified();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& Email::_internal_verified() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = verified_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& Email::verified() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.Email.verified)
  return _internal_verified();
}
inline void Email::unsafe_arena_set_allocated_verified(
    PROTOBUF_NAMESPACE_ID::BoolValue* verified) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verified_);
  }
  verified_ = verified;
  if (verified) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.Email.verified)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Email::release_verified() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = verified_;
  verified_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Email::unsafe_arena_release_verified() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.Email.verified)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = verified_;
  verified_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Email::_internal_mutable_verified() {
  
  if (verified_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    verified_ = p;
  }
  return verified_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Email::mutable_verified() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.Email.verified)
  return _internal_mutable_verified();
}
inline void Email::set_allocated_verified(PROTOBUF_NAMESPACE_ID::BoolValue* verified) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(verified_);
  }
  if (verified) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verified)->GetArena();
    if (message_arena != submessage_arena) {
      verified = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verified, submessage_arena);
    }
    
  } else {
    
  }
  verified_ = verified;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.Email.verified)
}

// -------------------------------------------------------------------

// User

// string id = 1;
inline void User::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::id() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.User.id)
  return _internal_id();
}
inline void User::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.User.id)
}
inline std::string* User::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.User.id)
  return _internal_mutable_id();
}
inline const std::string& User::_internal_id() const {
  return id_.Get();
}
inline void User::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.User.id)
}
inline void User::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.User.id)
}
inline void User::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.User.id)
}
inline std::string* User::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.User.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.User.id)
}

// string v2_id = 2;
inline void User::clear_v2_id() {
  v2_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::v2_id() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.User.v2_id)
  return _internal_v2_id();
}
inline void User::set_v2_id(const std::string& value) {
  _internal_set_v2_id(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.User.v2_id)
}
inline std::string* User::mutable_v2_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.User.v2_id)
  return _internal_mutable_v2_id();
}
inline const std::string& User::_internal_v2_id() const {
  return v2_id_.Get();
}
inline void User::_internal_set_v2_id(const std::string& value) {
  
  v2_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_v2_id(std::string&& value) {
  
  v2_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.User.v2_id)
}
inline void User::set_v2_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v2_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.User.v2_id)
}
inline void User::set_v2_id(const char* value,
    size_t size) {
  
  v2_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.User.v2_id)
}
inline std::string* User::_internal_mutable_v2_id() {
  
  return v2_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_v2_id() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.User.v2_id)
  return v2_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_v2_id(std::string* v2_id) {
  if (v2_id != nullptr) {
    
  } else {
    
  }
  v2_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v2_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.User.v2_id)
}

// string first_name = 4;
inline void User::clear_first_name() {
  first_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::first_name() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.User.first_name)
  return _internal_first_name();
}
inline void User::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.User.first_name)
}
inline std::string* User::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.User.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& User::_internal_first_name() const {
  return first_name_.Get();
}
inline void User::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_first_name(std::string&& value) {
  
  first_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.User.first_name)
}
inline void User::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.User.first_name)
}
inline void User::set_first_name(const char* value,
    size_t size) {
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.User.first_name)
}
inline std::string* User::_internal_mutable_first_name() {
  
  return first_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_first_name() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.User.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.User.first_name)
}

// string last_name = 5;
inline void User::clear_last_name() {
  last_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::last_name() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.User.last_name)
  return _internal_last_name();
}
inline void User::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.User.last_name)
}
inline std::string* User::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.User.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& User::_internal_last_name() const {
  return last_name_.Get();
}
inline void User::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_last_name(std::string&& value) {
  
  last_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.User.last_name)
}
inline void User::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.User.last_name)
}
inline void User::set_last_name(const char* value,
    size_t size) {
  
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.User.last_name)
}
inline std::string* User::_internal_mutable_last_name() {
  
  return last_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_last_name() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.User.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.User.last_name)
}

// string company_name = 6;
inline void User::clear_company_name() {
  company_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::company_name() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.User.company_name)
  return _internal_company_name();
}
inline void User::set_company_name(const std::string& value) {
  _internal_set_company_name(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.User.company_name)
}
inline std::string* User::mutable_company_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.User.company_name)
  return _internal_mutable_company_name();
}
inline const std::string& User::_internal_company_name() const {
  return company_name_.Get();
}
inline void User::_internal_set_company_name(const std::string& value) {
  
  company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_company_name(std::string&& value) {
  
  company_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.User.company_name)
}
inline void User::set_company_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.User.company_name)
}
inline void User::set_company_name(const char* value,
    size_t size) {
  
  company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.User.company_name)
}
inline std::string* User::_internal_mutable_company_name() {
  
  return company_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_company_name() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.User.company_name)
  return company_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_company_name(std::string* company_name) {
  if (company_name != nullptr) {
    
  } else {
    
  }
  company_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.User.company_name)
}

// string bill_type = 9;
inline void User::clear_bill_type() {
  bill_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::bill_type() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.User.bill_type)
  return _internal_bill_type();
}
inline void User::set_bill_type(const std::string& value) {
  _internal_set_bill_type(value);
  // @@protoc_insertion_point(field_set:clarifai.admin_api.User.bill_type)
}
inline std::string* User::mutable_bill_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.User.bill_type)
  return _internal_mutable_bill_type();
}
inline const std::string& User::_internal_bill_type() const {
  return bill_type_.Get();
}
inline void User::_internal_set_bill_type(const std::string& value) {
  
  bill_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_bill_type(std::string&& value) {
  
  bill_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.admin_api.User.bill_type)
}
inline void User::set_bill_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bill_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.admin_api.User.bill_type)
}
inline void User::set_bill_type(const char* value,
    size_t size) {
  
  bill_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.admin_api.User.bill_type)
}
inline std::string* User::_internal_mutable_bill_type() {
  
  return bill_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_bill_type() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.User.bill_type)
  return bill_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_bill_type(std::string* bill_type) {
  if (bill_type != nullptr) {
    
  } else {
    
  }
  bill_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bill_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.User.bill_type)
}

// repeated .clarifai.admin_api.Email emails = 7;
inline int User::_internal_emails_size() const {
  return emails_.size();
}
inline int User::emails_size() const {
  return _internal_emails_size();
}
inline void User::clear_emails() {
  emails_.Clear();
}
inline ::clarifai::admin_api::Email* User::mutable_emails(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.User.emails)
  return emails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::Email >*
User::mutable_emails() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.admin_api.User.emails)
  return &emails_;
}
inline const ::clarifai::admin_api::Email& User::_internal_emails(int index) const {
  return emails_.Get(index);
}
inline const ::clarifai::admin_api::Email& User::emails(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.User.emails)
  return _internal_emails(index);
}
inline ::clarifai::admin_api::Email* User::_internal_add_emails() {
  return emails_.Add();
}
inline ::clarifai::admin_api::Email* User::add_emails() {
  // @@protoc_insertion_point(field_add:clarifai.admin_api.User.emails)
  return _internal_add_emails();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::admin_api::Email >&
User::emails() const {
  // @@protoc_insertion_point(field_list:clarifai.admin_api.User.emails)
  return emails_;
}

// .google.protobuf.Timestamp created_at = 8;
inline bool User::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool User::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.User.created_at)
  return _internal_created_at();
}
inline void User::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.admin_api.User.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.admin_api.User.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.User.created_at)
  return _internal_mutable_created_at();
}
inline void User::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.admin_api.User.created_at)
}

// repeated .clarifai.api.App recent_apps = 10 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int User::_internal_recent_apps_size() const {
  return recent_apps_.size();
}
inline int User::recent_apps_size() const {
  return _internal_recent_apps_size();
}
inline ::clarifai::api::App* User::mutable_recent_apps(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.admin_api.User.recent_apps)
  return recent_apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
User::mutable_recent_apps() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.admin_api.User.recent_apps)
  return &recent_apps_;
}
inline const ::clarifai::api::App& User::_internal_recent_apps(int index) const {
  return recent_apps_.Get(index);
}
inline const ::clarifai::api::App& User::recent_apps(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.admin_api.User.recent_apps)
  return _internal_recent_apps(index);
}
inline ::clarifai::api::App* User::_internal_add_recent_apps() {
  return recent_apps_.Add();
}
inline ::clarifai::api::App* User::add_recent_apps() {
  // @@protoc_insertion_point(field_add:clarifai.admin_api.User.recent_apps)
  return _internal_add_recent_apps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
User::recent_apps() const {
  // @@protoc_insertion_point(field_list:clarifai.admin_api.User.recent_apps)
  return recent_apps_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin_api
}  // namespace clarifai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::clarifai::admin_api::OpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::admin_api::OpType>() {
  return ::clarifai::admin_api::OpType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fadmin_5fapi_2fresources_2eproto
