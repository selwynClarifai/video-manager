// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/sdk_billing/resources.proto

#include "proto/clarifai/sdk_billing/resources.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fanalytics_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fanalytics_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostAppInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fanalytics_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperatingSystem_proto_2fclarifai_2fanalytics_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fanalytics_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SDK_proto_2fclarifai_2fanalytics_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fanalytics_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_State_proto_2fclarifai_2fanalytics_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SDKBillingCycle_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto;
namespace clarifai {
namespace sdk_billing {
class SDKBillingCycleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SDKBillingCycle> _instance;
} _SDKBillingCycle_default_instance_;
class SDKBillingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SDKBilling> _instance;
} _SDKBilling_default_instance_;
}  // namespace sdk_billing
}  // namespace clarifai
static void InitDefaultsscc_info_SDKBilling_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::sdk_billing::_SDKBilling_default_instance_;
    new (ptr) ::clarifai::sdk_billing::SDKBilling();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::sdk_billing::SDKBilling::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_SDKBilling_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_SDKBilling_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto}, {
      &scc_info_DeviceInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
      &scc_info_SDKBillingCycle_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto.base,
      &scc_info_HostAppInfo_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
      &scc_info_OperatingSystem_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
      &scc_info_State_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,
      &scc_info_SDK_proto_2fclarifai_2fanalytics_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SDKBillingCycle_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::sdk_billing::_SDKBillingCycle_default_instance_;
    new (ptr) ::clarifai::sdk_billing::SDKBillingCycle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::sdk_billing::SDKBillingCycle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SDKBillingCycle_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SDKBillingCycle_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk_billing::SDKBillingCycle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk_billing::SDKBillingCycle, year_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk_billing::SDKBillingCycle, month_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk_billing::SDKBilling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk_billing::SDKBilling, batch_unique_identifier_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk_billing::SDKBilling, device_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk_billing::SDKBilling, cycle_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk_billing::SDKBilling, host_app_info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk_billing::SDKBilling, operating_system_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk_billing::SDKBilling, state_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk_billing::SDKBilling, system_uuid_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk_billing::SDKBilling, sdk_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clarifai::sdk_billing::SDKBillingCycle)},
  { 7, -1, sizeof(::clarifai::sdk_billing::SDKBilling)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::sdk_billing::_SDKBillingCycle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::sdk_billing::_SDKBilling_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*proto/clarifai/sdk_billing/resources.p"
  "roto\022\024clarifai.sdk_billing\032(proto/clarif"
  "ai/analytics/resources.proto\".\n\017SDKBilli"
  "ngCycle\022\014\n\004year\030\001 \001(\r\022\r\n\005month\030\002 \001(\r\"\364\002\n"
  "\nSDKBilling\022\037\n\027batch_unique_identifier\030\001"
  " \001(\t\0223\n\013device_info\030\002 \001(\0132\036.clarifai.ana"
  "lytics.DeviceInfo\0224\n\005cycle\030\003 \001(\0132%.clari"
  "fai.sdk_billing.SDKBillingCycle\0226\n\rhost_"
  "app_info\030\004 \001(\0132\037.clarifai.analytics.Host"
  "AppInfo\022=\n\020operating_system\030\005 \001(\0132#.clar"
  "ifai.analytics.OperatingSystem\022(\n\005state\030"
  "\006 \001(\0132\031.clarifai.analytics.State\022\023\n\013syst"
  "em_uuid\030\007 \001(\t\022$\n\003sdk\030\010 \001(\0132\027.clarifai.an"
  "alytics.SDKB0\n\030com.clarifai.sdk_billingP"
  "\001Z\013sdk_billing\242\002\004CAIPb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto_deps[1] = {
  &::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto_sccs[2] = {
  &scc_info_SDKBilling_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto.base,
  &scc_info_SDKBillingCycle_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto = {
  false, false, descriptor_table_protodef_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto, "proto/clarifai/sdk_billing/resources.proto", 589,
  &descriptor_table_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto_once, descriptor_table_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto_sccs, descriptor_table_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto, 2, file_level_enum_descriptors_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto, file_level_service_descriptors_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto)), true);
namespace clarifai {
namespace sdk_billing {

// ===================================================================

void SDKBillingCycle::InitAsDefaultInstance() {
}
class SDKBillingCycle::_Internal {
 public:
};

SDKBillingCycle::SDKBillingCycle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.sdk_billing.SDKBillingCycle)
}
SDKBillingCycle::SDKBillingCycle(const SDKBillingCycle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&month_) -
    reinterpret_cast<char*>(&year_)) + sizeof(month_));
  // @@protoc_insertion_point(copy_constructor:clarifai.sdk_billing.SDKBillingCycle)
}

void SDKBillingCycle::SharedCtor() {
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&month_) -
      reinterpret_cast<char*>(&year_)) + sizeof(month_));
}

SDKBillingCycle::~SDKBillingCycle() {
  // @@protoc_insertion_point(destructor:clarifai.sdk_billing.SDKBillingCycle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SDKBillingCycle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SDKBillingCycle::ArenaDtor(void* object) {
  SDKBillingCycle* _this = reinterpret_cast< SDKBillingCycle* >(object);
  (void)_this;
}
void SDKBillingCycle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SDKBillingCycle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SDKBillingCycle& SDKBillingCycle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SDKBillingCycle_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto.base);
  return *internal_default_instance();
}


void SDKBillingCycle::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.sdk_billing.SDKBillingCycle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&month_) -
      reinterpret_cast<char*>(&year_)) + sizeof(month_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDKBillingCycle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SDKBillingCycle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.sdk_billing.SDKBillingCycle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 year = 1;
  if (this->year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_year(), target);
  }

  // uint32 month = 2;
  if (this->month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_month(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.sdk_billing.SDKBillingCycle)
  return target;
}

size_t SDKBillingCycle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.sdk_billing.SDKBillingCycle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_year());
  }

  // uint32 month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_month());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SDKBillingCycle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.sdk_billing.SDKBillingCycle)
  GOOGLE_DCHECK_NE(&from, this);
  const SDKBillingCycle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SDKBillingCycle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.sdk_billing.SDKBillingCycle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.sdk_billing.SDKBillingCycle)
    MergeFrom(*source);
  }
}

void SDKBillingCycle::MergeFrom(const SDKBillingCycle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.sdk_billing.SDKBillingCycle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.year() != 0) {
    _internal_set_year(from._internal_year());
  }
  if (from.month() != 0) {
    _internal_set_month(from._internal_month());
  }
}

void SDKBillingCycle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.sdk_billing.SDKBillingCycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDKBillingCycle::CopyFrom(const SDKBillingCycle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.sdk_billing.SDKBillingCycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKBillingCycle::IsInitialized() const {
  return true;
}

void SDKBillingCycle::InternalSwap(SDKBillingCycle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SDKBillingCycle, month_)
      + sizeof(SDKBillingCycle::month_)
      - PROTOBUF_FIELD_OFFSET(SDKBillingCycle, year_)>(
          reinterpret_cast<char*>(&year_),
          reinterpret_cast<char*>(&other->year_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SDKBillingCycle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SDKBilling::InitAsDefaultInstance() {
  ::clarifai::sdk_billing::_SDKBilling_default_instance_._instance.get_mutable()->device_info_ = const_cast< ::clarifai::analytics::DeviceInfo*>(
      ::clarifai::analytics::DeviceInfo::internal_default_instance());
  ::clarifai::sdk_billing::_SDKBilling_default_instance_._instance.get_mutable()->cycle_ = const_cast< ::clarifai::sdk_billing::SDKBillingCycle*>(
      ::clarifai::sdk_billing::SDKBillingCycle::internal_default_instance());
  ::clarifai::sdk_billing::_SDKBilling_default_instance_._instance.get_mutable()->host_app_info_ = const_cast< ::clarifai::analytics::HostAppInfo*>(
      ::clarifai::analytics::HostAppInfo::internal_default_instance());
  ::clarifai::sdk_billing::_SDKBilling_default_instance_._instance.get_mutable()->operating_system_ = const_cast< ::clarifai::analytics::OperatingSystem*>(
      ::clarifai::analytics::OperatingSystem::internal_default_instance());
  ::clarifai::sdk_billing::_SDKBilling_default_instance_._instance.get_mutable()->state_ = const_cast< ::clarifai::analytics::State*>(
      ::clarifai::analytics::State::internal_default_instance());
  ::clarifai::sdk_billing::_SDKBilling_default_instance_._instance.get_mutable()->sdk_ = const_cast< ::clarifai::analytics::SDK*>(
      ::clarifai::analytics::SDK::internal_default_instance());
}
class SDKBilling::_Internal {
 public:
  static const ::clarifai::analytics::DeviceInfo& device_info(const SDKBilling* msg);
  static const ::clarifai::sdk_billing::SDKBillingCycle& cycle(const SDKBilling* msg);
  static const ::clarifai::analytics::HostAppInfo& host_app_info(const SDKBilling* msg);
  static const ::clarifai::analytics::OperatingSystem& operating_system(const SDKBilling* msg);
  static const ::clarifai::analytics::State& state(const SDKBilling* msg);
  static const ::clarifai::analytics::SDK& sdk(const SDKBilling* msg);
};

const ::clarifai::analytics::DeviceInfo&
SDKBilling::_Internal::device_info(const SDKBilling* msg) {
  return *msg->device_info_;
}
const ::clarifai::sdk_billing::SDKBillingCycle&
SDKBilling::_Internal::cycle(const SDKBilling* msg) {
  return *msg->cycle_;
}
const ::clarifai::analytics::HostAppInfo&
SDKBilling::_Internal::host_app_info(const SDKBilling* msg) {
  return *msg->host_app_info_;
}
const ::clarifai::analytics::OperatingSystem&
SDKBilling::_Internal::operating_system(const SDKBilling* msg) {
  return *msg->operating_system_;
}
const ::clarifai::analytics::State&
SDKBilling::_Internal::state(const SDKBilling* msg) {
  return *msg->state_;
}
const ::clarifai::analytics::SDK&
SDKBilling::_Internal::sdk(const SDKBilling* msg) {
  return *msg->sdk_;
}
void SDKBilling::clear_device_info() {
  if (GetArena() == nullptr && device_info_ != nullptr) {
    delete device_info_;
  }
  device_info_ = nullptr;
}
void SDKBilling::clear_host_app_info() {
  if (GetArena() == nullptr && host_app_info_ != nullptr) {
    delete host_app_info_;
  }
  host_app_info_ = nullptr;
}
void SDKBilling::clear_operating_system() {
  if (GetArena() == nullptr && operating_system_ != nullptr) {
    delete operating_system_;
  }
  operating_system_ = nullptr;
}
void SDKBilling::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
void SDKBilling::clear_sdk() {
  if (GetArena() == nullptr && sdk_ != nullptr) {
    delete sdk_;
  }
  sdk_ = nullptr;
}
SDKBilling::SDKBilling(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.sdk_billing.SDKBilling)
}
SDKBilling::SDKBilling(const SDKBilling& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  batch_unique_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_unique_identifier().empty()) {
    batch_unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_batch_unique_identifier(),
      GetArena());
  }
  system_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system_uuid().empty()) {
    system_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_system_uuid(),
      GetArena());
  }
  if (from._internal_has_device_info()) {
    device_info_ = new ::clarifai::analytics::DeviceInfo(*from.device_info_);
  } else {
    device_info_ = nullptr;
  }
  if (from._internal_has_cycle()) {
    cycle_ = new ::clarifai::sdk_billing::SDKBillingCycle(*from.cycle_);
  } else {
    cycle_ = nullptr;
  }
  if (from._internal_has_host_app_info()) {
    host_app_info_ = new ::clarifai::analytics::HostAppInfo(*from.host_app_info_);
  } else {
    host_app_info_ = nullptr;
  }
  if (from._internal_has_operating_system()) {
    operating_system_ = new ::clarifai::analytics::OperatingSystem(*from.operating_system_);
  } else {
    operating_system_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::clarifai::analytics::State(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_sdk()) {
    sdk_ = new ::clarifai::analytics::SDK(*from.sdk_);
  } else {
    sdk_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.sdk_billing.SDKBilling)
}

void SDKBilling::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SDKBilling_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto.base);
  batch_unique_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sdk_) -
      reinterpret_cast<char*>(&device_info_)) + sizeof(sdk_));
}

SDKBilling::~SDKBilling() {
  // @@protoc_insertion_point(destructor:clarifai.sdk_billing.SDKBilling)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SDKBilling::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  batch_unique_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_info_;
  if (this != internal_default_instance()) delete cycle_;
  if (this != internal_default_instance()) delete host_app_info_;
  if (this != internal_default_instance()) delete operating_system_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete sdk_;
}

void SDKBilling::ArenaDtor(void* object) {
  SDKBilling* _this = reinterpret_cast< SDKBilling* >(object);
  (void)_this;
}
void SDKBilling::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SDKBilling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SDKBilling& SDKBilling::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SDKBilling_proto_2fclarifai_2fsdk_5fbilling_2fresources_2eproto.base);
  return *internal_default_instance();
}


void SDKBilling::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.sdk_billing.SDKBilling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batch_unique_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  system_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && device_info_ != nullptr) {
    delete device_info_;
  }
  device_info_ = nullptr;
  if (GetArena() == nullptr && cycle_ != nullptr) {
    delete cycle_;
  }
  cycle_ = nullptr;
  if (GetArena() == nullptr && host_app_info_ != nullptr) {
    delete host_app_info_;
  }
  host_app_info_ = nullptr;
  if (GetArena() == nullptr && operating_system_ != nullptr) {
    delete operating_system_;
  }
  operating_system_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && sdk_ != nullptr) {
    delete sdk_;
  }
  sdk_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDKBilling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string batch_unique_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_batch_unique_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.sdk_billing.SDKBilling.batch_unique_identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.DeviceInfo device_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.sdk_billing.SDKBillingCycle cycle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cycle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.HostAppInfo host_app_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_app_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.OperatingSystem operating_system = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_operating_system(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.State state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string system_uuid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_system_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.sdk_billing.SDKBilling.system_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.analytics.SDK sdk = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sdk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SDKBilling::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.sdk_billing.SDKBilling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string batch_unique_identifier = 1;
  if (this->batch_unique_identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batch_unique_identifier().data(), static_cast<int>(this->_internal_batch_unique_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.sdk_billing.SDKBilling.batch_unique_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_batch_unique_identifier(), target);
  }

  // .clarifai.analytics.DeviceInfo device_info = 2;
  if (this->has_device_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::device_info(this), target, stream);
  }

  // .clarifai.sdk_billing.SDKBillingCycle cycle = 3;
  if (this->has_cycle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cycle(this), target, stream);
  }

  // .clarifai.analytics.HostAppInfo host_app_info = 4;
  if (this->has_host_app_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::host_app_info(this), target, stream);
  }

  // .clarifai.analytics.OperatingSystem operating_system = 5;
  if (this->has_operating_system()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::operating_system(this), target, stream);
  }

  // .clarifai.analytics.State state = 6;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::state(this), target, stream);
  }

  // string system_uuid = 7;
  if (this->system_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system_uuid().data(), static_cast<int>(this->_internal_system_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.sdk_billing.SDKBilling.system_uuid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_system_uuid(), target);
  }

  // .clarifai.analytics.SDK sdk = 8;
  if (this->has_sdk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::sdk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.sdk_billing.SDKBilling)
  return target;
}

size_t SDKBilling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.sdk_billing.SDKBilling)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string batch_unique_identifier = 1;
  if (this->batch_unique_identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batch_unique_identifier());
  }

  // string system_uuid = 7;
  if (this->system_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system_uuid());
  }

  // .clarifai.analytics.DeviceInfo device_info = 2;
  if (this->has_device_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_info_);
  }

  // .clarifai.sdk_billing.SDKBillingCycle cycle = 3;
  if (this->has_cycle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cycle_);
  }

  // .clarifai.analytics.HostAppInfo host_app_info = 4;
  if (this->has_host_app_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_app_info_);
  }

  // .clarifai.analytics.OperatingSystem operating_system = 5;
  if (this->has_operating_system()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *operating_system_);
  }

  // .clarifai.analytics.State state = 6;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .clarifai.analytics.SDK sdk = 8;
  if (this->has_sdk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sdk_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SDKBilling::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.sdk_billing.SDKBilling)
  GOOGLE_DCHECK_NE(&from, this);
  const SDKBilling* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SDKBilling>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.sdk_billing.SDKBilling)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.sdk_billing.SDKBilling)
    MergeFrom(*source);
  }
}

void SDKBilling::MergeFrom(const SDKBilling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.sdk_billing.SDKBilling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.batch_unique_identifier().size() > 0) {
    _internal_set_batch_unique_identifier(from._internal_batch_unique_identifier());
  }
  if (from.system_uuid().size() > 0) {
    _internal_set_system_uuid(from._internal_system_uuid());
  }
  if (from.has_device_info()) {
    _internal_mutable_device_info()->::clarifai::analytics::DeviceInfo::MergeFrom(from._internal_device_info());
  }
  if (from.has_cycle()) {
    _internal_mutable_cycle()->::clarifai::sdk_billing::SDKBillingCycle::MergeFrom(from._internal_cycle());
  }
  if (from.has_host_app_info()) {
    _internal_mutable_host_app_info()->::clarifai::analytics::HostAppInfo::MergeFrom(from._internal_host_app_info());
  }
  if (from.has_operating_system()) {
    _internal_mutable_operating_system()->::clarifai::analytics::OperatingSystem::MergeFrom(from._internal_operating_system());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::clarifai::analytics::State::MergeFrom(from._internal_state());
  }
  if (from.has_sdk()) {
    _internal_mutable_sdk()->::clarifai::analytics::SDK::MergeFrom(from._internal_sdk());
  }
}

void SDKBilling::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.sdk_billing.SDKBilling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDKBilling::CopyFrom(const SDKBilling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.sdk_billing.SDKBilling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKBilling::IsInitialized() const {
  return true;
}

void SDKBilling::InternalSwap(SDKBilling* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  batch_unique_identifier_.Swap(&other->batch_unique_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  system_uuid_.Swap(&other->system_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SDKBilling, sdk_)
      + sizeof(SDKBilling::sdk_)
      - PROTOBUF_FIELD_OFFSET(SDKBilling, device_info_)>(
          reinterpret_cast<char*>(&device_info_),
          reinterpret_cast<char*>(&other->device_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SDKBilling::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sdk_billing
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::sdk_billing::SDKBillingCycle* Arena::CreateMaybeMessage< ::clarifai::sdk_billing::SDKBillingCycle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::sdk_billing::SDKBillingCycle >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::sdk_billing::SDKBilling* Arena::CreateMaybeMessage< ::clarifai::sdk_billing::SDKBilling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::sdk_billing::SDKBilling >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
