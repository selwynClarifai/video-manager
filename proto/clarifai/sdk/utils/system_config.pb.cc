// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/sdk/utils/system_config.proto

#include "proto/clarifai/sdk/utils/system_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace clarifai {
namespace sdk {
namespace utils {
class SystemConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemConfig> _instance;
} _SystemConfig_default_instance_;
}  // namespace utils
}  // namespace sdk
}  // namespace clarifai
static void InitDefaultsscc_info_SystemConfig_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::sdk::utils::_SystemConfig_default_instance_;
    new (ptr) ::clarifai::sdk::utils::SystemConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::sdk::utils::SystemConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SystemConfig_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SystemConfig_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk::utils::SystemConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk::utils::SystemConfig, discard_data_timestamp_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk::utils::SystemConfig, do_not_sync_until_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk::utils::SystemConfig, authentication_interval_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk::utils::SystemConfig, batch_upload_interval_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk::utils::SystemConfig, network_constraint_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk::utils::SystemConfig, system_uuid_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk::utils::SystemConfig, launch_count_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk::utils::SystemConfig, last_authentication_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk::utils::SystemConfig, last_batch_upload_time_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk::utils::SystemConfig, billing_interval_),
  PROTOBUF_FIELD_OFFSET(::clarifai::sdk::utils::SystemConfig, last_billing_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clarifai::sdk::utils::SystemConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::sdk::utils::_SystemConfig_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,proto/clarifai/sdk/utils/system_config"
  ".proto\022\022clarifai.sdk.utils\032\036google/proto"
  "buf/duration.proto\032\037google/protobuf/time"
  "stamp.proto\"\313\004\n\014SystemConfig\022:\n\026discard_"
  "data_timestamp\030\001 \001(\0132\032.google.protobuf.T"
  "imestamp\0225\n\021do_not_sync_until\030\002 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022:\n\027authenticatio"
  "n_interval\030\003 \001(\0132\031.google.protobuf.Durat"
  "ion\0228\n\025batch_upload_interval\030\004 \001(\0132\031.goo"
  "gle.protobuf.Duration\022A\n\022network_constra"
  "int\030\005 \001(\0162%.clarifai.sdk.utils.NetworkCo"
  "nstraint\022\023\n\013system_uuid\030\006 \001(\t\022\024\n\014launch_"
  "count\030\007 \001(\r\022<\n\030last_authentication_time\030"
  "\010 \001(\0132\032.google.protobuf.Timestamp\022:\n\026las"
  "t_batch_upload_time\030\t \001(\0132\032.google.proto"
  "buf.Timestamp\0223\n\020billing_interval\030\n \001(\0132"
  "\031.google.protobuf.Duration\0225\n\021last_billi"
  "ng_time\030\013 \001(\0132\032.google.protobuf.Timestam"
  "p*,\n\021NetworkConstraint\022\010\n\004NONE\020\000\022\r\n\tWIFI"
  "_ONLY\020\001B,\n\026com.clarifai.sdk.utilsP\001Z\tsdk"
  ".utils\242\002\004CAIPb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto_sccs[1] = {
  &scc_info_SystemConfig_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto, "proto/clarifai/sdk/utils/system_config.proto", 821,
  &descriptor_table_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto_once, descriptor_table_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto_sccs, descriptor_table_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto, 1, file_level_enum_descriptors_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto, file_level_service_descriptors_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto)), true);
namespace clarifai {
namespace sdk {
namespace utils {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkConstraint_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto[0];
}
bool NetworkConstraint_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SystemConfig::InitAsDefaultInstance() {
  ::clarifai::sdk::utils::_SystemConfig_default_instance_._instance.get_mutable()->discard_data_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::sdk::utils::_SystemConfig_default_instance_._instance.get_mutable()->do_not_sync_until_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::sdk::utils::_SystemConfig_default_instance_._instance.get_mutable()->authentication_interval_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::clarifai::sdk::utils::_SystemConfig_default_instance_._instance.get_mutable()->batch_upload_interval_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::clarifai::sdk::utils::_SystemConfig_default_instance_._instance.get_mutable()->last_authentication_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::sdk::utils::_SystemConfig_default_instance_._instance.get_mutable()->last_batch_upload_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::sdk::utils::_SystemConfig_default_instance_._instance.get_mutable()->billing_interval_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::clarifai::sdk::utils::_SystemConfig_default_instance_._instance.get_mutable()->last_billing_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class SystemConfig::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& discard_data_timestamp(const SystemConfig* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& do_not_sync_until(const SystemConfig* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& authentication_interval(const SystemConfig* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& batch_upload_interval(const SystemConfig* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_authentication_time(const SystemConfig* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_batch_upload_time(const SystemConfig* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& billing_interval(const SystemConfig* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_billing_time(const SystemConfig* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
SystemConfig::_Internal::discard_data_timestamp(const SystemConfig* msg) {
  return *msg->discard_data_timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
SystemConfig::_Internal::do_not_sync_until(const SystemConfig* msg) {
  return *msg->do_not_sync_until_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
SystemConfig::_Internal::authentication_interval(const SystemConfig* msg) {
  return *msg->authentication_interval_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
SystemConfig::_Internal::batch_upload_interval(const SystemConfig* msg) {
  return *msg->batch_upload_interval_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
SystemConfig::_Internal::last_authentication_time(const SystemConfig* msg) {
  return *msg->last_authentication_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
SystemConfig::_Internal::last_batch_upload_time(const SystemConfig* msg) {
  return *msg->last_batch_upload_time_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
SystemConfig::_Internal::billing_interval(const SystemConfig* msg) {
  return *msg->billing_interval_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
SystemConfig::_Internal::last_billing_time(const SystemConfig* msg) {
  return *msg->last_billing_time_;
}
void SystemConfig::clear_discard_data_timestamp() {
  if (GetArena() == nullptr && discard_data_timestamp_ != nullptr) {
    delete discard_data_timestamp_;
  }
  discard_data_timestamp_ = nullptr;
}
void SystemConfig::clear_do_not_sync_until() {
  if (GetArena() == nullptr && do_not_sync_until_ != nullptr) {
    delete do_not_sync_until_;
  }
  do_not_sync_until_ = nullptr;
}
void SystemConfig::clear_authentication_interval() {
  if (GetArena() == nullptr && authentication_interval_ != nullptr) {
    delete authentication_interval_;
  }
  authentication_interval_ = nullptr;
}
void SystemConfig::clear_batch_upload_interval() {
  if (GetArena() == nullptr && batch_upload_interval_ != nullptr) {
    delete batch_upload_interval_;
  }
  batch_upload_interval_ = nullptr;
}
void SystemConfig::clear_last_authentication_time() {
  if (GetArena() == nullptr && last_authentication_time_ != nullptr) {
    delete last_authentication_time_;
  }
  last_authentication_time_ = nullptr;
}
void SystemConfig::clear_last_batch_upload_time() {
  if (GetArena() == nullptr && last_batch_upload_time_ != nullptr) {
    delete last_batch_upload_time_;
  }
  last_batch_upload_time_ = nullptr;
}
void SystemConfig::clear_billing_interval() {
  if (GetArena() == nullptr && billing_interval_ != nullptr) {
    delete billing_interval_;
  }
  billing_interval_ = nullptr;
}
void SystemConfig::clear_last_billing_time() {
  if (GetArena() == nullptr && last_billing_time_ != nullptr) {
    delete last_billing_time_;
  }
  last_billing_time_ = nullptr;
}
SystemConfig::SystemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.sdk.utils.SystemConfig)
}
SystemConfig::SystemConfig(const SystemConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  system_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system_uuid().empty()) {
    system_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_system_uuid(),
      GetArena());
  }
  if (from._internal_has_discard_data_timestamp()) {
    discard_data_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.discard_data_timestamp_);
  } else {
    discard_data_timestamp_ = nullptr;
  }
  if (from._internal_has_do_not_sync_until()) {
    do_not_sync_until_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.do_not_sync_until_);
  } else {
    do_not_sync_until_ = nullptr;
  }
  if (from._internal_has_authentication_interval()) {
    authentication_interval_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.authentication_interval_);
  } else {
    authentication_interval_ = nullptr;
  }
  if (from._internal_has_batch_upload_interval()) {
    batch_upload_interval_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.batch_upload_interval_);
  } else {
    batch_upload_interval_ = nullptr;
  }
  if (from._internal_has_last_authentication_time()) {
    last_authentication_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_authentication_time_);
  } else {
    last_authentication_time_ = nullptr;
  }
  if (from._internal_has_last_batch_upload_time()) {
    last_batch_upload_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_batch_upload_time_);
  } else {
    last_batch_upload_time_ = nullptr;
  }
  if (from._internal_has_billing_interval()) {
    billing_interval_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.billing_interval_);
  } else {
    billing_interval_ = nullptr;
  }
  if (from._internal_has_last_billing_time()) {
    last_billing_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_billing_time_);
  } else {
    last_billing_time_ = nullptr;
  }
  ::memcpy(&network_constraint_, &from.network_constraint_,
    static_cast<size_t>(reinterpret_cast<char*>(&launch_count_) -
    reinterpret_cast<char*>(&network_constraint_)) + sizeof(launch_count_));
  // @@protoc_insertion_point(copy_constructor:clarifai.sdk.utils.SystemConfig)
}

void SystemConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemConfig_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto.base);
  system_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&discard_data_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&launch_count_) -
      reinterpret_cast<char*>(&discard_data_timestamp_)) + sizeof(launch_count_));
}

SystemConfig::~SystemConfig() {
  // @@protoc_insertion_point(destructor:clarifai.sdk.utils.SystemConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SystemConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  system_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete discard_data_timestamp_;
  if (this != internal_default_instance()) delete do_not_sync_until_;
  if (this != internal_default_instance()) delete authentication_interval_;
  if (this != internal_default_instance()) delete batch_upload_interval_;
  if (this != internal_default_instance()) delete last_authentication_time_;
  if (this != internal_default_instance()) delete last_batch_upload_time_;
  if (this != internal_default_instance()) delete billing_interval_;
  if (this != internal_default_instance()) delete last_billing_time_;
}

void SystemConfig::ArenaDtor(void* object) {
  SystemConfig* _this = reinterpret_cast< SystemConfig* >(object);
  (void)_this;
}
void SystemConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemConfig& SystemConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemConfig_proto_2fclarifai_2fsdk_2futils_2fsystem_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void SystemConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.sdk.utils.SystemConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  system_uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && discard_data_timestamp_ != nullptr) {
    delete discard_data_timestamp_;
  }
  discard_data_timestamp_ = nullptr;
  if (GetArena() == nullptr && do_not_sync_until_ != nullptr) {
    delete do_not_sync_until_;
  }
  do_not_sync_until_ = nullptr;
  if (GetArena() == nullptr && authentication_interval_ != nullptr) {
    delete authentication_interval_;
  }
  authentication_interval_ = nullptr;
  if (GetArena() == nullptr && batch_upload_interval_ != nullptr) {
    delete batch_upload_interval_;
  }
  batch_upload_interval_ = nullptr;
  if (GetArena() == nullptr && last_authentication_time_ != nullptr) {
    delete last_authentication_time_;
  }
  last_authentication_time_ = nullptr;
  if (GetArena() == nullptr && last_batch_upload_time_ != nullptr) {
    delete last_batch_upload_time_;
  }
  last_batch_upload_time_ = nullptr;
  if (GetArena() == nullptr && billing_interval_ != nullptr) {
    delete billing_interval_;
  }
  billing_interval_ = nullptr;
  if (GetArena() == nullptr && last_billing_time_ != nullptr) {
    delete last_billing_time_;
  }
  last_billing_time_ = nullptr;
  ::memset(&network_constraint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&launch_count_) -
      reinterpret_cast<char*>(&network_constraint_)) + sizeof(launch_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp discard_data_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_discard_data_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp do_not_sync_until = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_do_not_sync_until(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration authentication_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_authentication_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration batch_upload_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_upload_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.sdk.utils.NetworkConstraint network_constraint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_network_constraint(static_cast<::clarifai::sdk::utils::NetworkConstraint>(val));
        } else goto handle_unusual;
        continue;
      // string system_uuid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_system_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.sdk.utils.SystemConfig.system_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 launch_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          launch_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_authentication_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_authentication_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_batch_upload_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_batch_upload_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration billing_interval = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_billing_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_billing_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_billing_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.sdk.utils.SystemConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp discard_data_timestamp = 1;
  if (this->has_discard_data_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::discard_data_timestamp(this), target, stream);
  }

  // .google.protobuf.Timestamp do_not_sync_until = 2;
  if (this->has_do_not_sync_until()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::do_not_sync_until(this), target, stream);
  }

  // .google.protobuf.Duration authentication_interval = 3;
  if (this->has_authentication_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::authentication_interval(this), target, stream);
  }

  // .google.protobuf.Duration batch_upload_interval = 4;
  if (this->has_batch_upload_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::batch_upload_interval(this), target, stream);
  }

  // .clarifai.sdk.utils.NetworkConstraint network_constraint = 5;
  if (this->network_constraint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_network_constraint(), target);
  }

  // string system_uuid = 6;
  if (this->system_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system_uuid().data(), static_cast<int>(this->_internal_system_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.sdk.utils.SystemConfig.system_uuid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_system_uuid(), target);
  }

  // uint32 launch_count = 7;
  if (this->launch_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_launch_count(), target);
  }

  // .google.protobuf.Timestamp last_authentication_time = 8;
  if (this->has_last_authentication_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::last_authentication_time(this), target, stream);
  }

  // .google.protobuf.Timestamp last_batch_upload_time = 9;
  if (this->has_last_batch_upload_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::last_batch_upload_time(this), target, stream);
  }

  // .google.protobuf.Duration billing_interval = 10;
  if (this->has_billing_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::billing_interval(this), target, stream);
  }

  // .google.protobuf.Timestamp last_billing_time = 11;
  if (this->has_last_billing_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::last_billing_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.sdk.utils.SystemConfig)
  return target;
}

size_t SystemConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.sdk.utils.SystemConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string system_uuid = 6;
  if (this->system_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system_uuid());
  }

  // .google.protobuf.Timestamp discard_data_timestamp = 1;
  if (this->has_discard_data_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *discard_data_timestamp_);
  }

  // .google.protobuf.Timestamp do_not_sync_until = 2;
  if (this->has_do_not_sync_until()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *do_not_sync_until_);
  }

  // .google.protobuf.Duration authentication_interval = 3;
  if (this->has_authentication_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *authentication_interval_);
  }

  // .google.protobuf.Duration batch_upload_interval = 4;
  if (this->has_batch_upload_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *batch_upload_interval_);
  }

  // .google.protobuf.Timestamp last_authentication_time = 8;
  if (this->has_last_authentication_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_authentication_time_);
  }

  // .google.protobuf.Timestamp last_batch_upload_time = 9;
  if (this->has_last_batch_upload_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_batch_upload_time_);
  }

  // .google.protobuf.Duration billing_interval = 10;
  if (this->has_billing_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *billing_interval_);
  }

  // .google.protobuf.Timestamp last_billing_time = 11;
  if (this->has_last_billing_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_billing_time_);
  }

  // .clarifai.sdk.utils.NetworkConstraint network_constraint = 5;
  if (this->network_constraint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_network_constraint());
  }

  // uint32 launch_count = 7;
  if (this->launch_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_launch_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.sdk.utils.SystemConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.sdk.utils.SystemConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.sdk.utils.SystemConfig)
    MergeFrom(*source);
  }
}

void SystemConfig::MergeFrom(const SystemConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.sdk.utils.SystemConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.system_uuid().size() > 0) {
    _internal_set_system_uuid(from._internal_system_uuid());
  }
  if (from.has_discard_data_timestamp()) {
    _internal_mutable_discard_data_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_discard_data_timestamp());
  }
  if (from.has_do_not_sync_until()) {
    _internal_mutable_do_not_sync_until()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_do_not_sync_until());
  }
  if (from.has_authentication_interval()) {
    _internal_mutable_authentication_interval()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_authentication_interval());
  }
  if (from.has_batch_upload_interval()) {
    _internal_mutable_batch_upload_interval()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_batch_upload_interval());
  }
  if (from.has_last_authentication_time()) {
    _internal_mutable_last_authentication_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_authentication_time());
  }
  if (from.has_last_batch_upload_time()) {
    _internal_mutable_last_batch_upload_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_batch_upload_time());
  }
  if (from.has_billing_interval()) {
    _internal_mutable_billing_interval()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_billing_interval());
  }
  if (from.has_last_billing_time()) {
    _internal_mutable_last_billing_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_billing_time());
  }
  if (from.network_constraint() != 0) {
    _internal_set_network_constraint(from._internal_network_constraint());
  }
  if (from.launch_count() != 0) {
    _internal_set_launch_count(from._internal_launch_count());
  }
}

void SystemConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.sdk.utils.SystemConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemConfig::CopyFrom(const SystemConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.sdk.utils.SystemConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemConfig::IsInitialized() const {
  return true;
}

void SystemConfig::InternalSwap(SystemConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  system_uuid_.Swap(&other->system_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemConfig, launch_count_)
      + sizeof(SystemConfig::launch_count_)
      - PROTOBUF_FIELD_OFFSET(SystemConfig, discard_data_timestamp_)>(
          reinterpret_cast<char*>(&discard_data_timestamp_),
          reinterpret_cast<char*>(&other->discard_data_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace utils
}  // namespace sdk
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::sdk::utils::SystemConfig* Arena::CreateMaybeMessage< ::clarifai::sdk::utils::SystemConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::sdk::utils::SystemConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
