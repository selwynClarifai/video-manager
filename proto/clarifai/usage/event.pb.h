// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/usage/event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fusage_2fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fusage_2fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fusage_2fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto;
namespace clarifai {
namespace usage {
class CustomPredictEvent;
class CustomPredictEventDefaultTypeInternal;
extern CustomPredictEventDefaultTypeInternal _CustomPredictEvent_default_instance_;
class EventParam;
class EventParamDefaultTypeInternal;
extern EventParamDefaultTypeInternal _EventParam_default_instance_;
class Model;
class ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
class OtherEvent;
class OtherEventDefaultTypeInternal;
extern OtherEventDefaultTypeInternal _OtherEvent_default_instance_;
class RegularPredictEvent;
class RegularPredictEventDefaultTypeInternal;
extern RegularPredictEventDefaultTypeInternal _RegularPredictEvent_default_instance_;
class SearchEvent;
class SearchEventDefaultTypeInternal;
extern SearchEventDefaultTypeInternal _SearchEvent_default_instance_;
class TrainModelEvent;
class TrainModelEventDefaultTypeInternal;
extern TrainModelEventDefaultTypeInternal _TrainModelEvent_default_instance_;
}  // namespace usage
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> ::clarifai::usage::CustomPredictEvent* Arena::CreateMaybeMessage<::clarifai::usage::CustomPredictEvent>(Arena*);
template<> ::clarifai::usage::EventParam* Arena::CreateMaybeMessage<::clarifai::usage::EventParam>(Arena*);
template<> ::clarifai::usage::Model* Arena::CreateMaybeMessage<::clarifai::usage::Model>(Arena*);
template<> ::clarifai::usage::OtherEvent* Arena::CreateMaybeMessage<::clarifai::usage::OtherEvent>(Arena*);
template<> ::clarifai::usage::RegularPredictEvent* Arena::CreateMaybeMessage<::clarifai::usage::RegularPredictEvent>(Arena*);
template<> ::clarifai::usage::SearchEvent* Arena::CreateMaybeMessage<::clarifai::usage::SearchEvent>(Arena*);
template<> ::clarifai::usage::TrainModelEvent* Arena::CreateMaybeMessage<::clarifai::usage::TrainModelEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clarifai {
namespace usage {

enum EventType : int {
  TYPE_NOT_SET = 0,
  REGULAR_PREDICT = 1,
  CUSTOM_PREDICT = 2,
  SEARCH = 3,
  TRAIN = 4,
  OTHER = 5,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EventType_IsValid(int value);
constexpr EventType EventType_MIN = TYPE_NOT_SET;
constexpr EventType EventType_MAX = OTHER;
constexpr int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor();
template<typename T>
inline const std::string& EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventType_descriptor(), enum_t_value);
}
inline bool EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class EventParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.usage.EventParam) */ {
 public:
  inline EventParam() : EventParam(nullptr) {}
  virtual ~EventParam();

  EventParam(const EventParam& from);
  EventParam(EventParam&& from) noexcept
    : EventParam() {
    *this = ::std::move(from);
  }

  inline EventParam& operator=(const EventParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventParam& operator=(EventParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventParam& default_instance();

  enum EventCase {
    kPredict = 1,
    kCustomPredict = 2,
    kSearch = 3,
    kTrain = 4,
    kOther = 5,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventParam* internal_default_instance() {
    return reinterpret_cast<const EventParam*>(
               &_EventParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EventParam& a, EventParam& b) {
    a.Swap(&b);
  }
  inline void Swap(EventParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventParam* New() const final {
    return CreateMaybeMessage<EventParam>(nullptr);
  }

  EventParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventParam& from);
  void MergeFrom(const EventParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.usage.EventParam";
  }
  protected:
  explicit EventParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictFieldNumber = 1,
    kCustomPredictFieldNumber = 2,
    kSearchFieldNumber = 3,
    kTrainFieldNumber = 4,
    kOtherFieldNumber = 5,
  };
  // .clarifai.usage.RegularPredictEvent predict = 1;
  bool has_predict() const;
  private:
  bool _internal_has_predict() const;
  public:
  void clear_predict();
  const ::clarifai::usage::RegularPredictEvent& predict() const;
  ::clarifai::usage::RegularPredictEvent* release_predict();
  ::clarifai::usage::RegularPredictEvent* mutable_predict();
  void set_allocated_predict(::clarifai::usage::RegularPredictEvent* predict);
  private:
  const ::clarifai::usage::RegularPredictEvent& _internal_predict() const;
  ::clarifai::usage::RegularPredictEvent* _internal_mutable_predict();
  public:
  void unsafe_arena_set_allocated_predict(
      ::clarifai::usage::RegularPredictEvent* predict);
  ::clarifai::usage::RegularPredictEvent* unsafe_arena_release_predict();

  // .clarifai.usage.CustomPredictEvent custom_predict = 2;
  bool has_custom_predict() const;
  private:
  bool _internal_has_custom_predict() const;
  public:
  void clear_custom_predict();
  const ::clarifai::usage::CustomPredictEvent& custom_predict() const;
  ::clarifai::usage::CustomPredictEvent* release_custom_predict();
  ::clarifai::usage::CustomPredictEvent* mutable_custom_predict();
  void set_allocated_custom_predict(::clarifai::usage::CustomPredictEvent* custom_predict);
  private:
  const ::clarifai::usage::CustomPredictEvent& _internal_custom_predict() const;
  ::clarifai::usage::CustomPredictEvent* _internal_mutable_custom_predict();
  public:
  void unsafe_arena_set_allocated_custom_predict(
      ::clarifai::usage::CustomPredictEvent* custom_predict);
  ::clarifai::usage::CustomPredictEvent* unsafe_arena_release_custom_predict();

  // .clarifai.usage.SearchEvent search = 3;
  bool has_search() const;
  private:
  bool _internal_has_search() const;
  public:
  void clear_search();
  const ::clarifai::usage::SearchEvent& search() const;
  ::clarifai::usage::SearchEvent* release_search();
  ::clarifai::usage::SearchEvent* mutable_search();
  void set_allocated_search(::clarifai::usage::SearchEvent* search);
  private:
  const ::clarifai::usage::SearchEvent& _internal_search() const;
  ::clarifai::usage::SearchEvent* _internal_mutable_search();
  public:
  void unsafe_arena_set_allocated_search(
      ::clarifai::usage::SearchEvent* search);
  ::clarifai::usage::SearchEvent* unsafe_arena_release_search();

  // .clarifai.usage.TrainModelEvent train = 4;
  bool has_train() const;
  private:
  bool _internal_has_train() const;
  public:
  void clear_train();
  const ::clarifai::usage::TrainModelEvent& train() const;
  ::clarifai::usage::TrainModelEvent* release_train();
  ::clarifai::usage::TrainModelEvent* mutable_train();
  void set_allocated_train(::clarifai::usage::TrainModelEvent* train);
  private:
  const ::clarifai::usage::TrainModelEvent& _internal_train() const;
  ::clarifai::usage::TrainModelEvent* _internal_mutable_train();
  public:
  void unsafe_arena_set_allocated_train(
      ::clarifai::usage::TrainModelEvent* train);
  ::clarifai::usage::TrainModelEvent* unsafe_arena_release_train();

  // .clarifai.usage.OtherEvent other = 5;
  bool has_other() const;
  private:
  bool _internal_has_other() const;
  public:
  void clear_other();
  const ::clarifai::usage::OtherEvent& other() const;
  ::clarifai::usage::OtherEvent* release_other();
  ::clarifai::usage::OtherEvent* mutable_other();
  void set_allocated_other(::clarifai::usage::OtherEvent* other);
  private:
  const ::clarifai::usage::OtherEvent& _internal_other() const;
  ::clarifai::usage::OtherEvent* _internal_mutable_other();
  public:
  void unsafe_arena_set_allocated_other(
      ::clarifai::usage::OtherEvent* other);
  ::clarifai::usage::OtherEvent* unsafe_arena_release_other();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:clarifai.usage.EventParam)
 private:
  class _Internal;
  void set_has_predict();
  void set_has_custom_predict();
  void set_has_search();
  void set_has_train();
  void set_has_other();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EventUnion {
    EventUnion() {}
    ::clarifai::usage::RegularPredictEvent* predict_;
    ::clarifai::usage::CustomPredictEvent* custom_predict_;
    ::clarifai::usage::SearchEvent* search_;
    ::clarifai::usage::TrainModelEvent* train_;
    ::clarifai::usage::OtherEvent* other_;
  } event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto;
};
// -------------------------------------------------------------------

class Model PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.usage.Model) */ {
 public:
  inline Model() : Model(nullptr) {}
  virtual ~Model();

  Model(const Model& from);
  Model(Model&& from) noexcept
    : Model() {
    *this = ::std::move(from);
  }

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }
  inline Model& operator=(Model&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Model& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Model& a, Model& b) {
    a.Swap(&b);
  }
  inline void Swap(Model* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Model* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Model* New() const final {
    return CreateMaybeMessage<Model>(nullptr);
  }

  Model* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Model>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.usage.Model";
  }
  protected:
  explicit Model(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 1,
    kModelTypeFieldNumber = 2,
    kModelOwnerIdFieldNumber = 3,
    kModelVersionIdFieldNumber = 4,
  };
  // string model_id = 1;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string model_type = 2;
  void clear_model_type();
  const std::string& model_type() const;
  void set_model_type(const std::string& value);
  void set_model_type(std::string&& value);
  void set_model_type(const char* value);
  void set_model_type(const char* value, size_t size);
  std::string* mutable_model_type();
  std::string* release_model_type();
  void set_allocated_model_type(std::string* model_type);
  private:
  const std::string& _internal_model_type() const;
  void _internal_set_model_type(const std::string& value);
  std::string* _internal_mutable_model_type();
  public:

  // string model_owner_id = 3;
  void clear_model_owner_id();
  const std::string& model_owner_id() const;
  void set_model_owner_id(const std::string& value);
  void set_model_owner_id(std::string&& value);
  void set_model_owner_id(const char* value);
  void set_model_owner_id(const char* value, size_t size);
  std::string* mutable_model_owner_id();
  std::string* release_model_owner_id();
  void set_allocated_model_owner_id(std::string* model_owner_id);
  private:
  const std::string& _internal_model_owner_id() const;
  void _internal_set_model_owner_id(const std::string& value);
  std::string* _internal_mutable_model_owner_id();
  public:

  // string model_version_id = 4;
  void clear_model_version_id();
  const std::string& model_version_id() const;
  void set_model_version_id(const std::string& value);
  void set_model_version_id(std::string&& value);
  void set_model_version_id(const char* value);
  void set_model_version_id(const char* value, size_t size);
  std::string* mutable_model_version_id();
  std::string* release_model_version_id();
  void set_allocated_model_version_id(std::string* model_version_id);
  private:
  const std::string& _internal_model_version_id() const;
  void _internal_set_model_version_id(const std::string& value);
  std::string* _internal_mutable_model_version_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.usage.Model)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_owner_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto;
};
// -------------------------------------------------------------------

class RegularPredictEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.usage.RegularPredictEvent) */ {
 public:
  inline RegularPredictEvent() : RegularPredictEvent(nullptr) {}
  virtual ~RegularPredictEvent();

  RegularPredictEvent(const RegularPredictEvent& from);
  RegularPredictEvent(RegularPredictEvent&& from) noexcept
    : RegularPredictEvent() {
    *this = ::std::move(from);
  }

  inline RegularPredictEvent& operator=(const RegularPredictEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegularPredictEvent& operator=(RegularPredictEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegularPredictEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegularPredictEvent* internal_default_instance() {
    return reinterpret_cast<const RegularPredictEvent*>(
               &_RegularPredictEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegularPredictEvent& a, RegularPredictEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RegularPredictEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegularPredictEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegularPredictEvent* New() const final {
    return CreateMaybeMessage<RegularPredictEvent>(nullptr);
  }

  RegularPredictEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegularPredictEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegularPredictEvent& from);
  void MergeFrom(const RegularPredictEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegularPredictEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.usage.RegularPredictEvent";
  }
  protected:
  explicit RegularPredictEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputMediaTypeFieldNumber = 2,
    kModelFieldNumber = 1,
  };
  // string input_media_type = 2;
  void clear_input_media_type();
  const std::string& input_media_type() const;
  void set_input_media_type(const std::string& value);
  void set_input_media_type(std::string&& value);
  void set_input_media_type(const char* value);
  void set_input_media_type(const char* value, size_t size);
  std::string* mutable_input_media_type();
  std::string* release_input_media_type();
  void set_allocated_input_media_type(std::string* input_media_type);
  private:
  const std::string& _internal_input_media_type() const;
  void _internal_set_input_media_type(const std::string& value);
  std::string* _internal_mutable_input_media_type();
  public:

  // .clarifai.usage.Model model = 1;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::usage::Model& model() const;
  ::clarifai::usage::Model* release_model();
  ::clarifai::usage::Model* mutable_model();
  void set_allocated_model(::clarifai::usage::Model* model);
  private:
  const ::clarifai::usage::Model& _internal_model() const;
  ::clarifai::usage::Model* _internal_mutable_model();
  public:
  void unsafe_arena_set_allocated_model(
      ::clarifai::usage::Model* model);
  ::clarifai::usage::Model* unsafe_arena_release_model();

  // @@protoc_insertion_point(class_scope:clarifai.usage.RegularPredictEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_media_type_;
  ::clarifai::usage::Model* model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto;
};
// -------------------------------------------------------------------

class CustomPredictEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.usage.CustomPredictEvent) */ {
 public:
  inline CustomPredictEvent() : CustomPredictEvent(nullptr) {}
  virtual ~CustomPredictEvent();

  CustomPredictEvent(const CustomPredictEvent& from);
  CustomPredictEvent(CustomPredictEvent&& from) noexcept
    : CustomPredictEvent() {
    *this = ::std::move(from);
  }

  inline CustomPredictEvent& operator=(const CustomPredictEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomPredictEvent& operator=(CustomPredictEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomPredictEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomPredictEvent* internal_default_instance() {
    return reinterpret_cast<const CustomPredictEvent*>(
               &_CustomPredictEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CustomPredictEvent& a, CustomPredictEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomPredictEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomPredictEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomPredictEvent* New() const final {
    return CreateMaybeMessage<CustomPredictEvent>(nullptr);
  }

  CustomPredictEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomPredictEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomPredictEvent& from);
  void MergeFrom(const CustomPredictEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomPredictEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.usage.CustomPredictEvent";
  }
  protected:
  explicit CustomPredictEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputMediaTypeFieldNumber = 2,
    kModelFieldNumber = 1,
  };
  // string input_media_type = 2;
  void clear_input_media_type();
  const std::string& input_media_type() const;
  void set_input_media_type(const std::string& value);
  void set_input_media_type(std::string&& value);
  void set_input_media_type(const char* value);
  void set_input_media_type(const char* value, size_t size);
  std::string* mutable_input_media_type();
  std::string* release_input_media_type();
  void set_allocated_input_media_type(std::string* input_media_type);
  private:
  const std::string& _internal_input_media_type() const;
  void _internal_set_input_media_type(const std::string& value);
  std::string* _internal_mutable_input_media_type();
  public:

  // .clarifai.usage.Model model = 1;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::usage::Model& model() const;
  ::clarifai::usage::Model* release_model();
  ::clarifai::usage::Model* mutable_model();
  void set_allocated_model(::clarifai::usage::Model* model);
  private:
  const ::clarifai::usage::Model& _internal_model() const;
  ::clarifai::usage::Model* _internal_mutable_model();
  public:
  void unsafe_arena_set_allocated_model(
      ::clarifai::usage::Model* model);
  ::clarifai::usage::Model* unsafe_arena_release_model();

  // @@protoc_insertion_point(class_scope:clarifai.usage.CustomPredictEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_media_type_;
  ::clarifai::usage::Model* model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto;
};
// -------------------------------------------------------------------

class SearchEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.usage.SearchEvent) */ {
 public:
  inline SearchEvent() : SearchEvent(nullptr) {}
  virtual ~SearchEvent();

  SearchEvent(const SearchEvent& from);
  SearchEvent(SearchEvent&& from) noexcept
    : SearchEvent() {
    *this = ::std::move(from);
  }

  inline SearchEvent& operator=(const SearchEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchEvent& operator=(SearchEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchEvent* internal_default_instance() {
    return reinterpret_cast<const SearchEvent*>(
               &_SearchEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SearchEvent& a, SearchEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchEvent* New() const final {
    return CreateMaybeMessage<SearchEvent>(nullptr);
  }

  SearchEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchEvent& from);
  void MergeFrom(const SearchEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.usage.SearchEvent";
  }
  protected:
  explicit SearchEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchTypeFieldNumber = 1,
  };
  // string search_type = 1;
  void clear_search_type();
  const std::string& search_type() const;
  void set_search_type(const std::string& value);
  void set_search_type(std::string&& value);
  void set_search_type(const char* value);
  void set_search_type(const char* value, size_t size);
  std::string* mutable_search_type();
  std::string* release_search_type();
  void set_allocated_search_type(std::string* search_type);
  private:
  const std::string& _internal_search_type() const;
  void _internal_set_search_type(const std::string& value);
  std::string* _internal_mutable_search_type();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.usage.SearchEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto;
};
// -------------------------------------------------------------------

class TrainModelEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.usage.TrainModelEvent) */ {
 public:
  inline TrainModelEvent() : TrainModelEvent(nullptr) {}
  virtual ~TrainModelEvent();

  TrainModelEvent(const TrainModelEvent& from);
  TrainModelEvent(TrainModelEvent&& from) noexcept
    : TrainModelEvent() {
    *this = ::std::move(from);
  }

  inline TrainModelEvent& operator=(const TrainModelEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainModelEvent& operator=(TrainModelEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainModelEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainModelEvent* internal_default_instance() {
    return reinterpret_cast<const TrainModelEvent*>(
               &_TrainModelEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TrainModelEvent& a, TrainModelEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainModelEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainModelEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainModelEvent* New() const final {
    return CreateMaybeMessage<TrainModelEvent>(nullptr);
  }

  TrainModelEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainModelEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainModelEvent& from);
  void MergeFrom(const TrainModelEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainModelEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.usage.TrainModelEvent";
  }
  protected:
  explicit TrainModelEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
  };
  // .clarifai.usage.Model model = 1;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::usage::Model& model() const;
  ::clarifai::usage::Model* release_model();
  ::clarifai::usage::Model* mutable_model();
  void set_allocated_model(::clarifai::usage::Model* model);
  private:
  const ::clarifai::usage::Model& _internal_model() const;
  ::clarifai::usage::Model* _internal_mutable_model();
  public:
  void unsafe_arena_set_allocated_model(
      ::clarifai::usage::Model* model);
  ::clarifai::usage::Model* unsafe_arena_release_model();

  // @@protoc_insertion_point(class_scope:clarifai.usage.TrainModelEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::usage::Model* model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto;
};
// -------------------------------------------------------------------

class OtherEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.usage.OtherEvent) */ {
 public:
  inline OtherEvent() : OtherEvent(nullptr) {}
  virtual ~OtherEvent();

  OtherEvent(const OtherEvent& from);
  OtherEvent(OtherEvent&& from) noexcept
    : OtherEvent() {
    *this = ::std::move(from);
  }

  inline OtherEvent& operator=(const OtherEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherEvent& operator=(OtherEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OtherEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OtherEvent* internal_default_instance() {
    return reinterpret_cast<const OtherEvent*>(
               &_OtherEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OtherEvent& a, OtherEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OtherEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OtherEvent* New() const final {
    return CreateMaybeMessage<OtherEvent>(nullptr);
  }

  OtherEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OtherEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OtherEvent& from);
  void MergeFrom(const OtherEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.usage.OtherEvent";
  }
  protected:
  explicit OtherEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clarifai.usage.OtherEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventParam

// .clarifai.usage.RegularPredictEvent predict = 1;
inline bool EventParam::_internal_has_predict() const {
  return event_case() == kPredict;
}
inline bool EventParam::has_predict() const {
  return _internal_has_predict();
}
inline void EventParam::set_has_predict() {
  _oneof_case_[0] = kPredict;
}
inline void EventParam::clear_predict() {
  if (_internal_has_predict()) {
    if (GetArena() == nullptr) {
      delete event_.predict_;
    }
    clear_has_event();
  }
}
inline ::clarifai::usage::RegularPredictEvent* EventParam::release_predict() {
  // @@protoc_insertion_point(field_release:clarifai.usage.EventParam.predict)
  if (_internal_has_predict()) {
    clear_has_event();
      ::clarifai::usage::RegularPredictEvent* temp = event_.predict_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.predict_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clarifai::usage::RegularPredictEvent& EventParam::_internal_predict() const {
  return _internal_has_predict()
      ? *event_.predict_
      : *reinterpret_cast< ::clarifai::usage::RegularPredictEvent*>(&::clarifai::usage::_RegularPredictEvent_default_instance_);
}
inline const ::clarifai::usage::RegularPredictEvent& EventParam::predict() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.EventParam.predict)
  return _internal_predict();
}
inline ::clarifai::usage::RegularPredictEvent* EventParam::unsafe_arena_release_predict() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clarifai.usage.EventParam.predict)
  if (_internal_has_predict()) {
    clear_has_event();
    ::clarifai::usage::RegularPredictEvent* temp = event_.predict_;
    event_.predict_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EventParam::unsafe_arena_set_allocated_predict(::clarifai::usage::RegularPredictEvent* predict) {
  clear_event();
  if (predict) {
    set_has_predict();
    event_.predict_ = predict;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.usage.EventParam.predict)
}
inline ::clarifai::usage::RegularPredictEvent* EventParam::_internal_mutable_predict() {
  if (!_internal_has_predict()) {
    clear_event();
    set_has_predict();
    event_.predict_ = CreateMaybeMessage< ::clarifai::usage::RegularPredictEvent >(GetArena());
  }
  return event_.predict_;
}
inline ::clarifai::usage::RegularPredictEvent* EventParam::mutable_predict() {
  // @@protoc_insertion_point(field_mutable:clarifai.usage.EventParam.predict)
  return _internal_mutable_predict();
}

// .clarifai.usage.CustomPredictEvent custom_predict = 2;
inline bool EventParam::_internal_has_custom_predict() const {
  return event_case() == kCustomPredict;
}
inline bool EventParam::has_custom_predict() const {
  return _internal_has_custom_predict();
}
inline void EventParam::set_has_custom_predict() {
  _oneof_case_[0] = kCustomPredict;
}
inline void EventParam::clear_custom_predict() {
  if (_internal_has_custom_predict()) {
    if (GetArena() == nullptr) {
      delete event_.custom_predict_;
    }
    clear_has_event();
  }
}
inline ::clarifai::usage::CustomPredictEvent* EventParam::release_custom_predict() {
  // @@protoc_insertion_point(field_release:clarifai.usage.EventParam.custom_predict)
  if (_internal_has_custom_predict()) {
    clear_has_event();
      ::clarifai::usage::CustomPredictEvent* temp = event_.custom_predict_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.custom_predict_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clarifai::usage::CustomPredictEvent& EventParam::_internal_custom_predict() const {
  return _internal_has_custom_predict()
      ? *event_.custom_predict_
      : *reinterpret_cast< ::clarifai::usage::CustomPredictEvent*>(&::clarifai::usage::_CustomPredictEvent_default_instance_);
}
inline const ::clarifai::usage::CustomPredictEvent& EventParam::custom_predict() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.EventParam.custom_predict)
  return _internal_custom_predict();
}
inline ::clarifai::usage::CustomPredictEvent* EventParam::unsafe_arena_release_custom_predict() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clarifai.usage.EventParam.custom_predict)
  if (_internal_has_custom_predict()) {
    clear_has_event();
    ::clarifai::usage::CustomPredictEvent* temp = event_.custom_predict_;
    event_.custom_predict_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EventParam::unsafe_arena_set_allocated_custom_predict(::clarifai::usage::CustomPredictEvent* custom_predict) {
  clear_event();
  if (custom_predict) {
    set_has_custom_predict();
    event_.custom_predict_ = custom_predict;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.usage.EventParam.custom_predict)
}
inline ::clarifai::usage::CustomPredictEvent* EventParam::_internal_mutable_custom_predict() {
  if (!_internal_has_custom_predict()) {
    clear_event();
    set_has_custom_predict();
    event_.custom_predict_ = CreateMaybeMessage< ::clarifai::usage::CustomPredictEvent >(GetArena());
  }
  return event_.custom_predict_;
}
inline ::clarifai::usage::CustomPredictEvent* EventParam::mutable_custom_predict() {
  // @@protoc_insertion_point(field_mutable:clarifai.usage.EventParam.custom_predict)
  return _internal_mutable_custom_predict();
}

// .clarifai.usage.SearchEvent search = 3;
inline bool EventParam::_internal_has_search() const {
  return event_case() == kSearch;
}
inline bool EventParam::has_search() const {
  return _internal_has_search();
}
inline void EventParam::set_has_search() {
  _oneof_case_[0] = kSearch;
}
inline void EventParam::clear_search() {
  if (_internal_has_search()) {
    if (GetArena() == nullptr) {
      delete event_.search_;
    }
    clear_has_event();
  }
}
inline ::clarifai::usage::SearchEvent* EventParam::release_search() {
  // @@protoc_insertion_point(field_release:clarifai.usage.EventParam.search)
  if (_internal_has_search()) {
    clear_has_event();
      ::clarifai::usage::SearchEvent* temp = event_.search_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.search_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clarifai::usage::SearchEvent& EventParam::_internal_search() const {
  return _internal_has_search()
      ? *event_.search_
      : *reinterpret_cast< ::clarifai::usage::SearchEvent*>(&::clarifai::usage::_SearchEvent_default_instance_);
}
inline const ::clarifai::usage::SearchEvent& EventParam::search() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.EventParam.search)
  return _internal_search();
}
inline ::clarifai::usage::SearchEvent* EventParam::unsafe_arena_release_search() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clarifai.usage.EventParam.search)
  if (_internal_has_search()) {
    clear_has_event();
    ::clarifai::usage::SearchEvent* temp = event_.search_;
    event_.search_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EventParam::unsafe_arena_set_allocated_search(::clarifai::usage::SearchEvent* search) {
  clear_event();
  if (search) {
    set_has_search();
    event_.search_ = search;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.usage.EventParam.search)
}
inline ::clarifai::usage::SearchEvent* EventParam::_internal_mutable_search() {
  if (!_internal_has_search()) {
    clear_event();
    set_has_search();
    event_.search_ = CreateMaybeMessage< ::clarifai::usage::SearchEvent >(GetArena());
  }
  return event_.search_;
}
inline ::clarifai::usage::SearchEvent* EventParam::mutable_search() {
  // @@protoc_insertion_point(field_mutable:clarifai.usage.EventParam.search)
  return _internal_mutable_search();
}

// .clarifai.usage.TrainModelEvent train = 4;
inline bool EventParam::_internal_has_train() const {
  return event_case() == kTrain;
}
inline bool EventParam::has_train() const {
  return _internal_has_train();
}
inline void EventParam::set_has_train() {
  _oneof_case_[0] = kTrain;
}
inline void EventParam::clear_train() {
  if (_internal_has_train()) {
    if (GetArena() == nullptr) {
      delete event_.train_;
    }
    clear_has_event();
  }
}
inline ::clarifai::usage::TrainModelEvent* EventParam::release_train() {
  // @@protoc_insertion_point(field_release:clarifai.usage.EventParam.train)
  if (_internal_has_train()) {
    clear_has_event();
      ::clarifai::usage::TrainModelEvent* temp = event_.train_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.train_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clarifai::usage::TrainModelEvent& EventParam::_internal_train() const {
  return _internal_has_train()
      ? *event_.train_
      : *reinterpret_cast< ::clarifai::usage::TrainModelEvent*>(&::clarifai::usage::_TrainModelEvent_default_instance_);
}
inline const ::clarifai::usage::TrainModelEvent& EventParam::train() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.EventParam.train)
  return _internal_train();
}
inline ::clarifai::usage::TrainModelEvent* EventParam::unsafe_arena_release_train() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clarifai.usage.EventParam.train)
  if (_internal_has_train()) {
    clear_has_event();
    ::clarifai::usage::TrainModelEvent* temp = event_.train_;
    event_.train_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EventParam::unsafe_arena_set_allocated_train(::clarifai::usage::TrainModelEvent* train) {
  clear_event();
  if (train) {
    set_has_train();
    event_.train_ = train;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.usage.EventParam.train)
}
inline ::clarifai::usage::TrainModelEvent* EventParam::_internal_mutable_train() {
  if (!_internal_has_train()) {
    clear_event();
    set_has_train();
    event_.train_ = CreateMaybeMessage< ::clarifai::usage::TrainModelEvent >(GetArena());
  }
  return event_.train_;
}
inline ::clarifai::usage::TrainModelEvent* EventParam::mutable_train() {
  // @@protoc_insertion_point(field_mutable:clarifai.usage.EventParam.train)
  return _internal_mutable_train();
}

// .clarifai.usage.OtherEvent other = 5;
inline bool EventParam::_internal_has_other() const {
  return event_case() == kOther;
}
inline bool EventParam::has_other() const {
  return _internal_has_other();
}
inline void EventParam::set_has_other() {
  _oneof_case_[0] = kOther;
}
inline void EventParam::clear_other() {
  if (_internal_has_other()) {
    if (GetArena() == nullptr) {
      delete event_.other_;
    }
    clear_has_event();
  }
}
inline ::clarifai::usage::OtherEvent* EventParam::release_other() {
  // @@protoc_insertion_point(field_release:clarifai.usage.EventParam.other)
  if (_internal_has_other()) {
    clear_has_event();
      ::clarifai::usage::OtherEvent* temp = event_.other_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.other_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clarifai::usage::OtherEvent& EventParam::_internal_other() const {
  return _internal_has_other()
      ? *event_.other_
      : *reinterpret_cast< ::clarifai::usage::OtherEvent*>(&::clarifai::usage::_OtherEvent_default_instance_);
}
inline const ::clarifai::usage::OtherEvent& EventParam::other() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.EventParam.other)
  return _internal_other();
}
inline ::clarifai::usage::OtherEvent* EventParam::unsafe_arena_release_other() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clarifai.usage.EventParam.other)
  if (_internal_has_other()) {
    clear_has_event();
    ::clarifai::usage::OtherEvent* temp = event_.other_;
    event_.other_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EventParam::unsafe_arena_set_allocated_other(::clarifai::usage::OtherEvent* other) {
  clear_event();
  if (other) {
    set_has_other();
    event_.other_ = other;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.usage.EventParam.other)
}
inline ::clarifai::usage::OtherEvent* EventParam::_internal_mutable_other() {
  if (!_internal_has_other()) {
    clear_event();
    set_has_other();
    event_.other_ = CreateMaybeMessage< ::clarifai::usage::OtherEvent >(GetArena());
  }
  return event_.other_;
}
inline ::clarifai::usage::OtherEvent* EventParam::mutable_other() {
  // @@protoc_insertion_point(field_mutable:clarifai.usage.EventParam.other)
  return _internal_mutable_other();
}

inline bool EventParam::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void EventParam::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline EventParam::EventCase EventParam::event_case() const {
  return EventParam::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Model

// string model_id = 1;
inline void Model::clear_model_id() {
  model_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Model::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.Model.model_id)
  return _internal_model_id();
}
inline void Model::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.usage.Model.model_id)
}
inline std::string* Model::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.usage.Model.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& Model::_internal_model_id() const {
  return model_id_.Get();
}
inline void Model::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Model::set_model_id(std::string&& value) {
  
  model_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.usage.Model.model_id)
}
inline void Model::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.usage.Model.model_id)
}
inline void Model::set_model_id(const char* value,
    size_t size) {
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.usage.Model.model_id)
}
inline std::string* Model::_internal_mutable_model_id() {
  
  return model_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Model::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.usage.Model.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Model::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.Model.model_id)
}

// string model_type = 2;
inline void Model::clear_model_type() {
  model_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Model::model_type() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.Model.model_type)
  return _internal_model_type();
}
inline void Model::set_model_type(const std::string& value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:clarifai.usage.Model.model_type)
}
inline std::string* Model::mutable_model_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.usage.Model.model_type)
  return _internal_mutable_model_type();
}
inline const std::string& Model::_internal_model_type() const {
  return model_type_.Get();
}
inline void Model::_internal_set_model_type(const std::string& value) {
  
  model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Model::set_model_type(std::string&& value) {
  
  model_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.usage.Model.model_type)
}
inline void Model::set_model_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.usage.Model.model_type)
}
inline void Model::set_model_type(const char* value,
    size_t size) {
  
  model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.usage.Model.model_type)
}
inline std::string* Model::_internal_mutable_model_type() {
  
  return model_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Model::release_model_type() {
  // @@protoc_insertion_point(field_release:clarifai.usage.Model.model_type)
  return model_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Model::set_allocated_model_type(std::string* model_type) {
  if (model_type != nullptr) {
    
  } else {
    
  }
  model_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.Model.model_type)
}

// string model_owner_id = 3;
inline void Model::clear_model_owner_id() {
  model_owner_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Model::model_owner_id() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.Model.model_owner_id)
  return _internal_model_owner_id();
}
inline void Model::set_model_owner_id(const std::string& value) {
  _internal_set_model_owner_id(value);
  // @@protoc_insertion_point(field_set:clarifai.usage.Model.model_owner_id)
}
inline std::string* Model::mutable_model_owner_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.usage.Model.model_owner_id)
  return _internal_mutable_model_owner_id();
}
inline const std::string& Model::_internal_model_owner_id() const {
  return model_owner_id_.Get();
}
inline void Model::_internal_set_model_owner_id(const std::string& value) {
  
  model_owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Model::set_model_owner_id(std::string&& value) {
  
  model_owner_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.usage.Model.model_owner_id)
}
inline void Model::set_model_owner_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.usage.Model.model_owner_id)
}
inline void Model::set_model_owner_id(const char* value,
    size_t size) {
  
  model_owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.usage.Model.model_owner_id)
}
inline std::string* Model::_internal_mutable_model_owner_id() {
  
  return model_owner_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Model::release_model_owner_id() {
  // @@protoc_insertion_point(field_release:clarifai.usage.Model.model_owner_id)
  return model_owner_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Model::set_allocated_model_owner_id(std::string* model_owner_id) {
  if (model_owner_id != nullptr) {
    
  } else {
    
  }
  model_owner_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_owner_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.Model.model_owner_id)
}

// string model_version_id = 4;
inline void Model::clear_model_version_id() {
  model_version_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Model::model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.Model.model_version_id)
  return _internal_model_version_id();
}
inline void Model::set_model_version_id(const std::string& value) {
  _internal_set_model_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.usage.Model.model_version_id)
}
inline std::string* Model::mutable_model_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.usage.Model.model_version_id)
  return _internal_mutable_model_version_id();
}
inline const std::string& Model::_internal_model_version_id() const {
  return model_version_id_.Get();
}
inline void Model::_internal_set_model_version_id(const std::string& value) {
  
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Model::set_model_version_id(std::string&& value) {
  
  model_version_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.usage.Model.model_version_id)
}
inline void Model::set_model_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.usage.Model.model_version_id)
}
inline void Model::set_model_version_id(const char* value,
    size_t size) {
  
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.usage.Model.model_version_id)
}
inline std::string* Model::_internal_mutable_model_version_id() {
  
  return model_version_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Model::release_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.usage.Model.model_version_id)
  return model_version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Model::set_allocated_model_version_id(std::string* model_version_id) {
  if (model_version_id != nullptr) {
    
  } else {
    
  }
  model_version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.Model.model_version_id)
}

// -------------------------------------------------------------------

// RegularPredictEvent

// .clarifai.usage.Model model = 1;
inline bool RegularPredictEvent::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool RegularPredictEvent::has_model() const {
  return _internal_has_model();
}
inline void RegularPredictEvent::clear_model() {
  if (GetArena() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
inline const ::clarifai::usage::Model& RegularPredictEvent::_internal_model() const {
  const ::clarifai::usage::Model* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::usage::Model*>(
      &::clarifai::usage::_Model_default_instance_);
}
inline const ::clarifai::usage::Model& RegularPredictEvent::model() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.RegularPredictEvent.model)
  return _internal_model();
}
inline void RegularPredictEvent::unsafe_arena_set_allocated_model(
    ::clarifai::usage::Model* model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.usage.RegularPredictEvent.model)
}
inline ::clarifai::usage::Model* RegularPredictEvent::release_model() {
  
  ::clarifai::usage::Model* temp = model_;
  model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::usage::Model* RegularPredictEvent::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:clarifai.usage.RegularPredictEvent.model)
  
  ::clarifai::usage::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::usage::Model* RegularPredictEvent::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::usage::Model>(GetArena());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::usage::Model* RegularPredictEvent::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.usage.RegularPredictEvent.model)
  return _internal_mutable_model();
}
inline void RegularPredictEvent::set_allocated_model(::clarifai::usage::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete model_;
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model);
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.RegularPredictEvent.model)
}

// string input_media_type = 2;
inline void RegularPredictEvent::clear_input_media_type() {
  input_media_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegularPredictEvent::input_media_type() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.RegularPredictEvent.input_media_type)
  return _internal_input_media_type();
}
inline void RegularPredictEvent::set_input_media_type(const std::string& value) {
  _internal_set_input_media_type(value);
  // @@protoc_insertion_point(field_set:clarifai.usage.RegularPredictEvent.input_media_type)
}
inline std::string* RegularPredictEvent::mutable_input_media_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.usage.RegularPredictEvent.input_media_type)
  return _internal_mutable_input_media_type();
}
inline const std::string& RegularPredictEvent::_internal_input_media_type() const {
  return input_media_type_.Get();
}
inline void RegularPredictEvent::_internal_set_input_media_type(const std::string& value) {
  
  input_media_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegularPredictEvent::set_input_media_type(std::string&& value) {
  
  input_media_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.usage.RegularPredictEvent.input_media_type)
}
inline void RegularPredictEvent::set_input_media_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_media_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.usage.RegularPredictEvent.input_media_type)
}
inline void RegularPredictEvent::set_input_media_type(const char* value,
    size_t size) {
  
  input_media_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.usage.RegularPredictEvent.input_media_type)
}
inline std::string* RegularPredictEvent::_internal_mutable_input_media_type() {
  
  return input_media_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegularPredictEvent::release_input_media_type() {
  // @@protoc_insertion_point(field_release:clarifai.usage.RegularPredictEvent.input_media_type)
  return input_media_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegularPredictEvent::set_allocated_input_media_type(std::string* input_media_type) {
  if (input_media_type != nullptr) {
    
  } else {
    
  }
  input_media_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_media_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.RegularPredictEvent.input_media_type)
}

// -------------------------------------------------------------------

// CustomPredictEvent

// .clarifai.usage.Model model = 1;
inline bool CustomPredictEvent::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool CustomPredictEvent::has_model() const {
  return _internal_has_model();
}
inline void CustomPredictEvent::clear_model() {
  if (GetArena() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
inline const ::clarifai::usage::Model& CustomPredictEvent::_internal_model() const {
  const ::clarifai::usage::Model* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::usage::Model*>(
      &::clarifai::usage::_Model_default_instance_);
}
inline const ::clarifai::usage::Model& CustomPredictEvent::model() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.CustomPredictEvent.model)
  return _internal_model();
}
inline void CustomPredictEvent::unsafe_arena_set_allocated_model(
    ::clarifai::usage::Model* model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.usage.CustomPredictEvent.model)
}
inline ::clarifai::usage::Model* CustomPredictEvent::release_model() {
  
  ::clarifai::usage::Model* temp = model_;
  model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::usage::Model* CustomPredictEvent::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:clarifai.usage.CustomPredictEvent.model)
  
  ::clarifai::usage::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::usage::Model* CustomPredictEvent::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::usage::Model>(GetArena());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::usage::Model* CustomPredictEvent::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.usage.CustomPredictEvent.model)
  return _internal_mutable_model();
}
inline void CustomPredictEvent::set_allocated_model(::clarifai::usage::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete model_;
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model);
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.CustomPredictEvent.model)
}

// string input_media_type = 2;
inline void CustomPredictEvent::clear_input_media_type() {
  input_media_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CustomPredictEvent::input_media_type() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.CustomPredictEvent.input_media_type)
  return _internal_input_media_type();
}
inline void CustomPredictEvent::set_input_media_type(const std::string& value) {
  _internal_set_input_media_type(value);
  // @@protoc_insertion_point(field_set:clarifai.usage.CustomPredictEvent.input_media_type)
}
inline std::string* CustomPredictEvent::mutable_input_media_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.usage.CustomPredictEvent.input_media_type)
  return _internal_mutable_input_media_type();
}
inline const std::string& CustomPredictEvent::_internal_input_media_type() const {
  return input_media_type_.Get();
}
inline void CustomPredictEvent::_internal_set_input_media_type(const std::string& value) {
  
  input_media_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CustomPredictEvent::set_input_media_type(std::string&& value) {
  
  input_media_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.usage.CustomPredictEvent.input_media_type)
}
inline void CustomPredictEvent::set_input_media_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_media_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.usage.CustomPredictEvent.input_media_type)
}
inline void CustomPredictEvent::set_input_media_type(const char* value,
    size_t size) {
  
  input_media_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.usage.CustomPredictEvent.input_media_type)
}
inline std::string* CustomPredictEvent::_internal_mutable_input_media_type() {
  
  return input_media_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CustomPredictEvent::release_input_media_type() {
  // @@protoc_insertion_point(field_release:clarifai.usage.CustomPredictEvent.input_media_type)
  return input_media_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomPredictEvent::set_allocated_input_media_type(std::string* input_media_type) {
  if (input_media_type != nullptr) {
    
  } else {
    
  }
  input_media_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_media_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.CustomPredictEvent.input_media_type)
}

// -------------------------------------------------------------------

// SearchEvent

// string search_type = 1;
inline void SearchEvent::clear_search_type() {
  search_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchEvent::search_type() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.SearchEvent.search_type)
  return _internal_search_type();
}
inline void SearchEvent::set_search_type(const std::string& value) {
  _internal_set_search_type(value);
  // @@protoc_insertion_point(field_set:clarifai.usage.SearchEvent.search_type)
}
inline std::string* SearchEvent::mutable_search_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.usage.SearchEvent.search_type)
  return _internal_mutable_search_type();
}
inline const std::string& SearchEvent::_internal_search_type() const {
  return search_type_.Get();
}
inline void SearchEvent::_internal_set_search_type(const std::string& value) {
  
  search_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchEvent::set_search_type(std::string&& value) {
  
  search_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.usage.SearchEvent.search_type)
}
inline void SearchEvent::set_search_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  search_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.usage.SearchEvent.search_type)
}
inline void SearchEvent::set_search_type(const char* value,
    size_t size) {
  
  search_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.usage.SearchEvent.search_type)
}
inline std::string* SearchEvent::_internal_mutable_search_type() {
  
  return search_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchEvent::release_search_type() {
  // @@protoc_insertion_point(field_release:clarifai.usage.SearchEvent.search_type)
  return search_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchEvent::set_allocated_search_type(std::string* search_type) {
  if (search_type != nullptr) {
    
  } else {
    
  }
  search_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.SearchEvent.search_type)
}

// -------------------------------------------------------------------

// TrainModelEvent

// .clarifai.usage.Model model = 1;
inline bool TrainModelEvent::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool TrainModelEvent::has_model() const {
  return _internal_has_model();
}
inline void TrainModelEvent::clear_model() {
  if (GetArena() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
inline const ::clarifai::usage::Model& TrainModelEvent::_internal_model() const {
  const ::clarifai::usage::Model* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::usage::Model*>(
      &::clarifai::usage::_Model_default_instance_);
}
inline const ::clarifai::usage::Model& TrainModelEvent::model() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.TrainModelEvent.model)
  return _internal_model();
}
inline void TrainModelEvent::unsafe_arena_set_allocated_model(
    ::clarifai::usage::Model* model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.usage.TrainModelEvent.model)
}
inline ::clarifai::usage::Model* TrainModelEvent::release_model() {
  
  ::clarifai::usage::Model* temp = model_;
  model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::usage::Model* TrainModelEvent::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:clarifai.usage.TrainModelEvent.model)
  
  ::clarifai::usage::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::usage::Model* TrainModelEvent::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::usage::Model>(GetArena());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::usage::Model* TrainModelEvent::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.usage.TrainModelEvent.model)
  return _internal_mutable_model();
}
inline void TrainModelEvent::set_allocated_model(::clarifai::usage::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete model_;
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model);
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.TrainModelEvent.model)
}

// -------------------------------------------------------------------

// OtherEvent

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace usage
}  // namespace clarifai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::clarifai::usage::EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::usage::EventType>() {
  return ::clarifai::usage::EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fusage_2fevent_2eproto
