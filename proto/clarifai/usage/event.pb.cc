// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/usage/event.proto

#include "proto/clarifai/usage/event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fusage_2fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fusage_2fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fusage_2fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OtherEvent_proto_2fclarifai_2fusage_2fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fusage_2fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegularPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fusage_2fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fusage_2fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto;
namespace clarifai {
namespace usage {
class EventParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventParam> _instance;
  const ::clarifai::usage::RegularPredictEvent* predict_;
  const ::clarifai::usage::CustomPredictEvent* custom_predict_;
  const ::clarifai::usage::SearchEvent* search_;
  const ::clarifai::usage::TrainModelEvent* train_;
  const ::clarifai::usage::OtherEvent* other_;
} _EventParam_default_instance_;
class ModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Model> _instance;
} _Model_default_instance_;
class RegularPredictEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegularPredictEvent> _instance;
} _RegularPredictEvent_default_instance_;
class CustomPredictEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomPredictEvent> _instance;
} _CustomPredictEvent_default_instance_;
class SearchEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchEvent> _instance;
} _SearchEvent_default_instance_;
class TrainModelEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainModelEvent> _instance;
} _TrainModelEvent_default_instance_;
class OtherEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OtherEvent> _instance;
} _OtherEvent_default_instance_;
}  // namespace usage
}  // namespace clarifai
static void InitDefaultsscc_info_CustomPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::usage::_CustomPredictEvent_default_instance_;
    new (ptr) ::clarifai::usage::CustomPredictEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::usage::CustomPredictEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CustomPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto}, {
      &scc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto.base,}};

static void InitDefaultsscc_info_EventParam_proto_2fclarifai_2fusage_2fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::usage::_EventParam_default_instance_;
    new (ptr) ::clarifai::usage::EventParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::usage::EventParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_EventParam_proto_2fclarifai_2fusage_2fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_EventParam_proto_2fclarifai_2fusage_2fevent_2eproto}, {
      &scc_info_RegularPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
      &scc_info_CustomPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
      &scc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
      &scc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
      &scc_info_OtherEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,}};

static void InitDefaultsscc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::usage::_Model_default_instance_;
    new (ptr) ::clarifai::usage::Model();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::usage::Model::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto}, {}};

static void InitDefaultsscc_info_OtherEvent_proto_2fclarifai_2fusage_2fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::usage::_OtherEvent_default_instance_;
    new (ptr) ::clarifai::usage::OtherEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::usage::OtherEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OtherEvent_proto_2fclarifai_2fusage_2fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OtherEvent_proto_2fclarifai_2fusage_2fevent_2eproto}, {}};

static void InitDefaultsscc_info_RegularPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::usage::_RegularPredictEvent_default_instance_;
    new (ptr) ::clarifai::usage::RegularPredictEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::usage::RegularPredictEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegularPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RegularPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto}, {
      &scc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto.base,}};

static void InitDefaultsscc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::usage::_SearchEvent_default_instance_;
    new (ptr) ::clarifai::usage::SearchEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::usage::SearchEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto}, {}};

static void InitDefaultsscc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::usage::_TrainModelEvent_default_instance_;
    new (ptr) ::clarifai::usage::TrainModelEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::usage::TrainModelEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto}, {
      &scc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fusage_2fevent_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fclarifai_2fusage_2fevent_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fusage_2fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::EventParam, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::EventParam, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::clarifai::usage::EventParamDefaultTypeInternal, predict_),
  offsetof(::clarifai::usage::EventParamDefaultTypeInternal, custom_predict_),
  offsetof(::clarifai::usage::EventParamDefaultTypeInternal, search_),
  offsetof(::clarifai::usage::EventParamDefaultTypeInternal, train_),
  offsetof(::clarifai::usage::EventParamDefaultTypeInternal, other_),
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::EventParam, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::Model, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::Model, model_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::Model, model_owner_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::Model, model_version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::RegularPredictEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::RegularPredictEvent, model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::RegularPredictEvent, input_media_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::CustomPredictEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::CustomPredictEvent, model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::CustomPredictEvent, input_media_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::SearchEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::SearchEvent, search_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::TrainModelEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::TrainModelEvent, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::OtherEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clarifai::usage::EventParam)},
  { 11, -1, sizeof(::clarifai::usage::Model)},
  { 20, -1, sizeof(::clarifai::usage::RegularPredictEvent)},
  { 27, -1, sizeof(::clarifai::usage::CustomPredictEvent)},
  { 34, -1, sizeof(::clarifai::usage::SearchEvent)},
  { 40, -1, sizeof(::clarifai::usage::TrainModelEvent)},
  { 46, -1, sizeof(::clarifai::usage::OtherEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::usage::_EventParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::usage::_Model_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::usage::_RegularPredictEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::usage::_CustomPredictEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::usage::_SearchEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::usage::_TrainModelEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::usage::_OtherEvent_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fusage_2fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n proto/clarifai/usage/event.proto\022\016clar"
  "ifai.usage\"\231\002\n\nEventParam\0226\n\007predict\030\001 \001"
  "(\0132#.clarifai.usage.RegularPredictEventH"
  "\000\022<\n\016custom_predict\030\002 \001(\0132\".clarifai.usa"
  "ge.CustomPredictEventH\000\022-\n\006search\030\003 \001(\0132"
  "\033.clarifai.usage.SearchEventH\000\0220\n\005train\030"
  "\004 \001(\0132\037.clarifai.usage.TrainModelEventH\000"
  "\022+\n\005other\030\005 \001(\0132\032.clarifai.usage.OtherEv"
  "entH\000B\007\n\005event\"_\n\005Model\022\020\n\010model_id\030\001 \001("
  "\t\022\022\n\nmodel_type\030\002 \001(\t\022\026\n\016model_owner_id\030"
  "\003 \001(\t\022\030\n\020model_version_id\030\004 \001(\t\"U\n\023Regul"
  "arPredictEvent\022$\n\005model\030\001 \001(\0132\025.clarifai"
  ".usage.Model\022\030\n\020input_media_type\030\002 \001(\t\"T"
  "\n\022CustomPredictEvent\022$\n\005model\030\001 \001(\0132\025.cl"
  "arifai.usage.Model\022\030\n\020input_media_type\030\002"
  " \001(\t\"\"\n\013SearchEvent\022\023\n\013search_type\030\001 \001(\t"
  "\"7\n\017TrainModelEvent\022$\n\005model\030\001 \001(\0132\025.cla"
  "rifai.usage.Model\"\014\n\nOtherEvent*h\n\tEvent"
  "Type\022\020\n\014TYPE_NOT_SET\020\000\022\023\n\017REGULAR_PREDIC"
  "T\020\001\022\022\n\016CUSTOM_PREDICT\020\002\022\n\n\006SEARCH\020\003\022\t\n\005T"
  "RAIN\020\004\022\t\n\005OTHER\020\005B$\n\022com.clarifai.usageP"
  "\001Z\005usage\242\002\004CAIPb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto_sccs[7] = {
  &scc_info_CustomPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
  &scc_info_EventParam_proto_2fclarifai_2fusage_2fevent_2eproto.base,
  &scc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto.base,
  &scc_info_OtherEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
  &scc_info_RegularPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
  &scc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
  &scc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto = {
  false, false, descriptor_table_protodef_proto_2fclarifai_2fusage_2fevent_2eproto, "proto/clarifai/usage/event.proto", 863,
  &descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto_once, descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto_sccs, descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fusage_2fevent_2eproto, 7, file_level_enum_descriptors_proto_2fclarifai_2fusage_2fevent_2eproto, file_level_service_descriptors_proto_2fclarifai_2fusage_2fevent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fclarifai_2fusage_2fevent_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto)), true);
namespace clarifai {
namespace usage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fusage_2fevent_2eproto[0];
}
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void EventParam::InitAsDefaultInstance() {
  ::clarifai::usage::_EventParam_default_instance_.predict_ = const_cast< ::clarifai::usage::RegularPredictEvent*>(
      ::clarifai::usage::RegularPredictEvent::internal_default_instance());
  ::clarifai::usage::_EventParam_default_instance_.custom_predict_ = const_cast< ::clarifai::usage::CustomPredictEvent*>(
      ::clarifai::usage::CustomPredictEvent::internal_default_instance());
  ::clarifai::usage::_EventParam_default_instance_.search_ = const_cast< ::clarifai::usage::SearchEvent*>(
      ::clarifai::usage::SearchEvent::internal_default_instance());
  ::clarifai::usage::_EventParam_default_instance_.train_ = const_cast< ::clarifai::usage::TrainModelEvent*>(
      ::clarifai::usage::TrainModelEvent::internal_default_instance());
  ::clarifai::usage::_EventParam_default_instance_.other_ = const_cast< ::clarifai::usage::OtherEvent*>(
      ::clarifai::usage::OtherEvent::internal_default_instance());
}
class EventParam::_Internal {
 public:
  static const ::clarifai::usage::RegularPredictEvent& predict(const EventParam* msg);
  static const ::clarifai::usage::CustomPredictEvent& custom_predict(const EventParam* msg);
  static const ::clarifai::usage::SearchEvent& search(const EventParam* msg);
  static const ::clarifai::usage::TrainModelEvent& train(const EventParam* msg);
  static const ::clarifai::usage::OtherEvent& other(const EventParam* msg);
};

const ::clarifai::usage::RegularPredictEvent&
EventParam::_Internal::predict(const EventParam* msg) {
  return *msg->event_.predict_;
}
const ::clarifai::usage::CustomPredictEvent&
EventParam::_Internal::custom_predict(const EventParam* msg) {
  return *msg->event_.custom_predict_;
}
const ::clarifai::usage::SearchEvent&
EventParam::_Internal::search(const EventParam* msg) {
  return *msg->event_.search_;
}
const ::clarifai::usage::TrainModelEvent&
EventParam::_Internal::train(const EventParam* msg) {
  return *msg->event_.train_;
}
const ::clarifai::usage::OtherEvent&
EventParam::_Internal::other(const EventParam* msg) {
  return *msg->event_.other_;
}
void EventParam::set_allocated_predict(::clarifai::usage::RegularPredictEvent* predict) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (predict) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(predict);
    if (message_arena != submessage_arena) {
      predict = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predict, submessage_arena);
    }
    set_has_predict();
    event_.predict_ = predict;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.EventParam.predict)
}
void EventParam::set_allocated_custom_predict(::clarifai::usage::CustomPredictEvent* custom_predict) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (custom_predict) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(custom_predict);
    if (message_arena != submessage_arena) {
      custom_predict = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_predict, submessage_arena);
    }
    set_has_custom_predict();
    event_.custom_predict_ = custom_predict;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.EventParam.custom_predict)
}
void EventParam::set_allocated_search(::clarifai::usage::SearchEvent* search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(search);
    if (message_arena != submessage_arena) {
      search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search, submessage_arena);
    }
    set_has_search();
    event_.search_ = search;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.EventParam.search)
}
void EventParam::set_allocated_train(::clarifai::usage::TrainModelEvent* train) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (train) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(train);
    if (message_arena != submessage_arena) {
      train = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, train, submessage_arena);
    }
    set_has_train();
    event_.train_ = train;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.EventParam.train)
}
void EventParam::set_allocated_other(::clarifai::usage::OtherEvent* other) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (other) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(other);
    if (message_arena != submessage_arena) {
      other = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    set_has_other();
    event_.other_ = other;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.EventParam.other)
}
EventParam::EventParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.usage.EventParam)
}
EventParam::EventParam(const EventParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kPredict: {
      _internal_mutable_predict()->::clarifai::usage::RegularPredictEvent::MergeFrom(from._internal_predict());
      break;
    }
    case kCustomPredict: {
      _internal_mutable_custom_predict()->::clarifai::usage::CustomPredictEvent::MergeFrom(from._internal_custom_predict());
      break;
    }
    case kSearch: {
      _internal_mutable_search()->::clarifai::usage::SearchEvent::MergeFrom(from._internal_search());
      break;
    }
    case kTrain: {
      _internal_mutable_train()->::clarifai::usage::TrainModelEvent::MergeFrom(from._internal_train());
      break;
    }
    case kOther: {
      _internal_mutable_other()->::clarifai::usage::OtherEvent::MergeFrom(from._internal_other());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.usage.EventParam)
}

void EventParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventParam_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  clear_has_event();
}

EventParam::~EventParam() {
  // @@protoc_insertion_point(destructor:clarifai.usage.EventParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void EventParam::ArenaDtor(void* object) {
  EventParam* _this = reinterpret_cast< EventParam* >(object);
  (void)_this;
}
void EventParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventParam& EventParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventParam_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  return *internal_default_instance();
}


void EventParam::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.usage.EventParam)
  switch (event_case()) {
    case kPredict: {
      if (GetArena() == nullptr) {
        delete event_.predict_;
      }
      break;
    }
    case kCustomPredict: {
      if (GetArena() == nullptr) {
        delete event_.custom_predict_;
      }
      break;
    }
    case kSearch: {
      if (GetArena() == nullptr) {
        delete event_.search_;
      }
      break;
    }
    case kTrain: {
      if (GetArena() == nullptr) {
        delete event_.train_;
      }
      break;
    }
    case kOther: {
      if (GetArena() == nullptr) {
        delete event_.other_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void EventParam::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.usage.EventParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.usage.RegularPredictEvent predict = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_predict(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.usage.CustomPredictEvent custom_predict = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_predict(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.usage.SearchEvent search = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.usage.TrainModelEvent train = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_train(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.usage.OtherEvent other = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_other(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.usage.EventParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.usage.RegularPredictEvent predict = 1;
  if (_internal_has_predict()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::predict(this), target, stream);
  }

  // .clarifai.usage.CustomPredictEvent custom_predict = 2;
  if (_internal_has_custom_predict()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::custom_predict(this), target, stream);
  }

  // .clarifai.usage.SearchEvent search = 3;
  if (_internal_has_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::search(this), target, stream);
  }

  // .clarifai.usage.TrainModelEvent train = 4;
  if (_internal_has_train()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::train(this), target, stream);
  }

  // .clarifai.usage.OtherEvent other = 5;
  if (_internal_has_other()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::other(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.usage.EventParam)
  return target;
}

size_t EventParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.usage.EventParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // .clarifai.usage.RegularPredictEvent predict = 1;
    case kPredict: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.predict_);
      break;
    }
    // .clarifai.usage.CustomPredictEvent custom_predict = 2;
    case kCustomPredict: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.custom_predict_);
      break;
    }
    // .clarifai.usage.SearchEvent search = 3;
    case kSearch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.search_);
      break;
    }
    // .clarifai.usage.TrainModelEvent train = 4;
    case kTrain: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.train_);
      break;
    }
    // .clarifai.usage.OtherEvent other = 5;
    case kOther: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.other_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.usage.EventParam)
  GOOGLE_DCHECK_NE(&from, this);
  const EventParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.usage.EventParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.usage.EventParam)
    MergeFrom(*source);
  }
}

void EventParam::MergeFrom(const EventParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.usage.EventParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kPredict: {
      _internal_mutable_predict()->::clarifai::usage::RegularPredictEvent::MergeFrom(from._internal_predict());
      break;
    }
    case kCustomPredict: {
      _internal_mutable_custom_predict()->::clarifai::usage::CustomPredictEvent::MergeFrom(from._internal_custom_predict());
      break;
    }
    case kSearch: {
      _internal_mutable_search()->::clarifai::usage::SearchEvent::MergeFrom(from._internal_search());
      break;
    }
    case kTrain: {
      _internal_mutable_train()->::clarifai::usage::TrainModelEvent::MergeFrom(from._internal_train());
      break;
    }
    case kOther: {
      _internal_mutable_other()->::clarifai::usage::OtherEvent::MergeFrom(from._internal_other());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void EventParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.usage.EventParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventParam::CopyFrom(const EventParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.usage.EventParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventParam::IsInitialized() const {
  return true;
}

void EventParam::InternalSwap(EventParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Model::InitAsDefaultInstance() {
}
class Model::_Internal {
 public:
};

Model::Model(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.usage.Model)
}
Model::Model(const Model& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_id(),
      GetArena());
  }
  model_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_type().empty()) {
    model_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_type(),
      GetArena());
  }
  model_owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_owner_id().empty()) {
    model_owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_owner_id(),
      GetArena());
  }
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_version_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.usage.Model)
}

void Model::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:clarifai.usage.Model)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Model::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_owner_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Model::ArenaDtor(void* object) {
  Model* _this = reinterpret_cast< Model* >(object);
  (void)_this;
}
void Model::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Model::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Model& Model::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  return *internal_default_instance();
}


void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.usage.Model)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_owner_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_version_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Model::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.usage.Model.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.usage.Model.model_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_owner_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_model_owner_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.usage.Model.model_owner_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_version_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.usage.Model.model_version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Model::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.usage.Model)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_id = 1;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.usage.Model.model_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_id(), target);
  }

  // string model_type = 2;
  if (this->model_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type().data(), static_cast<int>(this->_internal_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.usage.Model.model_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_type(), target);
  }

  // string model_owner_id = 3;
  if (this->model_owner_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_owner_id().data(), static_cast<int>(this->_internal_model_owner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.usage.Model.model_owner_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_owner_id(), target);
  }

  // string model_version_id = 4;
  if (this->model_version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.usage.Model.model_version_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.usage.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.usage.Model)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 1;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_type = 2;
  if (this->model_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type());
  }

  // string model_owner_id = 3;
  if (this->model_owner_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_owner_id());
  }

  // string model_version_id = 4;
  if (this->model_version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Model::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.usage.Model)
  GOOGLE_DCHECK_NE(&from, this);
  const Model* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Model>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.usage.Model)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.usage.Model)
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.usage.Model)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (from.model_type().size() > 0) {
    _internal_set_model_type(from._internal_model_type());
  }
  if (from.model_owner_id().size() > 0) {
    _internal_set_model_owner_id(from._internal_model_owner_id());
  }
  if (from.model_version_id().size() > 0) {
    _internal_set_model_version_id(from._internal_model_version_id());
  }
}

void Model::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.usage.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.usage.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::InternalSwap(Model* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_type_.Swap(&other->model_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_owner_id_.Swap(&other->model_owner_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_version_id_.Swap(&other->model_version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Model::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegularPredictEvent::InitAsDefaultInstance() {
  ::clarifai::usage::_RegularPredictEvent_default_instance_._instance.get_mutable()->model_ = const_cast< ::clarifai::usage::Model*>(
      ::clarifai::usage::Model::internal_default_instance());
}
class RegularPredictEvent::_Internal {
 public:
  static const ::clarifai::usage::Model& model(const RegularPredictEvent* msg);
};

const ::clarifai::usage::Model&
RegularPredictEvent::_Internal::model(const RegularPredictEvent* msg) {
  return *msg->model_;
}
RegularPredictEvent::RegularPredictEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.usage.RegularPredictEvent)
}
RegularPredictEvent::RegularPredictEvent(const RegularPredictEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_media_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_media_type().empty()) {
    input_media_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_input_media_type(),
      GetArena());
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::usage::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.usage.RegularPredictEvent)
}

void RegularPredictEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegularPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  input_media_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_ = nullptr;
}

RegularPredictEvent::~RegularPredictEvent() {
  // @@protoc_insertion_point(destructor:clarifai.usage.RegularPredictEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegularPredictEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  input_media_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete model_;
}

void RegularPredictEvent::ArenaDtor(void* object) {
  RegularPredictEvent* _this = reinterpret_cast< RegularPredictEvent* >(object);
  (void)_this;
}
void RegularPredictEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegularPredictEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegularPredictEvent& RegularPredictEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegularPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  return *internal_default_instance();
}


void RegularPredictEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.usage.RegularPredictEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_media_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegularPredictEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.usage.Model model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_media_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_input_media_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.usage.RegularPredictEvent.input_media_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegularPredictEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.usage.RegularPredictEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.usage.Model model = 1;
  if (this->has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::model(this), target, stream);
  }

  // string input_media_type = 2;
  if (this->input_media_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_media_type().data(), static_cast<int>(this->_internal_input_media_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.usage.RegularPredictEvent.input_media_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_media_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.usage.RegularPredictEvent)
  return target;
}

size_t RegularPredictEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.usage.RegularPredictEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_media_type = 2;
  if (this->input_media_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_media_type());
  }

  // .clarifai.usage.Model model = 1;
  if (this->has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegularPredictEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.usage.RegularPredictEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const RegularPredictEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegularPredictEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.usage.RegularPredictEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.usage.RegularPredictEvent)
    MergeFrom(*source);
  }
}

void RegularPredictEvent::MergeFrom(const RegularPredictEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.usage.RegularPredictEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_media_type().size() > 0) {
    _internal_set_input_media_type(from._internal_input_media_type());
  }
  if (from.has_model()) {
    _internal_mutable_model()->::clarifai::usage::Model::MergeFrom(from._internal_model());
  }
}

void RegularPredictEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.usage.RegularPredictEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegularPredictEvent::CopyFrom(const RegularPredictEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.usage.RegularPredictEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegularPredictEvent::IsInitialized() const {
  return true;
}

void RegularPredictEvent::InternalSwap(RegularPredictEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_media_type_.Swap(&other->input_media_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(model_, other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegularPredictEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CustomPredictEvent::InitAsDefaultInstance() {
  ::clarifai::usage::_CustomPredictEvent_default_instance_._instance.get_mutable()->model_ = const_cast< ::clarifai::usage::Model*>(
      ::clarifai::usage::Model::internal_default_instance());
}
class CustomPredictEvent::_Internal {
 public:
  static const ::clarifai::usage::Model& model(const CustomPredictEvent* msg);
};

const ::clarifai::usage::Model&
CustomPredictEvent::_Internal::model(const CustomPredictEvent* msg) {
  return *msg->model_;
}
CustomPredictEvent::CustomPredictEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.usage.CustomPredictEvent)
}
CustomPredictEvent::CustomPredictEvent(const CustomPredictEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_media_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_media_type().empty()) {
    input_media_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_input_media_type(),
      GetArena());
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::usage::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.usage.CustomPredictEvent)
}

void CustomPredictEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  input_media_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_ = nullptr;
}

CustomPredictEvent::~CustomPredictEvent() {
  // @@protoc_insertion_point(destructor:clarifai.usage.CustomPredictEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomPredictEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  input_media_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete model_;
}

void CustomPredictEvent::ArenaDtor(void* object) {
  CustomPredictEvent* _this = reinterpret_cast< CustomPredictEvent* >(object);
  (void)_this;
}
void CustomPredictEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomPredictEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomPredictEvent& CustomPredictEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomPredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  return *internal_default_instance();
}


void CustomPredictEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.usage.CustomPredictEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_media_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomPredictEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.usage.Model model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_media_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_input_media_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.usage.CustomPredictEvent.input_media_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomPredictEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.usage.CustomPredictEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.usage.Model model = 1;
  if (this->has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::model(this), target, stream);
  }

  // string input_media_type = 2;
  if (this->input_media_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_media_type().data(), static_cast<int>(this->_internal_input_media_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.usage.CustomPredictEvent.input_media_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_media_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.usage.CustomPredictEvent)
  return target;
}

size_t CustomPredictEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.usage.CustomPredictEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_media_type = 2;
  if (this->input_media_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_media_type());
  }

  // .clarifai.usage.Model model = 1;
  if (this->has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomPredictEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.usage.CustomPredictEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomPredictEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomPredictEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.usage.CustomPredictEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.usage.CustomPredictEvent)
    MergeFrom(*source);
  }
}

void CustomPredictEvent::MergeFrom(const CustomPredictEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.usage.CustomPredictEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_media_type().size() > 0) {
    _internal_set_input_media_type(from._internal_input_media_type());
  }
  if (from.has_model()) {
    _internal_mutable_model()->::clarifai::usage::Model::MergeFrom(from._internal_model());
  }
}

void CustomPredictEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.usage.CustomPredictEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomPredictEvent::CopyFrom(const CustomPredictEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.usage.CustomPredictEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomPredictEvent::IsInitialized() const {
  return true;
}

void CustomPredictEvent::InternalSwap(CustomPredictEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_media_type_.Swap(&other->input_media_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(model_, other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomPredictEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchEvent::InitAsDefaultInstance() {
}
class SearchEvent::_Internal {
 public:
};

SearchEvent::SearchEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.usage.SearchEvent)
}
SearchEvent::SearchEvent(const SearchEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_search_type().empty()) {
    search_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_search_type(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.usage.SearchEvent)
}

void SearchEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  search_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SearchEvent::~SearchEvent() {
  // @@protoc_insertion_point(destructor:clarifai.usage.SearchEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  search_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchEvent::ArenaDtor(void* object) {
  SearchEvent* _this = reinterpret_cast< SearchEvent* >(object);
  (void)_this;
}
void SearchEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchEvent& SearchEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  return *internal_default_instance();
}


void SearchEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.usage.SearchEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string search_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_search_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.usage.SearchEvent.search_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.usage.SearchEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string search_type = 1;
  if (this->search_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_type().data(), static_cast<int>(this->_internal_search_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.usage.SearchEvent.search_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.usage.SearchEvent)
  return target;
}

size_t SearchEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.usage.SearchEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string search_type = 1;
  if (this->search_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.usage.SearchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.usage.SearchEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.usage.SearchEvent)
    MergeFrom(*source);
  }
}

void SearchEvent::MergeFrom(const SearchEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.usage.SearchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.search_type().size() > 0) {
    _internal_set_search_type(from._internal_search_type());
  }
}

void SearchEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.usage.SearchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchEvent::CopyFrom(const SearchEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.usage.SearchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchEvent::IsInitialized() const {
  return true;
}

void SearchEvent::InternalSwap(SearchEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  search_type_.Swap(&other->search_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainModelEvent::InitAsDefaultInstance() {
  ::clarifai::usage::_TrainModelEvent_default_instance_._instance.get_mutable()->model_ = const_cast< ::clarifai::usage::Model*>(
      ::clarifai::usage::Model::internal_default_instance());
}
class TrainModelEvent::_Internal {
 public:
  static const ::clarifai::usage::Model& model(const TrainModelEvent* msg);
};

const ::clarifai::usage::Model&
TrainModelEvent::_Internal::model(const TrainModelEvent* msg) {
  return *msg->model_;
}
TrainModelEvent::TrainModelEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.usage.TrainModelEvent)
}
TrainModelEvent::TrainModelEvent(const TrainModelEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_model()) {
    model_ = new ::clarifai::usage::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.usage.TrainModelEvent)
}

void TrainModelEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  model_ = nullptr;
}

TrainModelEvent::~TrainModelEvent() {
  // @@protoc_insertion_point(destructor:clarifai.usage.TrainModelEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainModelEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete model_;
}

void TrainModelEvent::ArenaDtor(void* object) {
  TrainModelEvent* _this = reinterpret_cast< TrainModelEvent* >(object);
  (void)_this;
}
void TrainModelEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainModelEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainModelEvent& TrainModelEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  return *internal_default_instance();
}


void TrainModelEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.usage.TrainModelEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainModelEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.usage.Model model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainModelEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.usage.TrainModelEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.usage.Model model = 1;
  if (this->has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::model(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.usage.TrainModelEvent)
  return target;
}

size_t TrainModelEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.usage.TrainModelEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.usage.Model model = 1;
  if (this->has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainModelEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.usage.TrainModelEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainModelEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainModelEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.usage.TrainModelEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.usage.TrainModelEvent)
    MergeFrom(*source);
  }
}

void TrainModelEvent::MergeFrom(const TrainModelEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.usage.TrainModelEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_model()) {
    _internal_mutable_model()->::clarifai::usage::Model::MergeFrom(from._internal_model());
  }
}

void TrainModelEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.usage.TrainModelEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainModelEvent::CopyFrom(const TrainModelEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.usage.TrainModelEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainModelEvent::IsInitialized() const {
  return true;
}

void TrainModelEvent::InternalSwap(TrainModelEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(model_, other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainModelEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OtherEvent::InitAsDefaultInstance() {
}
class OtherEvent::_Internal {
 public:
};

OtherEvent::OtherEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.usage.OtherEvent)
}
OtherEvent::OtherEvent(const OtherEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.usage.OtherEvent)
}

void OtherEvent::SharedCtor() {
}

OtherEvent::~OtherEvent() {
  // @@protoc_insertion_point(destructor:clarifai.usage.OtherEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OtherEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OtherEvent::ArenaDtor(void* object) {
  OtherEvent* _this = reinterpret_cast< OtherEvent* >(object);
  (void)_this;
}
void OtherEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OtherEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OtherEvent& OtherEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OtherEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  return *internal_default_instance();
}


void OtherEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.usage.OtherEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OtherEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OtherEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.usage.OtherEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.usage.OtherEvent)
  return target;
}

size_t OtherEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.usage.OtherEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OtherEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.usage.OtherEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const OtherEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OtherEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.usage.OtherEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.usage.OtherEvent)
    MergeFrom(*source);
  }
}

void OtherEvent::MergeFrom(const OtherEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.usage.OtherEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OtherEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.usage.OtherEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherEvent::CopyFrom(const OtherEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.usage.OtherEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherEvent::IsInitialized() const {
  return true;
}

void OtherEvent::InternalSwap(OtherEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace usage
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::usage::EventParam* Arena::CreateMaybeMessage< ::clarifai::usage::EventParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::usage::EventParam >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::usage::Model* Arena::CreateMaybeMessage< ::clarifai::usage::Model >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::usage::Model >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::usage::RegularPredictEvent* Arena::CreateMaybeMessage< ::clarifai::usage::RegularPredictEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::usage::RegularPredictEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::usage::CustomPredictEvent* Arena::CreateMaybeMessage< ::clarifai::usage::CustomPredictEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::usage::CustomPredictEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::usage::SearchEvent* Arena::CreateMaybeMessage< ::clarifai::usage::SearchEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::usage::SearchEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::usage::TrainModelEvent* Arena::CreateMaybeMessage< ::clarifai::usage::TrainModelEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::usage::TrainModelEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::usage::OtherEvent* Arena::CreateMaybeMessage< ::clarifai::usage::OtherEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::usage::OtherEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
