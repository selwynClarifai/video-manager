// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/commands/commands.proto

#include "proto/clarifai/commands/commands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace clarifai {
namespace commands {
class CommandsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Commands> _instance;
} _Commands_default_instance_;
}  // namespace commands
}  // namespace clarifai
static void InitDefaultsscc_info_Commands_proto_2fclarifai_2fcommands_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::commands::_Commands_default_instance_;
    new (ptr) ::clarifai::commands::Commands();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::commands::Commands::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Commands_proto_2fclarifai_2fcommands_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Commands_proto_2fclarifai_2fcommands_2fcommands_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fcommands_2fcommands_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fclarifai_2fcommands_2fcommands_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fcommands_2fcommands_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fclarifai_2fcommands_2fcommands_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::commands::Commands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::commands::Commands, discard_data_older_than_),
  PROTOBUF_FIELD_OFFSET(::clarifai::commands::Commands, timeout_delay_),
  PROTOBUF_FIELD_OFFSET(::clarifai::commands::Commands, upload_interval_),
  PROTOBUF_FIELD_OFFSET(::clarifai::commands::Commands, opt_out_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clarifai::commands::Commands)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::commands::_Commands_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fcommands_2fcommands_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&proto/clarifai/commands/commands.proto"
  "\022\021clarifai.commands\032\037google/protobuf/tim"
  "estamp.proto\"\210\001\n\010Commands\022;\n\027discard_dat"
  "a_older_than\030\001 \001(\0132\032.google.protobuf.Tim"
  "estamp\022\025\n\rtimeout_delay\030\002 \001(\r\022\027\n\017upload_"
  "interval\030\003 \001(\r\022\017\n\007opt_out\030\004 \001(\010B*\n\025com.c"
  "larifai.commandsP\001Z\010commands\242\002\004CAIPb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fcommands_2fcommands_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fclarifai_2fcommands_2fcommands_2eproto_sccs[1] = {
  &scc_info_Commands_proto_2fclarifai_2fcommands_2fcommands_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fcommands_2fcommands_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fcommands_2fcommands_2eproto = {
  false, false, descriptor_table_protodef_proto_2fclarifai_2fcommands_2fcommands_2eproto, "proto/clarifai/commands/commands.proto", 283,
  &descriptor_table_proto_2fclarifai_2fcommands_2fcommands_2eproto_once, descriptor_table_proto_2fclarifai_2fcommands_2fcommands_2eproto_sccs, descriptor_table_proto_2fclarifai_2fcommands_2fcommands_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fcommands_2fcommands_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fcommands_2fcommands_2eproto, 1, file_level_enum_descriptors_proto_2fclarifai_2fcommands_2fcommands_2eproto, file_level_service_descriptors_proto_2fclarifai_2fcommands_2fcommands_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fclarifai_2fcommands_2fcommands_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fclarifai_2fcommands_2fcommands_2eproto)), true);
namespace clarifai {
namespace commands {

// ===================================================================

void Commands::InitAsDefaultInstance() {
  ::clarifai::commands::_Commands_default_instance_._instance.get_mutable()->discard_data_older_than_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Commands::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& discard_data_older_than(const Commands* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Commands::_Internal::discard_data_older_than(const Commands* msg) {
  return *msg->discard_data_older_than_;
}
void Commands::clear_discard_data_older_than() {
  if (GetArena() == nullptr && discard_data_older_than_ != nullptr) {
    delete discard_data_older_than_;
  }
  discard_data_older_than_ = nullptr;
}
Commands::Commands(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clarifai.commands.Commands)
}
Commands::Commands(const Commands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_discard_data_older_than()) {
    discard_data_older_than_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.discard_data_older_than_);
  } else {
    discard_data_older_than_ = nullptr;
  }
  ::memcpy(&timeout_delay_, &from.timeout_delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&opt_out_) -
    reinterpret_cast<char*>(&timeout_delay_)) + sizeof(opt_out_));
  // @@protoc_insertion_point(copy_constructor:clarifai.commands.Commands)
}

void Commands::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Commands_proto_2fclarifai_2fcommands_2fcommands_2eproto.base);
  ::memset(&discard_data_older_than_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opt_out_) -
      reinterpret_cast<char*>(&discard_data_older_than_)) + sizeof(opt_out_));
}

Commands::~Commands() {
  // @@protoc_insertion_point(destructor:clarifai.commands.Commands)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Commands::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete discard_data_older_than_;
}

void Commands::ArenaDtor(void* object) {
  Commands* _this = reinterpret_cast< Commands* >(object);
  (void)_this;
}
void Commands::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Commands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Commands& Commands::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Commands_proto_2fclarifai_2fcommands_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.commands.Commands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && discard_data_older_than_ != nullptr) {
    delete discard_data_older_than_;
  }
  discard_data_older_than_ = nullptr;
  ::memset(&timeout_delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opt_out_) -
      reinterpret_cast<char*>(&timeout_delay_)) + sizeof(opt_out_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Commands::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp discard_data_older_than = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_discard_data_older_than(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 timeout_delay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timeout_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 upload_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          upload_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool opt_out = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          opt_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Commands::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.commands.Commands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp discard_data_older_than = 1;
  if (this->has_discard_data_older_than()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::discard_data_older_than(this), target, stream);
  }

  // uint32 timeout_delay = 2;
  if (this->timeout_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timeout_delay(), target);
  }

  // uint32 upload_interval = 3;
  if (this->upload_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_upload_interval(), target);
  }

  // bool opt_out = 4;
  if (this->opt_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_opt_out(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.commands.Commands)
  return target;
}

size_t Commands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.commands.Commands)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp discard_data_older_than = 1;
  if (this->has_discard_data_older_than()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *discard_data_older_than_);
  }

  // uint32 timeout_delay = 2;
  if (this->timeout_delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout_delay());
  }

  // uint32 upload_interval = 3;
  if (this->upload_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_upload_interval());
  }

  // bool opt_out = 4;
  if (this->opt_out() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Commands::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.commands.Commands)
  GOOGLE_DCHECK_NE(&from, this);
  const Commands* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Commands>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.commands.Commands)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.commands.Commands)
    MergeFrom(*source);
  }
}

void Commands::MergeFrom(const Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.commands.Commands)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_discard_data_older_than()) {
    _internal_mutable_discard_data_older_than()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_discard_data_older_than());
  }
  if (from.timeout_delay() != 0) {
    _internal_set_timeout_delay(from._internal_timeout_delay());
  }
  if (from.upload_interval() != 0) {
    _internal_set_upload_interval(from._internal_upload_interval());
  }
  if (from.opt_out() != 0) {
    _internal_set_opt_out(from._internal_opt_out());
  }
}

void Commands::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.commands.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Commands::CopyFrom(const Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.commands.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commands::IsInitialized() const {
  return true;
}

void Commands::InternalSwap(Commands* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Commands, opt_out_)
      + sizeof(Commands::opt_out_)
      - PROTOBUF_FIELD_OFFSET(Commands, discard_data_older_than_)>(
          reinterpret_cast<char*>(&discard_data_older_than_),
          reinterpret_cast<char*>(&other->discard_data_older_than_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Commands::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commands
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::commands::Commands* Arena::CreateMaybeMessage< ::clarifai::commands::Commands >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::commands::Commands >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
