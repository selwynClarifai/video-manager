// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/commands/commands.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fcommands_2fcommands_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fcommands_2fcommands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fcommands_2fcommands_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fclarifai_2fcommands_2fcommands_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fcommands_2fcommands_2eproto;
namespace clarifai {
namespace commands {
class Commands;
class CommandsDefaultTypeInternal;
extern CommandsDefaultTypeInternal _Commands_default_instance_;
}  // namespace commands
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> ::clarifai::commands::Commands* Arena::CreateMaybeMessage<::clarifai::commands::Commands>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clarifai {
namespace commands {

// ===================================================================

class Commands PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.commands.Commands) */ {
 public:
  inline Commands() : Commands(nullptr) {}
  virtual ~Commands();

  Commands(const Commands& from);
  Commands(Commands&& from) noexcept
    : Commands() {
    *this = ::std::move(from);
  }

  inline Commands& operator=(const Commands& from) {
    CopyFrom(from);
    return *this;
  }
  inline Commands& operator=(Commands&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Commands& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Commands* internal_default_instance() {
    return reinterpret_cast<const Commands*>(
               &_Commands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Commands& a, Commands& b) {
    a.Swap(&b);
  }
  inline void Swap(Commands* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Commands* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Commands* New() const final {
    return CreateMaybeMessage<Commands>(nullptr);
  }

  Commands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Commands>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Commands& from);
  void MergeFrom(const Commands& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Commands* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.commands.Commands";
  }
  protected:
  explicit Commands(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fcommands_2fcommands_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fcommands_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscardDataOlderThanFieldNumber = 1,
    kTimeoutDelayFieldNumber = 2,
    kUploadIntervalFieldNumber = 3,
    kOptOutFieldNumber = 4,
  };
  // .google.protobuf.Timestamp discard_data_older_than = 1;
  bool has_discard_data_older_than() const;
  private:
  bool _internal_has_discard_data_older_than() const;
  public:
  void clear_discard_data_older_than();
  const PROTOBUF_NAMESPACE_ID::Timestamp& discard_data_older_than() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_discard_data_older_than();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_discard_data_older_than();
  void set_allocated_discard_data_older_than(PROTOBUF_NAMESPACE_ID::Timestamp* discard_data_older_than);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_discard_data_older_than() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_discard_data_older_than();
  public:
  void unsafe_arena_set_allocated_discard_data_older_than(
      PROTOBUF_NAMESPACE_ID::Timestamp* discard_data_older_than);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_discard_data_older_than();

  // uint32 timeout_delay = 2;
  void clear_timeout_delay();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_delay() const;
  void set_timeout_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout_delay() const;
  void _internal_set_timeout_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 upload_interval = 3;
  void clear_upload_interval();
  ::PROTOBUF_NAMESPACE_ID::uint32 upload_interval() const;
  void set_upload_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_upload_interval() const;
  void _internal_set_upload_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool opt_out = 4;
  void clear_opt_out();
  bool opt_out() const;
  void set_opt_out(bool value);
  private:
  bool _internal_opt_out() const;
  void _internal_set_opt_out(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.commands.Commands)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* discard_data_older_than_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_delay_;
  ::PROTOBUF_NAMESPACE_ID::uint32 upload_interval_;
  bool opt_out_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fcommands_2fcommands_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Commands

// .google.protobuf.Timestamp discard_data_older_than = 1;
inline bool Commands::_internal_has_discard_data_older_than() const {
  return this != internal_default_instance() && discard_data_older_than_ != nullptr;
}
inline bool Commands::has_discard_data_older_than() const {
  return _internal_has_discard_data_older_than();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Commands::_internal_discard_data_older_than() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = discard_data_older_than_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Commands::discard_data_older_than() const {
  // @@protoc_insertion_point(field_get:clarifai.commands.Commands.discard_data_older_than)
  return _internal_discard_data_older_than();
}
inline void Commands::unsafe_arena_set_allocated_discard_data_older_than(
    PROTOBUF_NAMESPACE_ID::Timestamp* discard_data_older_than) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(discard_data_older_than_);
  }
  discard_data_older_than_ = discard_data_older_than;
  if (discard_data_older_than) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.commands.Commands.discard_data_older_than)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Commands::release_discard_data_older_than() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = discard_data_older_than_;
  discard_data_older_than_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Commands::unsafe_arena_release_discard_data_older_than() {
  // @@protoc_insertion_point(field_release:clarifai.commands.Commands.discard_data_older_than)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = discard_data_older_than_;
  discard_data_older_than_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Commands::_internal_mutable_discard_data_older_than() {
  
  if (discard_data_older_than_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    discard_data_older_than_ = p;
  }
  return discard_data_older_than_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Commands::mutable_discard_data_older_than() {
  // @@protoc_insertion_point(field_mutable:clarifai.commands.Commands.discard_data_older_than)
  return _internal_mutable_discard_data_older_than();
}
inline void Commands::set_allocated_discard_data_older_than(PROTOBUF_NAMESPACE_ID::Timestamp* discard_data_older_than) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(discard_data_older_than_);
  }
  if (discard_data_older_than) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(discard_data_older_than)->GetArena();
    if (message_arena != submessage_arena) {
      discard_data_older_than = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discard_data_older_than, submessage_arena);
    }
    
  } else {
    
  }
  discard_data_older_than_ = discard_data_older_than;
  // @@protoc_insertion_point(field_set_allocated:clarifai.commands.Commands.discard_data_older_than)
}

// uint32 timeout_delay = 2;
inline void Commands::clear_timeout_delay() {
  timeout_delay_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Commands::_internal_timeout_delay() const {
  return timeout_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Commands::timeout_delay() const {
  // @@protoc_insertion_point(field_get:clarifai.commands.Commands.timeout_delay)
  return _internal_timeout_delay();
}
inline void Commands::_internal_set_timeout_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timeout_delay_ = value;
}
inline void Commands::set_timeout_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout_delay(value);
  // @@protoc_insertion_point(field_set:clarifai.commands.Commands.timeout_delay)
}

// uint32 upload_interval = 3;
inline void Commands::clear_upload_interval() {
  upload_interval_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Commands::_internal_upload_interval() const {
  return upload_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Commands::upload_interval() const {
  // @@protoc_insertion_point(field_get:clarifai.commands.Commands.upload_interval)
  return _internal_upload_interval();
}
inline void Commands::_internal_set_upload_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  upload_interval_ = value;
}
inline void Commands::set_upload_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_upload_interval(value);
  // @@protoc_insertion_point(field_set:clarifai.commands.Commands.upload_interval)
}

// bool opt_out = 4;
inline void Commands::clear_opt_out() {
  opt_out_ = false;
}
inline bool Commands::_internal_opt_out() const {
  return opt_out_;
}
inline bool Commands::opt_out() const {
  // @@protoc_insertion_point(field_get:clarifai.commands.Commands.opt_out)
  return _internal_opt_out();
}
inline void Commands::_internal_set_opt_out(bool value) {
  
  opt_out_ = value;
}
inline void Commands::set_opt_out(bool value) {
  _internal_set_opt_out(value);
  // @@protoc_insertion_point(field_set:clarifai.commands.Commands.opt_out)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace commands
}  // namespace clarifai

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fcommands_2fcommands_2eproto
