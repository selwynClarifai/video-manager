// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/bulk_data_service/resources.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/clarifai/api/resources.pb.h"
#include "proto/clarifai/api/status/status_code.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto;
namespace clarifai {
namespace bulk_data_service {
class DataDump;
class DataDumpDefaultTypeInternal;
extern DataDumpDefaultTypeInternal _DataDump_default_instance_;
class PostDataDumpsRequest;
class PostDataDumpsRequestDefaultTypeInternal;
extern PostDataDumpsRequestDefaultTypeInternal _PostDataDumpsRequest_default_instance_;
}  // namespace bulk_data_service
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> ::clarifai::bulk_data_service::DataDump* Arena::CreateMaybeMessage<::clarifai::bulk_data_service::DataDump>(Arena*);
template<> ::clarifai::bulk_data_service::PostDataDumpsRequest* Arena::CreateMaybeMessage<::clarifai::bulk_data_service::PostDataDumpsRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clarifai {
namespace bulk_data_service {

// ===================================================================

class PostDataDumpsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.bulk_data_service.PostDataDumpsRequest) */ {
 public:
  inline PostDataDumpsRequest() : PostDataDumpsRequest(nullptr) {}
  virtual ~PostDataDumpsRequest();

  PostDataDumpsRequest(const PostDataDumpsRequest& from);
  PostDataDumpsRequest(PostDataDumpsRequest&& from) noexcept
    : PostDataDumpsRequest() {
    *this = ::std::move(from);
  }

  inline PostDataDumpsRequest& operator=(const PostDataDumpsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostDataDumpsRequest& operator=(PostDataDumpsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostDataDumpsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostDataDumpsRequest* internal_default_instance() {
    return reinterpret_cast<const PostDataDumpsRequest*>(
               &_PostDataDumpsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PostDataDumpsRequest& a, PostDataDumpsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostDataDumpsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostDataDumpsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostDataDumpsRequest* New() const final {
    return CreateMaybeMessage<PostDataDumpsRequest>(nullptr);
  }

  PostDataDumpsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostDataDumpsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostDataDumpsRequest& from);
  void MergeFrom(const PostDataDumpsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostDataDumpsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.bulk_data_service.PostDataDumpsRequest";
  }
  protected:
  explicit PostDataDumpsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kSearchFieldNumber = 2,
    kIncludeEmbeddingsFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.Search search = 2;
  bool has_search() const;
  private:
  bool _internal_has_search() const;
  public:
  void clear_search();
  const ::clarifai::api::Search& search() const;
  ::clarifai::api::Search* release_search();
  ::clarifai::api::Search* mutable_search();
  void set_allocated_search(::clarifai::api::Search* search);
  private:
  const ::clarifai::api::Search& _internal_search() const;
  ::clarifai::api::Search* _internal_mutable_search();
  public:
  void unsafe_arena_set_allocated_search(
      ::clarifai::api::Search* search);
  ::clarifai::api::Search* unsafe_arena_release_search();

  // bool include_embeddings = 3;
  void clear_include_embeddings();
  bool include_embeddings() const;
  void set_include_embeddings(bool value);
  private:
  bool _internal_include_embeddings() const;
  void _internal_set_include_embeddings(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.bulk_data_service.PostDataDumpsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Search* search_;
  bool include_embeddings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto;
};
// -------------------------------------------------------------------

class DataDump PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.bulk_data_service.DataDump) */ {
 public:
  inline DataDump() : DataDump(nullptr) {}
  virtual ~DataDump();

  DataDump(const DataDump& from);
  DataDump(DataDump&& from) noexcept
    : DataDump() {
    *this = ::std::move(from);
  }

  inline DataDump& operator=(const DataDump& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataDump& operator=(DataDump&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataDump& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataDump* internal_default_instance() {
    return reinterpret_cast<const DataDump*>(
               &_DataDump_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataDump& a, DataDump& b) {
    a.Swap(&b);
  }
  inline void Swap(DataDump* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataDump* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataDump* New() const final {
    return CreateMaybeMessage<DataDump>(nullptr);
  }

  DataDump* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataDump>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataDump& from);
  void MergeFrom(const DataDump& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataDump* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.bulk_data_service.DataDump";
  }
  protected:
  explicit DataDump(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kLocationFieldNumber = 4,
    kCreatedByFieldNumber = 6,
    kRequestFieldNumber = 3,
    kCreatedAtFieldNumber = 7,
    kModifiedAtFieldNumber = 8,
    kStatusFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string app_id = 2;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string location = 4;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string created_by = 6;
  void clear_created_by();
  const std::string& created_by() const;
  void set_created_by(const std::string& value);
  void set_created_by(std::string&& value);
  void set_created_by(const char* value);
  void set_created_by(const char* value, size_t size);
  std::string* mutable_created_by();
  std::string* release_created_by();
  void set_allocated_created_by(std::string* created_by);
  private:
  const std::string& _internal_created_by() const;
  void _internal_set_created_by(const std::string& value);
  std::string* _internal_mutable_created_by();
  public:

  // .clarifai.bulk_data_service.PostDataDumpsRequest request = 3;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::clarifai::bulk_data_service::PostDataDumpsRequest& request() const;
  ::clarifai::bulk_data_service::PostDataDumpsRequest* release_request();
  ::clarifai::bulk_data_service::PostDataDumpsRequest* mutable_request();
  void set_allocated_request(::clarifai::bulk_data_service::PostDataDumpsRequest* request);
  private:
  const ::clarifai::bulk_data_service::PostDataDumpsRequest& _internal_request() const;
  ::clarifai::bulk_data_service::PostDataDumpsRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::clarifai::bulk_data_service::PostDataDumpsRequest* request);
  ::clarifai::bulk_data_service::PostDataDumpsRequest* unsafe_arena_release_request();

  // .google.protobuf.Timestamp created_at = 7;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp modified_at = 8;
  bool has_modified_at() const;
  private:
  bool _internal_has_modified_at() const;
  public:
  void clear_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified_at();
  void set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified_at();
  public:
  void unsafe_arena_set_allocated_modified_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_modified_at();

  // .clarifai.api.status.StatusCode status = 5;
  void clear_status();
  ::clarifai::api::status::StatusCode status() const;
  void set_status(::clarifai::api::status::StatusCode value);
  private:
  ::clarifai::api::status::StatusCode _internal_status() const;
  void _internal_set_status(::clarifai::api::status::StatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.bulk_data_service.DataDump)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_by_;
  ::clarifai::bulk_data_service::PostDataDumpsRequest* request_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_at_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PostDataDumpsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostDataDumpsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostDataDumpsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostDataDumpsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostDataDumpsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.PostDataDumpsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostDataDumpsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.bulk_data_service.PostDataDumpsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostDataDumpsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostDataDumpsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.PostDataDumpsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostDataDumpsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArena());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostDataDumpsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.PostDataDumpsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostDataDumpsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id)->GetArena();
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.PostDataDumpsRequest.user_app_id)
}

// .clarifai.api.Search search = 2;
inline bool PostDataDumpsRequest::_internal_has_search() const {
  return this != internal_default_instance() && search_ != nullptr;
}
inline bool PostDataDumpsRequest::has_search() const {
  return _internal_has_search();
}
inline const ::clarifai::api::Search& PostDataDumpsRequest::_internal_search() const {
  const ::clarifai::api::Search* p = search_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Search*>(
      &::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& PostDataDumpsRequest::search() const {
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.PostDataDumpsRequest.search)
  return _internal_search();
}
inline void PostDataDumpsRequest::unsafe_arena_set_allocated_search(
    ::clarifai::api::Search* search) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_);
  }
  search_ = search;
  if (search) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.bulk_data_service.PostDataDumpsRequest.search)
}
inline ::clarifai::api::Search* PostDataDumpsRequest::release_search() {
  
  ::clarifai::api::Search* temp = search_;
  search_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::api::Search* PostDataDumpsRequest::unsafe_arena_release_search() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.PostDataDumpsRequest.search)
  
  ::clarifai::api::Search* temp = search_;
  search_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* PostDataDumpsRequest::_internal_mutable_search() {
  
  if (search_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArena());
    search_ = p;
  }
  return search_;
}
inline ::clarifai::api::Search* PostDataDumpsRequest::mutable_search() {
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.PostDataDumpsRequest.search)
  return _internal_mutable_search();
}
inline void PostDataDumpsRequest::set_allocated_search(::clarifai::api::Search* search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_);
  }
  if (search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(search)->GetArena();
    if (message_arena != submessage_arena) {
      search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search, submessage_arena);
    }
    
  } else {
    
  }
  search_ = search;
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.PostDataDumpsRequest.search)
}

// bool include_embeddings = 3;
inline void PostDataDumpsRequest::clear_include_embeddings() {
  include_embeddings_ = false;
}
inline bool PostDataDumpsRequest::_internal_include_embeddings() const {
  return include_embeddings_;
}
inline bool PostDataDumpsRequest::include_embeddings() const {
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.PostDataDumpsRequest.include_embeddings)
  return _internal_include_embeddings();
}
inline void PostDataDumpsRequest::_internal_set_include_embeddings(bool value) {
  
  include_embeddings_ = value;
}
inline void PostDataDumpsRequest::set_include_embeddings(bool value) {
  _internal_set_include_embeddings(value);
  // @@protoc_insertion_point(field_set:clarifai.bulk_data_service.PostDataDumpsRequest.include_embeddings)
}

// -------------------------------------------------------------------

// DataDump

// string id = 1;
inline void DataDump::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataDump::id() const {
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.DataDump.id)
  return _internal_id();
}
inline void DataDump::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.bulk_data_service.DataDump.id)
}
inline std::string* DataDump::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.DataDump.id)
  return _internal_mutable_id();
}
inline const std::string& DataDump::_internal_id() const {
  return id_.Get();
}
inline void DataDump::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataDump::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.bulk_data_service.DataDump.id)
}
inline void DataDump::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.bulk_data_service.DataDump.id)
}
inline void DataDump::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.bulk_data_service.DataDump.id)
}
inline std::string* DataDump::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataDump::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.DataDump.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataDump::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.DataDump.id)
}

// string app_id = 2;
inline void DataDump::clear_app_id() {
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataDump::app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.DataDump.app_id)
  return _internal_app_id();
}
inline void DataDump::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.bulk_data_service.DataDump.app_id)
}
inline std::string* DataDump::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.DataDump.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& DataDump::_internal_app_id() const {
  return app_id_.Get();
}
inline void DataDump::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataDump::set_app_id(std::string&& value) {
  
  app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.bulk_data_service.DataDump.app_id)
}
inline void DataDump::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.bulk_data_service.DataDump.app_id)
}
inline void DataDump::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.bulk_data_service.DataDump.app_id)
}
inline std::string* DataDump::_internal_mutable_app_id() {
  
  return app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataDump::release_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.DataDump.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataDump::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.DataDump.app_id)
}

// .clarifai.bulk_data_service.PostDataDumpsRequest request = 3;
inline bool DataDump::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool DataDump::has_request() const {
  return _internal_has_request();
}
inline void DataDump::clear_request() {
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::clarifai::bulk_data_service::PostDataDumpsRequest& DataDump::_internal_request() const {
  const ::clarifai::bulk_data_service::PostDataDumpsRequest* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::bulk_data_service::PostDataDumpsRequest*>(
      &::clarifai::bulk_data_service::_PostDataDumpsRequest_default_instance_);
}
inline const ::clarifai::bulk_data_service::PostDataDumpsRequest& DataDump::request() const {
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.DataDump.request)
  return _internal_request();
}
inline void DataDump::unsafe_arena_set_allocated_request(
    ::clarifai::bulk_data_service::PostDataDumpsRequest* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.bulk_data_service.DataDump.request)
}
inline ::clarifai::bulk_data_service::PostDataDumpsRequest* DataDump::release_request() {
  
  ::clarifai::bulk_data_service::PostDataDumpsRequest* temp = request_;
  request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clarifai::bulk_data_service::PostDataDumpsRequest* DataDump::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.DataDump.request)
  
  ::clarifai::bulk_data_service::PostDataDumpsRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::clarifai::bulk_data_service::PostDataDumpsRequest* DataDump::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::bulk_data_service::PostDataDumpsRequest>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::clarifai::bulk_data_service::PostDataDumpsRequest* DataDump::mutable_request() {
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.DataDump.request)
  return _internal_mutable_request();
}
inline void DataDump::set_allocated_request(::clarifai::bulk_data_service::PostDataDumpsRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.DataDump.request)
}

// string location = 4;
inline void DataDump::clear_location() {
  location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataDump::location() const {
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.DataDump.location)
  return _internal_location();
}
inline void DataDump::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:clarifai.bulk_data_service.DataDump.location)
}
inline std::string* DataDump::mutable_location() {
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.DataDump.location)
  return _internal_mutable_location();
}
inline const std::string& DataDump::_internal_location() const {
  return location_.Get();
}
inline void DataDump::_internal_set_location(const std::string& value) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataDump::set_location(std::string&& value) {
  
  location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.bulk_data_service.DataDump.location)
}
inline void DataDump::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.bulk_data_service.DataDump.location)
}
inline void DataDump::set_location(const char* value,
    size_t size) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.bulk_data_service.DataDump.location)
}
inline std::string* DataDump::_internal_mutable_location() {
  
  return location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataDump::release_location() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.DataDump.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataDump::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.DataDump.location)
}

// .clarifai.api.status.StatusCode status = 5;
inline void DataDump::clear_status() {
  status_ = 0;
}
inline ::clarifai::api::status::StatusCode DataDump::_internal_status() const {
  return static_cast< ::clarifai::api::status::StatusCode >(status_);
}
inline ::clarifai::api::status::StatusCode DataDump::status() const {
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.DataDump.status)
  return _internal_status();
}
inline void DataDump::_internal_set_status(::clarifai::api::status::StatusCode value) {
  
  status_ = value;
}
inline void DataDump::set_status(::clarifai::api::status::StatusCode value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:clarifai.bulk_data_service.DataDump.status)
}

// string created_by = 6;
inline void DataDump::clear_created_by() {
  created_by_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataDump::created_by() const {
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.DataDump.created_by)
  return _internal_created_by();
}
inline void DataDump::set_created_by(const std::string& value) {
  _internal_set_created_by(value);
  // @@protoc_insertion_point(field_set:clarifai.bulk_data_service.DataDump.created_by)
}
inline std::string* DataDump::mutable_created_by() {
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.DataDump.created_by)
  return _internal_mutable_created_by();
}
inline const std::string& DataDump::_internal_created_by() const {
  return created_by_.Get();
}
inline void DataDump::_internal_set_created_by(const std::string& value) {
  
  created_by_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataDump::set_created_by(std::string&& value) {
  
  created_by_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clarifai.bulk_data_service.DataDump.created_by)
}
inline void DataDump::set_created_by(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  created_by_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clarifai.bulk_data_service.DataDump.created_by)
}
inline void DataDump::set_created_by(const char* value,
    size_t size) {
  
  created_by_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clarifai.bulk_data_service.DataDump.created_by)
}
inline std::string* DataDump::_internal_mutable_created_by() {
  
  return created_by_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataDump::release_created_by() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.DataDump.created_by)
  return created_by_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataDump::set_allocated_created_by(std::string* created_by) {
  if (created_by != nullptr) {
    
  } else {
    
  }
  created_by_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_by,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.DataDump.created_by)
}

// .google.protobuf.Timestamp created_at = 7;
inline bool DataDump::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool DataDump::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DataDump::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DataDump::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.DataDump.created_at)
  return _internal_created_at();
}
inline void DataDump::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.bulk_data_service.DataDump.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DataDump::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DataDump::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.DataDump.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DataDump::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DataDump::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.DataDump.created_at)
  return _internal_mutable_created_at();
}
inline void DataDump::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.DataDump.created_at)
}

// .google.protobuf.Timestamp modified_at = 8;
inline bool DataDump::_internal_has_modified_at() const {
  return this != internal_default_instance() && modified_at_ != nullptr;
}
inline bool DataDump::has_modified_at() const {
  return _internal_has_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DataDump::_internal_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DataDump::modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.DataDump.modified_at)
  return _internal_modified_at();
}
inline void DataDump::unsafe_arena_set_allocated_modified_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  modified_at_ = modified_at;
  if (modified_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.bulk_data_service.DataDump.modified_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DataDump::release_modified_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DataDump::unsafe_arena_release_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.DataDump.modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DataDump::_internal_mutable_modified_at() {
  
  if (modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    modified_at_ = p;
  }
  return modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DataDump::mutable_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.DataDump.modified_at)
  return _internal_mutable_modified_at();
}
inline void DataDump::set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  if (modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_at, submessage_arena);
    }
    
  } else {
    
  }
  modified_at_ = modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.DataDump.modified_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bulk_data_service
}  // namespace clarifai

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto
