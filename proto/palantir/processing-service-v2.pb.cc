// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/palantir/processing-service-v2.proto

#include "proto/palantir/processing-service-v2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bgr888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Classification_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DigitalGlobeMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Frame_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeoBoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeoBoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeoRegistration_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Inference_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Inferences_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Lattice_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Lattice_Point_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Nitf21Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PixelVelocityVector_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PngImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProviderMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RequestHeader_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rgb888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TiffImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UasMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Velocity_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
namespace aip {
namespace processor {
namespace v2 {
class ProcessorV2ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessorV2Config> _instance;
} _ProcessorV2Config_default_instance_;
class RequestHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestHeader> _instance;
} _RequestHeader_default_instance_;
class IdentifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Identifier> _instance;
} _Identifier_default_instance_;
class TimestampDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Timestamp> _instance;
} _Timestamp_default_instance_;
class GeoRegistrationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoRegistrationRequest> _instance;
} _GeoRegistrationRequest_default_instance_;
class GeoRegistrationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoRegistrationResponse> _instance;
} _GeoRegistrationResponse_default_instance_;
class InferenceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InferenceRequest> _instance;
} _InferenceRequest_default_instance_;
class InferenceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InferenceResponse> _instance;
} _InferenceResponse_default_instance_;
class TrackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackRequest> _instance;
  const ::aip::processor::v2::Inferences* inferences_;
  const ::aip::processor::v2::GeoRegistration* geo_registration_;
} _TrackRequest_default_instance_;
class GeoRegistrationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoRegistration> _instance;
} _GeoRegistration_default_instance_;
class InferencesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Inferences> _instance;
} _Inferences_default_instance_;
class InferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Inference> _instance;
  const ::aip::processor::v2::BoundingBox* box_;
  const ::aip::processor::v2::BoundingPolygon* polygon_;
  const ::aip::processor::v2::GeoBoundingBox* geo_box_;
  const ::aip::processor::v2::GeoBoundingPolygon* geo_polygon_;
} _Inference_default_instance_;
class GeoCoordinateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoCoordinate> _instance;
} _GeoCoordinate_default_instance_;
class BoundingBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundingBox> _instance;
} _BoundingBox_default_instance_;
class GeoBoundingBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoBoundingBox> _instance;
} _GeoBoundingBox_default_instance_;
class BoundingPolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundingPolygon> _instance;
} _BoundingPolygon_default_instance_;
class GeoBoundingPolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoBoundingPolygon> _instance;
} _GeoBoundingPolygon_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Polygon> _instance;
} _Polygon_default_instance_;
class GeoPolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoPolygon> _instance;
} _GeoPolygon_default_instance_;
class UnitCoordinateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnitCoordinate> _instance;
} _UnitCoordinate_default_instance_;
class ClassificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Classification> _instance;
} _Classification_default_instance_;
class Lattice_PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lattice_Point> _instance;
} _Lattice_Point_default_instance_;
class LatticeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lattice> _instance;
} _Lattice_default_instance_;
class VelocityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Velocity> _instance;
  const ::aip::processor::v2::PixelVelocityVector* pixel_;
} _Velocity_default_instance_;
class PixelVelocityVectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PixelVelocityVector> _instance;
} _PixelVelocityVector_default_instance_;
class FrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Frame> _instance;
} _Frame_default_instance_;
class ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Image> _instance;
  const ::aip::processor::v2::Rgb888Image* rgb_image_;
  const ::aip::processor::v2::PngImage* png_image_;
  const ::aip::processor::v2::TiffImage* tiff_image_;
  const ::aip::processor::v2::Bgr888Image* bgr_image_;
  const ::aip::processor::v2::Nitf21Image* nitf21_image_;
} _Image_default_instance_;
class Rgb888ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rgb888Image> _instance;
} _Rgb888Image_default_instance_;
class Bgr888ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bgr888Image> _instance;
} _Bgr888Image_default_instance_;
class PngImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PngImage> _instance;
} _PngImage_default_instance_;
class TiffImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TiffImage> _instance;
} _TiffImage_default_instance_;
class Nitf21ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Nitf21Image> _instance;
} _Nitf21Image_default_instance_;
class DigitalGlobeMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitalGlobeMetadata> _instance;
} _DigitalGlobeMetadata_default_instance_;
class ProviderMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProviderMetadata> _instance;
  const ::aip::processor::v2::DigitalGlobeMetadata* digital_globe_;
} _ProviderMetadata_default_instance_;
class UasMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UasMetadata> _instance;
} _UasMetadata_default_instance_;
}  // namespace v2
}  // namespace processor
}  // namespace aip
static void InitDefaultsscc_info_Bgr888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_Bgr888Image_default_instance_;
    new (ptr) ::aip::processor::v2::Bgr888Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::Bgr888Image::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bgr888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Bgr888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {}};

static void InitDefaultsscc_info_BoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_BoundingBox_default_instance_;
    new (ptr) ::aip::processor::v2::BoundingBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::BoundingBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_UnitCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_Classification_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_BoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_BoundingPolygon_default_instance_;
    new (ptr) ::aip::processor::v2::BoundingPolygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::BoundingPolygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_Polygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_Classification_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_Classification_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_Classification_default_instance_;
    new (ptr) ::aip::processor::v2::Classification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::Classification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Classification_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Classification_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {}};

static void InitDefaultsscc_info_DigitalGlobeMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_DigitalGlobeMetadata_default_instance_;
    new (ptr) ::aip::processor::v2::DigitalGlobeMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::DigitalGlobeMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DigitalGlobeMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DigitalGlobeMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_GeoCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_Frame_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_Frame_default_instance_;
    new (ptr) ::aip::processor::v2::Frame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::Frame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Frame_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Frame_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_UasMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_GeoBoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_GeoBoundingBox_default_instance_;
    new (ptr) ::aip::processor::v2::GeoBoundingBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::GeoBoundingBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeoBoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GeoBoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_GeoCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_Classification_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_GeoBoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_GeoBoundingPolygon_default_instance_;
    new (ptr) ::aip::processor::v2::GeoBoundingPolygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::GeoBoundingPolygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeoBoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GeoBoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_GeoPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_Classification_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_GeoCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_GeoCoordinate_default_instance_;
    new (ptr) ::aip::processor::v2::GeoCoordinate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::GeoCoordinate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeoCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {}};

static void InitDefaultsscc_info_GeoPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_GeoPolygon_default_instance_;
    new (ptr) ::aip::processor::v2::GeoPolygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::GeoPolygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_GeoCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_GeoRegistration_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_GeoRegistration_default_instance_;
    new (ptr) ::aip::processor::v2::GeoRegistration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::GeoRegistration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeoRegistration_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GeoRegistration_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_Lattice_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_UasMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_GeoRegistrationRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_GeoRegistrationRequest_default_instance_;
    new (ptr) ::aip::processor::v2::GeoRegistrationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::GeoRegistrationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeoRegistrationRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GeoRegistrationRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_RequestHeader_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_Frame_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_GeoRegistrationResponse_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_GeoRegistrationResponse_default_instance_;
    new (ptr) ::aip::processor::v2::GeoRegistrationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::GeoRegistrationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeoRegistrationResponse_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GeoRegistrationResponse_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_Identifier_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_GeoRegistration_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_Identifier_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_Identifier_default_instance_;
    new (ptr) ::aip::processor::v2::Identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::Identifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Identifier_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {}};

static void InitDefaultsscc_info_Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_Image_default_instance_;
    new (ptr) ::aip::processor::v2::Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::Image::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_Rgb888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_PngImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_TiffImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_Bgr888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_Nitf21Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_Inference_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_Inference_default_instance_;
    new (ptr) ::aip::processor::v2::Inference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::Inference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Inference_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Inference_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_BoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_BoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_GeoBoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_GeoBoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_Velocity_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_InferenceRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_InferenceRequest_default_instance_;
    new (ptr) ::aip::processor::v2::InferenceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::InferenceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InferenceRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InferenceRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_RequestHeader_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_Frame_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_InferenceResponse_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_InferenceResponse_default_instance_;
    new (ptr) ::aip::processor::v2::InferenceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::InferenceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InferenceResponse_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InferenceResponse_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_Identifier_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_Inferences_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_Inferences_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_Inferences_default_instance_;
    new (ptr) ::aip::processor::v2::Inferences();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::Inferences::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Inferences_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Inferences_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_Inference_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_Lattice_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_Lattice_default_instance_;
    new (ptr) ::aip::processor::v2::Lattice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::Lattice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Lattice_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Lattice_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_Lattice_Point_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_Lattice_Point_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_Lattice_Point_default_instance_;
    new (ptr) ::aip::processor::v2::Lattice_Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::Lattice_Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Lattice_Point_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Lattice_Point_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_UnitCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_Nitf21Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_Nitf21Image_default_instance_;
    new (ptr) ::aip::processor::v2::Nitf21Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::Nitf21Image::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Nitf21Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Nitf21Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {}};

static void InitDefaultsscc_info_PixelVelocityVector_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_PixelVelocityVector_default_instance_;
    new (ptr) ::aip::processor::v2::PixelVelocityVector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::PixelVelocityVector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PixelVelocityVector_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PixelVelocityVector_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {}};

static void InitDefaultsscc_info_PngImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_PngImage_default_instance_;
    new (ptr) ::aip::processor::v2::PngImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::PngImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PngImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PngImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {}};

static void InitDefaultsscc_info_Polygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_Polygon_default_instance_;
    new (ptr) ::aip::processor::v2::Polygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::Polygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Polygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_UnitCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_ProcessorV2Config_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_ProcessorV2Config_default_instance_;
    new (ptr) ::aip::processor::v2::ProcessorV2Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::ProcessorV2Config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessorV2Config_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessorV2Config_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {}};

static void InitDefaultsscc_info_ProviderMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_ProviderMetadata_default_instance_;
    new (ptr) ::aip::processor::v2::ProviderMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::ProviderMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProviderMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProviderMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_DigitalGlobeMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_RequestHeader_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_RequestHeader_default_instance_;
    new (ptr) ::aip::processor::v2::RequestHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::RequestHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RequestHeader_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RequestHeader_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_Identifier_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_Timestamp_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_Rgb888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_Rgb888Image_default_instance_;
    new (ptr) ::aip::processor::v2::Rgb888Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::Rgb888Image::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rgb888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rgb888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {}};

static void InitDefaultsscc_info_TiffImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_TiffImage_default_instance_;
    new (ptr) ::aip::processor::v2::TiffImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::TiffImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TiffImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TiffImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {}};

static void InitDefaultsscc_info_Timestamp_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_Timestamp_default_instance_;
    new (ptr) ::aip::processor::v2::Timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::Timestamp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Timestamp_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {}};

static void InitDefaultsscc_info_TrackRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_TrackRequest_default_instance_;
    new (ptr) ::aip::processor::v2::TrackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::TrackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TrackRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_TrackRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_RequestHeader_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_Frame_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_Inferences_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
      &scc_info_GeoRegistration_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_UasMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_UasMetadata_default_instance_;
    new (ptr) ::aip::processor::v2::UasMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::UasMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UasMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UasMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_ProviderMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static void InitDefaultsscc_info_UnitCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_UnitCoordinate_default_instance_;
    new (ptr) ::aip::processor::v2::UnitCoordinate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::UnitCoordinate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnitCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {}};

static void InitDefaultsscc_info_Velocity_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aip::processor::v2::_Velocity_default_instance_;
    new (ptr) ::aip::processor::v2::Velocity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aip::processor::v2::Velocity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Velocity_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Velocity_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto}, {
      &scc_info_PixelVelocityVector_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto[35];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::ProcessorV2Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::ProcessorV2Config, image_format_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::ProcessorV2Config, capabilities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::RequestHeader, identifier_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::RequestHeader, deadline_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::RequestHeader, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Identifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Identifier, stream_id_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Identifier, frame_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Timestamp, nanos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoRegistrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoRegistrationRequest, header_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoRegistrationRequest, frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoRegistrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoRegistrationResponse, identifier_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoRegistrationResponse, geo_registration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::InferenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::InferenceRequest, header_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::InferenceRequest, frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::InferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::InferenceResponse, identifier_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::InferenceResponse, inferences_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::TrackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::TrackRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::TrackRequest, header_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::TrackRequest, frame_),
  offsetof(::aip::processor::v2::TrackRequestDefaultTypeInternal, inferences_),
  offsetof(::aip::processor::v2::TrackRequestDefaultTypeInternal, geo_registration_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::TrackRequest, maybe_inferences_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::TrackRequest, maybe_geo_registration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoRegistration, lattice_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoRegistration, confidence_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoRegistration, updatedmetadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Inferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Inferences, inference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Inference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Inference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Inference, inferenceid_),
  offsetof(::aip::processor::v2::InferenceDefaultTypeInternal, box_),
  offsetof(::aip::processor::v2::InferenceDefaultTypeInternal, polygon_),
  offsetof(::aip::processor::v2::InferenceDefaultTypeInternal, geo_box_),
  offsetof(::aip::processor::v2::InferenceDefaultTypeInternal, geo_polygon_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Inference, velocity_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Inference, inference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoCoordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoCoordinate, latitude_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoCoordinate, longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::BoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::BoundingBox, c0_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::BoundingBox, c1_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::BoundingBox, classifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoBoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoBoundingBox, c0_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoBoundingBox, c1_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoBoundingBox, classifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::BoundingPolygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::BoundingPolygon, polygon_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::BoundingPolygon, classifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoBoundingPolygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoBoundingPolygon, polygon_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoBoundingPolygon, classifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Polygon, vertices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoPolygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::GeoPolygon, vertices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UnitCoordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UnitCoordinate, row_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UnitCoordinate, col_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Classification, type_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Classification, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Lattice_Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Lattice_Point, coordinate_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Lattice_Point, latitude_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Lattice_Point, longitude_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Lattice_Point, elevation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Lattice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Lattice, earth_intersection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Velocity, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Velocity, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::aip::processor::v2::VelocityDefaultTypeInternal, pixel_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Velocity, velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::PixelVelocityVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::PixelVelocityVector, x_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::PixelVelocityVector, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Frame, image_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Frame, uas_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Image, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::aip::processor::v2::ImageDefaultTypeInternal, rgb_image_),
  offsetof(::aip::processor::v2::ImageDefaultTypeInternal, png_image_),
  offsetof(::aip::processor::v2::ImageDefaultTypeInternal, tiff_image_),
  offsetof(::aip::processor::v2::ImageDefaultTypeInternal, bgr_image_),
  offsetof(::aip::processor::v2::ImageDefaultTypeInternal, nitf21_image_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Image, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Rgb888Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Rgb888Image, width_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Rgb888Image, height_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Rgb888Image, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Bgr888Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Bgr888Image, width_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Bgr888Image, height_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Bgr888Image, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::PngImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::PngImage, width_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::PngImage, height_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::PngImage, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::TiffImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::TiffImage, width_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::TiffImage, height_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::TiffImage, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Nitf21Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::Nitf21Image, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::DigitalGlobeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::DigitalGlobeMetadata, feature_id_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::DigitalGlobeMetadata, source_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::DigitalGlobeMetadata, niirs_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::DigitalGlobeMetadata, product_type_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::DigitalGlobeMetadata, off_nadir_degrees_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::DigitalGlobeMetadata, sun_elevation_degrees_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::DigitalGlobeMetadata, sun_azimuth_degrees_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::DigitalGlobeMetadata, ground_sample_distance_centimeters_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::DigitalGlobeMetadata, top_left_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::DigitalGlobeMetadata, top_right_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::DigitalGlobeMetadata, bottom_right_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::DigitalGlobeMetadata, bottom_left_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::ProviderMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::ProviderMetadata, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::aip::processor::v2::ProviderMetadataDefaultTypeInternal, digital_globe_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::ProviderMetadata, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UasMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UasMetadata, platform_heading_angle_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UasMetadata, platform_pitch_angle_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UasMetadata, platform_roll_angle_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UasMetadata, sensor_latitude_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UasMetadata, sensor_longitude_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UasMetadata, sensor_true_altitude_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UasMetadata, sensor_horizontal_fov_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UasMetadata, sensor_vertical_fov_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UasMetadata, sensor_relative_azimuth_angle_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UasMetadata, sensor_relative_elevation_angle_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UasMetadata, sensor_relative_roll_angle_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UasMetadata, image_source_sensor_),
  PROTOBUF_FIELD_OFFSET(::aip::processor::v2::UasMetadata, provider_metadata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::aip::processor::v2::ProcessorV2Config)},
  { 7, -1, sizeof(::aip::processor::v2::RequestHeader)},
  { 15, -1, sizeof(::aip::processor::v2::Identifier)},
  { 22, -1, sizeof(::aip::processor::v2::Timestamp)},
  { 28, -1, sizeof(::aip::processor::v2::GeoRegistrationRequest)},
  { 35, -1, sizeof(::aip::processor::v2::GeoRegistrationResponse)},
  { 42, -1, sizeof(::aip::processor::v2::InferenceRequest)},
  { 49, -1, sizeof(::aip::processor::v2::InferenceResponse)},
  { 56, -1, sizeof(::aip::processor::v2::TrackRequest)},
  { 67, -1, sizeof(::aip::processor::v2::GeoRegistration)},
  { 75, -1, sizeof(::aip::processor::v2::Inferences)},
  { 81, -1, sizeof(::aip::processor::v2::Inference)},
  { 93, -1, sizeof(::aip::processor::v2::GeoCoordinate)},
  { 100, -1, sizeof(::aip::processor::v2::BoundingBox)},
  { 108, -1, sizeof(::aip::processor::v2::GeoBoundingBox)},
  { 116, -1, sizeof(::aip::processor::v2::BoundingPolygon)},
  { 123, -1, sizeof(::aip::processor::v2::GeoBoundingPolygon)},
  { 130, -1, sizeof(::aip::processor::v2::Polygon)},
  { 136, -1, sizeof(::aip::processor::v2::GeoPolygon)},
  { 142, -1, sizeof(::aip::processor::v2::UnitCoordinate)},
  { 149, -1, sizeof(::aip::processor::v2::Classification)},
  { 156, -1, sizeof(::aip::processor::v2::Lattice_Point)},
  { 165, -1, sizeof(::aip::processor::v2::Lattice)},
  { 171, -1, sizeof(::aip::processor::v2::Velocity)},
  { 178, -1, sizeof(::aip::processor::v2::PixelVelocityVector)},
  { 185, -1, sizeof(::aip::processor::v2::Frame)},
  { 192, -1, sizeof(::aip::processor::v2::Image)},
  { 203, -1, sizeof(::aip::processor::v2::Rgb888Image)},
  { 211, -1, sizeof(::aip::processor::v2::Bgr888Image)},
  { 219, -1, sizeof(::aip::processor::v2::PngImage)},
  { 227, -1, sizeof(::aip::processor::v2::TiffImage)},
  { 235, -1, sizeof(::aip::processor::v2::Nitf21Image)},
  { 241, -1, sizeof(::aip::processor::v2::DigitalGlobeMetadata)},
  { 258, -1, sizeof(::aip::processor::v2::ProviderMetadata)},
  { 265, -1, sizeof(::aip::processor::v2::UasMetadata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_ProcessorV2Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_RequestHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_Identifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_Timestamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_GeoRegistrationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_GeoRegistrationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_InferenceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_InferenceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_TrackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_GeoRegistration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_Inferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_Inference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_GeoCoordinate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_BoundingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_GeoBoundingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_BoundingPolygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_GeoBoundingPolygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_GeoPolygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_UnitCoordinate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_Classification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_Lattice_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_Lattice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_Velocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_PixelVelocityVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_Frame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_Rgb888Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_Bgr888Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_PngImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_TiffImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_Nitf21Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_DigitalGlobeMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_ProviderMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aip::processor::v2::_UasMetadata_default_instance_),
};

const char descriptor_table_protodef_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*proto/palantir/processing-service-v2.p"
  "roto\022\020aip.processor.v2\032\036google/protobuf/"
  "duration.proto\"\304\001\n\021ProcessorV2Config\0223\n\014"
  "image_format\030\001 \001(\0162\035.aip.processor.v2.Im"
  "ageFormat\022D\n\014capabilities\030\002 \003(\0162..aip.pr"
  "ocessor.v2.ProcessorV2Config.Capability\""
  "4\n\nCapability\022\020\n\014GEO_REGISTER\020\000\022\t\n\005INFER"
  "\020\001\022\t\n\005TRACK\020\002\"\236\001\n\rRequestHeader\0220\n\nident"
  "ifier\030\001 \001(\0132\034.aip.processor.v2.Identifie"
  "r\022+\n\010deadline\030\002 \001(\0132\031.google.protobuf.Du"
  "ration\022.\n\ttimestamp\030\003 \001(\0132\033.aip.processo"
  "r.v2.Timestamp\"1\n\nIdentifier\022\021\n\tstream_i"
  "d\030\001 \001(\004\022\020\n\010frame_id\030\002 \001(\004\"\032\n\tTimestamp\022\r"
  "\n\005nanos\030\001 \001(\004\"q\n\026GeoRegistrationRequest\022"
  "/\n\006header\030\001 \001(\0132\037.aip.processor.v2.Reque"
  "stHeader\022&\n\005frame\030\002 \001(\0132\027.aip.processor."
  "v2.Frame\"\210\001\n\027GeoRegistrationResponse\0220\n\n"
  "identifier\030\001 \001(\0132\034.aip.processor.v2.Iden"
  "tifier\022;\n\020geo_registration\030\002 \001(\0132!.aip.p"
  "rocessor.v2.GeoRegistration\"k\n\020Inference"
  "Request\022/\n\006header\030\001 \001(\0132\037.aip.processor."
  "v2.RequestHeader\022&\n\005frame\030\002 \001(\0132\027.aip.pr"
  "ocessor.v2.Frame\"w\n\021InferenceResponse\0220\n"
  "\nidentifier\030\001 \001(\0132\034.aip.processor.v2.Ide"
  "ntifier\0220\n\ninferences\030\002 \001(\0132\034.aip.proces"
  "sor.v2.Inferences\"\210\002\n\014TrackRequest\022/\n\006he"
  "ader\030\001 \001(\0132\037.aip.processor.v2.RequestHea"
  "der\022&\n\005frame\030\002 \001(\0132\027.aip.processor.v2.Fr"
  "ame\0222\n\ninferences\030\003 \001(\0132\034.aip.processor."
  "v2.InferencesH\000\022=\n\020geo_registration\030\004 \001("
  "\0132!.aip.processor.v2.GeoRegistrationH\001B\022"
  "\n\020maybe_inferencesB\030\n\026maybe_geo_registra"
  "tion\"\211\001\n\017GeoRegistration\022*\n\007lattice\030\001 \001("
  "\0132\031.aip.processor.v2.Lattice\022\022\n\nconfiden"
  "ce\030\002 \001(\001\0226\n\017updatedMetadata\030\003 \001(\0132\035.aip."
  "processor.v2.UasMetadata\"<\n\nInferences\022."
  "\n\tinference\030\001 \003(\0132\033.aip.processor.v2.Inf"
  "erence\"\261\002\n\tInference\022\023\n\013inferenceId\030\001 \001("
  "\t\022,\n\003box\030\002 \001(\0132\035.aip.processor.v2.Boundi"
  "ngBoxH\000\0224\n\007polygon\030\003 \001(\0132!.aip.processor"
  ".v2.BoundingPolygonH\000\0223\n\007geo_box\030\005 \001(\0132 "
  ".aip.processor.v2.GeoBoundingBoxH\000\022;\n\013ge"
  "o_polygon\030\006 \001(\0132$.aip.processor.v2.GeoBo"
  "undingPolygonH\000\022,\n\010velocity\030\004 \001(\0132\032.aip."
  "processor.v2.VelocityB\013\n\tinference\"4\n\rGe"
  "oCoordinate\022\020\n\010latitude\030\001 \001(\001\022\021\n\tlongitu"
  "de\030\002 \001(\001\"\244\001\n\013BoundingBox\022,\n\002c0\030\001 \001(\0132 .a"
  "ip.processor.v2.UnitCoordinate\022,\n\002c1\030\002 \001"
  "(\0132 .aip.processor.v2.UnitCoordinate\0229\n\017"
  "classifications\030\003 \003(\0132 .aip.processor.v2"
  ".Classification\"\245\001\n\016GeoBoundingBox\022+\n\002c0"
  "\030\001 \001(\0132\037.aip.processor.v2.GeoCoordinate\022"
  "+\n\002c1\030\002 \001(\0132\037.aip.processor.v2.GeoCoordi"
  "nate\0229\n\017classifications\030\003 \003(\0132 .aip.proc"
  "essor.v2.Classification\"x\n\017BoundingPolyg"
  "on\022*\n\007polygon\030\001 \001(\0132\031.aip.processor.v2.P"
  "olygon\0229\n\017classifications\030\002 \003(\0132 .aip.pr"
  "ocessor.v2.Classification\"~\n\022GeoBounding"
  "Polygon\022-\n\007polygon\030\001 \001(\0132\034.aip.processor"
  ".v2.GeoPolygon\0229\n\017classifications\030\002 \003(\0132"
  " .aip.processor.v2.Classification\"=\n\007Pol"
  "ygon\0222\n\010vertices\030\001 \003(\0132 .aip.processor.v"
  "2.UnitCoordinate\"\?\n\nGeoPolygon\0221\n\010vertic"
  "es\030\001 \003(\0132\037.aip.processor.v2.GeoCoordinat"
  "e\"*\n\016UnitCoordinate\022\013\n\003row\030\001 \001(\001\022\013\n\003col\030"
  "\002 \001(\001\"2\n\016Classification\022\014\n\004type\030\001 \001(\t\022\022\n"
  "\nconfidence\030\002 \001(\001\"\275\001\n\007Lattice\022;\n\022earth_i"
  "ntersection\030\001 \003(\0132\037.aip.processor.v2.Lat"
  "tice.Point\032u\n\005Point\0224\n\ncoordinate\030\001 \001(\0132"
  " .aip.processor.v2.UnitCoordinate\022\020\n\010lat"
  "itude\030\002 \001(\001\022\021\n\tlongitude\030\003 \001(\001\022\021\n\televat"
  "ion\030\004 \001(\001\"N\n\010Velocity\0226\n\005pixel\030\004 \001(\0132%.a"
  "ip.processor.v2.PixelVelocityVectorH\000B\n\n"
  "\010velocity\"+\n\023PixelVelocityVector\022\t\n\001x\030\001 "
  "\001(\001\022\t\n\001y\030\002 \001(\001\"d\n\005Frame\022&\n\005image\030\001 \001(\0132\027"
  ".aip.processor.v2.Image\0223\n\014uas_metadata\030"
  "\002 \001(\0132\035.aip.processor.v2.UasMetadata\"\223\002\n"
  "\005Image\0222\n\trgb_image\030\001 \001(\0132\035.aip.processo"
  "r.v2.Rgb888ImageH\000\022/\n\tpng_image\030\002 \001(\0132\032."
  "aip.processor.v2.PngImageH\000\0221\n\ntiff_imag"
  "e\030\003 \001(\0132\033.aip.processor.v2.TiffImageH\000\0222"
  "\n\tbgr_image\030\004 \001(\0132\035.aip.processor.v2.Bgr"
  "888ImageH\000\0225\n\014nitf21_image\030\005 \001(\0132\035.aip.p"
  "rocessor.v2.Nitf21ImageH\000B\007\n\005image\":\n\013Rg"
  "b888Image\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005"
  "\022\014\n\004path\030\003 \001(\t\":\n\013Bgr888Image\022\r\n\005width\030\001"
  " \001(\005\022\016\n\006height\030\002 \001(\005\022\014\n\004path\030\003 \001(\t\"7\n\010Pn"
  "gImage\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\014\n"
  "\004path\030\003 \001(\t\"8\n\tTiffImage\022\r\n\005width\030\001 \001(\005\022"
  "\016\n\006height\030\002 \001(\005\022\014\n\004path\030\003 \001(\t\"\033\n\013Nitf21I"
  "mage\022\014\n\004path\030\001 \001(\t\"\266\003\n\024DigitalGlobeMetad"
  "ata\022\022\n\nfeature_id\030\001 \001(\t\022\016\n\006source\030\003 \001(\t\022"
  "\r\n\005niirs\030\004 \001(\r\022\024\n\014product_type\030\006 \001(\t\022\031\n\021"
  "off_nadir_degrees\030\007 \001(\001\022\035\n\025sun_elevation"
  "_degrees\030\010 \001(\001\022\033\n\023sun_azimuth_degrees\030\t "
  "\001(\001\022*\n\"ground_sample_distance_centimeter"
  "s\030\n \001(\004\0221\n\010top_left\030\013 \001(\0132\037.aip.processo"
  "r.v2.GeoCoordinate\0222\n\ttop_right\030\014 \001(\0132\037."
  "aip.processor.v2.GeoCoordinate\0225\n\014bottom"
  "_right\030\r \001(\0132\037.aip.processor.v2.GeoCoord"
  "inate\0224\n\013bottom_left\030\016 \001(\0132\037.aip.process"
  "or.v2.GeoCoordinate\"_\n\020ProviderMetadata\022"
  "\?\n\rdigital_globe\030\001 \001(\0132&.aip.processor.v"
  "2.DigitalGlobeMetadataH\000B\n\n\010metadata\"\305\003\n"
  "\013UasMetadata\022\036\n\026platform_heading_angle\030\005"
  " \001(\002\022\034\n\024platform_pitch_angle\030\006 \001(\002\022\033\n\023pl"
  "atform_roll_angle\030\007 \001(\002\022\027\n\017sensor_latitu"
  "de\030\r \001(\001\022\030\n\020sensor_longitude\030\016 \001(\001\022\034\n\024se"
  "nsor_true_altitude\030\017 \001(\001\022\035\n\025sensor_horiz"
  "ontal_fov\030\020 \001(\002\022\033\n\023sensor_vertical_fov\030\021"
  " \001(\002\022%\n\035sensor_relative_azimuth_angle\030\022 "
  "\001(\001\022\'\n\037sensor_relative_elevation_angle\030\023"
  " \001(\001\022\"\n\032sensor_relative_roll_angle\030\024 \001(\001"
  "\022\033\n\023image_source_sensor\030\025 \001(\t\022=\n\021provide"
  "r_metadata\030\026 \001(\0132\".aip.processor.v2.Prov"
  "iderMetadata*D\n\013ImageFormat\022\n\n\006RGB888\020\000\022"
  "\007\n\003PNG\020\001\022\010\n\004TIFF\020\002\022\n\n\006BGR888\020\003\022\n\n\006NITF21"
  "\020\0042\235\002\n\021ProcessingService\022d\n\013GeoRegister\022"
  "(.aip.processor.v2.GeoRegistrationReques"
  "t\032).aip.processor.v2.GeoRegistrationResp"
  "onse\"\000\022R\n\005Infer\022\".aip.processor.v2.Infer"
  "enceRequest\032#.aip.processor.v2.Inference"
  "Response\"\000\022N\n\005Track\022\036.aip.processor.v2.T"
  "rackRequest\032#.aip.processor.v2.Inference"
  "Response\"\000B8\n#com.palantir.aip.proto.pro"
  "cessor.v2B\021ProcessorV2Protosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto_sccs[35] = {
  &scc_info_Bgr888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_BoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_BoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_Classification_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_DigitalGlobeMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_Frame_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_GeoBoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_GeoBoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_GeoCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_GeoPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_GeoRegistration_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_GeoRegistrationRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_GeoRegistrationResponse_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_Identifier_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_Inference_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_InferenceRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_InferenceResponse_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_Inferences_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_Lattice_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_Lattice_Point_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_Nitf21Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_PixelVelocityVector_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_PngImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_Polygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_ProcessorV2Config_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_ProviderMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_RequestHeader_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_Rgb888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_TiffImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_Timestamp_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_TrackRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_UasMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_UnitCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
  &scc_info_Velocity_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto = {
  false, false, descriptor_table_protodef_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto, "proto/palantir/processing-service-v2.proto", 5036,
  &descriptor_table_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto_once, descriptor_table_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto_sccs, descriptor_table_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto_deps, 35, 1,
  schemas, file_default_instances, TableStruct_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto::offsets,
  file_level_metadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto, 35, file_level_enum_descriptors_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto, file_level_service_descriptors_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto)), true);
namespace aip {
namespace processor {
namespace v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessorV2Config_Capability_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto);
  return file_level_enum_descriptors_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto[0];
}
bool ProcessorV2Config_Capability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProcessorV2Config_Capability ProcessorV2Config::GEO_REGISTER;
constexpr ProcessorV2Config_Capability ProcessorV2Config::INFER;
constexpr ProcessorV2Config_Capability ProcessorV2Config::TRACK;
constexpr ProcessorV2Config_Capability ProcessorV2Config::Capability_MIN;
constexpr ProcessorV2Config_Capability ProcessorV2Config::Capability_MAX;
constexpr int ProcessorV2Config::Capability_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto);
  return file_level_enum_descriptors_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto[1];
}
bool ImageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ProcessorV2Config::InitAsDefaultInstance() {
}
class ProcessorV2Config::_Internal {
 public:
};

ProcessorV2Config::ProcessorV2Config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  capabilities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.ProcessorV2Config)
}
ProcessorV2Config::ProcessorV2Config(const ProcessorV2Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      capabilities_(from.capabilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_format_ = from.image_format_;
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.ProcessorV2Config)
}

void ProcessorV2Config::SharedCtor() {
  image_format_ = 0;
}

ProcessorV2Config::~ProcessorV2Config() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.ProcessorV2Config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessorV2Config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProcessorV2Config::ArenaDtor(void* object) {
  ProcessorV2Config* _this = reinterpret_cast< ProcessorV2Config* >(object);
  (void)_this;
}
void ProcessorV2Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessorV2Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessorV2Config& ProcessorV2Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessorV2Config_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void ProcessorV2Config::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.ProcessorV2Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capabilities_.Clear();
  image_format_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessorV2Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.ImageFormat image_format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_image_format(static_cast<::aip::processor::v2::ImageFormat>(val));
        } else goto handle_unusual;
        continue;
      // repeated .aip.processor.v2.ProcessorV2Config.Capability capabilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_capabilities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_capabilities(static_cast<::aip::processor::v2::ProcessorV2Config_Capability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessorV2Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.ProcessorV2Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.ImageFormat image_format = 1;
  if (this->image_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_image_format(), target);
  }

  // repeated .aip.processor.v2.ProcessorV2Config.Capability capabilities = 2;
  {
    int byte_size = _capabilities_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, capabilities_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.ProcessorV2Config)
  return target;
}

size_t ProcessorV2Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.ProcessorV2Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aip.processor.v2.ProcessorV2Config.Capability capabilities = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_capabilities_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_capabilities(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _capabilities_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .aip.processor.v2.ImageFormat image_format = 1;
  if (this->image_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_image_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessorV2Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.ProcessorV2Config)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessorV2Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessorV2Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.ProcessorV2Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.ProcessorV2Config)
    MergeFrom(*source);
  }
}

void ProcessorV2Config::MergeFrom(const ProcessorV2Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.ProcessorV2Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  capabilities_.MergeFrom(from.capabilities_);
  if (from.image_format() != 0) {
    _internal_set_image_format(from._internal_image_format());
  }
}

void ProcessorV2Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.ProcessorV2Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorV2Config::CopyFrom(const ProcessorV2Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.ProcessorV2Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorV2Config::IsInitialized() const {
  return true;
}

void ProcessorV2Config::InternalSwap(ProcessorV2Config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  capabilities_.InternalSwap(&other->capabilities_);
  swap(image_format_, other->image_format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessorV2Config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestHeader::InitAsDefaultInstance() {
  ::aip::processor::v2::_RequestHeader_default_instance_._instance.get_mutable()->identifier_ = const_cast< ::aip::processor::v2::Identifier*>(
      ::aip::processor::v2::Identifier::internal_default_instance());
  ::aip::processor::v2::_RequestHeader_default_instance_._instance.get_mutable()->deadline_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::aip::processor::v2::_RequestHeader_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::aip::processor::v2::Timestamp*>(
      ::aip::processor::v2::Timestamp::internal_default_instance());
}
class RequestHeader::_Internal {
 public:
  static const ::aip::processor::v2::Identifier& identifier(const RequestHeader* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& deadline(const RequestHeader* msg);
  static const ::aip::processor::v2::Timestamp& timestamp(const RequestHeader* msg);
};

const ::aip::processor::v2::Identifier&
RequestHeader::_Internal::identifier(const RequestHeader* msg) {
  return *msg->identifier_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
RequestHeader::_Internal::deadline(const RequestHeader* msg) {
  return *msg->deadline_;
}
const ::aip::processor::v2::Timestamp&
RequestHeader::_Internal::timestamp(const RequestHeader* msg) {
  return *msg->timestamp_;
}
void RequestHeader::clear_deadline() {
  if (GetArena() == nullptr && deadline_ != nullptr) {
    delete deadline_;
  }
  deadline_ = nullptr;
}
RequestHeader::RequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifier()) {
    identifier_ = new ::aip::processor::v2::Identifier(*from.identifier_);
  } else {
    identifier_ = nullptr;
  }
  if (from._internal_has_deadline()) {
    deadline_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.deadline_);
  } else {
    deadline_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::aip::processor::v2::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.RequestHeader)
}

void RequestHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestHeader_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(timestamp_));
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.RequestHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifier_;
  if (this != internal_default_instance()) delete deadline_;
  if (this != internal_default_instance()) delete timestamp_;
}

void RequestHeader::ArenaDtor(void* object) {
  RequestHeader* _this = reinterpret_cast< RequestHeader* >(object);
  (void)_this;
}
void RequestHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestHeader& RequestHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestHeader_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.RequestHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && identifier_ != nullptr) {
    delete identifier_;
  }
  identifier_ = nullptr;
  if (GetArena() == nullptr && deadline_ != nullptr) {
    delete deadline_;
  }
  deadline_ = nullptr;
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.Identifier identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration deadline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deadline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.RequestHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.Identifier identifier = 1;
  if (this->has_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifier(this), target, stream);
  }

  // .google.protobuf.Duration deadline = 2;
  if (this->has_deadline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::deadline(this), target, stream);
  }

  // .aip.processor.v2.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.RequestHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aip.processor.v2.Identifier identifier = 1;
  if (this->has_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identifier_);
  }

  // .google.protobuf.Duration deadline = 2;
  if (this->has_deadline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deadline_);
  }

  // .aip.processor.v2.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.RequestHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.RequestHeader)
    MergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_identifier()) {
    _internal_mutable_identifier()->::aip::processor::v2::Identifier::MergeFrom(from._internal_identifier());
  }
  if (from.has_deadline()) {
    _internal_mutable_deadline()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_deadline());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->::aip::processor::v2::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void RequestHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  return true;
}

void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestHeader, timestamp_)
      + sizeof(RequestHeader::timestamp_)
      - PROTOBUF_FIELD_OFFSET(RequestHeader, identifier_)>(
          reinterpret_cast<char*>(&identifier_),
          reinterpret_cast<char*>(&other->identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Identifier::InitAsDefaultInstance() {
}
class Identifier::_Internal {
 public:
};

Identifier::Identifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.Identifier)
}
Identifier::Identifier(const Identifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_id_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(frame_id_));
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.Identifier)
}

void Identifier::SharedCtor() {
  ::memset(&stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&stream_id_)) + sizeof(frame_id_));
}

Identifier::~Identifier() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.Identifier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Identifier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Identifier::ArenaDtor(void* object) {
  Identifier* _this = reinterpret_cast< Identifier* >(object);
  (void)_this;
}
void Identifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Identifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Identifier& Identifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Identifier_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void Identifier::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.Identifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&stream_id_)) + sizeof(frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Identifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Identifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.Identifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stream_id = 1;
  if (this->stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stream_id(), target);
  }

  // uint64 frame_id = 2;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.Identifier)
  return target;
}

size_t Identifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.Identifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 stream_id = 1;
  if (this->stream_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stream_id());
  }

  // uint64 frame_id = 2;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Identifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  const Identifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Identifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.Identifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.Identifier)
    MergeFrom(*source);
  }
}

void Identifier::MergeFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stream_id() != 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
}

void Identifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identifier::CopyFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identifier::IsInitialized() const {
  return true;
}

void Identifier::InternalSwap(Identifier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Identifier, frame_id_)
      + sizeof(Identifier::frame_id_)
      - PROTOBUF_FIELD_OFFSET(Identifier, stream_id_)>(
          reinterpret_cast<char*>(&stream_id_),
          reinterpret_cast<char*>(&other->stream_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Identifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Timestamp::InitAsDefaultInstance() {
}
class Timestamp::_Internal {
 public:
};

Timestamp::Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nanos_ = from.nanos_;
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.Timestamp)
}

void Timestamp::SharedCtor() {
  nanos_ = PROTOBUF_ULONGLONG(0);
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.Timestamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Timestamp::ArenaDtor(void* object) {
  Timestamp* _this = reinterpret_cast< Timestamp* >(object);
  (void)_this;
}
void Timestamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Timestamp& Timestamp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Timestamp_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nanos_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 nanos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Timestamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nanos = 1;
  if (this->nanos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nanos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.Timestamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 nanos = 1;
  if (this->nanos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nanos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timestamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Timestamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Timestamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.Timestamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nanos() != 0) {
    _internal_set_nanos(from._internal_nanos());
  }
}

void Timestamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(nanos_, other->nanos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Timestamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoRegistrationRequest::InitAsDefaultInstance() {
  ::aip::processor::v2::_GeoRegistrationRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::aip::processor::v2::RequestHeader*>(
      ::aip::processor::v2::RequestHeader::internal_default_instance());
  ::aip::processor::v2::_GeoRegistrationRequest_default_instance_._instance.get_mutable()->frame_ = const_cast< ::aip::processor::v2::Frame*>(
      ::aip::processor::v2::Frame::internal_default_instance());
}
class GeoRegistrationRequest::_Internal {
 public:
  static const ::aip::processor::v2::RequestHeader& header(const GeoRegistrationRequest* msg);
  static const ::aip::processor::v2::Frame& frame(const GeoRegistrationRequest* msg);
};

const ::aip::processor::v2::RequestHeader&
GeoRegistrationRequest::_Internal::header(const GeoRegistrationRequest* msg) {
  return *msg->header_;
}
const ::aip::processor::v2::Frame&
GeoRegistrationRequest::_Internal::frame(const GeoRegistrationRequest* msg) {
  return *msg->frame_;
}
GeoRegistrationRequest::GeoRegistrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.GeoRegistrationRequest)
}
GeoRegistrationRequest::GeoRegistrationRequest(const GeoRegistrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::aip::processor::v2::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_frame()) {
    frame_ = new ::aip::processor::v2::Frame(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.GeoRegistrationRequest)
}

void GeoRegistrationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoRegistrationRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&header_)) + sizeof(frame_));
}

GeoRegistrationRequest::~GeoRegistrationRequest() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.GeoRegistrationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoRegistrationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete frame_;
}

void GeoRegistrationRequest::ArenaDtor(void* object) {
  GeoRegistrationRequest* _this = reinterpret_cast< GeoRegistrationRequest* >(object);
  (void)_this;
}
void GeoRegistrationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoRegistrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoRegistrationRequest& GeoRegistrationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoRegistrationRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void GeoRegistrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.GeoRegistrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && frame_ != nullptr) {
    delete frame_;
  }
  frame_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoRegistrationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.Frame frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoRegistrationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.GeoRegistrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .aip.processor.v2.Frame frame = 2;
  if (this->has_frame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frame(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.GeoRegistrationRequest)
  return target;
}

size_t GeoRegistrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.GeoRegistrationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aip.processor.v2.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .aip.processor.v2.Frame frame = 2;
  if (this->has_frame()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoRegistrationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.GeoRegistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoRegistrationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoRegistrationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.GeoRegistrationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.GeoRegistrationRequest)
    MergeFrom(*source);
  }
}

void GeoRegistrationRequest::MergeFrom(const GeoRegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.GeoRegistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::aip::processor::v2::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_frame()) {
    _internal_mutable_frame()->::aip::processor::v2::Frame::MergeFrom(from._internal_frame());
  }
}

void GeoRegistrationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.GeoRegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoRegistrationRequest::CopyFrom(const GeoRegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.GeoRegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoRegistrationRequest::IsInitialized() const {
  return true;
}

void GeoRegistrationRequest::InternalSwap(GeoRegistrationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoRegistrationRequest, frame_)
      + sizeof(GeoRegistrationRequest::frame_)
      - PROTOBUF_FIELD_OFFSET(GeoRegistrationRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoRegistrationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoRegistrationResponse::InitAsDefaultInstance() {
  ::aip::processor::v2::_GeoRegistrationResponse_default_instance_._instance.get_mutable()->identifier_ = const_cast< ::aip::processor::v2::Identifier*>(
      ::aip::processor::v2::Identifier::internal_default_instance());
  ::aip::processor::v2::_GeoRegistrationResponse_default_instance_._instance.get_mutable()->geo_registration_ = const_cast< ::aip::processor::v2::GeoRegistration*>(
      ::aip::processor::v2::GeoRegistration::internal_default_instance());
}
class GeoRegistrationResponse::_Internal {
 public:
  static const ::aip::processor::v2::Identifier& identifier(const GeoRegistrationResponse* msg);
  static const ::aip::processor::v2::GeoRegistration& geo_registration(const GeoRegistrationResponse* msg);
};

const ::aip::processor::v2::Identifier&
GeoRegistrationResponse::_Internal::identifier(const GeoRegistrationResponse* msg) {
  return *msg->identifier_;
}
const ::aip::processor::v2::GeoRegistration&
GeoRegistrationResponse::_Internal::geo_registration(const GeoRegistrationResponse* msg) {
  return *msg->geo_registration_;
}
GeoRegistrationResponse::GeoRegistrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.GeoRegistrationResponse)
}
GeoRegistrationResponse::GeoRegistrationResponse(const GeoRegistrationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifier()) {
    identifier_ = new ::aip::processor::v2::Identifier(*from.identifier_);
  } else {
    identifier_ = nullptr;
  }
  if (from._internal_has_geo_registration()) {
    geo_registration_ = new ::aip::processor::v2::GeoRegistration(*from.geo_registration_);
  } else {
    geo_registration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.GeoRegistrationResponse)
}

void GeoRegistrationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoRegistrationResponse_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geo_registration_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(geo_registration_));
}

GeoRegistrationResponse::~GeoRegistrationResponse() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.GeoRegistrationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoRegistrationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifier_;
  if (this != internal_default_instance()) delete geo_registration_;
}

void GeoRegistrationResponse::ArenaDtor(void* object) {
  GeoRegistrationResponse* _this = reinterpret_cast< GeoRegistrationResponse* >(object);
  (void)_this;
}
void GeoRegistrationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoRegistrationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoRegistrationResponse& GeoRegistrationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoRegistrationResponse_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void GeoRegistrationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.GeoRegistrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && identifier_ != nullptr) {
    delete identifier_;
  }
  identifier_ = nullptr;
  if (GetArena() == nullptr && geo_registration_ != nullptr) {
    delete geo_registration_;
  }
  geo_registration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoRegistrationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.Identifier identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.GeoRegistration geo_registration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_registration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoRegistrationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.GeoRegistrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.Identifier identifier = 1;
  if (this->has_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifier(this), target, stream);
  }

  // .aip.processor.v2.GeoRegistration geo_registration = 2;
  if (this->has_geo_registration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::geo_registration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.GeoRegistrationResponse)
  return target;
}

size_t GeoRegistrationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.GeoRegistrationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aip.processor.v2.Identifier identifier = 1;
  if (this->has_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identifier_);
  }

  // .aip.processor.v2.GeoRegistration geo_registration = 2;
  if (this->has_geo_registration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_registration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoRegistrationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.GeoRegistrationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoRegistrationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoRegistrationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.GeoRegistrationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.GeoRegistrationResponse)
    MergeFrom(*source);
  }
}

void GeoRegistrationResponse::MergeFrom(const GeoRegistrationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.GeoRegistrationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_identifier()) {
    _internal_mutable_identifier()->::aip::processor::v2::Identifier::MergeFrom(from._internal_identifier());
  }
  if (from.has_geo_registration()) {
    _internal_mutable_geo_registration()->::aip::processor::v2::GeoRegistration::MergeFrom(from._internal_geo_registration());
  }
}

void GeoRegistrationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.GeoRegistrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoRegistrationResponse::CopyFrom(const GeoRegistrationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.GeoRegistrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoRegistrationResponse::IsInitialized() const {
  return true;
}

void GeoRegistrationResponse::InternalSwap(GeoRegistrationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoRegistrationResponse, geo_registration_)
      + sizeof(GeoRegistrationResponse::geo_registration_)
      - PROTOBUF_FIELD_OFFSET(GeoRegistrationResponse, identifier_)>(
          reinterpret_cast<char*>(&identifier_),
          reinterpret_cast<char*>(&other->identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoRegistrationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InferenceRequest::InitAsDefaultInstance() {
  ::aip::processor::v2::_InferenceRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::aip::processor::v2::RequestHeader*>(
      ::aip::processor::v2::RequestHeader::internal_default_instance());
  ::aip::processor::v2::_InferenceRequest_default_instance_._instance.get_mutable()->frame_ = const_cast< ::aip::processor::v2::Frame*>(
      ::aip::processor::v2::Frame::internal_default_instance());
}
class InferenceRequest::_Internal {
 public:
  static const ::aip::processor::v2::RequestHeader& header(const InferenceRequest* msg);
  static const ::aip::processor::v2::Frame& frame(const InferenceRequest* msg);
};

const ::aip::processor::v2::RequestHeader&
InferenceRequest::_Internal::header(const InferenceRequest* msg) {
  return *msg->header_;
}
const ::aip::processor::v2::Frame&
InferenceRequest::_Internal::frame(const InferenceRequest* msg) {
  return *msg->frame_;
}
InferenceRequest::InferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.InferenceRequest)
}
InferenceRequest::InferenceRequest(const InferenceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::aip::processor::v2::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_frame()) {
    frame_ = new ::aip::processor::v2::Frame(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.InferenceRequest)
}

void InferenceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InferenceRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&header_)) + sizeof(frame_));
}

InferenceRequest::~InferenceRequest() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.InferenceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InferenceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete frame_;
}

void InferenceRequest::ArenaDtor(void* object) {
  InferenceRequest* _this = reinterpret_cast< InferenceRequest* >(object);
  (void)_this;
}
void InferenceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InferenceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InferenceRequest& InferenceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InferenceRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void InferenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.InferenceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && frame_ != nullptr) {
    delete frame_;
  }
  frame_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferenceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.Frame frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InferenceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.InferenceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .aip.processor.v2.Frame frame = 2;
  if (this->has_frame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frame(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.InferenceRequest)
  return target;
}

size_t InferenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.InferenceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aip.processor.v2.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .aip.processor.v2.Frame frame = 2;
  if (this->has_frame()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InferenceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.InferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InferenceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InferenceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.InferenceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.InferenceRequest)
    MergeFrom(*source);
  }
}

void InferenceRequest::MergeFrom(const InferenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.InferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::aip::processor::v2::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_frame()) {
    _internal_mutable_frame()->::aip::processor::v2::Frame::MergeFrom(from._internal_frame());
  }
}

void InferenceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.InferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InferenceRequest::CopyFrom(const InferenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.InferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferenceRequest::IsInitialized() const {
  return true;
}

void InferenceRequest::InternalSwap(InferenceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InferenceRequest, frame_)
      + sizeof(InferenceRequest::frame_)
      - PROTOBUF_FIELD_OFFSET(InferenceRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InferenceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InferenceResponse::InitAsDefaultInstance() {
  ::aip::processor::v2::_InferenceResponse_default_instance_._instance.get_mutable()->identifier_ = const_cast< ::aip::processor::v2::Identifier*>(
      ::aip::processor::v2::Identifier::internal_default_instance());
  ::aip::processor::v2::_InferenceResponse_default_instance_._instance.get_mutable()->inferences_ = const_cast< ::aip::processor::v2::Inferences*>(
      ::aip::processor::v2::Inferences::internal_default_instance());
}
class InferenceResponse::_Internal {
 public:
  static const ::aip::processor::v2::Identifier& identifier(const InferenceResponse* msg);
  static const ::aip::processor::v2::Inferences& inferences(const InferenceResponse* msg);
};

const ::aip::processor::v2::Identifier&
InferenceResponse::_Internal::identifier(const InferenceResponse* msg) {
  return *msg->identifier_;
}
const ::aip::processor::v2::Inferences&
InferenceResponse::_Internal::inferences(const InferenceResponse* msg) {
  return *msg->inferences_;
}
InferenceResponse::InferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.InferenceResponse)
}
InferenceResponse::InferenceResponse(const InferenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifier()) {
    identifier_ = new ::aip::processor::v2::Identifier(*from.identifier_);
  } else {
    identifier_ = nullptr;
  }
  if (from._internal_has_inferences()) {
    inferences_ = new ::aip::processor::v2::Inferences(*from.inferences_);
  } else {
    inferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.InferenceResponse)
}

void InferenceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InferenceResponse_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inferences_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(inferences_));
}

InferenceResponse::~InferenceResponse() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.InferenceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InferenceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifier_;
  if (this != internal_default_instance()) delete inferences_;
}

void InferenceResponse::ArenaDtor(void* object) {
  InferenceResponse* _this = reinterpret_cast< InferenceResponse* >(object);
  (void)_this;
}
void InferenceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InferenceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InferenceResponse& InferenceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InferenceResponse_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void InferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.InferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && identifier_ != nullptr) {
    delete identifier_;
  }
  identifier_ = nullptr;
  if (GetArena() == nullptr && inferences_ != nullptr) {
    delete inferences_;
  }
  inferences_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferenceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.Identifier identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.Inferences inferences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inferences(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InferenceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.InferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.Identifier identifier = 1;
  if (this->has_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifier(this), target, stream);
  }

  // .aip.processor.v2.Inferences inferences = 2;
  if (this->has_inferences()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::inferences(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.InferenceResponse)
  return target;
}

size_t InferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.InferenceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aip.processor.v2.Identifier identifier = 1;
  if (this->has_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identifier_);
  }

  // .aip.processor.v2.Inferences inferences = 2;
  if (this->has_inferences()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inferences_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InferenceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.InferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InferenceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InferenceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.InferenceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.InferenceResponse)
    MergeFrom(*source);
  }
}

void InferenceResponse::MergeFrom(const InferenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.InferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_identifier()) {
    _internal_mutable_identifier()->::aip::processor::v2::Identifier::MergeFrom(from._internal_identifier());
  }
  if (from.has_inferences()) {
    _internal_mutable_inferences()->::aip::processor::v2::Inferences::MergeFrom(from._internal_inferences());
  }
}

void InferenceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.InferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InferenceResponse::CopyFrom(const InferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.InferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferenceResponse::IsInitialized() const {
  return true;
}

void InferenceResponse::InternalSwap(InferenceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InferenceResponse, inferences_)
      + sizeof(InferenceResponse::inferences_)
      - PROTOBUF_FIELD_OFFSET(InferenceResponse, identifier_)>(
          reinterpret_cast<char*>(&identifier_),
          reinterpret_cast<char*>(&other->identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InferenceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackRequest::InitAsDefaultInstance() {
  ::aip::processor::v2::_TrackRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::aip::processor::v2::RequestHeader*>(
      ::aip::processor::v2::RequestHeader::internal_default_instance());
  ::aip::processor::v2::_TrackRequest_default_instance_._instance.get_mutable()->frame_ = const_cast< ::aip::processor::v2::Frame*>(
      ::aip::processor::v2::Frame::internal_default_instance());
  ::aip::processor::v2::_TrackRequest_default_instance_.inferences_ = const_cast< ::aip::processor::v2::Inferences*>(
      ::aip::processor::v2::Inferences::internal_default_instance());
  ::aip::processor::v2::_TrackRequest_default_instance_.geo_registration_ = const_cast< ::aip::processor::v2::GeoRegistration*>(
      ::aip::processor::v2::GeoRegistration::internal_default_instance());
}
class TrackRequest::_Internal {
 public:
  static const ::aip::processor::v2::RequestHeader& header(const TrackRequest* msg);
  static const ::aip::processor::v2::Frame& frame(const TrackRequest* msg);
  static const ::aip::processor::v2::Inferences& inferences(const TrackRequest* msg);
  static const ::aip::processor::v2::GeoRegistration& geo_registration(const TrackRequest* msg);
};

const ::aip::processor::v2::RequestHeader&
TrackRequest::_Internal::header(const TrackRequest* msg) {
  return *msg->header_;
}
const ::aip::processor::v2::Frame&
TrackRequest::_Internal::frame(const TrackRequest* msg) {
  return *msg->frame_;
}
const ::aip::processor::v2::Inferences&
TrackRequest::_Internal::inferences(const TrackRequest* msg) {
  return *msg->maybe_inferences_.inferences_;
}
const ::aip::processor::v2::GeoRegistration&
TrackRequest::_Internal::geo_registration(const TrackRequest* msg) {
  return *msg->maybe_geo_registration_.geo_registration_;
}
void TrackRequest::set_allocated_inferences(::aip::processor::v2::Inferences* inferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_maybe_inferences();
  if (inferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inferences);
    if (message_arena != submessage_arena) {
      inferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inferences, submessage_arena);
    }
    set_has_inferences();
    maybe_inferences_.inferences_ = inferences;
  }
  // @@protoc_insertion_point(field_set_allocated:aip.processor.v2.TrackRequest.inferences)
}
void TrackRequest::set_allocated_geo_registration(::aip::processor::v2::GeoRegistration* geo_registration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_maybe_geo_registration();
  if (geo_registration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geo_registration);
    if (message_arena != submessage_arena) {
      geo_registration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo_registration, submessage_arena);
    }
    set_has_geo_registration();
    maybe_geo_registration_.geo_registration_ = geo_registration;
  }
  // @@protoc_insertion_point(field_set_allocated:aip.processor.v2.TrackRequest.geo_registration)
}
TrackRequest::TrackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.TrackRequest)
}
TrackRequest::TrackRequest(const TrackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::aip::processor::v2::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_frame()) {
    frame_ = new ::aip::processor::v2::Frame(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  clear_has_maybe_inferences();
  switch (from.maybe_inferences_case()) {
    case kInferences: {
      _internal_mutable_inferences()->::aip::processor::v2::Inferences::MergeFrom(from._internal_inferences());
      break;
    }
    case MAYBE_INFERENCES_NOT_SET: {
      break;
    }
  }
  clear_has_maybe_geo_registration();
  switch (from.maybe_geo_registration_case()) {
    case kGeoRegistration: {
      _internal_mutable_geo_registration()->::aip::processor::v2::GeoRegistration::MergeFrom(from._internal_geo_registration());
      break;
    }
    case MAYBE_GEO_REGISTRATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.TrackRequest)
}

void TrackRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&header_)) + sizeof(frame_));
  clear_has_maybe_inferences();
  clear_has_maybe_geo_registration();
}

TrackRequest::~TrackRequest() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.TrackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete frame_;
  if (has_maybe_inferences()) {
    clear_maybe_inferences();
  }
  if (has_maybe_geo_registration()) {
    clear_maybe_geo_registration();
  }
}

void TrackRequest::ArenaDtor(void* object) {
  TrackRequest* _this = reinterpret_cast< TrackRequest* >(object);
  (void)_this;
}
void TrackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackRequest& TrackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackRequest_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void TrackRequest::clear_maybe_inferences() {
// @@protoc_insertion_point(one_of_clear_start:aip.processor.v2.TrackRequest)
  switch (maybe_inferences_case()) {
    case kInferences: {
      if (GetArena() == nullptr) {
        delete maybe_inferences_.inferences_;
      }
      break;
    }
    case MAYBE_INFERENCES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MAYBE_INFERENCES_NOT_SET;
}

void TrackRequest::clear_maybe_geo_registration() {
// @@protoc_insertion_point(one_of_clear_start:aip.processor.v2.TrackRequest)
  switch (maybe_geo_registration_case()) {
    case kGeoRegistration: {
      if (GetArena() == nullptr) {
        delete maybe_geo_registration_.geo_registration_;
      }
      break;
    }
    case MAYBE_GEO_REGISTRATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = MAYBE_GEO_REGISTRATION_NOT_SET;
}


void TrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.TrackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && frame_ != nullptr) {
    delete frame_;
  }
  frame_ = nullptr;
  clear_maybe_inferences();
  clear_maybe_geo_registration();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.Frame frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.Inferences inferences = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_inferences(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.GeoRegistration geo_registration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_registration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.TrackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .aip.processor.v2.Frame frame = 2;
  if (this->has_frame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frame(this), target, stream);
  }

  // .aip.processor.v2.Inferences inferences = 3;
  if (_internal_has_inferences()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::inferences(this), target, stream);
  }

  // .aip.processor.v2.GeoRegistration geo_registration = 4;
  if (_internal_has_geo_registration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::geo_registration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.TrackRequest)
  return target;
}

size_t TrackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.TrackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aip.processor.v2.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .aip.processor.v2.Frame frame = 2;
  if (this->has_frame()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_);
  }

  switch (maybe_inferences_case()) {
    // .aip.processor.v2.Inferences inferences = 3;
    case kInferences: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *maybe_inferences_.inferences_);
      break;
    }
    case MAYBE_INFERENCES_NOT_SET: {
      break;
    }
  }
  switch (maybe_geo_registration_case()) {
    // .aip.processor.v2.GeoRegistration geo_registration = 4;
    case kGeoRegistration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *maybe_geo_registration_.geo_registration_);
      break;
    }
    case MAYBE_GEO_REGISTRATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.TrackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.TrackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.TrackRequest)
    MergeFrom(*source);
  }
}

void TrackRequest::MergeFrom(const TrackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.TrackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::aip::processor::v2::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_frame()) {
    _internal_mutable_frame()->::aip::processor::v2::Frame::MergeFrom(from._internal_frame());
  }
  switch (from.maybe_inferences_case()) {
    case kInferences: {
      _internal_mutable_inferences()->::aip::processor::v2::Inferences::MergeFrom(from._internal_inferences());
      break;
    }
    case MAYBE_INFERENCES_NOT_SET: {
      break;
    }
  }
  switch (from.maybe_geo_registration_case()) {
    case kGeoRegistration: {
      _internal_mutable_geo_registration()->::aip::processor::v2::GeoRegistration::MergeFrom(from._internal_geo_registration());
      break;
    }
    case MAYBE_GEO_REGISTRATION_NOT_SET: {
      break;
    }
  }
}

void TrackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.TrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackRequest::CopyFrom(const TrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.TrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackRequest::IsInitialized() const {
  return true;
}

void TrackRequest::InternalSwap(TrackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackRequest, frame_)
      + sizeof(TrackRequest::frame_)
      - PROTOBUF_FIELD_OFFSET(TrackRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
  swap(maybe_inferences_, other->maybe_inferences_);
  swap(maybe_geo_registration_, other->maybe_geo_registration_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoRegistration::InitAsDefaultInstance() {
  ::aip::processor::v2::_GeoRegistration_default_instance_._instance.get_mutable()->lattice_ = const_cast< ::aip::processor::v2::Lattice*>(
      ::aip::processor::v2::Lattice::internal_default_instance());
  ::aip::processor::v2::_GeoRegistration_default_instance_._instance.get_mutable()->updatedmetadata_ = const_cast< ::aip::processor::v2::UasMetadata*>(
      ::aip::processor::v2::UasMetadata::internal_default_instance());
}
class GeoRegistration::_Internal {
 public:
  static const ::aip::processor::v2::Lattice& lattice(const GeoRegistration* msg);
  static const ::aip::processor::v2::UasMetadata& updatedmetadata(const GeoRegistration* msg);
};

const ::aip::processor::v2::Lattice&
GeoRegistration::_Internal::lattice(const GeoRegistration* msg) {
  return *msg->lattice_;
}
const ::aip::processor::v2::UasMetadata&
GeoRegistration::_Internal::updatedmetadata(const GeoRegistration* msg) {
  return *msg->updatedmetadata_;
}
GeoRegistration::GeoRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.GeoRegistration)
}
GeoRegistration::GeoRegistration(const GeoRegistration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lattice()) {
    lattice_ = new ::aip::processor::v2::Lattice(*from.lattice_);
  } else {
    lattice_ = nullptr;
  }
  if (from._internal_has_updatedmetadata()) {
    updatedmetadata_ = new ::aip::processor::v2::UasMetadata(*from.updatedmetadata_);
  } else {
    updatedmetadata_ = nullptr;
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.GeoRegistration)
}

void GeoRegistration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoRegistration_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  ::memset(&lattice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&lattice_)) + sizeof(confidence_));
}

GeoRegistration::~GeoRegistration() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.GeoRegistration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoRegistration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lattice_;
  if (this != internal_default_instance()) delete updatedmetadata_;
}

void GeoRegistration::ArenaDtor(void* object) {
  GeoRegistration* _this = reinterpret_cast< GeoRegistration* >(object);
  (void)_this;
}
void GeoRegistration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoRegistration& GeoRegistration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoRegistration_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void GeoRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.GeoRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && lattice_ != nullptr) {
    delete lattice_;
  }
  lattice_ = nullptr;
  if (GetArena() == nullptr && updatedmetadata_ != nullptr) {
    delete updatedmetadata_;
  }
  updatedmetadata_ = nullptr;
  confidence_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoRegistration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.Lattice lattice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lattice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.UasMetadata updatedMetadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatedmetadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoRegistration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.GeoRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.Lattice lattice = 1;
  if (this->has_lattice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lattice(this), target, stream);
  }

  // double confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_confidence(), target);
  }

  // .aip.processor.v2.UasMetadata updatedMetadata = 3;
  if (this->has_updatedmetadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::updatedmetadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.GeoRegistration)
  return target;
}

size_t GeoRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.GeoRegistration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aip.processor.v2.Lattice lattice = 1;
  if (this->has_lattice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lattice_);
  }

  // .aip.processor.v2.UasMetadata updatedMetadata = 3;
  if (this->has_updatedmetadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updatedmetadata_);
  }

  // double confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoRegistration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.GeoRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoRegistration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoRegistration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.GeoRegistration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.GeoRegistration)
    MergeFrom(*source);
  }
}

void GeoRegistration::MergeFrom(const GeoRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.GeoRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lattice()) {
    _internal_mutable_lattice()->::aip::processor::v2::Lattice::MergeFrom(from._internal_lattice());
  }
  if (from.has_updatedmetadata()) {
    _internal_mutable_updatedmetadata()->::aip::processor::v2::UasMetadata::MergeFrom(from._internal_updatedmetadata());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void GeoRegistration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.GeoRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoRegistration::CopyFrom(const GeoRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.GeoRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoRegistration::IsInitialized() const {
  return true;
}

void GeoRegistration::InternalSwap(GeoRegistration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoRegistration, confidence_)
      + sizeof(GeoRegistration::confidence_)
      - PROTOBUF_FIELD_OFFSET(GeoRegistration, lattice_)>(
          reinterpret_cast<char*>(&lattice_),
          reinterpret_cast<char*>(&other->lattice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoRegistration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Inferences::InitAsDefaultInstance() {
}
class Inferences::_Internal {
 public:
};

Inferences::Inferences(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.Inferences)
}
Inferences::Inferences(const Inferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inference_(from.inference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.Inferences)
}

void Inferences::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Inferences_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
}

Inferences::~Inferences() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.Inferences)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Inferences::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Inferences::ArenaDtor(void* object) {
  Inferences* _this = reinterpret_cast< Inferences* >(object);
  (void)_this;
}
void Inferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Inferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Inferences& Inferences::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Inferences_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void Inferences::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.Inferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inference_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Inferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .aip.processor.v2.Inference inference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Inferences::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.Inferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aip.processor.v2.Inference inference = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_inference(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.Inferences)
  return target;
}

size_t Inferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.Inferences)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aip.processor.v2.Inference inference = 1;
  total_size += 1UL * this->_internal_inference_size();
  for (const auto& msg : this->inference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Inferences::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.Inferences)
  GOOGLE_DCHECK_NE(&from, this);
  const Inferences* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Inferences>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.Inferences)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.Inferences)
    MergeFrom(*source);
  }
}

void Inferences::MergeFrom(const Inferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.Inferences)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inference_.MergeFrom(from.inference_);
}

void Inferences::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.Inferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inferences::CopyFrom(const Inferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.Inferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inferences::IsInitialized() const {
  return true;
}

void Inferences::InternalSwap(Inferences* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inference_.InternalSwap(&other->inference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Inferences::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Inference::InitAsDefaultInstance() {
  ::aip::processor::v2::_Inference_default_instance_.box_ = const_cast< ::aip::processor::v2::BoundingBox*>(
      ::aip::processor::v2::BoundingBox::internal_default_instance());
  ::aip::processor::v2::_Inference_default_instance_.polygon_ = const_cast< ::aip::processor::v2::BoundingPolygon*>(
      ::aip::processor::v2::BoundingPolygon::internal_default_instance());
  ::aip::processor::v2::_Inference_default_instance_.geo_box_ = const_cast< ::aip::processor::v2::GeoBoundingBox*>(
      ::aip::processor::v2::GeoBoundingBox::internal_default_instance());
  ::aip::processor::v2::_Inference_default_instance_.geo_polygon_ = const_cast< ::aip::processor::v2::GeoBoundingPolygon*>(
      ::aip::processor::v2::GeoBoundingPolygon::internal_default_instance());
  ::aip::processor::v2::_Inference_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::aip::processor::v2::Velocity*>(
      ::aip::processor::v2::Velocity::internal_default_instance());
}
class Inference::_Internal {
 public:
  static const ::aip::processor::v2::BoundingBox& box(const Inference* msg);
  static const ::aip::processor::v2::BoundingPolygon& polygon(const Inference* msg);
  static const ::aip::processor::v2::GeoBoundingBox& geo_box(const Inference* msg);
  static const ::aip::processor::v2::GeoBoundingPolygon& geo_polygon(const Inference* msg);
  static const ::aip::processor::v2::Velocity& velocity(const Inference* msg);
};

const ::aip::processor::v2::BoundingBox&
Inference::_Internal::box(const Inference* msg) {
  return *msg->inference_.box_;
}
const ::aip::processor::v2::BoundingPolygon&
Inference::_Internal::polygon(const Inference* msg) {
  return *msg->inference_.polygon_;
}
const ::aip::processor::v2::GeoBoundingBox&
Inference::_Internal::geo_box(const Inference* msg) {
  return *msg->inference_.geo_box_;
}
const ::aip::processor::v2::GeoBoundingPolygon&
Inference::_Internal::geo_polygon(const Inference* msg) {
  return *msg->inference_.geo_polygon_;
}
const ::aip::processor::v2::Velocity&
Inference::_Internal::velocity(const Inference* msg) {
  return *msg->velocity_;
}
void Inference::set_allocated_box(::aip::processor::v2::BoundingBox* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inference();
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(box);
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    set_has_box();
    inference_.box_ = box;
  }
  // @@protoc_insertion_point(field_set_allocated:aip.processor.v2.Inference.box)
}
void Inference::set_allocated_polygon(::aip::processor::v2::BoundingPolygon* polygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inference();
  if (polygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(polygon);
    if (message_arena != submessage_arena) {
      polygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
    inference_.polygon_ = polygon;
  }
  // @@protoc_insertion_point(field_set_allocated:aip.processor.v2.Inference.polygon)
}
void Inference::set_allocated_geo_box(::aip::processor::v2::GeoBoundingBox* geo_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inference();
  if (geo_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geo_box);
    if (message_arena != submessage_arena) {
      geo_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo_box, submessage_arena);
    }
    set_has_geo_box();
    inference_.geo_box_ = geo_box;
  }
  // @@protoc_insertion_point(field_set_allocated:aip.processor.v2.Inference.geo_box)
}
void Inference::set_allocated_geo_polygon(::aip::processor::v2::GeoBoundingPolygon* geo_polygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inference();
  if (geo_polygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geo_polygon);
    if (message_arena != submessage_arena) {
      geo_polygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo_polygon, submessage_arena);
    }
    set_has_geo_polygon();
    inference_.geo_polygon_ = geo_polygon;
  }
  // @@protoc_insertion_point(field_set_allocated:aip.processor.v2.Inference.geo_polygon)
}
Inference::Inference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.Inference)
}
Inference::Inference(const Inference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inferenceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inferenceid().empty()) {
    inferenceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_inferenceid(),
      GetArena());
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::aip::processor::v2::Velocity(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  clear_has_inference();
  switch (from.inference_case()) {
    case kBox: {
      _internal_mutable_box()->::aip::processor::v2::BoundingBox::MergeFrom(from._internal_box());
      break;
    }
    case kPolygon: {
      _internal_mutable_polygon()->::aip::processor::v2::BoundingPolygon::MergeFrom(from._internal_polygon());
      break;
    }
    case kGeoBox: {
      _internal_mutable_geo_box()->::aip::processor::v2::GeoBoundingBox::MergeFrom(from._internal_geo_box());
      break;
    }
    case kGeoPolygon: {
      _internal_mutable_geo_polygon()->::aip::processor::v2::GeoBoundingPolygon::MergeFrom(from._internal_geo_polygon());
      break;
    }
    case INFERENCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.Inference)
}

void Inference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Inference_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  inferenceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  velocity_ = nullptr;
  clear_has_inference();
}

Inference::~Inference() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.Inference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Inference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  inferenceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete velocity_;
  if (has_inference()) {
    clear_inference();
  }
}

void Inference::ArenaDtor(void* object) {
  Inference* _this = reinterpret_cast< Inference* >(object);
  (void)_this;
}
void Inference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Inference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Inference& Inference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Inference_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void Inference::clear_inference() {
// @@protoc_insertion_point(one_of_clear_start:aip.processor.v2.Inference)
  switch (inference_case()) {
    case kBox: {
      if (GetArena() == nullptr) {
        delete inference_.box_;
      }
      break;
    }
    case kPolygon: {
      if (GetArena() == nullptr) {
        delete inference_.polygon_;
      }
      break;
    }
    case kGeoBox: {
      if (GetArena() == nullptr) {
        delete inference_.geo_box_;
      }
      break;
    }
    case kGeoPolygon: {
      if (GetArena() == nullptr) {
        delete inference_.geo_polygon_;
      }
      break;
    }
    case INFERENCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INFERENCE_NOT_SET;
}


void Inference::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.Inference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inferenceid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  clear_inference();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Inference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string inferenceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_inferenceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aip.processor.v2.Inference.inferenceId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.BoundingBox box = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.BoundingPolygon polygon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.Velocity velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.GeoBoundingBox geo_box = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.GeoBoundingPolygon geo_polygon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_polygon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Inference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.Inference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string inferenceId = 1;
  if (this->inferenceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inferenceid().data(), static_cast<int>(this->_internal_inferenceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aip.processor.v2.Inference.inferenceId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_inferenceid(), target);
  }

  // .aip.processor.v2.BoundingBox box = 2;
  if (_internal_has_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::box(this), target, stream);
  }

  // .aip.processor.v2.BoundingPolygon polygon = 3;
  if (_internal_has_polygon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::polygon(this), target, stream);
  }

  // .aip.processor.v2.Velocity velocity = 4;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::velocity(this), target, stream);
  }

  // .aip.processor.v2.GeoBoundingBox geo_box = 5;
  if (_internal_has_geo_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::geo_box(this), target, stream);
  }

  // .aip.processor.v2.GeoBoundingPolygon geo_polygon = 6;
  if (_internal_has_geo_polygon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::geo_polygon(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.Inference)
  return target;
}

size_t Inference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.Inference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string inferenceId = 1;
  if (this->inferenceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inferenceid());
  }

  // .aip.processor.v2.Velocity velocity = 4;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  switch (inference_case()) {
    // .aip.processor.v2.BoundingBox box = 2;
    case kBox: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inference_.box_);
      break;
    }
    // .aip.processor.v2.BoundingPolygon polygon = 3;
    case kPolygon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inference_.polygon_);
      break;
    }
    // .aip.processor.v2.GeoBoundingBox geo_box = 5;
    case kGeoBox: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inference_.geo_box_);
      break;
    }
    // .aip.processor.v2.GeoBoundingPolygon geo_polygon = 6;
    case kGeoPolygon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inference_.geo_polygon_);
      break;
    }
    case INFERENCE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Inference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.Inference)
  GOOGLE_DCHECK_NE(&from, this);
  const Inference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Inference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.Inference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.Inference)
    MergeFrom(*source);
  }
}

void Inference::MergeFrom(const Inference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.Inference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inferenceid().size() > 0) {
    _internal_set_inferenceid(from._internal_inferenceid());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::aip::processor::v2::Velocity::MergeFrom(from._internal_velocity());
  }
  switch (from.inference_case()) {
    case kBox: {
      _internal_mutable_box()->::aip::processor::v2::BoundingBox::MergeFrom(from._internal_box());
      break;
    }
    case kPolygon: {
      _internal_mutable_polygon()->::aip::processor::v2::BoundingPolygon::MergeFrom(from._internal_polygon());
      break;
    }
    case kGeoBox: {
      _internal_mutable_geo_box()->::aip::processor::v2::GeoBoundingBox::MergeFrom(from._internal_geo_box());
      break;
    }
    case kGeoPolygon: {
      _internal_mutable_geo_polygon()->::aip::processor::v2::GeoBoundingPolygon::MergeFrom(from._internal_geo_polygon());
      break;
    }
    case INFERENCE_NOT_SET: {
      break;
    }
  }
}

void Inference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.Inference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inference::CopyFrom(const Inference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.Inference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inference::IsInitialized() const {
  return true;
}

void Inference::InternalSwap(Inference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inferenceid_.Swap(&other->inferenceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(velocity_, other->velocity_);
  swap(inference_, other->inference_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Inference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoCoordinate::InitAsDefaultInstance() {
}
class GeoCoordinate::_Internal {
 public:
};

GeoCoordinate::GeoCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.GeoCoordinate)
}
GeoCoordinate::GeoCoordinate(const GeoCoordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.GeoCoordinate)
}

void GeoCoordinate::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

GeoCoordinate::~GeoCoordinate() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.GeoCoordinate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoCoordinate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GeoCoordinate::ArenaDtor(void* object) {
  GeoCoordinate* _this = reinterpret_cast< GeoCoordinate* >(object);
  (void)_this;
}
void GeoCoordinate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoCoordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoCoordinate& GeoCoordinate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void GeoCoordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.GeoCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoCoordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoCoordinate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.GeoCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.GeoCoordinate)
  return target;
}

size_t GeoCoordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.GeoCoordinate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoCoordinate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.GeoCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoCoordinate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoCoordinate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.GeoCoordinate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.GeoCoordinate)
    MergeFrom(*source);
  }
}

void GeoCoordinate::MergeFrom(const GeoCoordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.GeoCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
}

void GeoCoordinate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.GeoCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoCoordinate::CopyFrom(const GeoCoordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.GeoCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoCoordinate::IsInitialized() const {
  return true;
}

void GeoCoordinate::InternalSwap(GeoCoordinate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoCoordinate, longitude_)
      + sizeof(GeoCoordinate::longitude_)
      - PROTOBUF_FIELD_OFFSET(GeoCoordinate, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoCoordinate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundingBox::InitAsDefaultInstance() {
  ::aip::processor::v2::_BoundingBox_default_instance_._instance.get_mutable()->c0_ = const_cast< ::aip::processor::v2::UnitCoordinate*>(
      ::aip::processor::v2::UnitCoordinate::internal_default_instance());
  ::aip::processor::v2::_BoundingBox_default_instance_._instance.get_mutable()->c1_ = const_cast< ::aip::processor::v2::UnitCoordinate*>(
      ::aip::processor::v2::UnitCoordinate::internal_default_instance());
}
class BoundingBox::_Internal {
 public:
  static const ::aip::processor::v2::UnitCoordinate& c0(const BoundingBox* msg);
  static const ::aip::processor::v2::UnitCoordinate& c1(const BoundingBox* msg);
};

const ::aip::processor::v2::UnitCoordinate&
BoundingBox::_Internal::c0(const BoundingBox* msg) {
  return *msg->c0_;
}
const ::aip::processor::v2::UnitCoordinate&
BoundingBox::_Internal::c1(const BoundingBox* msg) {
  return *msg->c1_;
}
BoundingBox::BoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  classifications_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.BoundingBox)
}
BoundingBox::BoundingBox(const BoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      classifications_(from.classifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_c0()) {
    c0_ = new ::aip::processor::v2::UnitCoordinate(*from.c0_);
  } else {
    c0_ = nullptr;
  }
  if (from._internal_has_c1()) {
    c1_ = new ::aip::processor::v2::UnitCoordinate(*from.c1_);
  } else {
    c1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.BoundingBox)
}

void BoundingBox::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  ::memset(&c0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c1_) -
      reinterpret_cast<char*>(&c0_)) + sizeof(c1_));
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.BoundingBox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundingBox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete c0_;
  if (this != internal_default_instance()) delete c1_;
}

void BoundingBox::ArenaDtor(void* object) {
  BoundingBox* _this = reinterpret_cast< BoundingBox* >(object);
  (void)_this;
}
void BoundingBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundingBox& BoundingBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifications_.Clear();
  if (GetArena() == nullptr && c0_ != nullptr) {
    delete c0_;
  }
  c0_ = nullptr;
  if (GetArena() == nullptr && c1_ != nullptr) {
    delete c1_;
  }
  c1_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.UnitCoordinate c0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_c0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.UnitCoordinate c1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_c1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aip.processor.v2.Classification classifications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.UnitCoordinate c0 = 1;
  if (this->has_c0()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::c0(this), target, stream);
  }

  // .aip.processor.v2.UnitCoordinate c1 = 2;
  if (this->has_c1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::c1(this), target, stream);
  }

  // repeated .aip.processor.v2.Classification classifications = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_classifications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_classifications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.BoundingBox)
  return target;
}

size_t BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.BoundingBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aip.processor.v2.Classification classifications = 3;
  total_size += 1UL * this->_internal_classifications_size();
  for (const auto& msg : this->classifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .aip.processor.v2.UnitCoordinate c0 = 1;
  if (this->has_c0()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *c0_);
  }

  // .aip.processor.v2.UnitCoordinate c1 = 2;
  if (this->has_c1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *c1_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundingBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.BoundingBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.BoundingBox)
    MergeFrom(*source);
  }
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classifications_.MergeFrom(from.classifications_);
  if (from.has_c0()) {
    _internal_mutable_c0()->::aip::processor::v2::UnitCoordinate::MergeFrom(from._internal_c0());
  }
  if (from.has_c1()) {
    _internal_mutable_c1()->::aip::processor::v2::UnitCoordinate::MergeFrom(from._internal_c1());
  }
}

void BoundingBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  return true;
}

void BoundingBox::InternalSwap(BoundingBox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  classifications_.InternalSwap(&other->classifications_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox, c1_)
      + sizeof(BoundingBox::c1_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox, c0_)>(
          reinterpret_cast<char*>(&c0_),
          reinterpret_cast<char*>(&other->c0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoBoundingBox::InitAsDefaultInstance() {
  ::aip::processor::v2::_GeoBoundingBox_default_instance_._instance.get_mutable()->c0_ = const_cast< ::aip::processor::v2::GeoCoordinate*>(
      ::aip::processor::v2::GeoCoordinate::internal_default_instance());
  ::aip::processor::v2::_GeoBoundingBox_default_instance_._instance.get_mutable()->c1_ = const_cast< ::aip::processor::v2::GeoCoordinate*>(
      ::aip::processor::v2::GeoCoordinate::internal_default_instance());
}
class GeoBoundingBox::_Internal {
 public:
  static const ::aip::processor::v2::GeoCoordinate& c0(const GeoBoundingBox* msg);
  static const ::aip::processor::v2::GeoCoordinate& c1(const GeoBoundingBox* msg);
};

const ::aip::processor::v2::GeoCoordinate&
GeoBoundingBox::_Internal::c0(const GeoBoundingBox* msg) {
  return *msg->c0_;
}
const ::aip::processor::v2::GeoCoordinate&
GeoBoundingBox::_Internal::c1(const GeoBoundingBox* msg) {
  return *msg->c1_;
}
GeoBoundingBox::GeoBoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  classifications_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.GeoBoundingBox)
}
GeoBoundingBox::GeoBoundingBox(const GeoBoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      classifications_(from.classifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_c0()) {
    c0_ = new ::aip::processor::v2::GeoCoordinate(*from.c0_);
  } else {
    c0_ = nullptr;
  }
  if (from._internal_has_c1()) {
    c1_ = new ::aip::processor::v2::GeoCoordinate(*from.c1_);
  } else {
    c1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.GeoBoundingBox)
}

void GeoBoundingBox::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoBoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  ::memset(&c0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c1_) -
      reinterpret_cast<char*>(&c0_)) + sizeof(c1_));
}

GeoBoundingBox::~GeoBoundingBox() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.GeoBoundingBox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoBoundingBox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete c0_;
  if (this != internal_default_instance()) delete c1_;
}

void GeoBoundingBox::ArenaDtor(void* object) {
  GeoBoundingBox* _this = reinterpret_cast< GeoBoundingBox* >(object);
  (void)_this;
}
void GeoBoundingBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoBoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoBoundingBox& GeoBoundingBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoBoundingBox_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void GeoBoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.GeoBoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifications_.Clear();
  if (GetArena() == nullptr && c0_ != nullptr) {
    delete c0_;
  }
  c0_ = nullptr;
  if (GetArena() == nullptr && c1_ != nullptr) {
    delete c1_;
  }
  c1_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoBoundingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.GeoCoordinate c0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_c0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.GeoCoordinate c1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_c1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aip.processor.v2.Classification classifications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoBoundingBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.GeoBoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.GeoCoordinate c0 = 1;
  if (this->has_c0()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::c0(this), target, stream);
  }

  // .aip.processor.v2.GeoCoordinate c1 = 2;
  if (this->has_c1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::c1(this), target, stream);
  }

  // repeated .aip.processor.v2.Classification classifications = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_classifications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_classifications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.GeoBoundingBox)
  return target;
}

size_t GeoBoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.GeoBoundingBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aip.processor.v2.Classification classifications = 3;
  total_size += 1UL * this->_internal_classifications_size();
  for (const auto& msg : this->classifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .aip.processor.v2.GeoCoordinate c0 = 1;
  if (this->has_c0()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *c0_);
  }

  // .aip.processor.v2.GeoCoordinate c1 = 2;
  if (this->has_c1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *c1_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoBoundingBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.GeoBoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoBoundingBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoBoundingBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.GeoBoundingBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.GeoBoundingBox)
    MergeFrom(*source);
  }
}

void GeoBoundingBox::MergeFrom(const GeoBoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.GeoBoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classifications_.MergeFrom(from.classifications_);
  if (from.has_c0()) {
    _internal_mutable_c0()->::aip::processor::v2::GeoCoordinate::MergeFrom(from._internal_c0());
  }
  if (from.has_c1()) {
    _internal_mutable_c1()->::aip::processor::v2::GeoCoordinate::MergeFrom(from._internal_c1());
  }
}

void GeoBoundingBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.GeoBoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoBoundingBox::CopyFrom(const GeoBoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.GeoBoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoBoundingBox::IsInitialized() const {
  return true;
}

void GeoBoundingBox::InternalSwap(GeoBoundingBox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  classifications_.InternalSwap(&other->classifications_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoBoundingBox, c1_)
      + sizeof(GeoBoundingBox::c1_)
      - PROTOBUF_FIELD_OFFSET(GeoBoundingBox, c0_)>(
          reinterpret_cast<char*>(&c0_),
          reinterpret_cast<char*>(&other->c0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoBoundingBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundingPolygon::InitAsDefaultInstance() {
  ::aip::processor::v2::_BoundingPolygon_default_instance_._instance.get_mutable()->polygon_ = const_cast< ::aip::processor::v2::Polygon*>(
      ::aip::processor::v2::Polygon::internal_default_instance());
}
class BoundingPolygon::_Internal {
 public:
  static const ::aip::processor::v2::Polygon& polygon(const BoundingPolygon* msg);
};

const ::aip::processor::v2::Polygon&
BoundingPolygon::_Internal::polygon(const BoundingPolygon* msg) {
  return *msg->polygon_;
}
BoundingPolygon::BoundingPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  classifications_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.BoundingPolygon)
}
BoundingPolygon::BoundingPolygon(const BoundingPolygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      classifications_(from.classifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_polygon()) {
    polygon_ = new ::aip::processor::v2::Polygon(*from.polygon_);
  } else {
    polygon_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.BoundingPolygon)
}

void BoundingPolygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  polygon_ = nullptr;
}

BoundingPolygon::~BoundingPolygon() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.BoundingPolygon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundingPolygon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete polygon_;
}

void BoundingPolygon::ArenaDtor(void* object) {
  BoundingPolygon* _this = reinterpret_cast< BoundingPolygon* >(object);
  (void)_this;
}
void BoundingPolygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingPolygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundingPolygon& BoundingPolygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void BoundingPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.BoundingPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifications_.Clear();
  if (GetArena() == nullptr && polygon_ != nullptr) {
    delete polygon_;
  }
  polygon_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundingPolygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.Polygon polygon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aip.processor.v2.Classification classifications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingPolygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.BoundingPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.Polygon polygon = 1;
  if (this->has_polygon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::polygon(this), target, stream);
  }

  // repeated .aip.processor.v2.Classification classifications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_classifications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_classifications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.BoundingPolygon)
  return target;
}

size_t BoundingPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.BoundingPolygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aip.processor.v2.Classification classifications = 2;
  total_size += 1UL * this->_internal_classifications_size();
  for (const auto& msg : this->classifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .aip.processor.v2.Polygon polygon = 1;
  if (this->has_polygon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *polygon_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingPolygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.BoundingPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingPolygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundingPolygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.BoundingPolygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.BoundingPolygon)
    MergeFrom(*source);
  }
}

void BoundingPolygon::MergeFrom(const BoundingPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.BoundingPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classifications_.MergeFrom(from.classifications_);
  if (from.has_polygon()) {
    _internal_mutable_polygon()->::aip::processor::v2::Polygon::MergeFrom(from._internal_polygon());
  }
}

void BoundingPolygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.BoundingPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingPolygon::CopyFrom(const BoundingPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.BoundingPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingPolygon::IsInitialized() const {
  return true;
}

void BoundingPolygon::InternalSwap(BoundingPolygon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  classifications_.InternalSwap(&other->classifications_);
  swap(polygon_, other->polygon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingPolygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoBoundingPolygon::InitAsDefaultInstance() {
  ::aip::processor::v2::_GeoBoundingPolygon_default_instance_._instance.get_mutable()->polygon_ = const_cast< ::aip::processor::v2::GeoPolygon*>(
      ::aip::processor::v2::GeoPolygon::internal_default_instance());
}
class GeoBoundingPolygon::_Internal {
 public:
  static const ::aip::processor::v2::GeoPolygon& polygon(const GeoBoundingPolygon* msg);
};

const ::aip::processor::v2::GeoPolygon&
GeoBoundingPolygon::_Internal::polygon(const GeoBoundingPolygon* msg) {
  return *msg->polygon_;
}
GeoBoundingPolygon::GeoBoundingPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  classifications_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.GeoBoundingPolygon)
}
GeoBoundingPolygon::GeoBoundingPolygon(const GeoBoundingPolygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      classifications_(from.classifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_polygon()) {
    polygon_ = new ::aip::processor::v2::GeoPolygon(*from.polygon_);
  } else {
    polygon_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.GeoBoundingPolygon)
}

void GeoBoundingPolygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoBoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  polygon_ = nullptr;
}

GeoBoundingPolygon::~GeoBoundingPolygon() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.GeoBoundingPolygon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoBoundingPolygon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete polygon_;
}

void GeoBoundingPolygon::ArenaDtor(void* object) {
  GeoBoundingPolygon* _this = reinterpret_cast< GeoBoundingPolygon* >(object);
  (void)_this;
}
void GeoBoundingPolygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoBoundingPolygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoBoundingPolygon& GeoBoundingPolygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoBoundingPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void GeoBoundingPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.GeoBoundingPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifications_.Clear();
  if (GetArena() == nullptr && polygon_ != nullptr) {
    delete polygon_;
  }
  polygon_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoBoundingPolygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.GeoPolygon polygon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aip.processor.v2.Classification classifications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoBoundingPolygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.GeoBoundingPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.GeoPolygon polygon = 1;
  if (this->has_polygon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::polygon(this), target, stream);
  }

  // repeated .aip.processor.v2.Classification classifications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_classifications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_classifications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.GeoBoundingPolygon)
  return target;
}

size_t GeoBoundingPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.GeoBoundingPolygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aip.processor.v2.Classification classifications = 2;
  total_size += 1UL * this->_internal_classifications_size();
  for (const auto& msg : this->classifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .aip.processor.v2.GeoPolygon polygon = 1;
  if (this->has_polygon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *polygon_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoBoundingPolygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.GeoBoundingPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoBoundingPolygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoBoundingPolygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.GeoBoundingPolygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.GeoBoundingPolygon)
    MergeFrom(*source);
  }
}

void GeoBoundingPolygon::MergeFrom(const GeoBoundingPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.GeoBoundingPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classifications_.MergeFrom(from.classifications_);
  if (from.has_polygon()) {
    _internal_mutable_polygon()->::aip::processor::v2::GeoPolygon::MergeFrom(from._internal_polygon());
  }
}

void GeoBoundingPolygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.GeoBoundingPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoBoundingPolygon::CopyFrom(const GeoBoundingPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.GeoBoundingPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoBoundingPolygon::IsInitialized() const {
  return true;
}

void GeoBoundingPolygon::InternalSwap(GeoBoundingPolygon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  classifications_.InternalSwap(&other->classifications_);
  swap(polygon_, other->polygon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoBoundingPolygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Polygon::InitAsDefaultInstance() {
}
class Polygon::_Internal {
 public:
};

Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vertices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.Polygon)
}

void Polygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Polygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.Polygon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Polygon::ArenaDtor(void* object) {
  Polygon* _this = reinterpret_cast< Polygon* >(object);
  (void)_this;
}
void Polygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Polygon& Polygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Polygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .aip.processor.v2.UnitCoordinate vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aip.processor.v2.UnitCoordinate vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.Polygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aip.processor.v2.UnitCoordinate vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Polygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.Polygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
}

void Polygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoPolygon::InitAsDefaultInstance() {
}
class GeoPolygon::_Internal {
 public:
};

GeoPolygon::GeoPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vertices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.GeoPolygon)
}
GeoPolygon::GeoPolygon(const GeoPolygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.GeoPolygon)
}

void GeoPolygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
}

GeoPolygon::~GeoPolygon() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.GeoPolygon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoPolygon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GeoPolygon::ArenaDtor(void* object) {
  GeoPolygon* _this = reinterpret_cast< GeoPolygon* >(object);
  (void)_this;
}
void GeoPolygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoPolygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoPolygon& GeoPolygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoPolygon_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void GeoPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.GeoPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoPolygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .aip.processor.v2.GeoCoordinate vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoPolygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.GeoPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aip.processor.v2.GeoCoordinate vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.GeoPolygon)
  return target;
}

size_t GeoPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.GeoPolygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aip.processor.v2.GeoCoordinate vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoPolygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.GeoPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoPolygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoPolygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.GeoPolygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.GeoPolygon)
    MergeFrom(*source);
  }
}

void GeoPolygon::MergeFrom(const GeoPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.GeoPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
}

void GeoPolygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.GeoPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoPolygon::CopyFrom(const GeoPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.GeoPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPolygon::IsInitialized() const {
  return true;
}

void GeoPolygon::InternalSwap(GeoPolygon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPolygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnitCoordinate::InitAsDefaultInstance() {
}
class UnitCoordinate::_Internal {
 public:
};

UnitCoordinate::UnitCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.UnitCoordinate)
}
UnitCoordinate::UnitCoordinate(const UnitCoordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&row_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.UnitCoordinate)
}

void UnitCoordinate::SharedCtor() {
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&row_)) + sizeof(col_));
}

UnitCoordinate::~UnitCoordinate() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.UnitCoordinate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnitCoordinate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnitCoordinate::ArenaDtor(void* object) {
  UnitCoordinate* _this = reinterpret_cast< UnitCoordinate* >(object);
  (void)_this;
}
void UnitCoordinate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitCoordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnitCoordinate& UnitCoordinate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnitCoordinate_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void UnitCoordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.UnitCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&row_)) + sizeof(col_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitCoordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitCoordinate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.UnitCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double row = 1;
  if (!(this->row() <= 0 && this->row() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_row(), target);
  }

  // double col = 2;
  if (!(this->col() <= 0 && this->col() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_col(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.UnitCoordinate)
  return target;
}

size_t UnitCoordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.UnitCoordinate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double row = 1;
  if (!(this->row() <= 0 && this->row() >= 0)) {
    total_size += 1 + 8;
  }

  // double col = 2;
  if (!(this->col() <= 0 && this->col() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitCoordinate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.UnitCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitCoordinate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnitCoordinate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.UnitCoordinate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.UnitCoordinate)
    MergeFrom(*source);
  }
}

void UnitCoordinate::MergeFrom(const UnitCoordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.UnitCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.row() <= 0 && from.row() >= 0)) {
    _internal_set_row(from._internal_row());
  }
  if (!(from.col() <= 0 && from.col() >= 0)) {
    _internal_set_col(from._internal_col());
  }
}

void UnitCoordinate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.UnitCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitCoordinate::CopyFrom(const UnitCoordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.UnitCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitCoordinate::IsInitialized() const {
  return true;
}

void UnitCoordinate::InternalSwap(UnitCoordinate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnitCoordinate, col_)
      + sizeof(UnitCoordinate::col_)
      - PROTOBUF_FIELD_OFFSET(UnitCoordinate, row_)>(
          reinterpret_cast<char*>(&row_),
          reinterpret_cast<char*>(&other->row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitCoordinate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Classification::InitAsDefaultInstance() {
}
class Classification::_Internal {
 public:
};

Classification::Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.Classification)
}
Classification::Classification(const Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.Classification)
}

void Classification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Classification_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
}

Classification::~Classification() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.Classification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Classification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Classification::ArenaDtor(void* object) {
  Classification* _this = reinterpret_cast< Classification* >(object);
  (void)_this;
}
void Classification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Classification& Classification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Classification_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  confidence_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Classification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aip.processor.v2.Classification.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Classification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aip.processor.v2.Classification.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // double confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.Classification)
  return target;
}

size_t Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.Classification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // double confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Classification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const Classification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Classification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.Classification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.Classification)
    MergeFrom(*source);
  }
}

void Classification::MergeFrom(const Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void Classification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Classification::CopyFrom(const Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Classification::IsInitialized() const {
  return true;
}

void Classification::InternalSwap(Classification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Classification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Lattice_Point::InitAsDefaultInstance() {
  ::aip::processor::v2::_Lattice_Point_default_instance_._instance.get_mutable()->coordinate_ = const_cast< ::aip::processor::v2::UnitCoordinate*>(
      ::aip::processor::v2::UnitCoordinate::internal_default_instance());
}
class Lattice_Point::_Internal {
 public:
  static const ::aip::processor::v2::UnitCoordinate& coordinate(const Lattice_Point* msg);
};

const ::aip::processor::v2::UnitCoordinate&
Lattice_Point::_Internal::coordinate(const Lattice_Point* msg) {
  return *msg->coordinate_;
}
Lattice_Point::Lattice_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.Lattice.Point)
}
Lattice_Point::Lattice_Point(const Lattice_Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coordinate()) {
    coordinate_ = new ::aip::processor::v2::UnitCoordinate(*from.coordinate_);
  } else {
    coordinate_ = nullptr;
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&elevation_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(elevation_));
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.Lattice.Point)
}

void Lattice_Point::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lattice_Point_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  ::memset(&coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elevation_) -
      reinterpret_cast<char*>(&coordinate_)) + sizeof(elevation_));
}

Lattice_Point::~Lattice_Point() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.Lattice.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Lattice_Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete coordinate_;
}

void Lattice_Point::ArenaDtor(void* object) {
  Lattice_Point* _this = reinterpret_cast< Lattice_Point* >(object);
  (void)_this;
}
void Lattice_Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lattice_Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lattice_Point& Lattice_Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lattice_Point_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void Lattice_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.Lattice.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elevation_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(elevation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lattice_Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.UnitCoordinate coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double elevation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          elevation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lattice_Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.Lattice.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.UnitCoordinate coordinate = 1;
  if (this->has_coordinate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coordinate(this), target, stream);
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  // double longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_longitude(), target);
  }

  // double elevation = 4;
  if (!(this->elevation() <= 0 && this->elevation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_elevation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.Lattice.Point)
  return target;
}

size_t Lattice_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.Lattice.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aip.processor.v2.UnitCoordinate coordinate = 1;
  if (this->has_coordinate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinate_);
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double elevation = 4;
  if (!(this->elevation() <= 0 && this->elevation() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lattice_Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.Lattice.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Lattice_Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lattice_Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.Lattice.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.Lattice.Point)
    MergeFrom(*source);
  }
}

void Lattice_Point::MergeFrom(const Lattice_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.Lattice.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_coordinate()) {
    _internal_mutable_coordinate()->::aip::processor::v2::UnitCoordinate::MergeFrom(from._internal_coordinate());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.elevation() <= 0 && from.elevation() >= 0)) {
    _internal_set_elevation(from._internal_elevation());
  }
}

void Lattice_Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.Lattice.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lattice_Point::CopyFrom(const Lattice_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.Lattice.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lattice_Point::IsInitialized() const {
  return true;
}

void Lattice_Point::InternalSwap(Lattice_Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lattice_Point, elevation_)
      + sizeof(Lattice_Point::elevation_)
      - PROTOBUF_FIELD_OFFSET(Lattice_Point, coordinate_)>(
          reinterpret_cast<char*>(&coordinate_),
          reinterpret_cast<char*>(&other->coordinate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lattice_Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Lattice::InitAsDefaultInstance() {
}
class Lattice::_Internal {
 public:
};

Lattice::Lattice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  earth_intersection_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.Lattice)
}
Lattice::Lattice(const Lattice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      earth_intersection_(from.earth_intersection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.Lattice)
}

void Lattice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lattice_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
}

Lattice::~Lattice() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.Lattice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Lattice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Lattice::ArenaDtor(void* object) {
  Lattice* _this = reinterpret_cast< Lattice* >(object);
  (void)_this;
}
void Lattice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lattice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lattice& Lattice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lattice_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void Lattice::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.Lattice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  earth_intersection_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lattice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .aip.processor.v2.Lattice.Point earth_intersection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_earth_intersection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lattice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.Lattice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aip.processor.v2.Lattice.Point earth_intersection = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_earth_intersection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_earth_intersection(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.Lattice)
  return target;
}

size_t Lattice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.Lattice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aip.processor.v2.Lattice.Point earth_intersection = 1;
  total_size += 1UL * this->_internal_earth_intersection_size();
  for (const auto& msg : this->earth_intersection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lattice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.Lattice)
  GOOGLE_DCHECK_NE(&from, this);
  const Lattice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lattice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.Lattice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.Lattice)
    MergeFrom(*source);
  }
}

void Lattice::MergeFrom(const Lattice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.Lattice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  earth_intersection_.MergeFrom(from.earth_intersection_);
}

void Lattice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.Lattice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lattice::CopyFrom(const Lattice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.Lattice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lattice::IsInitialized() const {
  return true;
}

void Lattice::InternalSwap(Lattice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  earth_intersection_.InternalSwap(&other->earth_intersection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lattice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Velocity::InitAsDefaultInstance() {
  ::aip::processor::v2::_Velocity_default_instance_.pixel_ = const_cast< ::aip::processor::v2::PixelVelocityVector*>(
      ::aip::processor::v2::PixelVelocityVector::internal_default_instance());
}
class Velocity::_Internal {
 public:
  static const ::aip::processor::v2::PixelVelocityVector& pixel(const Velocity* msg);
};

const ::aip::processor::v2::PixelVelocityVector&
Velocity::_Internal::pixel(const Velocity* msg) {
  return *msg->velocity_.pixel_;
}
void Velocity::set_allocated_pixel(::aip::processor::v2::PixelVelocityVector* pixel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_velocity();
  if (pixel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pixel);
    if (message_arena != submessage_arena) {
      pixel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pixel, submessage_arena);
    }
    set_has_pixel();
    velocity_.pixel_ = pixel;
  }
  // @@protoc_insertion_point(field_set_allocated:aip.processor.v2.Velocity.pixel)
}
Velocity::Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.Velocity)
}
Velocity::Velocity(const Velocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_velocity();
  switch (from.velocity_case()) {
    case kPixel: {
      _internal_mutable_pixel()->::aip::processor::v2::PixelVelocityVector::MergeFrom(from._internal_pixel());
      break;
    }
    case VELOCITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.Velocity)
}

void Velocity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Velocity_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  clear_has_velocity();
}

Velocity::~Velocity() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.Velocity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Velocity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_velocity()) {
    clear_velocity();
  }
}

void Velocity::ArenaDtor(void* object) {
  Velocity* _this = reinterpret_cast< Velocity* >(object);
  (void)_this;
}
void Velocity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Velocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Velocity& Velocity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Velocity_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void Velocity::clear_velocity() {
// @@protoc_insertion_point(one_of_clear_start:aip.processor.v2.Velocity)
  switch (velocity_case()) {
    case kPixel: {
      if (GetArena() == nullptr) {
        delete velocity_.pixel_;
      }
      break;
    }
    case VELOCITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VELOCITY_NOT_SET;
}


void Velocity::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_velocity();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Velocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.PixelVelocityVector pixel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pixel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Velocity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.PixelVelocityVector pixel = 4;
  if (_internal_has_pixel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pixel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.Velocity)
  return target;
}

size_t Velocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.Velocity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (velocity_case()) {
    // .aip.processor.v2.PixelVelocityVector pixel = 4;
    case kPixel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_.pixel_);
      break;
    }
    case VELOCITY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Velocity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  const Velocity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Velocity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.Velocity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.Velocity)
    MergeFrom(*source);
  }
}

void Velocity::MergeFrom(const Velocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.velocity_case()) {
    case kPixel: {
      _internal_mutable_pixel()->::aip::processor::v2::PixelVelocityVector::MergeFrom(from._internal_pixel());
      break;
    }
    case VELOCITY_NOT_SET: {
      break;
    }
  }
}

void Velocity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Velocity::CopyFrom(const Velocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Velocity::IsInitialized() const {
  return true;
}

void Velocity::InternalSwap(Velocity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(velocity_, other->velocity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Velocity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PixelVelocityVector::InitAsDefaultInstance() {
}
class PixelVelocityVector::_Internal {
 public:
};

PixelVelocityVector::PixelVelocityVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.PixelVelocityVector)
}
PixelVelocityVector::PixelVelocityVector(const PixelVelocityVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.PixelVelocityVector)
}

void PixelVelocityVector::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

PixelVelocityVector::~PixelVelocityVector() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.PixelVelocityVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PixelVelocityVector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PixelVelocityVector::ArenaDtor(void* object) {
  PixelVelocityVector* _this = reinterpret_cast< PixelVelocityVector* >(object);
  (void)_this;
}
void PixelVelocityVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PixelVelocityVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PixelVelocityVector& PixelVelocityVector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PixelVelocityVector_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void PixelVelocityVector::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.PixelVelocityVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PixelVelocityVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PixelVelocityVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.PixelVelocityVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.PixelVelocityVector)
  return target;
}

size_t PixelVelocityVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.PixelVelocityVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PixelVelocityVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.PixelVelocityVector)
  GOOGLE_DCHECK_NE(&from, this);
  const PixelVelocityVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PixelVelocityVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.PixelVelocityVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.PixelVelocityVector)
    MergeFrom(*source);
  }
}

void PixelVelocityVector::MergeFrom(const PixelVelocityVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.PixelVelocityVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void PixelVelocityVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.PixelVelocityVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PixelVelocityVector::CopyFrom(const PixelVelocityVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.PixelVelocityVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PixelVelocityVector::IsInitialized() const {
  return true;
}

void PixelVelocityVector::InternalSwap(PixelVelocityVector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PixelVelocityVector, y_)
      + sizeof(PixelVelocityVector::y_)
      - PROTOBUF_FIELD_OFFSET(PixelVelocityVector, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PixelVelocityVector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Frame::InitAsDefaultInstance() {
  ::aip::processor::v2::_Frame_default_instance_._instance.get_mutable()->image_ = const_cast< ::aip::processor::v2::Image*>(
      ::aip::processor::v2::Image::internal_default_instance());
  ::aip::processor::v2::_Frame_default_instance_._instance.get_mutable()->uas_metadata_ = const_cast< ::aip::processor::v2::UasMetadata*>(
      ::aip::processor::v2::UasMetadata::internal_default_instance());
}
class Frame::_Internal {
 public:
  static const ::aip::processor::v2::Image& image(const Frame* msg);
  static const ::aip::processor::v2::UasMetadata& uas_metadata(const Frame* msg);
};

const ::aip::processor::v2::Image&
Frame::_Internal::image(const Frame* msg) {
  return *msg->image_;
}
const ::aip::processor::v2::UasMetadata&
Frame::_Internal::uas_metadata(const Frame* msg) {
  return *msg->uas_metadata_;
}
Frame::Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::aip::processor::v2::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from._internal_has_uas_metadata()) {
    uas_metadata_ = new ::aip::processor::v2::UasMetadata(*from.uas_metadata_);
  } else {
    uas_metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.Frame)
}

void Frame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Frame_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uas_metadata_) -
      reinterpret_cast<char*>(&image_)) + sizeof(uas_metadata_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.Frame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete uas_metadata_;
}

void Frame::ArenaDtor(void* object) {
  Frame* _this = reinterpret_cast< Frame* >(object);
  (void)_this;
}
void Frame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Frame& Frame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Frame_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  if (GetArena() == nullptr && uas_metadata_ != nullptr) {
    delete uas_metadata_;
  }
  uas_metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.UasMetadata uas_metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uas_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Frame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.Image image = 1;
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  // .aip.processor.v2.UasMetadata uas_metadata = 2;
  if (this->has_uas_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uas_metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.Frame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aip.processor.v2.Image image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .aip.processor.v2.UasMetadata uas_metadata = 2;
  if (this->has_uas_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uas_metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Frame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.Frame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image()) {
    _internal_mutable_image()->::aip::processor::v2::Image::MergeFrom(from._internal_image());
  }
  if (from.has_uas_metadata()) {
    _internal_mutable_uas_metadata()->::aip::processor::v2::UasMetadata::MergeFrom(from._internal_uas_metadata());
  }
}

void Frame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frame, uas_metadata_)
      + sizeof(Frame::uas_metadata_)
      - PROTOBUF_FIELD_OFFSET(Frame, image_)>(
          reinterpret_cast<char*>(&image_),
          reinterpret_cast<char*>(&other->image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Image::InitAsDefaultInstance() {
  ::aip::processor::v2::_Image_default_instance_.rgb_image_ = const_cast< ::aip::processor::v2::Rgb888Image*>(
      ::aip::processor::v2::Rgb888Image::internal_default_instance());
  ::aip::processor::v2::_Image_default_instance_.png_image_ = const_cast< ::aip::processor::v2::PngImage*>(
      ::aip::processor::v2::PngImage::internal_default_instance());
  ::aip::processor::v2::_Image_default_instance_.tiff_image_ = const_cast< ::aip::processor::v2::TiffImage*>(
      ::aip::processor::v2::TiffImage::internal_default_instance());
  ::aip::processor::v2::_Image_default_instance_.bgr_image_ = const_cast< ::aip::processor::v2::Bgr888Image*>(
      ::aip::processor::v2::Bgr888Image::internal_default_instance());
  ::aip::processor::v2::_Image_default_instance_.nitf21_image_ = const_cast< ::aip::processor::v2::Nitf21Image*>(
      ::aip::processor::v2::Nitf21Image::internal_default_instance());
}
class Image::_Internal {
 public:
  static const ::aip::processor::v2::Rgb888Image& rgb_image(const Image* msg);
  static const ::aip::processor::v2::PngImage& png_image(const Image* msg);
  static const ::aip::processor::v2::TiffImage& tiff_image(const Image* msg);
  static const ::aip::processor::v2::Bgr888Image& bgr_image(const Image* msg);
  static const ::aip::processor::v2::Nitf21Image& nitf21_image(const Image* msg);
};

const ::aip::processor::v2::Rgb888Image&
Image::_Internal::rgb_image(const Image* msg) {
  return *msg->image_.rgb_image_;
}
const ::aip::processor::v2::PngImage&
Image::_Internal::png_image(const Image* msg) {
  return *msg->image_.png_image_;
}
const ::aip::processor::v2::TiffImage&
Image::_Internal::tiff_image(const Image* msg) {
  return *msg->image_.tiff_image_;
}
const ::aip::processor::v2::Bgr888Image&
Image::_Internal::bgr_image(const Image* msg) {
  return *msg->image_.bgr_image_;
}
const ::aip::processor::v2::Nitf21Image&
Image::_Internal::nitf21_image(const Image* msg) {
  return *msg->image_.nitf21_image_;
}
void Image::set_allocated_rgb_image(::aip::processor::v2::Rgb888Image* rgb_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_image();
  if (rgb_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rgb_image);
    if (message_arena != submessage_arena) {
      rgb_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgb_image, submessage_arena);
    }
    set_has_rgb_image();
    image_.rgb_image_ = rgb_image;
  }
  // @@protoc_insertion_point(field_set_allocated:aip.processor.v2.Image.rgb_image)
}
void Image::set_allocated_png_image(::aip::processor::v2::PngImage* png_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_image();
  if (png_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(png_image);
    if (message_arena != submessage_arena) {
      png_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, png_image, submessage_arena);
    }
    set_has_png_image();
    image_.png_image_ = png_image;
  }
  // @@protoc_insertion_point(field_set_allocated:aip.processor.v2.Image.png_image)
}
void Image::set_allocated_tiff_image(::aip::processor::v2::TiffImage* tiff_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_image();
  if (tiff_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tiff_image);
    if (message_arena != submessage_arena) {
      tiff_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tiff_image, submessage_arena);
    }
    set_has_tiff_image();
    image_.tiff_image_ = tiff_image;
  }
  // @@protoc_insertion_point(field_set_allocated:aip.processor.v2.Image.tiff_image)
}
void Image::set_allocated_bgr_image(::aip::processor::v2::Bgr888Image* bgr_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_image();
  if (bgr_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bgr_image);
    if (message_arena != submessage_arena) {
      bgr_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgr_image, submessage_arena);
    }
    set_has_bgr_image();
    image_.bgr_image_ = bgr_image;
  }
  // @@protoc_insertion_point(field_set_allocated:aip.processor.v2.Image.bgr_image)
}
void Image::set_allocated_nitf21_image(::aip::processor::v2::Nitf21Image* nitf21_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_image();
  if (nitf21_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nitf21_image);
    if (message_arena != submessage_arena) {
      nitf21_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nitf21_image, submessage_arena);
    }
    set_has_nitf21_image();
    image_.nitf21_image_ = nitf21_image;
  }
  // @@protoc_insertion_point(field_set_allocated:aip.processor.v2.Image.nitf21_image)
}
Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_image();
  switch (from.image_case()) {
    case kRgbImage: {
      _internal_mutable_rgb_image()->::aip::processor::v2::Rgb888Image::MergeFrom(from._internal_rgb_image());
      break;
    }
    case kPngImage: {
      _internal_mutable_png_image()->::aip::processor::v2::PngImage::MergeFrom(from._internal_png_image());
      break;
    }
    case kTiffImage: {
      _internal_mutable_tiff_image()->::aip::processor::v2::TiffImage::MergeFrom(from._internal_tiff_image());
      break;
    }
    case kBgrImage: {
      _internal_mutable_bgr_image()->::aip::processor::v2::Bgr888Image::MergeFrom(from._internal_bgr_image());
      break;
    }
    case kNitf21Image: {
      _internal_mutable_nitf21_image()->::aip::processor::v2::Nitf21Image::MergeFrom(from._internal_nitf21_image());
      break;
    }
    case IMAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.Image)
}

void Image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  clear_has_image();
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.Image)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_image()) {
    clear_image();
  }
}

void Image::ArenaDtor(void* object) {
  Image* _this = reinterpret_cast< Image* >(object);
  (void)_this;
}
void Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Image& Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void Image::clear_image() {
// @@protoc_insertion_point(one_of_clear_start:aip.processor.v2.Image)
  switch (image_case()) {
    case kRgbImage: {
      if (GetArena() == nullptr) {
        delete image_.rgb_image_;
      }
      break;
    }
    case kPngImage: {
      if (GetArena() == nullptr) {
        delete image_.png_image_;
      }
      break;
    }
    case kTiffImage: {
      if (GetArena() == nullptr) {
        delete image_.tiff_image_;
      }
      break;
    }
    case kBgrImage: {
      if (GetArena() == nullptr) {
        delete image_.bgr_image_;
      }
      break;
    }
    case kNitf21Image: {
      if (GetArena() == nullptr) {
        delete image_.nitf21_image_;
      }
      break;
    }
    case IMAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IMAGE_NOT_SET;
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_image();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.Rgb888Image rgb_image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgb_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.PngImage png_image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_png_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.TiffImage tiff_image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tiff_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.Bgr888Image bgr_image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgr_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.Nitf21Image nitf21_image = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_nitf21_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.Rgb888Image rgb_image = 1;
  if (_internal_has_rgb_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rgb_image(this), target, stream);
  }

  // .aip.processor.v2.PngImage png_image = 2;
  if (_internal_has_png_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::png_image(this), target, stream);
  }

  // .aip.processor.v2.TiffImage tiff_image = 3;
  if (_internal_has_tiff_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tiff_image(this), target, stream);
  }

  // .aip.processor.v2.Bgr888Image bgr_image = 4;
  if (_internal_has_bgr_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bgr_image(this), target, stream);
  }

  // .aip.processor.v2.Nitf21Image nitf21_image = 5;
  if (_internal_has_nitf21_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::nitf21_image(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (image_case()) {
    // .aip.processor.v2.Rgb888Image rgb_image = 1;
    case kRgbImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_.rgb_image_);
      break;
    }
    // .aip.processor.v2.PngImage png_image = 2;
    case kPngImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_.png_image_);
      break;
    }
    // .aip.processor.v2.TiffImage tiff_image = 3;
    case kTiffImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_.tiff_image_);
      break;
    }
    // .aip.processor.v2.Bgr888Image bgr_image = 4;
    case kBgrImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_.bgr_image_);
      break;
    }
    // .aip.processor.v2.Nitf21Image nitf21_image = 5;
    case kNitf21Image: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_.nitf21_image_);
      break;
    }
    case IMAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.image_case()) {
    case kRgbImage: {
      _internal_mutable_rgb_image()->::aip::processor::v2::Rgb888Image::MergeFrom(from._internal_rgb_image());
      break;
    }
    case kPngImage: {
      _internal_mutable_png_image()->::aip::processor::v2::PngImage::MergeFrom(from._internal_png_image());
      break;
    }
    case kTiffImage: {
      _internal_mutable_tiff_image()->::aip::processor::v2::TiffImage::MergeFrom(from._internal_tiff_image());
      break;
    }
    case kBgrImage: {
      _internal_mutable_bgr_image()->::aip::processor::v2::Bgr888Image::MergeFrom(from._internal_bgr_image());
      break;
    }
    case kNitf21Image: {
      _internal_mutable_nitf21_image()->::aip::processor::v2::Nitf21Image::MergeFrom(from._internal_nitf21_image());
      break;
    }
    case IMAGE_NOT_SET: {
      break;
    }
  }
}

void Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(image_, other->image_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rgb888Image::InitAsDefaultInstance() {
}
class Rgb888Image::_Internal {
 public:
};

Rgb888Image::Rgb888Image(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.Rgb888Image)
}
Rgb888Image::Rgb888Image(const Rgb888Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.Rgb888Image)
}

void Rgb888Image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rgb888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Rgb888Image::~Rgb888Image() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.Rgb888Image)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rgb888Image::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Rgb888Image::ArenaDtor(void* object) {
  Rgb888Image* _this = reinterpret_cast< Rgb888Image* >(object);
  (void)_this;
}
void Rgb888Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rgb888Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rgb888Image& Rgb888Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rgb888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void Rgb888Image::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.Rgb888Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rgb888Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aip.processor.v2.Rgb888Image.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rgb888Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.Rgb888Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aip.processor.v2.Rgb888Image.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.Rgb888Image)
  return target;
}

size_t Rgb888Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.Rgb888Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rgb888Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.Rgb888Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Rgb888Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rgb888Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.Rgb888Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.Rgb888Image)
    MergeFrom(*source);
  }
}

void Rgb888Image::MergeFrom(const Rgb888Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.Rgb888Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void Rgb888Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.Rgb888Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rgb888Image::CopyFrom(const Rgb888Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.Rgb888Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rgb888Image::IsInitialized() const {
  return true;
}

void Rgb888Image::InternalSwap(Rgb888Image* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rgb888Image, height_)
      + sizeof(Rgb888Image::height_)
      - PROTOBUF_FIELD_OFFSET(Rgb888Image, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rgb888Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Bgr888Image::InitAsDefaultInstance() {
}
class Bgr888Image::_Internal {
 public:
};

Bgr888Image::Bgr888Image(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.Bgr888Image)
}
Bgr888Image::Bgr888Image(const Bgr888Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.Bgr888Image)
}

void Bgr888Image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Bgr888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Bgr888Image::~Bgr888Image() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.Bgr888Image)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Bgr888Image::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Bgr888Image::ArenaDtor(void* object) {
  Bgr888Image* _this = reinterpret_cast< Bgr888Image* >(object);
  (void)_this;
}
void Bgr888Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bgr888Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bgr888Image& Bgr888Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bgr888Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void Bgr888Image::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.Bgr888Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bgr888Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aip.processor.v2.Bgr888Image.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bgr888Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.Bgr888Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aip.processor.v2.Bgr888Image.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.Bgr888Image)
  return target;
}

size_t Bgr888Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.Bgr888Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bgr888Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.Bgr888Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Bgr888Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bgr888Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.Bgr888Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.Bgr888Image)
    MergeFrom(*source);
  }
}

void Bgr888Image::MergeFrom(const Bgr888Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.Bgr888Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void Bgr888Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.Bgr888Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bgr888Image::CopyFrom(const Bgr888Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.Bgr888Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bgr888Image::IsInitialized() const {
  return true;
}

void Bgr888Image::InternalSwap(Bgr888Image* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bgr888Image, height_)
      + sizeof(Bgr888Image::height_)
      - PROTOBUF_FIELD_OFFSET(Bgr888Image, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Bgr888Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PngImage::InitAsDefaultInstance() {
}
class PngImage::_Internal {
 public:
};

PngImage::PngImage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.PngImage)
}
PngImage::PngImage(const PngImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.PngImage)
}

void PngImage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PngImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

PngImage::~PngImage() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.PngImage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PngImage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PngImage::ArenaDtor(void* object) {
  PngImage* _this = reinterpret_cast< PngImage* >(object);
  (void)_this;
}
void PngImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PngImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PngImage& PngImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PngImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void PngImage::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.PngImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PngImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aip.processor.v2.PngImage.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PngImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.PngImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aip.processor.v2.PngImage.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.PngImage)
  return target;
}

size_t PngImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.PngImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PngImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.PngImage)
  GOOGLE_DCHECK_NE(&from, this);
  const PngImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PngImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.PngImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.PngImage)
    MergeFrom(*source);
  }
}

void PngImage::MergeFrom(const PngImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.PngImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void PngImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.PngImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PngImage::CopyFrom(const PngImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.PngImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PngImage::IsInitialized() const {
  return true;
}

void PngImage::InternalSwap(PngImage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PngImage, height_)
      + sizeof(PngImage::height_)
      - PROTOBUF_FIELD_OFFSET(PngImage, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PngImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TiffImage::InitAsDefaultInstance() {
}
class TiffImage::_Internal {
 public:
};

TiffImage::TiffImage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.TiffImage)
}
TiffImage::TiffImage(const TiffImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.TiffImage)
}

void TiffImage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TiffImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

TiffImage::~TiffImage() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.TiffImage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TiffImage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TiffImage::ArenaDtor(void* object) {
  TiffImage* _this = reinterpret_cast< TiffImage* >(object);
  (void)_this;
}
void TiffImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TiffImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TiffImage& TiffImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TiffImage_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void TiffImage::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.TiffImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TiffImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aip.processor.v2.TiffImage.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TiffImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.TiffImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aip.processor.v2.TiffImage.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.TiffImage)
  return target;
}

size_t TiffImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.TiffImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TiffImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.TiffImage)
  GOOGLE_DCHECK_NE(&from, this);
  const TiffImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TiffImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.TiffImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.TiffImage)
    MergeFrom(*source);
  }
}

void TiffImage::MergeFrom(const TiffImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.TiffImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void TiffImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.TiffImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TiffImage::CopyFrom(const TiffImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.TiffImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TiffImage::IsInitialized() const {
  return true;
}

void TiffImage::InternalSwap(TiffImage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TiffImage, height_)
      + sizeof(TiffImage::height_)
      - PROTOBUF_FIELD_OFFSET(TiffImage, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TiffImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Nitf21Image::InitAsDefaultInstance() {
}
class Nitf21Image::_Internal {
 public:
};

Nitf21Image::Nitf21Image(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.Nitf21Image)
}
Nitf21Image::Nitf21Image(const Nitf21Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.Nitf21Image)
}

void Nitf21Image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Nitf21Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Nitf21Image::~Nitf21Image() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.Nitf21Image)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Nitf21Image::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Nitf21Image::ArenaDtor(void* object) {
  Nitf21Image* _this = reinterpret_cast< Nitf21Image* >(object);
  (void)_this;
}
void Nitf21Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Nitf21Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Nitf21Image& Nitf21Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Nitf21Image_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void Nitf21Image::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.Nitf21Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Nitf21Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aip.processor.v2.Nitf21Image.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Nitf21Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.Nitf21Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aip.processor.v2.Nitf21Image.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.Nitf21Image)
  return target;
}

size_t Nitf21Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.Nitf21Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Nitf21Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.Nitf21Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Nitf21Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Nitf21Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.Nitf21Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.Nitf21Image)
    MergeFrom(*source);
  }
}

void Nitf21Image::MergeFrom(const Nitf21Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.Nitf21Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
}

void Nitf21Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.Nitf21Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nitf21Image::CopyFrom(const Nitf21Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.Nitf21Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nitf21Image::IsInitialized() const {
  return true;
}

void Nitf21Image::InternalSwap(Nitf21Image* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Nitf21Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DigitalGlobeMetadata::InitAsDefaultInstance() {
  ::aip::processor::v2::_DigitalGlobeMetadata_default_instance_._instance.get_mutable()->top_left_ = const_cast< ::aip::processor::v2::GeoCoordinate*>(
      ::aip::processor::v2::GeoCoordinate::internal_default_instance());
  ::aip::processor::v2::_DigitalGlobeMetadata_default_instance_._instance.get_mutable()->top_right_ = const_cast< ::aip::processor::v2::GeoCoordinate*>(
      ::aip::processor::v2::GeoCoordinate::internal_default_instance());
  ::aip::processor::v2::_DigitalGlobeMetadata_default_instance_._instance.get_mutable()->bottom_right_ = const_cast< ::aip::processor::v2::GeoCoordinate*>(
      ::aip::processor::v2::GeoCoordinate::internal_default_instance());
  ::aip::processor::v2::_DigitalGlobeMetadata_default_instance_._instance.get_mutable()->bottom_left_ = const_cast< ::aip::processor::v2::GeoCoordinate*>(
      ::aip::processor::v2::GeoCoordinate::internal_default_instance());
}
class DigitalGlobeMetadata::_Internal {
 public:
  static const ::aip::processor::v2::GeoCoordinate& top_left(const DigitalGlobeMetadata* msg);
  static const ::aip::processor::v2::GeoCoordinate& top_right(const DigitalGlobeMetadata* msg);
  static const ::aip::processor::v2::GeoCoordinate& bottom_right(const DigitalGlobeMetadata* msg);
  static const ::aip::processor::v2::GeoCoordinate& bottom_left(const DigitalGlobeMetadata* msg);
};

const ::aip::processor::v2::GeoCoordinate&
DigitalGlobeMetadata::_Internal::top_left(const DigitalGlobeMetadata* msg) {
  return *msg->top_left_;
}
const ::aip::processor::v2::GeoCoordinate&
DigitalGlobeMetadata::_Internal::top_right(const DigitalGlobeMetadata* msg) {
  return *msg->top_right_;
}
const ::aip::processor::v2::GeoCoordinate&
DigitalGlobeMetadata::_Internal::bottom_right(const DigitalGlobeMetadata* msg) {
  return *msg->bottom_right_;
}
const ::aip::processor::v2::GeoCoordinate&
DigitalGlobeMetadata::_Internal::bottom_left(const DigitalGlobeMetadata* msg) {
  return *msg->bottom_left_;
}
DigitalGlobeMetadata::DigitalGlobeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.DigitalGlobeMetadata)
}
DigitalGlobeMetadata::DigitalGlobeMetadata(const DigitalGlobeMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  feature_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_feature_id().empty()) {
    feature_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_feature_id(),
      GetArena());
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source(),
      GetArena());
  }
  product_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_type().empty()) {
    product_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_product_type(),
      GetArena());
  }
  if (from._internal_has_top_left()) {
    top_left_ = new ::aip::processor::v2::GeoCoordinate(*from.top_left_);
  } else {
    top_left_ = nullptr;
  }
  if (from._internal_has_top_right()) {
    top_right_ = new ::aip::processor::v2::GeoCoordinate(*from.top_right_);
  } else {
    top_right_ = nullptr;
  }
  if (from._internal_has_bottom_right()) {
    bottom_right_ = new ::aip::processor::v2::GeoCoordinate(*from.bottom_right_);
  } else {
    bottom_right_ = nullptr;
  }
  if (from._internal_has_bottom_left()) {
    bottom_left_ = new ::aip::processor::v2::GeoCoordinate(*from.bottom_left_);
  } else {
    bottom_left_ = nullptr;
  }
  ::memcpy(&off_nadir_degrees_, &from.off_nadir_degrees_,
    static_cast<size_t>(reinterpret_cast<char*>(&niirs_) -
    reinterpret_cast<char*>(&off_nadir_degrees_)) + sizeof(niirs_));
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.DigitalGlobeMetadata)
}

void DigitalGlobeMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DigitalGlobeMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  feature_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&top_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&niirs_) -
      reinterpret_cast<char*>(&top_left_)) + sizeof(niirs_));
}

DigitalGlobeMetadata::~DigitalGlobeMetadata() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.DigitalGlobeMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DigitalGlobeMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  feature_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete top_left_;
  if (this != internal_default_instance()) delete top_right_;
  if (this != internal_default_instance()) delete bottom_right_;
  if (this != internal_default_instance()) delete bottom_left_;
}

void DigitalGlobeMetadata::ArenaDtor(void* object) {
  DigitalGlobeMetadata* _this = reinterpret_cast< DigitalGlobeMetadata* >(object);
  (void)_this;
}
void DigitalGlobeMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalGlobeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitalGlobeMetadata& DigitalGlobeMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitalGlobeMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void DigitalGlobeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.DigitalGlobeMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && top_left_ != nullptr) {
    delete top_left_;
  }
  top_left_ = nullptr;
  if (GetArena() == nullptr && top_right_ != nullptr) {
    delete top_right_;
  }
  top_right_ = nullptr;
  if (GetArena() == nullptr && bottom_right_ != nullptr) {
    delete bottom_right_;
  }
  bottom_right_ = nullptr;
  if (GetArena() == nullptr && bottom_left_ != nullptr) {
    delete bottom_left_;
  }
  bottom_left_ = nullptr;
  ::memset(&off_nadir_degrees_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&niirs_) -
      reinterpret_cast<char*>(&off_nadir_degrees_)) + sizeof(niirs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalGlobeMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string feature_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_feature_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aip.processor.v2.DigitalGlobeMetadata.feature_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aip.processor.v2.DigitalGlobeMetadata.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 niirs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          niirs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string product_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_product_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aip.processor.v2.DigitalGlobeMetadata.product_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double off_nadir_degrees = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          off_nadir_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sun_elevation_degrees = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          sun_elevation_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sun_azimuth_degrees = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          sun_azimuth_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 ground_sample_distance_centimeters = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ground_sample_distance_centimeters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.GeoCoordinate top_left = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.GeoCoordinate top_right = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.GeoCoordinate bottom_right = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.GeoCoordinate bottom_left = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalGlobeMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.DigitalGlobeMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string feature_id = 1;
  if (this->feature_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_feature_id().data(), static_cast<int>(this->_internal_feature_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aip.processor.v2.DigitalGlobeMetadata.feature_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_feature_id(), target);
  }

  // string source = 3;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aip.processor.v2.DigitalGlobeMetadata.source");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source(), target);
  }

  // uint32 niirs = 4;
  if (this->niirs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_niirs(), target);
  }

  // string product_type = 6;
  if (this->product_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_type().data(), static_cast<int>(this->_internal_product_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aip.processor.v2.DigitalGlobeMetadata.product_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_product_type(), target);
  }

  // double off_nadir_degrees = 7;
  if (!(this->off_nadir_degrees() <= 0 && this->off_nadir_degrees() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_off_nadir_degrees(), target);
  }

  // double sun_elevation_degrees = 8;
  if (!(this->sun_elevation_degrees() <= 0 && this->sun_elevation_degrees() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_sun_elevation_degrees(), target);
  }

  // double sun_azimuth_degrees = 9;
  if (!(this->sun_azimuth_degrees() <= 0 && this->sun_azimuth_degrees() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_sun_azimuth_degrees(), target);
  }

  // uint64 ground_sample_distance_centimeters = 10;
  if (this->ground_sample_distance_centimeters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_ground_sample_distance_centimeters(), target);
  }

  // .aip.processor.v2.GeoCoordinate top_left = 11;
  if (this->has_top_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::top_left(this), target, stream);
  }

  // .aip.processor.v2.GeoCoordinate top_right = 12;
  if (this->has_top_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::top_right(this), target, stream);
  }

  // .aip.processor.v2.GeoCoordinate bottom_right = 13;
  if (this->has_bottom_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::bottom_right(this), target, stream);
  }

  // .aip.processor.v2.GeoCoordinate bottom_left = 14;
  if (this->has_bottom_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::bottom_left(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.DigitalGlobeMetadata)
  return target;
}

size_t DigitalGlobeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.DigitalGlobeMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feature_id = 1;
  if (this->feature_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_feature_id());
  }

  // string source = 3;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string product_type = 6;
  if (this->product_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_type());
  }

  // .aip.processor.v2.GeoCoordinate top_left = 11;
  if (this->has_top_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_left_);
  }

  // .aip.processor.v2.GeoCoordinate top_right = 12;
  if (this->has_top_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_right_);
  }

  // .aip.processor.v2.GeoCoordinate bottom_right = 13;
  if (this->has_bottom_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bottom_right_);
  }

  // .aip.processor.v2.GeoCoordinate bottom_left = 14;
  if (this->has_bottom_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bottom_left_);
  }

  // double off_nadir_degrees = 7;
  if (!(this->off_nadir_degrees() <= 0 && this->off_nadir_degrees() >= 0)) {
    total_size += 1 + 8;
  }

  // double sun_elevation_degrees = 8;
  if (!(this->sun_elevation_degrees() <= 0 && this->sun_elevation_degrees() >= 0)) {
    total_size += 1 + 8;
  }

  // double sun_azimuth_degrees = 9;
  if (!(this->sun_azimuth_degrees() <= 0 && this->sun_azimuth_degrees() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 ground_sample_distance_centimeters = 10;
  if (this->ground_sample_distance_centimeters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ground_sample_distance_centimeters());
  }

  // uint32 niirs = 4;
  if (this->niirs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_niirs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalGlobeMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.DigitalGlobeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalGlobeMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitalGlobeMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.DigitalGlobeMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.DigitalGlobeMetadata)
    MergeFrom(*source);
  }
}

void DigitalGlobeMetadata::MergeFrom(const DigitalGlobeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.DigitalGlobeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.feature_id().size() > 0) {
    _internal_set_feature_id(from._internal_feature_id());
  }
  if (from.source().size() > 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.product_type().size() > 0) {
    _internal_set_product_type(from._internal_product_type());
  }
  if (from.has_top_left()) {
    _internal_mutable_top_left()->::aip::processor::v2::GeoCoordinate::MergeFrom(from._internal_top_left());
  }
  if (from.has_top_right()) {
    _internal_mutable_top_right()->::aip::processor::v2::GeoCoordinate::MergeFrom(from._internal_top_right());
  }
  if (from.has_bottom_right()) {
    _internal_mutable_bottom_right()->::aip::processor::v2::GeoCoordinate::MergeFrom(from._internal_bottom_right());
  }
  if (from.has_bottom_left()) {
    _internal_mutable_bottom_left()->::aip::processor::v2::GeoCoordinate::MergeFrom(from._internal_bottom_left());
  }
  if (!(from.off_nadir_degrees() <= 0 && from.off_nadir_degrees() >= 0)) {
    _internal_set_off_nadir_degrees(from._internal_off_nadir_degrees());
  }
  if (!(from.sun_elevation_degrees() <= 0 && from.sun_elevation_degrees() >= 0)) {
    _internal_set_sun_elevation_degrees(from._internal_sun_elevation_degrees());
  }
  if (!(from.sun_azimuth_degrees() <= 0 && from.sun_azimuth_degrees() >= 0)) {
    _internal_set_sun_azimuth_degrees(from._internal_sun_azimuth_degrees());
  }
  if (from.ground_sample_distance_centimeters() != 0) {
    _internal_set_ground_sample_distance_centimeters(from._internal_ground_sample_distance_centimeters());
  }
  if (from.niirs() != 0) {
    _internal_set_niirs(from._internal_niirs());
  }
}

void DigitalGlobeMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.DigitalGlobeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalGlobeMetadata::CopyFrom(const DigitalGlobeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.DigitalGlobeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalGlobeMetadata::IsInitialized() const {
  return true;
}

void DigitalGlobeMetadata::InternalSwap(DigitalGlobeMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  feature_id_.Swap(&other->feature_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_type_.Swap(&other->product_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalGlobeMetadata, niirs_)
      + sizeof(DigitalGlobeMetadata::niirs_)
      - PROTOBUF_FIELD_OFFSET(DigitalGlobeMetadata, top_left_)>(
          reinterpret_cast<char*>(&top_left_),
          reinterpret_cast<char*>(&other->top_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalGlobeMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProviderMetadata::InitAsDefaultInstance() {
  ::aip::processor::v2::_ProviderMetadata_default_instance_.digital_globe_ = const_cast< ::aip::processor::v2::DigitalGlobeMetadata*>(
      ::aip::processor::v2::DigitalGlobeMetadata::internal_default_instance());
}
class ProviderMetadata::_Internal {
 public:
  static const ::aip::processor::v2::DigitalGlobeMetadata& digital_globe(const ProviderMetadata* msg);
};

const ::aip::processor::v2::DigitalGlobeMetadata&
ProviderMetadata::_Internal::digital_globe(const ProviderMetadata* msg) {
  return *msg->metadata_.digital_globe_;
}
void ProviderMetadata::set_allocated_digital_globe(::aip::processor::v2::DigitalGlobeMetadata* digital_globe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_metadata();
  if (digital_globe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(digital_globe);
    if (message_arena != submessage_arena) {
      digital_globe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digital_globe, submessage_arena);
    }
    set_has_digital_globe();
    metadata_.digital_globe_ = digital_globe;
  }
  // @@protoc_insertion_point(field_set_allocated:aip.processor.v2.ProviderMetadata.digital_globe)
}
ProviderMetadata::ProviderMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.ProviderMetadata)
}
ProviderMetadata::ProviderMetadata(const ProviderMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_metadata();
  switch (from.metadata_case()) {
    case kDigitalGlobe: {
      _internal_mutable_digital_globe()->::aip::processor::v2::DigitalGlobeMetadata::MergeFrom(from._internal_digital_globe());
      break;
    }
    case METADATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.ProviderMetadata)
}

void ProviderMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProviderMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  clear_has_metadata();
}

ProviderMetadata::~ProviderMetadata() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.ProviderMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProviderMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_metadata()) {
    clear_metadata();
  }
}

void ProviderMetadata::ArenaDtor(void* object) {
  ProviderMetadata* _this = reinterpret_cast< ProviderMetadata* >(object);
  (void)_this;
}
void ProviderMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProviderMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProviderMetadata& ProviderMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProviderMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void ProviderMetadata::clear_metadata() {
// @@protoc_insertion_point(one_of_clear_start:aip.processor.v2.ProviderMetadata)
  switch (metadata_case()) {
    case kDigitalGlobe: {
      if (GetArena() == nullptr) {
        delete metadata_.digital_globe_;
      }
      break;
    }
    case METADATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = METADATA_NOT_SET;
}


void ProviderMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.ProviderMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_metadata();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProviderMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aip.processor.v2.DigitalGlobeMetadata digital_globe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_digital_globe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProviderMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.ProviderMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aip.processor.v2.DigitalGlobeMetadata digital_globe = 1;
  if (_internal_has_digital_globe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::digital_globe(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.ProviderMetadata)
  return target;
}

size_t ProviderMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.ProviderMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (metadata_case()) {
    // .aip.processor.v2.DigitalGlobeMetadata digital_globe = 1;
    case kDigitalGlobe: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_.digital_globe_);
      break;
    }
    case METADATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProviderMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.ProviderMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ProviderMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProviderMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.ProviderMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.ProviderMetadata)
    MergeFrom(*source);
  }
}

void ProviderMetadata::MergeFrom(const ProviderMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.ProviderMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.metadata_case()) {
    case kDigitalGlobe: {
      _internal_mutable_digital_globe()->::aip::processor::v2::DigitalGlobeMetadata::MergeFrom(from._internal_digital_globe());
      break;
    }
    case METADATA_NOT_SET: {
      break;
    }
  }
}

void ProviderMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.ProviderMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProviderMetadata::CopyFrom(const ProviderMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.ProviderMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProviderMetadata::IsInitialized() const {
  return true;
}

void ProviderMetadata::InternalSwap(ProviderMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(metadata_, other->metadata_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProviderMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UasMetadata::InitAsDefaultInstance() {
  ::aip::processor::v2::_UasMetadata_default_instance_._instance.get_mutable()->provider_metadata_ = const_cast< ::aip::processor::v2::ProviderMetadata*>(
      ::aip::processor::v2::ProviderMetadata::internal_default_instance());
}
class UasMetadata::_Internal {
 public:
  static const ::aip::processor::v2::ProviderMetadata& provider_metadata(const UasMetadata* msg);
};

const ::aip::processor::v2::ProviderMetadata&
UasMetadata::_Internal::provider_metadata(const UasMetadata* msg) {
  return *msg->provider_metadata_;
}
UasMetadata::UasMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aip.processor.v2.UasMetadata)
}
UasMetadata::UasMetadata(const UasMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_source_sensor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_source_sensor().empty()) {
    image_source_sensor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_source_sensor(),
      GetArena());
  }
  if (from._internal_has_provider_metadata()) {
    provider_metadata_ = new ::aip::processor::v2::ProviderMetadata(*from.provider_metadata_);
  } else {
    provider_metadata_ = nullptr;
  }
  ::memcpy(&platform_heading_angle_, &from.platform_heading_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&sensor_relative_roll_angle_) -
    reinterpret_cast<char*>(&platform_heading_angle_)) + sizeof(sensor_relative_roll_angle_));
  // @@protoc_insertion_point(copy_constructor:aip.processor.v2.UasMetadata)
}

void UasMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UasMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  image_source_sensor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&provider_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_relative_roll_angle_) -
      reinterpret_cast<char*>(&provider_metadata_)) + sizeof(sensor_relative_roll_angle_));
}

UasMetadata::~UasMetadata() {
  // @@protoc_insertion_point(destructor:aip.processor.v2.UasMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UasMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_source_sensor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete provider_metadata_;
}

void UasMetadata::ArenaDtor(void* object) {
  UasMetadata* _this = reinterpret_cast< UasMetadata* >(object);
  (void)_this;
}
void UasMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UasMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UasMetadata& UasMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UasMetadata_proto_2fpalantir_2fprocessing_2dservice_2dv2_2eproto.base);
  return *internal_default_instance();
}


void UasMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:aip.processor.v2.UasMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_source_sensor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && provider_metadata_ != nullptr) {
    delete provider_metadata_;
  }
  provider_metadata_ = nullptr;
  ::memset(&platform_heading_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_relative_roll_angle_) -
      reinterpret_cast<char*>(&platform_heading_angle_)) + sizeof(sensor_relative_roll_angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UasMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float platform_heading_angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          platform_heading_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float platform_pitch_angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          platform_pitch_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float platform_roll_angle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          platform_roll_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double sensor_latitude = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          sensor_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sensor_longitude = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          sensor_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sensor_true_altitude = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          sensor_true_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float sensor_horizontal_fov = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          sensor_horizontal_fov_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sensor_vertical_fov = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          sensor_vertical_fov_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double sensor_relative_azimuth_angle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          sensor_relative_azimuth_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sensor_relative_elevation_angle = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          sensor_relative_elevation_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sensor_relative_roll_angle = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          sensor_relative_roll_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string image_source_sensor = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_image_source_sensor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aip.processor.v2.UasMetadata.image_source_sensor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aip.processor.v2.ProviderMetadata provider_metadata = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UasMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aip.processor.v2.UasMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float platform_heading_angle = 5;
  if (!(this->platform_heading_angle() <= 0 && this->platform_heading_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_platform_heading_angle(), target);
  }

  // float platform_pitch_angle = 6;
  if (!(this->platform_pitch_angle() <= 0 && this->platform_pitch_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_platform_pitch_angle(), target);
  }

  // float platform_roll_angle = 7;
  if (!(this->platform_roll_angle() <= 0 && this->platform_roll_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_platform_roll_angle(), target);
  }

  // double sensor_latitude = 13;
  if (!(this->sensor_latitude() <= 0 && this->sensor_latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_sensor_latitude(), target);
  }

  // double sensor_longitude = 14;
  if (!(this->sensor_longitude() <= 0 && this->sensor_longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_sensor_longitude(), target);
  }

  // double sensor_true_altitude = 15;
  if (!(this->sensor_true_altitude() <= 0 && this->sensor_true_altitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_sensor_true_altitude(), target);
  }

  // float sensor_horizontal_fov = 16;
  if (!(this->sensor_horizontal_fov() <= 0 && this->sensor_horizontal_fov() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_sensor_horizontal_fov(), target);
  }

  // float sensor_vertical_fov = 17;
  if (!(this->sensor_vertical_fov() <= 0 && this->sensor_vertical_fov() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_sensor_vertical_fov(), target);
  }

  // double sensor_relative_azimuth_angle = 18;
  if (!(this->sensor_relative_azimuth_angle() <= 0 && this->sensor_relative_azimuth_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_sensor_relative_azimuth_angle(), target);
  }

  // double sensor_relative_elevation_angle = 19;
  if (!(this->sensor_relative_elevation_angle() <= 0 && this->sensor_relative_elevation_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_sensor_relative_elevation_angle(), target);
  }

  // double sensor_relative_roll_angle = 20;
  if (!(this->sensor_relative_roll_angle() <= 0 && this->sensor_relative_roll_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_sensor_relative_roll_angle(), target);
  }

  // string image_source_sensor = 21;
  if (this->image_source_sensor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_source_sensor().data(), static_cast<int>(this->_internal_image_source_sensor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aip.processor.v2.UasMetadata.image_source_sensor");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_image_source_sensor(), target);
  }

  // .aip.processor.v2.ProviderMetadata provider_metadata = 22;
  if (this->has_provider_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::provider_metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aip.processor.v2.UasMetadata)
  return target;
}

size_t UasMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aip.processor.v2.UasMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image_source_sensor = 21;
  if (this->image_source_sensor().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_source_sensor());
  }

  // .aip.processor.v2.ProviderMetadata provider_metadata = 22;
  if (this->has_provider_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_metadata_);
  }

  // float platform_heading_angle = 5;
  if (!(this->platform_heading_angle() <= 0 && this->platform_heading_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // float platform_pitch_angle = 6;
  if (!(this->platform_pitch_angle() <= 0 && this->platform_pitch_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // float platform_roll_angle = 7;
  if (!(this->platform_roll_angle() <= 0 && this->platform_roll_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // float sensor_horizontal_fov = 16;
  if (!(this->sensor_horizontal_fov() <= 0 && this->sensor_horizontal_fov() >= 0)) {
    total_size += 2 + 4;
  }

  // double sensor_latitude = 13;
  if (!(this->sensor_latitude() <= 0 && this->sensor_latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double sensor_longitude = 14;
  if (!(this->sensor_longitude() <= 0 && this->sensor_longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // float sensor_vertical_fov = 17;
  if (!(this->sensor_vertical_fov() <= 0 && this->sensor_vertical_fov() >= 0)) {
    total_size += 2 + 4;
  }

  // double sensor_true_altitude = 15;
  if (!(this->sensor_true_altitude() <= 0 && this->sensor_true_altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double sensor_relative_azimuth_angle = 18;
  if (!(this->sensor_relative_azimuth_angle() <= 0 && this->sensor_relative_azimuth_angle() >= 0)) {
    total_size += 2 + 8;
  }

  // double sensor_relative_elevation_angle = 19;
  if (!(this->sensor_relative_elevation_angle() <= 0 && this->sensor_relative_elevation_angle() >= 0)) {
    total_size += 2 + 8;
  }

  // double sensor_relative_roll_angle = 20;
  if (!(this->sensor_relative_roll_angle() <= 0 && this->sensor_relative_roll_angle() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UasMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aip.processor.v2.UasMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const UasMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UasMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aip.processor.v2.UasMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aip.processor.v2.UasMetadata)
    MergeFrom(*source);
  }
}

void UasMetadata::MergeFrom(const UasMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aip.processor.v2.UasMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_source_sensor().size() > 0) {
    _internal_set_image_source_sensor(from._internal_image_source_sensor());
  }
  if (from.has_provider_metadata()) {
    _internal_mutable_provider_metadata()->::aip::processor::v2::ProviderMetadata::MergeFrom(from._internal_provider_metadata());
  }
  if (!(from.platform_heading_angle() <= 0 && from.platform_heading_angle() >= 0)) {
    _internal_set_platform_heading_angle(from._internal_platform_heading_angle());
  }
  if (!(from.platform_pitch_angle() <= 0 && from.platform_pitch_angle() >= 0)) {
    _internal_set_platform_pitch_angle(from._internal_platform_pitch_angle());
  }
  if (!(from.platform_roll_angle() <= 0 && from.platform_roll_angle() >= 0)) {
    _internal_set_platform_roll_angle(from._internal_platform_roll_angle());
  }
  if (!(from.sensor_horizontal_fov() <= 0 && from.sensor_horizontal_fov() >= 0)) {
    _internal_set_sensor_horizontal_fov(from._internal_sensor_horizontal_fov());
  }
  if (!(from.sensor_latitude() <= 0 && from.sensor_latitude() >= 0)) {
    _internal_set_sensor_latitude(from._internal_sensor_latitude());
  }
  if (!(from.sensor_longitude() <= 0 && from.sensor_longitude() >= 0)) {
    _internal_set_sensor_longitude(from._internal_sensor_longitude());
  }
  if (!(from.sensor_vertical_fov() <= 0 && from.sensor_vertical_fov() >= 0)) {
    _internal_set_sensor_vertical_fov(from._internal_sensor_vertical_fov());
  }
  if (!(from.sensor_true_altitude() <= 0 && from.sensor_true_altitude() >= 0)) {
    _internal_set_sensor_true_altitude(from._internal_sensor_true_altitude());
  }
  if (!(from.sensor_relative_azimuth_angle() <= 0 && from.sensor_relative_azimuth_angle() >= 0)) {
    _internal_set_sensor_relative_azimuth_angle(from._internal_sensor_relative_azimuth_angle());
  }
  if (!(from.sensor_relative_elevation_angle() <= 0 && from.sensor_relative_elevation_angle() >= 0)) {
    _internal_set_sensor_relative_elevation_angle(from._internal_sensor_relative_elevation_angle());
  }
  if (!(from.sensor_relative_roll_angle() <= 0 && from.sensor_relative_roll_angle() >= 0)) {
    _internal_set_sensor_relative_roll_angle(from._internal_sensor_relative_roll_angle());
  }
}

void UasMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aip.processor.v2.UasMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UasMetadata::CopyFrom(const UasMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aip.processor.v2.UasMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UasMetadata::IsInitialized() const {
  return true;
}

void UasMetadata::InternalSwap(UasMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_source_sensor_.Swap(&other->image_source_sensor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UasMetadata, sensor_relative_roll_angle_)
      + sizeof(UasMetadata::sensor_relative_roll_angle_)
      - PROTOBUF_FIELD_OFFSET(UasMetadata, provider_metadata_)>(
          reinterpret_cast<char*>(&provider_metadata_),
          reinterpret_cast<char*>(&other->provider_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UasMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace processor
}  // namespace aip
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aip::processor::v2::ProcessorV2Config* Arena::CreateMaybeMessage< ::aip::processor::v2::ProcessorV2Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::ProcessorV2Config >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::RequestHeader* Arena::CreateMaybeMessage< ::aip::processor::v2::RequestHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::RequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::Identifier* Arena::CreateMaybeMessage< ::aip::processor::v2::Identifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::Identifier >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::Timestamp* Arena::CreateMaybeMessage< ::aip::processor::v2::Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::GeoRegistrationRequest* Arena::CreateMaybeMessage< ::aip::processor::v2::GeoRegistrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::GeoRegistrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::GeoRegistrationResponse* Arena::CreateMaybeMessage< ::aip::processor::v2::GeoRegistrationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::GeoRegistrationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::InferenceRequest* Arena::CreateMaybeMessage< ::aip::processor::v2::InferenceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::InferenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::InferenceResponse* Arena::CreateMaybeMessage< ::aip::processor::v2::InferenceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::InferenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::TrackRequest* Arena::CreateMaybeMessage< ::aip::processor::v2::TrackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::TrackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::GeoRegistration* Arena::CreateMaybeMessage< ::aip::processor::v2::GeoRegistration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::GeoRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::Inferences* Arena::CreateMaybeMessage< ::aip::processor::v2::Inferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::Inferences >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::Inference* Arena::CreateMaybeMessage< ::aip::processor::v2::Inference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::Inference >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::GeoCoordinate* Arena::CreateMaybeMessage< ::aip::processor::v2::GeoCoordinate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::GeoCoordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::BoundingBox* Arena::CreateMaybeMessage< ::aip::processor::v2::BoundingBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::BoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::GeoBoundingBox* Arena::CreateMaybeMessage< ::aip::processor::v2::GeoBoundingBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::GeoBoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::BoundingPolygon* Arena::CreateMaybeMessage< ::aip::processor::v2::BoundingPolygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::BoundingPolygon >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::GeoBoundingPolygon* Arena::CreateMaybeMessage< ::aip::processor::v2::GeoBoundingPolygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::GeoBoundingPolygon >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::Polygon* Arena::CreateMaybeMessage< ::aip::processor::v2::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::GeoPolygon* Arena::CreateMaybeMessage< ::aip::processor::v2::GeoPolygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::GeoPolygon >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::UnitCoordinate* Arena::CreateMaybeMessage< ::aip::processor::v2::UnitCoordinate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::UnitCoordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::Classification* Arena::CreateMaybeMessage< ::aip::processor::v2::Classification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::Lattice_Point* Arena::CreateMaybeMessage< ::aip::processor::v2::Lattice_Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::Lattice_Point >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::Lattice* Arena::CreateMaybeMessage< ::aip::processor::v2::Lattice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::Lattice >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::Velocity* Arena::CreateMaybeMessage< ::aip::processor::v2::Velocity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::Velocity >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::PixelVelocityVector* Arena::CreateMaybeMessage< ::aip::processor::v2::PixelVelocityVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::PixelVelocityVector >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::Frame* Arena::CreateMaybeMessage< ::aip::processor::v2::Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::Image* Arena::CreateMaybeMessage< ::aip::processor::v2::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::Rgb888Image* Arena::CreateMaybeMessage< ::aip::processor::v2::Rgb888Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::Rgb888Image >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::Bgr888Image* Arena::CreateMaybeMessage< ::aip::processor::v2::Bgr888Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::Bgr888Image >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::PngImage* Arena::CreateMaybeMessage< ::aip::processor::v2::PngImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::PngImage >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::TiffImage* Arena::CreateMaybeMessage< ::aip::processor::v2::TiffImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::TiffImage >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::Nitf21Image* Arena::CreateMaybeMessage< ::aip::processor::v2::Nitf21Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::Nitf21Image >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::DigitalGlobeMetadata* Arena::CreateMaybeMessage< ::aip::processor::v2::DigitalGlobeMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::DigitalGlobeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::ProviderMetadata* Arena::CreateMaybeMessage< ::aip::processor::v2::ProviderMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::ProviderMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::aip::processor::v2::UasMetadata* Arena::CreateMaybeMessage< ::aip::processor::v2::UasMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aip::processor::v2::UasMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
