# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from proto.palantir import processing_service_v2_pb2 as proto_dot_palantir_dot_processing__service__v2__pb2


class ProcessingServiceStub(object):
    """*
    Processor implementations may choose to implement one or more of the available processor endpoints.

    No guarantees are made about the sequence in which GeoRegister, Infer, and Track capabilities are invoked. See
    Request messages for details on guarantees about optional content in request messages.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GeoRegister = channel.unary_unary(
                '/aip.processor.v2.ProcessingService/GeoRegister',
                request_serializer=proto_dot_palantir_dot_processing__service__v2__pb2.GeoRegistrationRequest.SerializeToString,
                response_deserializer=proto_dot_palantir_dot_processing__service__v2__pb2.GeoRegistrationResponse.FromString,
                )
        self.Infer = channel.unary_unary(
                '/aip.processor.v2.ProcessingService/Infer',
                request_serializer=proto_dot_palantir_dot_processing__service__v2__pb2.InferenceRequest.SerializeToString,
                response_deserializer=proto_dot_palantir_dot_processing__service__v2__pb2.InferenceResponse.FromString,
                )
        self.Track = channel.unary_unary(
                '/aip.processor.v2.ProcessingService/Track',
                request_serializer=proto_dot_palantir_dot_processing__service__v2__pb2.TrackRequest.SerializeToString,
                response_deserializer=proto_dot_palantir_dot_processing__service__v2__pb2.InferenceResponse.FromString,
                )


class ProcessingServiceServicer(object):
    """*
    Processor implementations may choose to implement one or more of the available processor endpoints.

    No guarantees are made about the sequence in which GeoRegister, Infer, and Track capabilities are invoked. See
    Request messages for details on guarantees about optional content in request messages.
    """

    def GeoRegister(self, request, context):
        """* Given airborne platform metadata and pixels, provide an updated platform position, camera stare point, and earth lattice. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Infer(self, request, context):
        """* Given airborne platform metadata and pixels, return inferences for objects found in the pixels. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Track(self, request, context):
        """*
        Provide stable object identifiers for objects in the current frame given optional airborne platform metadata,
        optional new inference information, and pixels.

        Note that Track may be called even when GeoRegister and Infer have not been invoked on the current frame, and
        that Track may provide results for the current frame when no inferences are provided as input, and fewer or
        more results than the input inferences.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProcessingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GeoRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.GeoRegister,
                    request_deserializer=proto_dot_palantir_dot_processing__service__v2__pb2.GeoRegistrationRequest.FromString,
                    response_serializer=proto_dot_palantir_dot_processing__service__v2__pb2.GeoRegistrationResponse.SerializeToString,
            ),
            'Infer': grpc.unary_unary_rpc_method_handler(
                    servicer.Infer,
                    request_deserializer=proto_dot_palantir_dot_processing__service__v2__pb2.InferenceRequest.FromString,
                    response_serializer=proto_dot_palantir_dot_processing__service__v2__pb2.InferenceResponse.SerializeToString,
            ),
            'Track': grpc.unary_unary_rpc_method_handler(
                    servicer.Track,
                    request_deserializer=proto_dot_palantir_dot_processing__service__v2__pb2.TrackRequest.FromString,
                    response_serializer=proto_dot_palantir_dot_processing__service__v2__pb2.InferenceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aip.processor.v2.ProcessingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProcessingService(object):
    """*
    Processor implementations may choose to implement one or more of the available processor endpoints.

    No guarantees are made about the sequence in which GeoRegister, Infer, and Track capabilities are invoked. See
    Request messages for details on guarantees about optional content in request messages.
    """

    @staticmethod
    def GeoRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aip.processor.v2.ProcessingService/GeoRegister',
            proto_dot_palantir_dot_processing__service__v2__pb2.GeoRegistrationRequest.SerializeToString,
            proto_dot_palantir_dot_processing__service__v2__pb2.GeoRegistrationResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Infer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aip.processor.v2.ProcessingService/Infer',
            proto_dot_palantir_dot_processing__service__v2__pb2.InferenceRequest.SerializeToString,
            proto_dot_palantir_dot_processing__service__v2__pb2.InferenceResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Track(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aip.processor.v2.ProcessingService/Track',
            proto_dot_palantir_dot_processing__service__v2__pb2.TrackRequest.SerializeToString,
            proto_dot_palantir_dot_processing__service__v2__pb2.InferenceResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
