// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/lopq/lopq_service.proto

#include "proto/lopq/lopq_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2flopq_2flopq_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttributeMixIn_proto_2flopq_2flopq_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2flopq_2flopq_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BruteForceResult_proto_2flopq_2flopq_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2flopq_2flopq_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptOverride_proto_2flopq_2flopq_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdatabatch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2flopq_5fcode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LOPQCode_proto_2futils_2flopq_5fcode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2flopq_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LOPQEvalResult_proto_2futils_2flopq_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2flopq_2flopq_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LOPQSearchForCodeResult_proto_2flopq_2flopq_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2flopq_2flopq_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LOPQSearchResult_proto_2flopq_2flopq_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fndarray_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArray_proto_2futils_2fndarray_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto;
class LOPQPredictRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQPredictRequest> _instance;
} _LOPQPredictRequest_default_instance_;
class LOPQPredictResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQPredictResponse> _instance;
} _LOPQPredictResponse_default_instance_;
class LOPQSearchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQSearchRequest> _instance;
} _LOPQSearchRequest_default_instance_;
class ConceptOverrideDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConceptOverride> _instance;
} _ConceptOverride_default_instance_;
class AttributeMixInDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttributeMixIn> _instance;
} _AttributeMixIn_default_instance_;
class LOPQAttributeSearchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQAttributeSearchRequest> _instance;
} _LOPQAttributeSearchRequest_default_instance_;
class LOPQSearchResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQSearchResult> _instance;
} _LOPQSearchResult_default_instance_;
class LOPQSearchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQSearchResponse> _instance;
} _LOPQSearchResponse_default_instance_;
class LOPQSearchForCodesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQSearchForCodesRequest> _instance;
} _LOPQSearchForCodesRequest_default_instance_;
class LOPQSearchForCodeResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQSearchForCodeResult> _instance;
} _LOPQSearchForCodeResult_default_instance_;
class LOPQSearchForCodesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQSearchForCodesResponse> _instance;
} _LOPQSearchForCodesResponse_default_instance_;
class LOPQBruteForceSearchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQBruteForceSearchRequest> _instance;
} _LOPQBruteForceSearchRequest_default_instance_;
class LOPQBruteForceSearchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQBruteForceSearchResponse> _instance;
} _LOPQBruteForceSearchResponse_default_instance_;
class BruteForceResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BruteForceResult> _instance;
} _BruteForceResult_default_instance_;
class LOPQTrainRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQTrainRequest> _instance;
  const ::DataBatch* data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_query_;
} _LOPQTrainRequest_default_instance_;
class LOPQTrainResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQTrainResponse> _instance;
} _LOPQTrainResponse_default_instance_;
class LOPQModelParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQModelParams> _instance;
} _LOPQModelParams_default_instance_;
class LOPQTrainAndEvalRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQTrainAndEvalRequest> _instance;
  const ::DataBatch* data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_query_;
} _LOPQTrainAndEvalRequest_default_instance_;
class LOPQTrainAndEvalResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOPQTrainAndEvalResponse> _instance;
} _LOPQTrainAndEvalResponse_default_instance_;
static void InitDefaultsscc_info_AttributeMixIn_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AttributeMixIn_default_instance_;
    new (ptr) ::AttributeMixIn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AttributeMixIn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttributeMixIn_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AttributeMixIn_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_ConceptOverride_proto_2flopq_2flopq_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BruteForceResult_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BruteForceResult_default_instance_;
    new (ptr) ::BruteForceResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BruteForceResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BruteForceResult_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BruteForceResult_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_LOPQSearchResult_proto_2flopq_2flopq_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ConceptOverride_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConceptOverride_default_instance_;
    new (ptr) ::ConceptOverride();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConceptOverride::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptOverride_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConceptOverride_proto_2flopq_2flopq_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_LOPQAttributeSearchRequest_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQAttributeSearchRequest_default_instance_;
    new (ptr) ::LOPQAttributeSearchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQAttributeSearchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LOPQAttributeSearchRequest_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LOPQAttributeSearchRequest_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,
      &scc_info_AttributeMixIn_proto_2flopq_2flopq_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_LOPQBruteForceSearchRequest_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQBruteForceSearchRequest_default_instance_;
    new (ptr) ::LOPQBruteForceSearchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQBruteForceSearchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LOPQBruteForceSearchRequest_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LOPQBruteForceSearchRequest_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_LOPQBruteForceSearchResponse_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQBruteForceSearchResponse_default_instance_;
    new (ptr) ::LOPQBruteForceSearchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQBruteForceSearchResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LOPQBruteForceSearchResponse_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LOPQBruteForceSearchResponse_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_BruteForceResult_proto_2flopq_2flopq_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_LOPQModelParams_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQModelParams_default_instance_;
    new (ptr) ::LOPQModelParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQModelParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LOPQModelParams_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LOPQModelParams_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_NDArray_proto_2futils_2fndarray_2eproto.base,}};

static void InitDefaultsscc_info_LOPQPredictRequest_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQPredictRequest_default_instance_;
    new (ptr) ::LOPQPredictRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQPredictRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LOPQPredictRequest_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LOPQPredictRequest_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_LOPQPredictResponse_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQPredictResponse_default_instance_;
    new (ptr) ::LOPQPredictResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQPredictResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LOPQPredictResponse_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LOPQPredictResponse_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_LOPQCode_proto_2futils_2flopq_5fcode_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_LOPQSearchForCodeResult_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQSearchForCodeResult_default_instance_;
    new (ptr) ::LOPQSearchForCodeResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQSearchForCodeResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LOPQSearchForCodeResult_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LOPQSearchForCodeResult_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_LOPQCode_proto_2futils_2flopq_5fcode_2eproto.base,}};

static void InitDefaultsscc_info_LOPQSearchForCodesRequest_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQSearchForCodesRequest_default_instance_;
    new (ptr) ::LOPQSearchForCodesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQSearchForCodesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LOPQSearchForCodesRequest_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LOPQSearchForCodesRequest_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_LOPQSearchForCodesResponse_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQSearchForCodesResponse_default_instance_;
    new (ptr) ::LOPQSearchForCodesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQSearchForCodesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LOPQSearchForCodesResponse_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LOPQSearchForCodesResponse_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_LOPQSearchForCodeResult_proto_2flopq_2flopq_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_LOPQSearchRequest_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQSearchRequest_default_instance_;
    new (ptr) ::LOPQSearchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQSearchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LOPQSearchRequest_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LOPQSearchRequest_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_LOPQSearchResponse_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQSearchResponse_default_instance_;
    new (ptr) ::LOPQSearchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQSearchResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LOPQSearchResponse_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LOPQSearchResponse_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_LOPQSearchResult_proto_2flopq_2flopq_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_LOPQSearchResult_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQSearchResult_default_instance_;
    new (ptr) ::LOPQSearchResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQSearchResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LOPQSearchResult_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LOPQSearchResult_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_LOPQCode_proto_2futils_2flopq_5fcode_2eproto.base,}};

static void InitDefaultsscc_info_LOPQTrainAndEvalRequest_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQTrainAndEvalRequest_default_instance_;
    new (ptr) ::LOPQTrainAndEvalRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQTrainAndEvalRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LOPQTrainAndEvalRequest_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LOPQTrainAndEvalRequest_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_LOPQTrainAndEvalResponse_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQTrainAndEvalResponse_default_instance_;
    new (ptr) ::LOPQTrainAndEvalResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQTrainAndEvalResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LOPQTrainAndEvalResponse_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LOPQTrainAndEvalResponse_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_LOPQEvalResult_proto_2futils_2flopq_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_LOPQTrainRequest_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQTrainRequest_default_instance_;
    new (ptr) ::LOPQTrainRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQTrainRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LOPQTrainRequest_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LOPQTrainRequest_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_LOPQTrainResponse_proto_2flopq_2flopq_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOPQTrainResponse_default_instance_;
    new (ptr) ::LOPQTrainResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOPQTrainResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LOPQTrainResponse_proto_2flopq_2flopq_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LOPQTrainResponse_proto_2flopq_2flopq_5fservice_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2flopq_2flopq_5fservice_2eproto[19];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2flopq_2flopq_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2flopq_2flopq_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2flopq_2flopq_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQPredictRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQPredictRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::LOPQPredictRequest, data_),
  PROTOBUF_FIELD_OFFSET(::LOPQPredictRequest, lopq_model_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQPredictResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQPredictResponse, status_),
  PROTOBUF_FIELD_OFFSET(::LOPQPredictResponse, code_),
  PROTOBUF_FIELD_OFFSET(::LOPQPredictResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQSearchRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchRequest, data_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchRequest, sql_template_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchRequest, k_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchRequest, quota_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchRequest, max_visited_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchRequest, lopq_model_name_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchRequest, weight_query_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchRequest, fallback_sql_template_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchRequest, custom_model_name_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchRequest, positive_aiids_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchRequest, negative_aiids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConceptOverride, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConceptOverride, id_),
  PROTOBUF_FIELD_OFFSET(::ConceptOverride, name_),
  PROTOBUF_FIELD_OFFSET(::ConceptOverride, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AttributeMixIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AttributeMixIn, model_version_id_),
  PROTOBUF_FIELD_OFFSET(::AttributeMixIn, mix_in_coefficient_),
  PROTOBUF_FIELD_OFFSET(::AttributeMixIn, concept_override_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQAttributeSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQAttributeSearchRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::LOPQAttributeSearchRequest, data_),
  PROTOBUF_FIELD_OFFSET(::LOPQAttributeSearchRequest, sql_template_),
  PROTOBUF_FIELD_OFFSET(::LOPQAttributeSearchRequest, k_),
  PROTOBUF_FIELD_OFFSET(::LOPQAttributeSearchRequest, quota_),
  PROTOBUF_FIELD_OFFSET(::LOPQAttributeSearchRequest, max_visited_),
  PROTOBUF_FIELD_OFFSET(::LOPQAttributeSearchRequest, lopq_model_name_),
  PROTOBUF_FIELD_OFFSET(::LOPQAttributeSearchRequest, fallback_sql_template_),
  PROTOBUF_FIELD_OFFSET(::LOPQAttributeSearchRequest, attribute_mix_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQSearchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQSearchResult, asset_id_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchResult, annotation_id_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchResult, score_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchResult, distance_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchResult, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQSearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQSearchResponse, status_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQSearchForCodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQSearchForCodesRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchForCodesRequest, data_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchForCodesRequest, max_visited_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchForCodesRequest, lopq_model_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQSearchForCodeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQSearchForCodeResult, code_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchForCodeResult, score_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchForCodeResult, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQSearchForCodesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQSearchForCodesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::LOPQSearchForCodesResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQBruteForceSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQBruteForceSearchRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::LOPQBruteForceSearchRequest, data_),
  PROTOBUF_FIELD_OFFSET(::LOPQBruteForceSearchRequest, sql_query_),
  PROTOBUF_FIELD_OFFSET(::LOPQBruteForceSearchRequest, k_),
  PROTOBUF_FIELD_OFFSET(::LOPQBruteForceSearchRequest, avg_concept_brute_force_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQBruteForceSearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQBruteForceSearchResponse, status_),
  PROTOBUF_FIELD_OFFSET(::LOPQBruteForceSearchResponse, all_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BruteForceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BruteForceResult, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQTrainRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::LOPQTrainRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQTrainRequest, meta_),
  offsetof(::LOPQTrainRequestDefaultTypeInternal, data_),
  offsetof(::LOPQTrainRequestDefaultTypeInternal, sql_query_),
  PROTOBUF_FIELD_OFFSET(::LOPQTrainRequest, lopq_model_name_),
  PROTOBUF_FIELD_OFFSET(::LOPQTrainRequest, coarse_clusters_),
  PROTOBUF_FIELD_OFFSET(::LOPQTrainRequest, train_iters_),
  PROTOBUF_FIELD_OFFSET(::LOPQTrainRequest, prev_model_name_),
  PROTOBUF_FIELD_OFFSET(::LOPQTrainRequest, training_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQTrainResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQTrainResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, d_),
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, v_),
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, m_),
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, num_subquantizers_),
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, cs_),
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, rs_),
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, mus_),
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, subs_),
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, use_embeddings_),
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, pca_p_),
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, pca_mu_),
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, pca_just_shuffle_),
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, pca_permuted_inds_),
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, num_point_dims_),
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, projection_p_),
  PROTOBUF_FIELD_OFFSET(::LOPQModelParams, projection_mu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQTrainAndEvalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::LOPQTrainAndEvalRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQTrainAndEvalRequest, meta_),
  offsetof(::LOPQTrainAndEvalRequestDefaultTypeInternal, data_),
  offsetof(::LOPQTrainAndEvalRequestDefaultTypeInternal, sql_query_),
  PROTOBUF_FIELD_OFFSET(::LOPQTrainAndEvalRequest, lopq_model_name_),
  PROTOBUF_FIELD_OFFSET(::LOPQTrainAndEvalRequest, train_iters_),
  PROTOBUF_FIELD_OFFSET(::LOPQTrainAndEvalRequest, prev_model_name_),
  PROTOBUF_FIELD_OFFSET(::LOPQTrainAndEvalRequest, spire_name_),
  PROTOBUF_FIELD_OFFSET(::LOPQTrainAndEvalRequest, hyper_parameters_),
  PROTOBUF_FIELD_OFFSET(::LOPQTrainAndEvalRequest, training_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LOPQTrainAndEvalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOPQTrainAndEvalResponse, status_),
  PROTOBUF_FIELD_OFFSET(::LOPQTrainAndEvalResponse, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LOPQPredictRequest)},
  { 8, -1, sizeof(::LOPQPredictResponse)},
  { 16, -1, sizeof(::LOPQSearchRequest)},
  { 33, -1, sizeof(::ConceptOverride)},
  { 41, -1, sizeof(::AttributeMixIn)},
  { 49, -1, sizeof(::LOPQAttributeSearchRequest)},
  { 63, -1, sizeof(::LOPQSearchResult)},
  { 73, -1, sizeof(::LOPQSearchResponse)},
  { 80, -1, sizeof(::LOPQSearchForCodesRequest)},
  { 89, -1, sizeof(::LOPQSearchForCodeResult)},
  { 97, -1, sizeof(::LOPQSearchForCodesResponse)},
  { 104, -1, sizeof(::LOPQBruteForceSearchRequest)},
  { 114, -1, sizeof(::LOPQBruteForceSearchResponse)},
  { 121, -1, sizeof(::BruteForceResult)},
  { 127, -1, sizeof(::LOPQTrainRequest)},
  { 140, -1, sizeof(::LOPQTrainResponse)},
  { 146, -1, sizeof(::LOPQModelParams)},
  { 167, -1, sizeof(::LOPQTrainAndEvalRequest)},
  { 181, -1, sizeof(::LOPQTrainAndEvalResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQPredictRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQPredictResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQSearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConceptOverride_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AttributeMixIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQAttributeSearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQSearchResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQSearchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQSearchForCodesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQSearchForCodeResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQSearchForCodesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQBruteForceSearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQBruteForceSearchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BruteForceResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQTrainRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQTrainResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQModelParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQTrainAndEvalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOPQTrainAndEvalResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2flopq_2flopq_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035proto/lopq/lopq_service.proto\032\033proto/u"
  "tils/databatch.proto\032\033proto/utils/lopq_c"
  "ode.proto\032\036proto/utils/lopq_service.prot"
  "o\032\031proto/utils/ndarray.proto\032\036proto/util"
  "s/request_meta.proto\"c\n\022LOPQPredictReque"
  "st\022\032\n\004meta\030\001 \001(\0132\014.RequestMeta\022\030\n\004data\030\002"
  " \001(\0132\n.DataBatch\022\027\n\017lopq_model_name\030\003 \001("
  "\t\"p\n\023LOPQPredictResponse\022\037\n\006status\030\001 \001(\013"
  "2\017.ResponseStatus\022\033\n\004code\030\002 \003(\0132\t.LOPQCo"
  "deB\002\030\001\022\033\n\007results\030\003 \001(\0132\n.DataBatch\"\253\002\n\021"
  "LOPQSearchRequest\022\032\n\004meta\030\001 \001(\0132\014.Reques"
  "tMeta\022\030\n\004data\030\002 \001(\0132\n.DataBatch\022\024\n\014sql_t"
  "emplate\030\003 \001(\t\022\t\n\001k\030\004 \001(\005\022\r\n\005quota\030\005 \001(\005\022"
  "\023\n\013max_visited\030\006 \001(\005\022\027\n\017lopq_model_name\030"
  "\007 \001(\t\022\030\n\014weight_query\030\010 \001(\010B\002\030\001\022\035\n\025fallb"
  "ack_sql_template\030\t \001(\t\022\031\n\021custom_model_n"
  "ame\030\n \001(\t\022\026\n\016positive_aiids\030\013 \003(\t\022\026\n\016neg"
  "ative_aiids\030\014 \003(\t\":\n\017ConceptOverride\022\n\n\002"
  "id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\003 \001(\002\"r\n"
  "\016AttributeMixIn\022\030\n\020model_version_id\030\001 \001("
  "\t\022\032\n\022mix_in_coefficient\030\002 \001(\002\022*\n\020concept"
  "_override\030\003 \001(\0132\020.ConceptOverride\"\372\001\n\032LO"
  "PQAttributeSearchRequest\022\032\n\004meta\030\001 \001(\0132\014"
  ".RequestMeta\022\030\n\004data\030\002 \001(\0132\n.DataBatch\022\024"
  "\n\014sql_template\030\003 \001(\t\022\t\n\001k\030\004 \001(\005\022\r\n\005quota"
  "\030\005 \001(\005\022\023\n\013max_visited\030\006 \001(\005\022\027\n\017lopq_mode"
  "l_name\030\007 \001(\t\022\035\n\025fallback_sql_template\030\010 "
  "\001(\t\022)\n\020attribute_mix_in\030\t \003(\0132\017.Attribut"
  "eMixIn\"u\n\020LOPQSearchResult\022\020\n\010asset_id\030\001"
  " \001(\t\022\025\n\rannotation_id\030\004 \001(\t\022\r\n\005score\030\002 \001"
  "(\002\022\020\n\010distance\030\003 \001(\002\022\027\n\004code\030\005 \001(\0132\t.LOP"
  "QCode\"X\n\022LOPQSearchResponse\022\037\n\006status\030\001 "
  "\001(\0132\017.ResponseStatus\022!\n\006result\030\002 \003(\0132\021.L"
  "OPQSearchResult\"\177\n\031LOPQSearchForCodesReq"
  "uest\022\032\n\004meta\030\001 \001(\0132\014.RequestMeta\022\030\n\004data"
  "\030\002 \001(\0132\n.DataBatch\022\023\n\013max_visited\030\003 \001(\005\022"
  "\027\n\017lopq_model_name\030\004 \001(\t\"S\n\027LOPQSearchFo"
  "rCodeResult\022\027\n\004code\030\001 \001(\0132\t.LOPQCode\022\r\n\005"
  "score\030\002 \001(\002\022\020\n\010distance\030\003 \001(\002\"g\n\032LOPQSea"
  "rchForCodesResponse\022\037\n\006status\030\001 \001(\0132\017.Re"
  "sponseStatus\022(\n\006result\030\002 \003(\0132\030.LOPQSearc"
  "hForCodeResult\"\222\001\n\033LOPQBruteForceSearchR"
  "equest\022\032\n\004meta\030\001 \001(\0132\014.RequestMeta\022\030\n\004da"
  "ta\030\002 \001(\0132\n.DataBatch\022\021\n\tsql_query\030\003 \001(\t\022"
  "\t\n\001k\030\004 \001(\005\022\037\n\027avg_concept_brute_force\030\005 "
  "\001(\010\"g\n\034LOPQBruteForceSearchResponse\022\037\n\006s"
  "tatus\030\001 \001(\0132\017.ResponseStatus\022&\n\013all_resu"
  "lts\030\002 \003(\0132\021.BruteForceResult\"6\n\020BruteFor"
  "ceResult\022\"\n\007results\030\002 \003(\0132\021.LOPQSearchRe"
  "sult\"\320\001\n\020LOPQTrainRequest\022\032\n\004meta\030\001 \001(\0132"
  "\014.RequestMeta\022\032\n\004data\030\002 \001(\0132\n.DataBatchH"
  "\000\022\023\n\tsql_query\030\003 \001(\tH\000\022\027\n\017lopq_model_nam"
  "e\030\004 \001(\t\022\027\n\017coarse_clusters\030\005 \001(\005\022\023\n\013trai"
  "n_iters\030\006 \001(\005\022\027\n\017prev_model_name\030\007 \001(\tB\017"
  "\n\rtraining_data\"4\n\021LOPQTrainResponse\022\037\n\006"
  "status\030\001 \001(\0132\017.ResponseStatus\"\213\003\n\017LOPQMo"
  "delParams\022\t\n\001D\030\001 \001(\r\022\t\n\001V\030\002 \001(\r\022\t\n\001M\030\003 \001"
  "(\r\022\031\n\021num_subquantizers\030\004 \001(\r\022\024\n\002Cs\030\005 \003("
  "\0132\010.NDArray\022\024\n\002Rs\030\006 \003(\0132\010.NDArray\022\025\n\003mus"
  "\030\007 \003(\0132\010.NDArray\022\026\n\004subs\030\010 \003(\0132\010.NDArray"
  "\022\026\n\016use_embeddings\030\013 \001(\010\022\027\n\005pca_P\030\t \001(\0132"
  "\010.NDArray\022\030\n\006pca_mu\030\n \001(\0132\010.NDArray\022\030\n\020p"
  "ca_just_shuffle\030\014 \001(\010\022#\n\021pca_permuted_in"
  "ds\030\r \001(\0132\010.NDArray\022\026\n\016num_point_dims\030\016 \001"
  "(\r\022\036\n\014projection_P\030\017 \001(\0132\010.NDArray\022\037\n\rpr"
  "ojection_mu\030\020 \001(\0132\010.NDArray\"\354\001\n\027LOPQTrai"
  "nAndEvalRequest\022\032\n\004meta\030\001 \001(\0132\014.RequestM"
  "eta\022\032\n\004data\030\002 \001(\0132\n.DataBatchH\000\022\023\n\tsql_q"
  "uery\030\003 \001(\tH\000\022\027\n\017lopq_model_name\030\004 \001(\t\022\023\n"
  "\013train_iters\030\005 \001(\005\022\027\n\017prev_model_name\030\006 "
  "\001(\t\022\022\n\nspire_name\030\007 \001(\t\022\030\n\020hyper_paramet"
  "ers\030\010 \001(\tB\017\n\rtraining_data\"\\\n\030LOPQTrainA"
  "ndEvalResponse\022\037\n\006status\030\001 \001(\0132\017.Respons"
  "eStatus\022\037\n\006result\030\002 \003(\0132\017.LOPQEvalResult"
  "2\366\003\n\013LOPQService\022:\n\013LOPQPredict\022\023.LOPQPr"
  "edictRequest\032\024.LOPQPredictResponse\"\000\0227\n\n"
  "LOPQSearch\022\022.LOPQSearchRequest\032\023.LOPQSea"
  "rchResponse\"\000\022I\n\023LOPQAttributeSearch\022\033.L"
  "OPQAttributeSearchRequest\032\023.LOPQSearchRe"
  "sponse\"\000\022O\n\022LOPQSearchForCodes\022\032.LOPQSea"
  "rchForCodesRequest\032\033.LOPQSearchForCodesR"
  "esponse\"\000\022U\n\024LOPQBruteForceSearch\022\034.LOPQ"
  "BruteForceSearchRequest\032\035.LOPQBruteForce"
  "SearchResponse\"\000\0224\n\tLOPQTrain\022\021.LOPQTrai"
  "nRequest\032\022.LOPQTrainResponse\"\000\022I\n\020LOPQTr"
  "ainAndEval\022\030.LOPQTrainAndEvalRequest\032\031.L"
  "OPQTrainAndEvalResponse\"\000B\014\n\004lopqZ\004lopqb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2flopq_2flopq_5fservice_2eproto_deps[5] = {
  &::descriptor_table_proto_2futils_2fdatabatch_2eproto,
  &::descriptor_table_proto_2futils_2flopq_5fcode_2eproto,
  &::descriptor_table_proto_2futils_2flopq_5fservice_2eproto,
  &::descriptor_table_proto_2futils_2fndarray_2eproto,
  &::descriptor_table_proto_2futils_2frequest_5fmeta_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2flopq_2flopq_5fservice_2eproto_sccs[19] = {
  &scc_info_AttributeMixIn_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_BruteForceResult_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_ConceptOverride_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQAttributeSearchRequest_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQBruteForceSearchRequest_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQBruteForceSearchResponse_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQModelParams_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQPredictRequest_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQPredictResponse_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQSearchForCodeResult_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQSearchForCodesRequest_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQSearchForCodesResponse_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQSearchRequest_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQSearchResponse_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQSearchResult_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQTrainAndEvalRequest_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQTrainAndEvalResponse_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQTrainRequest_proto_2flopq_2flopq_5fservice_2eproto.base,
  &scc_info_LOPQTrainResponse_proto_2flopq_2flopq_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2flopq_2flopq_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2flopq_2flopq_5fservice_2eproto = {
  false, false, descriptor_table_protodef_proto_2flopq_2flopq_5fservice_2eproto, "proto/lopq/lopq_service.proto", 3487,
  &descriptor_table_proto_2flopq_2flopq_5fservice_2eproto_once, descriptor_table_proto_2flopq_2flopq_5fservice_2eproto_sccs, descriptor_table_proto_2flopq_2flopq_5fservice_2eproto_deps, 19, 5,
  schemas, file_default_instances, TableStruct_proto_2flopq_2flopq_5fservice_2eproto::offsets,
  file_level_metadata_proto_2flopq_2flopq_5fservice_2eproto, 19, file_level_enum_descriptors_proto_2flopq_2flopq_5fservice_2eproto, file_level_service_descriptors_proto_2flopq_2flopq_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2flopq_2flopq_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2flopq_2flopq_5fservice_2eproto)), true);

// ===================================================================

void LOPQPredictRequest::InitAsDefaultInstance() {
  ::_LOPQPredictRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_LOPQPredictRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class LOPQPredictRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const LOPQPredictRequest* msg);
  static const ::DataBatch& data(const LOPQPredictRequest* msg);
};

const ::RequestMeta&
LOPQPredictRequest::_Internal::meta(const LOPQPredictRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
LOPQPredictRequest::_Internal::data(const LOPQPredictRequest* msg) {
  return *msg->data_;
}
void LOPQPredictRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void LOPQPredictRequest::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
LOPQPredictRequest::LOPQPredictRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQPredictRequest)
}
LOPQPredictRequest::LOPQPredictRequest(const LOPQPredictRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lopq_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lopq_model_name().empty()) {
    lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lopq_model_name(),
      GetArena());
  }
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:LOPQPredictRequest)
}

void LOPQPredictRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQPredictRequest_proto_2flopq_2flopq_5fservice_2eproto.base);
  lopq_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(data_));
}

LOPQPredictRequest::~LOPQPredictRequest() {
  // @@protoc_insertion_point(destructor:LOPQPredictRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQPredictRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lopq_model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void LOPQPredictRequest::ArenaDtor(void* object) {
  LOPQPredictRequest* _this = reinterpret_cast< LOPQPredictRequest* >(object);
  (void)_this;
}
void LOPQPredictRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQPredictRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQPredictRequest& LOPQPredictRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQPredictRequest_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQPredictRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQPredictRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lopq_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQPredictRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lopq_model_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lopq_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQPredictRequest.lopq_model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQPredictRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQPredictRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // string lopq_model_name = 3;
  if (this->lopq_model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lopq_model_name().data(), static_cast<int>(this->_internal_lopq_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQPredictRequest.lopq_model_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lopq_model_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQPredictRequest)
  return target;
}

size_t LOPQPredictRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQPredictRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lopq_model_name = 3;
  if (this->lopq_model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lopq_model_name());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQPredictRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQPredictRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQPredictRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQPredictRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQPredictRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQPredictRequest)
    MergeFrom(*source);
  }
}

void LOPQPredictRequest::MergeFrom(const LOPQPredictRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQPredictRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lopq_model_name().size() > 0) {
    _internal_set_lopq_model_name(from._internal_lopq_model_name());
  }
  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::DataBatch::MergeFrom(from._internal_data());
  }
}

void LOPQPredictRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQPredictRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQPredictRequest::CopyFrom(const LOPQPredictRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQPredictRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQPredictRequest::IsInitialized() const {
  return true;
}

void LOPQPredictRequest::InternalSwap(LOPQPredictRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lopq_model_name_.Swap(&other->lopq_model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LOPQPredictRequest, data_)
      + sizeof(LOPQPredictRequest::data_)
      - PROTOBUF_FIELD_OFFSET(LOPQPredictRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQPredictRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQPredictResponse::InitAsDefaultInstance() {
  ::_LOPQPredictResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_LOPQPredictResponse_default_instance_._instance.get_mutable()->results_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class LOPQPredictResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const LOPQPredictResponse* msg);
  static const ::DataBatch& results(const LOPQPredictResponse* msg);
};

const ::ResponseStatus&
LOPQPredictResponse::_Internal::status(const LOPQPredictResponse* msg) {
  return *msg->status_;
}
const ::DataBatch&
LOPQPredictResponse::_Internal::results(const LOPQPredictResponse* msg) {
  return *msg->results_;
}
void LOPQPredictResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void LOPQPredictResponse::clear_code() {
  code_.Clear();
}
void LOPQPredictResponse::clear_results() {
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
}
LOPQPredictResponse::LOPQPredictResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  code_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQPredictResponse)
}
LOPQPredictResponse::LOPQPredictResponse(const LOPQPredictResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      code_(from.code_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_results()) {
    results_ = new ::DataBatch(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:LOPQPredictResponse)
}

void LOPQPredictResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQPredictResponse_proto_2flopq_2flopq_5fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&status_)) + sizeof(results_));
}

LOPQPredictResponse::~LOPQPredictResponse() {
  // @@protoc_insertion_point(destructor:LOPQPredictResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQPredictResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete results_;
}

void LOPQPredictResponse::ArenaDtor(void* object) {
  LOPQPredictResponse* _this = reinterpret_cast< LOPQPredictResponse* >(object);
  (void)_this;
}
void LOPQPredictResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQPredictResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQPredictResponse& LOPQPredictResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQPredictResponse_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQPredictResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQPredictResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQPredictResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LOPQCode code = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_code(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .DataBatch results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQPredictResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQPredictResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .LOPQCode code = 2 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_code_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_code(i), target, stream);
  }

  // .DataBatch results = 3;
  if (this->has_results()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::results(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQPredictResponse)
  return target;
}

size_t LOPQPredictResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQPredictResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LOPQCode code = 2 [deprecated = true];
  total_size += 1UL * this->_internal_code_size();
  for (const auto& msg : this->code_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .DataBatch results = 3;
  if (this->has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQPredictResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQPredictResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQPredictResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQPredictResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQPredictResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQPredictResponse)
    MergeFrom(*source);
  }
}

void LOPQPredictResponse::MergeFrom(const LOPQPredictResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQPredictResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  code_.MergeFrom(from.code_);
  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
  if (from.has_results()) {
    _internal_mutable_results()->::DataBatch::MergeFrom(from._internal_results());
  }
}

void LOPQPredictResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQPredictResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQPredictResponse::CopyFrom(const LOPQPredictResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQPredictResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQPredictResponse::IsInitialized() const {
  return true;
}

void LOPQPredictResponse::InternalSwap(LOPQPredictResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_.InternalSwap(&other->code_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LOPQPredictResponse, results_)
      + sizeof(LOPQPredictResponse::results_)
      - PROTOBUF_FIELD_OFFSET(LOPQPredictResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQPredictResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQSearchRequest::InitAsDefaultInstance() {
  ::_LOPQSearchRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_LOPQSearchRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class LOPQSearchRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const LOPQSearchRequest* msg);
  static const ::DataBatch& data(const LOPQSearchRequest* msg);
};

const ::RequestMeta&
LOPQSearchRequest::_Internal::meta(const LOPQSearchRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
LOPQSearchRequest::_Internal::data(const LOPQSearchRequest* msg) {
  return *msg->data_;
}
void LOPQSearchRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void LOPQSearchRequest::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
LOPQSearchRequest::LOPQSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  positive_aiids_(arena),
  negative_aiids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQSearchRequest)
}
LOPQSearchRequest::LOPQSearchRequest(const LOPQSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      positive_aiids_(from.positive_aiids_),
      negative_aiids_(from.negative_aiids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sql_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sql_template().empty()) {
    sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sql_template(),
      GetArena());
  }
  lopq_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lopq_model_name().empty()) {
    lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lopq_model_name(),
      GetArena());
  }
  fallback_sql_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fallback_sql_template().empty()) {
    fallback_sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fallback_sql_template(),
      GetArena());
  }
  custom_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_custom_model_name().empty()) {
    custom_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_custom_model_name(),
      GetArena());
  }
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_query_) -
    reinterpret_cast<char*>(&k_)) + sizeof(weight_query_));
  // @@protoc_insertion_point(copy_constructor:LOPQSearchRequest)
}

void LOPQSearchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQSearchRequest_proto_2flopq_2flopq_5fservice_2eproto.base);
  sql_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lopq_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fallback_sql_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_query_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(weight_query_));
}

LOPQSearchRequest::~LOPQSearchRequest() {
  // @@protoc_insertion_point(destructor:LOPQSearchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQSearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sql_template_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lopq_model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fallback_sql_template_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void LOPQSearchRequest::ArenaDtor(void* object) {
  LOPQSearchRequest* _this = reinterpret_cast< LOPQSearchRequest* >(object);
  (void)_this;
}
void LOPQSearchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQSearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQSearchRequest& LOPQSearchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQSearchRequest_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positive_aiids_.Clear();
  negative_aiids_.Clear();
  sql_template_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lopq_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fallback_sql_template_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_query_) -
      reinterpret_cast<char*>(&k_)) + sizeof(weight_query_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQSearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sql_template = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sql_template();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQSearchRequest.sql_template"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 k = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 quota = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          quota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_visited = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_visited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lopq_model_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_lopq_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQSearchRequest.lopq_model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool weight_query = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          weight_query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fallback_sql_template = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_fallback_sql_template();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQSearchRequest.fallback_sql_template"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string custom_model_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_custom_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQSearchRequest.custom_model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string positive_aiids = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_positive_aiids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQSearchRequest.positive_aiids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string negative_aiids = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_negative_aiids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQSearchRequest.negative_aiids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQSearchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // string sql_template = 3;
  if (this->sql_template().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sql_template().data(), static_cast<int>(this->_internal_sql_template().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQSearchRequest.sql_template");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sql_template(), target);
  }

  // int32 k = 4;
  if (this->k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_k(), target);
  }

  // int32 quota = 5;
  if (this->quota() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_quota(), target);
  }

  // int32 max_visited = 6;
  if (this->max_visited() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_visited(), target);
  }

  // string lopq_model_name = 7;
  if (this->lopq_model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lopq_model_name().data(), static_cast<int>(this->_internal_lopq_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQSearchRequest.lopq_model_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_lopq_model_name(), target);
  }

  // bool weight_query = 8 [deprecated = true];
  if (this->weight_query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_weight_query(), target);
  }

  // string fallback_sql_template = 9;
  if (this->fallback_sql_template().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fallback_sql_template().data(), static_cast<int>(this->_internal_fallback_sql_template().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQSearchRequest.fallback_sql_template");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_fallback_sql_template(), target);
  }

  // string custom_model_name = 10;
  if (this->custom_model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_custom_model_name().data(), static_cast<int>(this->_internal_custom_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQSearchRequest.custom_model_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_custom_model_name(), target);
  }

  // repeated string positive_aiids = 11;
  for (int i = 0, n = this->_internal_positive_aiids_size(); i < n; i++) {
    const auto& s = this->_internal_positive_aiids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQSearchRequest.positive_aiids");
    target = stream->WriteString(11, s, target);
  }

  // repeated string negative_aiids = 12;
  for (int i = 0, n = this->_internal_negative_aiids_size(); i < n; i++) {
    const auto& s = this->_internal_negative_aiids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQSearchRequest.negative_aiids");
    target = stream->WriteString(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQSearchRequest)
  return target;
}

size_t LOPQSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQSearchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string positive_aiids = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(positive_aiids_.size());
  for (int i = 0, n = positive_aiids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      positive_aiids_.Get(i));
  }

  // repeated string negative_aiids = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(negative_aiids_.size());
  for (int i = 0, n = negative_aiids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      negative_aiids_.Get(i));
  }

  // string sql_template = 3;
  if (this->sql_template().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sql_template());
  }

  // string lopq_model_name = 7;
  if (this->lopq_model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lopq_model_name());
  }

  // string fallback_sql_template = 9;
  if (this->fallback_sql_template().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fallback_sql_template());
  }

  // string custom_model_name = 10;
  if (this->custom_model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_custom_model_name());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 k = 4;
  if (this->k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_k());
  }

  // int32 quota = 5;
  if (this->quota() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quota());
  }

  // int32 max_visited = 6;
  if (this->max_visited() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_visited());
  }

  // bool weight_query = 8 [deprecated = true];
  if (this->weight_query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQSearchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQSearchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQSearchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQSearchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQSearchRequest)
    MergeFrom(*source);
  }
}

void LOPQSearchRequest::MergeFrom(const LOPQSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positive_aiids_.MergeFrom(from.positive_aiids_);
  negative_aiids_.MergeFrom(from.negative_aiids_);
  if (from.sql_template().size() > 0) {
    _internal_set_sql_template(from._internal_sql_template());
  }
  if (from.lopq_model_name().size() > 0) {
    _internal_set_lopq_model_name(from._internal_lopq_model_name());
  }
  if (from.fallback_sql_template().size() > 0) {
    _internal_set_fallback_sql_template(from._internal_fallback_sql_template());
  }
  if (from.custom_model_name().size() > 0) {
    _internal_set_custom_model_name(from._internal_custom_model_name());
  }
  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::DataBatch::MergeFrom(from._internal_data());
  }
  if (from.k() != 0) {
    _internal_set_k(from._internal_k());
  }
  if (from.quota() != 0) {
    _internal_set_quota(from._internal_quota());
  }
  if (from.max_visited() != 0) {
    _internal_set_max_visited(from._internal_max_visited());
  }
  if (from.weight_query() != 0) {
    _internal_set_weight_query(from._internal_weight_query());
  }
}

void LOPQSearchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQSearchRequest::CopyFrom(const LOPQSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQSearchRequest::IsInitialized() const {
  return true;
}

void LOPQSearchRequest::InternalSwap(LOPQSearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  positive_aiids_.InternalSwap(&other->positive_aiids_);
  negative_aiids_.InternalSwap(&other->negative_aiids_);
  sql_template_.Swap(&other->sql_template_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lopq_model_name_.Swap(&other->lopq_model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fallback_sql_template_.Swap(&other->fallback_sql_template_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_model_name_.Swap(&other->custom_model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LOPQSearchRequest, weight_query_)
      + sizeof(LOPQSearchRequest::weight_query_)
      - PROTOBUF_FIELD_OFFSET(LOPQSearchRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQSearchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConceptOverride::InitAsDefaultInstance() {
}
class ConceptOverride::_Internal {
 public:
};

ConceptOverride::ConceptOverride(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ConceptOverride)
}
ConceptOverride::ConceptOverride(const ConceptOverride& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ConceptOverride)
}

void ConceptOverride::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConceptOverride_proto_2flopq_2flopq_5fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

ConceptOverride::~ConceptOverride() {
  // @@protoc_insertion_point(destructor:ConceptOverride)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConceptOverride::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConceptOverride::ArenaDtor(void* object) {
  ConceptOverride* _this = reinterpret_cast< ConceptOverride* >(object);
  (void)_this;
}
void ConceptOverride::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConceptOverride::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConceptOverride& ConceptOverride::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConceptOverride_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ConceptOverride::Clear() {
// @@protoc_insertion_point(message_clear_start:ConceptOverride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConceptOverride::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConceptOverride.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConceptOverride.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConceptOverride::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConceptOverride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConceptOverride.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConceptOverride.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // float value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConceptOverride)
  return target;
}

size_t ConceptOverride::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConceptOverride)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // float value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConceptOverride::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConceptOverride)
  GOOGLE_DCHECK_NE(&from, this);
  const ConceptOverride* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConceptOverride>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConceptOverride)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConceptOverride)
    MergeFrom(*source);
  }
}

void ConceptOverride::MergeFrom(const ConceptOverride& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConceptOverride)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void ConceptOverride::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConceptOverride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConceptOverride::CopyFrom(const ConceptOverride& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConceptOverride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptOverride::IsInitialized() const {
  return true;
}

void ConceptOverride::InternalSwap(ConceptOverride* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptOverride::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttributeMixIn::InitAsDefaultInstance() {
  ::_AttributeMixIn_default_instance_._instance.get_mutable()->concept_override_ = const_cast< ::ConceptOverride*>(
      ::ConceptOverride::internal_default_instance());
}
class AttributeMixIn::_Internal {
 public:
  static const ::ConceptOverride& concept_override(const AttributeMixIn* msg);
};

const ::ConceptOverride&
AttributeMixIn::_Internal::concept_override(const AttributeMixIn* msg) {
  return *msg->concept_override_;
}
AttributeMixIn::AttributeMixIn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AttributeMixIn)
}
AttributeMixIn::AttributeMixIn(const AttributeMixIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_version_id(),
      GetArena());
  }
  if (from._internal_has_concept_override()) {
    concept_override_ = new ::ConceptOverride(*from.concept_override_);
  } else {
    concept_override_ = nullptr;
  }
  mix_in_coefficient_ = from.mix_in_coefficient_;
  // @@protoc_insertion_point(copy_constructor:AttributeMixIn)
}

void AttributeMixIn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttributeMixIn_proto_2flopq_2flopq_5fservice_2eproto.base);
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&concept_override_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mix_in_coefficient_) -
      reinterpret_cast<char*>(&concept_override_)) + sizeof(mix_in_coefficient_));
}

AttributeMixIn::~AttributeMixIn() {
  // @@protoc_insertion_point(destructor:AttributeMixIn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttributeMixIn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete concept_override_;
}

void AttributeMixIn::ArenaDtor(void* object) {
  AttributeMixIn* _this = reinterpret_cast< AttributeMixIn* >(object);
  (void)_this;
}
void AttributeMixIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttributeMixIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttributeMixIn& AttributeMixIn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttributeMixIn_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AttributeMixIn::Clear() {
// @@protoc_insertion_point(message_clear_start:AttributeMixIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_version_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && concept_override_ != nullptr) {
    delete concept_override_;
  }
  concept_override_ = nullptr;
  mix_in_coefficient_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeMixIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model_version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AttributeMixIn.model_version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float mix_in_coefficient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          mix_in_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .ConceptOverride concept_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept_override(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttributeMixIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AttributeMixIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_version_id = 1;
  if (this->model_version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AttributeMixIn.model_version_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_version_id(), target);
  }

  // float mix_in_coefficient = 2;
  if (!(this->mix_in_coefficient() <= 0 && this->mix_in_coefficient() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_mix_in_coefficient(), target);
  }

  // .ConceptOverride concept_override = 3;
  if (this->has_concept_override()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::concept_override(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AttributeMixIn)
  return target;
}

size_t AttributeMixIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AttributeMixIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_version_id = 1;
  if (this->model_version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // .ConceptOverride concept_override = 3;
  if (this->has_concept_override()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_override_);
  }

  // float mix_in_coefficient = 2;
  if (!(this->mix_in_coefficient() <= 0 && this->mix_in_coefficient() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttributeMixIn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AttributeMixIn)
  GOOGLE_DCHECK_NE(&from, this);
  const AttributeMixIn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttributeMixIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AttributeMixIn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AttributeMixIn)
    MergeFrom(*source);
  }
}

void AttributeMixIn::MergeFrom(const AttributeMixIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AttributeMixIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_version_id().size() > 0) {
    _internal_set_model_version_id(from._internal_model_version_id());
  }
  if (from.has_concept_override()) {
    _internal_mutable_concept_override()->::ConceptOverride::MergeFrom(from._internal_concept_override());
  }
  if (!(from.mix_in_coefficient() <= 0 && from.mix_in_coefficient() >= 0)) {
    _internal_set_mix_in_coefficient(from._internal_mix_in_coefficient());
  }
}

void AttributeMixIn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AttributeMixIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeMixIn::CopyFrom(const AttributeMixIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AttributeMixIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeMixIn::IsInitialized() const {
  return true;
}

void AttributeMixIn::InternalSwap(AttributeMixIn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  model_version_id_.Swap(&other->model_version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttributeMixIn, mix_in_coefficient_)
      + sizeof(AttributeMixIn::mix_in_coefficient_)
      - PROTOBUF_FIELD_OFFSET(AttributeMixIn, concept_override_)>(
          reinterpret_cast<char*>(&concept_override_),
          reinterpret_cast<char*>(&other->concept_override_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeMixIn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQAttributeSearchRequest::InitAsDefaultInstance() {
  ::_LOPQAttributeSearchRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_LOPQAttributeSearchRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class LOPQAttributeSearchRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const LOPQAttributeSearchRequest* msg);
  static const ::DataBatch& data(const LOPQAttributeSearchRequest* msg);
};

const ::RequestMeta&
LOPQAttributeSearchRequest::_Internal::meta(const LOPQAttributeSearchRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
LOPQAttributeSearchRequest::_Internal::data(const LOPQAttributeSearchRequest* msg) {
  return *msg->data_;
}
void LOPQAttributeSearchRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void LOPQAttributeSearchRequest::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
LOPQAttributeSearchRequest::LOPQAttributeSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribute_mix_in_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQAttributeSearchRequest)
}
LOPQAttributeSearchRequest::LOPQAttributeSearchRequest(const LOPQAttributeSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attribute_mix_in_(from.attribute_mix_in_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sql_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sql_template().empty()) {
    sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sql_template(),
      GetArena());
  }
  lopq_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lopq_model_name().empty()) {
    lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lopq_model_name(),
      GetArena());
  }
  fallback_sql_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fallback_sql_template().empty()) {
    fallback_sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fallback_sql_template(),
      GetArena());
  }
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_visited_) -
    reinterpret_cast<char*>(&k_)) + sizeof(max_visited_));
  // @@protoc_insertion_point(copy_constructor:LOPQAttributeSearchRequest)
}

void LOPQAttributeSearchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQAttributeSearchRequest_proto_2flopq_2flopq_5fservice_2eproto.base);
  sql_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lopq_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fallback_sql_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_visited_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(max_visited_));
}

LOPQAttributeSearchRequest::~LOPQAttributeSearchRequest() {
  // @@protoc_insertion_point(destructor:LOPQAttributeSearchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQAttributeSearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sql_template_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lopq_model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fallback_sql_template_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void LOPQAttributeSearchRequest::ArenaDtor(void* object) {
  LOPQAttributeSearchRequest* _this = reinterpret_cast< LOPQAttributeSearchRequest* >(object);
  (void)_this;
}
void LOPQAttributeSearchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQAttributeSearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQAttributeSearchRequest& LOPQAttributeSearchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQAttributeSearchRequest_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQAttributeSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQAttributeSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_mix_in_.Clear();
  sql_template_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lopq_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fallback_sql_template_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_visited_) -
      reinterpret_cast<char*>(&k_)) + sizeof(max_visited_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQAttributeSearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sql_template = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sql_template();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQAttributeSearchRequest.sql_template"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 k = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 quota = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          quota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_visited = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_visited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lopq_model_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_lopq_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQAttributeSearchRequest.lopq_model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fallback_sql_template = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_fallback_sql_template();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQAttributeSearchRequest.fallback_sql_template"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AttributeMixIn attribute_mix_in = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute_mix_in(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQAttributeSearchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQAttributeSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // string sql_template = 3;
  if (this->sql_template().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sql_template().data(), static_cast<int>(this->_internal_sql_template().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQAttributeSearchRequest.sql_template");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sql_template(), target);
  }

  // int32 k = 4;
  if (this->k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_k(), target);
  }

  // int32 quota = 5;
  if (this->quota() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_quota(), target);
  }

  // int32 max_visited = 6;
  if (this->max_visited() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_visited(), target);
  }

  // string lopq_model_name = 7;
  if (this->lopq_model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lopq_model_name().data(), static_cast<int>(this->_internal_lopq_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQAttributeSearchRequest.lopq_model_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_lopq_model_name(), target);
  }

  // string fallback_sql_template = 8;
  if (this->fallback_sql_template().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fallback_sql_template().data(), static_cast<int>(this->_internal_fallback_sql_template().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQAttributeSearchRequest.fallback_sql_template");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_fallback_sql_template(), target);
  }

  // repeated .AttributeMixIn attribute_mix_in = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_mix_in_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_attribute_mix_in(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQAttributeSearchRequest)
  return target;
}

size_t LOPQAttributeSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQAttributeSearchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AttributeMixIn attribute_mix_in = 9;
  total_size += 1UL * this->_internal_attribute_mix_in_size();
  for (const auto& msg : this->attribute_mix_in_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sql_template = 3;
  if (this->sql_template().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sql_template());
  }

  // string lopq_model_name = 7;
  if (this->lopq_model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lopq_model_name());
  }

  // string fallback_sql_template = 8;
  if (this->fallback_sql_template().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fallback_sql_template());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 k = 4;
  if (this->k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_k());
  }

  // int32 quota = 5;
  if (this->quota() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quota());
  }

  // int32 max_visited = 6;
  if (this->max_visited() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_visited());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQAttributeSearchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQAttributeSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQAttributeSearchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQAttributeSearchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQAttributeSearchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQAttributeSearchRequest)
    MergeFrom(*source);
  }
}

void LOPQAttributeSearchRequest::MergeFrom(const LOPQAttributeSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQAttributeSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_mix_in_.MergeFrom(from.attribute_mix_in_);
  if (from.sql_template().size() > 0) {
    _internal_set_sql_template(from._internal_sql_template());
  }
  if (from.lopq_model_name().size() > 0) {
    _internal_set_lopq_model_name(from._internal_lopq_model_name());
  }
  if (from.fallback_sql_template().size() > 0) {
    _internal_set_fallback_sql_template(from._internal_fallback_sql_template());
  }
  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::DataBatch::MergeFrom(from._internal_data());
  }
  if (from.k() != 0) {
    _internal_set_k(from._internal_k());
  }
  if (from.quota() != 0) {
    _internal_set_quota(from._internal_quota());
  }
  if (from.max_visited() != 0) {
    _internal_set_max_visited(from._internal_max_visited());
  }
}

void LOPQAttributeSearchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQAttributeSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQAttributeSearchRequest::CopyFrom(const LOPQAttributeSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQAttributeSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQAttributeSearchRequest::IsInitialized() const {
  return true;
}

void LOPQAttributeSearchRequest::InternalSwap(LOPQAttributeSearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribute_mix_in_.InternalSwap(&other->attribute_mix_in_);
  sql_template_.Swap(&other->sql_template_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lopq_model_name_.Swap(&other->lopq_model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fallback_sql_template_.Swap(&other->fallback_sql_template_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LOPQAttributeSearchRequest, max_visited_)
      + sizeof(LOPQAttributeSearchRequest::max_visited_)
      - PROTOBUF_FIELD_OFFSET(LOPQAttributeSearchRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQAttributeSearchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQSearchResult::InitAsDefaultInstance() {
  ::_LOPQSearchResult_default_instance_._instance.get_mutable()->code_ = const_cast< ::LOPQCode*>(
      ::LOPQCode::internal_default_instance());
}
class LOPQSearchResult::_Internal {
 public:
  static const ::LOPQCode& code(const LOPQSearchResult* msg);
};

const ::LOPQCode&
LOPQSearchResult::_Internal::code(const LOPQSearchResult* msg) {
  return *msg->code_;
}
void LOPQSearchResult::clear_code() {
  if (GetArena() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
}
LOPQSearchResult::LOPQSearchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQSearchResult)
}
LOPQSearchResult::LOPQSearchResult(const LOPQSearchResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_asset_id(),
      GetArena());
  }
  annotation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_annotation_id().empty()) {
    annotation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_annotation_id(),
      GetArena());
  }
  if (from._internal_has_code()) {
    code_ = new ::LOPQCode(*from.code_);
  } else {
    code_ = nullptr;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&score_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:LOPQSearchResult)
}

void LOPQSearchResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQSearchResult_proto_2flopq_2flopq_5fservice_2eproto.base);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&code_)) + sizeof(distance_));
}

LOPQSearchResult::~LOPQSearchResult() {
  // @@protoc_insertion_point(destructor:LOPQSearchResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQSearchResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_;
}

void LOPQSearchResult::ArenaDtor(void* object) {
  LOPQSearchResult* _this = reinterpret_cast< LOPQSearchResult* >(object);
  (void)_this;
}
void LOPQSearchResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQSearchResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQSearchResult& LOPQSearchResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQSearchResult_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQSearchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQSearchResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  annotation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&score_)) + sizeof(distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQSearchResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQSearchResult.asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string annotation_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_annotation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQSearchResult.annotation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LOPQCode code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQSearchResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQSearchResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQSearchResult.asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_id(), target);
  }

  // float score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_score(), target);
  }

  // float distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_distance(), target);
  }

  // string annotation_id = 4;
  if (this->annotation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_annotation_id().data(), static_cast<int>(this->_internal_annotation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQSearchResult.annotation_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_annotation_id(), target);
  }

  // .LOPQCode code = 5;
  if (this->has_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::code(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQSearchResult)
  return target;
}

size_t LOPQSearchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQSearchResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // string annotation_id = 4;
  if (this->annotation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_annotation_id());
  }

  // .LOPQCode code = 5;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // float score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 4;
  }

  // float distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQSearchResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQSearchResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQSearchResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQSearchResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQSearchResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQSearchResult)
    MergeFrom(*source);
  }
}

void LOPQSearchResult::MergeFrom(const LOPQSearchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQSearchResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.annotation_id().size() > 0) {
    _internal_set_annotation_id(from._internal_annotation_id());
  }
  if (from.has_code()) {
    _internal_mutable_code()->::LOPQCode::MergeFrom(from._internal_code());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    _internal_set_score(from._internal_score());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
}

void LOPQSearchResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQSearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQSearchResult::CopyFrom(const LOPQSearchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQSearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQSearchResult::IsInitialized() const {
  return true;
}

void LOPQSearchResult::InternalSwap(LOPQSearchResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  annotation_id_.Swap(&other->annotation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LOPQSearchResult, distance_)
      + sizeof(LOPQSearchResult::distance_)
      - PROTOBUF_FIELD_OFFSET(LOPQSearchResult, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQSearchResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQSearchResponse::InitAsDefaultInstance() {
  ::_LOPQSearchResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
}
class LOPQSearchResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const LOPQSearchResponse* msg);
};

const ::ResponseStatus&
LOPQSearchResponse::_Internal::status(const LOPQSearchResponse* msg) {
  return *msg->status_;
}
void LOPQSearchResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
LOPQSearchResponse::LOPQSearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQSearchResponse)
}
LOPQSearchResponse::LOPQSearchResponse(const LOPQSearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:LOPQSearchResponse)
}

void LOPQSearchResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQSearchResponse_proto_2flopq_2flopq_5fservice_2eproto.base);
  status_ = nullptr;
}

LOPQSearchResponse::~LOPQSearchResponse() {
  // @@protoc_insertion_point(destructor:LOPQSearchResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQSearchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void LOPQSearchResponse::ArenaDtor(void* object) {
  LOPQSearchResponse* _this = reinterpret_cast< LOPQSearchResponse* >(object);
  (void)_this;
}
void LOPQSearchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQSearchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQSearchResponse& LOPQSearchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQSearchResponse_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQSearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQSearchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LOPQSearchResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQSearchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQSearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .LOPQSearchResult result = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_result(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQSearchResponse)
  return target;
}

size_t LOPQSearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQSearchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LOPQSearchResult result = 2;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQSearchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQSearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQSearchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQSearchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQSearchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQSearchResponse)
    MergeFrom(*source);
  }
}

void LOPQSearchResponse::MergeFrom(const LOPQSearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQSearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
}

void LOPQSearchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQSearchResponse::CopyFrom(const LOPQSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQSearchResponse::IsInitialized() const {
  return true;
}

void LOPQSearchResponse::InternalSwap(LOPQSearchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.InternalSwap(&other->result_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQSearchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQSearchForCodesRequest::InitAsDefaultInstance() {
  ::_LOPQSearchForCodesRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_LOPQSearchForCodesRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class LOPQSearchForCodesRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const LOPQSearchForCodesRequest* msg);
  static const ::DataBatch& data(const LOPQSearchForCodesRequest* msg);
};

const ::RequestMeta&
LOPQSearchForCodesRequest::_Internal::meta(const LOPQSearchForCodesRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
LOPQSearchForCodesRequest::_Internal::data(const LOPQSearchForCodesRequest* msg) {
  return *msg->data_;
}
void LOPQSearchForCodesRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void LOPQSearchForCodesRequest::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
LOPQSearchForCodesRequest::LOPQSearchForCodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQSearchForCodesRequest)
}
LOPQSearchForCodesRequest::LOPQSearchForCodesRequest(const LOPQSearchForCodesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lopq_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lopq_model_name().empty()) {
    lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lopq_model_name(),
      GetArena());
  }
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  max_visited_ = from.max_visited_;
  // @@protoc_insertion_point(copy_constructor:LOPQSearchForCodesRequest)
}

void LOPQSearchForCodesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQSearchForCodesRequest_proto_2flopq_2flopq_5fservice_2eproto.base);
  lopq_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_visited_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(max_visited_));
}

LOPQSearchForCodesRequest::~LOPQSearchForCodesRequest() {
  // @@protoc_insertion_point(destructor:LOPQSearchForCodesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQSearchForCodesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lopq_model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void LOPQSearchForCodesRequest::ArenaDtor(void* object) {
  LOPQSearchForCodesRequest* _this = reinterpret_cast< LOPQSearchForCodesRequest* >(object);
  (void)_this;
}
void LOPQSearchForCodesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQSearchForCodesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQSearchForCodesRequest& LOPQSearchForCodesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQSearchForCodesRequest_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQSearchForCodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQSearchForCodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lopq_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  max_visited_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQSearchForCodesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_visited = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_visited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lopq_model_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_lopq_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQSearchForCodesRequest.lopq_model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQSearchForCodesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQSearchForCodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // int32 max_visited = 3;
  if (this->max_visited() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_visited(), target);
  }

  // string lopq_model_name = 4;
  if (this->lopq_model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lopq_model_name().data(), static_cast<int>(this->_internal_lopq_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQSearchForCodesRequest.lopq_model_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_lopq_model_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQSearchForCodesRequest)
  return target;
}

size_t LOPQSearchForCodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQSearchForCodesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lopq_model_name = 4;
  if (this->lopq_model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lopq_model_name());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 max_visited = 3;
  if (this->max_visited() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_visited());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQSearchForCodesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQSearchForCodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQSearchForCodesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQSearchForCodesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQSearchForCodesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQSearchForCodesRequest)
    MergeFrom(*source);
  }
}

void LOPQSearchForCodesRequest::MergeFrom(const LOPQSearchForCodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQSearchForCodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lopq_model_name().size() > 0) {
    _internal_set_lopq_model_name(from._internal_lopq_model_name());
  }
  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::DataBatch::MergeFrom(from._internal_data());
  }
  if (from.max_visited() != 0) {
    _internal_set_max_visited(from._internal_max_visited());
  }
}

void LOPQSearchForCodesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQSearchForCodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQSearchForCodesRequest::CopyFrom(const LOPQSearchForCodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQSearchForCodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQSearchForCodesRequest::IsInitialized() const {
  return true;
}

void LOPQSearchForCodesRequest::InternalSwap(LOPQSearchForCodesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lopq_model_name_.Swap(&other->lopq_model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LOPQSearchForCodesRequest, max_visited_)
      + sizeof(LOPQSearchForCodesRequest::max_visited_)
      - PROTOBUF_FIELD_OFFSET(LOPQSearchForCodesRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQSearchForCodesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQSearchForCodeResult::InitAsDefaultInstance() {
  ::_LOPQSearchForCodeResult_default_instance_._instance.get_mutable()->code_ = const_cast< ::LOPQCode*>(
      ::LOPQCode::internal_default_instance());
}
class LOPQSearchForCodeResult::_Internal {
 public:
  static const ::LOPQCode& code(const LOPQSearchForCodeResult* msg);
};

const ::LOPQCode&
LOPQSearchForCodeResult::_Internal::code(const LOPQSearchForCodeResult* msg) {
  return *msg->code_;
}
void LOPQSearchForCodeResult::clear_code() {
  if (GetArena() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
}
LOPQSearchForCodeResult::LOPQSearchForCodeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQSearchForCodeResult)
}
LOPQSearchForCodeResult::LOPQSearchForCodeResult(const LOPQSearchForCodeResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_code()) {
    code_ = new ::LOPQCode(*from.code_);
  } else {
    code_ = nullptr;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&score_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:LOPQSearchForCodeResult)
}

void LOPQSearchForCodeResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQSearchForCodeResult_proto_2flopq_2flopq_5fservice_2eproto.base);
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&code_)) + sizeof(distance_));
}

LOPQSearchForCodeResult::~LOPQSearchForCodeResult() {
  // @@protoc_insertion_point(destructor:LOPQSearchForCodeResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQSearchForCodeResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete code_;
}

void LOPQSearchForCodeResult::ArenaDtor(void* object) {
  LOPQSearchForCodeResult* _this = reinterpret_cast< LOPQSearchForCodeResult* >(object);
  (void)_this;
}
void LOPQSearchForCodeResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQSearchForCodeResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQSearchForCodeResult& LOPQSearchForCodeResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQSearchForCodeResult_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQSearchForCodeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQSearchForCodeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&score_)) + sizeof(distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQSearchForCodeResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LOPQCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQSearchForCodeResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQSearchForCodeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LOPQCode code = 1;
  if (this->has_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::code(this), target, stream);
  }

  // float score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_score(), target);
  }

  // float distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQSearchForCodeResult)
  return target;
}

size_t LOPQSearchForCodeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQSearchForCodeResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LOPQCode code = 1;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // float score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 4;
  }

  // float distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQSearchForCodeResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQSearchForCodeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQSearchForCodeResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQSearchForCodeResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQSearchForCodeResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQSearchForCodeResult)
    MergeFrom(*source);
  }
}

void LOPQSearchForCodeResult::MergeFrom(const LOPQSearchForCodeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQSearchForCodeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_code()) {
    _internal_mutable_code()->::LOPQCode::MergeFrom(from._internal_code());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    _internal_set_score(from._internal_score());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
}

void LOPQSearchForCodeResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQSearchForCodeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQSearchForCodeResult::CopyFrom(const LOPQSearchForCodeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQSearchForCodeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQSearchForCodeResult::IsInitialized() const {
  return true;
}

void LOPQSearchForCodeResult::InternalSwap(LOPQSearchForCodeResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LOPQSearchForCodeResult, distance_)
      + sizeof(LOPQSearchForCodeResult::distance_)
      - PROTOBUF_FIELD_OFFSET(LOPQSearchForCodeResult, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQSearchForCodeResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQSearchForCodesResponse::InitAsDefaultInstance() {
  ::_LOPQSearchForCodesResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
}
class LOPQSearchForCodesResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const LOPQSearchForCodesResponse* msg);
};

const ::ResponseStatus&
LOPQSearchForCodesResponse::_Internal::status(const LOPQSearchForCodesResponse* msg) {
  return *msg->status_;
}
void LOPQSearchForCodesResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
LOPQSearchForCodesResponse::LOPQSearchForCodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQSearchForCodesResponse)
}
LOPQSearchForCodesResponse::LOPQSearchForCodesResponse(const LOPQSearchForCodesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:LOPQSearchForCodesResponse)
}

void LOPQSearchForCodesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQSearchForCodesResponse_proto_2flopq_2flopq_5fservice_2eproto.base);
  status_ = nullptr;
}

LOPQSearchForCodesResponse::~LOPQSearchForCodesResponse() {
  // @@protoc_insertion_point(destructor:LOPQSearchForCodesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQSearchForCodesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void LOPQSearchForCodesResponse::ArenaDtor(void* object) {
  LOPQSearchForCodesResponse* _this = reinterpret_cast< LOPQSearchForCodesResponse* >(object);
  (void)_this;
}
void LOPQSearchForCodesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQSearchForCodesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQSearchForCodesResponse& LOPQSearchForCodesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQSearchForCodesResponse_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQSearchForCodesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQSearchForCodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQSearchForCodesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LOPQSearchForCodeResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQSearchForCodesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQSearchForCodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .LOPQSearchForCodeResult result = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_result(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQSearchForCodesResponse)
  return target;
}

size_t LOPQSearchForCodesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQSearchForCodesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LOPQSearchForCodeResult result = 2;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQSearchForCodesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQSearchForCodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQSearchForCodesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQSearchForCodesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQSearchForCodesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQSearchForCodesResponse)
    MergeFrom(*source);
  }
}

void LOPQSearchForCodesResponse::MergeFrom(const LOPQSearchForCodesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQSearchForCodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
}

void LOPQSearchForCodesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQSearchForCodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQSearchForCodesResponse::CopyFrom(const LOPQSearchForCodesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQSearchForCodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQSearchForCodesResponse::IsInitialized() const {
  return true;
}

void LOPQSearchForCodesResponse::InternalSwap(LOPQSearchForCodesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.InternalSwap(&other->result_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQSearchForCodesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQBruteForceSearchRequest::InitAsDefaultInstance() {
  ::_LOPQBruteForceSearchRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_LOPQBruteForceSearchRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class LOPQBruteForceSearchRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const LOPQBruteForceSearchRequest* msg);
  static const ::DataBatch& data(const LOPQBruteForceSearchRequest* msg);
};

const ::RequestMeta&
LOPQBruteForceSearchRequest::_Internal::meta(const LOPQBruteForceSearchRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
LOPQBruteForceSearchRequest::_Internal::data(const LOPQBruteForceSearchRequest* msg) {
  return *msg->data_;
}
void LOPQBruteForceSearchRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void LOPQBruteForceSearchRequest::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
LOPQBruteForceSearchRequest::LOPQBruteForceSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQBruteForceSearchRequest)
}
LOPQBruteForceSearchRequest::LOPQBruteForceSearchRequest(const LOPQBruteForceSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sql_query().empty()) {
    sql_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sql_query(),
      GetArena());
  }
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&avg_concept_brute_force_) -
    reinterpret_cast<char*>(&k_)) + sizeof(avg_concept_brute_force_));
  // @@protoc_insertion_point(copy_constructor:LOPQBruteForceSearchRequest)
}

void LOPQBruteForceSearchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQBruteForceSearchRequest_proto_2flopq_2flopq_5fservice_2eproto.base);
  sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avg_concept_brute_force_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(avg_concept_brute_force_));
}

LOPQBruteForceSearchRequest::~LOPQBruteForceSearchRequest() {
  // @@protoc_insertion_point(destructor:LOPQBruteForceSearchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQBruteForceSearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sql_query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void LOPQBruteForceSearchRequest::ArenaDtor(void* object) {
  LOPQBruteForceSearchRequest* _this = reinterpret_cast< LOPQBruteForceSearchRequest* >(object);
  (void)_this;
}
void LOPQBruteForceSearchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQBruteForceSearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQBruteForceSearchRequest& LOPQBruteForceSearchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQBruteForceSearchRequest_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQBruteForceSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQBruteForceSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sql_query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avg_concept_brute_force_) -
      reinterpret_cast<char*>(&k_)) + sizeof(avg_concept_brute_force_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQBruteForceSearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sql_query = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sql_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQBruteForceSearchRequest.sql_query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 k = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool avg_concept_brute_force = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          avg_concept_brute_force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQBruteForceSearchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQBruteForceSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // string sql_query = 3;
  if (this->sql_query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sql_query().data(), static_cast<int>(this->_internal_sql_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQBruteForceSearchRequest.sql_query");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sql_query(), target);
  }

  // int32 k = 4;
  if (this->k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_k(), target);
  }

  // bool avg_concept_brute_force = 5;
  if (this->avg_concept_brute_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_avg_concept_brute_force(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQBruteForceSearchRequest)
  return target;
}

size_t LOPQBruteForceSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQBruteForceSearchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sql_query = 3;
  if (this->sql_query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sql_query());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 k = 4;
  if (this->k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_k());
  }

  // bool avg_concept_brute_force = 5;
  if (this->avg_concept_brute_force() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQBruteForceSearchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQBruteForceSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQBruteForceSearchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQBruteForceSearchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQBruteForceSearchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQBruteForceSearchRequest)
    MergeFrom(*source);
  }
}

void LOPQBruteForceSearchRequest::MergeFrom(const LOPQBruteForceSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQBruteForceSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sql_query().size() > 0) {
    _internal_set_sql_query(from._internal_sql_query());
  }
  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::DataBatch::MergeFrom(from._internal_data());
  }
  if (from.k() != 0) {
    _internal_set_k(from._internal_k());
  }
  if (from.avg_concept_brute_force() != 0) {
    _internal_set_avg_concept_brute_force(from._internal_avg_concept_brute_force());
  }
}

void LOPQBruteForceSearchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQBruteForceSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQBruteForceSearchRequest::CopyFrom(const LOPQBruteForceSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQBruteForceSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQBruteForceSearchRequest::IsInitialized() const {
  return true;
}

void LOPQBruteForceSearchRequest::InternalSwap(LOPQBruteForceSearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sql_query_.Swap(&other->sql_query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LOPQBruteForceSearchRequest, avg_concept_brute_force_)
      + sizeof(LOPQBruteForceSearchRequest::avg_concept_brute_force_)
      - PROTOBUF_FIELD_OFFSET(LOPQBruteForceSearchRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQBruteForceSearchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQBruteForceSearchResponse::InitAsDefaultInstance() {
  ::_LOPQBruteForceSearchResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
}
class LOPQBruteForceSearchResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const LOPQBruteForceSearchResponse* msg);
};

const ::ResponseStatus&
LOPQBruteForceSearchResponse::_Internal::status(const LOPQBruteForceSearchResponse* msg) {
  return *msg->status_;
}
void LOPQBruteForceSearchResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
LOPQBruteForceSearchResponse::LOPQBruteForceSearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  all_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQBruteForceSearchResponse)
}
LOPQBruteForceSearchResponse::LOPQBruteForceSearchResponse(const LOPQBruteForceSearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      all_results_(from.all_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:LOPQBruteForceSearchResponse)
}

void LOPQBruteForceSearchResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQBruteForceSearchResponse_proto_2flopq_2flopq_5fservice_2eproto.base);
  status_ = nullptr;
}

LOPQBruteForceSearchResponse::~LOPQBruteForceSearchResponse() {
  // @@protoc_insertion_point(destructor:LOPQBruteForceSearchResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQBruteForceSearchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void LOPQBruteForceSearchResponse::ArenaDtor(void* object) {
  LOPQBruteForceSearchResponse* _this = reinterpret_cast< LOPQBruteForceSearchResponse* >(object);
  (void)_this;
}
void LOPQBruteForceSearchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQBruteForceSearchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQBruteForceSearchResponse& LOPQBruteForceSearchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQBruteForceSearchResponse_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQBruteForceSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQBruteForceSearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_results_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQBruteForceSearchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BruteForceResult all_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQBruteForceSearchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQBruteForceSearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .BruteForceResult all_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_all_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_all_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQBruteForceSearchResponse)
  return target;
}

size_t LOPQBruteForceSearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQBruteForceSearchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BruteForceResult all_results = 2;
  total_size += 1UL * this->_internal_all_results_size();
  for (const auto& msg : this->all_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQBruteForceSearchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQBruteForceSearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQBruteForceSearchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQBruteForceSearchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQBruteForceSearchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQBruteForceSearchResponse)
    MergeFrom(*source);
  }
}

void LOPQBruteForceSearchResponse::MergeFrom(const LOPQBruteForceSearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQBruteForceSearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_results_.MergeFrom(from.all_results_);
  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
}

void LOPQBruteForceSearchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQBruteForceSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQBruteForceSearchResponse::CopyFrom(const LOPQBruteForceSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQBruteForceSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQBruteForceSearchResponse::IsInitialized() const {
  return true;
}

void LOPQBruteForceSearchResponse::InternalSwap(LOPQBruteForceSearchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  all_results_.InternalSwap(&other->all_results_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQBruteForceSearchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BruteForceResult::InitAsDefaultInstance() {
}
class BruteForceResult::_Internal {
 public:
};

BruteForceResult::BruteForceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BruteForceResult)
}
BruteForceResult::BruteForceResult(const BruteForceResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BruteForceResult)
}

void BruteForceResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BruteForceResult_proto_2flopq_2flopq_5fservice_2eproto.base);
}

BruteForceResult::~BruteForceResult() {
  // @@protoc_insertion_point(destructor:BruteForceResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BruteForceResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BruteForceResult::ArenaDtor(void* object) {
  BruteForceResult* _this = reinterpret_cast< BruteForceResult* >(object);
  (void)_this;
}
void BruteForceResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BruteForceResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BruteForceResult& BruteForceResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BruteForceResult_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BruteForceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:BruteForceResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BruteForceResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .LOPQSearchResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BruteForceResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BruteForceResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LOPQSearchResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BruteForceResult)
  return target;
}

size_t BruteForceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BruteForceResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LOPQSearchResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BruteForceResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BruteForceResult)
  GOOGLE_DCHECK_NE(&from, this);
  const BruteForceResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BruteForceResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BruteForceResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BruteForceResult)
    MergeFrom(*source);
  }
}

void BruteForceResult::MergeFrom(const BruteForceResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BruteForceResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void BruteForceResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BruteForceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BruteForceResult::CopyFrom(const BruteForceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BruteForceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BruteForceResult::IsInitialized() const {
  return true;
}

void BruteForceResult::InternalSwap(BruteForceResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BruteForceResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQTrainRequest::InitAsDefaultInstance() {
  ::_LOPQTrainRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_LOPQTrainRequest_default_instance_.data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
  ::_LOPQTrainRequest_default_instance_.sql_query_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class LOPQTrainRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const LOPQTrainRequest* msg);
  static const ::DataBatch& data(const LOPQTrainRequest* msg);
};

const ::RequestMeta&
LOPQTrainRequest::_Internal::meta(const LOPQTrainRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
LOPQTrainRequest::_Internal::data(const LOPQTrainRequest* msg) {
  return *msg->training_data_.data_;
}
void LOPQTrainRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void LOPQTrainRequest::set_allocated_data(::DataBatch* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_training_data();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    training_data_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:LOPQTrainRequest.data)
}
void LOPQTrainRequest::clear_data() {
  if (_internal_has_data()) {
    if (GetArena() == nullptr) {
      delete training_data_.data_;
    }
    clear_has_training_data();
  }
}
LOPQTrainRequest::LOPQTrainRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQTrainRequest)
}
LOPQTrainRequest::LOPQTrainRequest(const LOPQTrainRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lopq_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lopq_model_name().empty()) {
    lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lopq_model_name(),
      GetArena());
  }
  prev_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prev_model_name().empty()) {
    prev_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev_model_name(),
      GetArena());
  }
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  ::memcpy(&coarse_clusters_, &from.coarse_clusters_,
    static_cast<size_t>(reinterpret_cast<char*>(&train_iters_) -
    reinterpret_cast<char*>(&coarse_clusters_)) + sizeof(train_iters_));
  clear_has_training_data();
  switch (from.training_data_case()) {
    case kData: {
      _internal_mutable_data()->::DataBatch::MergeFrom(from._internal_data());
      break;
    }
    case kSqlQuery: {
      _internal_set_sql_query(from._internal_sql_query());
      break;
    }
    case TRAINING_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:LOPQTrainRequest)
}

void LOPQTrainRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQTrainRequest_proto_2flopq_2flopq_5fservice_2eproto.base);
  lopq_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&train_iters_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(train_iters_));
  clear_has_training_data();
}

LOPQTrainRequest::~LOPQTrainRequest() {
  // @@protoc_insertion_point(destructor:LOPQTrainRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQTrainRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lopq_model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (has_training_data()) {
    clear_training_data();
  }
}

void LOPQTrainRequest::ArenaDtor(void* object) {
  LOPQTrainRequest* _this = reinterpret_cast< LOPQTrainRequest* >(object);
  (void)_this;
}
void LOPQTrainRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQTrainRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQTrainRequest& LOPQTrainRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQTrainRequest_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQTrainRequest::clear_training_data() {
// @@protoc_insertion_point(one_of_clear_start:LOPQTrainRequest)
  switch (training_data_case()) {
    case kData: {
      if (GetArena() == nullptr) {
        delete training_data_.data_;
      }
      break;
    }
    case kSqlQuery: {
      training_data_.sql_query_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case TRAINING_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRAINING_DATA_NOT_SET;
}


void LOPQTrainRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQTrainRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lopq_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  ::memset(&coarse_clusters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&train_iters_) -
      reinterpret_cast<char*>(&coarse_clusters_)) + sizeof(train_iters_));
  clear_training_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQTrainRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sql_query = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sql_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQTrainRequest.sql_query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lopq_model_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_lopq_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQTrainRequest.lopq_model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 coarse_clusters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          coarse_clusters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 train_iters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          train_iters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prev_model_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_prev_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQTrainRequest.prev_model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQTrainRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQTrainRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .DataBatch data = 2;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // string sql_query = 3;
  if (_internal_has_sql_query()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sql_query().data(), static_cast<int>(this->_internal_sql_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQTrainRequest.sql_query");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sql_query(), target);
  }

  // string lopq_model_name = 4;
  if (this->lopq_model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lopq_model_name().data(), static_cast<int>(this->_internal_lopq_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQTrainRequest.lopq_model_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_lopq_model_name(), target);
  }

  // int32 coarse_clusters = 5;
  if (this->coarse_clusters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_coarse_clusters(), target);
  }

  // int32 train_iters = 6;
  if (this->train_iters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_train_iters(), target);
  }

  // string prev_model_name = 7;
  if (this->prev_model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prev_model_name().data(), static_cast<int>(this->_internal_prev_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQTrainRequest.prev_model_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_prev_model_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQTrainRequest)
  return target;
}

size_t LOPQTrainRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQTrainRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lopq_model_name = 4;
  if (this->lopq_model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lopq_model_name());
  }

  // string prev_model_name = 7;
  if (this->prev_model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prev_model_name());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // int32 coarse_clusters = 5;
  if (this->coarse_clusters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coarse_clusters());
  }

  // int32 train_iters = 6;
  if (this->train_iters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_train_iters());
  }

  switch (training_data_case()) {
    // .DataBatch data = 2;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *training_data_.data_);
      break;
    }
    // string sql_query = 3;
    case kSqlQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sql_query());
      break;
    }
    case TRAINING_DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQTrainRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQTrainRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQTrainRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQTrainRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQTrainRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQTrainRequest)
    MergeFrom(*source);
  }
}

void LOPQTrainRequest::MergeFrom(const LOPQTrainRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQTrainRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lopq_model_name().size() > 0) {
    _internal_set_lopq_model_name(from._internal_lopq_model_name());
  }
  if (from.prev_model_name().size() > 0) {
    _internal_set_prev_model_name(from._internal_prev_model_name());
  }
  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.coarse_clusters() != 0) {
    _internal_set_coarse_clusters(from._internal_coarse_clusters());
  }
  if (from.train_iters() != 0) {
    _internal_set_train_iters(from._internal_train_iters());
  }
  switch (from.training_data_case()) {
    case kData: {
      _internal_mutable_data()->::DataBatch::MergeFrom(from._internal_data());
      break;
    }
    case kSqlQuery: {
      _internal_set_sql_query(from._internal_sql_query());
      break;
    }
    case TRAINING_DATA_NOT_SET: {
      break;
    }
  }
}

void LOPQTrainRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQTrainRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQTrainRequest::CopyFrom(const LOPQTrainRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQTrainRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQTrainRequest::IsInitialized() const {
  return true;
}

void LOPQTrainRequest::InternalSwap(LOPQTrainRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lopq_model_name_.Swap(&other->lopq_model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_model_name_.Swap(&other->prev_model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LOPQTrainRequest, train_iters_)
      + sizeof(LOPQTrainRequest::train_iters_)
      - PROTOBUF_FIELD_OFFSET(LOPQTrainRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
  swap(training_data_, other->training_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQTrainRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQTrainResponse::InitAsDefaultInstance() {
  ::_LOPQTrainResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
}
class LOPQTrainResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const LOPQTrainResponse* msg);
};

const ::ResponseStatus&
LOPQTrainResponse::_Internal::status(const LOPQTrainResponse* msg) {
  return *msg->status_;
}
void LOPQTrainResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
LOPQTrainResponse::LOPQTrainResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQTrainResponse)
}
LOPQTrainResponse::LOPQTrainResponse(const LOPQTrainResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:LOPQTrainResponse)
}

void LOPQTrainResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQTrainResponse_proto_2flopq_2flopq_5fservice_2eproto.base);
  status_ = nullptr;
}

LOPQTrainResponse::~LOPQTrainResponse() {
  // @@protoc_insertion_point(destructor:LOPQTrainResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQTrainResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void LOPQTrainResponse::ArenaDtor(void* object) {
  LOPQTrainResponse* _this = reinterpret_cast< LOPQTrainResponse* >(object);
  (void)_this;
}
void LOPQTrainResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQTrainResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQTrainResponse& LOPQTrainResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQTrainResponse_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQTrainResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQTrainResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQTrainResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQTrainResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQTrainResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQTrainResponse)
  return target;
}

size_t LOPQTrainResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQTrainResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQTrainResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQTrainResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQTrainResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQTrainResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQTrainResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQTrainResponse)
    MergeFrom(*source);
  }
}

void LOPQTrainResponse::MergeFrom(const LOPQTrainResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQTrainResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
}

void LOPQTrainResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQTrainResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQTrainResponse::CopyFrom(const LOPQTrainResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQTrainResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQTrainResponse::IsInitialized() const {
  return true;
}

void LOPQTrainResponse::InternalSwap(LOPQTrainResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQTrainResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQModelParams::InitAsDefaultInstance() {
  ::_LOPQModelParams_default_instance_._instance.get_mutable()->pca_p_ = const_cast< ::NDArray*>(
      ::NDArray::internal_default_instance());
  ::_LOPQModelParams_default_instance_._instance.get_mutable()->pca_mu_ = const_cast< ::NDArray*>(
      ::NDArray::internal_default_instance());
  ::_LOPQModelParams_default_instance_._instance.get_mutable()->pca_permuted_inds_ = const_cast< ::NDArray*>(
      ::NDArray::internal_default_instance());
  ::_LOPQModelParams_default_instance_._instance.get_mutable()->projection_p_ = const_cast< ::NDArray*>(
      ::NDArray::internal_default_instance());
  ::_LOPQModelParams_default_instance_._instance.get_mutable()->projection_mu_ = const_cast< ::NDArray*>(
      ::NDArray::internal_default_instance());
}
class LOPQModelParams::_Internal {
 public:
  static const ::NDArray& pca_p(const LOPQModelParams* msg);
  static const ::NDArray& pca_mu(const LOPQModelParams* msg);
  static const ::NDArray& pca_permuted_inds(const LOPQModelParams* msg);
  static const ::NDArray& projection_p(const LOPQModelParams* msg);
  static const ::NDArray& projection_mu(const LOPQModelParams* msg);
};

const ::NDArray&
LOPQModelParams::_Internal::pca_p(const LOPQModelParams* msg) {
  return *msg->pca_p_;
}
const ::NDArray&
LOPQModelParams::_Internal::pca_mu(const LOPQModelParams* msg) {
  return *msg->pca_mu_;
}
const ::NDArray&
LOPQModelParams::_Internal::pca_permuted_inds(const LOPQModelParams* msg) {
  return *msg->pca_permuted_inds_;
}
const ::NDArray&
LOPQModelParams::_Internal::projection_p(const LOPQModelParams* msg) {
  return *msg->projection_p_;
}
const ::NDArray&
LOPQModelParams::_Internal::projection_mu(const LOPQModelParams* msg) {
  return *msg->projection_mu_;
}
void LOPQModelParams::clear_cs() {
  cs_.Clear();
}
void LOPQModelParams::clear_rs() {
  rs_.Clear();
}
void LOPQModelParams::clear_mus() {
  mus_.Clear();
}
void LOPQModelParams::clear_subs() {
  subs_.Clear();
}
void LOPQModelParams::clear_pca_p() {
  if (GetArena() == nullptr && pca_p_ != nullptr) {
    delete pca_p_;
  }
  pca_p_ = nullptr;
}
void LOPQModelParams::clear_pca_mu() {
  if (GetArena() == nullptr && pca_mu_ != nullptr) {
    delete pca_mu_;
  }
  pca_mu_ = nullptr;
}
void LOPQModelParams::clear_pca_permuted_inds() {
  if (GetArena() == nullptr && pca_permuted_inds_ != nullptr) {
    delete pca_permuted_inds_;
  }
  pca_permuted_inds_ = nullptr;
}
void LOPQModelParams::clear_projection_p() {
  if (GetArena() == nullptr && projection_p_ != nullptr) {
    delete projection_p_;
  }
  projection_p_ = nullptr;
}
void LOPQModelParams::clear_projection_mu() {
  if (GetArena() == nullptr && projection_mu_ != nullptr) {
    delete projection_mu_;
  }
  projection_mu_ = nullptr;
}
LOPQModelParams::LOPQModelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cs_(arena),
  rs_(arena),
  mus_(arena),
  subs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQModelParams)
}
LOPQModelParams::LOPQModelParams(const LOPQModelParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cs_(from.cs_),
      rs_(from.rs_),
      mus_(from.mus_),
      subs_(from.subs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pca_p()) {
    pca_p_ = new ::NDArray(*from.pca_p_);
  } else {
    pca_p_ = nullptr;
  }
  if (from._internal_has_pca_mu()) {
    pca_mu_ = new ::NDArray(*from.pca_mu_);
  } else {
    pca_mu_ = nullptr;
  }
  if (from._internal_has_pca_permuted_inds()) {
    pca_permuted_inds_ = new ::NDArray(*from.pca_permuted_inds_);
  } else {
    pca_permuted_inds_ = nullptr;
  }
  if (from._internal_has_projection_p()) {
    projection_p_ = new ::NDArray(*from.projection_p_);
  } else {
    projection_p_ = nullptr;
  }
  if (from._internal_has_projection_mu()) {
    projection_mu_ = new ::NDArray(*from.projection_mu_);
  } else {
    projection_mu_ = nullptr;
  }
  ::memcpy(&d_, &from.d_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_point_dims_) -
    reinterpret_cast<char*>(&d_)) + sizeof(num_point_dims_));
  // @@protoc_insertion_point(copy_constructor:LOPQModelParams)
}

void LOPQModelParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQModelParams_proto_2flopq_2flopq_5fservice_2eproto.base);
  ::memset(&pca_p_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_point_dims_) -
      reinterpret_cast<char*>(&pca_p_)) + sizeof(num_point_dims_));
}

LOPQModelParams::~LOPQModelParams() {
  // @@protoc_insertion_point(destructor:LOPQModelParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQModelParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pca_p_;
  if (this != internal_default_instance()) delete pca_mu_;
  if (this != internal_default_instance()) delete pca_permuted_inds_;
  if (this != internal_default_instance()) delete projection_p_;
  if (this != internal_default_instance()) delete projection_mu_;
}

void LOPQModelParams::ArenaDtor(void* object) {
  LOPQModelParams* _this = reinterpret_cast< LOPQModelParams* >(object);
  (void)_this;
}
void LOPQModelParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQModelParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQModelParams& LOPQModelParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQModelParams_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQModelParams::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQModelParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cs_.Clear();
  rs_.Clear();
  mus_.Clear();
  subs_.Clear();
  if (GetArena() == nullptr && pca_p_ != nullptr) {
    delete pca_p_;
  }
  pca_p_ = nullptr;
  if (GetArena() == nullptr && pca_mu_ != nullptr) {
    delete pca_mu_;
  }
  pca_mu_ = nullptr;
  if (GetArena() == nullptr && pca_permuted_inds_ != nullptr) {
    delete pca_permuted_inds_;
  }
  pca_permuted_inds_ = nullptr;
  if (GetArena() == nullptr && projection_p_ != nullptr) {
    delete projection_p_;
  }
  projection_p_ = nullptr;
  if (GetArena() == nullptr && projection_mu_ != nullptr) {
    delete projection_mu_;
  }
  projection_mu_ = nullptr;
  ::memset(&d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_point_dims_) -
      reinterpret_cast<char*>(&d_)) + sizeof(num_point_dims_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQModelParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 D = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 M = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_subquantizers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_subquantizers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NDArray Cs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NDArray Rs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NDArray mus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NDArray subs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .NDArray pca_P = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pca_p(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NDArray pca_mu = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pca_mu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_embeddings = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          use_embeddings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pca_just_shuffle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          pca_just_shuffle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NDArray pca_permuted_inds = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_pca_permuted_inds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_point_dims = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          num_point_dims_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NDArray projection_P = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_projection_p(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NDArray projection_mu = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_projection_mu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQModelParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQModelParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 D = 1;
  if (this->d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_d(), target);
  }

  // uint32 V = 2;
  if (this->v() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_v(), target);
  }

  // uint32 M = 3;
  if (this->m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_m(), target);
  }

  // uint32 num_subquantizers = 4;
  if (this->num_subquantizers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_subquantizers(), target);
  }

  // repeated .NDArray Cs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_cs(i), target, stream);
  }

  // repeated .NDArray Rs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_rs(i), target, stream);
  }

  // repeated .NDArray mus = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_mus(i), target, stream);
  }

  // repeated .NDArray subs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_subs(i), target, stream);
  }

  // .NDArray pca_P = 9;
  if (this->has_pca_p()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::pca_p(this), target, stream);
  }

  // .NDArray pca_mu = 10;
  if (this->has_pca_mu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::pca_mu(this), target, stream);
  }

  // bool use_embeddings = 11;
  if (this->use_embeddings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_use_embeddings(), target);
  }

  // bool pca_just_shuffle = 12;
  if (this->pca_just_shuffle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_pca_just_shuffle(), target);
  }

  // .NDArray pca_permuted_inds = 13;
  if (this->has_pca_permuted_inds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::pca_permuted_inds(this), target, stream);
  }

  // uint32 num_point_dims = 14;
  if (this->num_point_dims() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_num_point_dims(), target);
  }

  // .NDArray projection_P = 15;
  if (this->has_projection_p()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::projection_p(this), target, stream);
  }

  // .NDArray projection_mu = 16;
  if (this->has_projection_mu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::projection_mu(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQModelParams)
  return target;
}

size_t LOPQModelParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQModelParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NDArray Cs = 5;
  total_size += 1UL * this->_internal_cs_size();
  for (const auto& msg : this->cs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NDArray Rs = 6;
  total_size += 1UL * this->_internal_rs_size();
  for (const auto& msg : this->rs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NDArray mus = 7;
  total_size += 1UL * this->_internal_mus_size();
  for (const auto& msg : this->mus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NDArray subs = 8;
  total_size += 1UL * this->_internal_subs_size();
  for (const auto& msg : this->subs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NDArray pca_P = 9;
  if (this->has_pca_p()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pca_p_);
  }

  // .NDArray pca_mu = 10;
  if (this->has_pca_mu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pca_mu_);
  }

  // .NDArray pca_permuted_inds = 13;
  if (this->has_pca_permuted_inds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pca_permuted_inds_);
  }

  // .NDArray projection_P = 15;
  if (this->has_projection_p()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projection_p_);
  }

  // .NDArray projection_mu = 16;
  if (this->has_projection_mu()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projection_mu_);
  }

  // uint32 D = 1;
  if (this->d() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_d());
  }

  // uint32 V = 2;
  if (this->v() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v());
  }

  // uint32 M = 3;
  if (this->m() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m());
  }

  // uint32 num_subquantizers = 4;
  if (this->num_subquantizers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_subquantizers());
  }

  // bool use_embeddings = 11;
  if (this->use_embeddings() != 0) {
    total_size += 1 + 1;
  }

  // bool pca_just_shuffle = 12;
  if (this->pca_just_shuffle() != 0) {
    total_size += 1 + 1;
  }

  // uint32 num_point_dims = 14;
  if (this->num_point_dims() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_point_dims());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQModelParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQModelParams)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQModelParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQModelParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQModelParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQModelParams)
    MergeFrom(*source);
  }
}

void LOPQModelParams::MergeFrom(const LOPQModelParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQModelParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cs_.MergeFrom(from.cs_);
  rs_.MergeFrom(from.rs_);
  mus_.MergeFrom(from.mus_);
  subs_.MergeFrom(from.subs_);
  if (from.has_pca_p()) {
    _internal_mutable_pca_p()->::NDArray::MergeFrom(from._internal_pca_p());
  }
  if (from.has_pca_mu()) {
    _internal_mutable_pca_mu()->::NDArray::MergeFrom(from._internal_pca_mu());
  }
  if (from.has_pca_permuted_inds()) {
    _internal_mutable_pca_permuted_inds()->::NDArray::MergeFrom(from._internal_pca_permuted_inds());
  }
  if (from.has_projection_p()) {
    _internal_mutable_projection_p()->::NDArray::MergeFrom(from._internal_projection_p());
  }
  if (from.has_projection_mu()) {
    _internal_mutable_projection_mu()->::NDArray::MergeFrom(from._internal_projection_mu());
  }
  if (from.d() != 0) {
    _internal_set_d(from._internal_d());
  }
  if (from.v() != 0) {
    _internal_set_v(from._internal_v());
  }
  if (from.m() != 0) {
    _internal_set_m(from._internal_m());
  }
  if (from.num_subquantizers() != 0) {
    _internal_set_num_subquantizers(from._internal_num_subquantizers());
  }
  if (from.use_embeddings() != 0) {
    _internal_set_use_embeddings(from._internal_use_embeddings());
  }
  if (from.pca_just_shuffle() != 0) {
    _internal_set_pca_just_shuffle(from._internal_pca_just_shuffle());
  }
  if (from.num_point_dims() != 0) {
    _internal_set_num_point_dims(from._internal_num_point_dims());
  }
}

void LOPQModelParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQModelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQModelParams::CopyFrom(const LOPQModelParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQModelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQModelParams::IsInitialized() const {
  return true;
}

void LOPQModelParams::InternalSwap(LOPQModelParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cs_.InternalSwap(&other->cs_);
  rs_.InternalSwap(&other->rs_);
  mus_.InternalSwap(&other->mus_);
  subs_.InternalSwap(&other->subs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LOPQModelParams, num_point_dims_)
      + sizeof(LOPQModelParams::num_point_dims_)
      - PROTOBUF_FIELD_OFFSET(LOPQModelParams, pca_p_)>(
          reinterpret_cast<char*>(&pca_p_),
          reinterpret_cast<char*>(&other->pca_p_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQModelParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQTrainAndEvalRequest::InitAsDefaultInstance() {
  ::_LOPQTrainAndEvalRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_LOPQTrainAndEvalRequest_default_instance_.data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
  ::_LOPQTrainAndEvalRequest_default_instance_.sql_query_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class LOPQTrainAndEvalRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const LOPQTrainAndEvalRequest* msg);
  static const ::DataBatch& data(const LOPQTrainAndEvalRequest* msg);
};

const ::RequestMeta&
LOPQTrainAndEvalRequest::_Internal::meta(const LOPQTrainAndEvalRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
LOPQTrainAndEvalRequest::_Internal::data(const LOPQTrainAndEvalRequest* msg) {
  return *msg->training_data_.data_;
}
void LOPQTrainAndEvalRequest::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void LOPQTrainAndEvalRequest::set_allocated_data(::DataBatch* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_training_data();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    training_data_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:LOPQTrainAndEvalRequest.data)
}
void LOPQTrainAndEvalRequest::clear_data() {
  if (_internal_has_data()) {
    if (GetArena() == nullptr) {
      delete training_data_.data_;
    }
    clear_has_training_data();
  }
}
LOPQTrainAndEvalRequest::LOPQTrainAndEvalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQTrainAndEvalRequest)
}
LOPQTrainAndEvalRequest::LOPQTrainAndEvalRequest(const LOPQTrainAndEvalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lopq_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lopq_model_name().empty()) {
    lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lopq_model_name(),
      GetArena());
  }
  prev_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prev_model_name().empty()) {
    prev_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev_model_name(),
      GetArena());
  }
  spire_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spire_name().empty()) {
    spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_spire_name(),
      GetArena());
  }
  hyper_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hyper_parameters().empty()) {
    hyper_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hyper_parameters(),
      GetArena());
  }
  if (from._internal_has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  train_iters_ = from.train_iters_;
  clear_has_training_data();
  switch (from.training_data_case()) {
    case kData: {
      _internal_mutable_data()->::DataBatch::MergeFrom(from._internal_data());
      break;
    }
    case kSqlQuery: {
      _internal_set_sql_query(from._internal_sql_query());
      break;
    }
    case TRAINING_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:LOPQTrainAndEvalRequest)
}

void LOPQTrainAndEvalRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQTrainAndEvalRequest_proto_2flopq_2flopq_5fservice_2eproto.base);
  lopq_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spire_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hyper_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&train_iters_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(train_iters_));
  clear_has_training_data();
}

LOPQTrainAndEvalRequest::~LOPQTrainAndEvalRequest() {
  // @@protoc_insertion_point(destructor:LOPQTrainAndEvalRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQTrainAndEvalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lopq_model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spire_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hyper_parameters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (has_training_data()) {
    clear_training_data();
  }
}

void LOPQTrainAndEvalRequest::ArenaDtor(void* object) {
  LOPQTrainAndEvalRequest* _this = reinterpret_cast< LOPQTrainAndEvalRequest* >(object);
  (void)_this;
}
void LOPQTrainAndEvalRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQTrainAndEvalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQTrainAndEvalRequest& LOPQTrainAndEvalRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQTrainAndEvalRequest_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQTrainAndEvalRequest::clear_training_data() {
// @@protoc_insertion_point(one_of_clear_start:LOPQTrainAndEvalRequest)
  switch (training_data_case()) {
    case kData: {
      if (GetArena() == nullptr) {
        delete training_data_.data_;
      }
      break;
    }
    case kSqlQuery: {
      training_data_.sql_query_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case TRAINING_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRAINING_DATA_NOT_SET;
}


void LOPQTrainAndEvalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQTrainAndEvalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lopq_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  spire_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hyper_parameters_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  train_iters_ = 0;
  clear_training_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQTrainAndEvalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sql_query = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sql_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQTrainAndEvalRequest.sql_query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lopq_model_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_lopq_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQTrainAndEvalRequest.lopq_model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 train_iters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          train_iters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prev_model_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_prev_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQTrainAndEvalRequest.prev_model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spire_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_spire_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQTrainAndEvalRequest.spire_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hyper_parameters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_hyper_parameters();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOPQTrainAndEvalRequest.hyper_parameters"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQTrainAndEvalRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQTrainAndEvalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .DataBatch data = 2;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // string sql_query = 3;
  if (_internal_has_sql_query()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sql_query().data(), static_cast<int>(this->_internal_sql_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQTrainAndEvalRequest.sql_query");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sql_query(), target);
  }

  // string lopq_model_name = 4;
  if (this->lopq_model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lopq_model_name().data(), static_cast<int>(this->_internal_lopq_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQTrainAndEvalRequest.lopq_model_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_lopq_model_name(), target);
  }

  // int32 train_iters = 5;
  if (this->train_iters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_train_iters(), target);
  }

  // string prev_model_name = 6;
  if (this->prev_model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prev_model_name().data(), static_cast<int>(this->_internal_prev_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQTrainAndEvalRequest.prev_model_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_prev_model_name(), target);
  }

  // string spire_name = 7;
  if (this->spire_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spire_name().data(), static_cast<int>(this->_internal_spire_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQTrainAndEvalRequest.spire_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_spire_name(), target);
  }

  // string hyper_parameters = 8;
  if (this->hyper_parameters().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hyper_parameters().data(), static_cast<int>(this->_internal_hyper_parameters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LOPQTrainAndEvalRequest.hyper_parameters");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_hyper_parameters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQTrainAndEvalRequest)
  return target;
}

size_t LOPQTrainAndEvalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQTrainAndEvalRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lopq_model_name = 4;
  if (this->lopq_model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lopq_model_name());
  }

  // string prev_model_name = 6;
  if (this->prev_model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prev_model_name());
  }

  // string spire_name = 7;
  if (this->spire_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spire_name());
  }

  // string hyper_parameters = 8;
  if (this->hyper_parameters().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hyper_parameters());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // int32 train_iters = 5;
  if (this->train_iters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_train_iters());
  }

  switch (training_data_case()) {
    // .DataBatch data = 2;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *training_data_.data_);
      break;
    }
    // string sql_query = 3;
    case kSqlQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sql_query());
      break;
    }
    case TRAINING_DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQTrainAndEvalRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQTrainAndEvalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQTrainAndEvalRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQTrainAndEvalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQTrainAndEvalRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQTrainAndEvalRequest)
    MergeFrom(*source);
  }
}

void LOPQTrainAndEvalRequest::MergeFrom(const LOPQTrainAndEvalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQTrainAndEvalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lopq_model_name().size() > 0) {
    _internal_set_lopq_model_name(from._internal_lopq_model_name());
  }
  if (from.prev_model_name().size() > 0) {
    _internal_set_prev_model_name(from._internal_prev_model_name());
  }
  if (from.spire_name().size() > 0) {
    _internal_set_spire_name(from._internal_spire_name());
  }
  if (from.hyper_parameters().size() > 0) {
    _internal_set_hyper_parameters(from._internal_hyper_parameters());
  }
  if (from.has_meta()) {
    _internal_mutable_meta()->::RequestMeta::MergeFrom(from._internal_meta());
  }
  if (from.train_iters() != 0) {
    _internal_set_train_iters(from._internal_train_iters());
  }
  switch (from.training_data_case()) {
    case kData: {
      _internal_mutable_data()->::DataBatch::MergeFrom(from._internal_data());
      break;
    }
    case kSqlQuery: {
      _internal_set_sql_query(from._internal_sql_query());
      break;
    }
    case TRAINING_DATA_NOT_SET: {
      break;
    }
  }
}

void LOPQTrainAndEvalRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQTrainAndEvalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQTrainAndEvalRequest::CopyFrom(const LOPQTrainAndEvalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQTrainAndEvalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQTrainAndEvalRequest::IsInitialized() const {
  return true;
}

void LOPQTrainAndEvalRequest::InternalSwap(LOPQTrainAndEvalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lopq_model_name_.Swap(&other->lopq_model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_model_name_.Swap(&other->prev_model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  spire_name_.Swap(&other->spire_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hyper_parameters_.Swap(&other->hyper_parameters_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LOPQTrainAndEvalRequest, train_iters_)
      + sizeof(LOPQTrainAndEvalRequest::train_iters_)
      - PROTOBUF_FIELD_OFFSET(LOPQTrainAndEvalRequest, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
  swap(training_data_, other->training_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQTrainAndEvalRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOPQTrainAndEvalResponse::InitAsDefaultInstance() {
  ::_LOPQTrainAndEvalResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
}
class LOPQTrainAndEvalResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const LOPQTrainAndEvalResponse* msg);
};

const ::ResponseStatus&
LOPQTrainAndEvalResponse::_Internal::status(const LOPQTrainAndEvalResponse* msg) {
  return *msg->status_;
}
void LOPQTrainAndEvalResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void LOPQTrainAndEvalResponse::clear_result() {
  result_.Clear();
}
LOPQTrainAndEvalResponse::LOPQTrainAndEvalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LOPQTrainAndEvalResponse)
}
LOPQTrainAndEvalResponse::LOPQTrainAndEvalResponse(const LOPQTrainAndEvalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:LOPQTrainAndEvalResponse)
}

void LOPQTrainAndEvalResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOPQTrainAndEvalResponse_proto_2flopq_2flopq_5fservice_2eproto.base);
  status_ = nullptr;
}

LOPQTrainAndEvalResponse::~LOPQTrainAndEvalResponse() {
  // @@protoc_insertion_point(destructor:LOPQTrainAndEvalResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LOPQTrainAndEvalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void LOPQTrainAndEvalResponse::ArenaDtor(void* object) {
  LOPQTrainAndEvalResponse* _this = reinterpret_cast< LOPQTrainAndEvalResponse* >(object);
  (void)_this;
}
void LOPQTrainAndEvalResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LOPQTrainAndEvalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOPQTrainAndEvalResponse& LOPQTrainAndEvalResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOPQTrainAndEvalResponse_proto_2flopq_2flopq_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LOPQTrainAndEvalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LOPQTrainAndEvalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LOPQTrainAndEvalResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LOPQEvalResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOPQTrainAndEvalResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOPQTrainAndEvalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .LOPQEvalResult result = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_result(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOPQTrainAndEvalResponse)
  return target;
}

size_t LOPQTrainAndEvalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOPQTrainAndEvalResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LOPQEvalResult result = 2;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOPQTrainAndEvalResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOPQTrainAndEvalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LOPQTrainAndEvalResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOPQTrainAndEvalResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOPQTrainAndEvalResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOPQTrainAndEvalResponse)
    MergeFrom(*source);
  }
}

void LOPQTrainAndEvalResponse::MergeFrom(const LOPQTrainAndEvalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOPQTrainAndEvalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  if (from.has_status()) {
    _internal_mutable_status()->::ResponseStatus::MergeFrom(from._internal_status());
  }
}

void LOPQTrainAndEvalResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOPQTrainAndEvalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOPQTrainAndEvalResponse::CopyFrom(const LOPQTrainAndEvalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOPQTrainAndEvalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOPQTrainAndEvalResponse::IsInitialized() const {
  return true;
}

void LOPQTrainAndEvalResponse::InternalSwap(LOPQTrainAndEvalResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.InternalSwap(&other->result_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LOPQTrainAndEvalResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LOPQPredictRequest* Arena::CreateMaybeMessage< ::LOPQPredictRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQPredictRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LOPQPredictResponse* Arena::CreateMaybeMessage< ::LOPQPredictResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQPredictResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::LOPQSearchRequest* Arena::CreateMaybeMessage< ::LOPQSearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQSearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConceptOverride* Arena::CreateMaybeMessage< ::ConceptOverride >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConceptOverride >(arena);
}
template<> PROTOBUF_NOINLINE ::AttributeMixIn* Arena::CreateMaybeMessage< ::AttributeMixIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AttributeMixIn >(arena);
}
template<> PROTOBUF_NOINLINE ::LOPQAttributeSearchRequest* Arena::CreateMaybeMessage< ::LOPQAttributeSearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQAttributeSearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LOPQSearchResult* Arena::CreateMaybeMessage< ::LOPQSearchResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQSearchResult >(arena);
}
template<> PROTOBUF_NOINLINE ::LOPQSearchResponse* Arena::CreateMaybeMessage< ::LOPQSearchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQSearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::LOPQSearchForCodesRequest* Arena::CreateMaybeMessage< ::LOPQSearchForCodesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQSearchForCodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LOPQSearchForCodeResult* Arena::CreateMaybeMessage< ::LOPQSearchForCodeResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQSearchForCodeResult >(arena);
}
template<> PROTOBUF_NOINLINE ::LOPQSearchForCodesResponse* Arena::CreateMaybeMessage< ::LOPQSearchForCodesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQSearchForCodesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::LOPQBruteForceSearchRequest* Arena::CreateMaybeMessage< ::LOPQBruteForceSearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQBruteForceSearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LOPQBruteForceSearchResponse* Arena::CreateMaybeMessage< ::LOPQBruteForceSearchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQBruteForceSearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::BruteForceResult* Arena::CreateMaybeMessage< ::BruteForceResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BruteForceResult >(arena);
}
template<> PROTOBUF_NOINLINE ::LOPQTrainRequest* Arena::CreateMaybeMessage< ::LOPQTrainRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQTrainRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LOPQTrainResponse* Arena::CreateMaybeMessage< ::LOPQTrainResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQTrainResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::LOPQModelParams* Arena::CreateMaybeMessage< ::LOPQModelParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQModelParams >(arena);
}
template<> PROTOBUF_NOINLINE ::LOPQTrainAndEvalRequest* Arena::CreateMaybeMessage< ::LOPQTrainAndEvalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQTrainAndEvalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LOPQTrainAndEvalResponse* Arena::CreateMaybeMessage< ::LOPQTrainAndEvalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LOPQTrainAndEvalResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
