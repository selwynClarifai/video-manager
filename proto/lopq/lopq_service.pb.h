// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/lopq/lopq_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2flopq_2flopq_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2flopq_2flopq_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/databatch.pb.h"
#include "proto/utils/lopq_code.pb.h"
#include "proto/utils/lopq_service.pb.h"
#include "proto/utils/ndarray.pb.h"
#include "proto/utils/request_meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2flopq_2flopq_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2flopq_2flopq_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2flopq_2flopq_5fservice_2eproto;
class AttributeMixIn;
class AttributeMixInDefaultTypeInternal;
extern AttributeMixInDefaultTypeInternal _AttributeMixIn_default_instance_;
class BruteForceResult;
class BruteForceResultDefaultTypeInternal;
extern BruteForceResultDefaultTypeInternal _BruteForceResult_default_instance_;
class ConceptOverride;
class ConceptOverrideDefaultTypeInternal;
extern ConceptOverrideDefaultTypeInternal _ConceptOverride_default_instance_;
class LOPQAttributeSearchRequest;
class LOPQAttributeSearchRequestDefaultTypeInternal;
extern LOPQAttributeSearchRequestDefaultTypeInternal _LOPQAttributeSearchRequest_default_instance_;
class LOPQBruteForceSearchRequest;
class LOPQBruteForceSearchRequestDefaultTypeInternal;
extern LOPQBruteForceSearchRequestDefaultTypeInternal _LOPQBruteForceSearchRequest_default_instance_;
class LOPQBruteForceSearchResponse;
class LOPQBruteForceSearchResponseDefaultTypeInternal;
extern LOPQBruteForceSearchResponseDefaultTypeInternal _LOPQBruteForceSearchResponse_default_instance_;
class LOPQModelParams;
class LOPQModelParamsDefaultTypeInternal;
extern LOPQModelParamsDefaultTypeInternal _LOPQModelParams_default_instance_;
class LOPQPredictRequest;
class LOPQPredictRequestDefaultTypeInternal;
extern LOPQPredictRequestDefaultTypeInternal _LOPQPredictRequest_default_instance_;
class LOPQPredictResponse;
class LOPQPredictResponseDefaultTypeInternal;
extern LOPQPredictResponseDefaultTypeInternal _LOPQPredictResponse_default_instance_;
class LOPQSearchForCodeResult;
class LOPQSearchForCodeResultDefaultTypeInternal;
extern LOPQSearchForCodeResultDefaultTypeInternal _LOPQSearchForCodeResult_default_instance_;
class LOPQSearchForCodesRequest;
class LOPQSearchForCodesRequestDefaultTypeInternal;
extern LOPQSearchForCodesRequestDefaultTypeInternal _LOPQSearchForCodesRequest_default_instance_;
class LOPQSearchForCodesResponse;
class LOPQSearchForCodesResponseDefaultTypeInternal;
extern LOPQSearchForCodesResponseDefaultTypeInternal _LOPQSearchForCodesResponse_default_instance_;
class LOPQSearchRequest;
class LOPQSearchRequestDefaultTypeInternal;
extern LOPQSearchRequestDefaultTypeInternal _LOPQSearchRequest_default_instance_;
class LOPQSearchResponse;
class LOPQSearchResponseDefaultTypeInternal;
extern LOPQSearchResponseDefaultTypeInternal _LOPQSearchResponse_default_instance_;
class LOPQSearchResult;
class LOPQSearchResultDefaultTypeInternal;
extern LOPQSearchResultDefaultTypeInternal _LOPQSearchResult_default_instance_;
class LOPQTrainAndEvalRequest;
class LOPQTrainAndEvalRequestDefaultTypeInternal;
extern LOPQTrainAndEvalRequestDefaultTypeInternal _LOPQTrainAndEvalRequest_default_instance_;
class LOPQTrainAndEvalResponse;
class LOPQTrainAndEvalResponseDefaultTypeInternal;
extern LOPQTrainAndEvalResponseDefaultTypeInternal _LOPQTrainAndEvalResponse_default_instance_;
class LOPQTrainRequest;
class LOPQTrainRequestDefaultTypeInternal;
extern LOPQTrainRequestDefaultTypeInternal _LOPQTrainRequest_default_instance_;
class LOPQTrainResponse;
class LOPQTrainResponseDefaultTypeInternal;
extern LOPQTrainResponseDefaultTypeInternal _LOPQTrainResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AttributeMixIn* Arena::CreateMaybeMessage<::AttributeMixIn>(Arena*);
template<> ::BruteForceResult* Arena::CreateMaybeMessage<::BruteForceResult>(Arena*);
template<> ::ConceptOverride* Arena::CreateMaybeMessage<::ConceptOverride>(Arena*);
template<> ::LOPQAttributeSearchRequest* Arena::CreateMaybeMessage<::LOPQAttributeSearchRequest>(Arena*);
template<> ::LOPQBruteForceSearchRequest* Arena::CreateMaybeMessage<::LOPQBruteForceSearchRequest>(Arena*);
template<> ::LOPQBruteForceSearchResponse* Arena::CreateMaybeMessage<::LOPQBruteForceSearchResponse>(Arena*);
template<> ::LOPQModelParams* Arena::CreateMaybeMessage<::LOPQModelParams>(Arena*);
template<> ::LOPQPredictRequest* Arena::CreateMaybeMessage<::LOPQPredictRequest>(Arena*);
template<> ::LOPQPredictResponse* Arena::CreateMaybeMessage<::LOPQPredictResponse>(Arena*);
template<> ::LOPQSearchForCodeResult* Arena::CreateMaybeMessage<::LOPQSearchForCodeResult>(Arena*);
template<> ::LOPQSearchForCodesRequest* Arena::CreateMaybeMessage<::LOPQSearchForCodesRequest>(Arena*);
template<> ::LOPQSearchForCodesResponse* Arena::CreateMaybeMessage<::LOPQSearchForCodesResponse>(Arena*);
template<> ::LOPQSearchRequest* Arena::CreateMaybeMessage<::LOPQSearchRequest>(Arena*);
template<> ::LOPQSearchResponse* Arena::CreateMaybeMessage<::LOPQSearchResponse>(Arena*);
template<> ::LOPQSearchResult* Arena::CreateMaybeMessage<::LOPQSearchResult>(Arena*);
template<> ::LOPQTrainAndEvalRequest* Arena::CreateMaybeMessage<::LOPQTrainAndEvalRequest>(Arena*);
template<> ::LOPQTrainAndEvalResponse* Arena::CreateMaybeMessage<::LOPQTrainAndEvalResponse>(Arena*);
template<> ::LOPQTrainRequest* Arena::CreateMaybeMessage<::LOPQTrainRequest>(Arena*);
template<> ::LOPQTrainResponse* Arena::CreateMaybeMessage<::LOPQTrainResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class LOPQPredictRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQPredictRequest) */ {
 public:
  inline LOPQPredictRequest() : LOPQPredictRequest(nullptr) {}
  virtual ~LOPQPredictRequest();

  LOPQPredictRequest(const LOPQPredictRequest& from);
  LOPQPredictRequest(LOPQPredictRequest&& from) noexcept
    : LOPQPredictRequest() {
    *this = ::std::move(from);
  }

  inline LOPQPredictRequest& operator=(const LOPQPredictRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQPredictRequest& operator=(LOPQPredictRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQPredictRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQPredictRequest* internal_default_instance() {
    return reinterpret_cast<const LOPQPredictRequest*>(
               &_LOPQPredictRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LOPQPredictRequest& a, LOPQPredictRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQPredictRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQPredictRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQPredictRequest* New() const final {
    return CreateMaybeMessage<LOPQPredictRequest>(nullptr);
  }

  LOPQPredictRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQPredictRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQPredictRequest& from);
  void MergeFrom(const LOPQPredictRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQPredictRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQPredictRequest";
  }
  protected:
  explicit LOPQPredictRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLopqModelNameFieldNumber = 3,
    kMetaFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string lopq_model_name = 3;
  void clear_lopq_model_name();
  const std::string& lopq_model_name() const;
  void set_lopq_model_name(const std::string& value);
  void set_lopq_model_name(std::string&& value);
  void set_lopq_model_name(const char* value);
  void set_lopq_model_name(const char* value, size_t size);
  std::string* mutable_lopq_model_name();
  std::string* release_lopq_model_name();
  void set_allocated_lopq_model_name(std::string* lopq_model_name);
  private:
  const std::string& _internal_lopq_model_name() const;
  void _internal_set_lopq_model_name(const std::string& value);
  std::string* _internal_mutable_lopq_model_name();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .DataBatch data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DataBatch& data() const;
  ::DataBatch* release_data();
  ::DataBatch* mutable_data();
  void set_allocated_data(::DataBatch* data);
  private:
  const ::DataBatch& _internal_data() const;
  ::DataBatch* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DataBatch* data);
  ::DataBatch* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:LOPQPredictRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lopq_model_name_;
  ::RequestMeta* meta_;
  ::DataBatch* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LOPQPredictResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQPredictResponse) */ {
 public:
  inline LOPQPredictResponse() : LOPQPredictResponse(nullptr) {}
  virtual ~LOPQPredictResponse();

  LOPQPredictResponse(const LOPQPredictResponse& from);
  LOPQPredictResponse(LOPQPredictResponse&& from) noexcept
    : LOPQPredictResponse() {
    *this = ::std::move(from);
  }

  inline LOPQPredictResponse& operator=(const LOPQPredictResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQPredictResponse& operator=(LOPQPredictResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQPredictResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQPredictResponse* internal_default_instance() {
    return reinterpret_cast<const LOPQPredictResponse*>(
               &_LOPQPredictResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LOPQPredictResponse& a, LOPQPredictResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQPredictResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQPredictResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQPredictResponse* New() const final {
    return CreateMaybeMessage<LOPQPredictResponse>(nullptr);
  }

  LOPQPredictResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQPredictResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQPredictResponse& from);
  void MergeFrom(const LOPQPredictResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQPredictResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQPredictResponse";
  }
  protected:
  explicit LOPQPredictResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kStatusFieldNumber = 1,
    kResultsFieldNumber = 3,
  };
  // repeated .LOPQCode code = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int code_size() const;
  private:
  int _internal_code_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_code();
  PROTOBUF_DEPRECATED ::LOPQCode* mutable_code(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQCode >*
      mutable_code();
  private:
  const ::LOPQCode& _internal_code(int index) const;
  ::LOPQCode* _internal_add_code();
  public:
  PROTOBUF_DEPRECATED const ::LOPQCode& code(int index) const;
  PROTOBUF_DEPRECATED ::LOPQCode* add_code();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQCode >&
      code() const;

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // .DataBatch results = 3;
  bool has_results() const;
  private:
  bool _internal_has_results() const;
  public:
  void clear_results();
  const ::DataBatch& results() const;
  ::DataBatch* release_results();
  ::DataBatch* mutable_results();
  void set_allocated_results(::DataBatch* results);
  private:
  const ::DataBatch& _internal_results() const;
  ::DataBatch* _internal_mutable_results();
  public:
  void unsafe_arena_set_allocated_results(
      ::DataBatch* results);
  ::DataBatch* unsafe_arena_release_results();

  // @@protoc_insertion_point(class_scope:LOPQPredictResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQCode > code_;
  ::ResponseStatus* status_;
  ::DataBatch* results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LOPQSearchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQSearchRequest) */ {
 public:
  inline LOPQSearchRequest() : LOPQSearchRequest(nullptr) {}
  virtual ~LOPQSearchRequest();

  LOPQSearchRequest(const LOPQSearchRequest& from);
  LOPQSearchRequest(LOPQSearchRequest&& from) noexcept
    : LOPQSearchRequest() {
    *this = ::std::move(from);
  }

  inline LOPQSearchRequest& operator=(const LOPQSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQSearchRequest& operator=(LOPQSearchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQSearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQSearchRequest* internal_default_instance() {
    return reinterpret_cast<const LOPQSearchRequest*>(
               &_LOPQSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LOPQSearchRequest& a, LOPQSearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQSearchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQSearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQSearchRequest* New() const final {
    return CreateMaybeMessage<LOPQSearchRequest>(nullptr);
  }

  LOPQSearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQSearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQSearchRequest& from);
  void MergeFrom(const LOPQSearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQSearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQSearchRequest";
  }
  protected:
  explicit LOPQSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositiveAiidsFieldNumber = 11,
    kNegativeAiidsFieldNumber = 12,
    kSqlTemplateFieldNumber = 3,
    kLopqModelNameFieldNumber = 7,
    kFallbackSqlTemplateFieldNumber = 9,
    kCustomModelNameFieldNumber = 10,
    kMetaFieldNumber = 1,
    kDataFieldNumber = 2,
    kKFieldNumber = 4,
    kQuotaFieldNumber = 5,
    kMaxVisitedFieldNumber = 6,
    kWeightQueryFieldNumber = 8,
  };
  // repeated string positive_aiids = 11;
  int positive_aiids_size() const;
  private:
  int _internal_positive_aiids_size() const;
  public:
  void clear_positive_aiids();
  const std::string& positive_aiids(int index) const;
  std::string* mutable_positive_aiids(int index);
  void set_positive_aiids(int index, const std::string& value);
  void set_positive_aiids(int index, std::string&& value);
  void set_positive_aiids(int index, const char* value);
  void set_positive_aiids(int index, const char* value, size_t size);
  std::string* add_positive_aiids();
  void add_positive_aiids(const std::string& value);
  void add_positive_aiids(std::string&& value);
  void add_positive_aiids(const char* value);
  void add_positive_aiids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& positive_aiids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_positive_aiids();
  private:
  const std::string& _internal_positive_aiids(int index) const;
  std::string* _internal_add_positive_aiids();
  public:

  // repeated string negative_aiids = 12;
  int negative_aiids_size() const;
  private:
  int _internal_negative_aiids_size() const;
  public:
  void clear_negative_aiids();
  const std::string& negative_aiids(int index) const;
  std::string* mutable_negative_aiids(int index);
  void set_negative_aiids(int index, const std::string& value);
  void set_negative_aiids(int index, std::string&& value);
  void set_negative_aiids(int index, const char* value);
  void set_negative_aiids(int index, const char* value, size_t size);
  std::string* add_negative_aiids();
  void add_negative_aiids(const std::string& value);
  void add_negative_aiids(std::string&& value);
  void add_negative_aiids(const char* value);
  void add_negative_aiids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& negative_aiids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_negative_aiids();
  private:
  const std::string& _internal_negative_aiids(int index) const;
  std::string* _internal_add_negative_aiids();
  public:

  // string sql_template = 3;
  void clear_sql_template();
  const std::string& sql_template() const;
  void set_sql_template(const std::string& value);
  void set_sql_template(std::string&& value);
  void set_sql_template(const char* value);
  void set_sql_template(const char* value, size_t size);
  std::string* mutable_sql_template();
  std::string* release_sql_template();
  void set_allocated_sql_template(std::string* sql_template);
  private:
  const std::string& _internal_sql_template() const;
  void _internal_set_sql_template(const std::string& value);
  std::string* _internal_mutable_sql_template();
  public:

  // string lopq_model_name = 7;
  void clear_lopq_model_name();
  const std::string& lopq_model_name() const;
  void set_lopq_model_name(const std::string& value);
  void set_lopq_model_name(std::string&& value);
  void set_lopq_model_name(const char* value);
  void set_lopq_model_name(const char* value, size_t size);
  std::string* mutable_lopq_model_name();
  std::string* release_lopq_model_name();
  void set_allocated_lopq_model_name(std::string* lopq_model_name);
  private:
  const std::string& _internal_lopq_model_name() const;
  void _internal_set_lopq_model_name(const std::string& value);
  std::string* _internal_mutable_lopq_model_name();
  public:

  // string fallback_sql_template = 9;
  void clear_fallback_sql_template();
  const std::string& fallback_sql_template() const;
  void set_fallback_sql_template(const std::string& value);
  void set_fallback_sql_template(std::string&& value);
  void set_fallback_sql_template(const char* value);
  void set_fallback_sql_template(const char* value, size_t size);
  std::string* mutable_fallback_sql_template();
  std::string* release_fallback_sql_template();
  void set_allocated_fallback_sql_template(std::string* fallback_sql_template);
  private:
  const std::string& _internal_fallback_sql_template() const;
  void _internal_set_fallback_sql_template(const std::string& value);
  std::string* _internal_mutable_fallback_sql_template();
  public:

  // string custom_model_name = 10;
  void clear_custom_model_name();
  const std::string& custom_model_name() const;
  void set_custom_model_name(const std::string& value);
  void set_custom_model_name(std::string&& value);
  void set_custom_model_name(const char* value);
  void set_custom_model_name(const char* value, size_t size);
  std::string* mutable_custom_model_name();
  std::string* release_custom_model_name();
  void set_allocated_custom_model_name(std::string* custom_model_name);
  private:
  const std::string& _internal_custom_model_name() const;
  void _internal_set_custom_model_name(const std::string& value);
  std::string* _internal_mutable_custom_model_name();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .DataBatch data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DataBatch& data() const;
  ::DataBatch* release_data();
  ::DataBatch* mutable_data();
  void set_allocated_data(::DataBatch* data);
  private:
  const ::DataBatch& _internal_data() const;
  ::DataBatch* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DataBatch* data);
  ::DataBatch* unsafe_arena_release_data();

  // int32 k = 4;
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::int32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_k() const;
  void _internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 quota = 5;
  void clear_quota();
  ::PROTOBUF_NAMESPACE_ID::int32 quota() const;
  void set_quota(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quota() const;
  void _internal_set_quota(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_visited = 6;
  void clear_max_visited();
  ::PROTOBUF_NAMESPACE_ID::int32 max_visited() const;
  void set_max_visited(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_visited() const;
  void _internal_set_max_visited(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool weight_query = 8 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_weight_query();
  PROTOBUF_DEPRECATED bool weight_query() const;
  PROTOBUF_DEPRECATED void set_weight_query(bool value);
  private:
  bool _internal_weight_query() const;
  void _internal_set_weight_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LOPQSearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> positive_aiids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> negative_aiids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_template_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lopq_model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fallback_sql_template_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_model_name_;
  ::RequestMeta* meta_;
  ::DataBatch* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 k_;
  ::PROTOBUF_NAMESPACE_ID::int32 quota_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_visited_;
  bool weight_query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ConceptOverride PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConceptOverride) */ {
 public:
  inline ConceptOverride() : ConceptOverride(nullptr) {}
  virtual ~ConceptOverride();

  ConceptOverride(const ConceptOverride& from);
  ConceptOverride(ConceptOverride&& from) noexcept
    : ConceptOverride() {
    *this = ::std::move(from);
  }

  inline ConceptOverride& operator=(const ConceptOverride& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptOverride& operator=(ConceptOverride&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptOverride& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptOverride* internal_default_instance() {
    return reinterpret_cast<const ConceptOverride*>(
               &_ConceptOverride_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConceptOverride& a, ConceptOverride& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptOverride* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConceptOverride* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptOverride* New() const final {
    return CreateMaybeMessage<ConceptOverride>(nullptr);
  }

  ConceptOverride* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptOverride>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptOverride& from);
  void MergeFrom(const ConceptOverride& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptOverride* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConceptOverride";
  }
  protected:
  explicit ConceptOverride(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float value = 3;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:ConceptOverride)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AttributeMixIn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AttributeMixIn) */ {
 public:
  inline AttributeMixIn() : AttributeMixIn(nullptr) {}
  virtual ~AttributeMixIn();

  AttributeMixIn(const AttributeMixIn& from);
  AttributeMixIn(AttributeMixIn&& from) noexcept
    : AttributeMixIn() {
    *this = ::std::move(from);
  }

  inline AttributeMixIn& operator=(const AttributeMixIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeMixIn& operator=(AttributeMixIn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeMixIn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttributeMixIn* internal_default_instance() {
    return reinterpret_cast<const AttributeMixIn*>(
               &_AttributeMixIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AttributeMixIn& a, AttributeMixIn& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeMixIn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeMixIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeMixIn* New() const final {
    return CreateMaybeMessage<AttributeMixIn>(nullptr);
  }

  AttributeMixIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeMixIn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeMixIn& from);
  void MergeFrom(const AttributeMixIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeMixIn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AttributeMixIn";
  }
  protected:
  explicit AttributeMixIn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelVersionIdFieldNumber = 1,
    kConceptOverrideFieldNumber = 3,
    kMixInCoefficientFieldNumber = 2,
  };
  // string model_version_id = 1;
  void clear_model_version_id();
  const std::string& model_version_id() const;
  void set_model_version_id(const std::string& value);
  void set_model_version_id(std::string&& value);
  void set_model_version_id(const char* value);
  void set_model_version_id(const char* value, size_t size);
  std::string* mutable_model_version_id();
  std::string* release_model_version_id();
  void set_allocated_model_version_id(std::string* model_version_id);
  private:
  const std::string& _internal_model_version_id() const;
  void _internal_set_model_version_id(const std::string& value);
  std::string* _internal_mutable_model_version_id();
  public:

  // .ConceptOverride concept_override = 3;
  bool has_concept_override() const;
  private:
  bool _internal_has_concept_override() const;
  public:
  void clear_concept_override();
  const ::ConceptOverride& concept_override() const;
  ::ConceptOverride* release_concept_override();
  ::ConceptOverride* mutable_concept_override();
  void set_allocated_concept_override(::ConceptOverride* concept_override);
  private:
  const ::ConceptOverride& _internal_concept_override() const;
  ::ConceptOverride* _internal_mutable_concept_override();
  public:
  void unsafe_arena_set_allocated_concept_override(
      ::ConceptOverride* concept_override);
  ::ConceptOverride* unsafe_arena_release_concept_override();

  // float mix_in_coefficient = 2;
  void clear_mix_in_coefficient();
  float mix_in_coefficient() const;
  void set_mix_in_coefficient(float value);
  private:
  float _internal_mix_in_coefficient() const;
  void _internal_set_mix_in_coefficient(float value);
  public:

  // @@protoc_insertion_point(class_scope:AttributeMixIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_id_;
  ::ConceptOverride* concept_override_;
  float mix_in_coefficient_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LOPQAttributeSearchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQAttributeSearchRequest) */ {
 public:
  inline LOPQAttributeSearchRequest() : LOPQAttributeSearchRequest(nullptr) {}
  virtual ~LOPQAttributeSearchRequest();

  LOPQAttributeSearchRequest(const LOPQAttributeSearchRequest& from);
  LOPQAttributeSearchRequest(LOPQAttributeSearchRequest&& from) noexcept
    : LOPQAttributeSearchRequest() {
    *this = ::std::move(from);
  }

  inline LOPQAttributeSearchRequest& operator=(const LOPQAttributeSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQAttributeSearchRequest& operator=(LOPQAttributeSearchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQAttributeSearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQAttributeSearchRequest* internal_default_instance() {
    return reinterpret_cast<const LOPQAttributeSearchRequest*>(
               &_LOPQAttributeSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LOPQAttributeSearchRequest& a, LOPQAttributeSearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQAttributeSearchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQAttributeSearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQAttributeSearchRequest* New() const final {
    return CreateMaybeMessage<LOPQAttributeSearchRequest>(nullptr);
  }

  LOPQAttributeSearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQAttributeSearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQAttributeSearchRequest& from);
  void MergeFrom(const LOPQAttributeSearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQAttributeSearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQAttributeSearchRequest";
  }
  protected:
  explicit LOPQAttributeSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeMixInFieldNumber = 9,
    kSqlTemplateFieldNumber = 3,
    kLopqModelNameFieldNumber = 7,
    kFallbackSqlTemplateFieldNumber = 8,
    kMetaFieldNumber = 1,
    kDataFieldNumber = 2,
    kKFieldNumber = 4,
    kQuotaFieldNumber = 5,
    kMaxVisitedFieldNumber = 6,
  };
  // repeated .AttributeMixIn attribute_mix_in = 9;
  int attribute_mix_in_size() const;
  private:
  int _internal_attribute_mix_in_size() const;
  public:
  void clear_attribute_mix_in();
  ::AttributeMixIn* mutable_attribute_mix_in(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AttributeMixIn >*
      mutable_attribute_mix_in();
  private:
  const ::AttributeMixIn& _internal_attribute_mix_in(int index) const;
  ::AttributeMixIn* _internal_add_attribute_mix_in();
  public:
  const ::AttributeMixIn& attribute_mix_in(int index) const;
  ::AttributeMixIn* add_attribute_mix_in();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AttributeMixIn >&
      attribute_mix_in() const;

  // string sql_template = 3;
  void clear_sql_template();
  const std::string& sql_template() const;
  void set_sql_template(const std::string& value);
  void set_sql_template(std::string&& value);
  void set_sql_template(const char* value);
  void set_sql_template(const char* value, size_t size);
  std::string* mutable_sql_template();
  std::string* release_sql_template();
  void set_allocated_sql_template(std::string* sql_template);
  private:
  const std::string& _internal_sql_template() const;
  void _internal_set_sql_template(const std::string& value);
  std::string* _internal_mutable_sql_template();
  public:

  // string lopq_model_name = 7;
  void clear_lopq_model_name();
  const std::string& lopq_model_name() const;
  void set_lopq_model_name(const std::string& value);
  void set_lopq_model_name(std::string&& value);
  void set_lopq_model_name(const char* value);
  void set_lopq_model_name(const char* value, size_t size);
  std::string* mutable_lopq_model_name();
  std::string* release_lopq_model_name();
  void set_allocated_lopq_model_name(std::string* lopq_model_name);
  private:
  const std::string& _internal_lopq_model_name() const;
  void _internal_set_lopq_model_name(const std::string& value);
  std::string* _internal_mutable_lopq_model_name();
  public:

  // string fallback_sql_template = 8;
  void clear_fallback_sql_template();
  const std::string& fallback_sql_template() const;
  void set_fallback_sql_template(const std::string& value);
  void set_fallback_sql_template(std::string&& value);
  void set_fallback_sql_template(const char* value);
  void set_fallback_sql_template(const char* value, size_t size);
  std::string* mutable_fallback_sql_template();
  std::string* release_fallback_sql_template();
  void set_allocated_fallback_sql_template(std::string* fallback_sql_template);
  private:
  const std::string& _internal_fallback_sql_template() const;
  void _internal_set_fallback_sql_template(const std::string& value);
  std::string* _internal_mutable_fallback_sql_template();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .DataBatch data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DataBatch& data() const;
  ::DataBatch* release_data();
  ::DataBatch* mutable_data();
  void set_allocated_data(::DataBatch* data);
  private:
  const ::DataBatch& _internal_data() const;
  ::DataBatch* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DataBatch* data);
  ::DataBatch* unsafe_arena_release_data();

  // int32 k = 4;
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::int32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_k() const;
  void _internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 quota = 5;
  void clear_quota();
  ::PROTOBUF_NAMESPACE_ID::int32 quota() const;
  void set_quota(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quota() const;
  void _internal_set_quota(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_visited = 6;
  void clear_max_visited();
  ::PROTOBUF_NAMESPACE_ID::int32 max_visited() const;
  void set_max_visited(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_visited() const;
  void _internal_set_max_visited(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LOPQAttributeSearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AttributeMixIn > attribute_mix_in_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_template_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lopq_model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fallback_sql_template_;
  ::RequestMeta* meta_;
  ::DataBatch* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 k_;
  ::PROTOBUF_NAMESPACE_ID::int32 quota_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_visited_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LOPQSearchResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQSearchResult) */ {
 public:
  inline LOPQSearchResult() : LOPQSearchResult(nullptr) {}
  virtual ~LOPQSearchResult();

  LOPQSearchResult(const LOPQSearchResult& from);
  LOPQSearchResult(LOPQSearchResult&& from) noexcept
    : LOPQSearchResult() {
    *this = ::std::move(from);
  }

  inline LOPQSearchResult& operator=(const LOPQSearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQSearchResult& operator=(LOPQSearchResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQSearchResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQSearchResult* internal_default_instance() {
    return reinterpret_cast<const LOPQSearchResult*>(
               &_LOPQSearchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LOPQSearchResult& a, LOPQSearchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQSearchResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQSearchResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQSearchResult* New() const final {
    return CreateMaybeMessage<LOPQSearchResult>(nullptr);
  }

  LOPQSearchResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQSearchResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQSearchResult& from);
  void MergeFrom(const LOPQSearchResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQSearchResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQSearchResult";
  }
  protected:
  explicit LOPQSearchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetIdFieldNumber = 1,
    kAnnotationIdFieldNumber = 4,
    kCodeFieldNumber = 5,
    kScoreFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // string asset_id = 1;
  void clear_asset_id();
  const std::string& asset_id() const;
  void set_asset_id(const std::string& value);
  void set_asset_id(std::string&& value);
  void set_asset_id(const char* value);
  void set_asset_id(const char* value, size_t size);
  std::string* mutable_asset_id();
  std::string* release_asset_id();
  void set_allocated_asset_id(std::string* asset_id);
  private:
  const std::string& _internal_asset_id() const;
  void _internal_set_asset_id(const std::string& value);
  std::string* _internal_mutable_asset_id();
  public:

  // string annotation_id = 4;
  void clear_annotation_id();
  const std::string& annotation_id() const;
  void set_annotation_id(const std::string& value);
  void set_annotation_id(std::string&& value);
  void set_annotation_id(const char* value);
  void set_annotation_id(const char* value, size_t size);
  std::string* mutable_annotation_id();
  std::string* release_annotation_id();
  void set_allocated_annotation_id(std::string* annotation_id);
  private:
  const std::string& _internal_annotation_id() const;
  void _internal_set_annotation_id(const std::string& value);
  std::string* _internal_mutable_annotation_id();
  public:

  // .LOPQCode code = 5;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const ::LOPQCode& code() const;
  ::LOPQCode* release_code();
  ::LOPQCode* mutable_code();
  void set_allocated_code(::LOPQCode* code);
  private:
  const ::LOPQCode& _internal_code() const;
  ::LOPQCode* _internal_mutable_code();
  public:
  void unsafe_arena_set_allocated_code(
      ::LOPQCode* code);
  ::LOPQCode* unsafe_arena_release_code();

  // float score = 2;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // float distance = 3;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:LOPQSearchResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr annotation_id_;
  ::LOPQCode* code_;
  float score_;
  float distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LOPQSearchResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQSearchResponse) */ {
 public:
  inline LOPQSearchResponse() : LOPQSearchResponse(nullptr) {}
  virtual ~LOPQSearchResponse();

  LOPQSearchResponse(const LOPQSearchResponse& from);
  LOPQSearchResponse(LOPQSearchResponse&& from) noexcept
    : LOPQSearchResponse() {
    *this = ::std::move(from);
  }

  inline LOPQSearchResponse& operator=(const LOPQSearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQSearchResponse& operator=(LOPQSearchResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQSearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQSearchResponse* internal_default_instance() {
    return reinterpret_cast<const LOPQSearchResponse*>(
               &_LOPQSearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LOPQSearchResponse& a, LOPQSearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQSearchResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQSearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQSearchResponse* New() const final {
    return CreateMaybeMessage<LOPQSearchResponse>(nullptr);
  }

  LOPQSearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQSearchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQSearchResponse& from);
  void MergeFrom(const LOPQSearchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQSearchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQSearchResponse";
  }
  protected:
  explicit LOPQSearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .LOPQSearchResult result = 2;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::LOPQSearchResult* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQSearchResult >*
      mutable_result();
  private:
  const ::LOPQSearchResult& _internal_result(int index) const;
  ::LOPQSearchResult* _internal_add_result();
  public:
  const ::LOPQSearchResult& result(int index) const;
  ::LOPQSearchResult* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQSearchResult >&
      result() const;

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:LOPQSearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQSearchResult > result_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LOPQSearchForCodesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQSearchForCodesRequest) */ {
 public:
  inline LOPQSearchForCodesRequest() : LOPQSearchForCodesRequest(nullptr) {}
  virtual ~LOPQSearchForCodesRequest();

  LOPQSearchForCodesRequest(const LOPQSearchForCodesRequest& from);
  LOPQSearchForCodesRequest(LOPQSearchForCodesRequest&& from) noexcept
    : LOPQSearchForCodesRequest() {
    *this = ::std::move(from);
  }

  inline LOPQSearchForCodesRequest& operator=(const LOPQSearchForCodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQSearchForCodesRequest& operator=(LOPQSearchForCodesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQSearchForCodesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQSearchForCodesRequest* internal_default_instance() {
    return reinterpret_cast<const LOPQSearchForCodesRequest*>(
               &_LOPQSearchForCodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LOPQSearchForCodesRequest& a, LOPQSearchForCodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQSearchForCodesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQSearchForCodesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQSearchForCodesRequest* New() const final {
    return CreateMaybeMessage<LOPQSearchForCodesRequest>(nullptr);
  }

  LOPQSearchForCodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQSearchForCodesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQSearchForCodesRequest& from);
  void MergeFrom(const LOPQSearchForCodesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQSearchForCodesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQSearchForCodesRequest";
  }
  protected:
  explicit LOPQSearchForCodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLopqModelNameFieldNumber = 4,
    kMetaFieldNumber = 1,
    kDataFieldNumber = 2,
    kMaxVisitedFieldNumber = 3,
  };
  // string lopq_model_name = 4;
  void clear_lopq_model_name();
  const std::string& lopq_model_name() const;
  void set_lopq_model_name(const std::string& value);
  void set_lopq_model_name(std::string&& value);
  void set_lopq_model_name(const char* value);
  void set_lopq_model_name(const char* value, size_t size);
  std::string* mutable_lopq_model_name();
  std::string* release_lopq_model_name();
  void set_allocated_lopq_model_name(std::string* lopq_model_name);
  private:
  const std::string& _internal_lopq_model_name() const;
  void _internal_set_lopq_model_name(const std::string& value);
  std::string* _internal_mutable_lopq_model_name();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .DataBatch data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DataBatch& data() const;
  ::DataBatch* release_data();
  ::DataBatch* mutable_data();
  void set_allocated_data(::DataBatch* data);
  private:
  const ::DataBatch& _internal_data() const;
  ::DataBatch* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DataBatch* data);
  ::DataBatch* unsafe_arena_release_data();

  // int32 max_visited = 3;
  void clear_max_visited();
  ::PROTOBUF_NAMESPACE_ID::int32 max_visited() const;
  void set_max_visited(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_visited() const;
  void _internal_set_max_visited(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LOPQSearchForCodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lopq_model_name_;
  ::RequestMeta* meta_;
  ::DataBatch* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_visited_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LOPQSearchForCodeResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQSearchForCodeResult) */ {
 public:
  inline LOPQSearchForCodeResult() : LOPQSearchForCodeResult(nullptr) {}
  virtual ~LOPQSearchForCodeResult();

  LOPQSearchForCodeResult(const LOPQSearchForCodeResult& from);
  LOPQSearchForCodeResult(LOPQSearchForCodeResult&& from) noexcept
    : LOPQSearchForCodeResult() {
    *this = ::std::move(from);
  }

  inline LOPQSearchForCodeResult& operator=(const LOPQSearchForCodeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQSearchForCodeResult& operator=(LOPQSearchForCodeResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQSearchForCodeResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQSearchForCodeResult* internal_default_instance() {
    return reinterpret_cast<const LOPQSearchForCodeResult*>(
               &_LOPQSearchForCodeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LOPQSearchForCodeResult& a, LOPQSearchForCodeResult& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQSearchForCodeResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQSearchForCodeResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQSearchForCodeResult* New() const final {
    return CreateMaybeMessage<LOPQSearchForCodeResult>(nullptr);
  }

  LOPQSearchForCodeResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQSearchForCodeResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQSearchForCodeResult& from);
  void MergeFrom(const LOPQSearchForCodeResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQSearchForCodeResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQSearchForCodeResult";
  }
  protected:
  explicit LOPQSearchForCodeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kScoreFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // .LOPQCode code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const ::LOPQCode& code() const;
  ::LOPQCode* release_code();
  ::LOPQCode* mutable_code();
  void set_allocated_code(::LOPQCode* code);
  private:
  const ::LOPQCode& _internal_code() const;
  ::LOPQCode* _internal_mutable_code();
  public:
  void unsafe_arena_set_allocated_code(
      ::LOPQCode* code);
  ::LOPQCode* unsafe_arena_release_code();

  // float score = 2;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // float distance = 3;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:LOPQSearchForCodeResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::LOPQCode* code_;
  float score_;
  float distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LOPQSearchForCodesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQSearchForCodesResponse) */ {
 public:
  inline LOPQSearchForCodesResponse() : LOPQSearchForCodesResponse(nullptr) {}
  virtual ~LOPQSearchForCodesResponse();

  LOPQSearchForCodesResponse(const LOPQSearchForCodesResponse& from);
  LOPQSearchForCodesResponse(LOPQSearchForCodesResponse&& from) noexcept
    : LOPQSearchForCodesResponse() {
    *this = ::std::move(from);
  }

  inline LOPQSearchForCodesResponse& operator=(const LOPQSearchForCodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQSearchForCodesResponse& operator=(LOPQSearchForCodesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQSearchForCodesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQSearchForCodesResponse* internal_default_instance() {
    return reinterpret_cast<const LOPQSearchForCodesResponse*>(
               &_LOPQSearchForCodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LOPQSearchForCodesResponse& a, LOPQSearchForCodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQSearchForCodesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQSearchForCodesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQSearchForCodesResponse* New() const final {
    return CreateMaybeMessage<LOPQSearchForCodesResponse>(nullptr);
  }

  LOPQSearchForCodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQSearchForCodesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQSearchForCodesResponse& from);
  void MergeFrom(const LOPQSearchForCodesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQSearchForCodesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQSearchForCodesResponse";
  }
  protected:
  explicit LOPQSearchForCodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .LOPQSearchForCodeResult result = 2;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::LOPQSearchForCodeResult* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQSearchForCodeResult >*
      mutable_result();
  private:
  const ::LOPQSearchForCodeResult& _internal_result(int index) const;
  ::LOPQSearchForCodeResult* _internal_add_result();
  public:
  const ::LOPQSearchForCodeResult& result(int index) const;
  ::LOPQSearchForCodeResult* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQSearchForCodeResult >&
      result() const;

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:LOPQSearchForCodesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQSearchForCodeResult > result_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LOPQBruteForceSearchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQBruteForceSearchRequest) */ {
 public:
  inline LOPQBruteForceSearchRequest() : LOPQBruteForceSearchRequest(nullptr) {}
  virtual ~LOPQBruteForceSearchRequest();

  LOPQBruteForceSearchRequest(const LOPQBruteForceSearchRequest& from);
  LOPQBruteForceSearchRequest(LOPQBruteForceSearchRequest&& from) noexcept
    : LOPQBruteForceSearchRequest() {
    *this = ::std::move(from);
  }

  inline LOPQBruteForceSearchRequest& operator=(const LOPQBruteForceSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQBruteForceSearchRequest& operator=(LOPQBruteForceSearchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQBruteForceSearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQBruteForceSearchRequest* internal_default_instance() {
    return reinterpret_cast<const LOPQBruteForceSearchRequest*>(
               &_LOPQBruteForceSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LOPQBruteForceSearchRequest& a, LOPQBruteForceSearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQBruteForceSearchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQBruteForceSearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQBruteForceSearchRequest* New() const final {
    return CreateMaybeMessage<LOPQBruteForceSearchRequest>(nullptr);
  }

  LOPQBruteForceSearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQBruteForceSearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQBruteForceSearchRequest& from);
  void MergeFrom(const LOPQBruteForceSearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQBruteForceSearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQBruteForceSearchRequest";
  }
  protected:
  explicit LOPQBruteForceSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSqlQueryFieldNumber = 3,
    kMetaFieldNumber = 1,
    kDataFieldNumber = 2,
    kKFieldNumber = 4,
    kAvgConceptBruteForceFieldNumber = 5,
  };
  // string sql_query = 3;
  void clear_sql_query();
  const std::string& sql_query() const;
  void set_sql_query(const std::string& value);
  void set_sql_query(std::string&& value);
  void set_sql_query(const char* value);
  void set_sql_query(const char* value, size_t size);
  std::string* mutable_sql_query();
  std::string* release_sql_query();
  void set_allocated_sql_query(std::string* sql_query);
  private:
  const std::string& _internal_sql_query() const;
  void _internal_set_sql_query(const std::string& value);
  std::string* _internal_mutable_sql_query();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .DataBatch data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DataBatch& data() const;
  ::DataBatch* release_data();
  ::DataBatch* mutable_data();
  void set_allocated_data(::DataBatch* data);
  private:
  const ::DataBatch& _internal_data() const;
  ::DataBatch* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DataBatch* data);
  ::DataBatch* unsafe_arena_release_data();

  // int32 k = 4;
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::int32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_k() const;
  void _internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool avg_concept_brute_force = 5;
  void clear_avg_concept_brute_force();
  bool avg_concept_brute_force() const;
  void set_avg_concept_brute_force(bool value);
  private:
  bool _internal_avg_concept_brute_force() const;
  void _internal_set_avg_concept_brute_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LOPQBruteForceSearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_query_;
  ::RequestMeta* meta_;
  ::DataBatch* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 k_;
  bool avg_concept_brute_force_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LOPQBruteForceSearchResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQBruteForceSearchResponse) */ {
 public:
  inline LOPQBruteForceSearchResponse() : LOPQBruteForceSearchResponse(nullptr) {}
  virtual ~LOPQBruteForceSearchResponse();

  LOPQBruteForceSearchResponse(const LOPQBruteForceSearchResponse& from);
  LOPQBruteForceSearchResponse(LOPQBruteForceSearchResponse&& from) noexcept
    : LOPQBruteForceSearchResponse() {
    *this = ::std::move(from);
  }

  inline LOPQBruteForceSearchResponse& operator=(const LOPQBruteForceSearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQBruteForceSearchResponse& operator=(LOPQBruteForceSearchResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQBruteForceSearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQBruteForceSearchResponse* internal_default_instance() {
    return reinterpret_cast<const LOPQBruteForceSearchResponse*>(
               &_LOPQBruteForceSearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LOPQBruteForceSearchResponse& a, LOPQBruteForceSearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQBruteForceSearchResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQBruteForceSearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQBruteForceSearchResponse* New() const final {
    return CreateMaybeMessage<LOPQBruteForceSearchResponse>(nullptr);
  }

  LOPQBruteForceSearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQBruteForceSearchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQBruteForceSearchResponse& from);
  void MergeFrom(const LOPQBruteForceSearchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQBruteForceSearchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQBruteForceSearchResponse";
  }
  protected:
  explicit LOPQBruteForceSearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllResultsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .BruteForceResult all_results = 2;
  int all_results_size() const;
  private:
  int _internal_all_results_size() const;
  public:
  void clear_all_results();
  ::BruteForceResult* mutable_all_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BruteForceResult >*
      mutable_all_results();
  private:
  const ::BruteForceResult& _internal_all_results(int index) const;
  ::BruteForceResult* _internal_add_all_results();
  public:
  const ::BruteForceResult& all_results(int index) const;
  ::BruteForceResult* add_all_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BruteForceResult >&
      all_results() const;

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:LOPQBruteForceSearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BruteForceResult > all_results_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BruteForceResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BruteForceResult) */ {
 public:
  inline BruteForceResult() : BruteForceResult(nullptr) {}
  virtual ~BruteForceResult();

  BruteForceResult(const BruteForceResult& from);
  BruteForceResult(BruteForceResult&& from) noexcept
    : BruteForceResult() {
    *this = ::std::move(from);
  }

  inline BruteForceResult& operator=(const BruteForceResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline BruteForceResult& operator=(BruteForceResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BruteForceResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BruteForceResult* internal_default_instance() {
    return reinterpret_cast<const BruteForceResult*>(
               &_BruteForceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BruteForceResult& a, BruteForceResult& b) {
    a.Swap(&b);
  }
  inline void Swap(BruteForceResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BruteForceResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BruteForceResult* New() const final {
    return CreateMaybeMessage<BruteForceResult>(nullptr);
  }

  BruteForceResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BruteForceResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BruteForceResult& from);
  void MergeFrom(const BruteForceResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BruteForceResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BruteForceResult";
  }
  protected:
  explicit BruteForceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
  };
  // repeated .LOPQSearchResult results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::LOPQSearchResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQSearchResult >*
      mutable_results();
  private:
  const ::LOPQSearchResult& _internal_results(int index) const;
  ::LOPQSearchResult* _internal_add_results();
  public:
  const ::LOPQSearchResult& results(int index) const;
  ::LOPQSearchResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQSearchResult >&
      results() const;

  // @@protoc_insertion_point(class_scope:BruteForceResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQSearchResult > results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LOPQTrainRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQTrainRequest) */ {
 public:
  inline LOPQTrainRequest() : LOPQTrainRequest(nullptr) {}
  virtual ~LOPQTrainRequest();

  LOPQTrainRequest(const LOPQTrainRequest& from);
  LOPQTrainRequest(LOPQTrainRequest&& from) noexcept
    : LOPQTrainRequest() {
    *this = ::std::move(from);
  }

  inline LOPQTrainRequest& operator=(const LOPQTrainRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQTrainRequest& operator=(LOPQTrainRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQTrainRequest& default_instance();

  enum TrainingDataCase {
    kData = 2,
    kSqlQuery = 3,
    TRAINING_DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQTrainRequest* internal_default_instance() {
    return reinterpret_cast<const LOPQTrainRequest*>(
               &_LOPQTrainRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LOPQTrainRequest& a, LOPQTrainRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQTrainRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQTrainRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQTrainRequest* New() const final {
    return CreateMaybeMessage<LOPQTrainRequest>(nullptr);
  }

  LOPQTrainRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQTrainRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQTrainRequest& from);
  void MergeFrom(const LOPQTrainRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQTrainRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQTrainRequest";
  }
  protected:
  explicit LOPQTrainRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLopqModelNameFieldNumber = 4,
    kPrevModelNameFieldNumber = 7,
    kMetaFieldNumber = 1,
    kCoarseClustersFieldNumber = 5,
    kTrainItersFieldNumber = 6,
    kDataFieldNumber = 2,
    kSqlQueryFieldNumber = 3,
  };
  // string lopq_model_name = 4;
  void clear_lopq_model_name();
  const std::string& lopq_model_name() const;
  void set_lopq_model_name(const std::string& value);
  void set_lopq_model_name(std::string&& value);
  void set_lopq_model_name(const char* value);
  void set_lopq_model_name(const char* value, size_t size);
  std::string* mutable_lopq_model_name();
  std::string* release_lopq_model_name();
  void set_allocated_lopq_model_name(std::string* lopq_model_name);
  private:
  const std::string& _internal_lopq_model_name() const;
  void _internal_set_lopq_model_name(const std::string& value);
  std::string* _internal_mutable_lopq_model_name();
  public:

  // string prev_model_name = 7;
  void clear_prev_model_name();
  const std::string& prev_model_name() const;
  void set_prev_model_name(const std::string& value);
  void set_prev_model_name(std::string&& value);
  void set_prev_model_name(const char* value);
  void set_prev_model_name(const char* value, size_t size);
  std::string* mutable_prev_model_name();
  std::string* release_prev_model_name();
  void set_allocated_prev_model_name(std::string* prev_model_name);
  private:
  const std::string& _internal_prev_model_name() const;
  void _internal_set_prev_model_name(const std::string& value);
  std::string* _internal_mutable_prev_model_name();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // int32 coarse_clusters = 5;
  void clear_coarse_clusters();
  ::PROTOBUF_NAMESPACE_ID::int32 coarse_clusters() const;
  void set_coarse_clusters(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coarse_clusters() const;
  void _internal_set_coarse_clusters(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 train_iters = 6;
  void clear_train_iters();
  ::PROTOBUF_NAMESPACE_ID::int32 train_iters() const;
  void set_train_iters(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_train_iters() const;
  void _internal_set_train_iters(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .DataBatch data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DataBatch& data() const;
  ::DataBatch* release_data();
  ::DataBatch* mutable_data();
  void set_allocated_data(::DataBatch* data);
  private:
  const ::DataBatch& _internal_data() const;
  ::DataBatch* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DataBatch* data);
  ::DataBatch* unsafe_arena_release_data();

  // string sql_query = 3;
  private:
  bool _internal_has_sql_query() const;
  public:
  void clear_sql_query();
  const std::string& sql_query() const;
  void set_sql_query(const std::string& value);
  void set_sql_query(std::string&& value);
  void set_sql_query(const char* value);
  void set_sql_query(const char* value, size_t size);
  std::string* mutable_sql_query();
  std::string* release_sql_query();
  void set_allocated_sql_query(std::string* sql_query);
  private:
  const std::string& _internal_sql_query() const;
  void _internal_set_sql_query(const std::string& value);
  std::string* _internal_mutable_sql_query();
  public:

  void clear_training_data();
  TrainingDataCase training_data_case() const;
  // @@protoc_insertion_point(class_scope:LOPQTrainRequest)
 private:
  class _Internal;
  void set_has_data();
  void set_has_sql_query();

  inline bool has_training_data() const;
  inline void clear_has_training_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lopq_model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_model_name_;
  ::RequestMeta* meta_;
  ::PROTOBUF_NAMESPACE_ID::int32 coarse_clusters_;
  ::PROTOBUF_NAMESPACE_ID::int32 train_iters_;
  union TrainingDataUnion {
    TrainingDataUnion() {}
    ::DataBatch* data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_query_;
  } training_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LOPQTrainResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQTrainResponse) */ {
 public:
  inline LOPQTrainResponse() : LOPQTrainResponse(nullptr) {}
  virtual ~LOPQTrainResponse();

  LOPQTrainResponse(const LOPQTrainResponse& from);
  LOPQTrainResponse(LOPQTrainResponse&& from) noexcept
    : LOPQTrainResponse() {
    *this = ::std::move(from);
  }

  inline LOPQTrainResponse& operator=(const LOPQTrainResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQTrainResponse& operator=(LOPQTrainResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQTrainResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQTrainResponse* internal_default_instance() {
    return reinterpret_cast<const LOPQTrainResponse*>(
               &_LOPQTrainResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(LOPQTrainResponse& a, LOPQTrainResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQTrainResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQTrainResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQTrainResponse* New() const final {
    return CreateMaybeMessage<LOPQTrainResponse>(nullptr);
  }

  LOPQTrainResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQTrainResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQTrainResponse& from);
  void MergeFrom(const LOPQTrainResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQTrainResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQTrainResponse";
  }
  protected:
  explicit LOPQTrainResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:LOPQTrainResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LOPQModelParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQModelParams) */ {
 public:
  inline LOPQModelParams() : LOPQModelParams(nullptr) {}
  virtual ~LOPQModelParams();

  LOPQModelParams(const LOPQModelParams& from);
  LOPQModelParams(LOPQModelParams&& from) noexcept
    : LOPQModelParams() {
    *this = ::std::move(from);
  }

  inline LOPQModelParams& operator=(const LOPQModelParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQModelParams& operator=(LOPQModelParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQModelParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQModelParams* internal_default_instance() {
    return reinterpret_cast<const LOPQModelParams*>(
               &_LOPQModelParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(LOPQModelParams& a, LOPQModelParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQModelParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQModelParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQModelParams* New() const final {
    return CreateMaybeMessage<LOPQModelParams>(nullptr);
  }

  LOPQModelParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQModelParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQModelParams& from);
  void MergeFrom(const LOPQModelParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQModelParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQModelParams";
  }
  protected:
  explicit LOPQModelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCsFieldNumber = 5,
    kRsFieldNumber = 6,
    kMusFieldNumber = 7,
    kSubsFieldNumber = 8,
    kPcaPFieldNumber = 9,
    kPcaMuFieldNumber = 10,
    kPcaPermutedIndsFieldNumber = 13,
    kProjectionPFieldNumber = 15,
    kProjectionMuFieldNumber = 16,
    kDFieldNumber = 1,
    kVFieldNumber = 2,
    kMFieldNumber = 3,
    kNumSubquantizersFieldNumber = 4,
    kUseEmbeddingsFieldNumber = 11,
    kPcaJustShuffleFieldNumber = 12,
    kNumPointDimsFieldNumber = 14,
  };
  // repeated .NDArray Cs = 5;
  int cs_size() const;
  private:
  int _internal_cs_size() const;
  public:
  void clear_cs();
  ::NDArray* mutable_cs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >*
      mutable_cs();
  private:
  const ::NDArray& _internal_cs(int index) const;
  ::NDArray* _internal_add_cs();
  public:
  const ::NDArray& cs(int index) const;
  ::NDArray* add_cs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >&
      cs() const;

  // repeated .NDArray Rs = 6;
  int rs_size() const;
  private:
  int _internal_rs_size() const;
  public:
  void clear_rs();
  ::NDArray* mutable_rs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >*
      mutable_rs();
  private:
  const ::NDArray& _internal_rs(int index) const;
  ::NDArray* _internal_add_rs();
  public:
  const ::NDArray& rs(int index) const;
  ::NDArray* add_rs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >&
      rs() const;

  // repeated .NDArray mus = 7;
  int mus_size() const;
  private:
  int _internal_mus_size() const;
  public:
  void clear_mus();
  ::NDArray* mutable_mus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >*
      mutable_mus();
  private:
  const ::NDArray& _internal_mus(int index) const;
  ::NDArray* _internal_add_mus();
  public:
  const ::NDArray& mus(int index) const;
  ::NDArray* add_mus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >&
      mus() const;

  // repeated .NDArray subs = 8;
  int subs_size() const;
  private:
  int _internal_subs_size() const;
  public:
  void clear_subs();
  ::NDArray* mutable_subs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >*
      mutable_subs();
  private:
  const ::NDArray& _internal_subs(int index) const;
  ::NDArray* _internal_add_subs();
  public:
  const ::NDArray& subs(int index) const;
  ::NDArray* add_subs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >&
      subs() const;

  // .NDArray pca_P = 9;
  bool has_pca_p() const;
  private:
  bool _internal_has_pca_p() const;
  public:
  void clear_pca_p();
  const ::NDArray& pca_p() const;
  ::NDArray* release_pca_p();
  ::NDArray* mutable_pca_p();
  void set_allocated_pca_p(::NDArray* pca_p);
  private:
  const ::NDArray& _internal_pca_p() const;
  ::NDArray* _internal_mutable_pca_p();
  public:
  void unsafe_arena_set_allocated_pca_p(
      ::NDArray* pca_p);
  ::NDArray* unsafe_arena_release_pca_p();

  // .NDArray pca_mu = 10;
  bool has_pca_mu() const;
  private:
  bool _internal_has_pca_mu() const;
  public:
  void clear_pca_mu();
  const ::NDArray& pca_mu() const;
  ::NDArray* release_pca_mu();
  ::NDArray* mutable_pca_mu();
  void set_allocated_pca_mu(::NDArray* pca_mu);
  private:
  const ::NDArray& _internal_pca_mu() const;
  ::NDArray* _internal_mutable_pca_mu();
  public:
  void unsafe_arena_set_allocated_pca_mu(
      ::NDArray* pca_mu);
  ::NDArray* unsafe_arena_release_pca_mu();

  // .NDArray pca_permuted_inds = 13;
  bool has_pca_permuted_inds() const;
  private:
  bool _internal_has_pca_permuted_inds() const;
  public:
  void clear_pca_permuted_inds();
  const ::NDArray& pca_permuted_inds() const;
  ::NDArray* release_pca_permuted_inds();
  ::NDArray* mutable_pca_permuted_inds();
  void set_allocated_pca_permuted_inds(::NDArray* pca_permuted_inds);
  private:
  const ::NDArray& _internal_pca_permuted_inds() const;
  ::NDArray* _internal_mutable_pca_permuted_inds();
  public:
  void unsafe_arena_set_allocated_pca_permuted_inds(
      ::NDArray* pca_permuted_inds);
  ::NDArray* unsafe_arena_release_pca_permuted_inds();

  // .NDArray projection_P = 15;
  bool has_projection_p() const;
  private:
  bool _internal_has_projection_p() const;
  public:
  void clear_projection_p();
  const ::NDArray& projection_p() const;
  ::NDArray* release_projection_p();
  ::NDArray* mutable_projection_p();
  void set_allocated_projection_p(::NDArray* projection_p);
  private:
  const ::NDArray& _internal_projection_p() const;
  ::NDArray* _internal_mutable_projection_p();
  public:
  void unsafe_arena_set_allocated_projection_p(
      ::NDArray* projection_p);
  ::NDArray* unsafe_arena_release_projection_p();

  // .NDArray projection_mu = 16;
  bool has_projection_mu() const;
  private:
  bool _internal_has_projection_mu() const;
  public:
  void clear_projection_mu();
  const ::NDArray& projection_mu() const;
  ::NDArray* release_projection_mu();
  ::NDArray* mutable_projection_mu();
  void set_allocated_projection_mu(::NDArray* projection_mu);
  private:
  const ::NDArray& _internal_projection_mu() const;
  ::NDArray* _internal_mutable_projection_mu();
  public:
  void unsafe_arena_set_allocated_projection_mu(
      ::NDArray* projection_mu);
  ::NDArray* unsafe_arena_release_projection_mu();

  // uint32 D = 1;
  void clear_d();
  ::PROTOBUF_NAMESPACE_ID::uint32 d() const;
  void set_d(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_d() const;
  void _internal_set_d(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 V = 2;
  void clear_v();
  ::PROTOBUF_NAMESPACE_ID::uint32 v() const;
  void set_v(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_v() const;
  void _internal_set_v(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 M = 3;
  void clear_m();
  ::PROTOBUF_NAMESPACE_ID::uint32 m() const;
  void set_m(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_m() const;
  void _internal_set_m(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_subquantizers = 4;
  void clear_num_subquantizers();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_subquantizers() const;
  void set_num_subquantizers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_subquantizers() const;
  void _internal_set_num_subquantizers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool use_embeddings = 11;
  void clear_use_embeddings();
  bool use_embeddings() const;
  void set_use_embeddings(bool value);
  private:
  bool _internal_use_embeddings() const;
  void _internal_set_use_embeddings(bool value);
  public:

  // bool pca_just_shuffle = 12;
  void clear_pca_just_shuffle();
  bool pca_just_shuffle() const;
  void set_pca_just_shuffle(bool value);
  private:
  bool _internal_pca_just_shuffle() const;
  void _internal_set_pca_just_shuffle(bool value);
  public:

  // uint32 num_point_dims = 14;
  void clear_num_point_dims();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_point_dims() const;
  void set_num_point_dims(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_point_dims() const;
  void _internal_set_num_point_dims(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:LOPQModelParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray > cs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray > rs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray > mus_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray > subs_;
  ::NDArray* pca_p_;
  ::NDArray* pca_mu_;
  ::NDArray* pca_permuted_inds_;
  ::NDArray* projection_p_;
  ::NDArray* projection_mu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 d_;
  ::PROTOBUF_NAMESPACE_ID::uint32 v_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_subquantizers_;
  bool use_embeddings_;
  bool pca_just_shuffle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_point_dims_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LOPQTrainAndEvalRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQTrainAndEvalRequest) */ {
 public:
  inline LOPQTrainAndEvalRequest() : LOPQTrainAndEvalRequest(nullptr) {}
  virtual ~LOPQTrainAndEvalRequest();

  LOPQTrainAndEvalRequest(const LOPQTrainAndEvalRequest& from);
  LOPQTrainAndEvalRequest(LOPQTrainAndEvalRequest&& from) noexcept
    : LOPQTrainAndEvalRequest() {
    *this = ::std::move(from);
  }

  inline LOPQTrainAndEvalRequest& operator=(const LOPQTrainAndEvalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQTrainAndEvalRequest& operator=(LOPQTrainAndEvalRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQTrainAndEvalRequest& default_instance();

  enum TrainingDataCase {
    kData = 2,
    kSqlQuery = 3,
    TRAINING_DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQTrainAndEvalRequest* internal_default_instance() {
    return reinterpret_cast<const LOPQTrainAndEvalRequest*>(
               &_LOPQTrainAndEvalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(LOPQTrainAndEvalRequest& a, LOPQTrainAndEvalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQTrainAndEvalRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQTrainAndEvalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQTrainAndEvalRequest* New() const final {
    return CreateMaybeMessage<LOPQTrainAndEvalRequest>(nullptr);
  }

  LOPQTrainAndEvalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQTrainAndEvalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQTrainAndEvalRequest& from);
  void MergeFrom(const LOPQTrainAndEvalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQTrainAndEvalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQTrainAndEvalRequest";
  }
  protected:
  explicit LOPQTrainAndEvalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLopqModelNameFieldNumber = 4,
    kPrevModelNameFieldNumber = 6,
    kSpireNameFieldNumber = 7,
    kHyperParametersFieldNumber = 8,
    kMetaFieldNumber = 1,
    kTrainItersFieldNumber = 5,
    kDataFieldNumber = 2,
    kSqlQueryFieldNumber = 3,
  };
  // string lopq_model_name = 4;
  void clear_lopq_model_name();
  const std::string& lopq_model_name() const;
  void set_lopq_model_name(const std::string& value);
  void set_lopq_model_name(std::string&& value);
  void set_lopq_model_name(const char* value);
  void set_lopq_model_name(const char* value, size_t size);
  std::string* mutable_lopq_model_name();
  std::string* release_lopq_model_name();
  void set_allocated_lopq_model_name(std::string* lopq_model_name);
  private:
  const std::string& _internal_lopq_model_name() const;
  void _internal_set_lopq_model_name(const std::string& value);
  std::string* _internal_mutable_lopq_model_name();
  public:

  // string prev_model_name = 6;
  void clear_prev_model_name();
  const std::string& prev_model_name() const;
  void set_prev_model_name(const std::string& value);
  void set_prev_model_name(std::string&& value);
  void set_prev_model_name(const char* value);
  void set_prev_model_name(const char* value, size_t size);
  std::string* mutable_prev_model_name();
  std::string* release_prev_model_name();
  void set_allocated_prev_model_name(std::string* prev_model_name);
  private:
  const std::string& _internal_prev_model_name() const;
  void _internal_set_prev_model_name(const std::string& value);
  std::string* _internal_mutable_prev_model_name();
  public:

  // string spire_name = 7;
  void clear_spire_name();
  const std::string& spire_name() const;
  void set_spire_name(const std::string& value);
  void set_spire_name(std::string&& value);
  void set_spire_name(const char* value);
  void set_spire_name(const char* value, size_t size);
  std::string* mutable_spire_name();
  std::string* release_spire_name();
  void set_allocated_spire_name(std::string* spire_name);
  private:
  const std::string& _internal_spire_name() const;
  void _internal_set_spire_name(const std::string& value);
  std::string* _internal_mutable_spire_name();
  public:

  // string hyper_parameters = 8;
  void clear_hyper_parameters();
  const std::string& hyper_parameters() const;
  void set_hyper_parameters(const std::string& value);
  void set_hyper_parameters(std::string&& value);
  void set_hyper_parameters(const char* value);
  void set_hyper_parameters(const char* value, size_t size);
  std::string* mutable_hyper_parameters();
  std::string* release_hyper_parameters();
  void set_allocated_hyper_parameters(std::string* hyper_parameters);
  private:
  const std::string& _internal_hyper_parameters() const;
  void _internal_set_hyper_parameters(const std::string& value);
  std::string* _internal_mutable_hyper_parameters();
  public:

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // int32 train_iters = 5;
  void clear_train_iters();
  ::PROTOBUF_NAMESPACE_ID::int32 train_iters() const;
  void set_train_iters(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_train_iters() const;
  void _internal_set_train_iters(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .DataBatch data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DataBatch& data() const;
  ::DataBatch* release_data();
  ::DataBatch* mutable_data();
  void set_allocated_data(::DataBatch* data);
  private:
  const ::DataBatch& _internal_data() const;
  ::DataBatch* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DataBatch* data);
  ::DataBatch* unsafe_arena_release_data();

  // string sql_query = 3;
  private:
  bool _internal_has_sql_query() const;
  public:
  void clear_sql_query();
  const std::string& sql_query() const;
  void set_sql_query(const std::string& value);
  void set_sql_query(std::string&& value);
  void set_sql_query(const char* value);
  void set_sql_query(const char* value, size_t size);
  std::string* mutable_sql_query();
  std::string* release_sql_query();
  void set_allocated_sql_query(std::string* sql_query);
  private:
  const std::string& _internal_sql_query() const;
  void _internal_set_sql_query(const std::string& value);
  std::string* _internal_mutable_sql_query();
  public:

  void clear_training_data();
  TrainingDataCase training_data_case() const;
  // @@protoc_insertion_point(class_scope:LOPQTrainAndEvalRequest)
 private:
  class _Internal;
  void set_has_data();
  void set_has_sql_query();

  inline bool has_training_data() const;
  inline void clear_has_training_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lopq_model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spire_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hyper_parameters_;
  ::RequestMeta* meta_;
  ::PROTOBUF_NAMESPACE_ID::int32 train_iters_;
  union TrainingDataUnion {
    TrainingDataUnion() {}
    ::DataBatch* data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_query_;
  } training_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LOPQTrainAndEvalResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQTrainAndEvalResponse) */ {
 public:
  inline LOPQTrainAndEvalResponse() : LOPQTrainAndEvalResponse(nullptr) {}
  virtual ~LOPQTrainAndEvalResponse();

  LOPQTrainAndEvalResponse(const LOPQTrainAndEvalResponse& from);
  LOPQTrainAndEvalResponse(LOPQTrainAndEvalResponse&& from) noexcept
    : LOPQTrainAndEvalResponse() {
    *this = ::std::move(from);
  }

  inline LOPQTrainAndEvalResponse& operator=(const LOPQTrainAndEvalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQTrainAndEvalResponse& operator=(LOPQTrainAndEvalResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQTrainAndEvalResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQTrainAndEvalResponse* internal_default_instance() {
    return reinterpret_cast<const LOPQTrainAndEvalResponse*>(
               &_LOPQTrainAndEvalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(LOPQTrainAndEvalResponse& a, LOPQTrainAndEvalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQTrainAndEvalResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOPQTrainAndEvalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQTrainAndEvalResponse* New() const final {
    return CreateMaybeMessage<LOPQTrainAndEvalResponse>(nullptr);
  }

  LOPQTrainAndEvalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQTrainAndEvalResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQTrainAndEvalResponse& from);
  void MergeFrom(const LOPQTrainAndEvalResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQTrainAndEvalResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQTrainAndEvalResponse";
  }
  protected:
  explicit LOPQTrainAndEvalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2flopq_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .LOPQEvalResult result = 2;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::LOPQEvalResult* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQEvalResult >*
      mutable_result();
  private:
  const ::LOPQEvalResult& _internal_result(int index) const;
  ::LOPQEvalResult* _internal_add_result();
  public:
  const ::LOPQEvalResult& result(int index) const;
  ::LOPQEvalResult* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQEvalResult >&
      result() const;

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:LOPQTrainAndEvalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQEvalResult > result_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flopq_2flopq_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LOPQPredictRequest

// .RequestMeta meta = 1;
inline bool LOPQPredictRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool LOPQPredictRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& LOPQPredictRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& LOPQPredictRequest::meta() const {
  // @@protoc_insertion_point(field_get:LOPQPredictRequest.meta)
  return _internal_meta();
}
inline void LOPQPredictRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQPredictRequest.meta)
}
inline ::RequestMeta* LOPQPredictRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* LOPQPredictRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:LOPQPredictRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* LOPQPredictRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* LOPQPredictRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:LOPQPredictRequest.meta)
  return _internal_mutable_meta();
}
inline void LOPQPredictRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:LOPQPredictRequest.meta)
}

// .DataBatch data = 2;
inline bool LOPQPredictRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool LOPQPredictRequest::has_data() const {
  return _internal_has_data();
}
inline const ::DataBatch& LOPQPredictRequest::_internal_data() const {
  const ::DataBatch* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& LOPQPredictRequest::data() const {
  // @@protoc_insertion_point(field_get:LOPQPredictRequest.data)
  return _internal_data();
}
inline void LOPQPredictRequest::unsafe_arena_set_allocated_data(
    ::DataBatch* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQPredictRequest.data)
}
inline ::DataBatch* LOPQPredictRequest::release_data() {
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* LOPQPredictRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:LOPQPredictRequest.data)
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DataBatch* LOPQPredictRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::DataBatch* LOPQPredictRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:LOPQPredictRequest.data)
  return _internal_mutable_data();
}
inline void LOPQPredictRequest::set_allocated_data(::DataBatch* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:LOPQPredictRequest.data)
}

// string lopq_model_name = 3;
inline void LOPQPredictRequest::clear_lopq_model_name() {
  lopq_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQPredictRequest::lopq_model_name() const {
  // @@protoc_insertion_point(field_get:LOPQPredictRequest.lopq_model_name)
  return _internal_lopq_model_name();
}
inline void LOPQPredictRequest::set_lopq_model_name(const std::string& value) {
  _internal_set_lopq_model_name(value);
  // @@protoc_insertion_point(field_set:LOPQPredictRequest.lopq_model_name)
}
inline std::string* LOPQPredictRequest::mutable_lopq_model_name() {
  // @@protoc_insertion_point(field_mutable:LOPQPredictRequest.lopq_model_name)
  return _internal_mutable_lopq_model_name();
}
inline const std::string& LOPQPredictRequest::_internal_lopq_model_name() const {
  return lopq_model_name_.Get();
}
inline void LOPQPredictRequest::_internal_set_lopq_model_name(const std::string& value) {
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQPredictRequest::set_lopq_model_name(std::string&& value) {
  
  lopq_model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQPredictRequest.lopq_model_name)
}
inline void LOPQPredictRequest::set_lopq_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQPredictRequest.lopq_model_name)
}
inline void LOPQPredictRequest::set_lopq_model_name(const char* value,
    size_t size) {
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQPredictRequest.lopq_model_name)
}
inline std::string* LOPQPredictRequest::_internal_mutable_lopq_model_name() {
  
  return lopq_model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQPredictRequest::release_lopq_model_name() {
  // @@protoc_insertion_point(field_release:LOPQPredictRequest.lopq_model_name)
  return lopq_model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQPredictRequest::set_allocated_lopq_model_name(std::string* lopq_model_name) {
  if (lopq_model_name != nullptr) {
    
  } else {
    
  }
  lopq_model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lopq_model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQPredictRequest.lopq_model_name)
}

// -------------------------------------------------------------------

// LOPQPredictResponse

// .ResponseStatus status = 1;
inline bool LOPQPredictResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool LOPQPredictResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& LOPQPredictResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& LOPQPredictResponse::status() const {
  // @@protoc_insertion_point(field_get:LOPQPredictResponse.status)
  return _internal_status();
}
inline void LOPQPredictResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQPredictResponse.status)
}
inline ::ResponseStatus* LOPQPredictResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* LOPQPredictResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:LOPQPredictResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* LOPQPredictResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* LOPQPredictResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:LOPQPredictResponse.status)
  return _internal_mutable_status();
}
inline void LOPQPredictResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:LOPQPredictResponse.status)
}

// repeated .LOPQCode code = 2 [deprecated = true];
inline int LOPQPredictResponse::_internal_code_size() const {
  return code_.size();
}
inline int LOPQPredictResponse::code_size() const {
  return _internal_code_size();
}
inline ::LOPQCode* LOPQPredictResponse::mutable_code(int index) {
  // @@protoc_insertion_point(field_mutable:LOPQPredictResponse.code)
  return code_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQCode >*
LOPQPredictResponse::mutable_code() {
  // @@protoc_insertion_point(field_mutable_list:LOPQPredictResponse.code)
  return &code_;
}
inline const ::LOPQCode& LOPQPredictResponse::_internal_code(int index) const {
  return code_.Get(index);
}
inline const ::LOPQCode& LOPQPredictResponse::code(int index) const {
  // @@protoc_insertion_point(field_get:LOPQPredictResponse.code)
  return _internal_code(index);
}
inline ::LOPQCode* LOPQPredictResponse::_internal_add_code() {
  return code_.Add();
}
inline ::LOPQCode* LOPQPredictResponse::add_code() {
  // @@protoc_insertion_point(field_add:LOPQPredictResponse.code)
  return _internal_add_code();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQCode >&
LOPQPredictResponse::code() const {
  // @@protoc_insertion_point(field_list:LOPQPredictResponse.code)
  return code_;
}

// .DataBatch results = 3;
inline bool LOPQPredictResponse::_internal_has_results() const {
  return this != internal_default_instance() && results_ != nullptr;
}
inline bool LOPQPredictResponse::has_results() const {
  return _internal_has_results();
}
inline const ::DataBatch& LOPQPredictResponse::_internal_results() const {
  const ::DataBatch* p = results_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& LOPQPredictResponse::results() const {
  // @@protoc_insertion_point(field_get:LOPQPredictResponse.results)
  return _internal_results();
}
inline void LOPQPredictResponse::unsafe_arena_set_allocated_results(
    ::DataBatch* results) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_);
  }
  results_ = results;
  if (results) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQPredictResponse.results)
}
inline ::DataBatch* LOPQPredictResponse::release_results() {
  
  ::DataBatch* temp = results_;
  results_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* LOPQPredictResponse::unsafe_arena_release_results() {
  // @@protoc_insertion_point(field_release:LOPQPredictResponse.results)
  
  ::DataBatch* temp = results_;
  results_ = nullptr;
  return temp;
}
inline ::DataBatch* LOPQPredictResponse::_internal_mutable_results() {
  
  if (results_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    results_ = p;
  }
  return results_;
}
inline ::DataBatch* LOPQPredictResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable:LOPQPredictResponse.results)
  return _internal_mutable_results();
}
inline void LOPQPredictResponse::set_allocated_results(::DataBatch* results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_);
  }
  if (results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(results)->GetArena();
    if (message_arena != submessage_arena) {
      results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, results, submessage_arena);
    }
    
  } else {
    
  }
  results_ = results;
  // @@protoc_insertion_point(field_set_allocated:LOPQPredictResponse.results)
}

// -------------------------------------------------------------------

// LOPQSearchRequest

// .RequestMeta meta = 1;
inline bool LOPQSearchRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool LOPQSearchRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& LOPQSearchRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& LOPQSearchRequest::meta() const {
  // @@protoc_insertion_point(field_get:LOPQSearchRequest.meta)
  return _internal_meta();
}
inline void LOPQSearchRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQSearchRequest.meta)
}
inline ::RequestMeta* LOPQSearchRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* LOPQSearchRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:LOPQSearchRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* LOPQSearchRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* LOPQSearchRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:LOPQSearchRequest.meta)
  return _internal_mutable_meta();
}
inline void LOPQSearchRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:LOPQSearchRequest.meta)
}

// .DataBatch data = 2;
inline bool LOPQSearchRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool LOPQSearchRequest::has_data() const {
  return _internal_has_data();
}
inline const ::DataBatch& LOPQSearchRequest::_internal_data() const {
  const ::DataBatch* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& LOPQSearchRequest::data() const {
  // @@protoc_insertion_point(field_get:LOPQSearchRequest.data)
  return _internal_data();
}
inline void LOPQSearchRequest::unsafe_arena_set_allocated_data(
    ::DataBatch* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQSearchRequest.data)
}
inline ::DataBatch* LOPQSearchRequest::release_data() {
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* LOPQSearchRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:LOPQSearchRequest.data)
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DataBatch* LOPQSearchRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::DataBatch* LOPQSearchRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:LOPQSearchRequest.data)
  return _internal_mutable_data();
}
inline void LOPQSearchRequest::set_allocated_data(::DataBatch* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:LOPQSearchRequest.data)
}

// string sql_template = 3;
inline void LOPQSearchRequest::clear_sql_template() {
  sql_template_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQSearchRequest::sql_template() const {
  // @@protoc_insertion_point(field_get:LOPQSearchRequest.sql_template)
  return _internal_sql_template();
}
inline void LOPQSearchRequest::set_sql_template(const std::string& value) {
  _internal_set_sql_template(value);
  // @@protoc_insertion_point(field_set:LOPQSearchRequest.sql_template)
}
inline std::string* LOPQSearchRequest::mutable_sql_template() {
  // @@protoc_insertion_point(field_mutable:LOPQSearchRequest.sql_template)
  return _internal_mutable_sql_template();
}
inline const std::string& LOPQSearchRequest::_internal_sql_template() const {
  return sql_template_.Get();
}
inline void LOPQSearchRequest::_internal_set_sql_template(const std::string& value) {
  
  sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQSearchRequest::set_sql_template(std::string&& value) {
  
  sql_template_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQSearchRequest.sql_template)
}
inline void LOPQSearchRequest::set_sql_template(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQSearchRequest.sql_template)
}
inline void LOPQSearchRequest::set_sql_template(const char* value,
    size_t size) {
  
  sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQSearchRequest.sql_template)
}
inline std::string* LOPQSearchRequest::_internal_mutable_sql_template() {
  
  return sql_template_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQSearchRequest::release_sql_template() {
  // @@protoc_insertion_point(field_release:LOPQSearchRequest.sql_template)
  return sql_template_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQSearchRequest::set_allocated_sql_template(std::string* sql_template) {
  if (sql_template != nullptr) {
    
  } else {
    
  }
  sql_template_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sql_template,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQSearchRequest.sql_template)
}

// int32 k = 4;
inline void LOPQSearchRequest::clear_k() {
  k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQSearchRequest::_internal_k() const {
  return k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQSearchRequest::k() const {
  // @@protoc_insertion_point(field_get:LOPQSearchRequest.k)
  return _internal_k();
}
inline void LOPQSearchRequest::_internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  k_ = value;
}
inline void LOPQSearchRequest::set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:LOPQSearchRequest.k)
}

// int32 quota = 5;
inline void LOPQSearchRequest::clear_quota() {
  quota_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQSearchRequest::_internal_quota() const {
  return quota_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQSearchRequest::quota() const {
  // @@protoc_insertion_point(field_get:LOPQSearchRequest.quota)
  return _internal_quota();
}
inline void LOPQSearchRequest::_internal_set_quota(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quota_ = value;
}
inline void LOPQSearchRequest::set_quota(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quota(value);
  // @@protoc_insertion_point(field_set:LOPQSearchRequest.quota)
}

// int32 max_visited = 6;
inline void LOPQSearchRequest::clear_max_visited() {
  max_visited_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQSearchRequest::_internal_max_visited() const {
  return max_visited_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQSearchRequest::max_visited() const {
  // @@protoc_insertion_point(field_get:LOPQSearchRequest.max_visited)
  return _internal_max_visited();
}
inline void LOPQSearchRequest::_internal_set_max_visited(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_visited_ = value;
}
inline void LOPQSearchRequest::set_max_visited(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_visited(value);
  // @@protoc_insertion_point(field_set:LOPQSearchRequest.max_visited)
}

// string lopq_model_name = 7;
inline void LOPQSearchRequest::clear_lopq_model_name() {
  lopq_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQSearchRequest::lopq_model_name() const {
  // @@protoc_insertion_point(field_get:LOPQSearchRequest.lopq_model_name)
  return _internal_lopq_model_name();
}
inline void LOPQSearchRequest::set_lopq_model_name(const std::string& value) {
  _internal_set_lopq_model_name(value);
  // @@protoc_insertion_point(field_set:LOPQSearchRequest.lopq_model_name)
}
inline std::string* LOPQSearchRequest::mutable_lopq_model_name() {
  // @@protoc_insertion_point(field_mutable:LOPQSearchRequest.lopq_model_name)
  return _internal_mutable_lopq_model_name();
}
inline const std::string& LOPQSearchRequest::_internal_lopq_model_name() const {
  return lopq_model_name_.Get();
}
inline void LOPQSearchRequest::_internal_set_lopq_model_name(const std::string& value) {
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQSearchRequest::set_lopq_model_name(std::string&& value) {
  
  lopq_model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQSearchRequest.lopq_model_name)
}
inline void LOPQSearchRequest::set_lopq_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQSearchRequest.lopq_model_name)
}
inline void LOPQSearchRequest::set_lopq_model_name(const char* value,
    size_t size) {
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQSearchRequest.lopq_model_name)
}
inline std::string* LOPQSearchRequest::_internal_mutable_lopq_model_name() {
  
  return lopq_model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQSearchRequest::release_lopq_model_name() {
  // @@protoc_insertion_point(field_release:LOPQSearchRequest.lopq_model_name)
  return lopq_model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQSearchRequest::set_allocated_lopq_model_name(std::string* lopq_model_name) {
  if (lopq_model_name != nullptr) {
    
  } else {
    
  }
  lopq_model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lopq_model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQSearchRequest.lopq_model_name)
}

// bool weight_query = 8 [deprecated = true];
inline void LOPQSearchRequest::clear_weight_query() {
  weight_query_ = false;
}
inline bool LOPQSearchRequest::_internal_weight_query() const {
  return weight_query_;
}
inline bool LOPQSearchRequest::weight_query() const {
  // @@protoc_insertion_point(field_get:LOPQSearchRequest.weight_query)
  return _internal_weight_query();
}
inline void LOPQSearchRequest::_internal_set_weight_query(bool value) {
  
  weight_query_ = value;
}
inline void LOPQSearchRequest::set_weight_query(bool value) {
  _internal_set_weight_query(value);
  // @@protoc_insertion_point(field_set:LOPQSearchRequest.weight_query)
}

// string fallback_sql_template = 9;
inline void LOPQSearchRequest::clear_fallback_sql_template() {
  fallback_sql_template_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQSearchRequest::fallback_sql_template() const {
  // @@protoc_insertion_point(field_get:LOPQSearchRequest.fallback_sql_template)
  return _internal_fallback_sql_template();
}
inline void LOPQSearchRequest::set_fallback_sql_template(const std::string& value) {
  _internal_set_fallback_sql_template(value);
  // @@protoc_insertion_point(field_set:LOPQSearchRequest.fallback_sql_template)
}
inline std::string* LOPQSearchRequest::mutable_fallback_sql_template() {
  // @@protoc_insertion_point(field_mutable:LOPQSearchRequest.fallback_sql_template)
  return _internal_mutable_fallback_sql_template();
}
inline const std::string& LOPQSearchRequest::_internal_fallback_sql_template() const {
  return fallback_sql_template_.Get();
}
inline void LOPQSearchRequest::_internal_set_fallback_sql_template(const std::string& value) {
  
  fallback_sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQSearchRequest::set_fallback_sql_template(std::string&& value) {
  
  fallback_sql_template_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQSearchRequest.fallback_sql_template)
}
inline void LOPQSearchRequest::set_fallback_sql_template(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fallback_sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQSearchRequest.fallback_sql_template)
}
inline void LOPQSearchRequest::set_fallback_sql_template(const char* value,
    size_t size) {
  
  fallback_sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQSearchRequest.fallback_sql_template)
}
inline std::string* LOPQSearchRequest::_internal_mutable_fallback_sql_template() {
  
  return fallback_sql_template_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQSearchRequest::release_fallback_sql_template() {
  // @@protoc_insertion_point(field_release:LOPQSearchRequest.fallback_sql_template)
  return fallback_sql_template_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQSearchRequest::set_allocated_fallback_sql_template(std::string* fallback_sql_template) {
  if (fallback_sql_template != nullptr) {
    
  } else {
    
  }
  fallback_sql_template_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fallback_sql_template,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQSearchRequest.fallback_sql_template)
}

// string custom_model_name = 10;
inline void LOPQSearchRequest::clear_custom_model_name() {
  custom_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQSearchRequest::custom_model_name() const {
  // @@protoc_insertion_point(field_get:LOPQSearchRequest.custom_model_name)
  return _internal_custom_model_name();
}
inline void LOPQSearchRequest::set_custom_model_name(const std::string& value) {
  _internal_set_custom_model_name(value);
  // @@protoc_insertion_point(field_set:LOPQSearchRequest.custom_model_name)
}
inline std::string* LOPQSearchRequest::mutable_custom_model_name() {
  // @@protoc_insertion_point(field_mutable:LOPQSearchRequest.custom_model_name)
  return _internal_mutable_custom_model_name();
}
inline const std::string& LOPQSearchRequest::_internal_custom_model_name() const {
  return custom_model_name_.Get();
}
inline void LOPQSearchRequest::_internal_set_custom_model_name(const std::string& value) {
  
  custom_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQSearchRequest::set_custom_model_name(std::string&& value) {
  
  custom_model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQSearchRequest.custom_model_name)
}
inline void LOPQSearchRequest::set_custom_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQSearchRequest.custom_model_name)
}
inline void LOPQSearchRequest::set_custom_model_name(const char* value,
    size_t size) {
  
  custom_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQSearchRequest.custom_model_name)
}
inline std::string* LOPQSearchRequest::_internal_mutable_custom_model_name() {
  
  return custom_model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQSearchRequest::release_custom_model_name() {
  // @@protoc_insertion_point(field_release:LOPQSearchRequest.custom_model_name)
  return custom_model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQSearchRequest::set_allocated_custom_model_name(std::string* custom_model_name) {
  if (custom_model_name != nullptr) {
    
  } else {
    
  }
  custom_model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQSearchRequest.custom_model_name)
}

// repeated string positive_aiids = 11;
inline int LOPQSearchRequest::_internal_positive_aiids_size() const {
  return positive_aiids_.size();
}
inline int LOPQSearchRequest::positive_aiids_size() const {
  return _internal_positive_aiids_size();
}
inline void LOPQSearchRequest::clear_positive_aiids() {
  positive_aiids_.Clear();
}
inline std::string* LOPQSearchRequest::add_positive_aiids() {
  // @@protoc_insertion_point(field_add_mutable:LOPQSearchRequest.positive_aiids)
  return _internal_add_positive_aiids();
}
inline const std::string& LOPQSearchRequest::_internal_positive_aiids(int index) const {
  return positive_aiids_.Get(index);
}
inline const std::string& LOPQSearchRequest::positive_aiids(int index) const {
  // @@protoc_insertion_point(field_get:LOPQSearchRequest.positive_aiids)
  return _internal_positive_aiids(index);
}
inline std::string* LOPQSearchRequest::mutable_positive_aiids(int index) {
  // @@protoc_insertion_point(field_mutable:LOPQSearchRequest.positive_aiids)
  return positive_aiids_.Mutable(index);
}
inline void LOPQSearchRequest::set_positive_aiids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:LOPQSearchRequest.positive_aiids)
  positive_aiids_.Mutable(index)->assign(value);
}
inline void LOPQSearchRequest::set_positive_aiids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:LOPQSearchRequest.positive_aiids)
  positive_aiids_.Mutable(index)->assign(std::move(value));
}
inline void LOPQSearchRequest::set_positive_aiids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  positive_aiids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LOPQSearchRequest.positive_aiids)
}
inline void LOPQSearchRequest::set_positive_aiids(int index, const char* value, size_t size) {
  positive_aiids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LOPQSearchRequest.positive_aiids)
}
inline std::string* LOPQSearchRequest::_internal_add_positive_aiids() {
  return positive_aiids_.Add();
}
inline void LOPQSearchRequest::add_positive_aiids(const std::string& value) {
  positive_aiids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LOPQSearchRequest.positive_aiids)
}
inline void LOPQSearchRequest::add_positive_aiids(std::string&& value) {
  positive_aiids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:LOPQSearchRequest.positive_aiids)
}
inline void LOPQSearchRequest::add_positive_aiids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  positive_aiids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LOPQSearchRequest.positive_aiids)
}
inline void LOPQSearchRequest::add_positive_aiids(const char* value, size_t size) {
  positive_aiids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LOPQSearchRequest.positive_aiids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LOPQSearchRequest::positive_aiids() const {
  // @@protoc_insertion_point(field_list:LOPQSearchRequest.positive_aiids)
  return positive_aiids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LOPQSearchRequest::mutable_positive_aiids() {
  // @@protoc_insertion_point(field_mutable_list:LOPQSearchRequest.positive_aiids)
  return &positive_aiids_;
}

// repeated string negative_aiids = 12;
inline int LOPQSearchRequest::_internal_negative_aiids_size() const {
  return negative_aiids_.size();
}
inline int LOPQSearchRequest::negative_aiids_size() const {
  return _internal_negative_aiids_size();
}
inline void LOPQSearchRequest::clear_negative_aiids() {
  negative_aiids_.Clear();
}
inline std::string* LOPQSearchRequest::add_negative_aiids() {
  // @@protoc_insertion_point(field_add_mutable:LOPQSearchRequest.negative_aiids)
  return _internal_add_negative_aiids();
}
inline const std::string& LOPQSearchRequest::_internal_negative_aiids(int index) const {
  return negative_aiids_.Get(index);
}
inline const std::string& LOPQSearchRequest::negative_aiids(int index) const {
  // @@protoc_insertion_point(field_get:LOPQSearchRequest.negative_aiids)
  return _internal_negative_aiids(index);
}
inline std::string* LOPQSearchRequest::mutable_negative_aiids(int index) {
  // @@protoc_insertion_point(field_mutable:LOPQSearchRequest.negative_aiids)
  return negative_aiids_.Mutable(index);
}
inline void LOPQSearchRequest::set_negative_aiids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:LOPQSearchRequest.negative_aiids)
  negative_aiids_.Mutable(index)->assign(value);
}
inline void LOPQSearchRequest::set_negative_aiids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:LOPQSearchRequest.negative_aiids)
  negative_aiids_.Mutable(index)->assign(std::move(value));
}
inline void LOPQSearchRequest::set_negative_aiids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  negative_aiids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LOPQSearchRequest.negative_aiids)
}
inline void LOPQSearchRequest::set_negative_aiids(int index, const char* value, size_t size) {
  negative_aiids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LOPQSearchRequest.negative_aiids)
}
inline std::string* LOPQSearchRequest::_internal_add_negative_aiids() {
  return negative_aiids_.Add();
}
inline void LOPQSearchRequest::add_negative_aiids(const std::string& value) {
  negative_aiids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LOPQSearchRequest.negative_aiids)
}
inline void LOPQSearchRequest::add_negative_aiids(std::string&& value) {
  negative_aiids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:LOPQSearchRequest.negative_aiids)
}
inline void LOPQSearchRequest::add_negative_aiids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  negative_aiids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LOPQSearchRequest.negative_aiids)
}
inline void LOPQSearchRequest::add_negative_aiids(const char* value, size_t size) {
  negative_aiids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LOPQSearchRequest.negative_aiids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LOPQSearchRequest::negative_aiids() const {
  // @@protoc_insertion_point(field_list:LOPQSearchRequest.negative_aiids)
  return negative_aiids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LOPQSearchRequest::mutable_negative_aiids() {
  // @@protoc_insertion_point(field_mutable_list:LOPQSearchRequest.negative_aiids)
  return &negative_aiids_;
}

// -------------------------------------------------------------------

// ConceptOverride

// string id = 1;
inline void ConceptOverride::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptOverride::id() const {
  // @@protoc_insertion_point(field_get:ConceptOverride.id)
  return _internal_id();
}
inline void ConceptOverride::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ConceptOverride.id)
}
inline std::string* ConceptOverride::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ConceptOverride.id)
  return _internal_mutable_id();
}
inline const std::string& ConceptOverride::_internal_id() const {
  return id_.Get();
}
inline void ConceptOverride::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptOverride::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConceptOverride.id)
}
inline void ConceptOverride::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConceptOverride.id)
}
inline void ConceptOverride::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConceptOverride.id)
}
inline std::string* ConceptOverride::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptOverride::release_id() {
  // @@protoc_insertion_point(field_release:ConceptOverride.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptOverride::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConceptOverride.id)
}

// string name = 2;
inline void ConceptOverride::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConceptOverride::name() const {
  // @@protoc_insertion_point(field_get:ConceptOverride.name)
  return _internal_name();
}
inline void ConceptOverride::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ConceptOverride.name)
}
inline std::string* ConceptOverride::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ConceptOverride.name)
  return _internal_mutable_name();
}
inline const std::string& ConceptOverride::_internal_name() const {
  return name_.Get();
}
inline void ConceptOverride::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConceptOverride::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConceptOverride.name)
}
inline void ConceptOverride::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConceptOverride.name)
}
inline void ConceptOverride::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConceptOverride.name)
}
inline std::string* ConceptOverride::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConceptOverride::release_name() {
  // @@protoc_insertion_point(field_release:ConceptOverride.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConceptOverride::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConceptOverride.name)
}

// float value = 3;
inline void ConceptOverride::clear_value() {
  value_ = 0;
}
inline float ConceptOverride::_internal_value() const {
  return value_;
}
inline float ConceptOverride::value() const {
  // @@protoc_insertion_point(field_get:ConceptOverride.value)
  return _internal_value();
}
inline void ConceptOverride::_internal_set_value(float value) {
  
  value_ = value;
}
inline void ConceptOverride::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ConceptOverride.value)
}

// -------------------------------------------------------------------

// AttributeMixIn

// string model_version_id = 1;
inline void AttributeMixIn::clear_model_version_id() {
  model_version_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AttributeMixIn::model_version_id() const {
  // @@protoc_insertion_point(field_get:AttributeMixIn.model_version_id)
  return _internal_model_version_id();
}
inline void AttributeMixIn::set_model_version_id(const std::string& value) {
  _internal_set_model_version_id(value);
  // @@protoc_insertion_point(field_set:AttributeMixIn.model_version_id)
}
inline std::string* AttributeMixIn::mutable_model_version_id() {
  // @@protoc_insertion_point(field_mutable:AttributeMixIn.model_version_id)
  return _internal_mutable_model_version_id();
}
inline const std::string& AttributeMixIn::_internal_model_version_id() const {
  return model_version_id_.Get();
}
inline void AttributeMixIn::_internal_set_model_version_id(const std::string& value) {
  
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AttributeMixIn::set_model_version_id(std::string&& value) {
  
  model_version_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AttributeMixIn.model_version_id)
}
inline void AttributeMixIn::set_model_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AttributeMixIn.model_version_id)
}
inline void AttributeMixIn::set_model_version_id(const char* value,
    size_t size) {
  
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AttributeMixIn.model_version_id)
}
inline std::string* AttributeMixIn::_internal_mutable_model_version_id() {
  
  return model_version_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AttributeMixIn::release_model_version_id() {
  // @@protoc_insertion_point(field_release:AttributeMixIn.model_version_id)
  return model_version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeMixIn::set_allocated_model_version_id(std::string* model_version_id) {
  if (model_version_id != nullptr) {
    
  } else {
    
  }
  model_version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AttributeMixIn.model_version_id)
}

// float mix_in_coefficient = 2;
inline void AttributeMixIn::clear_mix_in_coefficient() {
  mix_in_coefficient_ = 0;
}
inline float AttributeMixIn::_internal_mix_in_coefficient() const {
  return mix_in_coefficient_;
}
inline float AttributeMixIn::mix_in_coefficient() const {
  // @@protoc_insertion_point(field_get:AttributeMixIn.mix_in_coefficient)
  return _internal_mix_in_coefficient();
}
inline void AttributeMixIn::_internal_set_mix_in_coefficient(float value) {
  
  mix_in_coefficient_ = value;
}
inline void AttributeMixIn::set_mix_in_coefficient(float value) {
  _internal_set_mix_in_coefficient(value);
  // @@protoc_insertion_point(field_set:AttributeMixIn.mix_in_coefficient)
}

// .ConceptOverride concept_override = 3;
inline bool AttributeMixIn::_internal_has_concept_override() const {
  return this != internal_default_instance() && concept_override_ != nullptr;
}
inline bool AttributeMixIn::has_concept_override() const {
  return _internal_has_concept_override();
}
inline void AttributeMixIn::clear_concept_override() {
  if (GetArena() == nullptr && concept_override_ != nullptr) {
    delete concept_override_;
  }
  concept_override_ = nullptr;
}
inline const ::ConceptOverride& AttributeMixIn::_internal_concept_override() const {
  const ::ConceptOverride* p = concept_override_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ConceptOverride*>(
      &::_ConceptOverride_default_instance_);
}
inline const ::ConceptOverride& AttributeMixIn::concept_override() const {
  // @@protoc_insertion_point(field_get:AttributeMixIn.concept_override)
  return _internal_concept_override();
}
inline void AttributeMixIn::unsafe_arena_set_allocated_concept_override(
    ::ConceptOverride* concept_override) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_override_);
  }
  concept_override_ = concept_override;
  if (concept_override) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AttributeMixIn.concept_override)
}
inline ::ConceptOverride* AttributeMixIn::release_concept_override() {
  
  ::ConceptOverride* temp = concept_override_;
  concept_override_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ConceptOverride* AttributeMixIn::unsafe_arena_release_concept_override() {
  // @@protoc_insertion_point(field_release:AttributeMixIn.concept_override)
  
  ::ConceptOverride* temp = concept_override_;
  concept_override_ = nullptr;
  return temp;
}
inline ::ConceptOverride* AttributeMixIn::_internal_mutable_concept_override() {
  
  if (concept_override_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConceptOverride>(GetArena());
    concept_override_ = p;
  }
  return concept_override_;
}
inline ::ConceptOverride* AttributeMixIn::mutable_concept_override() {
  // @@protoc_insertion_point(field_mutable:AttributeMixIn.concept_override)
  return _internal_mutable_concept_override();
}
inline void AttributeMixIn::set_allocated_concept_override(::ConceptOverride* concept_override) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete concept_override_;
  }
  if (concept_override) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(concept_override);
    if (message_arena != submessage_arena) {
      concept_override = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept_override, submessage_arena);
    }
    
  } else {
    
  }
  concept_override_ = concept_override;
  // @@protoc_insertion_point(field_set_allocated:AttributeMixIn.concept_override)
}

// -------------------------------------------------------------------

// LOPQAttributeSearchRequest

// .RequestMeta meta = 1;
inline bool LOPQAttributeSearchRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool LOPQAttributeSearchRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& LOPQAttributeSearchRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& LOPQAttributeSearchRequest::meta() const {
  // @@protoc_insertion_point(field_get:LOPQAttributeSearchRequest.meta)
  return _internal_meta();
}
inline void LOPQAttributeSearchRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQAttributeSearchRequest.meta)
}
inline ::RequestMeta* LOPQAttributeSearchRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* LOPQAttributeSearchRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:LOPQAttributeSearchRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* LOPQAttributeSearchRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* LOPQAttributeSearchRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:LOPQAttributeSearchRequest.meta)
  return _internal_mutable_meta();
}
inline void LOPQAttributeSearchRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:LOPQAttributeSearchRequest.meta)
}

// .DataBatch data = 2;
inline bool LOPQAttributeSearchRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool LOPQAttributeSearchRequest::has_data() const {
  return _internal_has_data();
}
inline const ::DataBatch& LOPQAttributeSearchRequest::_internal_data() const {
  const ::DataBatch* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& LOPQAttributeSearchRequest::data() const {
  // @@protoc_insertion_point(field_get:LOPQAttributeSearchRequest.data)
  return _internal_data();
}
inline void LOPQAttributeSearchRequest::unsafe_arena_set_allocated_data(
    ::DataBatch* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQAttributeSearchRequest.data)
}
inline ::DataBatch* LOPQAttributeSearchRequest::release_data() {
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* LOPQAttributeSearchRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:LOPQAttributeSearchRequest.data)
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DataBatch* LOPQAttributeSearchRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::DataBatch* LOPQAttributeSearchRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:LOPQAttributeSearchRequest.data)
  return _internal_mutable_data();
}
inline void LOPQAttributeSearchRequest::set_allocated_data(::DataBatch* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:LOPQAttributeSearchRequest.data)
}

// string sql_template = 3;
inline void LOPQAttributeSearchRequest::clear_sql_template() {
  sql_template_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQAttributeSearchRequest::sql_template() const {
  // @@protoc_insertion_point(field_get:LOPQAttributeSearchRequest.sql_template)
  return _internal_sql_template();
}
inline void LOPQAttributeSearchRequest::set_sql_template(const std::string& value) {
  _internal_set_sql_template(value);
  // @@protoc_insertion_point(field_set:LOPQAttributeSearchRequest.sql_template)
}
inline std::string* LOPQAttributeSearchRequest::mutable_sql_template() {
  // @@protoc_insertion_point(field_mutable:LOPQAttributeSearchRequest.sql_template)
  return _internal_mutable_sql_template();
}
inline const std::string& LOPQAttributeSearchRequest::_internal_sql_template() const {
  return sql_template_.Get();
}
inline void LOPQAttributeSearchRequest::_internal_set_sql_template(const std::string& value) {
  
  sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQAttributeSearchRequest::set_sql_template(std::string&& value) {
  
  sql_template_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQAttributeSearchRequest.sql_template)
}
inline void LOPQAttributeSearchRequest::set_sql_template(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQAttributeSearchRequest.sql_template)
}
inline void LOPQAttributeSearchRequest::set_sql_template(const char* value,
    size_t size) {
  
  sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQAttributeSearchRequest.sql_template)
}
inline std::string* LOPQAttributeSearchRequest::_internal_mutable_sql_template() {
  
  return sql_template_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQAttributeSearchRequest::release_sql_template() {
  // @@protoc_insertion_point(field_release:LOPQAttributeSearchRequest.sql_template)
  return sql_template_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQAttributeSearchRequest::set_allocated_sql_template(std::string* sql_template) {
  if (sql_template != nullptr) {
    
  } else {
    
  }
  sql_template_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sql_template,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQAttributeSearchRequest.sql_template)
}

// int32 k = 4;
inline void LOPQAttributeSearchRequest::clear_k() {
  k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQAttributeSearchRequest::_internal_k() const {
  return k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQAttributeSearchRequest::k() const {
  // @@protoc_insertion_point(field_get:LOPQAttributeSearchRequest.k)
  return _internal_k();
}
inline void LOPQAttributeSearchRequest::_internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  k_ = value;
}
inline void LOPQAttributeSearchRequest::set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:LOPQAttributeSearchRequest.k)
}

// int32 quota = 5;
inline void LOPQAttributeSearchRequest::clear_quota() {
  quota_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQAttributeSearchRequest::_internal_quota() const {
  return quota_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQAttributeSearchRequest::quota() const {
  // @@protoc_insertion_point(field_get:LOPQAttributeSearchRequest.quota)
  return _internal_quota();
}
inline void LOPQAttributeSearchRequest::_internal_set_quota(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quota_ = value;
}
inline void LOPQAttributeSearchRequest::set_quota(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quota(value);
  // @@protoc_insertion_point(field_set:LOPQAttributeSearchRequest.quota)
}

// int32 max_visited = 6;
inline void LOPQAttributeSearchRequest::clear_max_visited() {
  max_visited_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQAttributeSearchRequest::_internal_max_visited() const {
  return max_visited_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQAttributeSearchRequest::max_visited() const {
  // @@protoc_insertion_point(field_get:LOPQAttributeSearchRequest.max_visited)
  return _internal_max_visited();
}
inline void LOPQAttributeSearchRequest::_internal_set_max_visited(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_visited_ = value;
}
inline void LOPQAttributeSearchRequest::set_max_visited(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_visited(value);
  // @@protoc_insertion_point(field_set:LOPQAttributeSearchRequest.max_visited)
}

// string lopq_model_name = 7;
inline void LOPQAttributeSearchRequest::clear_lopq_model_name() {
  lopq_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQAttributeSearchRequest::lopq_model_name() const {
  // @@protoc_insertion_point(field_get:LOPQAttributeSearchRequest.lopq_model_name)
  return _internal_lopq_model_name();
}
inline void LOPQAttributeSearchRequest::set_lopq_model_name(const std::string& value) {
  _internal_set_lopq_model_name(value);
  // @@protoc_insertion_point(field_set:LOPQAttributeSearchRequest.lopq_model_name)
}
inline std::string* LOPQAttributeSearchRequest::mutable_lopq_model_name() {
  // @@protoc_insertion_point(field_mutable:LOPQAttributeSearchRequest.lopq_model_name)
  return _internal_mutable_lopq_model_name();
}
inline const std::string& LOPQAttributeSearchRequest::_internal_lopq_model_name() const {
  return lopq_model_name_.Get();
}
inline void LOPQAttributeSearchRequest::_internal_set_lopq_model_name(const std::string& value) {
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQAttributeSearchRequest::set_lopq_model_name(std::string&& value) {
  
  lopq_model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQAttributeSearchRequest.lopq_model_name)
}
inline void LOPQAttributeSearchRequest::set_lopq_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQAttributeSearchRequest.lopq_model_name)
}
inline void LOPQAttributeSearchRequest::set_lopq_model_name(const char* value,
    size_t size) {
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQAttributeSearchRequest.lopq_model_name)
}
inline std::string* LOPQAttributeSearchRequest::_internal_mutable_lopq_model_name() {
  
  return lopq_model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQAttributeSearchRequest::release_lopq_model_name() {
  // @@protoc_insertion_point(field_release:LOPQAttributeSearchRequest.lopq_model_name)
  return lopq_model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQAttributeSearchRequest::set_allocated_lopq_model_name(std::string* lopq_model_name) {
  if (lopq_model_name != nullptr) {
    
  } else {
    
  }
  lopq_model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lopq_model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQAttributeSearchRequest.lopq_model_name)
}

// string fallback_sql_template = 8;
inline void LOPQAttributeSearchRequest::clear_fallback_sql_template() {
  fallback_sql_template_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQAttributeSearchRequest::fallback_sql_template() const {
  // @@protoc_insertion_point(field_get:LOPQAttributeSearchRequest.fallback_sql_template)
  return _internal_fallback_sql_template();
}
inline void LOPQAttributeSearchRequest::set_fallback_sql_template(const std::string& value) {
  _internal_set_fallback_sql_template(value);
  // @@protoc_insertion_point(field_set:LOPQAttributeSearchRequest.fallback_sql_template)
}
inline std::string* LOPQAttributeSearchRequest::mutable_fallback_sql_template() {
  // @@protoc_insertion_point(field_mutable:LOPQAttributeSearchRequest.fallback_sql_template)
  return _internal_mutable_fallback_sql_template();
}
inline const std::string& LOPQAttributeSearchRequest::_internal_fallback_sql_template() const {
  return fallback_sql_template_.Get();
}
inline void LOPQAttributeSearchRequest::_internal_set_fallback_sql_template(const std::string& value) {
  
  fallback_sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQAttributeSearchRequest::set_fallback_sql_template(std::string&& value) {
  
  fallback_sql_template_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQAttributeSearchRequest.fallback_sql_template)
}
inline void LOPQAttributeSearchRequest::set_fallback_sql_template(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fallback_sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQAttributeSearchRequest.fallback_sql_template)
}
inline void LOPQAttributeSearchRequest::set_fallback_sql_template(const char* value,
    size_t size) {
  
  fallback_sql_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQAttributeSearchRequest.fallback_sql_template)
}
inline std::string* LOPQAttributeSearchRequest::_internal_mutable_fallback_sql_template() {
  
  return fallback_sql_template_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQAttributeSearchRequest::release_fallback_sql_template() {
  // @@protoc_insertion_point(field_release:LOPQAttributeSearchRequest.fallback_sql_template)
  return fallback_sql_template_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQAttributeSearchRequest::set_allocated_fallback_sql_template(std::string* fallback_sql_template) {
  if (fallback_sql_template != nullptr) {
    
  } else {
    
  }
  fallback_sql_template_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fallback_sql_template,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQAttributeSearchRequest.fallback_sql_template)
}

// repeated .AttributeMixIn attribute_mix_in = 9;
inline int LOPQAttributeSearchRequest::_internal_attribute_mix_in_size() const {
  return attribute_mix_in_.size();
}
inline int LOPQAttributeSearchRequest::attribute_mix_in_size() const {
  return _internal_attribute_mix_in_size();
}
inline void LOPQAttributeSearchRequest::clear_attribute_mix_in() {
  attribute_mix_in_.Clear();
}
inline ::AttributeMixIn* LOPQAttributeSearchRequest::mutable_attribute_mix_in(int index) {
  // @@protoc_insertion_point(field_mutable:LOPQAttributeSearchRequest.attribute_mix_in)
  return attribute_mix_in_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AttributeMixIn >*
LOPQAttributeSearchRequest::mutable_attribute_mix_in() {
  // @@protoc_insertion_point(field_mutable_list:LOPQAttributeSearchRequest.attribute_mix_in)
  return &attribute_mix_in_;
}
inline const ::AttributeMixIn& LOPQAttributeSearchRequest::_internal_attribute_mix_in(int index) const {
  return attribute_mix_in_.Get(index);
}
inline const ::AttributeMixIn& LOPQAttributeSearchRequest::attribute_mix_in(int index) const {
  // @@protoc_insertion_point(field_get:LOPQAttributeSearchRequest.attribute_mix_in)
  return _internal_attribute_mix_in(index);
}
inline ::AttributeMixIn* LOPQAttributeSearchRequest::_internal_add_attribute_mix_in() {
  return attribute_mix_in_.Add();
}
inline ::AttributeMixIn* LOPQAttributeSearchRequest::add_attribute_mix_in() {
  // @@protoc_insertion_point(field_add:LOPQAttributeSearchRequest.attribute_mix_in)
  return _internal_add_attribute_mix_in();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AttributeMixIn >&
LOPQAttributeSearchRequest::attribute_mix_in() const {
  // @@protoc_insertion_point(field_list:LOPQAttributeSearchRequest.attribute_mix_in)
  return attribute_mix_in_;
}

// -------------------------------------------------------------------

// LOPQSearchResult

// string asset_id = 1;
inline void LOPQSearchResult::clear_asset_id() {
  asset_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQSearchResult::asset_id() const {
  // @@protoc_insertion_point(field_get:LOPQSearchResult.asset_id)
  return _internal_asset_id();
}
inline void LOPQSearchResult::set_asset_id(const std::string& value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:LOPQSearchResult.asset_id)
}
inline std::string* LOPQSearchResult::mutable_asset_id() {
  // @@protoc_insertion_point(field_mutable:LOPQSearchResult.asset_id)
  return _internal_mutable_asset_id();
}
inline const std::string& LOPQSearchResult::_internal_asset_id() const {
  return asset_id_.Get();
}
inline void LOPQSearchResult::_internal_set_asset_id(const std::string& value) {
  
  asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQSearchResult::set_asset_id(std::string&& value) {
  
  asset_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQSearchResult.asset_id)
}
inline void LOPQSearchResult::set_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQSearchResult.asset_id)
}
inline void LOPQSearchResult::set_asset_id(const char* value,
    size_t size) {
  
  asset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQSearchResult.asset_id)
}
inline std::string* LOPQSearchResult::_internal_mutable_asset_id() {
  
  return asset_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQSearchResult::release_asset_id() {
  // @@protoc_insertion_point(field_release:LOPQSearchResult.asset_id)
  return asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQSearchResult::set_allocated_asset_id(std::string* asset_id) {
  if (asset_id != nullptr) {
    
  } else {
    
  }
  asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQSearchResult.asset_id)
}

// string annotation_id = 4;
inline void LOPQSearchResult::clear_annotation_id() {
  annotation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQSearchResult::annotation_id() const {
  // @@protoc_insertion_point(field_get:LOPQSearchResult.annotation_id)
  return _internal_annotation_id();
}
inline void LOPQSearchResult::set_annotation_id(const std::string& value) {
  _internal_set_annotation_id(value);
  // @@protoc_insertion_point(field_set:LOPQSearchResult.annotation_id)
}
inline std::string* LOPQSearchResult::mutable_annotation_id() {
  // @@protoc_insertion_point(field_mutable:LOPQSearchResult.annotation_id)
  return _internal_mutable_annotation_id();
}
inline const std::string& LOPQSearchResult::_internal_annotation_id() const {
  return annotation_id_.Get();
}
inline void LOPQSearchResult::_internal_set_annotation_id(const std::string& value) {
  
  annotation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQSearchResult::set_annotation_id(std::string&& value) {
  
  annotation_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQSearchResult.annotation_id)
}
inline void LOPQSearchResult::set_annotation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  annotation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQSearchResult.annotation_id)
}
inline void LOPQSearchResult::set_annotation_id(const char* value,
    size_t size) {
  
  annotation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQSearchResult.annotation_id)
}
inline std::string* LOPQSearchResult::_internal_mutable_annotation_id() {
  
  return annotation_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQSearchResult::release_annotation_id() {
  // @@protoc_insertion_point(field_release:LOPQSearchResult.annotation_id)
  return annotation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQSearchResult::set_allocated_annotation_id(std::string* annotation_id) {
  if (annotation_id != nullptr) {
    
  } else {
    
  }
  annotation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), annotation_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQSearchResult.annotation_id)
}

// float score = 2;
inline void LOPQSearchResult::clear_score() {
  score_ = 0;
}
inline float LOPQSearchResult::_internal_score() const {
  return score_;
}
inline float LOPQSearchResult::score() const {
  // @@protoc_insertion_point(field_get:LOPQSearchResult.score)
  return _internal_score();
}
inline void LOPQSearchResult::_internal_set_score(float value) {
  
  score_ = value;
}
inline void LOPQSearchResult::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:LOPQSearchResult.score)
}

// float distance = 3;
inline void LOPQSearchResult::clear_distance() {
  distance_ = 0;
}
inline float LOPQSearchResult::_internal_distance() const {
  return distance_;
}
inline float LOPQSearchResult::distance() const {
  // @@protoc_insertion_point(field_get:LOPQSearchResult.distance)
  return _internal_distance();
}
inline void LOPQSearchResult::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void LOPQSearchResult::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:LOPQSearchResult.distance)
}

// .LOPQCode code = 5;
inline bool LOPQSearchResult::_internal_has_code() const {
  return this != internal_default_instance() && code_ != nullptr;
}
inline bool LOPQSearchResult::has_code() const {
  return _internal_has_code();
}
inline const ::LOPQCode& LOPQSearchResult::_internal_code() const {
  const ::LOPQCode* p = code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LOPQCode*>(
      &::_LOPQCode_default_instance_);
}
inline const ::LOPQCode& LOPQSearchResult::code() const {
  // @@protoc_insertion_point(field_get:LOPQSearchResult.code)
  return _internal_code();
}
inline void LOPQSearchResult::unsafe_arena_set_allocated_code(
    ::LOPQCode* code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(code_);
  }
  code_ = code;
  if (code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQSearchResult.code)
}
inline ::LOPQCode* LOPQSearchResult::release_code() {
  
  ::LOPQCode* temp = code_;
  code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LOPQCode* LOPQSearchResult::unsafe_arena_release_code() {
  // @@protoc_insertion_point(field_release:LOPQSearchResult.code)
  
  ::LOPQCode* temp = code_;
  code_ = nullptr;
  return temp;
}
inline ::LOPQCode* LOPQSearchResult::_internal_mutable_code() {
  
  if (code_ == nullptr) {
    auto* p = CreateMaybeMessage<::LOPQCode>(GetArena());
    code_ = p;
  }
  return code_;
}
inline ::LOPQCode* LOPQSearchResult::mutable_code() {
  // @@protoc_insertion_point(field_mutable:LOPQSearchResult.code)
  return _internal_mutable_code();
}
inline void LOPQSearchResult::set_allocated_code(::LOPQCode* code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(code_);
  }
  if (code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(code)->GetArena();
    if (message_arena != submessage_arena) {
      code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:LOPQSearchResult.code)
}

// -------------------------------------------------------------------

// LOPQSearchResponse

// .ResponseStatus status = 1;
inline bool LOPQSearchResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool LOPQSearchResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& LOPQSearchResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& LOPQSearchResponse::status() const {
  // @@protoc_insertion_point(field_get:LOPQSearchResponse.status)
  return _internal_status();
}
inline void LOPQSearchResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQSearchResponse.status)
}
inline ::ResponseStatus* LOPQSearchResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* LOPQSearchResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:LOPQSearchResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* LOPQSearchResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* LOPQSearchResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:LOPQSearchResponse.status)
  return _internal_mutable_status();
}
inline void LOPQSearchResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:LOPQSearchResponse.status)
}

// repeated .LOPQSearchResult result = 2;
inline int LOPQSearchResponse::_internal_result_size() const {
  return result_.size();
}
inline int LOPQSearchResponse::result_size() const {
  return _internal_result_size();
}
inline void LOPQSearchResponse::clear_result() {
  result_.Clear();
}
inline ::LOPQSearchResult* LOPQSearchResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:LOPQSearchResponse.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQSearchResult >*
LOPQSearchResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:LOPQSearchResponse.result)
  return &result_;
}
inline const ::LOPQSearchResult& LOPQSearchResponse::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::LOPQSearchResult& LOPQSearchResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:LOPQSearchResponse.result)
  return _internal_result(index);
}
inline ::LOPQSearchResult* LOPQSearchResponse::_internal_add_result() {
  return result_.Add();
}
inline ::LOPQSearchResult* LOPQSearchResponse::add_result() {
  // @@protoc_insertion_point(field_add:LOPQSearchResponse.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQSearchResult >&
LOPQSearchResponse::result() const {
  // @@protoc_insertion_point(field_list:LOPQSearchResponse.result)
  return result_;
}

// -------------------------------------------------------------------

// LOPQSearchForCodesRequest

// .RequestMeta meta = 1;
inline bool LOPQSearchForCodesRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool LOPQSearchForCodesRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& LOPQSearchForCodesRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& LOPQSearchForCodesRequest::meta() const {
  // @@protoc_insertion_point(field_get:LOPQSearchForCodesRequest.meta)
  return _internal_meta();
}
inline void LOPQSearchForCodesRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQSearchForCodesRequest.meta)
}
inline ::RequestMeta* LOPQSearchForCodesRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* LOPQSearchForCodesRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:LOPQSearchForCodesRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* LOPQSearchForCodesRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* LOPQSearchForCodesRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:LOPQSearchForCodesRequest.meta)
  return _internal_mutable_meta();
}
inline void LOPQSearchForCodesRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:LOPQSearchForCodesRequest.meta)
}

// .DataBatch data = 2;
inline bool LOPQSearchForCodesRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool LOPQSearchForCodesRequest::has_data() const {
  return _internal_has_data();
}
inline const ::DataBatch& LOPQSearchForCodesRequest::_internal_data() const {
  const ::DataBatch* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& LOPQSearchForCodesRequest::data() const {
  // @@protoc_insertion_point(field_get:LOPQSearchForCodesRequest.data)
  return _internal_data();
}
inline void LOPQSearchForCodesRequest::unsafe_arena_set_allocated_data(
    ::DataBatch* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQSearchForCodesRequest.data)
}
inline ::DataBatch* LOPQSearchForCodesRequest::release_data() {
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* LOPQSearchForCodesRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:LOPQSearchForCodesRequest.data)
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DataBatch* LOPQSearchForCodesRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::DataBatch* LOPQSearchForCodesRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:LOPQSearchForCodesRequest.data)
  return _internal_mutable_data();
}
inline void LOPQSearchForCodesRequest::set_allocated_data(::DataBatch* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:LOPQSearchForCodesRequest.data)
}

// int32 max_visited = 3;
inline void LOPQSearchForCodesRequest::clear_max_visited() {
  max_visited_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQSearchForCodesRequest::_internal_max_visited() const {
  return max_visited_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQSearchForCodesRequest::max_visited() const {
  // @@protoc_insertion_point(field_get:LOPQSearchForCodesRequest.max_visited)
  return _internal_max_visited();
}
inline void LOPQSearchForCodesRequest::_internal_set_max_visited(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_visited_ = value;
}
inline void LOPQSearchForCodesRequest::set_max_visited(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_visited(value);
  // @@protoc_insertion_point(field_set:LOPQSearchForCodesRequest.max_visited)
}

// string lopq_model_name = 4;
inline void LOPQSearchForCodesRequest::clear_lopq_model_name() {
  lopq_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQSearchForCodesRequest::lopq_model_name() const {
  // @@protoc_insertion_point(field_get:LOPQSearchForCodesRequest.lopq_model_name)
  return _internal_lopq_model_name();
}
inline void LOPQSearchForCodesRequest::set_lopq_model_name(const std::string& value) {
  _internal_set_lopq_model_name(value);
  // @@protoc_insertion_point(field_set:LOPQSearchForCodesRequest.lopq_model_name)
}
inline std::string* LOPQSearchForCodesRequest::mutable_lopq_model_name() {
  // @@protoc_insertion_point(field_mutable:LOPQSearchForCodesRequest.lopq_model_name)
  return _internal_mutable_lopq_model_name();
}
inline const std::string& LOPQSearchForCodesRequest::_internal_lopq_model_name() const {
  return lopq_model_name_.Get();
}
inline void LOPQSearchForCodesRequest::_internal_set_lopq_model_name(const std::string& value) {
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQSearchForCodesRequest::set_lopq_model_name(std::string&& value) {
  
  lopq_model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQSearchForCodesRequest.lopq_model_name)
}
inline void LOPQSearchForCodesRequest::set_lopq_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQSearchForCodesRequest.lopq_model_name)
}
inline void LOPQSearchForCodesRequest::set_lopq_model_name(const char* value,
    size_t size) {
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQSearchForCodesRequest.lopq_model_name)
}
inline std::string* LOPQSearchForCodesRequest::_internal_mutable_lopq_model_name() {
  
  return lopq_model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQSearchForCodesRequest::release_lopq_model_name() {
  // @@protoc_insertion_point(field_release:LOPQSearchForCodesRequest.lopq_model_name)
  return lopq_model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQSearchForCodesRequest::set_allocated_lopq_model_name(std::string* lopq_model_name) {
  if (lopq_model_name != nullptr) {
    
  } else {
    
  }
  lopq_model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lopq_model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQSearchForCodesRequest.lopq_model_name)
}

// -------------------------------------------------------------------

// LOPQSearchForCodeResult

// .LOPQCode code = 1;
inline bool LOPQSearchForCodeResult::_internal_has_code() const {
  return this != internal_default_instance() && code_ != nullptr;
}
inline bool LOPQSearchForCodeResult::has_code() const {
  return _internal_has_code();
}
inline const ::LOPQCode& LOPQSearchForCodeResult::_internal_code() const {
  const ::LOPQCode* p = code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LOPQCode*>(
      &::_LOPQCode_default_instance_);
}
inline const ::LOPQCode& LOPQSearchForCodeResult::code() const {
  // @@protoc_insertion_point(field_get:LOPQSearchForCodeResult.code)
  return _internal_code();
}
inline void LOPQSearchForCodeResult::unsafe_arena_set_allocated_code(
    ::LOPQCode* code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(code_);
  }
  code_ = code;
  if (code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQSearchForCodeResult.code)
}
inline ::LOPQCode* LOPQSearchForCodeResult::release_code() {
  
  ::LOPQCode* temp = code_;
  code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LOPQCode* LOPQSearchForCodeResult::unsafe_arena_release_code() {
  // @@protoc_insertion_point(field_release:LOPQSearchForCodeResult.code)
  
  ::LOPQCode* temp = code_;
  code_ = nullptr;
  return temp;
}
inline ::LOPQCode* LOPQSearchForCodeResult::_internal_mutable_code() {
  
  if (code_ == nullptr) {
    auto* p = CreateMaybeMessage<::LOPQCode>(GetArena());
    code_ = p;
  }
  return code_;
}
inline ::LOPQCode* LOPQSearchForCodeResult::mutable_code() {
  // @@protoc_insertion_point(field_mutable:LOPQSearchForCodeResult.code)
  return _internal_mutable_code();
}
inline void LOPQSearchForCodeResult::set_allocated_code(::LOPQCode* code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(code_);
  }
  if (code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(code)->GetArena();
    if (message_arena != submessage_arena) {
      code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:LOPQSearchForCodeResult.code)
}

// float score = 2;
inline void LOPQSearchForCodeResult::clear_score() {
  score_ = 0;
}
inline float LOPQSearchForCodeResult::_internal_score() const {
  return score_;
}
inline float LOPQSearchForCodeResult::score() const {
  // @@protoc_insertion_point(field_get:LOPQSearchForCodeResult.score)
  return _internal_score();
}
inline void LOPQSearchForCodeResult::_internal_set_score(float value) {
  
  score_ = value;
}
inline void LOPQSearchForCodeResult::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:LOPQSearchForCodeResult.score)
}

// float distance = 3;
inline void LOPQSearchForCodeResult::clear_distance() {
  distance_ = 0;
}
inline float LOPQSearchForCodeResult::_internal_distance() const {
  return distance_;
}
inline float LOPQSearchForCodeResult::distance() const {
  // @@protoc_insertion_point(field_get:LOPQSearchForCodeResult.distance)
  return _internal_distance();
}
inline void LOPQSearchForCodeResult::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void LOPQSearchForCodeResult::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:LOPQSearchForCodeResult.distance)
}

// -------------------------------------------------------------------

// LOPQSearchForCodesResponse

// .ResponseStatus status = 1;
inline bool LOPQSearchForCodesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool LOPQSearchForCodesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& LOPQSearchForCodesResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& LOPQSearchForCodesResponse::status() const {
  // @@protoc_insertion_point(field_get:LOPQSearchForCodesResponse.status)
  return _internal_status();
}
inline void LOPQSearchForCodesResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQSearchForCodesResponse.status)
}
inline ::ResponseStatus* LOPQSearchForCodesResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* LOPQSearchForCodesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:LOPQSearchForCodesResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* LOPQSearchForCodesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* LOPQSearchForCodesResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:LOPQSearchForCodesResponse.status)
  return _internal_mutable_status();
}
inline void LOPQSearchForCodesResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:LOPQSearchForCodesResponse.status)
}

// repeated .LOPQSearchForCodeResult result = 2;
inline int LOPQSearchForCodesResponse::_internal_result_size() const {
  return result_.size();
}
inline int LOPQSearchForCodesResponse::result_size() const {
  return _internal_result_size();
}
inline void LOPQSearchForCodesResponse::clear_result() {
  result_.Clear();
}
inline ::LOPQSearchForCodeResult* LOPQSearchForCodesResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:LOPQSearchForCodesResponse.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQSearchForCodeResult >*
LOPQSearchForCodesResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:LOPQSearchForCodesResponse.result)
  return &result_;
}
inline const ::LOPQSearchForCodeResult& LOPQSearchForCodesResponse::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::LOPQSearchForCodeResult& LOPQSearchForCodesResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:LOPQSearchForCodesResponse.result)
  return _internal_result(index);
}
inline ::LOPQSearchForCodeResult* LOPQSearchForCodesResponse::_internal_add_result() {
  return result_.Add();
}
inline ::LOPQSearchForCodeResult* LOPQSearchForCodesResponse::add_result() {
  // @@protoc_insertion_point(field_add:LOPQSearchForCodesResponse.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQSearchForCodeResult >&
LOPQSearchForCodesResponse::result() const {
  // @@protoc_insertion_point(field_list:LOPQSearchForCodesResponse.result)
  return result_;
}

// -------------------------------------------------------------------

// LOPQBruteForceSearchRequest

// .RequestMeta meta = 1;
inline bool LOPQBruteForceSearchRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool LOPQBruteForceSearchRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& LOPQBruteForceSearchRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& LOPQBruteForceSearchRequest::meta() const {
  // @@protoc_insertion_point(field_get:LOPQBruteForceSearchRequest.meta)
  return _internal_meta();
}
inline void LOPQBruteForceSearchRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQBruteForceSearchRequest.meta)
}
inline ::RequestMeta* LOPQBruteForceSearchRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* LOPQBruteForceSearchRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:LOPQBruteForceSearchRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* LOPQBruteForceSearchRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* LOPQBruteForceSearchRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:LOPQBruteForceSearchRequest.meta)
  return _internal_mutable_meta();
}
inline void LOPQBruteForceSearchRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:LOPQBruteForceSearchRequest.meta)
}

// .DataBatch data = 2;
inline bool LOPQBruteForceSearchRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool LOPQBruteForceSearchRequest::has_data() const {
  return _internal_has_data();
}
inline const ::DataBatch& LOPQBruteForceSearchRequest::_internal_data() const {
  const ::DataBatch* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& LOPQBruteForceSearchRequest::data() const {
  // @@protoc_insertion_point(field_get:LOPQBruteForceSearchRequest.data)
  return _internal_data();
}
inline void LOPQBruteForceSearchRequest::unsafe_arena_set_allocated_data(
    ::DataBatch* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQBruteForceSearchRequest.data)
}
inline ::DataBatch* LOPQBruteForceSearchRequest::release_data() {
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* LOPQBruteForceSearchRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:LOPQBruteForceSearchRequest.data)
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DataBatch* LOPQBruteForceSearchRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::DataBatch* LOPQBruteForceSearchRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:LOPQBruteForceSearchRequest.data)
  return _internal_mutable_data();
}
inline void LOPQBruteForceSearchRequest::set_allocated_data(::DataBatch* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:LOPQBruteForceSearchRequest.data)
}

// string sql_query = 3;
inline void LOPQBruteForceSearchRequest::clear_sql_query() {
  sql_query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQBruteForceSearchRequest::sql_query() const {
  // @@protoc_insertion_point(field_get:LOPQBruteForceSearchRequest.sql_query)
  return _internal_sql_query();
}
inline void LOPQBruteForceSearchRequest::set_sql_query(const std::string& value) {
  _internal_set_sql_query(value);
  // @@protoc_insertion_point(field_set:LOPQBruteForceSearchRequest.sql_query)
}
inline std::string* LOPQBruteForceSearchRequest::mutable_sql_query() {
  // @@protoc_insertion_point(field_mutable:LOPQBruteForceSearchRequest.sql_query)
  return _internal_mutable_sql_query();
}
inline const std::string& LOPQBruteForceSearchRequest::_internal_sql_query() const {
  return sql_query_.Get();
}
inline void LOPQBruteForceSearchRequest::_internal_set_sql_query(const std::string& value) {
  
  sql_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQBruteForceSearchRequest::set_sql_query(std::string&& value) {
  
  sql_query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQBruteForceSearchRequest.sql_query)
}
inline void LOPQBruteForceSearchRequest::set_sql_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sql_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQBruteForceSearchRequest.sql_query)
}
inline void LOPQBruteForceSearchRequest::set_sql_query(const char* value,
    size_t size) {
  
  sql_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQBruteForceSearchRequest.sql_query)
}
inline std::string* LOPQBruteForceSearchRequest::_internal_mutable_sql_query() {
  
  return sql_query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQBruteForceSearchRequest::release_sql_query() {
  // @@protoc_insertion_point(field_release:LOPQBruteForceSearchRequest.sql_query)
  return sql_query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQBruteForceSearchRequest::set_allocated_sql_query(std::string* sql_query) {
  if (sql_query != nullptr) {
    
  } else {
    
  }
  sql_query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sql_query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQBruteForceSearchRequest.sql_query)
}

// int32 k = 4;
inline void LOPQBruteForceSearchRequest::clear_k() {
  k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQBruteForceSearchRequest::_internal_k() const {
  return k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQBruteForceSearchRequest::k() const {
  // @@protoc_insertion_point(field_get:LOPQBruteForceSearchRequest.k)
  return _internal_k();
}
inline void LOPQBruteForceSearchRequest::_internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  k_ = value;
}
inline void LOPQBruteForceSearchRequest::set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:LOPQBruteForceSearchRequest.k)
}

// bool avg_concept_brute_force = 5;
inline void LOPQBruteForceSearchRequest::clear_avg_concept_brute_force() {
  avg_concept_brute_force_ = false;
}
inline bool LOPQBruteForceSearchRequest::_internal_avg_concept_brute_force() const {
  return avg_concept_brute_force_;
}
inline bool LOPQBruteForceSearchRequest::avg_concept_brute_force() const {
  // @@protoc_insertion_point(field_get:LOPQBruteForceSearchRequest.avg_concept_brute_force)
  return _internal_avg_concept_brute_force();
}
inline void LOPQBruteForceSearchRequest::_internal_set_avg_concept_brute_force(bool value) {
  
  avg_concept_brute_force_ = value;
}
inline void LOPQBruteForceSearchRequest::set_avg_concept_brute_force(bool value) {
  _internal_set_avg_concept_brute_force(value);
  // @@protoc_insertion_point(field_set:LOPQBruteForceSearchRequest.avg_concept_brute_force)
}

// -------------------------------------------------------------------

// LOPQBruteForceSearchResponse

// .ResponseStatus status = 1;
inline bool LOPQBruteForceSearchResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool LOPQBruteForceSearchResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& LOPQBruteForceSearchResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& LOPQBruteForceSearchResponse::status() const {
  // @@protoc_insertion_point(field_get:LOPQBruteForceSearchResponse.status)
  return _internal_status();
}
inline void LOPQBruteForceSearchResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQBruteForceSearchResponse.status)
}
inline ::ResponseStatus* LOPQBruteForceSearchResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* LOPQBruteForceSearchResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:LOPQBruteForceSearchResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* LOPQBruteForceSearchResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* LOPQBruteForceSearchResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:LOPQBruteForceSearchResponse.status)
  return _internal_mutable_status();
}
inline void LOPQBruteForceSearchResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:LOPQBruteForceSearchResponse.status)
}

// repeated .BruteForceResult all_results = 2;
inline int LOPQBruteForceSearchResponse::_internal_all_results_size() const {
  return all_results_.size();
}
inline int LOPQBruteForceSearchResponse::all_results_size() const {
  return _internal_all_results_size();
}
inline void LOPQBruteForceSearchResponse::clear_all_results() {
  all_results_.Clear();
}
inline ::BruteForceResult* LOPQBruteForceSearchResponse::mutable_all_results(int index) {
  // @@protoc_insertion_point(field_mutable:LOPQBruteForceSearchResponse.all_results)
  return all_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BruteForceResult >*
LOPQBruteForceSearchResponse::mutable_all_results() {
  // @@protoc_insertion_point(field_mutable_list:LOPQBruteForceSearchResponse.all_results)
  return &all_results_;
}
inline const ::BruteForceResult& LOPQBruteForceSearchResponse::_internal_all_results(int index) const {
  return all_results_.Get(index);
}
inline const ::BruteForceResult& LOPQBruteForceSearchResponse::all_results(int index) const {
  // @@protoc_insertion_point(field_get:LOPQBruteForceSearchResponse.all_results)
  return _internal_all_results(index);
}
inline ::BruteForceResult* LOPQBruteForceSearchResponse::_internal_add_all_results() {
  return all_results_.Add();
}
inline ::BruteForceResult* LOPQBruteForceSearchResponse::add_all_results() {
  // @@protoc_insertion_point(field_add:LOPQBruteForceSearchResponse.all_results)
  return _internal_add_all_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BruteForceResult >&
LOPQBruteForceSearchResponse::all_results() const {
  // @@protoc_insertion_point(field_list:LOPQBruteForceSearchResponse.all_results)
  return all_results_;
}

// -------------------------------------------------------------------

// BruteForceResult

// repeated .LOPQSearchResult results = 2;
inline int BruteForceResult::_internal_results_size() const {
  return results_.size();
}
inline int BruteForceResult::results_size() const {
  return _internal_results_size();
}
inline void BruteForceResult::clear_results() {
  results_.Clear();
}
inline ::LOPQSearchResult* BruteForceResult::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:BruteForceResult.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQSearchResult >*
BruteForceResult::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:BruteForceResult.results)
  return &results_;
}
inline const ::LOPQSearchResult& BruteForceResult::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::LOPQSearchResult& BruteForceResult::results(int index) const {
  // @@protoc_insertion_point(field_get:BruteForceResult.results)
  return _internal_results(index);
}
inline ::LOPQSearchResult* BruteForceResult::_internal_add_results() {
  return results_.Add();
}
inline ::LOPQSearchResult* BruteForceResult::add_results() {
  // @@protoc_insertion_point(field_add:BruteForceResult.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQSearchResult >&
BruteForceResult::results() const {
  // @@protoc_insertion_point(field_list:BruteForceResult.results)
  return results_;
}

// -------------------------------------------------------------------

// LOPQTrainRequest

// .RequestMeta meta = 1;
inline bool LOPQTrainRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool LOPQTrainRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& LOPQTrainRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& LOPQTrainRequest::meta() const {
  // @@protoc_insertion_point(field_get:LOPQTrainRequest.meta)
  return _internal_meta();
}
inline void LOPQTrainRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQTrainRequest.meta)
}
inline ::RequestMeta* LOPQTrainRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* LOPQTrainRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:LOPQTrainRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* LOPQTrainRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* LOPQTrainRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:LOPQTrainRequest.meta)
  return _internal_mutable_meta();
}
inline void LOPQTrainRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:LOPQTrainRequest.meta)
}

// .DataBatch data = 2;
inline bool LOPQTrainRequest::_internal_has_data() const {
  return training_data_case() == kData;
}
inline bool LOPQTrainRequest::has_data() const {
  return _internal_has_data();
}
inline void LOPQTrainRequest::set_has_data() {
  _oneof_case_[0] = kData;
}
inline ::DataBatch* LOPQTrainRequest::release_data() {
  // @@protoc_insertion_point(field_release:LOPQTrainRequest.data)
  if (_internal_has_data()) {
    clear_has_training_data();
      ::DataBatch* temp = training_data_.data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    training_data_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DataBatch& LOPQTrainRequest::_internal_data() const {
  return _internal_has_data()
      ? *training_data_.data_
      : *reinterpret_cast< ::DataBatch*>(&::_DataBatch_default_instance_);
}
inline const ::DataBatch& LOPQTrainRequest::data() const {
  // @@protoc_insertion_point(field_get:LOPQTrainRequest.data)
  return _internal_data();
}
inline ::DataBatch* LOPQTrainRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LOPQTrainRequest.data)
  if (_internal_has_data()) {
    clear_has_training_data();
    ::DataBatch* temp = training_data_.data_;
    training_data_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LOPQTrainRequest::unsafe_arena_set_allocated_data(::DataBatch* data) {
  clear_training_data();
  if (data) {
    set_has_data();
    training_data_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQTrainRequest.data)
}
inline ::DataBatch* LOPQTrainRequest::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_training_data();
    set_has_data();
    training_data_.data_ = CreateMaybeMessage< ::DataBatch >(GetArena());
  }
  return training_data_.data_;
}
inline ::DataBatch* LOPQTrainRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:LOPQTrainRequest.data)
  return _internal_mutable_data();
}

// string sql_query = 3;
inline bool LOPQTrainRequest::_internal_has_sql_query() const {
  return training_data_case() == kSqlQuery;
}
inline void LOPQTrainRequest::set_has_sql_query() {
  _oneof_case_[0] = kSqlQuery;
}
inline void LOPQTrainRequest::clear_sql_query() {
  if (_internal_has_sql_query()) {
    training_data_.sql_query_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_training_data();
  }
}
inline const std::string& LOPQTrainRequest::sql_query() const {
  // @@protoc_insertion_point(field_get:LOPQTrainRequest.sql_query)
  return _internal_sql_query();
}
inline void LOPQTrainRequest::set_sql_query(const std::string& value) {
  _internal_set_sql_query(value);
  // @@protoc_insertion_point(field_set:LOPQTrainRequest.sql_query)
}
inline std::string* LOPQTrainRequest::mutable_sql_query() {
  // @@protoc_insertion_point(field_mutable:LOPQTrainRequest.sql_query)
  return _internal_mutable_sql_query();
}
inline const std::string& LOPQTrainRequest::_internal_sql_query() const {
  if (_internal_has_sql_query()) {
    return training_data_.sql_query_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void LOPQTrainRequest::_internal_set_sql_query(const std::string& value) {
  if (!_internal_has_sql_query()) {
    clear_training_data();
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  training_data_.sql_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQTrainRequest::set_sql_query(std::string&& value) {
  // @@protoc_insertion_point(field_set:LOPQTrainRequest.sql_query)
  if (!_internal_has_sql_query()) {
    clear_training_data();
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  training_data_.sql_query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQTrainRequest.sql_query)
}
inline void LOPQTrainRequest::set_sql_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_sql_query()) {
    clear_training_data();
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  training_data_.sql_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQTrainRequest.sql_query)
}
inline void LOPQTrainRequest::set_sql_query(const char* value,
                             size_t size) {
  if (!_internal_has_sql_query()) {
    clear_training_data();
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  training_data_.sql_query_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQTrainRequest.sql_query)
}
inline std::string* LOPQTrainRequest::_internal_mutable_sql_query() {
  if (!_internal_has_sql_query()) {
    clear_training_data();
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return training_data_.sql_query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQTrainRequest::release_sql_query() {
  // @@protoc_insertion_point(field_release:LOPQTrainRequest.sql_query)
  if (_internal_has_sql_query()) {
    clear_has_training_data();
    return training_data_.sql_query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void LOPQTrainRequest::set_allocated_sql_query(std::string* sql_query) {
  if (has_training_data()) {
    clear_training_data();
  }
  if (sql_query != nullptr) {
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(sql_query);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(sql_query);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:LOPQTrainRequest.sql_query)
}

// string lopq_model_name = 4;
inline void LOPQTrainRequest::clear_lopq_model_name() {
  lopq_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQTrainRequest::lopq_model_name() const {
  // @@protoc_insertion_point(field_get:LOPQTrainRequest.lopq_model_name)
  return _internal_lopq_model_name();
}
inline void LOPQTrainRequest::set_lopq_model_name(const std::string& value) {
  _internal_set_lopq_model_name(value);
  // @@protoc_insertion_point(field_set:LOPQTrainRequest.lopq_model_name)
}
inline std::string* LOPQTrainRequest::mutable_lopq_model_name() {
  // @@protoc_insertion_point(field_mutable:LOPQTrainRequest.lopq_model_name)
  return _internal_mutable_lopq_model_name();
}
inline const std::string& LOPQTrainRequest::_internal_lopq_model_name() const {
  return lopq_model_name_.Get();
}
inline void LOPQTrainRequest::_internal_set_lopq_model_name(const std::string& value) {
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQTrainRequest::set_lopq_model_name(std::string&& value) {
  
  lopq_model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQTrainRequest.lopq_model_name)
}
inline void LOPQTrainRequest::set_lopq_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQTrainRequest.lopq_model_name)
}
inline void LOPQTrainRequest::set_lopq_model_name(const char* value,
    size_t size) {
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQTrainRequest.lopq_model_name)
}
inline std::string* LOPQTrainRequest::_internal_mutable_lopq_model_name() {
  
  return lopq_model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQTrainRequest::release_lopq_model_name() {
  // @@protoc_insertion_point(field_release:LOPQTrainRequest.lopq_model_name)
  return lopq_model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQTrainRequest::set_allocated_lopq_model_name(std::string* lopq_model_name) {
  if (lopq_model_name != nullptr) {
    
  } else {
    
  }
  lopq_model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lopq_model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQTrainRequest.lopq_model_name)
}

// int32 coarse_clusters = 5;
inline void LOPQTrainRequest::clear_coarse_clusters() {
  coarse_clusters_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQTrainRequest::_internal_coarse_clusters() const {
  return coarse_clusters_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQTrainRequest::coarse_clusters() const {
  // @@protoc_insertion_point(field_get:LOPQTrainRequest.coarse_clusters)
  return _internal_coarse_clusters();
}
inline void LOPQTrainRequest::_internal_set_coarse_clusters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  coarse_clusters_ = value;
}
inline void LOPQTrainRequest::set_coarse_clusters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coarse_clusters(value);
  // @@protoc_insertion_point(field_set:LOPQTrainRequest.coarse_clusters)
}

// int32 train_iters = 6;
inline void LOPQTrainRequest::clear_train_iters() {
  train_iters_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQTrainRequest::_internal_train_iters() const {
  return train_iters_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQTrainRequest::train_iters() const {
  // @@protoc_insertion_point(field_get:LOPQTrainRequest.train_iters)
  return _internal_train_iters();
}
inline void LOPQTrainRequest::_internal_set_train_iters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  train_iters_ = value;
}
inline void LOPQTrainRequest::set_train_iters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_train_iters(value);
  // @@protoc_insertion_point(field_set:LOPQTrainRequest.train_iters)
}

// string prev_model_name = 7;
inline void LOPQTrainRequest::clear_prev_model_name() {
  prev_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQTrainRequest::prev_model_name() const {
  // @@protoc_insertion_point(field_get:LOPQTrainRequest.prev_model_name)
  return _internal_prev_model_name();
}
inline void LOPQTrainRequest::set_prev_model_name(const std::string& value) {
  _internal_set_prev_model_name(value);
  // @@protoc_insertion_point(field_set:LOPQTrainRequest.prev_model_name)
}
inline std::string* LOPQTrainRequest::mutable_prev_model_name() {
  // @@protoc_insertion_point(field_mutable:LOPQTrainRequest.prev_model_name)
  return _internal_mutable_prev_model_name();
}
inline const std::string& LOPQTrainRequest::_internal_prev_model_name() const {
  return prev_model_name_.Get();
}
inline void LOPQTrainRequest::_internal_set_prev_model_name(const std::string& value) {
  
  prev_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQTrainRequest::set_prev_model_name(std::string&& value) {
  
  prev_model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQTrainRequest.prev_model_name)
}
inline void LOPQTrainRequest::set_prev_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prev_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQTrainRequest.prev_model_name)
}
inline void LOPQTrainRequest::set_prev_model_name(const char* value,
    size_t size) {
  
  prev_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQTrainRequest.prev_model_name)
}
inline std::string* LOPQTrainRequest::_internal_mutable_prev_model_name() {
  
  return prev_model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQTrainRequest::release_prev_model_name() {
  // @@protoc_insertion_point(field_release:LOPQTrainRequest.prev_model_name)
  return prev_model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQTrainRequest::set_allocated_prev_model_name(std::string* prev_model_name) {
  if (prev_model_name != nullptr) {
    
  } else {
    
  }
  prev_model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev_model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQTrainRequest.prev_model_name)
}

inline bool LOPQTrainRequest::has_training_data() const {
  return training_data_case() != TRAINING_DATA_NOT_SET;
}
inline void LOPQTrainRequest::clear_has_training_data() {
  _oneof_case_[0] = TRAINING_DATA_NOT_SET;
}
inline LOPQTrainRequest::TrainingDataCase LOPQTrainRequest::training_data_case() const {
  return LOPQTrainRequest::TrainingDataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LOPQTrainResponse

// .ResponseStatus status = 1;
inline bool LOPQTrainResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool LOPQTrainResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& LOPQTrainResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& LOPQTrainResponse::status() const {
  // @@protoc_insertion_point(field_get:LOPQTrainResponse.status)
  return _internal_status();
}
inline void LOPQTrainResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQTrainResponse.status)
}
inline ::ResponseStatus* LOPQTrainResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* LOPQTrainResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:LOPQTrainResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* LOPQTrainResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* LOPQTrainResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:LOPQTrainResponse.status)
  return _internal_mutable_status();
}
inline void LOPQTrainResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:LOPQTrainResponse.status)
}

// -------------------------------------------------------------------

// LOPQModelParams

// uint32 D = 1;
inline void LOPQModelParams::clear_d() {
  d_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LOPQModelParams::_internal_d() const {
  return d_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LOPQModelParams::d() const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.D)
  return _internal_d();
}
inline void LOPQModelParams::_internal_set_d(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  d_ = value;
}
inline void LOPQModelParams::set_d(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:LOPQModelParams.D)
}

// uint32 V = 2;
inline void LOPQModelParams::clear_v() {
  v_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LOPQModelParams::_internal_v() const {
  return v_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LOPQModelParams::v() const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.V)
  return _internal_v();
}
inline void LOPQModelParams::_internal_set_v(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  v_ = value;
}
inline void LOPQModelParams::set_v(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:LOPQModelParams.V)
}

// uint32 M = 3;
inline void LOPQModelParams::clear_m() {
  m_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LOPQModelParams::_internal_m() const {
  return m_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LOPQModelParams::m() const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.M)
  return _internal_m();
}
inline void LOPQModelParams::_internal_set_m(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  m_ = value;
}
inline void LOPQModelParams::set_m(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:LOPQModelParams.M)
}

// uint32 num_subquantizers = 4;
inline void LOPQModelParams::clear_num_subquantizers() {
  num_subquantizers_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LOPQModelParams::_internal_num_subquantizers() const {
  return num_subquantizers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LOPQModelParams::num_subquantizers() const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.num_subquantizers)
  return _internal_num_subquantizers();
}
inline void LOPQModelParams::_internal_set_num_subquantizers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_subquantizers_ = value;
}
inline void LOPQModelParams::set_num_subquantizers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_subquantizers(value);
  // @@protoc_insertion_point(field_set:LOPQModelParams.num_subquantizers)
}

// repeated .NDArray Cs = 5;
inline int LOPQModelParams::_internal_cs_size() const {
  return cs_.size();
}
inline int LOPQModelParams::cs_size() const {
  return _internal_cs_size();
}
inline ::NDArray* LOPQModelParams::mutable_cs(int index) {
  // @@protoc_insertion_point(field_mutable:LOPQModelParams.Cs)
  return cs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >*
LOPQModelParams::mutable_cs() {
  // @@protoc_insertion_point(field_mutable_list:LOPQModelParams.Cs)
  return &cs_;
}
inline const ::NDArray& LOPQModelParams::_internal_cs(int index) const {
  return cs_.Get(index);
}
inline const ::NDArray& LOPQModelParams::cs(int index) const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.Cs)
  return _internal_cs(index);
}
inline ::NDArray* LOPQModelParams::_internal_add_cs() {
  return cs_.Add();
}
inline ::NDArray* LOPQModelParams::add_cs() {
  // @@protoc_insertion_point(field_add:LOPQModelParams.Cs)
  return _internal_add_cs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >&
LOPQModelParams::cs() const {
  // @@protoc_insertion_point(field_list:LOPQModelParams.Cs)
  return cs_;
}

// repeated .NDArray Rs = 6;
inline int LOPQModelParams::_internal_rs_size() const {
  return rs_.size();
}
inline int LOPQModelParams::rs_size() const {
  return _internal_rs_size();
}
inline ::NDArray* LOPQModelParams::mutable_rs(int index) {
  // @@protoc_insertion_point(field_mutable:LOPQModelParams.Rs)
  return rs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >*
LOPQModelParams::mutable_rs() {
  // @@protoc_insertion_point(field_mutable_list:LOPQModelParams.Rs)
  return &rs_;
}
inline const ::NDArray& LOPQModelParams::_internal_rs(int index) const {
  return rs_.Get(index);
}
inline const ::NDArray& LOPQModelParams::rs(int index) const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.Rs)
  return _internal_rs(index);
}
inline ::NDArray* LOPQModelParams::_internal_add_rs() {
  return rs_.Add();
}
inline ::NDArray* LOPQModelParams::add_rs() {
  // @@protoc_insertion_point(field_add:LOPQModelParams.Rs)
  return _internal_add_rs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >&
LOPQModelParams::rs() const {
  // @@protoc_insertion_point(field_list:LOPQModelParams.Rs)
  return rs_;
}

// repeated .NDArray mus = 7;
inline int LOPQModelParams::_internal_mus_size() const {
  return mus_.size();
}
inline int LOPQModelParams::mus_size() const {
  return _internal_mus_size();
}
inline ::NDArray* LOPQModelParams::mutable_mus(int index) {
  // @@protoc_insertion_point(field_mutable:LOPQModelParams.mus)
  return mus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >*
LOPQModelParams::mutable_mus() {
  // @@protoc_insertion_point(field_mutable_list:LOPQModelParams.mus)
  return &mus_;
}
inline const ::NDArray& LOPQModelParams::_internal_mus(int index) const {
  return mus_.Get(index);
}
inline const ::NDArray& LOPQModelParams::mus(int index) const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.mus)
  return _internal_mus(index);
}
inline ::NDArray* LOPQModelParams::_internal_add_mus() {
  return mus_.Add();
}
inline ::NDArray* LOPQModelParams::add_mus() {
  // @@protoc_insertion_point(field_add:LOPQModelParams.mus)
  return _internal_add_mus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >&
LOPQModelParams::mus() const {
  // @@protoc_insertion_point(field_list:LOPQModelParams.mus)
  return mus_;
}

// repeated .NDArray subs = 8;
inline int LOPQModelParams::_internal_subs_size() const {
  return subs_.size();
}
inline int LOPQModelParams::subs_size() const {
  return _internal_subs_size();
}
inline ::NDArray* LOPQModelParams::mutable_subs(int index) {
  // @@protoc_insertion_point(field_mutable:LOPQModelParams.subs)
  return subs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >*
LOPQModelParams::mutable_subs() {
  // @@protoc_insertion_point(field_mutable_list:LOPQModelParams.subs)
  return &subs_;
}
inline const ::NDArray& LOPQModelParams::_internal_subs(int index) const {
  return subs_.Get(index);
}
inline const ::NDArray& LOPQModelParams::subs(int index) const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.subs)
  return _internal_subs(index);
}
inline ::NDArray* LOPQModelParams::_internal_add_subs() {
  return subs_.Add();
}
inline ::NDArray* LOPQModelParams::add_subs() {
  // @@protoc_insertion_point(field_add:LOPQModelParams.subs)
  return _internal_add_subs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NDArray >&
LOPQModelParams::subs() const {
  // @@protoc_insertion_point(field_list:LOPQModelParams.subs)
  return subs_;
}

// bool use_embeddings = 11;
inline void LOPQModelParams::clear_use_embeddings() {
  use_embeddings_ = false;
}
inline bool LOPQModelParams::_internal_use_embeddings() const {
  return use_embeddings_;
}
inline bool LOPQModelParams::use_embeddings() const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.use_embeddings)
  return _internal_use_embeddings();
}
inline void LOPQModelParams::_internal_set_use_embeddings(bool value) {
  
  use_embeddings_ = value;
}
inline void LOPQModelParams::set_use_embeddings(bool value) {
  _internal_set_use_embeddings(value);
  // @@protoc_insertion_point(field_set:LOPQModelParams.use_embeddings)
}

// .NDArray pca_P = 9;
inline bool LOPQModelParams::_internal_has_pca_p() const {
  return this != internal_default_instance() && pca_p_ != nullptr;
}
inline bool LOPQModelParams::has_pca_p() const {
  return _internal_has_pca_p();
}
inline const ::NDArray& LOPQModelParams::_internal_pca_p() const {
  const ::NDArray* p = pca_p_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NDArray*>(
      &::_NDArray_default_instance_);
}
inline const ::NDArray& LOPQModelParams::pca_p() const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.pca_P)
  return _internal_pca_p();
}
inline void LOPQModelParams::unsafe_arena_set_allocated_pca_p(
    ::NDArray* pca_p) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pca_p_);
  }
  pca_p_ = pca_p;
  if (pca_p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQModelParams.pca_P)
}
inline ::NDArray* LOPQModelParams::release_pca_p() {
  
  ::NDArray* temp = pca_p_;
  pca_p_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NDArray* LOPQModelParams::unsafe_arena_release_pca_p() {
  // @@protoc_insertion_point(field_release:LOPQModelParams.pca_P)
  
  ::NDArray* temp = pca_p_;
  pca_p_ = nullptr;
  return temp;
}
inline ::NDArray* LOPQModelParams::_internal_mutable_pca_p() {
  
  if (pca_p_ == nullptr) {
    auto* p = CreateMaybeMessage<::NDArray>(GetArena());
    pca_p_ = p;
  }
  return pca_p_;
}
inline ::NDArray* LOPQModelParams::mutable_pca_p() {
  // @@protoc_insertion_point(field_mutable:LOPQModelParams.pca_P)
  return _internal_mutable_pca_p();
}
inline void LOPQModelParams::set_allocated_pca_p(::NDArray* pca_p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pca_p_);
  }
  if (pca_p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pca_p)->GetArena();
    if (message_arena != submessage_arena) {
      pca_p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pca_p, submessage_arena);
    }
    
  } else {
    
  }
  pca_p_ = pca_p;
  // @@protoc_insertion_point(field_set_allocated:LOPQModelParams.pca_P)
}

// .NDArray pca_mu = 10;
inline bool LOPQModelParams::_internal_has_pca_mu() const {
  return this != internal_default_instance() && pca_mu_ != nullptr;
}
inline bool LOPQModelParams::has_pca_mu() const {
  return _internal_has_pca_mu();
}
inline const ::NDArray& LOPQModelParams::_internal_pca_mu() const {
  const ::NDArray* p = pca_mu_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NDArray*>(
      &::_NDArray_default_instance_);
}
inline const ::NDArray& LOPQModelParams::pca_mu() const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.pca_mu)
  return _internal_pca_mu();
}
inline void LOPQModelParams::unsafe_arena_set_allocated_pca_mu(
    ::NDArray* pca_mu) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pca_mu_);
  }
  pca_mu_ = pca_mu;
  if (pca_mu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQModelParams.pca_mu)
}
inline ::NDArray* LOPQModelParams::release_pca_mu() {
  
  ::NDArray* temp = pca_mu_;
  pca_mu_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NDArray* LOPQModelParams::unsafe_arena_release_pca_mu() {
  // @@protoc_insertion_point(field_release:LOPQModelParams.pca_mu)
  
  ::NDArray* temp = pca_mu_;
  pca_mu_ = nullptr;
  return temp;
}
inline ::NDArray* LOPQModelParams::_internal_mutable_pca_mu() {
  
  if (pca_mu_ == nullptr) {
    auto* p = CreateMaybeMessage<::NDArray>(GetArena());
    pca_mu_ = p;
  }
  return pca_mu_;
}
inline ::NDArray* LOPQModelParams::mutable_pca_mu() {
  // @@protoc_insertion_point(field_mutable:LOPQModelParams.pca_mu)
  return _internal_mutable_pca_mu();
}
inline void LOPQModelParams::set_allocated_pca_mu(::NDArray* pca_mu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pca_mu_);
  }
  if (pca_mu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pca_mu)->GetArena();
    if (message_arena != submessage_arena) {
      pca_mu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pca_mu, submessage_arena);
    }
    
  } else {
    
  }
  pca_mu_ = pca_mu;
  // @@protoc_insertion_point(field_set_allocated:LOPQModelParams.pca_mu)
}

// bool pca_just_shuffle = 12;
inline void LOPQModelParams::clear_pca_just_shuffle() {
  pca_just_shuffle_ = false;
}
inline bool LOPQModelParams::_internal_pca_just_shuffle() const {
  return pca_just_shuffle_;
}
inline bool LOPQModelParams::pca_just_shuffle() const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.pca_just_shuffle)
  return _internal_pca_just_shuffle();
}
inline void LOPQModelParams::_internal_set_pca_just_shuffle(bool value) {
  
  pca_just_shuffle_ = value;
}
inline void LOPQModelParams::set_pca_just_shuffle(bool value) {
  _internal_set_pca_just_shuffle(value);
  // @@protoc_insertion_point(field_set:LOPQModelParams.pca_just_shuffle)
}

// .NDArray pca_permuted_inds = 13;
inline bool LOPQModelParams::_internal_has_pca_permuted_inds() const {
  return this != internal_default_instance() && pca_permuted_inds_ != nullptr;
}
inline bool LOPQModelParams::has_pca_permuted_inds() const {
  return _internal_has_pca_permuted_inds();
}
inline const ::NDArray& LOPQModelParams::_internal_pca_permuted_inds() const {
  const ::NDArray* p = pca_permuted_inds_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NDArray*>(
      &::_NDArray_default_instance_);
}
inline const ::NDArray& LOPQModelParams::pca_permuted_inds() const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.pca_permuted_inds)
  return _internal_pca_permuted_inds();
}
inline void LOPQModelParams::unsafe_arena_set_allocated_pca_permuted_inds(
    ::NDArray* pca_permuted_inds) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pca_permuted_inds_);
  }
  pca_permuted_inds_ = pca_permuted_inds;
  if (pca_permuted_inds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQModelParams.pca_permuted_inds)
}
inline ::NDArray* LOPQModelParams::release_pca_permuted_inds() {
  
  ::NDArray* temp = pca_permuted_inds_;
  pca_permuted_inds_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NDArray* LOPQModelParams::unsafe_arena_release_pca_permuted_inds() {
  // @@protoc_insertion_point(field_release:LOPQModelParams.pca_permuted_inds)
  
  ::NDArray* temp = pca_permuted_inds_;
  pca_permuted_inds_ = nullptr;
  return temp;
}
inline ::NDArray* LOPQModelParams::_internal_mutable_pca_permuted_inds() {
  
  if (pca_permuted_inds_ == nullptr) {
    auto* p = CreateMaybeMessage<::NDArray>(GetArena());
    pca_permuted_inds_ = p;
  }
  return pca_permuted_inds_;
}
inline ::NDArray* LOPQModelParams::mutable_pca_permuted_inds() {
  // @@protoc_insertion_point(field_mutable:LOPQModelParams.pca_permuted_inds)
  return _internal_mutable_pca_permuted_inds();
}
inline void LOPQModelParams::set_allocated_pca_permuted_inds(::NDArray* pca_permuted_inds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pca_permuted_inds_);
  }
  if (pca_permuted_inds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pca_permuted_inds)->GetArena();
    if (message_arena != submessage_arena) {
      pca_permuted_inds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pca_permuted_inds, submessage_arena);
    }
    
  } else {
    
  }
  pca_permuted_inds_ = pca_permuted_inds;
  // @@protoc_insertion_point(field_set_allocated:LOPQModelParams.pca_permuted_inds)
}

// uint32 num_point_dims = 14;
inline void LOPQModelParams::clear_num_point_dims() {
  num_point_dims_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LOPQModelParams::_internal_num_point_dims() const {
  return num_point_dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LOPQModelParams::num_point_dims() const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.num_point_dims)
  return _internal_num_point_dims();
}
inline void LOPQModelParams::_internal_set_num_point_dims(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_point_dims_ = value;
}
inline void LOPQModelParams::set_num_point_dims(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_point_dims(value);
  // @@protoc_insertion_point(field_set:LOPQModelParams.num_point_dims)
}

// .NDArray projection_P = 15;
inline bool LOPQModelParams::_internal_has_projection_p() const {
  return this != internal_default_instance() && projection_p_ != nullptr;
}
inline bool LOPQModelParams::has_projection_p() const {
  return _internal_has_projection_p();
}
inline const ::NDArray& LOPQModelParams::_internal_projection_p() const {
  const ::NDArray* p = projection_p_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NDArray*>(
      &::_NDArray_default_instance_);
}
inline const ::NDArray& LOPQModelParams::projection_p() const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.projection_P)
  return _internal_projection_p();
}
inline void LOPQModelParams::unsafe_arena_set_allocated_projection_p(
    ::NDArray* projection_p) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_p_);
  }
  projection_p_ = projection_p;
  if (projection_p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQModelParams.projection_P)
}
inline ::NDArray* LOPQModelParams::release_projection_p() {
  
  ::NDArray* temp = projection_p_;
  projection_p_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NDArray* LOPQModelParams::unsafe_arena_release_projection_p() {
  // @@protoc_insertion_point(field_release:LOPQModelParams.projection_P)
  
  ::NDArray* temp = projection_p_;
  projection_p_ = nullptr;
  return temp;
}
inline ::NDArray* LOPQModelParams::_internal_mutable_projection_p() {
  
  if (projection_p_ == nullptr) {
    auto* p = CreateMaybeMessage<::NDArray>(GetArena());
    projection_p_ = p;
  }
  return projection_p_;
}
inline ::NDArray* LOPQModelParams::mutable_projection_p() {
  // @@protoc_insertion_point(field_mutable:LOPQModelParams.projection_P)
  return _internal_mutable_projection_p();
}
inline void LOPQModelParams::set_allocated_projection_p(::NDArray* projection_p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_p_);
  }
  if (projection_p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_p)->GetArena();
    if (message_arena != submessage_arena) {
      projection_p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projection_p, submessage_arena);
    }
    
  } else {
    
  }
  projection_p_ = projection_p;
  // @@protoc_insertion_point(field_set_allocated:LOPQModelParams.projection_P)
}

// .NDArray projection_mu = 16;
inline bool LOPQModelParams::_internal_has_projection_mu() const {
  return this != internal_default_instance() && projection_mu_ != nullptr;
}
inline bool LOPQModelParams::has_projection_mu() const {
  return _internal_has_projection_mu();
}
inline const ::NDArray& LOPQModelParams::_internal_projection_mu() const {
  const ::NDArray* p = projection_mu_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NDArray*>(
      &::_NDArray_default_instance_);
}
inline const ::NDArray& LOPQModelParams::projection_mu() const {
  // @@protoc_insertion_point(field_get:LOPQModelParams.projection_mu)
  return _internal_projection_mu();
}
inline void LOPQModelParams::unsafe_arena_set_allocated_projection_mu(
    ::NDArray* projection_mu) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_mu_);
  }
  projection_mu_ = projection_mu;
  if (projection_mu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQModelParams.projection_mu)
}
inline ::NDArray* LOPQModelParams::release_projection_mu() {
  
  ::NDArray* temp = projection_mu_;
  projection_mu_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NDArray* LOPQModelParams::unsafe_arena_release_projection_mu() {
  // @@protoc_insertion_point(field_release:LOPQModelParams.projection_mu)
  
  ::NDArray* temp = projection_mu_;
  projection_mu_ = nullptr;
  return temp;
}
inline ::NDArray* LOPQModelParams::_internal_mutable_projection_mu() {
  
  if (projection_mu_ == nullptr) {
    auto* p = CreateMaybeMessage<::NDArray>(GetArena());
    projection_mu_ = p;
  }
  return projection_mu_;
}
inline ::NDArray* LOPQModelParams::mutable_projection_mu() {
  // @@protoc_insertion_point(field_mutable:LOPQModelParams.projection_mu)
  return _internal_mutable_projection_mu();
}
inline void LOPQModelParams::set_allocated_projection_mu(::NDArray* projection_mu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_mu_);
  }
  if (projection_mu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_mu)->GetArena();
    if (message_arena != submessage_arena) {
      projection_mu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projection_mu, submessage_arena);
    }
    
  } else {
    
  }
  projection_mu_ = projection_mu;
  // @@protoc_insertion_point(field_set_allocated:LOPQModelParams.projection_mu)
}

// -------------------------------------------------------------------

// LOPQTrainAndEvalRequest

// .RequestMeta meta = 1;
inline bool LOPQTrainAndEvalRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool LOPQTrainAndEvalRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& LOPQTrainAndEvalRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& LOPQTrainAndEvalRequest::meta() const {
  // @@protoc_insertion_point(field_get:LOPQTrainAndEvalRequest.meta)
  return _internal_meta();
}
inline void LOPQTrainAndEvalRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQTrainAndEvalRequest.meta)
}
inline ::RequestMeta* LOPQTrainAndEvalRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* LOPQTrainAndEvalRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:LOPQTrainAndEvalRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* LOPQTrainAndEvalRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* LOPQTrainAndEvalRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:LOPQTrainAndEvalRequest.meta)
  return _internal_mutable_meta();
}
inline void LOPQTrainAndEvalRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:LOPQTrainAndEvalRequest.meta)
}

// .DataBatch data = 2;
inline bool LOPQTrainAndEvalRequest::_internal_has_data() const {
  return training_data_case() == kData;
}
inline bool LOPQTrainAndEvalRequest::has_data() const {
  return _internal_has_data();
}
inline void LOPQTrainAndEvalRequest::set_has_data() {
  _oneof_case_[0] = kData;
}
inline ::DataBatch* LOPQTrainAndEvalRequest::release_data() {
  // @@protoc_insertion_point(field_release:LOPQTrainAndEvalRequest.data)
  if (_internal_has_data()) {
    clear_has_training_data();
      ::DataBatch* temp = training_data_.data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    training_data_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DataBatch& LOPQTrainAndEvalRequest::_internal_data() const {
  return _internal_has_data()
      ? *training_data_.data_
      : *reinterpret_cast< ::DataBatch*>(&::_DataBatch_default_instance_);
}
inline const ::DataBatch& LOPQTrainAndEvalRequest::data() const {
  // @@protoc_insertion_point(field_get:LOPQTrainAndEvalRequest.data)
  return _internal_data();
}
inline ::DataBatch* LOPQTrainAndEvalRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LOPQTrainAndEvalRequest.data)
  if (_internal_has_data()) {
    clear_has_training_data();
    ::DataBatch* temp = training_data_.data_;
    training_data_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LOPQTrainAndEvalRequest::unsafe_arena_set_allocated_data(::DataBatch* data) {
  clear_training_data();
  if (data) {
    set_has_data();
    training_data_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQTrainAndEvalRequest.data)
}
inline ::DataBatch* LOPQTrainAndEvalRequest::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_training_data();
    set_has_data();
    training_data_.data_ = CreateMaybeMessage< ::DataBatch >(GetArena());
  }
  return training_data_.data_;
}
inline ::DataBatch* LOPQTrainAndEvalRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:LOPQTrainAndEvalRequest.data)
  return _internal_mutable_data();
}

// string sql_query = 3;
inline bool LOPQTrainAndEvalRequest::_internal_has_sql_query() const {
  return training_data_case() == kSqlQuery;
}
inline void LOPQTrainAndEvalRequest::set_has_sql_query() {
  _oneof_case_[0] = kSqlQuery;
}
inline void LOPQTrainAndEvalRequest::clear_sql_query() {
  if (_internal_has_sql_query()) {
    training_data_.sql_query_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_training_data();
  }
}
inline const std::string& LOPQTrainAndEvalRequest::sql_query() const {
  // @@protoc_insertion_point(field_get:LOPQTrainAndEvalRequest.sql_query)
  return _internal_sql_query();
}
inline void LOPQTrainAndEvalRequest::set_sql_query(const std::string& value) {
  _internal_set_sql_query(value);
  // @@protoc_insertion_point(field_set:LOPQTrainAndEvalRequest.sql_query)
}
inline std::string* LOPQTrainAndEvalRequest::mutable_sql_query() {
  // @@protoc_insertion_point(field_mutable:LOPQTrainAndEvalRequest.sql_query)
  return _internal_mutable_sql_query();
}
inline const std::string& LOPQTrainAndEvalRequest::_internal_sql_query() const {
  if (_internal_has_sql_query()) {
    return training_data_.sql_query_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void LOPQTrainAndEvalRequest::_internal_set_sql_query(const std::string& value) {
  if (!_internal_has_sql_query()) {
    clear_training_data();
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  training_data_.sql_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQTrainAndEvalRequest::set_sql_query(std::string&& value) {
  // @@protoc_insertion_point(field_set:LOPQTrainAndEvalRequest.sql_query)
  if (!_internal_has_sql_query()) {
    clear_training_data();
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  training_data_.sql_query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQTrainAndEvalRequest.sql_query)
}
inline void LOPQTrainAndEvalRequest::set_sql_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_sql_query()) {
    clear_training_data();
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  training_data_.sql_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQTrainAndEvalRequest.sql_query)
}
inline void LOPQTrainAndEvalRequest::set_sql_query(const char* value,
                             size_t size) {
  if (!_internal_has_sql_query()) {
    clear_training_data();
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  training_data_.sql_query_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQTrainAndEvalRequest.sql_query)
}
inline std::string* LOPQTrainAndEvalRequest::_internal_mutable_sql_query() {
  if (!_internal_has_sql_query()) {
    clear_training_data();
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return training_data_.sql_query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQTrainAndEvalRequest::release_sql_query() {
  // @@protoc_insertion_point(field_release:LOPQTrainAndEvalRequest.sql_query)
  if (_internal_has_sql_query()) {
    clear_has_training_data();
    return training_data_.sql_query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void LOPQTrainAndEvalRequest::set_allocated_sql_query(std::string* sql_query) {
  if (has_training_data()) {
    clear_training_data();
  }
  if (sql_query != nullptr) {
    set_has_sql_query();
    training_data_.sql_query_.UnsafeSetDefault(sql_query);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(sql_query);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:LOPQTrainAndEvalRequest.sql_query)
}

// string lopq_model_name = 4;
inline void LOPQTrainAndEvalRequest::clear_lopq_model_name() {
  lopq_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQTrainAndEvalRequest::lopq_model_name() const {
  // @@protoc_insertion_point(field_get:LOPQTrainAndEvalRequest.lopq_model_name)
  return _internal_lopq_model_name();
}
inline void LOPQTrainAndEvalRequest::set_lopq_model_name(const std::string& value) {
  _internal_set_lopq_model_name(value);
  // @@protoc_insertion_point(field_set:LOPQTrainAndEvalRequest.lopq_model_name)
}
inline std::string* LOPQTrainAndEvalRequest::mutable_lopq_model_name() {
  // @@protoc_insertion_point(field_mutable:LOPQTrainAndEvalRequest.lopq_model_name)
  return _internal_mutable_lopq_model_name();
}
inline const std::string& LOPQTrainAndEvalRequest::_internal_lopq_model_name() const {
  return lopq_model_name_.Get();
}
inline void LOPQTrainAndEvalRequest::_internal_set_lopq_model_name(const std::string& value) {
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQTrainAndEvalRequest::set_lopq_model_name(std::string&& value) {
  
  lopq_model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQTrainAndEvalRequest.lopq_model_name)
}
inline void LOPQTrainAndEvalRequest::set_lopq_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQTrainAndEvalRequest.lopq_model_name)
}
inline void LOPQTrainAndEvalRequest::set_lopq_model_name(const char* value,
    size_t size) {
  
  lopq_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQTrainAndEvalRequest.lopq_model_name)
}
inline std::string* LOPQTrainAndEvalRequest::_internal_mutable_lopq_model_name() {
  
  return lopq_model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQTrainAndEvalRequest::release_lopq_model_name() {
  // @@protoc_insertion_point(field_release:LOPQTrainAndEvalRequest.lopq_model_name)
  return lopq_model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQTrainAndEvalRequest::set_allocated_lopq_model_name(std::string* lopq_model_name) {
  if (lopq_model_name != nullptr) {
    
  } else {
    
  }
  lopq_model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lopq_model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQTrainAndEvalRequest.lopq_model_name)
}

// int32 train_iters = 5;
inline void LOPQTrainAndEvalRequest::clear_train_iters() {
  train_iters_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQTrainAndEvalRequest::_internal_train_iters() const {
  return train_iters_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQTrainAndEvalRequest::train_iters() const {
  // @@protoc_insertion_point(field_get:LOPQTrainAndEvalRequest.train_iters)
  return _internal_train_iters();
}
inline void LOPQTrainAndEvalRequest::_internal_set_train_iters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  train_iters_ = value;
}
inline void LOPQTrainAndEvalRequest::set_train_iters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_train_iters(value);
  // @@protoc_insertion_point(field_set:LOPQTrainAndEvalRequest.train_iters)
}

// string prev_model_name = 6;
inline void LOPQTrainAndEvalRequest::clear_prev_model_name() {
  prev_model_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQTrainAndEvalRequest::prev_model_name() const {
  // @@protoc_insertion_point(field_get:LOPQTrainAndEvalRequest.prev_model_name)
  return _internal_prev_model_name();
}
inline void LOPQTrainAndEvalRequest::set_prev_model_name(const std::string& value) {
  _internal_set_prev_model_name(value);
  // @@protoc_insertion_point(field_set:LOPQTrainAndEvalRequest.prev_model_name)
}
inline std::string* LOPQTrainAndEvalRequest::mutable_prev_model_name() {
  // @@protoc_insertion_point(field_mutable:LOPQTrainAndEvalRequest.prev_model_name)
  return _internal_mutable_prev_model_name();
}
inline const std::string& LOPQTrainAndEvalRequest::_internal_prev_model_name() const {
  return prev_model_name_.Get();
}
inline void LOPQTrainAndEvalRequest::_internal_set_prev_model_name(const std::string& value) {
  
  prev_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQTrainAndEvalRequest::set_prev_model_name(std::string&& value) {
  
  prev_model_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQTrainAndEvalRequest.prev_model_name)
}
inline void LOPQTrainAndEvalRequest::set_prev_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prev_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQTrainAndEvalRequest.prev_model_name)
}
inline void LOPQTrainAndEvalRequest::set_prev_model_name(const char* value,
    size_t size) {
  
  prev_model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQTrainAndEvalRequest.prev_model_name)
}
inline std::string* LOPQTrainAndEvalRequest::_internal_mutable_prev_model_name() {
  
  return prev_model_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQTrainAndEvalRequest::release_prev_model_name() {
  // @@protoc_insertion_point(field_release:LOPQTrainAndEvalRequest.prev_model_name)
  return prev_model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQTrainAndEvalRequest::set_allocated_prev_model_name(std::string* prev_model_name) {
  if (prev_model_name != nullptr) {
    
  } else {
    
  }
  prev_model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev_model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQTrainAndEvalRequest.prev_model_name)
}

// string spire_name = 7;
inline void LOPQTrainAndEvalRequest::clear_spire_name() {
  spire_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQTrainAndEvalRequest::spire_name() const {
  // @@protoc_insertion_point(field_get:LOPQTrainAndEvalRequest.spire_name)
  return _internal_spire_name();
}
inline void LOPQTrainAndEvalRequest::set_spire_name(const std::string& value) {
  _internal_set_spire_name(value);
  // @@protoc_insertion_point(field_set:LOPQTrainAndEvalRequest.spire_name)
}
inline std::string* LOPQTrainAndEvalRequest::mutable_spire_name() {
  // @@protoc_insertion_point(field_mutable:LOPQTrainAndEvalRequest.spire_name)
  return _internal_mutable_spire_name();
}
inline const std::string& LOPQTrainAndEvalRequest::_internal_spire_name() const {
  return spire_name_.Get();
}
inline void LOPQTrainAndEvalRequest::_internal_set_spire_name(const std::string& value) {
  
  spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQTrainAndEvalRequest::set_spire_name(std::string&& value) {
  
  spire_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQTrainAndEvalRequest.spire_name)
}
inline void LOPQTrainAndEvalRequest::set_spire_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQTrainAndEvalRequest.spire_name)
}
inline void LOPQTrainAndEvalRequest::set_spire_name(const char* value,
    size_t size) {
  
  spire_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQTrainAndEvalRequest.spire_name)
}
inline std::string* LOPQTrainAndEvalRequest::_internal_mutable_spire_name() {
  
  return spire_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQTrainAndEvalRequest::release_spire_name() {
  // @@protoc_insertion_point(field_release:LOPQTrainAndEvalRequest.spire_name)
  return spire_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQTrainAndEvalRequest::set_allocated_spire_name(std::string* spire_name) {
  if (spire_name != nullptr) {
    
  } else {
    
  }
  spire_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spire_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQTrainAndEvalRequest.spire_name)
}

// string hyper_parameters = 8;
inline void LOPQTrainAndEvalRequest::clear_hyper_parameters() {
  hyper_parameters_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LOPQTrainAndEvalRequest::hyper_parameters() const {
  // @@protoc_insertion_point(field_get:LOPQTrainAndEvalRequest.hyper_parameters)
  return _internal_hyper_parameters();
}
inline void LOPQTrainAndEvalRequest::set_hyper_parameters(const std::string& value) {
  _internal_set_hyper_parameters(value);
  // @@protoc_insertion_point(field_set:LOPQTrainAndEvalRequest.hyper_parameters)
}
inline std::string* LOPQTrainAndEvalRequest::mutable_hyper_parameters() {
  // @@protoc_insertion_point(field_mutable:LOPQTrainAndEvalRequest.hyper_parameters)
  return _internal_mutable_hyper_parameters();
}
inline const std::string& LOPQTrainAndEvalRequest::_internal_hyper_parameters() const {
  return hyper_parameters_.Get();
}
inline void LOPQTrainAndEvalRequest::_internal_set_hyper_parameters(const std::string& value) {
  
  hyper_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LOPQTrainAndEvalRequest::set_hyper_parameters(std::string&& value) {
  
  hyper_parameters_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LOPQTrainAndEvalRequest.hyper_parameters)
}
inline void LOPQTrainAndEvalRequest::set_hyper_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hyper_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LOPQTrainAndEvalRequest.hyper_parameters)
}
inline void LOPQTrainAndEvalRequest::set_hyper_parameters(const char* value,
    size_t size) {
  
  hyper_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LOPQTrainAndEvalRequest.hyper_parameters)
}
inline std::string* LOPQTrainAndEvalRequest::_internal_mutable_hyper_parameters() {
  
  return hyper_parameters_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LOPQTrainAndEvalRequest::release_hyper_parameters() {
  // @@protoc_insertion_point(field_release:LOPQTrainAndEvalRequest.hyper_parameters)
  return hyper_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LOPQTrainAndEvalRequest::set_allocated_hyper_parameters(std::string* hyper_parameters) {
  if (hyper_parameters != nullptr) {
    
  } else {
    
  }
  hyper_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hyper_parameters,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LOPQTrainAndEvalRequest.hyper_parameters)
}

inline bool LOPQTrainAndEvalRequest::has_training_data() const {
  return training_data_case() != TRAINING_DATA_NOT_SET;
}
inline void LOPQTrainAndEvalRequest::clear_has_training_data() {
  _oneof_case_[0] = TRAINING_DATA_NOT_SET;
}
inline LOPQTrainAndEvalRequest::TrainingDataCase LOPQTrainAndEvalRequest::training_data_case() const {
  return LOPQTrainAndEvalRequest::TrainingDataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LOPQTrainAndEvalResponse

// .ResponseStatus status = 1;
inline bool LOPQTrainAndEvalResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool LOPQTrainAndEvalResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& LOPQTrainAndEvalResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& LOPQTrainAndEvalResponse::status() const {
  // @@protoc_insertion_point(field_get:LOPQTrainAndEvalResponse.status)
  return _internal_status();
}
inline void LOPQTrainAndEvalResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LOPQTrainAndEvalResponse.status)
}
inline ::ResponseStatus* LOPQTrainAndEvalResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* LOPQTrainAndEvalResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:LOPQTrainAndEvalResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* LOPQTrainAndEvalResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* LOPQTrainAndEvalResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:LOPQTrainAndEvalResponse.status)
  return _internal_mutable_status();
}
inline void LOPQTrainAndEvalResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:LOPQTrainAndEvalResponse.status)
}

// repeated .LOPQEvalResult result = 2;
inline int LOPQTrainAndEvalResponse::_internal_result_size() const {
  return result_.size();
}
inline int LOPQTrainAndEvalResponse::result_size() const {
  return _internal_result_size();
}
inline ::LOPQEvalResult* LOPQTrainAndEvalResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:LOPQTrainAndEvalResponse.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQEvalResult >*
LOPQTrainAndEvalResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:LOPQTrainAndEvalResponse.result)
  return &result_;
}
inline const ::LOPQEvalResult& LOPQTrainAndEvalResponse::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::LOPQEvalResult& LOPQTrainAndEvalResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:LOPQTrainAndEvalResponse.result)
  return _internal_result(index);
}
inline ::LOPQEvalResult* LOPQTrainAndEvalResponse::_internal_add_result() {
  return result_.Add();
}
inline ::LOPQEvalResult* LOPQTrainAndEvalResponse::add_result() {
  // @@protoc_insertion_point(field_add:LOPQTrainAndEvalResponse.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQEvalResult >&
LOPQTrainAndEvalResponse::result() const {
  // @@protoc_insertion_point(field_list:LOPQTrainAndEvalResponse.result)
  return result_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2flopq_2flopq_5fservice_2eproto
