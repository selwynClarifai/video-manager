// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/lopq/lopq_service.proto

#include "proto/lopq/lopq_service.pb.h"
#include "proto/lopq/lopq_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* LOPQService_method_names[] = {
  "/LOPQService/LOPQPredict",
  "/LOPQService/LOPQSearch",
  "/LOPQService/LOPQAttributeSearch",
  "/LOPQService/LOPQSearchForCodes",
  "/LOPQService/LOPQBruteForceSearch",
  "/LOPQService/LOPQTrain",
  "/LOPQService/LOPQTrainAndEval",
};

std::unique_ptr< LOPQService::Stub> LOPQService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LOPQService::Stub> stub(new LOPQService::Stub(channel));
  return stub;
}

LOPQService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_LOPQPredict_(LOPQService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LOPQSearch_(LOPQService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LOPQAttributeSearch_(LOPQService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LOPQSearchForCodes_(LOPQService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LOPQBruteForceSearch_(LOPQService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LOPQTrain_(LOPQService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LOPQTrainAndEval_(LOPQService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LOPQService::Stub::LOPQPredict(::grpc::ClientContext* context, const ::LOPQPredictRequest& request, ::LOPQPredictResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LOPQPredict_, context, request, response);
}

void LOPQService::Stub::experimental_async::LOPQPredict(::grpc::ClientContext* context, const ::LOPQPredictRequest* request, ::LOPQPredictResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LOPQPredict_, context, request, response, std::move(f));
}

void LOPQService::Stub::experimental_async::LOPQPredict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LOPQPredictResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LOPQPredict_, context, request, response, std::move(f));
}

void LOPQService::Stub::experimental_async::LOPQPredict(::grpc::ClientContext* context, const ::LOPQPredictRequest* request, ::LOPQPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LOPQPredict_, context, request, response, reactor);
}

void LOPQService::Stub::experimental_async::LOPQPredict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LOPQPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LOPQPredict_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::LOPQPredictResponse>* LOPQService::Stub::AsyncLOPQPredictRaw(::grpc::ClientContext* context, const ::LOPQPredictRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LOPQPredictResponse>::Create(channel_.get(), cq, rpcmethod_LOPQPredict_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::LOPQPredictResponse>* LOPQService::Stub::PrepareAsyncLOPQPredictRaw(::grpc::ClientContext* context, const ::LOPQPredictRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LOPQPredictResponse>::Create(channel_.get(), cq, rpcmethod_LOPQPredict_, context, request, false);
}

::grpc::Status LOPQService::Stub::LOPQSearch(::grpc::ClientContext* context, const ::LOPQSearchRequest& request, ::LOPQSearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LOPQSearch_, context, request, response);
}

void LOPQService::Stub::experimental_async::LOPQSearch(::grpc::ClientContext* context, const ::LOPQSearchRequest* request, ::LOPQSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LOPQSearch_, context, request, response, std::move(f));
}

void LOPQService::Stub::experimental_async::LOPQSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LOPQSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LOPQSearch_, context, request, response, std::move(f));
}

void LOPQService::Stub::experimental_async::LOPQSearch(::grpc::ClientContext* context, const ::LOPQSearchRequest* request, ::LOPQSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LOPQSearch_, context, request, response, reactor);
}

void LOPQService::Stub::experimental_async::LOPQSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LOPQSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LOPQSearch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::LOPQSearchResponse>* LOPQService::Stub::AsyncLOPQSearchRaw(::grpc::ClientContext* context, const ::LOPQSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LOPQSearchResponse>::Create(channel_.get(), cq, rpcmethod_LOPQSearch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::LOPQSearchResponse>* LOPQService::Stub::PrepareAsyncLOPQSearchRaw(::grpc::ClientContext* context, const ::LOPQSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LOPQSearchResponse>::Create(channel_.get(), cq, rpcmethod_LOPQSearch_, context, request, false);
}

::grpc::Status LOPQService::Stub::LOPQAttributeSearch(::grpc::ClientContext* context, const ::LOPQAttributeSearchRequest& request, ::LOPQSearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LOPQAttributeSearch_, context, request, response);
}

void LOPQService::Stub::experimental_async::LOPQAttributeSearch(::grpc::ClientContext* context, const ::LOPQAttributeSearchRequest* request, ::LOPQSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LOPQAttributeSearch_, context, request, response, std::move(f));
}

void LOPQService::Stub::experimental_async::LOPQAttributeSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LOPQSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LOPQAttributeSearch_, context, request, response, std::move(f));
}

void LOPQService::Stub::experimental_async::LOPQAttributeSearch(::grpc::ClientContext* context, const ::LOPQAttributeSearchRequest* request, ::LOPQSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LOPQAttributeSearch_, context, request, response, reactor);
}

void LOPQService::Stub::experimental_async::LOPQAttributeSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LOPQSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LOPQAttributeSearch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::LOPQSearchResponse>* LOPQService::Stub::AsyncLOPQAttributeSearchRaw(::grpc::ClientContext* context, const ::LOPQAttributeSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LOPQSearchResponse>::Create(channel_.get(), cq, rpcmethod_LOPQAttributeSearch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::LOPQSearchResponse>* LOPQService::Stub::PrepareAsyncLOPQAttributeSearchRaw(::grpc::ClientContext* context, const ::LOPQAttributeSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LOPQSearchResponse>::Create(channel_.get(), cq, rpcmethod_LOPQAttributeSearch_, context, request, false);
}

::grpc::Status LOPQService::Stub::LOPQSearchForCodes(::grpc::ClientContext* context, const ::LOPQSearchForCodesRequest& request, ::LOPQSearchForCodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LOPQSearchForCodes_, context, request, response);
}

void LOPQService::Stub::experimental_async::LOPQSearchForCodes(::grpc::ClientContext* context, const ::LOPQSearchForCodesRequest* request, ::LOPQSearchForCodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LOPQSearchForCodes_, context, request, response, std::move(f));
}

void LOPQService::Stub::experimental_async::LOPQSearchForCodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LOPQSearchForCodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LOPQSearchForCodes_, context, request, response, std::move(f));
}

void LOPQService::Stub::experimental_async::LOPQSearchForCodes(::grpc::ClientContext* context, const ::LOPQSearchForCodesRequest* request, ::LOPQSearchForCodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LOPQSearchForCodes_, context, request, response, reactor);
}

void LOPQService::Stub::experimental_async::LOPQSearchForCodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LOPQSearchForCodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LOPQSearchForCodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::LOPQSearchForCodesResponse>* LOPQService::Stub::AsyncLOPQSearchForCodesRaw(::grpc::ClientContext* context, const ::LOPQSearchForCodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LOPQSearchForCodesResponse>::Create(channel_.get(), cq, rpcmethod_LOPQSearchForCodes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::LOPQSearchForCodesResponse>* LOPQService::Stub::PrepareAsyncLOPQSearchForCodesRaw(::grpc::ClientContext* context, const ::LOPQSearchForCodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LOPQSearchForCodesResponse>::Create(channel_.get(), cq, rpcmethod_LOPQSearchForCodes_, context, request, false);
}

::grpc::Status LOPQService::Stub::LOPQBruteForceSearch(::grpc::ClientContext* context, const ::LOPQBruteForceSearchRequest& request, ::LOPQBruteForceSearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LOPQBruteForceSearch_, context, request, response);
}

void LOPQService::Stub::experimental_async::LOPQBruteForceSearch(::grpc::ClientContext* context, const ::LOPQBruteForceSearchRequest* request, ::LOPQBruteForceSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LOPQBruteForceSearch_, context, request, response, std::move(f));
}

void LOPQService::Stub::experimental_async::LOPQBruteForceSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LOPQBruteForceSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LOPQBruteForceSearch_, context, request, response, std::move(f));
}

void LOPQService::Stub::experimental_async::LOPQBruteForceSearch(::grpc::ClientContext* context, const ::LOPQBruteForceSearchRequest* request, ::LOPQBruteForceSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LOPQBruteForceSearch_, context, request, response, reactor);
}

void LOPQService::Stub::experimental_async::LOPQBruteForceSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LOPQBruteForceSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LOPQBruteForceSearch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::LOPQBruteForceSearchResponse>* LOPQService::Stub::AsyncLOPQBruteForceSearchRaw(::grpc::ClientContext* context, const ::LOPQBruteForceSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LOPQBruteForceSearchResponse>::Create(channel_.get(), cq, rpcmethod_LOPQBruteForceSearch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::LOPQBruteForceSearchResponse>* LOPQService::Stub::PrepareAsyncLOPQBruteForceSearchRaw(::grpc::ClientContext* context, const ::LOPQBruteForceSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LOPQBruteForceSearchResponse>::Create(channel_.get(), cq, rpcmethod_LOPQBruteForceSearch_, context, request, false);
}

::grpc::Status LOPQService::Stub::LOPQTrain(::grpc::ClientContext* context, const ::LOPQTrainRequest& request, ::LOPQTrainResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LOPQTrain_, context, request, response);
}

void LOPQService::Stub::experimental_async::LOPQTrain(::grpc::ClientContext* context, const ::LOPQTrainRequest* request, ::LOPQTrainResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LOPQTrain_, context, request, response, std::move(f));
}

void LOPQService::Stub::experimental_async::LOPQTrain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LOPQTrainResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LOPQTrain_, context, request, response, std::move(f));
}

void LOPQService::Stub::experimental_async::LOPQTrain(::grpc::ClientContext* context, const ::LOPQTrainRequest* request, ::LOPQTrainResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LOPQTrain_, context, request, response, reactor);
}

void LOPQService::Stub::experimental_async::LOPQTrain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LOPQTrainResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LOPQTrain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::LOPQTrainResponse>* LOPQService::Stub::AsyncLOPQTrainRaw(::grpc::ClientContext* context, const ::LOPQTrainRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LOPQTrainResponse>::Create(channel_.get(), cq, rpcmethod_LOPQTrain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::LOPQTrainResponse>* LOPQService::Stub::PrepareAsyncLOPQTrainRaw(::grpc::ClientContext* context, const ::LOPQTrainRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LOPQTrainResponse>::Create(channel_.get(), cq, rpcmethod_LOPQTrain_, context, request, false);
}

::grpc::Status LOPQService::Stub::LOPQTrainAndEval(::grpc::ClientContext* context, const ::LOPQTrainAndEvalRequest& request, ::LOPQTrainAndEvalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LOPQTrainAndEval_, context, request, response);
}

void LOPQService::Stub::experimental_async::LOPQTrainAndEval(::grpc::ClientContext* context, const ::LOPQTrainAndEvalRequest* request, ::LOPQTrainAndEvalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LOPQTrainAndEval_, context, request, response, std::move(f));
}

void LOPQService::Stub::experimental_async::LOPQTrainAndEval(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LOPQTrainAndEvalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LOPQTrainAndEval_, context, request, response, std::move(f));
}

void LOPQService::Stub::experimental_async::LOPQTrainAndEval(::grpc::ClientContext* context, const ::LOPQTrainAndEvalRequest* request, ::LOPQTrainAndEvalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LOPQTrainAndEval_, context, request, response, reactor);
}

void LOPQService::Stub::experimental_async::LOPQTrainAndEval(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LOPQTrainAndEvalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LOPQTrainAndEval_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::LOPQTrainAndEvalResponse>* LOPQService::Stub::AsyncLOPQTrainAndEvalRaw(::grpc::ClientContext* context, const ::LOPQTrainAndEvalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LOPQTrainAndEvalResponse>::Create(channel_.get(), cq, rpcmethod_LOPQTrainAndEval_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::LOPQTrainAndEvalResponse>* LOPQService::Stub::PrepareAsyncLOPQTrainAndEvalRaw(::grpc::ClientContext* context, const ::LOPQTrainAndEvalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LOPQTrainAndEvalResponse>::Create(channel_.get(), cq, rpcmethod_LOPQTrainAndEval_, context, request, false);
}

LOPQService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LOPQService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LOPQService::Service, ::LOPQPredictRequest, ::LOPQPredictResponse>(
          [](LOPQService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::LOPQPredictRequest* req,
             ::LOPQPredictResponse* resp) {
               return service->LOPQPredict(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LOPQService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LOPQService::Service, ::LOPQSearchRequest, ::LOPQSearchResponse>(
          [](LOPQService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::LOPQSearchRequest* req,
             ::LOPQSearchResponse* resp) {
               return service->LOPQSearch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LOPQService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LOPQService::Service, ::LOPQAttributeSearchRequest, ::LOPQSearchResponse>(
          [](LOPQService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::LOPQAttributeSearchRequest* req,
             ::LOPQSearchResponse* resp) {
               return service->LOPQAttributeSearch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LOPQService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LOPQService::Service, ::LOPQSearchForCodesRequest, ::LOPQSearchForCodesResponse>(
          [](LOPQService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::LOPQSearchForCodesRequest* req,
             ::LOPQSearchForCodesResponse* resp) {
               return service->LOPQSearchForCodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LOPQService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LOPQService::Service, ::LOPQBruteForceSearchRequest, ::LOPQBruteForceSearchResponse>(
          [](LOPQService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::LOPQBruteForceSearchRequest* req,
             ::LOPQBruteForceSearchResponse* resp) {
               return service->LOPQBruteForceSearch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LOPQService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LOPQService::Service, ::LOPQTrainRequest, ::LOPQTrainResponse>(
          [](LOPQService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::LOPQTrainRequest* req,
             ::LOPQTrainResponse* resp) {
               return service->LOPQTrain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LOPQService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LOPQService::Service, ::LOPQTrainAndEvalRequest, ::LOPQTrainAndEvalResponse>(
          [](LOPQService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::LOPQTrainAndEvalRequest* req,
             ::LOPQTrainAndEvalResponse* resp) {
               return service->LOPQTrainAndEval(ctx, req, resp);
             }, this)));
}

LOPQService::Service::~Service() {
}

::grpc::Status LOPQService::Service::LOPQPredict(::grpc::ServerContext* context, const ::LOPQPredictRequest* request, ::LOPQPredictResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LOPQService::Service::LOPQSearch(::grpc::ServerContext* context, const ::LOPQSearchRequest* request, ::LOPQSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LOPQService::Service::LOPQAttributeSearch(::grpc::ServerContext* context, const ::LOPQAttributeSearchRequest* request, ::LOPQSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LOPQService::Service::LOPQSearchForCodes(::grpc::ServerContext* context, const ::LOPQSearchForCodesRequest* request, ::LOPQSearchForCodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LOPQService::Service::LOPQBruteForceSearch(::grpc::ServerContext* context, const ::LOPQBruteForceSearchRequest* request, ::LOPQBruteForceSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LOPQService::Service::LOPQTrain(::grpc::ServerContext* context, const ::LOPQTrainRequest* request, ::LOPQTrainResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LOPQService::Service::LOPQTrainAndEval(::grpc::ServerContext* context, const ::LOPQTrainAndEvalRequest* request, ::LOPQTrainAndEvalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


