// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/media_processor/media_processor.proto
#ifndef GRPC_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto__INCLUDED
#define GRPC_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto__INCLUDED

#include "proto/media_processor/media_processor.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class MediaProcessor final {
 public:
  static constexpr char const* service_full_name() {
    return "MediaProcessor";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // MediaProcessorProcessImage processes image examples and returns encoded image bytes streamed
    std::unique_ptr< ::grpc::ClientReaderInterface< ::MediaProcessorProcessImageResponse>> MediaProcessorProcessImage(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::MediaProcessorProcessImageResponse>>(MediaProcessorProcessImageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MediaProcessorProcessImageResponse>> AsyncMediaProcessorProcessImage(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MediaProcessorProcessImageResponse>>(AsyncMediaProcessorProcessImageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MediaProcessorProcessImageResponse>> PrepareAsyncMediaProcessorProcessImage(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MediaProcessorProcessImageResponse>>(PrepareAsyncMediaProcessorProcessImageRaw(context, request, cq));
    }
    // MediaProcessorProcessImageSunc processes image examples and returns encoded image bytes all at once
    virtual ::grpc::Status MediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::MediaProcessorProcessImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessImageResponse>> AsyncMediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessImageResponse>>(AsyncMediaProcessorProcessImageSyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessImageResponse>> PrepareAsyncMediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessImageResponse>>(PrepareAsyncMediaProcessorProcessImageSyncRaw(context, request, cq));
    }
    // MediaProcessorProcessVideo processes video examples and returns encoded video bytes
    virtual ::grpc::Status MediaProcessorProcessVideo(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::MediaProcessorProcessVideoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessVideoResponse>> AsyncMediaProcessorProcessVideo(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessVideoResponse>>(AsyncMediaProcessorProcessVideoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessVideoResponse>> PrepareAsyncMediaProcessorProcessVideo(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessVideoResponse>>(PrepareAsyncMediaProcessorProcessVideoRaw(context, request, cq));
    }
    // MediaProcessorGetVideoThumbnail returns video thumbnail as decoded bytes.
    virtual ::grpc::Status MediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::MediaProcessorProcessVideoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessVideoResponse>> AsyncMediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessVideoResponse>>(AsyncMediaProcessorGetVideoThumbnailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessVideoResponse>> PrepareAsyncMediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessVideoResponse>>(PrepareAsyncMediaProcessorGetVideoThumbnailRaw(context, request, cq));
    }
    // MediaProcessorGetState returns the state of the service
    virtual ::grpc::Status MediaProcessorGetState(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest& request, ::MediaProcessorGetStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorGetStateResponse>> AsyncMediaProcessorGetState(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorGetStateResponse>>(AsyncMediaProcessorGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorGetStateResponse>> PrepareAsyncMediaProcessorGetState(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorGetStateResponse>>(PrepareAsyncMediaProcessorGetStateRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // MediaProcessorProcessImage processes image examples and returns encoded image bytes streamed
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MediaProcessorProcessImage(::grpc::ClientContext* context, ::MediaProcessorProcessImageRequest* request, ::grpc::ClientReadReactor< ::MediaProcessorProcessImageResponse>* reactor) = 0;
      #else
      virtual void MediaProcessorProcessImage(::grpc::ClientContext* context, ::MediaProcessorProcessImageRequest* request, ::grpc::experimental::ClientReadReactor< ::MediaProcessorProcessImageResponse>* reactor) = 0;
      #endif
      // MediaProcessorProcessImageSunc processes image examples and returns encoded image bytes all at once
      virtual void MediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest* request, ::MediaProcessorProcessImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest* request, ::MediaProcessorProcessImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest* request, ::MediaProcessorProcessImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // MediaProcessorProcessVideo processes video examples and returns encoded video bytes
      virtual void MediaProcessorProcessVideo(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MediaProcessorProcessVideo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessVideoResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MediaProcessorProcessVideo(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MediaProcessorProcessVideo(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MediaProcessorProcessVideo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MediaProcessorProcessVideo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // MediaProcessorGetVideoThumbnail returns video thumbnail as decoded bytes.
      virtual void MediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessVideoResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // MediaProcessorGetState returns the state of the service
      virtual void MediaProcessorGetState(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest* request, ::MediaProcessorGetStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MediaProcessorGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorGetStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MediaProcessorGetState(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest* request, ::MediaProcessorGetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MediaProcessorGetState(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest* request, ::MediaProcessorGetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MediaProcessorGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorGetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MediaProcessorGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorGetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::MediaProcessorProcessImageResponse>* MediaProcessorProcessImageRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MediaProcessorProcessImageResponse>* AsyncMediaProcessorProcessImageRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MediaProcessorProcessImageResponse>* PrepareAsyncMediaProcessorProcessImageRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessImageResponse>* AsyncMediaProcessorProcessImageSyncRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessImageResponse>* PrepareAsyncMediaProcessorProcessImageSyncRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessVideoResponse>* AsyncMediaProcessorProcessVideoRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessVideoResponse>* PrepareAsyncMediaProcessorProcessVideoRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessVideoResponse>* AsyncMediaProcessorGetVideoThumbnailRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorProcessVideoResponse>* PrepareAsyncMediaProcessorGetVideoThumbnailRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorGetStateResponse>* AsyncMediaProcessorGetStateRaw(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MediaProcessorGetStateResponse>* PrepareAsyncMediaProcessorGetStateRaw(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::MediaProcessorProcessImageResponse>> MediaProcessorProcessImage(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::MediaProcessorProcessImageResponse>>(MediaProcessorProcessImageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MediaProcessorProcessImageResponse>> AsyncMediaProcessorProcessImage(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MediaProcessorProcessImageResponse>>(AsyncMediaProcessorProcessImageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MediaProcessorProcessImageResponse>> PrepareAsyncMediaProcessorProcessImage(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MediaProcessorProcessImageResponse>>(PrepareAsyncMediaProcessorProcessImageRaw(context, request, cq));
    }
    ::grpc::Status MediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::MediaProcessorProcessImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessImageResponse>> AsyncMediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessImageResponse>>(AsyncMediaProcessorProcessImageSyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessImageResponse>> PrepareAsyncMediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessImageResponse>>(PrepareAsyncMediaProcessorProcessImageSyncRaw(context, request, cq));
    }
    ::grpc::Status MediaProcessorProcessVideo(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::MediaProcessorProcessVideoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessVideoResponse>> AsyncMediaProcessorProcessVideo(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessVideoResponse>>(AsyncMediaProcessorProcessVideoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessVideoResponse>> PrepareAsyncMediaProcessorProcessVideo(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessVideoResponse>>(PrepareAsyncMediaProcessorProcessVideoRaw(context, request, cq));
    }
    ::grpc::Status MediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::MediaProcessorProcessVideoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessVideoResponse>> AsyncMediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessVideoResponse>>(AsyncMediaProcessorGetVideoThumbnailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessVideoResponse>> PrepareAsyncMediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessVideoResponse>>(PrepareAsyncMediaProcessorGetVideoThumbnailRaw(context, request, cq));
    }
    ::grpc::Status MediaProcessorGetState(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest& request, ::MediaProcessorGetStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorGetStateResponse>> AsyncMediaProcessorGetState(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorGetStateResponse>>(AsyncMediaProcessorGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorGetStateResponse>> PrepareAsyncMediaProcessorGetState(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MediaProcessorGetStateResponse>>(PrepareAsyncMediaProcessorGetStateRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MediaProcessorProcessImage(::grpc::ClientContext* context, ::MediaProcessorProcessImageRequest* request, ::grpc::ClientReadReactor< ::MediaProcessorProcessImageResponse>* reactor) override;
      #else
      void MediaProcessorProcessImage(::grpc::ClientContext* context, ::MediaProcessorProcessImageRequest* request, ::grpc::experimental::ClientReadReactor< ::MediaProcessorProcessImageResponse>* reactor) override;
      #endif
      void MediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest* request, ::MediaProcessorProcessImageResponse* response, std::function<void(::grpc::Status)>) override;
      void MediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessImageResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest* request, ::MediaProcessorProcessImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest* request, ::MediaProcessorProcessImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MediaProcessorProcessImageSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void MediaProcessorProcessVideo(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response, std::function<void(::grpc::Status)>) override;
      void MediaProcessorProcessVideo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessVideoResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MediaProcessorProcessVideo(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MediaProcessorProcessVideo(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MediaProcessorProcessVideo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MediaProcessorProcessVideo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void MediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response, std::function<void(::grpc::Status)>) override;
      void MediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessVideoResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MediaProcessorGetVideoThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorProcessVideoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void MediaProcessorGetState(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest* request, ::MediaProcessorGetStateResponse* response, std::function<void(::grpc::Status)>) override;
      void MediaProcessorGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorGetStateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MediaProcessorGetState(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest* request, ::MediaProcessorGetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MediaProcessorGetState(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest* request, ::MediaProcessorGetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MediaProcessorGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorGetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MediaProcessorGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MediaProcessorGetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::MediaProcessorProcessImageResponse>* MediaProcessorProcessImageRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request) override;
    ::grpc::ClientAsyncReader< ::MediaProcessorProcessImageResponse>* AsyncMediaProcessorProcessImageRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::MediaProcessorProcessImageResponse>* PrepareAsyncMediaProcessorProcessImageRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessImageResponse>* AsyncMediaProcessorProcessImageSyncRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessImageResponse>* PrepareAsyncMediaProcessorProcessImageSyncRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessVideoResponse>* AsyncMediaProcessorProcessVideoRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessVideoResponse>* PrepareAsyncMediaProcessorProcessVideoRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessVideoResponse>* AsyncMediaProcessorGetVideoThumbnailRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MediaProcessorProcessVideoResponse>* PrepareAsyncMediaProcessorGetVideoThumbnailRaw(::grpc::ClientContext* context, const ::MediaProcessorProcessVideoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MediaProcessorGetStateResponse>* AsyncMediaProcessorGetStateRaw(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MediaProcessorGetStateResponse>* PrepareAsyncMediaProcessorGetStateRaw(::grpc::ClientContext* context, const ::MediaProcessorGetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_MediaProcessorProcessImage_;
    const ::grpc::internal::RpcMethod rpcmethod_MediaProcessorProcessImageSync_;
    const ::grpc::internal::RpcMethod rpcmethod_MediaProcessorProcessVideo_;
    const ::grpc::internal::RpcMethod rpcmethod_MediaProcessorGetVideoThumbnail_;
    const ::grpc::internal::RpcMethod rpcmethod_MediaProcessorGetState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // MediaProcessorProcessImage processes image examples and returns encoded image bytes streamed
    virtual ::grpc::Status MediaProcessorProcessImage(::grpc::ServerContext* context, const ::MediaProcessorProcessImageRequest* request, ::grpc::ServerWriter< ::MediaProcessorProcessImageResponse>* writer);
    // MediaProcessorProcessImageSunc processes image examples and returns encoded image bytes all at once
    virtual ::grpc::Status MediaProcessorProcessImageSync(::grpc::ServerContext* context, const ::MediaProcessorProcessImageRequest* request, ::MediaProcessorProcessImageResponse* response);
    // MediaProcessorProcessVideo processes video examples and returns encoded video bytes
    virtual ::grpc::Status MediaProcessorProcessVideo(::grpc::ServerContext* context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response);
    // MediaProcessorGetVideoThumbnail returns video thumbnail as decoded bytes.
    virtual ::grpc::Status MediaProcessorGetVideoThumbnail(::grpc::ServerContext* context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response);
    // MediaProcessorGetState returns the state of the service
    virtual ::grpc::Status MediaProcessorGetState(::grpc::ServerContext* context, const ::MediaProcessorGetStateRequest* request, ::MediaProcessorGetStateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_MediaProcessorProcessImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MediaProcessorProcessImage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_MediaProcessorProcessImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorProcessImage(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/, ::grpc::ServerWriter< ::MediaProcessorProcessImageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMediaProcessorProcessImage(::grpc::ServerContext* context, ::MediaProcessorProcessImageRequest* request, ::grpc::ServerAsyncWriter< ::MediaProcessorProcessImageResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MediaProcessorProcessImageSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MediaProcessorProcessImageSync() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_MediaProcessorProcessImageSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorProcessImageSync(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/, ::MediaProcessorProcessImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMediaProcessorProcessImageSync(::grpc::ServerContext* context, ::MediaProcessorProcessImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::MediaProcessorProcessImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MediaProcessorProcessVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MediaProcessorProcessVideo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_MediaProcessorProcessVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorProcessVideo(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMediaProcessorProcessVideo(::grpc::ServerContext* context, ::MediaProcessorProcessVideoRequest* request, ::grpc::ServerAsyncResponseWriter< ::MediaProcessorProcessVideoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MediaProcessorGetVideoThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MediaProcessorGetVideoThumbnail() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_MediaProcessorGetVideoThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorGetVideoThumbnail(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMediaProcessorGetVideoThumbnail(::grpc::ServerContext* context, ::MediaProcessorProcessVideoRequest* request, ::grpc::ServerAsyncResponseWriter< ::MediaProcessorProcessVideoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MediaProcessorGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MediaProcessorGetState() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_MediaProcessorGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorGetState(::grpc::ServerContext* /*context*/, const ::MediaProcessorGetStateRequest* /*request*/, ::MediaProcessorGetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMediaProcessorGetState(::grpc::ServerContext* context, ::MediaProcessorGetStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::MediaProcessorGetStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_MediaProcessorProcessImage<WithAsyncMethod_MediaProcessorProcessImageSync<WithAsyncMethod_MediaProcessorProcessVideo<WithAsyncMethod_MediaProcessorGetVideoThumbnail<WithAsyncMethod_MediaProcessorGetState<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MediaProcessorProcessImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MediaProcessorProcessImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::MediaProcessorProcessImageRequest, ::MediaProcessorProcessImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MediaProcessorProcessImageRequest* request) { return this->MediaProcessorProcessImage(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_MediaProcessorProcessImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorProcessImage(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/, ::grpc::ServerWriter< ::MediaProcessorProcessImageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::MediaProcessorProcessImageResponse>* MediaProcessorProcessImage(
      ::grpc::CallbackServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::MediaProcessorProcessImageResponse>* MediaProcessorProcessImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MediaProcessorProcessImageSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MediaProcessorProcessImageSync() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::MediaProcessorProcessImageRequest, ::MediaProcessorProcessImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MediaProcessorProcessImageRequest* request, ::MediaProcessorProcessImageResponse* response) { return this->MediaProcessorProcessImageSync(context, request, response); }));}
    void SetMessageAllocatorFor_MediaProcessorProcessImageSync(
        ::grpc::experimental::MessageAllocator< ::MediaProcessorProcessImageRequest, ::MediaProcessorProcessImageResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::MediaProcessorProcessImageRequest, ::MediaProcessorProcessImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_MediaProcessorProcessImageSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorProcessImageSync(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/, ::MediaProcessorProcessImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MediaProcessorProcessImageSync(
      ::grpc::CallbackServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/, ::MediaProcessorProcessImageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MediaProcessorProcessImageSync(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/, ::MediaProcessorProcessImageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MediaProcessorProcessVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MediaProcessorProcessVideo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::MediaProcessorProcessVideoRequest, ::MediaProcessorProcessVideoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response) { return this->MediaProcessorProcessVideo(context, request, response); }));}
    void SetMessageAllocatorFor_MediaProcessorProcessVideo(
        ::grpc::experimental::MessageAllocator< ::MediaProcessorProcessVideoRequest, ::MediaProcessorProcessVideoResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::MediaProcessorProcessVideoRequest, ::MediaProcessorProcessVideoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_MediaProcessorProcessVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorProcessVideo(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MediaProcessorProcessVideo(
      ::grpc::CallbackServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MediaProcessorProcessVideo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MediaProcessorGetVideoThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MediaProcessorGetVideoThumbnail() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::MediaProcessorProcessVideoRequest, ::MediaProcessorProcessVideoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MediaProcessorProcessVideoRequest* request, ::MediaProcessorProcessVideoResponse* response) { return this->MediaProcessorGetVideoThumbnail(context, request, response); }));}
    void SetMessageAllocatorFor_MediaProcessorGetVideoThumbnail(
        ::grpc::experimental::MessageAllocator< ::MediaProcessorProcessVideoRequest, ::MediaProcessorProcessVideoResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::MediaProcessorProcessVideoRequest, ::MediaProcessorProcessVideoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_MediaProcessorGetVideoThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorGetVideoThumbnail(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MediaProcessorGetVideoThumbnail(
      ::grpc::CallbackServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MediaProcessorGetVideoThumbnail(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MediaProcessorGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MediaProcessorGetState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::MediaProcessorGetStateRequest, ::MediaProcessorGetStateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MediaProcessorGetStateRequest* request, ::MediaProcessorGetStateResponse* response) { return this->MediaProcessorGetState(context, request, response); }));}
    void SetMessageAllocatorFor_MediaProcessorGetState(
        ::grpc::experimental::MessageAllocator< ::MediaProcessorGetStateRequest, ::MediaProcessorGetStateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::MediaProcessorGetStateRequest, ::MediaProcessorGetStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_MediaProcessorGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorGetState(::grpc::ServerContext* /*context*/, const ::MediaProcessorGetStateRequest* /*request*/, ::MediaProcessorGetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MediaProcessorGetState(
      ::grpc::CallbackServerContext* /*context*/, const ::MediaProcessorGetStateRequest* /*request*/, ::MediaProcessorGetStateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MediaProcessorGetState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MediaProcessorGetStateRequest* /*request*/, ::MediaProcessorGetStateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_MediaProcessorProcessImage<ExperimentalWithCallbackMethod_MediaProcessorProcessImageSync<ExperimentalWithCallbackMethod_MediaProcessorProcessVideo<ExperimentalWithCallbackMethod_MediaProcessorGetVideoThumbnail<ExperimentalWithCallbackMethod_MediaProcessorGetState<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_MediaProcessorProcessImage<ExperimentalWithCallbackMethod_MediaProcessorProcessImageSync<ExperimentalWithCallbackMethod_MediaProcessorProcessVideo<ExperimentalWithCallbackMethod_MediaProcessorGetVideoThumbnail<ExperimentalWithCallbackMethod_MediaProcessorGetState<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_MediaProcessorProcessImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MediaProcessorProcessImage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_MediaProcessorProcessImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorProcessImage(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/, ::grpc::ServerWriter< ::MediaProcessorProcessImageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MediaProcessorProcessImageSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MediaProcessorProcessImageSync() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_MediaProcessorProcessImageSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorProcessImageSync(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/, ::MediaProcessorProcessImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MediaProcessorProcessVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MediaProcessorProcessVideo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_MediaProcessorProcessVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorProcessVideo(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MediaProcessorGetVideoThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MediaProcessorGetVideoThumbnail() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_MediaProcessorGetVideoThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorGetVideoThumbnail(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MediaProcessorGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MediaProcessorGetState() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_MediaProcessorGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorGetState(::grpc::ServerContext* /*context*/, const ::MediaProcessorGetStateRequest* /*request*/, ::MediaProcessorGetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_MediaProcessorProcessImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MediaProcessorProcessImage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_MediaProcessorProcessImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorProcessImage(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/, ::grpc::ServerWriter< ::MediaProcessorProcessImageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMediaProcessorProcessImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MediaProcessorProcessImageSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MediaProcessorProcessImageSync() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_MediaProcessorProcessImageSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorProcessImageSync(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/, ::MediaProcessorProcessImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMediaProcessorProcessImageSync(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MediaProcessorProcessVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MediaProcessorProcessVideo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_MediaProcessorProcessVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorProcessVideo(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMediaProcessorProcessVideo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MediaProcessorGetVideoThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MediaProcessorGetVideoThumbnail() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_MediaProcessorGetVideoThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorGetVideoThumbnail(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMediaProcessorGetVideoThumbnail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MediaProcessorGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MediaProcessorGetState() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_MediaProcessorGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorGetState(::grpc::ServerContext* /*context*/, const ::MediaProcessorGetStateRequest* /*request*/, ::MediaProcessorGetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMediaProcessorGetState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MediaProcessorProcessImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MediaProcessorProcessImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->MediaProcessorProcessImage(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_MediaProcessorProcessImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorProcessImage(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/, ::grpc::ServerWriter< ::MediaProcessorProcessImageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* MediaProcessorProcessImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* MediaProcessorProcessImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MediaProcessorProcessImageSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MediaProcessorProcessImageSync() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MediaProcessorProcessImageSync(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_MediaProcessorProcessImageSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorProcessImageSync(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/, ::MediaProcessorProcessImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MediaProcessorProcessImageSync(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MediaProcessorProcessImageSync(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MediaProcessorProcessVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MediaProcessorProcessVideo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MediaProcessorProcessVideo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_MediaProcessorProcessVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorProcessVideo(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MediaProcessorProcessVideo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MediaProcessorProcessVideo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MediaProcessorGetVideoThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MediaProcessorGetVideoThumbnail() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MediaProcessorGetVideoThumbnail(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_MediaProcessorGetVideoThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorGetVideoThumbnail(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MediaProcessorGetVideoThumbnail(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MediaProcessorGetVideoThumbnail(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MediaProcessorGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MediaProcessorGetState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MediaProcessorGetState(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_MediaProcessorGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MediaProcessorGetState(::grpc::ServerContext* /*context*/, const ::MediaProcessorGetStateRequest* /*request*/, ::MediaProcessorGetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MediaProcessorGetState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MediaProcessorGetState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MediaProcessorProcessImageSync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MediaProcessorProcessImageSync() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MediaProcessorProcessImageRequest, ::MediaProcessorProcessImageResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::MediaProcessorProcessImageRequest, ::MediaProcessorProcessImageResponse>* streamer) {
                       return this->StreamedMediaProcessorProcessImageSync(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MediaProcessorProcessImageSync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MediaProcessorProcessImageSync(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/, ::MediaProcessorProcessImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMediaProcessorProcessImageSync(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MediaProcessorProcessImageRequest,::MediaProcessorProcessImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MediaProcessorProcessVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MediaProcessorProcessVideo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MediaProcessorProcessVideoRequest, ::MediaProcessorProcessVideoResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::MediaProcessorProcessVideoRequest, ::MediaProcessorProcessVideoResponse>* streamer) {
                       return this->StreamedMediaProcessorProcessVideo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MediaProcessorProcessVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MediaProcessorProcessVideo(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMediaProcessorProcessVideo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MediaProcessorProcessVideoRequest,::MediaProcessorProcessVideoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MediaProcessorGetVideoThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MediaProcessorGetVideoThumbnail() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MediaProcessorProcessVideoRequest, ::MediaProcessorProcessVideoResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::MediaProcessorProcessVideoRequest, ::MediaProcessorProcessVideoResponse>* streamer) {
                       return this->StreamedMediaProcessorGetVideoThumbnail(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MediaProcessorGetVideoThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MediaProcessorGetVideoThumbnail(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessVideoRequest* /*request*/, ::MediaProcessorProcessVideoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMediaProcessorGetVideoThumbnail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MediaProcessorProcessVideoRequest,::MediaProcessorProcessVideoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MediaProcessorGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MediaProcessorGetState() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MediaProcessorGetStateRequest, ::MediaProcessorGetStateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::MediaProcessorGetStateRequest, ::MediaProcessorGetStateResponse>* streamer) {
                       return this->StreamedMediaProcessorGetState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MediaProcessorGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MediaProcessorGetState(::grpc::ServerContext* /*context*/, const ::MediaProcessorGetStateRequest* /*request*/, ::MediaProcessorGetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMediaProcessorGetState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MediaProcessorGetStateRequest,::MediaProcessorGetStateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_MediaProcessorProcessImageSync<WithStreamedUnaryMethod_MediaProcessorProcessVideo<WithStreamedUnaryMethod_MediaProcessorGetVideoThumbnail<WithStreamedUnaryMethod_MediaProcessorGetState<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_MediaProcessorProcessImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_MediaProcessorProcessImage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::MediaProcessorProcessImageRequest, ::MediaProcessorProcessImageResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::MediaProcessorProcessImageRequest, ::MediaProcessorProcessImageResponse>* streamer) {
                       return this->StreamedMediaProcessorProcessImage(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_MediaProcessorProcessImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MediaProcessorProcessImage(::grpc::ServerContext* /*context*/, const ::MediaProcessorProcessImageRequest* /*request*/, ::grpc::ServerWriter< ::MediaProcessorProcessImageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedMediaProcessorProcessImage(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::MediaProcessorProcessImageRequest,::MediaProcessorProcessImageResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_MediaProcessorProcessImage<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_MediaProcessorProcessImage<WithStreamedUnaryMethod_MediaProcessorProcessImageSync<WithStreamedUnaryMethod_MediaProcessorProcessVideo<WithStreamedUnaryMethod_MediaProcessorGetVideoThumbnail<WithStreamedUnaryMethod_MediaProcessorGetState<Service > > > > > StreamedService;
};


#endif  // GRPC_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto__INCLUDED
