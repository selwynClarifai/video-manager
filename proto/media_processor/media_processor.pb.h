// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/media_processor/media_processor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/media_processor/media.pb.h"
#include "proto/utils/databatch.pb.h"
#include "proto/utils/request_meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto;
class MediaProcessorGetStateRequest;
class MediaProcessorGetStateRequestDefaultTypeInternal;
extern MediaProcessorGetStateRequestDefaultTypeInternal _MediaProcessorGetStateRequest_default_instance_;
class MediaProcessorGetStateResponse;
class MediaProcessorGetStateResponseDefaultTypeInternal;
extern MediaProcessorGetStateResponseDefaultTypeInternal _MediaProcessorGetStateResponse_default_instance_;
class MediaProcessorProcessImageRequest;
class MediaProcessorProcessImageRequestDefaultTypeInternal;
extern MediaProcessorProcessImageRequestDefaultTypeInternal _MediaProcessorProcessImageRequest_default_instance_;
class MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUse;
class MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUseDefaultTypeInternal;
extern MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUseDefaultTypeInternal _MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUse_default_instance_;
class MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUse;
class MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUseDefaultTypeInternal;
extern MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUseDefaultTypeInternal _MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUse_default_instance_;
class MediaProcessorProcessImageResponse;
class MediaProcessorProcessImageResponseDefaultTypeInternal;
extern MediaProcessorProcessImageResponseDefaultTypeInternal _MediaProcessorProcessImageResponse_default_instance_;
class MediaProcessorProcessImageResponse_ResultsEntry_DoNotUse;
class MediaProcessorProcessImageResponse_ResultsEntry_DoNotUseDefaultTypeInternal;
extern MediaProcessorProcessImageResponse_ResultsEntry_DoNotUseDefaultTypeInternal _MediaProcessorProcessImageResponse_ResultsEntry_DoNotUse_default_instance_;
class MediaProcessorProcessVideoRequest;
class MediaProcessorProcessVideoRequestDefaultTypeInternal;
extern MediaProcessorProcessVideoRequestDefaultTypeInternal _MediaProcessorProcessVideoRequest_default_instance_;
class MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUse;
class MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUseDefaultTypeInternal;
extern MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUseDefaultTypeInternal _MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUse_default_instance_;
class MediaProcessorProcessVideoResponse;
class MediaProcessorProcessVideoResponseDefaultTypeInternal;
extern MediaProcessorProcessVideoResponseDefaultTypeInternal _MediaProcessorProcessVideoResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MediaProcessorGetStateRequest* Arena::CreateMaybeMessage<::MediaProcessorGetStateRequest>(Arena*);
template<> ::MediaProcessorGetStateResponse* Arena::CreateMaybeMessage<::MediaProcessorGetStateResponse>(Arena*);
template<> ::MediaProcessorProcessImageRequest* Arena::CreateMaybeMessage<::MediaProcessorProcessImageRequest>(Arena*);
template<> ::MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUse* Arena::CreateMaybeMessage<::MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUse>(Arena*);
template<> ::MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUse* Arena::CreateMaybeMessage<::MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUse>(Arena*);
template<> ::MediaProcessorProcessImageResponse* Arena::CreateMaybeMessage<::MediaProcessorProcessImageResponse>(Arena*);
template<> ::MediaProcessorProcessImageResponse_ResultsEntry_DoNotUse* Arena::CreateMaybeMessage<::MediaProcessorProcessImageResponse_ResultsEntry_DoNotUse>(Arena*);
template<> ::MediaProcessorProcessVideoRequest* Arena::CreateMaybeMessage<::MediaProcessorProcessVideoRequest>(Arena*);
template<> ::MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUse* Arena::CreateMaybeMessage<::MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUse>(Arena*);
template<> ::MediaProcessorProcessVideoResponse* Arena::CreateMaybeMessage<::MediaProcessorProcessVideoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUse, 
    std::string, ::ImageOutputFormats,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUse, 
    std::string, ::ImageOutputFormats,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUse();
  explicit MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUse& other);
  static const MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUse*>(&_MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MediaProcessorProcessImageRequest.OutputFormatsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUse, 
    std::string, ::MultipleImageOutputFormat,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUse, 
    std::string, ::MultipleImageOutputFormat,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUse();
  explicit MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUse& other);
  static const MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUse*>(&_MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MediaProcessorProcessImageRequest.MultiOutputFormatsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class MediaProcessorProcessImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MediaProcessorProcessImageRequest) */ {
 public:
  inline MediaProcessorProcessImageRequest() : MediaProcessorProcessImageRequest(nullptr) {}
  virtual ~MediaProcessorProcessImageRequest();

  MediaProcessorProcessImageRequest(const MediaProcessorProcessImageRequest& from);
  MediaProcessorProcessImageRequest(MediaProcessorProcessImageRequest&& from) noexcept
    : MediaProcessorProcessImageRequest() {
    *this = ::std::move(from);
  }

  inline MediaProcessorProcessImageRequest& operator=(const MediaProcessorProcessImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaProcessorProcessImageRequest& operator=(MediaProcessorProcessImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaProcessorProcessImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaProcessorProcessImageRequest* internal_default_instance() {
    return reinterpret_cast<const MediaProcessorProcessImageRequest*>(
               &_MediaProcessorProcessImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MediaProcessorProcessImageRequest& a, MediaProcessorProcessImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaProcessorProcessImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaProcessorProcessImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaProcessorProcessImageRequest* New() const final {
    return CreateMaybeMessage<MediaProcessorProcessImageRequest>(nullptr);
  }

  MediaProcessorProcessImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaProcessorProcessImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaProcessorProcessImageRequest& from);
  void MergeFrom(const MediaProcessorProcessImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaProcessorProcessImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MediaProcessorProcessImageRequest";
  }
  protected:
  explicit MediaProcessorProcessImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOutputFormatsFieldNumber = 3,
    kMultiOutputFormatsFieldNumber = 4,
    kMetaFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // map<string, .ImageOutputFormats> output_formats = 3;
  int output_formats_size() const;
  private:
  int _internal_output_formats_size() const;
  public:
  void clear_output_formats();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ImageOutputFormats >&
      _internal_output_formats() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ImageOutputFormats >*
      _internal_mutable_output_formats();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ImageOutputFormats >&
      output_formats() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ImageOutputFormats >*
      mutable_output_formats();

  // map<string, .MultipleImageOutputFormat> multi_output_formats = 4;
  int multi_output_formats_size() const;
  private:
  int _internal_multi_output_formats_size() const;
  public:
  void clear_multi_output_formats();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultipleImageOutputFormat >&
      _internal_multi_output_formats() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultipleImageOutputFormat >*
      _internal_mutable_multi_output_formats();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultipleImageOutputFormat >&
      multi_output_formats() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultipleImageOutputFormat >*
      mutable_multi_output_formats();

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .DataBatch data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DataBatch& data() const;
  ::DataBatch* release_data();
  ::DataBatch* mutable_data();
  void set_allocated_data(::DataBatch* data);
  private:
  const ::DataBatch& _internal_data() const;
  ::DataBatch* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DataBatch* data);
  ::DataBatch* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:MediaProcessorProcessImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MediaProcessorProcessImageRequest_OutputFormatsEntry_DoNotUse,
      std::string, ::ImageOutputFormats,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > output_formats_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MediaProcessorProcessImageRequest_MultiOutputFormatsEntry_DoNotUse,
      std::string, ::MultipleImageOutputFormat,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > multi_output_formats_;
  ::RequestMeta* meta_;
  ::DataBatch* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto;
};
// -------------------------------------------------------------------

class MediaProcessorProcessImageResponse_ResultsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MediaProcessorProcessImageResponse_ResultsEntry_DoNotUse, 
    std::string, ::DataBatch,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MediaProcessorProcessImageResponse_ResultsEntry_DoNotUse, 
    std::string, ::DataBatch,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MediaProcessorProcessImageResponse_ResultsEntry_DoNotUse();
  explicit MediaProcessorProcessImageResponse_ResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MediaProcessorProcessImageResponse_ResultsEntry_DoNotUse& other);
  static const MediaProcessorProcessImageResponse_ResultsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MediaProcessorProcessImageResponse_ResultsEntry_DoNotUse*>(&_MediaProcessorProcessImageResponse_ResultsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MediaProcessorProcessImageResponse.ResultsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class MediaProcessorProcessImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MediaProcessorProcessImageResponse) */ {
 public:
  inline MediaProcessorProcessImageResponse() : MediaProcessorProcessImageResponse(nullptr) {}
  virtual ~MediaProcessorProcessImageResponse();

  MediaProcessorProcessImageResponse(const MediaProcessorProcessImageResponse& from);
  MediaProcessorProcessImageResponse(MediaProcessorProcessImageResponse&& from) noexcept
    : MediaProcessorProcessImageResponse() {
    *this = ::std::move(from);
  }

  inline MediaProcessorProcessImageResponse& operator=(const MediaProcessorProcessImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaProcessorProcessImageResponse& operator=(MediaProcessorProcessImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaProcessorProcessImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaProcessorProcessImageResponse* internal_default_instance() {
    return reinterpret_cast<const MediaProcessorProcessImageResponse*>(
               &_MediaProcessorProcessImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MediaProcessorProcessImageResponse& a, MediaProcessorProcessImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaProcessorProcessImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaProcessorProcessImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaProcessorProcessImageResponse* New() const final {
    return CreateMaybeMessage<MediaProcessorProcessImageResponse>(nullptr);
  }

  MediaProcessorProcessImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaProcessorProcessImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaProcessorProcessImageResponse& from);
  void MergeFrom(const MediaProcessorProcessImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaProcessorProcessImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MediaProcessorProcessImageResponse";
  }
  protected:
  explicit MediaProcessorProcessImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // map<string, .DataBatch> results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataBatch >&
      _internal_results() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataBatch >*
      _internal_mutable_results();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataBatch >&
      results() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataBatch >*
      mutable_results();

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:MediaProcessorProcessImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MediaProcessorProcessImageResponse_ResultsEntry_DoNotUse,
      std::string, ::DataBatch,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > results_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto;
};
// -------------------------------------------------------------------

class MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUse, 
    std::string, ::VideoOutputFormats,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUse, 
    std::string, ::VideoOutputFormats,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUse();
  explicit MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUse& other);
  static const MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUse*>(&_MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MediaProcessorProcessVideoRequest.OutputFormatsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class MediaProcessorProcessVideoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MediaProcessorProcessVideoRequest) */ {
 public:
  inline MediaProcessorProcessVideoRequest() : MediaProcessorProcessVideoRequest(nullptr) {}
  virtual ~MediaProcessorProcessVideoRequest();

  MediaProcessorProcessVideoRequest(const MediaProcessorProcessVideoRequest& from);
  MediaProcessorProcessVideoRequest(MediaProcessorProcessVideoRequest&& from) noexcept
    : MediaProcessorProcessVideoRequest() {
    *this = ::std::move(from);
  }

  inline MediaProcessorProcessVideoRequest& operator=(const MediaProcessorProcessVideoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaProcessorProcessVideoRequest& operator=(MediaProcessorProcessVideoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaProcessorProcessVideoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaProcessorProcessVideoRequest* internal_default_instance() {
    return reinterpret_cast<const MediaProcessorProcessVideoRequest*>(
               &_MediaProcessorProcessVideoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MediaProcessorProcessVideoRequest& a, MediaProcessorProcessVideoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaProcessorProcessVideoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaProcessorProcessVideoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaProcessorProcessVideoRequest* New() const final {
    return CreateMaybeMessage<MediaProcessorProcessVideoRequest>(nullptr);
  }

  MediaProcessorProcessVideoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaProcessorProcessVideoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaProcessorProcessVideoRequest& from);
  void MergeFrom(const MediaProcessorProcessVideoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaProcessorProcessVideoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MediaProcessorProcessVideoRequest";
  }
  protected:
  explicit MediaProcessorProcessVideoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOutputFormatsFieldNumber = 3,
    kMetaFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // map<string, .VideoOutputFormats> output_formats = 3;
  int output_formats_size() const;
  private:
  int _internal_output_formats_size() const;
  public:
  void clear_output_formats();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::VideoOutputFormats >&
      _internal_output_formats() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::VideoOutputFormats >*
      _internal_mutable_output_formats();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::VideoOutputFormats >&
      output_formats() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::VideoOutputFormats >*
      mutable_output_formats();

  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // .DataBatch data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DataBatch& data() const;
  ::DataBatch* release_data();
  ::DataBatch* mutable_data();
  void set_allocated_data(::DataBatch* data);
  private:
  const ::DataBatch& _internal_data() const;
  ::DataBatch* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DataBatch* data);
  ::DataBatch* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:MediaProcessorProcessVideoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MediaProcessorProcessVideoRequest_OutputFormatsEntry_DoNotUse,
      std::string, ::VideoOutputFormats,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > output_formats_;
  ::RequestMeta* meta_;
  ::DataBatch* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto;
};
// -------------------------------------------------------------------

class MediaProcessorProcessVideoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MediaProcessorProcessVideoResponse) */ {
 public:
  inline MediaProcessorProcessVideoResponse() : MediaProcessorProcessVideoResponse(nullptr) {}
  virtual ~MediaProcessorProcessVideoResponse();

  MediaProcessorProcessVideoResponse(const MediaProcessorProcessVideoResponse& from);
  MediaProcessorProcessVideoResponse(MediaProcessorProcessVideoResponse&& from) noexcept
    : MediaProcessorProcessVideoResponse() {
    *this = ::std::move(from);
  }

  inline MediaProcessorProcessVideoResponse& operator=(const MediaProcessorProcessVideoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaProcessorProcessVideoResponse& operator=(MediaProcessorProcessVideoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaProcessorProcessVideoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaProcessorProcessVideoResponse* internal_default_instance() {
    return reinterpret_cast<const MediaProcessorProcessVideoResponse*>(
               &_MediaProcessorProcessVideoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MediaProcessorProcessVideoResponse& a, MediaProcessorProcessVideoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaProcessorProcessVideoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaProcessorProcessVideoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaProcessorProcessVideoResponse* New() const final {
    return CreateMaybeMessage<MediaProcessorProcessVideoResponse>(nullptr);
  }

  MediaProcessorProcessVideoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaProcessorProcessVideoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaProcessorProcessVideoResponse& from);
  void MergeFrom(const MediaProcessorProcessVideoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaProcessorProcessVideoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MediaProcessorProcessVideoResponse";
  }
  protected:
  explicit MediaProcessorProcessVideoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kResultsFieldNumber = 2,
  };
  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // .DataBatch results = 2;
  bool has_results() const;
  private:
  bool _internal_has_results() const;
  public:
  void clear_results();
  const ::DataBatch& results() const;
  ::DataBatch* release_results();
  ::DataBatch* mutable_results();
  void set_allocated_results(::DataBatch* results);
  private:
  const ::DataBatch& _internal_results() const;
  ::DataBatch* _internal_mutable_results();
  public:
  void unsafe_arena_set_allocated_results(
      ::DataBatch* results);
  ::DataBatch* unsafe_arena_release_results();

  // @@protoc_insertion_point(class_scope:MediaProcessorProcessVideoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ResponseStatus* status_;
  ::DataBatch* results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto;
};
// -------------------------------------------------------------------

class MediaProcessorGetStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MediaProcessorGetStateRequest) */ {
 public:
  inline MediaProcessorGetStateRequest() : MediaProcessorGetStateRequest(nullptr) {}
  virtual ~MediaProcessorGetStateRequest();

  MediaProcessorGetStateRequest(const MediaProcessorGetStateRequest& from);
  MediaProcessorGetStateRequest(MediaProcessorGetStateRequest&& from) noexcept
    : MediaProcessorGetStateRequest() {
    *this = ::std::move(from);
  }

  inline MediaProcessorGetStateRequest& operator=(const MediaProcessorGetStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaProcessorGetStateRequest& operator=(MediaProcessorGetStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaProcessorGetStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaProcessorGetStateRequest* internal_default_instance() {
    return reinterpret_cast<const MediaProcessorGetStateRequest*>(
               &_MediaProcessorGetStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MediaProcessorGetStateRequest& a, MediaProcessorGetStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaProcessorGetStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaProcessorGetStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaProcessorGetStateRequest* New() const final {
    return CreateMaybeMessage<MediaProcessorGetStateRequest>(nullptr);
  }

  MediaProcessorGetStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaProcessorGetStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaProcessorGetStateRequest& from);
  void MergeFrom(const MediaProcessorGetStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaProcessorGetStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MediaProcessorGetStateRequest";
  }
  protected:
  explicit MediaProcessorGetStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
  };
  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::RequestMeta* meta);
  ::RequestMeta* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:MediaProcessorGetStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::RequestMeta* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto;
};
// -------------------------------------------------------------------

class MediaProcessorGetStateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MediaProcessorGetStateResponse) */ {
 public:
  inline MediaProcessorGetStateResponse() : MediaProcessorGetStateResponse(nullptr) {}
  virtual ~MediaProcessorGetStateResponse();

  MediaProcessorGetStateResponse(const MediaProcessorGetStateResponse& from);
  MediaProcessorGetStateResponse(MediaProcessorGetStateResponse&& from) noexcept
    : MediaProcessorGetStateResponse() {
    *this = ::std::move(from);
  }

  inline MediaProcessorGetStateResponse& operator=(const MediaProcessorGetStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaProcessorGetStateResponse& operator=(MediaProcessorGetStateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaProcessorGetStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaProcessorGetStateResponse* internal_default_instance() {
    return reinterpret_cast<const MediaProcessorGetStateResponse*>(
               &_MediaProcessorGetStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MediaProcessorGetStateResponse& a, MediaProcessorGetStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaProcessorGetStateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaProcessorGetStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaProcessorGetStateResponse* New() const final {
    return CreateMaybeMessage<MediaProcessorGetStateResponse>(nullptr);
  }

  MediaProcessorGetStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaProcessorGetStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaProcessorGetStateResponse& from);
  void MergeFrom(const MediaProcessorGetStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaProcessorGetStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MediaProcessorGetStateResponse";
  }
  protected:
  explicit MediaProcessorGetStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string state = 2;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ResponseStatus* status);
  ::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:MediaProcessorGetStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MediaProcessorProcessImageRequest

// .RequestMeta meta = 1;
inline bool MediaProcessorProcessImageRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool MediaProcessorProcessImageRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& MediaProcessorProcessImageRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& MediaProcessorProcessImageRequest::meta() const {
  // @@protoc_insertion_point(field_get:MediaProcessorProcessImageRequest.meta)
  return _internal_meta();
}
inline void MediaProcessorProcessImageRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MediaProcessorProcessImageRequest.meta)
}
inline ::RequestMeta* MediaProcessorProcessImageRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* MediaProcessorProcessImageRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:MediaProcessorProcessImageRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* MediaProcessorProcessImageRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* MediaProcessorProcessImageRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:MediaProcessorProcessImageRequest.meta)
  return _internal_mutable_meta();
}
inline void MediaProcessorProcessImageRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:MediaProcessorProcessImageRequest.meta)
}

// .DataBatch data = 2;
inline bool MediaProcessorProcessImageRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool MediaProcessorProcessImageRequest::has_data() const {
  return _internal_has_data();
}
inline const ::DataBatch& MediaProcessorProcessImageRequest::_internal_data() const {
  const ::DataBatch* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& MediaProcessorProcessImageRequest::data() const {
  // @@protoc_insertion_point(field_get:MediaProcessorProcessImageRequest.data)
  return _internal_data();
}
inline void MediaProcessorProcessImageRequest::unsafe_arena_set_allocated_data(
    ::DataBatch* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MediaProcessorProcessImageRequest.data)
}
inline ::DataBatch* MediaProcessorProcessImageRequest::release_data() {
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* MediaProcessorProcessImageRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:MediaProcessorProcessImageRequest.data)
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DataBatch* MediaProcessorProcessImageRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::DataBatch* MediaProcessorProcessImageRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:MediaProcessorProcessImageRequest.data)
  return _internal_mutable_data();
}
inline void MediaProcessorProcessImageRequest::set_allocated_data(::DataBatch* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:MediaProcessorProcessImageRequest.data)
}

// map<string, .ImageOutputFormats> output_formats = 3;
inline int MediaProcessorProcessImageRequest::_internal_output_formats_size() const {
  return output_formats_.size();
}
inline int MediaProcessorProcessImageRequest::output_formats_size() const {
  return _internal_output_formats_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ImageOutputFormats >&
MediaProcessorProcessImageRequest::_internal_output_formats() const {
  return output_formats_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ImageOutputFormats >&
MediaProcessorProcessImageRequest::output_formats() const {
  // @@protoc_insertion_point(field_map:MediaProcessorProcessImageRequest.output_formats)
  return _internal_output_formats();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ImageOutputFormats >*
MediaProcessorProcessImageRequest::_internal_mutable_output_formats() {
  return output_formats_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ImageOutputFormats >*
MediaProcessorProcessImageRequest::mutable_output_formats() {
  // @@protoc_insertion_point(field_mutable_map:MediaProcessorProcessImageRequest.output_formats)
  return _internal_mutable_output_formats();
}

// map<string, .MultipleImageOutputFormat> multi_output_formats = 4;
inline int MediaProcessorProcessImageRequest::_internal_multi_output_formats_size() const {
  return multi_output_formats_.size();
}
inline int MediaProcessorProcessImageRequest::multi_output_formats_size() const {
  return _internal_multi_output_formats_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultipleImageOutputFormat >&
MediaProcessorProcessImageRequest::_internal_multi_output_formats() const {
  return multi_output_formats_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultipleImageOutputFormat >&
MediaProcessorProcessImageRequest::multi_output_formats() const {
  // @@protoc_insertion_point(field_map:MediaProcessorProcessImageRequest.multi_output_formats)
  return _internal_multi_output_formats();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultipleImageOutputFormat >*
MediaProcessorProcessImageRequest::_internal_mutable_multi_output_formats() {
  return multi_output_formats_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultipleImageOutputFormat >*
MediaProcessorProcessImageRequest::mutable_multi_output_formats() {
  // @@protoc_insertion_point(field_mutable_map:MediaProcessorProcessImageRequest.multi_output_formats)
  return _internal_mutable_multi_output_formats();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MediaProcessorProcessImageResponse

// .ResponseStatus status = 1;
inline bool MediaProcessorProcessImageResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MediaProcessorProcessImageResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& MediaProcessorProcessImageResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& MediaProcessorProcessImageResponse::status() const {
  // @@protoc_insertion_point(field_get:MediaProcessorProcessImageResponse.status)
  return _internal_status();
}
inline void MediaProcessorProcessImageResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MediaProcessorProcessImageResponse.status)
}
inline ::ResponseStatus* MediaProcessorProcessImageResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* MediaProcessorProcessImageResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:MediaProcessorProcessImageResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* MediaProcessorProcessImageResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* MediaProcessorProcessImageResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:MediaProcessorProcessImageResponse.status)
  return _internal_mutable_status();
}
inline void MediaProcessorProcessImageResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:MediaProcessorProcessImageResponse.status)
}

// map<string, .DataBatch> results = 2;
inline int MediaProcessorProcessImageResponse::_internal_results_size() const {
  return results_.size();
}
inline int MediaProcessorProcessImageResponse::results_size() const {
  return _internal_results_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataBatch >&
MediaProcessorProcessImageResponse::_internal_results() const {
  return results_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataBatch >&
MediaProcessorProcessImageResponse::results() const {
  // @@protoc_insertion_point(field_map:MediaProcessorProcessImageResponse.results)
  return _internal_results();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataBatch >*
MediaProcessorProcessImageResponse::_internal_mutable_results() {
  return results_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataBatch >*
MediaProcessorProcessImageResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_map:MediaProcessorProcessImageResponse.results)
  return _internal_mutable_results();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MediaProcessorProcessVideoRequest

// .RequestMeta meta = 1;
inline bool MediaProcessorProcessVideoRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool MediaProcessorProcessVideoRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& MediaProcessorProcessVideoRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& MediaProcessorProcessVideoRequest::meta() const {
  // @@protoc_insertion_point(field_get:MediaProcessorProcessVideoRequest.meta)
  return _internal_meta();
}
inline void MediaProcessorProcessVideoRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MediaProcessorProcessVideoRequest.meta)
}
inline ::RequestMeta* MediaProcessorProcessVideoRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* MediaProcessorProcessVideoRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:MediaProcessorProcessVideoRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* MediaProcessorProcessVideoRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* MediaProcessorProcessVideoRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:MediaProcessorProcessVideoRequest.meta)
  return _internal_mutable_meta();
}
inline void MediaProcessorProcessVideoRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:MediaProcessorProcessVideoRequest.meta)
}

// .DataBatch data = 2;
inline bool MediaProcessorProcessVideoRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool MediaProcessorProcessVideoRequest::has_data() const {
  return _internal_has_data();
}
inline const ::DataBatch& MediaProcessorProcessVideoRequest::_internal_data() const {
  const ::DataBatch* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& MediaProcessorProcessVideoRequest::data() const {
  // @@protoc_insertion_point(field_get:MediaProcessorProcessVideoRequest.data)
  return _internal_data();
}
inline void MediaProcessorProcessVideoRequest::unsafe_arena_set_allocated_data(
    ::DataBatch* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MediaProcessorProcessVideoRequest.data)
}
inline ::DataBatch* MediaProcessorProcessVideoRequest::release_data() {
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* MediaProcessorProcessVideoRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:MediaProcessorProcessVideoRequest.data)
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DataBatch* MediaProcessorProcessVideoRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::DataBatch* MediaProcessorProcessVideoRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:MediaProcessorProcessVideoRequest.data)
  return _internal_mutable_data();
}
inline void MediaProcessorProcessVideoRequest::set_allocated_data(::DataBatch* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:MediaProcessorProcessVideoRequest.data)
}

// map<string, .VideoOutputFormats> output_formats = 3;
inline int MediaProcessorProcessVideoRequest::_internal_output_formats_size() const {
  return output_formats_.size();
}
inline int MediaProcessorProcessVideoRequest::output_formats_size() const {
  return _internal_output_formats_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::VideoOutputFormats >&
MediaProcessorProcessVideoRequest::_internal_output_formats() const {
  return output_formats_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::VideoOutputFormats >&
MediaProcessorProcessVideoRequest::output_formats() const {
  // @@protoc_insertion_point(field_map:MediaProcessorProcessVideoRequest.output_formats)
  return _internal_output_formats();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::VideoOutputFormats >*
MediaProcessorProcessVideoRequest::_internal_mutable_output_formats() {
  return output_formats_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::VideoOutputFormats >*
MediaProcessorProcessVideoRequest::mutable_output_formats() {
  // @@protoc_insertion_point(field_mutable_map:MediaProcessorProcessVideoRequest.output_formats)
  return _internal_mutable_output_formats();
}

// -------------------------------------------------------------------

// MediaProcessorProcessVideoResponse

// .ResponseStatus status = 1;
inline bool MediaProcessorProcessVideoResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MediaProcessorProcessVideoResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& MediaProcessorProcessVideoResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& MediaProcessorProcessVideoResponse::status() const {
  // @@protoc_insertion_point(field_get:MediaProcessorProcessVideoResponse.status)
  return _internal_status();
}
inline void MediaProcessorProcessVideoResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MediaProcessorProcessVideoResponse.status)
}
inline ::ResponseStatus* MediaProcessorProcessVideoResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* MediaProcessorProcessVideoResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:MediaProcessorProcessVideoResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* MediaProcessorProcessVideoResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* MediaProcessorProcessVideoResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:MediaProcessorProcessVideoResponse.status)
  return _internal_mutable_status();
}
inline void MediaProcessorProcessVideoResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:MediaProcessorProcessVideoResponse.status)
}

// .DataBatch results = 2;
inline bool MediaProcessorProcessVideoResponse::_internal_has_results() const {
  return this != internal_default_instance() && results_ != nullptr;
}
inline bool MediaProcessorProcessVideoResponse::has_results() const {
  return _internal_has_results();
}
inline const ::DataBatch& MediaProcessorProcessVideoResponse::_internal_results() const {
  const ::DataBatch* p = results_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& MediaProcessorProcessVideoResponse::results() const {
  // @@protoc_insertion_point(field_get:MediaProcessorProcessVideoResponse.results)
  return _internal_results();
}
inline void MediaProcessorProcessVideoResponse::unsafe_arena_set_allocated_results(
    ::DataBatch* results) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_);
  }
  results_ = results;
  if (results) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MediaProcessorProcessVideoResponse.results)
}
inline ::DataBatch* MediaProcessorProcessVideoResponse::release_results() {
  
  ::DataBatch* temp = results_;
  results_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DataBatch* MediaProcessorProcessVideoResponse::unsafe_arena_release_results() {
  // @@protoc_insertion_point(field_release:MediaProcessorProcessVideoResponse.results)
  
  ::DataBatch* temp = results_;
  results_ = nullptr;
  return temp;
}
inline ::DataBatch* MediaProcessorProcessVideoResponse::_internal_mutable_results() {
  
  if (results_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArena());
    results_ = p;
  }
  return results_;
}
inline ::DataBatch* MediaProcessorProcessVideoResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable:MediaProcessorProcessVideoResponse.results)
  return _internal_mutable_results();
}
inline void MediaProcessorProcessVideoResponse::set_allocated_results(::DataBatch* results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_);
  }
  if (results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(results)->GetArena();
    if (message_arena != submessage_arena) {
      results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, results, submessage_arena);
    }
    
  } else {
    
  }
  results_ = results;
  // @@protoc_insertion_point(field_set_allocated:MediaProcessorProcessVideoResponse.results)
}

// -------------------------------------------------------------------

// MediaProcessorGetStateRequest

// .RequestMeta meta = 1;
inline bool MediaProcessorGetStateRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool MediaProcessorGetStateRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& MediaProcessorGetStateRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& MediaProcessorGetStateRequest::meta() const {
  // @@protoc_insertion_point(field_get:MediaProcessorGetStateRequest.meta)
  return _internal_meta();
}
inline void MediaProcessorGetStateRequest::unsafe_arena_set_allocated_meta(
    ::RequestMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MediaProcessorGetStateRequest.meta)
}
inline ::RequestMeta* MediaProcessorGetStateRequest::release_meta() {
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RequestMeta* MediaProcessorGetStateRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:MediaProcessorGetStateRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* MediaProcessorGetStateRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* MediaProcessorGetStateRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:MediaProcessorGetStateRequest.meta)
  return _internal_mutable_meta();
}
inline void MediaProcessorGetStateRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:MediaProcessorGetStateRequest.meta)
}

// -------------------------------------------------------------------

// MediaProcessorGetStateResponse

// .ResponseStatus status = 1;
inline bool MediaProcessorGetStateResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MediaProcessorGetStateResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& MediaProcessorGetStateResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& MediaProcessorGetStateResponse::status() const {
  // @@protoc_insertion_point(field_get:MediaProcessorGetStateResponse.status)
  return _internal_status();
}
inline void MediaProcessorGetStateResponse::unsafe_arena_set_allocated_status(
    ::ResponseStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MediaProcessorGetStateResponse.status)
}
inline ::ResponseStatus* MediaProcessorGetStateResponse::release_status() {
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResponseStatus* MediaProcessorGetStateResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:MediaProcessorGetStateResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* MediaProcessorGetStateResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* MediaProcessorGetStateResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:MediaProcessorGetStateResponse.status)
  return _internal_mutable_status();
}
inline void MediaProcessorGetStateResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:MediaProcessorGetStateResponse.status)
}

// string state = 2;
inline void MediaProcessorGetStateResponse::clear_state() {
  state_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MediaProcessorGetStateResponse::state() const {
  // @@protoc_insertion_point(field_get:MediaProcessorGetStateResponse.state)
  return _internal_state();
}
inline void MediaProcessorGetStateResponse::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:MediaProcessorGetStateResponse.state)
}
inline std::string* MediaProcessorGetStateResponse::mutable_state() {
  // @@protoc_insertion_point(field_mutable:MediaProcessorGetStateResponse.state)
  return _internal_mutable_state();
}
inline const std::string& MediaProcessorGetStateResponse::_internal_state() const {
  return state_.Get();
}
inline void MediaProcessorGetStateResponse::_internal_set_state(const std::string& value) {
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MediaProcessorGetStateResponse::set_state(std::string&& value) {
  
  state_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MediaProcessorGetStateResponse.state)
}
inline void MediaProcessorGetStateResponse::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MediaProcessorGetStateResponse.state)
}
inline void MediaProcessorGetStateResponse::set_state(const char* value,
    size_t size) {
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MediaProcessorGetStateResponse.state)
}
inline std::string* MediaProcessorGetStateResponse::_internal_mutable_state() {
  
  return state_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MediaProcessorGetStateResponse::release_state() {
  // @@protoc_insertion_point(field_release:MediaProcessorGetStateResponse.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MediaProcessorGetStateResponse::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MediaProcessorGetStateResponse.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fmedia_5fprocessor_2fmedia_5fprocessor_2eproto
