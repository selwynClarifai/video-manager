// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/media_processor/media.proto

#include "proto/media_processor/media.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fmedia_5fprocessor_2fmedia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImageOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fmedia_5fprocessor_2fmedia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageTransform_proto_2fmedia_5fprocessor_2fmedia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fmedia_5fprocessor_2fmedia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageTransformOptions_proto_2fmedia_5fprocessor_2fmedia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fmedia_5fprocessor_2fmedia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoOutputFormats_proto_2fmedia_5fprocessor_2fmedia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fmedia_5fprocessor_2fmedia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatermarkOverlayImage_proto_2fmedia_5fprocessor_2fmedia_2eproto;
class ImageOutputFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageOutputFormat> _instance;
} _ImageOutputFormat_default_instance_;
class MultipleImageOutputFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultipleImageOutputFormat> _instance;
} _MultipleImageOutputFormat_default_instance_;
class ImageTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageTransform> _instance;
} _ImageTransform_default_instance_;
class ImageTransformOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageTransformOptions> _instance;
} _ImageTransformOptions_default_instance_;
class WatermarkOverlayImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatermarkOverlayImage> _instance;
} _WatermarkOverlayImage_default_instance_;
class ImageOutputFormatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageOutputFormats> _instance;
} _ImageOutputFormats_default_instance_;
class VideoOutputFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoOutputFormat> _instance;
} _VideoOutputFormat_default_instance_;
class VideoOutputFormatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoOutputFormats> _instance;
} _VideoOutputFormats_default_instance_;
static void InitDefaultsscc_info_ImageOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ImageOutputFormat_default_instance_;
    new (ptr) ::ImageOutputFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageOutputFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImageOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ImageOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto}, {
      &scc_info_ImageTransform_proto_2fmedia_5fprocessor_2fmedia_2eproto.base,
      &scc_info_WatermarkOverlayImage_proto_2fmedia_5fprocessor_2fmedia_2eproto.base,}};

static void InitDefaultsscc_info_ImageOutputFormats_proto_2fmedia_5fprocessor_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ImageOutputFormats_default_instance_;
    new (ptr) ::ImageOutputFormats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageOutputFormats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageOutputFormats_proto_2fmedia_5fprocessor_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageOutputFormats_proto_2fmedia_5fprocessor_2fmedia_2eproto}, {
      &scc_info_ImageOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto.base,}};

static void InitDefaultsscc_info_ImageTransform_proto_2fmedia_5fprocessor_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ImageTransform_default_instance_;
    new (ptr) ::ImageTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageTransform_proto_2fmedia_5fprocessor_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageTransform_proto_2fmedia_5fprocessor_2fmedia_2eproto}, {
      &scc_info_ImageTransformOptions_proto_2fmedia_5fprocessor_2fmedia_2eproto.base,}};

static void InitDefaultsscc_info_ImageTransformOptions_proto_2fmedia_5fprocessor_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ImageTransformOptions_default_instance_;
    new (ptr) ::ImageTransformOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageTransformOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageTransformOptions_proto_2fmedia_5fprocessor_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageTransformOptions_proto_2fmedia_5fprocessor_2fmedia_2eproto}, {}};

static void InitDefaultsscc_info_MultipleImageOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MultipleImageOutputFormat_default_instance_;
    new (ptr) ::MultipleImageOutputFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MultipleImageOutputFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultipleImageOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultipleImageOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto}, {
      &scc_info_ImageOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto.base,}};

static void InitDefaultsscc_info_VideoOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VideoOutputFormat_default_instance_;
    new (ptr) ::VideoOutputFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VideoOutputFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto}, {}};

static void InitDefaultsscc_info_VideoOutputFormats_proto_2fmedia_5fprocessor_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VideoOutputFormats_default_instance_;
    new (ptr) ::VideoOutputFormats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VideoOutputFormats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoOutputFormats_proto_2fmedia_5fprocessor_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoOutputFormats_proto_2fmedia_5fprocessor_2fmedia_2eproto}, {}};

static void InitDefaultsscc_info_WatermarkOverlayImage_proto_2fmedia_5fprocessor_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WatermarkOverlayImage_default_instance_;
    new (ptr) ::WatermarkOverlayImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WatermarkOverlayImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatermarkOverlayImage_proto_2fmedia_5fprocessor_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatermarkOverlayImage_proto_2fmedia_5fprocessor_2fmedia_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fmedia_5fprocessor_2fmedia_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fmedia_5fprocessor_2fmedia_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fmedia_5fprocessor_2fmedia_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fmedia_5fprocessor_2fmedia_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ImageOutputFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImageOutputFormat, example_id_),
  PROTOBUF_FIELD_OFFSET(::ImageOutputFormat, width_),
  PROTOBUF_FIELD_OFFSET(::ImageOutputFormat, height_),
  PROTOBUF_FIELD_OFFSET(::ImageOutputFormat, crop_),
  PROTOBUF_FIELD_OFFSET(::ImageOutputFormat, flip_horizontal_),
  PROTOBUF_FIELD_OFFSET(::ImageOutputFormat, flip_vertical_),
  PROTOBUF_FIELD_OFFSET(::ImageOutputFormat, quality_),
  PROTOBUF_FIELD_OFFSET(::ImageOutputFormat, compression_),
  PROTOBUF_FIELD_OFFSET(::ImageOutputFormat, type_),
  PROTOBUF_FIELD_OFFSET(::ImageOutputFormat, transform_),
  PROTOBUF_FIELD_OFFSET(::ImageOutputFormat, overlays_),
  PROTOBUF_FIELD_OFFSET(::ImageOutputFormat, op_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MultipleImageOutputFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MultipleImageOutputFormat, example_id_),
  PROTOBUF_FIELD_OFFSET(::MultipleImageOutputFormat, output_formats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ImageTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImageTransform, type_),
  PROTOBUF_FIELD_OFFSET(::ImageTransform, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ImageTransformOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImageTransformOptions, min_size_),
  PROTOBUF_FIELD_OFFSET(::ImageTransformOptions, crop_size_),
  PROTOBUF_FIELD_OFFSET(::ImageTransformOptions, downsample_size_),
  PROTOBUF_FIELD_OFFSET(::ImageTransformOptions, crop_size_pixel_stride_),
  PROTOBUF_FIELD_OFFSET(::ImageTransformOptions, hardcoded_sorta_crop_sizes_),
  PROTOBUF_FIELD_OFFSET(::ImageTransformOptions, ratio_based_filter_),
  PROTOBUF_FIELD_OFFSET(::ImageTransformOptions, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WatermarkOverlayImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WatermarkOverlayImage, image_),
  PROTOBUF_FIELD_OFFSET(::WatermarkOverlayImage, left_),
  PROTOBUF_FIELD_OFFSET(::WatermarkOverlayImage, top_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ImageOutputFormats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImageOutputFormats, output_formats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VideoOutputFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VideoOutputFormat, width_px_),
  PROTOBUF_FIELD_OFFSET(::VideoOutputFormat, height_px_),
  PROTOBUF_FIELD_OFFSET(::VideoOutputFormat, seconds_between_frames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VideoOutputFormats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VideoOutputFormats, output_formats_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ImageOutputFormat)},
  { 17, -1, sizeof(::MultipleImageOutputFormat)},
  { 24, -1, sizeof(::ImageTransform)},
  { 31, -1, sizeof(::ImageTransformOptions)},
  { 43, -1, sizeof(::WatermarkOverlayImage)},
  { 51, -1, sizeof(::ImageOutputFormats)},
  { 57, -1, sizeof(::VideoOutputFormat)},
  { 65, -1, sizeof(::VideoOutputFormats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ImageOutputFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MultipleImageOutputFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ImageTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ImageTransformOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WatermarkOverlayImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ImageOutputFormats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VideoOutputFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VideoOutputFormats_default_instance_),
};

const char descriptor_table_protodef_proto_2fmedia_5fprocessor_2fmedia_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!proto/media_processor/media.proto\"\267\002\n\021"
  "ImageOutputFormat\022\022\n\nexample_id\030\001 \001(\t\022\r\n"
  "\005width\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\014\n\004crop\030\004 \003"
  "(\002\022\027\n\017flip_horizontal\030\005 \001(\010\022\025\n\rflip_vert"
  "ical\030\006 \001(\010\022\017\n\007quality\030\007 \001(\r\022\023\n\013compressi"
  "on\030\010 \001(\r\022\036\n\004type\030\t \001(\0162\020.ImageOutputType"
  "\022\"\n\ttransform\030\n \001(\0132\017.ImageTransform\022(\n\010"
  "overlays\030\013 \003(\0132\026.WatermarkOverlayImage\022\035"
  "\n\007op_type\030\014 \001(\0162\014.ImageOpType\"[\n\031Multipl"
  "eImageOutputFormat\022\022\n\nexample_id\030\001 \001(\t\022*"
  "\n\016output_formats\030\002 \003(\0132\022.ImageOutputForm"
  "at\"\320\001\n\016ImageTransform\0220\n\004type\030\001 \001(\0162\".Im"
  "ageTransform.ImageTransformType\022\'\n\007optio"
  "ns\030\002 \001(\0132\026.ImageTransformOptions\"c\n\022Imag"
  "eTransformType\022\r\n\tUNDEFINED\020\000\022\n\n\006SORTA1\020"
  "\001\022\n\n\006SORTA2\020\002\022\r\n\tSORTAPAD1\020\003\022\013\n\007CENTER1\020"
  "\004\022\n\n\006SLIDE1\020\005\"\325\001\n\025ImageTransformOptions\022"
  "\020\n\010min_size\030\001 \001(\r\022\021\n\tcrop_size\030\002 \001(\r\022\027\n\017"
  "downsample_size\030\003 \001(\r\022\036\n\026crop_size_pixel"
  "_stride\030\004 \001(\r\022\"\n\032hardcoded_sorta_crop_si"
  "zes\030\005 \001(\010\022\032\n\022ratio_based_filter\030\006 \001(\010\022\036\n"
  "\004type\030\007 \001(\0162\020.ImageOutputType\"A\n\025Waterma"
  "rkOverlayImage\022\r\n\005image\030\001 \001(\014\022\014\n\004left\030\002 "
  "\001(\002\022\013\n\003top\030\003 \001(\002\"@\n\022ImageOutputFormats\022*"
  "\n\016output_formats\030\001 \003(\0132\022.ImageOutputForm"
  "at\"X\n\021VideoOutputFormat\022\020\n\010width_px\030\001 \001("
  "\r\022\021\n\theight_px\030\002 \001(\r\022\036\n\026seconds_between_"
  "frames\030\003 \001(\002\"A\n\022VideoOutputFormats\022+\n\016ou"
  "tput_formats\030\001 \003(\0132\023.VideoOutputFormats*"
  "W\n\013ImageOpType\022\n\n\006RESIZE\020\000\022\010\n\004FLIP\020\001\022\014\n\010"
  "COMPRESS\020\002\022\013\n\007CONVERT\020\003\022\r\n\tWATERMARK\020\004\022\010"
  "\n\004CROP\020\005*[\n\017ImageOutputType\022\r\n\tUNDEFINED"
  "\020\000\022\010\n\004JPEG\020\001\022\007\n\003PNG\020\002\022\010\n\004TIFF\020\003\022\t\n\005RGB24"
  "\020\004\022\021\n\rRGB24_NDARRAY\020\005B\021Z\017media_processor"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto_sccs[8] = {
  &scc_info_ImageOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto.base,
  &scc_info_ImageOutputFormats_proto_2fmedia_5fprocessor_2fmedia_2eproto.base,
  &scc_info_ImageTransform_proto_2fmedia_5fprocessor_2fmedia_2eproto.base,
  &scc_info_ImageTransformOptions_proto_2fmedia_5fprocessor_2fmedia_2eproto.base,
  &scc_info_MultipleImageOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto.base,
  &scc_info_VideoOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto.base,
  &scc_info_VideoOutputFormats_proto_2fmedia_5fprocessor_2fmedia_2eproto.base,
  &scc_info_WatermarkOverlayImage_proto_2fmedia_5fprocessor_2fmedia_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto = {
  false, false, descriptor_table_protodef_proto_2fmedia_5fprocessor_2fmedia_2eproto, "proto/media_processor/media.proto", 1368,
  &descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto_once, descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto_sccs, descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_proto_2fmedia_5fprocessor_2fmedia_2eproto::offsets,
  file_level_metadata_proto_2fmedia_5fprocessor_2fmedia_2eproto, 8, file_level_enum_descriptors_proto_2fmedia_5fprocessor_2fmedia_2eproto, file_level_service_descriptors_proto_2fmedia_5fprocessor_2fmedia_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fmedia_5fprocessor_2fmedia_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageTransform_ImageTransformType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto);
  return file_level_enum_descriptors_proto_2fmedia_5fprocessor_2fmedia_2eproto[0];
}
bool ImageTransform_ImageTransformType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImageTransform_ImageTransformType ImageTransform::UNDEFINED;
constexpr ImageTransform_ImageTransformType ImageTransform::SORTA1;
constexpr ImageTransform_ImageTransformType ImageTransform::SORTA2;
constexpr ImageTransform_ImageTransformType ImageTransform::SORTAPAD1;
constexpr ImageTransform_ImageTransformType ImageTransform::CENTER1;
constexpr ImageTransform_ImageTransformType ImageTransform::SLIDE1;
constexpr ImageTransform_ImageTransformType ImageTransform::ImageTransformType_MIN;
constexpr ImageTransform_ImageTransformType ImageTransform::ImageTransformType_MAX;
constexpr int ImageTransform::ImageTransformType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageOpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto);
  return file_level_enum_descriptors_proto_2fmedia_5fprocessor_2fmedia_2eproto[1];
}
bool ImageOpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageOutputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto);
  return file_level_enum_descriptors_proto_2fmedia_5fprocessor_2fmedia_2eproto[2];
}
bool ImageOutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ImageOutputFormat::InitAsDefaultInstance() {
  ::_ImageOutputFormat_default_instance_._instance.get_mutable()->transform_ = const_cast< ::ImageTransform*>(
      ::ImageTransform::internal_default_instance());
}
class ImageOutputFormat::_Internal {
 public:
  static const ::ImageTransform& transform(const ImageOutputFormat* msg);
};

const ::ImageTransform&
ImageOutputFormat::_Internal::transform(const ImageOutputFormat* msg) {
  return *msg->transform_;
}
ImageOutputFormat::ImageOutputFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  crop_(arena),
  overlays_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ImageOutputFormat)
}
ImageOutputFormat::ImageOutputFormat(const ImageOutputFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      crop_(from.crop_),
      overlays_(from.overlays_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  example_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_example_id().empty()) {
    example_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_example_id(),
      GetArena());
  }
  if (from._internal_has_transform()) {
    transform_ = new ::ImageTransform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_type_) -
    reinterpret_cast<char*>(&width_)) + sizeof(op_type_));
  // @@protoc_insertion_point(copy_constructor:ImageOutputFormat)
}

void ImageOutputFormat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto.base);
  example_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_type_) -
      reinterpret_cast<char*>(&transform_)) + sizeof(op_type_));
}

ImageOutputFormat::~ImageOutputFormat() {
  // @@protoc_insertion_point(destructor:ImageOutputFormat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageOutputFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  example_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transform_;
}

void ImageOutputFormat::ArenaDtor(void* object) {
  ImageOutputFormat* _this = reinterpret_cast< ImageOutputFormat* >(object);
  (void)_this;
}
void ImageOutputFormat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageOutputFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageOutputFormat& ImageOutputFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void ImageOutputFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageOutputFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crop_.Clear();
  overlays_.Clear();
  example_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_type_) -
      reinterpret_cast<char*>(&width_)) + sizeof(op_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageOutputFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string example_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_example_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ImageOutputFormat.example_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float crop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_crop(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_crop(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool flip_horizontal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          flip_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool flip_vertical = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          flip_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 quality = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 compression = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          compression_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ImageOutputType type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ImageOutputType>(val));
        } else goto handle_unusual;
        continue;
      // .ImageTransform transform = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .WatermarkOverlayImage overlays = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overlays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .ImageOpType op_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op_type(static_cast<::ImageOpType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageOutputFormat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageOutputFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string example_id = 1;
  if (this->example_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_example_id().data(), static_cast<int>(this->_internal_example_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ImageOutputFormat.example_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_example_id(), target);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // repeated float crop = 4;
  if (this->_internal_crop_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_crop(), target);
  }

  // bool flip_horizontal = 5;
  if (this->flip_horizontal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_flip_horizontal(), target);
  }

  // bool flip_vertical = 6;
  if (this->flip_vertical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_flip_vertical(), target);
  }

  // uint32 quality = 7;
  if (this->quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_quality(), target);
  }

  // uint32 compression = 8;
  if (this->compression() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_compression(), target);
  }

  // .ImageOutputType type = 9;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_type(), target);
  }

  // .ImageTransform transform = 10;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::transform(this), target, stream);
  }

  // repeated .WatermarkOverlayImage overlays = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_overlays_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_overlays(i), target, stream);
  }

  // .ImageOpType op_type = 12;
  if (this->op_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_op_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageOutputFormat)
  return target;
}

size_t ImageOutputFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageOutputFormat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float crop = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_crop_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _crop_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .WatermarkOverlayImage overlays = 11;
  total_size += 1UL * this->_internal_overlays_size();
  for (const auto& msg : this->overlays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string example_id = 1;
  if (this->example_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_example_id());
  }

  // .ImageTransform transform = 10;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  // bool flip_horizontal = 5;
  if (this->flip_horizontal() != 0) {
    total_size += 1 + 1;
  }

  // bool flip_vertical = 6;
  if (this->flip_vertical() != 0) {
    total_size += 1 + 1;
  }

  // uint32 quality = 7;
  if (this->quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_quality());
  }

  // uint32 compression = 8;
  if (this->compression() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_compression());
  }

  // .ImageOutputType type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .ImageOpType op_type = 12;
  if (this->op_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageOutputFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageOutputFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageOutputFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageOutputFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageOutputFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageOutputFormat)
    MergeFrom(*source);
  }
}

void ImageOutputFormat::MergeFrom(const ImageOutputFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageOutputFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crop_.MergeFrom(from.crop_);
  overlays_.MergeFrom(from.overlays_);
  if (from.example_id().size() > 0) {
    _internal_set_example_id(from._internal_example_id());
  }
  if (from.has_transform()) {
    _internal_mutable_transform()->::ImageTransform::MergeFrom(from._internal_transform());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.flip_horizontal() != 0) {
    _internal_set_flip_horizontal(from._internal_flip_horizontal());
  }
  if (from.flip_vertical() != 0) {
    _internal_set_flip_vertical(from._internal_flip_vertical());
  }
  if (from.quality() != 0) {
    _internal_set_quality(from._internal_quality());
  }
  if (from.compression() != 0) {
    _internal_set_compression(from._internal_compression());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.op_type() != 0) {
    _internal_set_op_type(from._internal_op_type());
  }
}

void ImageOutputFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageOutputFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageOutputFormat::CopyFrom(const ImageOutputFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageOutputFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageOutputFormat::IsInitialized() const {
  return true;
}

void ImageOutputFormat::InternalSwap(ImageOutputFormat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  crop_.InternalSwap(&other->crop_);
  overlays_.InternalSwap(&other->overlays_);
  example_id_.Swap(&other->example_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageOutputFormat, op_type_)
      + sizeof(ImageOutputFormat::op_type_)
      - PROTOBUF_FIELD_OFFSET(ImageOutputFormat, transform_)>(
          reinterpret_cast<char*>(&transform_),
          reinterpret_cast<char*>(&other->transform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageOutputFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultipleImageOutputFormat::InitAsDefaultInstance() {
}
class MultipleImageOutputFormat::_Internal {
 public:
};

MultipleImageOutputFormat::MultipleImageOutputFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  output_formats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MultipleImageOutputFormat)
}
MultipleImageOutputFormat::MultipleImageOutputFormat(const MultipleImageOutputFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      output_formats_(from.output_formats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  example_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_example_id().empty()) {
    example_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_example_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MultipleImageOutputFormat)
}

void MultipleImageOutputFormat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultipleImageOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto.base);
  example_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MultipleImageOutputFormat::~MultipleImageOutputFormat() {
  // @@protoc_insertion_point(destructor:MultipleImageOutputFormat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultipleImageOutputFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  example_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MultipleImageOutputFormat::ArenaDtor(void* object) {
  MultipleImageOutputFormat* _this = reinterpret_cast< MultipleImageOutputFormat* >(object);
  (void)_this;
}
void MultipleImageOutputFormat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultipleImageOutputFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultipleImageOutputFormat& MultipleImageOutputFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultipleImageOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void MultipleImageOutputFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:MultipleImageOutputFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_formats_.Clear();
  example_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultipleImageOutputFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string example_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_example_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MultipleImageOutputFormat.example_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ImageOutputFormat output_formats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_formats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultipleImageOutputFormat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MultipleImageOutputFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string example_id = 1;
  if (this->example_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_example_id().data(), static_cast<int>(this->_internal_example_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MultipleImageOutputFormat.example_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_example_id(), target);
  }

  // repeated .ImageOutputFormat output_formats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_formats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_output_formats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MultipleImageOutputFormat)
  return target;
}

size_t MultipleImageOutputFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultipleImageOutputFormat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ImageOutputFormat output_formats = 2;
  total_size += 1UL * this->_internal_output_formats_size();
  for (const auto& msg : this->output_formats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string example_id = 1;
  if (this->example_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_example_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultipleImageOutputFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultipleImageOutputFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const MultipleImageOutputFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultipleImageOutputFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultipleImageOutputFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultipleImageOutputFormat)
    MergeFrom(*source);
  }
}

void MultipleImageOutputFormat::MergeFrom(const MultipleImageOutputFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultipleImageOutputFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_formats_.MergeFrom(from.output_formats_);
  if (from.example_id().size() > 0) {
    _internal_set_example_id(from._internal_example_id());
  }
}

void MultipleImageOutputFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultipleImageOutputFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultipleImageOutputFormat::CopyFrom(const MultipleImageOutputFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultipleImageOutputFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultipleImageOutputFormat::IsInitialized() const {
  return true;
}

void MultipleImageOutputFormat::InternalSwap(MultipleImageOutputFormat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  output_formats_.InternalSwap(&other->output_formats_);
  example_id_.Swap(&other->example_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MultipleImageOutputFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageTransform::InitAsDefaultInstance() {
  ::_ImageTransform_default_instance_._instance.get_mutable()->options_ = const_cast< ::ImageTransformOptions*>(
      ::ImageTransformOptions::internal_default_instance());
}
class ImageTransform::_Internal {
 public:
  static const ::ImageTransformOptions& options(const ImageTransform* msg);
};

const ::ImageTransformOptions&
ImageTransform::_Internal::options(const ImageTransform* msg) {
  return *msg->options_;
}
ImageTransform::ImageTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ImageTransform)
}
ImageTransform::ImageTransform(const ImageTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::ImageTransformOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ImageTransform)
}

void ImageTransform::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageTransform_proto_2fmedia_5fprocessor_2fmedia_2eproto.base);
  ::memset(&options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&options_)) + sizeof(type_));
}

ImageTransform::~ImageTransform() {
  // @@protoc_insertion_point(destructor:ImageTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete options_;
}

void ImageTransform::ArenaDtor(void* object) {
  ImageTransform* _this = reinterpret_cast< ImageTransform* >(object);
  (void)_this;
}
void ImageTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageTransform& ImageTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageTransform_proto_2fmedia_5fprocessor_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void ImageTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ImageTransform.ImageTransformType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ImageTransform_ImageTransformType>(val));
        } else goto handle_unusual;
        continue;
      // .ImageTransformOptions options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ImageTransform.ImageTransformType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .ImageTransformOptions options = 2;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageTransform)
  return target;
}

size_t ImageTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ImageTransformOptions options = 2;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // .ImageTransform.ImageTransformType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageTransform)
    MergeFrom(*source);
  }
}

void ImageTransform::MergeFrom(const ImageTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    _internal_mutable_options()->::ImageTransformOptions::MergeFrom(from._internal_options());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ImageTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageTransform::CopyFrom(const ImageTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageTransform::IsInitialized() const {
  return true;
}

void ImageTransform::InternalSwap(ImageTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageTransform, type_)
      + sizeof(ImageTransform::type_)
      - PROTOBUF_FIELD_OFFSET(ImageTransform, options_)>(
          reinterpret_cast<char*>(&options_),
          reinterpret_cast<char*>(&other->options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageTransformOptions::InitAsDefaultInstance() {
}
class ImageTransformOptions::_Internal {
 public:
};

ImageTransformOptions::ImageTransformOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ImageTransformOptions)
}
ImageTransformOptions::ImageTransformOptions(const ImageTransformOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_size_, &from.min_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&min_size_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ImageTransformOptions)
}

void ImageTransformOptions::SharedCtor() {
  ::memset(&min_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&min_size_)) + sizeof(type_));
}

ImageTransformOptions::~ImageTransformOptions() {
  // @@protoc_insertion_point(destructor:ImageTransformOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageTransformOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ImageTransformOptions::ArenaDtor(void* object) {
  ImageTransformOptions* _this = reinterpret_cast< ImageTransformOptions* >(object);
  (void)_this;
}
void ImageTransformOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageTransformOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageTransformOptions& ImageTransformOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageTransformOptions_proto_2fmedia_5fprocessor_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void ImageTransformOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageTransformOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&min_size_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageTransformOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 min_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          min_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 crop_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          crop_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 downsample_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          downsample_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 crop_size_pixel_stride = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          crop_size_pixel_stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hardcoded_sorta_crop_sizes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hardcoded_sorta_crop_sizes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ratio_based_filter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ratio_based_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ImageOutputType type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ImageOutputType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageTransformOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageTransformOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 min_size = 1;
  if (this->min_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min_size(), target);
  }

  // uint32 crop_size = 2;
  if (this->crop_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_crop_size(), target);
  }

  // uint32 downsample_size = 3;
  if (this->downsample_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_downsample_size(), target);
  }

  // uint32 crop_size_pixel_stride = 4;
  if (this->crop_size_pixel_stride() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_crop_size_pixel_stride(), target);
  }

  // bool hardcoded_sorta_crop_sizes = 5;
  if (this->hardcoded_sorta_crop_sizes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_hardcoded_sorta_crop_sizes(), target);
  }

  // bool ratio_based_filter = 6;
  if (this->ratio_based_filter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ratio_based_filter(), target);
  }

  // .ImageOutputType type = 7;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageTransformOptions)
  return target;
}

size_t ImageTransformOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageTransformOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 min_size = 1;
  if (this->min_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_size());
  }

  // uint32 crop_size = 2;
  if (this->crop_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crop_size());
  }

  // uint32 downsample_size = 3;
  if (this->downsample_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_downsample_size());
  }

  // uint32 crop_size_pixel_stride = 4;
  if (this->crop_size_pixel_stride() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crop_size_pixel_stride());
  }

  // bool hardcoded_sorta_crop_sizes = 5;
  if (this->hardcoded_sorta_crop_sizes() != 0) {
    total_size += 1 + 1;
  }

  // bool ratio_based_filter = 6;
  if (this->ratio_based_filter() != 0) {
    total_size += 1 + 1;
  }

  // .ImageOutputType type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageTransformOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageTransformOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageTransformOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageTransformOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageTransformOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageTransformOptions)
    MergeFrom(*source);
  }
}

void ImageTransformOptions::MergeFrom(const ImageTransformOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageTransformOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_size() != 0) {
    _internal_set_min_size(from._internal_min_size());
  }
  if (from.crop_size() != 0) {
    _internal_set_crop_size(from._internal_crop_size());
  }
  if (from.downsample_size() != 0) {
    _internal_set_downsample_size(from._internal_downsample_size());
  }
  if (from.crop_size_pixel_stride() != 0) {
    _internal_set_crop_size_pixel_stride(from._internal_crop_size_pixel_stride());
  }
  if (from.hardcoded_sorta_crop_sizes() != 0) {
    _internal_set_hardcoded_sorta_crop_sizes(from._internal_hardcoded_sorta_crop_sizes());
  }
  if (from.ratio_based_filter() != 0) {
    _internal_set_ratio_based_filter(from._internal_ratio_based_filter());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ImageTransformOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageTransformOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageTransformOptions::CopyFrom(const ImageTransformOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageTransformOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageTransformOptions::IsInitialized() const {
  return true;
}

void ImageTransformOptions::InternalSwap(ImageTransformOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageTransformOptions, type_)
      + sizeof(ImageTransformOptions::type_)
      - PROTOBUF_FIELD_OFFSET(ImageTransformOptions, min_size_)>(
          reinterpret_cast<char*>(&min_size_),
          reinterpret_cast<char*>(&other->min_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageTransformOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatermarkOverlayImage::InitAsDefaultInstance() {
}
class WatermarkOverlayImage::_Internal {
 public:
};

WatermarkOverlayImage::WatermarkOverlayImage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WatermarkOverlayImage)
}
WatermarkOverlayImage::WatermarkOverlayImage(const WatermarkOverlayImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image(),
      GetArena());
  }
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_) -
    reinterpret_cast<char*>(&left_)) + sizeof(top_));
  // @@protoc_insertion_point(copy_constructor:WatermarkOverlayImage)
}

void WatermarkOverlayImage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WatermarkOverlayImage_proto_2fmedia_5fprocessor_2fmedia_2eproto.base);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_) -
      reinterpret_cast<char*>(&left_)) + sizeof(top_));
}

WatermarkOverlayImage::~WatermarkOverlayImage() {
  // @@protoc_insertion_point(destructor:WatermarkOverlayImage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatermarkOverlayImage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WatermarkOverlayImage::ArenaDtor(void* object) {
  WatermarkOverlayImage* _this = reinterpret_cast< WatermarkOverlayImage* >(object);
  (void)_this;
}
void WatermarkOverlayImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatermarkOverlayImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatermarkOverlayImage& WatermarkOverlayImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatermarkOverlayImage_proto_2fmedia_5fprocessor_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void WatermarkOverlayImage::Clear() {
// @@protoc_insertion_point(message_clear_start:WatermarkOverlayImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_) -
      reinterpret_cast<char*>(&left_)) + sizeof(top_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatermarkOverlayImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float top = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatermarkOverlayImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WatermarkOverlayImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (this->image().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_image(), target);
  }

  // float left = 2;
  if (!(this->left() <= 0 && this->left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_left(), target);
  }

  // float top = 3;
  if (!(this->top() <= 0 && this->top() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_top(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WatermarkOverlayImage)
  return target;
}

size_t WatermarkOverlayImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WatermarkOverlayImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 1;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // float left = 2;
  if (!(this->left() <= 0 && this->left() >= 0)) {
    total_size += 1 + 4;
  }

  // float top = 3;
  if (!(this->top() <= 0 && this->top() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatermarkOverlayImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WatermarkOverlayImage)
  GOOGLE_DCHECK_NE(&from, this);
  const WatermarkOverlayImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatermarkOverlayImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WatermarkOverlayImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WatermarkOverlayImage)
    MergeFrom(*source);
  }
}

void WatermarkOverlayImage::MergeFrom(const WatermarkOverlayImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WatermarkOverlayImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image().size() > 0) {
    _internal_set_image(from._internal_image());
  }
  if (!(from.left() <= 0 && from.left() >= 0)) {
    _internal_set_left(from._internal_left());
  }
  if (!(from.top() <= 0 && from.top() >= 0)) {
    _internal_set_top(from._internal_top());
  }
}

void WatermarkOverlayImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WatermarkOverlayImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatermarkOverlayImage::CopyFrom(const WatermarkOverlayImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WatermarkOverlayImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatermarkOverlayImage::IsInitialized() const {
  return true;
}

void WatermarkOverlayImage::InternalSwap(WatermarkOverlayImage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WatermarkOverlayImage, top_)
      + sizeof(WatermarkOverlayImage::top_)
      - PROTOBUF_FIELD_OFFSET(WatermarkOverlayImage, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WatermarkOverlayImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageOutputFormats::InitAsDefaultInstance() {
}
class ImageOutputFormats::_Internal {
 public:
};

ImageOutputFormats::ImageOutputFormats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  output_formats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ImageOutputFormats)
}
ImageOutputFormats::ImageOutputFormats(const ImageOutputFormats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      output_formats_(from.output_formats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ImageOutputFormats)
}

void ImageOutputFormats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageOutputFormats_proto_2fmedia_5fprocessor_2fmedia_2eproto.base);
}

ImageOutputFormats::~ImageOutputFormats() {
  // @@protoc_insertion_point(destructor:ImageOutputFormats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageOutputFormats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ImageOutputFormats::ArenaDtor(void* object) {
  ImageOutputFormats* _this = reinterpret_cast< ImageOutputFormats* >(object);
  (void)_this;
}
void ImageOutputFormats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageOutputFormats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageOutputFormats& ImageOutputFormats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageOutputFormats_proto_2fmedia_5fprocessor_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void ImageOutputFormats::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageOutputFormats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_formats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageOutputFormats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ImageOutputFormat output_formats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_formats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageOutputFormats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageOutputFormats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ImageOutputFormat output_formats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_formats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_output_formats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageOutputFormats)
  return target;
}

size_t ImageOutputFormats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageOutputFormats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ImageOutputFormat output_formats = 1;
  total_size += 1UL * this->_internal_output_formats_size();
  for (const auto& msg : this->output_formats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageOutputFormats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageOutputFormats)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageOutputFormats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageOutputFormats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageOutputFormats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageOutputFormats)
    MergeFrom(*source);
  }
}

void ImageOutputFormats::MergeFrom(const ImageOutputFormats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageOutputFormats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_formats_.MergeFrom(from.output_formats_);
}

void ImageOutputFormats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageOutputFormats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageOutputFormats::CopyFrom(const ImageOutputFormats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageOutputFormats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageOutputFormats::IsInitialized() const {
  return true;
}

void ImageOutputFormats::InternalSwap(ImageOutputFormats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  output_formats_.InternalSwap(&other->output_formats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageOutputFormats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoOutputFormat::InitAsDefaultInstance() {
}
class VideoOutputFormat::_Internal {
 public:
};

VideoOutputFormat::VideoOutputFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VideoOutputFormat)
}
VideoOutputFormat::VideoOutputFormat(const VideoOutputFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_px_, &from.width_px_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_between_frames_) -
    reinterpret_cast<char*>(&width_px_)) + sizeof(seconds_between_frames_));
  // @@protoc_insertion_point(copy_constructor:VideoOutputFormat)
}

void VideoOutputFormat::SharedCtor() {
  ::memset(&width_px_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_between_frames_) -
      reinterpret_cast<char*>(&width_px_)) + sizeof(seconds_between_frames_));
}

VideoOutputFormat::~VideoOutputFormat() {
  // @@protoc_insertion_point(destructor:VideoOutputFormat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoOutputFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VideoOutputFormat::ArenaDtor(void* object) {
  VideoOutputFormat* _this = reinterpret_cast< VideoOutputFormat* >(object);
  (void)_this;
}
void VideoOutputFormat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoOutputFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoOutputFormat& VideoOutputFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoOutputFormat_proto_2fmedia_5fprocessor_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void VideoOutputFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:VideoOutputFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_px_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_between_frames_) -
      reinterpret_cast<char*>(&width_px_)) + sizeof(seconds_between_frames_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoOutputFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 width_px = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height_px = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float seconds_between_frames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          seconds_between_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoOutputFormat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VideoOutputFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width_px = 1;
  if (this->width_px() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width_px(), target);
  }

  // uint32 height_px = 2;
  if (this->height_px() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height_px(), target);
  }

  // float seconds_between_frames = 3;
  if (!(this->seconds_between_frames() <= 0 && this->seconds_between_frames() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_seconds_between_frames(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VideoOutputFormat)
  return target;
}

size_t VideoOutputFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VideoOutputFormat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 width_px = 1;
  if (this->width_px() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width_px());
  }

  // uint32 height_px = 2;
  if (this->height_px() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height_px());
  }

  // float seconds_between_frames = 3;
  if (!(this->seconds_between_frames() <= 0 && this->seconds_between_frames() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoOutputFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VideoOutputFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoOutputFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoOutputFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VideoOutputFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VideoOutputFormat)
    MergeFrom(*source);
  }
}

void VideoOutputFormat::MergeFrom(const VideoOutputFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VideoOutputFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width_px() != 0) {
    _internal_set_width_px(from._internal_width_px());
  }
  if (from.height_px() != 0) {
    _internal_set_height_px(from._internal_height_px());
  }
  if (!(from.seconds_between_frames() <= 0 && from.seconds_between_frames() >= 0)) {
    _internal_set_seconds_between_frames(from._internal_seconds_between_frames());
  }
}

void VideoOutputFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VideoOutputFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoOutputFormat::CopyFrom(const VideoOutputFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VideoOutputFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoOutputFormat::IsInitialized() const {
  return true;
}

void VideoOutputFormat::InternalSwap(VideoOutputFormat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoOutputFormat, seconds_between_frames_)
      + sizeof(VideoOutputFormat::seconds_between_frames_)
      - PROTOBUF_FIELD_OFFSET(VideoOutputFormat, width_px_)>(
          reinterpret_cast<char*>(&width_px_),
          reinterpret_cast<char*>(&other->width_px_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoOutputFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoOutputFormats::InitAsDefaultInstance() {
}
class VideoOutputFormats::_Internal {
 public:
};

VideoOutputFormats::VideoOutputFormats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  output_formats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VideoOutputFormats)
}
VideoOutputFormats::VideoOutputFormats(const VideoOutputFormats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      output_formats_(from.output_formats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VideoOutputFormats)
}

void VideoOutputFormats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoOutputFormats_proto_2fmedia_5fprocessor_2fmedia_2eproto.base);
}

VideoOutputFormats::~VideoOutputFormats() {
  // @@protoc_insertion_point(destructor:VideoOutputFormats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoOutputFormats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VideoOutputFormats::ArenaDtor(void* object) {
  VideoOutputFormats* _this = reinterpret_cast< VideoOutputFormats* >(object);
  (void)_this;
}
void VideoOutputFormats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoOutputFormats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoOutputFormats& VideoOutputFormats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoOutputFormats_proto_2fmedia_5fprocessor_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void VideoOutputFormats::Clear() {
// @@protoc_insertion_point(message_clear_start:VideoOutputFormats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_formats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoOutputFormats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .VideoOutputFormats output_formats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_formats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoOutputFormats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VideoOutputFormats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VideoOutputFormats output_formats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_formats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_output_formats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VideoOutputFormats)
  return target;
}

size_t VideoOutputFormats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VideoOutputFormats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VideoOutputFormats output_formats = 1;
  total_size += 1UL * this->_internal_output_formats_size();
  for (const auto& msg : this->output_formats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoOutputFormats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VideoOutputFormats)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoOutputFormats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoOutputFormats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VideoOutputFormats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VideoOutputFormats)
    MergeFrom(*source);
  }
}

void VideoOutputFormats::MergeFrom(const VideoOutputFormats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VideoOutputFormats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_formats_.MergeFrom(from.output_formats_);
}

void VideoOutputFormats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VideoOutputFormats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoOutputFormats::CopyFrom(const VideoOutputFormats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VideoOutputFormats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoOutputFormats::IsInitialized() const {
  return true;
}

void VideoOutputFormats::InternalSwap(VideoOutputFormats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  output_formats_.InternalSwap(&other->output_formats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoOutputFormats::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ImageOutputFormat* Arena::CreateMaybeMessage< ::ImageOutputFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ImageOutputFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::MultipleImageOutputFormat* Arena::CreateMaybeMessage< ::MultipleImageOutputFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MultipleImageOutputFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::ImageTransform* Arena::CreateMaybeMessage< ::ImageTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ImageTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::ImageTransformOptions* Arena::CreateMaybeMessage< ::ImageTransformOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ImageTransformOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::WatermarkOverlayImage* Arena::CreateMaybeMessage< ::WatermarkOverlayImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WatermarkOverlayImage >(arena);
}
template<> PROTOBUF_NOINLINE ::ImageOutputFormats* Arena::CreateMaybeMessage< ::ImageOutputFormats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ImageOutputFormats >(arena);
}
template<> PROTOBUF_NOINLINE ::VideoOutputFormat* Arena::CreateMaybeMessage< ::VideoOutputFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VideoOutputFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::VideoOutputFormats* Arena::CreateMaybeMessage< ::VideoOutputFormats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VideoOutputFormats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
