// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/media_processor/media.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fmedia_5fprocessor_2fmedia_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fmedia_5fprocessor_2fmedia_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fmedia_5fprocessor_2fmedia_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fmedia_5fprocessor_2fmedia_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto;
class ImageOutputFormat;
class ImageOutputFormatDefaultTypeInternal;
extern ImageOutputFormatDefaultTypeInternal _ImageOutputFormat_default_instance_;
class ImageOutputFormats;
class ImageOutputFormatsDefaultTypeInternal;
extern ImageOutputFormatsDefaultTypeInternal _ImageOutputFormats_default_instance_;
class ImageTransform;
class ImageTransformDefaultTypeInternal;
extern ImageTransformDefaultTypeInternal _ImageTransform_default_instance_;
class ImageTransformOptions;
class ImageTransformOptionsDefaultTypeInternal;
extern ImageTransformOptionsDefaultTypeInternal _ImageTransformOptions_default_instance_;
class MultipleImageOutputFormat;
class MultipleImageOutputFormatDefaultTypeInternal;
extern MultipleImageOutputFormatDefaultTypeInternal _MultipleImageOutputFormat_default_instance_;
class VideoOutputFormat;
class VideoOutputFormatDefaultTypeInternal;
extern VideoOutputFormatDefaultTypeInternal _VideoOutputFormat_default_instance_;
class VideoOutputFormats;
class VideoOutputFormatsDefaultTypeInternal;
extern VideoOutputFormatsDefaultTypeInternal _VideoOutputFormats_default_instance_;
class WatermarkOverlayImage;
class WatermarkOverlayImageDefaultTypeInternal;
extern WatermarkOverlayImageDefaultTypeInternal _WatermarkOverlayImage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ImageOutputFormat* Arena::CreateMaybeMessage<::ImageOutputFormat>(Arena*);
template<> ::ImageOutputFormats* Arena::CreateMaybeMessage<::ImageOutputFormats>(Arena*);
template<> ::ImageTransform* Arena::CreateMaybeMessage<::ImageTransform>(Arena*);
template<> ::ImageTransformOptions* Arena::CreateMaybeMessage<::ImageTransformOptions>(Arena*);
template<> ::MultipleImageOutputFormat* Arena::CreateMaybeMessage<::MultipleImageOutputFormat>(Arena*);
template<> ::VideoOutputFormat* Arena::CreateMaybeMessage<::VideoOutputFormat>(Arena*);
template<> ::VideoOutputFormats* Arena::CreateMaybeMessage<::VideoOutputFormats>(Arena*);
template<> ::WatermarkOverlayImage* Arena::CreateMaybeMessage<::WatermarkOverlayImage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ImageTransform_ImageTransformType : int {
  ImageTransform_ImageTransformType_UNDEFINED = 0,
  ImageTransform_ImageTransformType_SORTA1 = 1,
  ImageTransform_ImageTransformType_SORTA2 = 2,
  ImageTransform_ImageTransformType_SORTAPAD1 = 3,
  ImageTransform_ImageTransformType_CENTER1 = 4,
  ImageTransform_ImageTransformType_SLIDE1 = 5,
  ImageTransform_ImageTransformType_ImageTransform_ImageTransformType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImageTransform_ImageTransformType_ImageTransform_ImageTransformType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImageTransform_ImageTransformType_IsValid(int value);
constexpr ImageTransform_ImageTransformType ImageTransform_ImageTransformType_ImageTransformType_MIN = ImageTransform_ImageTransformType_UNDEFINED;
constexpr ImageTransform_ImageTransformType ImageTransform_ImageTransformType_ImageTransformType_MAX = ImageTransform_ImageTransformType_SLIDE1;
constexpr int ImageTransform_ImageTransformType_ImageTransformType_ARRAYSIZE = ImageTransform_ImageTransformType_ImageTransformType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageTransform_ImageTransformType_descriptor();
template<typename T>
inline const std::string& ImageTransform_ImageTransformType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageTransform_ImageTransformType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageTransform_ImageTransformType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageTransform_ImageTransformType_descriptor(), enum_t_value);
}
inline bool ImageTransform_ImageTransformType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImageTransform_ImageTransformType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageTransform_ImageTransformType>(
    ImageTransform_ImageTransformType_descriptor(), name, value);
}
enum ImageOpType : int {
  RESIZE = 0,
  FLIP = 1,
  COMPRESS = 2,
  CONVERT = 3,
  WATERMARK = 4,
  CROP = 5,
  ImageOpType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImageOpType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImageOpType_IsValid(int value);
constexpr ImageOpType ImageOpType_MIN = RESIZE;
constexpr ImageOpType ImageOpType_MAX = CROP;
constexpr int ImageOpType_ARRAYSIZE = ImageOpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageOpType_descriptor();
template<typename T>
inline const std::string& ImageOpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageOpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageOpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageOpType_descriptor(), enum_t_value);
}
inline bool ImageOpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImageOpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageOpType>(
    ImageOpType_descriptor(), name, value);
}
enum ImageOutputType : int {
  UNDEFINED = 0,
  JPEG = 1,
  PNG = 2,
  TIFF = 3,
  RGB24 = 4,
  RGB24_NDARRAY = 5,
  ImageOutputType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImageOutputType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImageOutputType_IsValid(int value);
constexpr ImageOutputType ImageOutputType_MIN = UNDEFINED;
constexpr ImageOutputType ImageOutputType_MAX = RGB24_NDARRAY;
constexpr int ImageOutputType_ARRAYSIZE = ImageOutputType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageOutputType_descriptor();
template<typename T>
inline const std::string& ImageOutputType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageOutputType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageOutputType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageOutputType_descriptor(), enum_t_value);
}
inline bool ImageOutputType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImageOutputType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageOutputType>(
    ImageOutputType_descriptor(), name, value);
}
// ===================================================================

class ImageOutputFormat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageOutputFormat) */ {
 public:
  inline ImageOutputFormat() : ImageOutputFormat(nullptr) {}
  virtual ~ImageOutputFormat();

  ImageOutputFormat(const ImageOutputFormat& from);
  ImageOutputFormat(ImageOutputFormat&& from) noexcept
    : ImageOutputFormat() {
    *this = ::std::move(from);
  }

  inline ImageOutputFormat& operator=(const ImageOutputFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageOutputFormat& operator=(ImageOutputFormat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageOutputFormat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageOutputFormat* internal_default_instance() {
    return reinterpret_cast<const ImageOutputFormat*>(
               &_ImageOutputFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageOutputFormat& a, ImageOutputFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageOutputFormat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageOutputFormat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageOutputFormat* New() const final {
    return CreateMaybeMessage<ImageOutputFormat>(nullptr);
  }

  ImageOutputFormat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageOutputFormat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageOutputFormat& from);
  void MergeFrom(const ImageOutputFormat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageOutputFormat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageOutputFormat";
  }
  protected:
  explicit ImageOutputFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCropFieldNumber = 4,
    kOverlaysFieldNumber = 11,
    kExampleIdFieldNumber = 1,
    kTransformFieldNumber = 10,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kFlipHorizontalFieldNumber = 5,
    kFlipVerticalFieldNumber = 6,
    kQualityFieldNumber = 7,
    kCompressionFieldNumber = 8,
    kTypeFieldNumber = 9,
    kOpTypeFieldNumber = 12,
  };
  // repeated float crop = 4;
  int crop_size() const;
  private:
  int _internal_crop_size() const;
  public:
  void clear_crop();
  private:
  float _internal_crop(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_crop() const;
  void _internal_add_crop(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_crop();
  public:
  float crop(int index) const;
  void set_crop(int index, float value);
  void add_crop(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      crop() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_crop();

  // repeated .WatermarkOverlayImage overlays = 11;
  int overlays_size() const;
  private:
  int _internal_overlays_size() const;
  public:
  void clear_overlays();
  ::WatermarkOverlayImage* mutable_overlays(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WatermarkOverlayImage >*
      mutable_overlays();
  private:
  const ::WatermarkOverlayImage& _internal_overlays(int index) const;
  ::WatermarkOverlayImage* _internal_add_overlays();
  public:
  const ::WatermarkOverlayImage& overlays(int index) const;
  ::WatermarkOverlayImage* add_overlays();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WatermarkOverlayImage >&
      overlays() const;

  // string example_id = 1;
  void clear_example_id();
  const std::string& example_id() const;
  void set_example_id(const std::string& value);
  void set_example_id(std::string&& value);
  void set_example_id(const char* value);
  void set_example_id(const char* value, size_t size);
  std::string* mutable_example_id();
  std::string* release_example_id();
  void set_allocated_example_id(std::string* example_id);
  private:
  const std::string& _internal_example_id() const;
  void _internal_set_example_id(const std::string& value);
  std::string* _internal_mutable_example_id();
  public:

  // .ImageTransform transform = 10;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::ImageTransform& transform() const;
  ::ImageTransform* release_transform();
  ::ImageTransform* mutable_transform();
  void set_allocated_transform(::ImageTransform* transform);
  private:
  const ::ImageTransform& _internal_transform() const;
  ::ImageTransform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::ImageTransform* transform);
  ::ImageTransform* unsafe_arena_release_transform();

  // uint32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool flip_horizontal = 5;
  void clear_flip_horizontal();
  bool flip_horizontal() const;
  void set_flip_horizontal(bool value);
  private:
  bool _internal_flip_horizontal() const;
  void _internal_set_flip_horizontal(bool value);
  public:

  // bool flip_vertical = 6;
  void clear_flip_vertical();
  bool flip_vertical() const;
  void set_flip_vertical(bool value);
  private:
  bool _internal_flip_vertical() const;
  void _internal_set_flip_vertical(bool value);
  public:

  // uint32 quality = 7;
  void clear_quality();
  ::PROTOBUF_NAMESPACE_ID::uint32 quality() const;
  void set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quality() const;
  void _internal_set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 compression = 8;
  void clear_compression();
  ::PROTOBUF_NAMESPACE_ID::uint32 compression() const;
  void set_compression(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_compression() const;
  void _internal_set_compression(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .ImageOutputType type = 9;
  void clear_type();
  ::ImageOutputType type() const;
  void set_type(::ImageOutputType value);
  private:
  ::ImageOutputType _internal_type() const;
  void _internal_set_type(::ImageOutputType value);
  public:

  // .ImageOpType op_type = 12;
  void clear_op_type();
  ::ImageOpType op_type() const;
  void set_op_type(::ImageOpType value);
  private:
  ::ImageOpType _internal_op_type() const;
  void _internal_set_op_type(::ImageOpType value);
  public:

  // @@protoc_insertion_point(class_scope:ImageOutputFormat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > crop_;
  mutable std::atomic<int> _crop_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WatermarkOverlayImage > overlays_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr example_id_;
  ::ImageTransform* transform_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  bool flip_horizontal_;
  bool flip_vertical_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_;
  ::PROTOBUF_NAMESPACE_ID::uint32 compression_;
  int type_;
  int op_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmedia_5fprocessor_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class MultipleImageOutputFormat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MultipleImageOutputFormat) */ {
 public:
  inline MultipleImageOutputFormat() : MultipleImageOutputFormat(nullptr) {}
  virtual ~MultipleImageOutputFormat();

  MultipleImageOutputFormat(const MultipleImageOutputFormat& from);
  MultipleImageOutputFormat(MultipleImageOutputFormat&& from) noexcept
    : MultipleImageOutputFormat() {
    *this = ::std::move(from);
  }

  inline MultipleImageOutputFormat& operator=(const MultipleImageOutputFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultipleImageOutputFormat& operator=(MultipleImageOutputFormat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultipleImageOutputFormat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultipleImageOutputFormat* internal_default_instance() {
    return reinterpret_cast<const MultipleImageOutputFormat*>(
               &_MultipleImageOutputFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MultipleImageOutputFormat& a, MultipleImageOutputFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(MultipleImageOutputFormat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultipleImageOutputFormat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultipleImageOutputFormat* New() const final {
    return CreateMaybeMessage<MultipleImageOutputFormat>(nullptr);
  }

  MultipleImageOutputFormat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultipleImageOutputFormat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultipleImageOutputFormat& from);
  void MergeFrom(const MultipleImageOutputFormat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultipleImageOutputFormat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MultipleImageOutputFormat";
  }
  protected:
  explicit MultipleImageOutputFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFormatsFieldNumber = 2,
    kExampleIdFieldNumber = 1,
  };
  // repeated .ImageOutputFormat output_formats = 2;
  int output_formats_size() const;
  private:
  int _internal_output_formats_size() const;
  public:
  void clear_output_formats();
  ::ImageOutputFormat* mutable_output_formats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageOutputFormat >*
      mutable_output_formats();
  private:
  const ::ImageOutputFormat& _internal_output_formats(int index) const;
  ::ImageOutputFormat* _internal_add_output_formats();
  public:
  const ::ImageOutputFormat& output_formats(int index) const;
  ::ImageOutputFormat* add_output_formats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageOutputFormat >&
      output_formats() const;

  // string example_id = 1;
  void clear_example_id();
  const std::string& example_id() const;
  void set_example_id(const std::string& value);
  void set_example_id(std::string&& value);
  void set_example_id(const char* value);
  void set_example_id(const char* value, size_t size);
  std::string* mutable_example_id();
  std::string* release_example_id();
  void set_allocated_example_id(std::string* example_id);
  private:
  const std::string& _internal_example_id() const;
  void _internal_set_example_id(const std::string& value);
  std::string* _internal_mutable_example_id();
  public:

  // @@protoc_insertion_point(class_scope:MultipleImageOutputFormat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageOutputFormat > output_formats_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr example_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmedia_5fprocessor_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class ImageTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageTransform) */ {
 public:
  inline ImageTransform() : ImageTransform(nullptr) {}
  virtual ~ImageTransform();

  ImageTransform(const ImageTransform& from);
  ImageTransform(ImageTransform&& from) noexcept
    : ImageTransform() {
    *this = ::std::move(from);
  }

  inline ImageTransform& operator=(const ImageTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageTransform& operator=(ImageTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageTransform* internal_default_instance() {
    return reinterpret_cast<const ImageTransform*>(
               &_ImageTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ImageTransform& a, ImageTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageTransform* New() const final {
    return CreateMaybeMessage<ImageTransform>(nullptr);
  }

  ImageTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageTransform& from);
  void MergeFrom(const ImageTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageTransform";
  }
  protected:
  explicit ImageTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ImageTransform_ImageTransformType ImageTransformType;
  static constexpr ImageTransformType UNDEFINED =
    ImageTransform_ImageTransformType_UNDEFINED;
  static constexpr ImageTransformType SORTA1 =
    ImageTransform_ImageTransformType_SORTA1;
  static constexpr ImageTransformType SORTA2 =
    ImageTransform_ImageTransformType_SORTA2;
  static constexpr ImageTransformType SORTAPAD1 =
    ImageTransform_ImageTransformType_SORTAPAD1;
  static constexpr ImageTransformType CENTER1 =
    ImageTransform_ImageTransformType_CENTER1;
  static constexpr ImageTransformType SLIDE1 =
    ImageTransform_ImageTransformType_SLIDE1;
  static inline bool ImageTransformType_IsValid(int value) {
    return ImageTransform_ImageTransformType_IsValid(value);
  }
  static constexpr ImageTransformType ImageTransformType_MIN =
    ImageTransform_ImageTransformType_ImageTransformType_MIN;
  static constexpr ImageTransformType ImageTransformType_MAX =
    ImageTransform_ImageTransformType_ImageTransformType_MAX;
  static constexpr int ImageTransformType_ARRAYSIZE =
    ImageTransform_ImageTransformType_ImageTransformType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ImageTransformType_descriptor() {
    return ImageTransform_ImageTransformType_descriptor();
  }
  template<typename T>
  static inline const std::string& ImageTransformType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ImageTransformType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ImageTransformType_Name.");
    return ImageTransform_ImageTransformType_Name(enum_t_value);
  }
  static inline bool ImageTransformType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ImageTransformType* value) {
    return ImageTransform_ImageTransformType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .ImageTransformOptions options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::ImageTransformOptions& options() const;
  ::ImageTransformOptions* release_options();
  ::ImageTransformOptions* mutable_options();
  void set_allocated_options(::ImageTransformOptions* options);
  private:
  const ::ImageTransformOptions& _internal_options() const;
  ::ImageTransformOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::ImageTransformOptions* options);
  ::ImageTransformOptions* unsafe_arena_release_options();

  // .ImageTransform.ImageTransformType type = 1;
  void clear_type();
  ::ImageTransform_ImageTransformType type() const;
  void set_type(::ImageTransform_ImageTransformType value);
  private:
  ::ImageTransform_ImageTransformType _internal_type() const;
  void _internal_set_type(::ImageTransform_ImageTransformType value);
  public:

  // @@protoc_insertion_point(class_scope:ImageTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ImageTransformOptions* options_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmedia_5fprocessor_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class ImageTransformOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageTransformOptions) */ {
 public:
  inline ImageTransformOptions() : ImageTransformOptions(nullptr) {}
  virtual ~ImageTransformOptions();

  ImageTransformOptions(const ImageTransformOptions& from);
  ImageTransformOptions(ImageTransformOptions&& from) noexcept
    : ImageTransformOptions() {
    *this = ::std::move(from);
  }

  inline ImageTransformOptions& operator=(const ImageTransformOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageTransformOptions& operator=(ImageTransformOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageTransformOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageTransformOptions* internal_default_instance() {
    return reinterpret_cast<const ImageTransformOptions*>(
               &_ImageTransformOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ImageTransformOptions& a, ImageTransformOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageTransformOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageTransformOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageTransformOptions* New() const final {
    return CreateMaybeMessage<ImageTransformOptions>(nullptr);
  }

  ImageTransformOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageTransformOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageTransformOptions& from);
  void MergeFrom(const ImageTransformOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageTransformOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageTransformOptions";
  }
  protected:
  explicit ImageTransformOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinSizeFieldNumber = 1,
    kCropSizeFieldNumber = 2,
    kDownsampleSizeFieldNumber = 3,
    kCropSizePixelStrideFieldNumber = 4,
    kHardcodedSortaCropSizesFieldNumber = 5,
    kRatioBasedFilterFieldNumber = 6,
    kTypeFieldNumber = 7,
  };
  // uint32 min_size = 1;
  void clear_min_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_size() const;
  void set_min_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_size() const;
  void _internal_set_min_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 crop_size = 2;
  void clear_crop_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size() const;
  void set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crop_size() const;
  void _internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 downsample_size = 3;
  void clear_downsample_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 downsample_size() const;
  void set_downsample_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_downsample_size() const;
  void _internal_set_downsample_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 crop_size_pixel_stride = 4;
  void clear_crop_size_pixel_stride();
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size_pixel_stride() const;
  void set_crop_size_pixel_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crop_size_pixel_stride() const;
  void _internal_set_crop_size_pixel_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool hardcoded_sorta_crop_sizes = 5;
  void clear_hardcoded_sorta_crop_sizes();
  bool hardcoded_sorta_crop_sizes() const;
  void set_hardcoded_sorta_crop_sizes(bool value);
  private:
  bool _internal_hardcoded_sorta_crop_sizes() const;
  void _internal_set_hardcoded_sorta_crop_sizes(bool value);
  public:

  // bool ratio_based_filter = 6;
  void clear_ratio_based_filter();
  bool ratio_based_filter() const;
  void set_ratio_based_filter(bool value);
  private:
  bool _internal_ratio_based_filter() const;
  void _internal_set_ratio_based_filter(bool value);
  public:

  // .ImageOutputType type = 7;
  void clear_type();
  ::ImageOutputType type() const;
  void set_type(::ImageOutputType value);
  private:
  ::ImageOutputType _internal_type() const;
  void _internal_set_type(::ImageOutputType value);
  public:

  // @@protoc_insertion_point(class_scope:ImageTransformOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 downsample_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size_pixel_stride_;
  bool hardcoded_sorta_crop_sizes_;
  bool ratio_based_filter_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmedia_5fprocessor_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class WatermarkOverlayImage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WatermarkOverlayImage) */ {
 public:
  inline WatermarkOverlayImage() : WatermarkOverlayImage(nullptr) {}
  virtual ~WatermarkOverlayImage();

  WatermarkOverlayImage(const WatermarkOverlayImage& from);
  WatermarkOverlayImage(WatermarkOverlayImage&& from) noexcept
    : WatermarkOverlayImage() {
    *this = ::std::move(from);
  }

  inline WatermarkOverlayImage& operator=(const WatermarkOverlayImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatermarkOverlayImage& operator=(WatermarkOverlayImage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatermarkOverlayImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatermarkOverlayImage* internal_default_instance() {
    return reinterpret_cast<const WatermarkOverlayImage*>(
               &_WatermarkOverlayImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WatermarkOverlayImage& a, WatermarkOverlayImage& b) {
    a.Swap(&b);
  }
  inline void Swap(WatermarkOverlayImage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatermarkOverlayImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatermarkOverlayImage* New() const final {
    return CreateMaybeMessage<WatermarkOverlayImage>(nullptr);
  }

  WatermarkOverlayImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatermarkOverlayImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatermarkOverlayImage& from);
  void MergeFrom(const WatermarkOverlayImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatermarkOverlayImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WatermarkOverlayImage";
  }
  protected:
  explicit WatermarkOverlayImage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
    kLeftFieldNumber = 2,
    kTopFieldNumber = 3,
  };
  // bytes image = 1;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // float left = 2;
  void clear_left();
  float left() const;
  void set_left(float value);
  private:
  float _internal_left() const;
  void _internal_set_left(float value);
  public:

  // float top = 3;
  void clear_top();
  float top() const;
  void set_top(float value);
  private:
  float _internal_top() const;
  void _internal_set_top(float value);
  public:

  // @@protoc_insertion_point(class_scope:WatermarkOverlayImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  float left_;
  float top_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmedia_5fprocessor_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class ImageOutputFormats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageOutputFormats) */ {
 public:
  inline ImageOutputFormats() : ImageOutputFormats(nullptr) {}
  virtual ~ImageOutputFormats();

  ImageOutputFormats(const ImageOutputFormats& from);
  ImageOutputFormats(ImageOutputFormats&& from) noexcept
    : ImageOutputFormats() {
    *this = ::std::move(from);
  }

  inline ImageOutputFormats& operator=(const ImageOutputFormats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageOutputFormats& operator=(ImageOutputFormats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageOutputFormats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageOutputFormats* internal_default_instance() {
    return reinterpret_cast<const ImageOutputFormats*>(
               &_ImageOutputFormats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ImageOutputFormats& a, ImageOutputFormats& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageOutputFormats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageOutputFormats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageOutputFormats* New() const final {
    return CreateMaybeMessage<ImageOutputFormats>(nullptr);
  }

  ImageOutputFormats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageOutputFormats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageOutputFormats& from);
  void MergeFrom(const ImageOutputFormats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageOutputFormats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageOutputFormats";
  }
  protected:
  explicit ImageOutputFormats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFormatsFieldNumber = 1,
  };
  // repeated .ImageOutputFormat output_formats = 1;
  int output_formats_size() const;
  private:
  int _internal_output_formats_size() const;
  public:
  void clear_output_formats();
  ::ImageOutputFormat* mutable_output_formats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageOutputFormat >*
      mutable_output_formats();
  private:
  const ::ImageOutputFormat& _internal_output_formats(int index) const;
  ::ImageOutputFormat* _internal_add_output_formats();
  public:
  const ::ImageOutputFormat& output_formats(int index) const;
  ::ImageOutputFormat* add_output_formats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageOutputFormat >&
      output_formats() const;

  // @@protoc_insertion_point(class_scope:ImageOutputFormats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageOutputFormat > output_formats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmedia_5fprocessor_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class VideoOutputFormat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VideoOutputFormat) */ {
 public:
  inline VideoOutputFormat() : VideoOutputFormat(nullptr) {}
  virtual ~VideoOutputFormat();

  VideoOutputFormat(const VideoOutputFormat& from);
  VideoOutputFormat(VideoOutputFormat&& from) noexcept
    : VideoOutputFormat() {
    *this = ::std::move(from);
  }

  inline VideoOutputFormat& operator=(const VideoOutputFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoOutputFormat& operator=(VideoOutputFormat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoOutputFormat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoOutputFormat* internal_default_instance() {
    return reinterpret_cast<const VideoOutputFormat*>(
               &_VideoOutputFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VideoOutputFormat& a, VideoOutputFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoOutputFormat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoOutputFormat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoOutputFormat* New() const final {
    return CreateMaybeMessage<VideoOutputFormat>(nullptr);
  }

  VideoOutputFormat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoOutputFormat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoOutputFormat& from);
  void MergeFrom(const VideoOutputFormat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoOutputFormat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VideoOutputFormat";
  }
  protected:
  explicit VideoOutputFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthPxFieldNumber = 1,
    kHeightPxFieldNumber = 2,
    kSecondsBetweenFramesFieldNumber = 3,
  };
  // uint32 width_px = 1;
  void clear_width_px();
  ::PROTOBUF_NAMESPACE_ID::uint32 width_px() const;
  void set_width_px(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width_px() const;
  void _internal_set_width_px(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height_px = 2;
  void clear_height_px();
  ::PROTOBUF_NAMESPACE_ID::uint32 height_px() const;
  void set_height_px(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height_px() const;
  void _internal_set_height_px(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float seconds_between_frames = 3;
  void clear_seconds_between_frames();
  float seconds_between_frames() const;
  void set_seconds_between_frames(float value);
  private:
  float _internal_seconds_between_frames() const;
  void _internal_set_seconds_between_frames(float value);
  public:

  // @@protoc_insertion_point(class_scope:VideoOutputFormat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_px_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_px_;
  float seconds_between_frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmedia_5fprocessor_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class VideoOutputFormats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VideoOutputFormats) */ {
 public:
  inline VideoOutputFormats() : VideoOutputFormats(nullptr) {}
  virtual ~VideoOutputFormats();

  VideoOutputFormats(const VideoOutputFormats& from);
  VideoOutputFormats(VideoOutputFormats&& from) noexcept
    : VideoOutputFormats() {
    *this = ::std::move(from);
  }

  inline VideoOutputFormats& operator=(const VideoOutputFormats& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoOutputFormats& operator=(VideoOutputFormats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoOutputFormats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoOutputFormats* internal_default_instance() {
    return reinterpret_cast<const VideoOutputFormats*>(
               &_VideoOutputFormats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VideoOutputFormats& a, VideoOutputFormats& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoOutputFormats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoOutputFormats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoOutputFormats* New() const final {
    return CreateMaybeMessage<VideoOutputFormats>(nullptr);
  }

  VideoOutputFormats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoOutputFormats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoOutputFormats& from);
  void MergeFrom(const VideoOutputFormats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoOutputFormats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VideoOutputFormats";
  }
  protected:
  explicit VideoOutputFormats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto);
    return ::descriptor_table_proto_2fmedia_5fprocessor_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFormatsFieldNumber = 1,
  };
  // repeated .VideoOutputFormats output_formats = 1;
  int output_formats_size() const;
  private:
  int _internal_output_formats_size() const;
  public:
  void clear_output_formats();
  ::VideoOutputFormats* mutable_output_formats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoOutputFormats >*
      mutable_output_formats();
  private:
  const ::VideoOutputFormats& _internal_output_formats(int index) const;
  ::VideoOutputFormats* _internal_add_output_formats();
  public:
  const ::VideoOutputFormats& output_formats(int index) const;
  ::VideoOutputFormats* add_output_formats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoOutputFormats >&
      output_formats() const;

  // @@protoc_insertion_point(class_scope:VideoOutputFormats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoOutputFormats > output_formats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmedia_5fprocessor_2fmedia_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageOutputFormat

// string example_id = 1;
inline void ImageOutputFormat::clear_example_id() {
  example_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImageOutputFormat::example_id() const {
  // @@protoc_insertion_point(field_get:ImageOutputFormat.example_id)
  return _internal_example_id();
}
inline void ImageOutputFormat::set_example_id(const std::string& value) {
  _internal_set_example_id(value);
  // @@protoc_insertion_point(field_set:ImageOutputFormat.example_id)
}
inline std::string* ImageOutputFormat::mutable_example_id() {
  // @@protoc_insertion_point(field_mutable:ImageOutputFormat.example_id)
  return _internal_mutable_example_id();
}
inline const std::string& ImageOutputFormat::_internal_example_id() const {
  return example_id_.Get();
}
inline void ImageOutputFormat::_internal_set_example_id(const std::string& value) {
  
  example_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageOutputFormat::set_example_id(std::string&& value) {
  
  example_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ImageOutputFormat.example_id)
}
inline void ImageOutputFormat::set_example_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  example_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ImageOutputFormat.example_id)
}
inline void ImageOutputFormat::set_example_id(const char* value,
    size_t size) {
  
  example_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ImageOutputFormat.example_id)
}
inline std::string* ImageOutputFormat::_internal_mutable_example_id() {
  
  return example_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageOutputFormat::release_example_id() {
  // @@protoc_insertion_point(field_release:ImageOutputFormat.example_id)
  return example_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageOutputFormat::set_allocated_example_id(std::string* example_id) {
  if (example_id != nullptr) {
    
  } else {
    
  }
  example_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), example_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ImageOutputFormat.example_id)
}

// uint32 width = 2;
inline void ImageOutputFormat::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageOutputFormat::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageOutputFormat::width() const {
  // @@protoc_insertion_point(field_get:ImageOutputFormat.width)
  return _internal_width();
}
inline void ImageOutputFormat::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void ImageOutputFormat::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ImageOutputFormat.width)
}

// uint32 height = 3;
inline void ImageOutputFormat::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageOutputFormat::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageOutputFormat::height() const {
  // @@protoc_insertion_point(field_get:ImageOutputFormat.height)
  return _internal_height();
}
inline void ImageOutputFormat::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void ImageOutputFormat::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ImageOutputFormat.height)
}

// repeated float crop = 4;
inline int ImageOutputFormat::_internal_crop_size() const {
  return crop_.size();
}
inline int ImageOutputFormat::crop_size() const {
  return _internal_crop_size();
}
inline void ImageOutputFormat::clear_crop() {
  crop_.Clear();
}
inline float ImageOutputFormat::_internal_crop(int index) const {
  return crop_.Get(index);
}
inline float ImageOutputFormat::crop(int index) const {
  // @@protoc_insertion_point(field_get:ImageOutputFormat.crop)
  return _internal_crop(index);
}
inline void ImageOutputFormat::set_crop(int index, float value) {
  crop_.Set(index, value);
  // @@protoc_insertion_point(field_set:ImageOutputFormat.crop)
}
inline void ImageOutputFormat::_internal_add_crop(float value) {
  crop_.Add(value);
}
inline void ImageOutputFormat::add_crop(float value) {
  _internal_add_crop(value);
  // @@protoc_insertion_point(field_add:ImageOutputFormat.crop)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageOutputFormat::_internal_crop() const {
  return crop_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageOutputFormat::crop() const {
  // @@protoc_insertion_point(field_list:ImageOutputFormat.crop)
  return _internal_crop();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageOutputFormat::_internal_mutable_crop() {
  return &crop_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageOutputFormat::mutable_crop() {
  // @@protoc_insertion_point(field_mutable_list:ImageOutputFormat.crop)
  return _internal_mutable_crop();
}

// bool flip_horizontal = 5;
inline void ImageOutputFormat::clear_flip_horizontal() {
  flip_horizontal_ = false;
}
inline bool ImageOutputFormat::_internal_flip_horizontal() const {
  return flip_horizontal_;
}
inline bool ImageOutputFormat::flip_horizontal() const {
  // @@protoc_insertion_point(field_get:ImageOutputFormat.flip_horizontal)
  return _internal_flip_horizontal();
}
inline void ImageOutputFormat::_internal_set_flip_horizontal(bool value) {
  
  flip_horizontal_ = value;
}
inline void ImageOutputFormat::set_flip_horizontal(bool value) {
  _internal_set_flip_horizontal(value);
  // @@protoc_insertion_point(field_set:ImageOutputFormat.flip_horizontal)
}

// bool flip_vertical = 6;
inline void ImageOutputFormat::clear_flip_vertical() {
  flip_vertical_ = false;
}
inline bool ImageOutputFormat::_internal_flip_vertical() const {
  return flip_vertical_;
}
inline bool ImageOutputFormat::flip_vertical() const {
  // @@protoc_insertion_point(field_get:ImageOutputFormat.flip_vertical)
  return _internal_flip_vertical();
}
inline void ImageOutputFormat::_internal_set_flip_vertical(bool value) {
  
  flip_vertical_ = value;
}
inline void ImageOutputFormat::set_flip_vertical(bool value) {
  _internal_set_flip_vertical(value);
  // @@protoc_insertion_point(field_set:ImageOutputFormat.flip_vertical)
}

// uint32 quality = 7;
inline void ImageOutputFormat::clear_quality() {
  quality_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageOutputFormat::_internal_quality() const {
  return quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageOutputFormat::quality() const {
  // @@protoc_insertion_point(field_get:ImageOutputFormat.quality)
  return _internal_quality();
}
inline void ImageOutputFormat::_internal_set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  quality_ = value;
}
inline void ImageOutputFormat::set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:ImageOutputFormat.quality)
}

// uint32 compression = 8;
inline void ImageOutputFormat::clear_compression() {
  compression_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageOutputFormat::_internal_compression() const {
  return compression_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageOutputFormat::compression() const {
  // @@protoc_insertion_point(field_get:ImageOutputFormat.compression)
  return _internal_compression();
}
inline void ImageOutputFormat::_internal_set_compression(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  compression_ = value;
}
inline void ImageOutputFormat::set_compression(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_compression(value);
  // @@protoc_insertion_point(field_set:ImageOutputFormat.compression)
}

// .ImageOutputType type = 9;
inline void ImageOutputFormat::clear_type() {
  type_ = 0;
}
inline ::ImageOutputType ImageOutputFormat::_internal_type() const {
  return static_cast< ::ImageOutputType >(type_);
}
inline ::ImageOutputType ImageOutputFormat::type() const {
  // @@protoc_insertion_point(field_get:ImageOutputFormat.type)
  return _internal_type();
}
inline void ImageOutputFormat::_internal_set_type(::ImageOutputType value) {
  
  type_ = value;
}
inline void ImageOutputFormat::set_type(::ImageOutputType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ImageOutputFormat.type)
}

// .ImageTransform transform = 10;
inline bool ImageOutputFormat::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool ImageOutputFormat::has_transform() const {
  return _internal_has_transform();
}
inline void ImageOutputFormat::clear_transform() {
  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
inline const ::ImageTransform& ImageOutputFormat::_internal_transform() const {
  const ::ImageTransform* p = transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ImageTransform*>(
      &::_ImageTransform_default_instance_);
}
inline const ::ImageTransform& ImageOutputFormat::transform() const {
  // @@protoc_insertion_point(field_get:ImageOutputFormat.transform)
  return _internal_transform();
}
inline void ImageOutputFormat::unsafe_arena_set_allocated_transform(
    ::ImageTransform* transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ImageOutputFormat.transform)
}
inline ::ImageTransform* ImageOutputFormat::release_transform() {
  
  ::ImageTransform* temp = transform_;
  transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ImageTransform* ImageOutputFormat::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:ImageOutputFormat.transform)
  
  ::ImageTransform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::ImageTransform* ImageOutputFormat::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::ImageTransform>(GetArena());
    transform_ = p;
  }
  return transform_;
}
inline ::ImageTransform* ImageOutputFormat::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:ImageOutputFormat.transform)
  return _internal_mutable_transform();
}
inline void ImageOutputFormat::set_allocated_transform(::ImageTransform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:ImageOutputFormat.transform)
}

// repeated .WatermarkOverlayImage overlays = 11;
inline int ImageOutputFormat::_internal_overlays_size() const {
  return overlays_.size();
}
inline int ImageOutputFormat::overlays_size() const {
  return _internal_overlays_size();
}
inline void ImageOutputFormat::clear_overlays() {
  overlays_.Clear();
}
inline ::WatermarkOverlayImage* ImageOutputFormat::mutable_overlays(int index) {
  // @@protoc_insertion_point(field_mutable:ImageOutputFormat.overlays)
  return overlays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WatermarkOverlayImage >*
ImageOutputFormat::mutable_overlays() {
  // @@protoc_insertion_point(field_mutable_list:ImageOutputFormat.overlays)
  return &overlays_;
}
inline const ::WatermarkOverlayImage& ImageOutputFormat::_internal_overlays(int index) const {
  return overlays_.Get(index);
}
inline const ::WatermarkOverlayImage& ImageOutputFormat::overlays(int index) const {
  // @@protoc_insertion_point(field_get:ImageOutputFormat.overlays)
  return _internal_overlays(index);
}
inline ::WatermarkOverlayImage* ImageOutputFormat::_internal_add_overlays() {
  return overlays_.Add();
}
inline ::WatermarkOverlayImage* ImageOutputFormat::add_overlays() {
  // @@protoc_insertion_point(field_add:ImageOutputFormat.overlays)
  return _internal_add_overlays();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WatermarkOverlayImage >&
ImageOutputFormat::overlays() const {
  // @@protoc_insertion_point(field_list:ImageOutputFormat.overlays)
  return overlays_;
}

// .ImageOpType op_type = 12;
inline void ImageOutputFormat::clear_op_type() {
  op_type_ = 0;
}
inline ::ImageOpType ImageOutputFormat::_internal_op_type() const {
  return static_cast< ::ImageOpType >(op_type_);
}
inline ::ImageOpType ImageOutputFormat::op_type() const {
  // @@protoc_insertion_point(field_get:ImageOutputFormat.op_type)
  return _internal_op_type();
}
inline void ImageOutputFormat::_internal_set_op_type(::ImageOpType value) {
  
  op_type_ = value;
}
inline void ImageOutputFormat::set_op_type(::ImageOpType value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:ImageOutputFormat.op_type)
}

// -------------------------------------------------------------------

// MultipleImageOutputFormat

// string example_id = 1;
inline void MultipleImageOutputFormat::clear_example_id() {
  example_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MultipleImageOutputFormat::example_id() const {
  // @@protoc_insertion_point(field_get:MultipleImageOutputFormat.example_id)
  return _internal_example_id();
}
inline void MultipleImageOutputFormat::set_example_id(const std::string& value) {
  _internal_set_example_id(value);
  // @@protoc_insertion_point(field_set:MultipleImageOutputFormat.example_id)
}
inline std::string* MultipleImageOutputFormat::mutable_example_id() {
  // @@protoc_insertion_point(field_mutable:MultipleImageOutputFormat.example_id)
  return _internal_mutable_example_id();
}
inline const std::string& MultipleImageOutputFormat::_internal_example_id() const {
  return example_id_.Get();
}
inline void MultipleImageOutputFormat::_internal_set_example_id(const std::string& value) {
  
  example_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MultipleImageOutputFormat::set_example_id(std::string&& value) {
  
  example_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MultipleImageOutputFormat.example_id)
}
inline void MultipleImageOutputFormat::set_example_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  example_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MultipleImageOutputFormat.example_id)
}
inline void MultipleImageOutputFormat::set_example_id(const char* value,
    size_t size) {
  
  example_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MultipleImageOutputFormat.example_id)
}
inline std::string* MultipleImageOutputFormat::_internal_mutable_example_id() {
  
  return example_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MultipleImageOutputFormat::release_example_id() {
  // @@protoc_insertion_point(field_release:MultipleImageOutputFormat.example_id)
  return example_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MultipleImageOutputFormat::set_allocated_example_id(std::string* example_id) {
  if (example_id != nullptr) {
    
  } else {
    
  }
  example_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), example_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MultipleImageOutputFormat.example_id)
}

// repeated .ImageOutputFormat output_formats = 2;
inline int MultipleImageOutputFormat::_internal_output_formats_size() const {
  return output_formats_.size();
}
inline int MultipleImageOutputFormat::output_formats_size() const {
  return _internal_output_formats_size();
}
inline void MultipleImageOutputFormat::clear_output_formats() {
  output_formats_.Clear();
}
inline ::ImageOutputFormat* MultipleImageOutputFormat::mutable_output_formats(int index) {
  // @@protoc_insertion_point(field_mutable:MultipleImageOutputFormat.output_formats)
  return output_formats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageOutputFormat >*
MultipleImageOutputFormat::mutable_output_formats() {
  // @@protoc_insertion_point(field_mutable_list:MultipleImageOutputFormat.output_formats)
  return &output_formats_;
}
inline const ::ImageOutputFormat& MultipleImageOutputFormat::_internal_output_formats(int index) const {
  return output_formats_.Get(index);
}
inline const ::ImageOutputFormat& MultipleImageOutputFormat::output_formats(int index) const {
  // @@protoc_insertion_point(field_get:MultipleImageOutputFormat.output_formats)
  return _internal_output_formats(index);
}
inline ::ImageOutputFormat* MultipleImageOutputFormat::_internal_add_output_formats() {
  return output_formats_.Add();
}
inline ::ImageOutputFormat* MultipleImageOutputFormat::add_output_formats() {
  // @@protoc_insertion_point(field_add:MultipleImageOutputFormat.output_formats)
  return _internal_add_output_formats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageOutputFormat >&
MultipleImageOutputFormat::output_formats() const {
  // @@protoc_insertion_point(field_list:MultipleImageOutputFormat.output_formats)
  return output_formats_;
}

// -------------------------------------------------------------------

// ImageTransform

// .ImageTransform.ImageTransformType type = 1;
inline void ImageTransform::clear_type() {
  type_ = 0;
}
inline ::ImageTransform_ImageTransformType ImageTransform::_internal_type() const {
  return static_cast< ::ImageTransform_ImageTransformType >(type_);
}
inline ::ImageTransform_ImageTransformType ImageTransform::type() const {
  // @@protoc_insertion_point(field_get:ImageTransform.type)
  return _internal_type();
}
inline void ImageTransform::_internal_set_type(::ImageTransform_ImageTransformType value) {
  
  type_ = value;
}
inline void ImageTransform::set_type(::ImageTransform_ImageTransformType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ImageTransform.type)
}

// .ImageTransformOptions options = 2;
inline bool ImageTransform::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool ImageTransform::has_options() const {
  return _internal_has_options();
}
inline void ImageTransform::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::ImageTransformOptions& ImageTransform::_internal_options() const {
  const ::ImageTransformOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ImageTransformOptions*>(
      &::_ImageTransformOptions_default_instance_);
}
inline const ::ImageTransformOptions& ImageTransform::options() const {
  // @@protoc_insertion_point(field_get:ImageTransform.options)
  return _internal_options();
}
inline void ImageTransform::unsafe_arena_set_allocated_options(
    ::ImageTransformOptions* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ImageTransform.options)
}
inline ::ImageTransformOptions* ImageTransform::release_options() {
  
  ::ImageTransformOptions* temp = options_;
  options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ImageTransformOptions* ImageTransform::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:ImageTransform.options)
  
  ::ImageTransformOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::ImageTransformOptions* ImageTransform::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::ImageTransformOptions>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::ImageTransformOptions* ImageTransform::mutable_options() {
  // @@protoc_insertion_point(field_mutable:ImageTransform.options)
  return _internal_mutable_options();
}
inline void ImageTransform::set_allocated_options(::ImageTransformOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:ImageTransform.options)
}

// -------------------------------------------------------------------

// ImageTransformOptions

// uint32 min_size = 1;
inline void ImageTransformOptions::clear_min_size() {
  min_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageTransformOptions::_internal_min_size() const {
  return min_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageTransformOptions::min_size() const {
  // @@protoc_insertion_point(field_get:ImageTransformOptions.min_size)
  return _internal_min_size();
}
inline void ImageTransformOptions::_internal_set_min_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  min_size_ = value;
}
inline void ImageTransformOptions::set_min_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_size(value);
  // @@protoc_insertion_point(field_set:ImageTransformOptions.min_size)
}

// uint32 crop_size = 2;
inline void ImageTransformOptions::clear_crop_size() {
  crop_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageTransformOptions::_internal_crop_size() const {
  return crop_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageTransformOptions::crop_size() const {
  // @@protoc_insertion_point(field_get:ImageTransformOptions.crop_size)
  return _internal_crop_size();
}
inline void ImageTransformOptions::_internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  crop_size_ = value;
}
inline void ImageTransformOptions::set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:ImageTransformOptions.crop_size)
}

// uint32 downsample_size = 3;
inline void ImageTransformOptions::clear_downsample_size() {
  downsample_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageTransformOptions::_internal_downsample_size() const {
  return downsample_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageTransformOptions::downsample_size() const {
  // @@protoc_insertion_point(field_get:ImageTransformOptions.downsample_size)
  return _internal_downsample_size();
}
inline void ImageTransformOptions::_internal_set_downsample_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  downsample_size_ = value;
}
inline void ImageTransformOptions::set_downsample_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_downsample_size(value);
  // @@protoc_insertion_point(field_set:ImageTransformOptions.downsample_size)
}

// uint32 crop_size_pixel_stride = 4;
inline void ImageTransformOptions::clear_crop_size_pixel_stride() {
  crop_size_pixel_stride_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageTransformOptions::_internal_crop_size_pixel_stride() const {
  return crop_size_pixel_stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageTransformOptions::crop_size_pixel_stride() const {
  // @@protoc_insertion_point(field_get:ImageTransformOptions.crop_size_pixel_stride)
  return _internal_crop_size_pixel_stride();
}
inline void ImageTransformOptions::_internal_set_crop_size_pixel_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  crop_size_pixel_stride_ = value;
}
inline void ImageTransformOptions::set_crop_size_pixel_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crop_size_pixel_stride(value);
  // @@protoc_insertion_point(field_set:ImageTransformOptions.crop_size_pixel_stride)
}

// bool hardcoded_sorta_crop_sizes = 5;
inline void ImageTransformOptions::clear_hardcoded_sorta_crop_sizes() {
  hardcoded_sorta_crop_sizes_ = false;
}
inline bool ImageTransformOptions::_internal_hardcoded_sorta_crop_sizes() const {
  return hardcoded_sorta_crop_sizes_;
}
inline bool ImageTransformOptions::hardcoded_sorta_crop_sizes() const {
  // @@protoc_insertion_point(field_get:ImageTransformOptions.hardcoded_sorta_crop_sizes)
  return _internal_hardcoded_sorta_crop_sizes();
}
inline void ImageTransformOptions::_internal_set_hardcoded_sorta_crop_sizes(bool value) {
  
  hardcoded_sorta_crop_sizes_ = value;
}
inline void ImageTransformOptions::set_hardcoded_sorta_crop_sizes(bool value) {
  _internal_set_hardcoded_sorta_crop_sizes(value);
  // @@protoc_insertion_point(field_set:ImageTransformOptions.hardcoded_sorta_crop_sizes)
}

// bool ratio_based_filter = 6;
inline void ImageTransformOptions::clear_ratio_based_filter() {
  ratio_based_filter_ = false;
}
inline bool ImageTransformOptions::_internal_ratio_based_filter() const {
  return ratio_based_filter_;
}
inline bool ImageTransformOptions::ratio_based_filter() const {
  // @@protoc_insertion_point(field_get:ImageTransformOptions.ratio_based_filter)
  return _internal_ratio_based_filter();
}
inline void ImageTransformOptions::_internal_set_ratio_based_filter(bool value) {
  
  ratio_based_filter_ = value;
}
inline void ImageTransformOptions::set_ratio_based_filter(bool value) {
  _internal_set_ratio_based_filter(value);
  // @@protoc_insertion_point(field_set:ImageTransformOptions.ratio_based_filter)
}

// .ImageOutputType type = 7;
inline void ImageTransformOptions::clear_type() {
  type_ = 0;
}
inline ::ImageOutputType ImageTransformOptions::_internal_type() const {
  return static_cast< ::ImageOutputType >(type_);
}
inline ::ImageOutputType ImageTransformOptions::type() const {
  // @@protoc_insertion_point(field_get:ImageTransformOptions.type)
  return _internal_type();
}
inline void ImageTransformOptions::_internal_set_type(::ImageOutputType value) {
  
  type_ = value;
}
inline void ImageTransformOptions::set_type(::ImageOutputType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ImageTransformOptions.type)
}

// -------------------------------------------------------------------

// WatermarkOverlayImage

// bytes image = 1;
inline void WatermarkOverlayImage::clear_image() {
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WatermarkOverlayImage::image() const {
  // @@protoc_insertion_point(field_get:WatermarkOverlayImage.image)
  return _internal_image();
}
inline void WatermarkOverlayImage::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:WatermarkOverlayImage.image)
}
inline std::string* WatermarkOverlayImage::mutable_image() {
  // @@protoc_insertion_point(field_mutable:WatermarkOverlayImage.image)
  return _internal_mutable_image();
}
inline const std::string& WatermarkOverlayImage::_internal_image() const {
  return image_.Get();
}
inline void WatermarkOverlayImage::_internal_set_image(const std::string& value) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WatermarkOverlayImage::set_image(std::string&& value) {
  
  image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WatermarkOverlayImage.image)
}
inline void WatermarkOverlayImage::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WatermarkOverlayImage.image)
}
inline void WatermarkOverlayImage::set_image(const void* value,
    size_t size) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WatermarkOverlayImage.image)
}
inline std::string* WatermarkOverlayImage::_internal_mutable_image() {
  
  return image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WatermarkOverlayImage::release_image() {
  // @@protoc_insertion_point(field_release:WatermarkOverlayImage.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WatermarkOverlayImage::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WatermarkOverlayImage.image)
}

// float left = 2;
inline void WatermarkOverlayImage::clear_left() {
  left_ = 0;
}
inline float WatermarkOverlayImage::_internal_left() const {
  return left_;
}
inline float WatermarkOverlayImage::left() const {
  // @@protoc_insertion_point(field_get:WatermarkOverlayImage.left)
  return _internal_left();
}
inline void WatermarkOverlayImage::_internal_set_left(float value) {
  
  left_ = value;
}
inline void WatermarkOverlayImage::set_left(float value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:WatermarkOverlayImage.left)
}

// float top = 3;
inline void WatermarkOverlayImage::clear_top() {
  top_ = 0;
}
inline float WatermarkOverlayImage::_internal_top() const {
  return top_;
}
inline float WatermarkOverlayImage::top() const {
  // @@protoc_insertion_point(field_get:WatermarkOverlayImage.top)
  return _internal_top();
}
inline void WatermarkOverlayImage::_internal_set_top(float value) {
  
  top_ = value;
}
inline void WatermarkOverlayImage::set_top(float value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:WatermarkOverlayImage.top)
}

// -------------------------------------------------------------------

// ImageOutputFormats

// repeated .ImageOutputFormat output_formats = 1;
inline int ImageOutputFormats::_internal_output_formats_size() const {
  return output_formats_.size();
}
inline int ImageOutputFormats::output_formats_size() const {
  return _internal_output_formats_size();
}
inline void ImageOutputFormats::clear_output_formats() {
  output_formats_.Clear();
}
inline ::ImageOutputFormat* ImageOutputFormats::mutable_output_formats(int index) {
  // @@protoc_insertion_point(field_mutable:ImageOutputFormats.output_formats)
  return output_formats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageOutputFormat >*
ImageOutputFormats::mutable_output_formats() {
  // @@protoc_insertion_point(field_mutable_list:ImageOutputFormats.output_formats)
  return &output_formats_;
}
inline const ::ImageOutputFormat& ImageOutputFormats::_internal_output_formats(int index) const {
  return output_formats_.Get(index);
}
inline const ::ImageOutputFormat& ImageOutputFormats::output_formats(int index) const {
  // @@protoc_insertion_point(field_get:ImageOutputFormats.output_formats)
  return _internal_output_formats(index);
}
inline ::ImageOutputFormat* ImageOutputFormats::_internal_add_output_formats() {
  return output_formats_.Add();
}
inline ::ImageOutputFormat* ImageOutputFormats::add_output_formats() {
  // @@protoc_insertion_point(field_add:ImageOutputFormats.output_formats)
  return _internal_add_output_formats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageOutputFormat >&
ImageOutputFormats::output_formats() const {
  // @@protoc_insertion_point(field_list:ImageOutputFormats.output_formats)
  return output_formats_;
}

// -------------------------------------------------------------------

// VideoOutputFormat

// uint32 width_px = 1;
inline void VideoOutputFormat::clear_width_px() {
  width_px_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoOutputFormat::_internal_width_px() const {
  return width_px_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoOutputFormat::width_px() const {
  // @@protoc_insertion_point(field_get:VideoOutputFormat.width_px)
  return _internal_width_px();
}
inline void VideoOutputFormat::_internal_set_width_px(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_px_ = value;
}
inline void VideoOutputFormat::set_width_px(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width_px(value);
  // @@protoc_insertion_point(field_set:VideoOutputFormat.width_px)
}

// uint32 height_px = 2;
inline void VideoOutputFormat::clear_height_px() {
  height_px_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoOutputFormat::_internal_height_px() const {
  return height_px_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoOutputFormat::height_px() const {
  // @@protoc_insertion_point(field_get:VideoOutputFormat.height_px)
  return _internal_height_px();
}
inline void VideoOutputFormat::_internal_set_height_px(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_px_ = value;
}
inline void VideoOutputFormat::set_height_px(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height_px(value);
  // @@protoc_insertion_point(field_set:VideoOutputFormat.height_px)
}

// float seconds_between_frames = 3;
inline void VideoOutputFormat::clear_seconds_between_frames() {
  seconds_between_frames_ = 0;
}
inline float VideoOutputFormat::_internal_seconds_between_frames() const {
  return seconds_between_frames_;
}
inline float VideoOutputFormat::seconds_between_frames() const {
  // @@protoc_insertion_point(field_get:VideoOutputFormat.seconds_between_frames)
  return _internal_seconds_between_frames();
}
inline void VideoOutputFormat::_internal_set_seconds_between_frames(float value) {
  
  seconds_between_frames_ = value;
}
inline void VideoOutputFormat::set_seconds_between_frames(float value) {
  _internal_set_seconds_between_frames(value);
  // @@protoc_insertion_point(field_set:VideoOutputFormat.seconds_between_frames)
}

// -------------------------------------------------------------------

// VideoOutputFormats

// repeated .VideoOutputFormats output_formats = 1;
inline int VideoOutputFormats::_internal_output_formats_size() const {
  return output_formats_.size();
}
inline int VideoOutputFormats::output_formats_size() const {
  return _internal_output_formats_size();
}
inline void VideoOutputFormats::clear_output_formats() {
  output_formats_.Clear();
}
inline ::VideoOutputFormats* VideoOutputFormats::mutable_output_formats(int index) {
  // @@protoc_insertion_point(field_mutable:VideoOutputFormats.output_formats)
  return output_formats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoOutputFormats >*
VideoOutputFormats::mutable_output_formats() {
  // @@protoc_insertion_point(field_mutable_list:VideoOutputFormats.output_formats)
  return &output_formats_;
}
inline const ::VideoOutputFormats& VideoOutputFormats::_internal_output_formats(int index) const {
  return output_formats_.Get(index);
}
inline const ::VideoOutputFormats& VideoOutputFormats::output_formats(int index) const {
  // @@protoc_insertion_point(field_get:VideoOutputFormats.output_formats)
  return _internal_output_formats(index);
}
inline ::VideoOutputFormats* VideoOutputFormats::_internal_add_output_formats() {
  return output_formats_.Add();
}
inline ::VideoOutputFormats* VideoOutputFormats::add_output_formats() {
  // @@protoc_insertion_point(field_add:VideoOutputFormats.output_formats)
  return _internal_add_output_formats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoOutputFormats >&
VideoOutputFormats::output_formats() const {
  // @@protoc_insertion_point(field_list:VideoOutputFormats.output_formats)
  return output_formats_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ImageTransform_ImageTransformType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ImageTransform_ImageTransformType>() {
  return ::ImageTransform_ImageTransformType_descriptor();
}
template <> struct is_proto_enum< ::ImageOpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ImageOpType>() {
  return ::ImageOpType_descriptor();
}
template <> struct is_proto_enum< ::ImageOutputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ImageOutputType>() {
  return ::ImageOutputType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fmedia_5fprocessor_2fmedia_2eproto
